// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: gitserver.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperatorKind int32

const (
	OperatorKind_OPERATOR_KIND_UNSPECIFIED OperatorKind = 0
	OperatorKind_OPERATOR_KIND_AND         OperatorKind = 1
	OperatorKind_OPERATOR_KIND_OR          OperatorKind = 2
	OperatorKind_OPERATOR_KIND_NOT         OperatorKind = 3
)

// Enum value maps for OperatorKind.
var (
	OperatorKind_name = map[int32]string{
		0: "OPERATOR_KIND_UNSPECIFIED",
		1: "OPERATOR_KIND_AND",
		2: "OPERATOR_KIND_OR",
		3: "OPERATOR_KIND_NOT",
	}
	OperatorKind_value = map[string]int32{
		"OPERATOR_KIND_UNSPECIFIED": 0,
		"OPERATOR_KIND_AND":         1,
		"OPERATOR_KIND_OR":          2,
		"OPERATOR_KIND_NOT":         3,
	}
)

func (x OperatorKind) Enum() *OperatorKind {
	p := new(OperatorKind)
	*p = x
	return p
}

func (x OperatorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_gitserver_proto_enumTypes[0].Descriptor()
}

func (OperatorKind) Type() protoreflect.EnumType {
	return &file_gitserver_proto_enumTypes[0]
}

func (x OperatorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorKind.Descriptor instead.
func (OperatorKind) EnumDescriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{0}
}

type GitObject_ObjectType int32

const (
	GitObject_OBJECT_TYPE_UNSPECIFIED GitObject_ObjectType = 0
	GitObject_OBJECT_TYPE_COMMIT      GitObject_ObjectType = 1
	GitObject_OBJECT_TYPE_TAG         GitObject_ObjectType = 2
	GitObject_OBJECT_TYPE_TREE        GitObject_ObjectType = 3
	GitObject_OBJECT_TYPE_BLOB        GitObject_ObjectType = 4
)

// Enum value maps for GitObject_ObjectType.
var (
	GitObject_ObjectType_name = map[int32]string{
		0: "OBJECT_TYPE_UNSPECIFIED",
		1: "OBJECT_TYPE_COMMIT",
		2: "OBJECT_TYPE_TAG",
		3: "OBJECT_TYPE_TREE",
		4: "OBJECT_TYPE_BLOB",
	}
	GitObject_ObjectType_value = map[string]int32{
		"OBJECT_TYPE_UNSPECIFIED": 0,
		"OBJECT_TYPE_COMMIT":      1,
		"OBJECT_TYPE_TAG":         2,
		"OBJECT_TYPE_TREE":        3,
		"OBJECT_TYPE_BLOB":        4,
	}
)

func (x GitObject_ObjectType) Enum() *GitObject_ObjectType {
	p := new(GitObject_ObjectType)
	*p = x
	return p
}

func (x GitObject_ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitObject_ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitserver_proto_enumTypes[1].Descriptor()
}

func (GitObject_ObjectType) Type() protoreflect.EnumType {
	return &file_gitserver_proto_enumTypes[1]
}

func (x GitObject_ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitObject_ObjectType.Descriptor instead.
func (GitObject_ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{45, 0}
}

type PatchCommitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message is the commit message to be used for the commit
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// author_name is the name of the author to be used for the commit
	AuthorName string `protobuf:"bytes,2,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	// author_email is the email of the author to be used for the commit
	AuthorEmail string `protobuf:"bytes,3,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	// committer_name is the name of the committer to be used for the commit
	CommitterName string `protobuf:"bytes,4,opt,name=committer_name,json=committerName,proto3" json:"committer_name,omitempty"`
	// committer_email is the email of the committer to be used for the commit
	CommitterEmail string `protobuf:"bytes,5,opt,name=committer_email,json=committerEmail,proto3" json:"committer_email,omitempty"`
	// author_date is the date of the author to be used for the commit
	Date *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *PatchCommitInfo) Reset() {
	*x = PatchCommitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCommitInfo) ProtoMessage() {}

func (x *PatchCommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCommitInfo.ProtoReflect.Descriptor instead.
func (*PatchCommitInfo) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{0}
}

func (x *PatchCommitInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PatchCommitInfo) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *PatchCommitInfo) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *PatchCommitInfo) GetCommitterName() string {
	if x != nil {
		return x.CommitterName
	}
	return ""
}

func (x *PatchCommitInfo) GetCommitterEmail() string {
	if x != nil {
		return x.CommitterEmail
	}
	return ""
}

func (x *PatchCommitInfo) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type PushConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// remote_url is the git remote URL to which to push the commits.
	// The URL needs to include HTTP basic auth credentials if no
	// unauthenticated requests are allowed by the remote host.
	RemoteUrl string `protobuf:"bytes,1,opt,name=remote_url,json=remoteUrl,proto3" json:"remote_url,omitempty"`
	// private_key is used when the remote URL uses scheme `ssh`. If set,
	// this value is used as the content of the private key. Needs to be
	// set in conjunction with a passphrase.
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// passphrase is the passphrase to decrypt the private key. It is required
	// when passing PrivateKey.
	Passphrase string `protobuf:"bytes,3,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (x *PushConfig) Reset() {
	*x = PushConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushConfig) ProtoMessage() {}

func (x *PushConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushConfig.ProtoReflect.Descriptor instead.
func (*PushConfig) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{1}
}

func (x *PushConfig) GetRemoteUrl() string {
	if x != nil {
		return x.RemoteUrl
	}
	return ""
}

func (x *PushConfig) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *PushConfig) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

// CreateCommitFromPatchBinaryRequest is the request information needed for creating
// the simulated staging area git object for a repo.
type CreateCommitFromPatchBinaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to be updated
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// base_commit is the revision that the staging area object is based on
	BaseCommit string `protobuf:"bytes,2,opt,name=base_commit,json=baseCommit,proto3" json:"base_commit,omitempty"`
	// patch is the diff contents to be used to create the staging area revision
	Patch []byte `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
	// target_ref is the ref that will be created for this patch
	TargetRef string `protobuf:"bytes,4,opt,name=target_ref,json=targetRef,proto3" json:"target_ref,omitempty"`
	// unique_ref is a boolean that indicates whether a unique number will be appended to the end (ie TargetRef-{#}). The generated ref will be returned.
	UniqueRef bool `protobuf:"varint,5,opt,name=unique_ref,json=uniqueRef,proto3" json:"unique_ref,omitempty"`
	// commit_info is the information to be used for the commit
	CommitInfo *PatchCommitInfo `protobuf:"bytes,6,opt,name=commit_info,json=commitInfo,proto3" json:"commit_info,omitempty"`
	// push_config is the configuration to be used for pushing the commit
	Push         *PushConfig `protobuf:"bytes,7,opt,name=push,proto3" json:"push,omitempty"`
	GitApplyArgs []string    `protobuf:"bytes,8,rep,name=git_apply_args,json=gitApplyArgs,proto3" json:"git_apply_args,omitempty"`
}

func (x *CreateCommitFromPatchBinaryRequest) Reset() {
	*x = CreateCommitFromPatchBinaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitFromPatchBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitFromPatchBinaryRequest) ProtoMessage() {}

func (x *CreateCommitFromPatchBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitFromPatchBinaryRequest.ProtoReflect.Descriptor instead.
func (*CreateCommitFromPatchBinaryRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCommitFromPatchBinaryRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *CreateCommitFromPatchBinaryRequest) GetBaseCommit() string {
	if x != nil {
		return x.BaseCommit
	}
	return ""
}

func (x *CreateCommitFromPatchBinaryRequest) GetPatch() []byte {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *CreateCommitFromPatchBinaryRequest) GetTargetRef() string {
	if x != nil {
		return x.TargetRef
	}
	return ""
}

func (x *CreateCommitFromPatchBinaryRequest) GetUniqueRef() bool {
	if x != nil {
		return x.UniqueRef
	}
	return false
}

func (x *CreateCommitFromPatchBinaryRequest) GetCommitInfo() *PatchCommitInfo {
	if x != nil {
		return x.CommitInfo
	}
	return nil
}

func (x *CreateCommitFromPatchBinaryRequest) GetPush() *PushConfig {
	if x != nil {
		return x.Push
	}
	return nil
}

func (x *CreateCommitFromPatchBinaryRequest) GetGitApplyArgs() []string {
	if x != nil {
		return x.GitApplyArgs
	}
	return nil
}

type CreateCommitFromPatchError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repository_name is the name of the repository that the error occurred on
	RepositoryName string `protobuf:"bytes,1,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	// internal_error is the error that occurred on the server
	InternalError string `protobuf:"bytes,2,opt,name=internal_error,json=internalError,proto3" json:"internal_error,omitempty"`
	// command is th git command that was attempted
	Command string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	// combined_output is the combined stderr and stdout from running the command
	CombinedOutput string `protobuf:"bytes,4,opt,name=combined_output,json=combinedOutput,proto3" json:"combined_output,omitempty"`
}

func (x *CreateCommitFromPatchError) Reset() {
	*x = CreateCommitFromPatchError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitFromPatchError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitFromPatchError) ProtoMessage() {}

func (x *CreateCommitFromPatchError) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitFromPatchError.ProtoReflect.Descriptor instead.
func (*CreateCommitFromPatchError) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCommitFromPatchError) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *CreateCommitFromPatchError) GetInternalError() string {
	if x != nil {
		return x.InternalError
	}
	return ""
}

func (x *CreateCommitFromPatchError) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CreateCommitFromPatchError) GetCombinedOutput() string {
	if x != nil {
		return x.CombinedOutput
	}
	return ""
}

// CreateCommitFromPatchBinaryResponse is the response type returned after creating
// a commit from a patch
type CreateCommitFromPatchBinaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rev is the tag that the staging object can be found at
	Rev string `protobuf:"bytes,1,opt,name=rev,proto3" json:"rev,omitempty"`
	// error is populated only on error
	Error *CreateCommitFromPatchError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateCommitFromPatchBinaryResponse) Reset() {
	*x = CreateCommitFromPatchBinaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitFromPatchBinaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitFromPatchBinaryResponse) ProtoMessage() {}

func (x *CreateCommitFromPatchBinaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitFromPatchBinaryResponse.ProtoReflect.Descriptor instead.
func (*CreateCommitFromPatchBinaryResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCommitFromPatchBinaryResponse) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

func (x *CreateCommitFromPatchBinaryResponse) GetError() *CreateCommitFromPatchError {
	if x != nil {
		return x.Error
	}
	return nil
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo           string   `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	EnsureRevision string   `protobuf:"bytes,2,opt,name=ensure_revision,json=ensureRevision,proto3" json:"ensure_revision,omitempty"`
	Args           []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Stdin          []byte   `protobuf:"bytes,4,opt,name=stdin,proto3" json:"stdin,omitempty"`
	NoTimeout      bool     `protobuf:"varint,5,opt,name=no_timeout,json=noTimeout,proto3" json:"no_timeout,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{5}
}

func (x *ExecRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ExecRequest) GetEnsureRevision() string {
	if x != nil {
		return x.EnsureRevision
	}
	return ""
}

func (x *ExecRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecRequest) GetStdin() []byte {
	if x != nil {
		return x.Stdin
	}
	return nil
}

func (x *ExecRequest) GetNoTimeout() bool {
	if x != nil {
		return x.NoTimeout
	}
	return false
}

type ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExecResponse) Reset() {
	*x = ExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResponse) ProtoMessage() {}

func (x *ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResponse.ProtoReflect.Descriptor instead.
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{6}
}

func (x *ExecResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type NotFoundPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo            string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	CloneInProgress bool   `protobuf:"varint,2,opt,name=clone_in_progress,json=cloneInProgress,proto3" json:"clone_in_progress,omitempty"`
	CloneProgress   string `protobuf:"bytes,3,opt,name=clone_progress,json=cloneProgress,proto3" json:"clone_progress,omitempty"`
}

func (x *NotFoundPayload) Reset() {
	*x = NotFoundPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotFoundPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotFoundPayload) ProtoMessage() {}

func (x *NotFoundPayload) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotFoundPayload.ProtoReflect.Descriptor instead.
func (*NotFoundPayload) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{7}
}

func (x *NotFoundPayload) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *NotFoundPayload) GetCloneInProgress() bool {
	if x != nil {
		return x.CloneInProgress
	}
	return false
}

func (x *NotFoundPayload) GetCloneProgress() string {
	if x != nil {
		return x.CloneProgress
	}
	return ""
}

type ExecStatusPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Stderr     string `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *ExecStatusPayload) Reset() {
	*x = ExecStatusPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStatusPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStatusPayload) ProtoMessage() {}

func (x *ExecStatusPayload) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStatusPayload.ProtoReflect.Descriptor instead.
func (*ExecStatusPayload) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{8}
}

func (x *ExecStatusPayload) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ExecStatusPayload) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to be searched
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// revisions is the list of git revision to be searched. They are all passed
	// to the same underlying git command, so the searched commits will be the
	// union of all revisions listed.
	Revisions []*RevisionSpecifier `protobuf:"bytes,2,rep,name=revisions,proto3" json:"revisions,omitempty"`
	// limit is a limit on the number of search results returned. Additional
	// results will be ignored.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// include_diff specifies whether the full diff should be included on the result messages.
	// This can be expensive, so is disabled by default.
	IncludeDiff bool `protobuf:"varint,4,opt,name=include_diff,json=includeDiff,proto3" json:"include_diff,omitempty"`
	// include_modified specifies whether to include the list of modified files
	// in the search results. This can be expensive, so is disabled by default.
	IncludeModifiedFiles bool `protobuf:"varint,5,opt,name=include_modified_files,json=includeModifiedFiles,proto3" json:"include_modified_files,omitempty"`
	// query is a tree of filters to apply to commits being searched.
	Query *QueryNode `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{9}
}

func (x *SearchRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *SearchRequest) GetRevisions() []*RevisionSpecifier {
	if x != nil {
		return x.Revisions
	}
	return nil
}

func (x *SearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchRequest) GetIncludeDiff() bool {
	if x != nil {
		return x.IncludeDiff
	}
	return false
}

func (x *SearchRequest) GetIncludeModifiedFiles() bool {
	if x != nil {
		return x.IncludeModifiedFiles
	}
	return false
}

func (x *SearchRequest) GetQuery() *QueryNode {
	if x != nil {
		return x.Query
	}
	return nil
}

type RevisionSpecifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RevSpec is a revision range specifier suitable for passing to git. See
	// the manpage gitrevisions(7).
	RevSpec string `protobuf:"bytes,1,opt,name=rev_spec,json=revSpec,proto3" json:"rev_spec,omitempty"`
	// RefGlob is a reference glob to pass to git. See the documentation for
	// "--glob" in git-log.
	RefGlob string `protobuf:"bytes,2,opt,name=ref_glob,json=refGlob,proto3" json:"ref_glob,omitempty"`
	// ExcludeRefGlob is a glob for references to exclude. See the
	// documentation for "--exclude" in git-log.
	ExcludeRefGlob string `protobuf:"bytes,3,opt,name=exclude_ref_glob,json=excludeRefGlob,proto3" json:"exclude_ref_glob,omitempty"`
}

func (x *RevisionSpecifier) Reset() {
	*x = RevisionSpecifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionSpecifier) ProtoMessage() {}

func (x *RevisionSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionSpecifier.ProtoReflect.Descriptor instead.
func (*RevisionSpecifier) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{10}
}

func (x *RevisionSpecifier) GetRevSpec() string {
	if x != nil {
		return x.RevSpec
	}
	return ""
}

func (x *RevisionSpecifier) GetRefGlob() string {
	if x != nil {
		return x.RefGlob
	}
	return ""
}

func (x *RevisionSpecifier) GetExcludeRefGlob() string {
	if x != nil {
		return x.ExcludeRefGlob
	}
	return ""
}

// AuthorMatchesNode is a predicate that matches if the author's name or email address
// matches the regex pattern.
type AuthorMatchesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *AuthorMatchesNode) Reset() {
	*x = AuthorMatchesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorMatchesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorMatchesNode) ProtoMessage() {}

func (x *AuthorMatchesNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorMatchesNode.ProtoReflect.Descriptor instead.
func (*AuthorMatchesNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{11}
}

func (x *AuthorMatchesNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *AuthorMatchesNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// CommitterMatchesNode is a predicate that matches if the author's name or email address
// matches the regex pattern.
type CommitterMatchesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *CommitterMatchesNode) Reset() {
	*x = CommitterMatchesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitterMatchesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitterMatchesNode) ProtoMessage() {}

func (x *CommitterMatchesNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitterMatchesNode.ProtoReflect.Descriptor instead.
func (*CommitterMatchesNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{12}
}

func (x *CommitterMatchesNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *CommitterMatchesNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// CommitBeforeNode is a predicate that matches if the commit is before the given date
type CommitBeforeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CommitBeforeNode) Reset() {
	*x = CommitBeforeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitBeforeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitBeforeNode) ProtoMessage() {}

func (x *CommitBeforeNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitBeforeNode.ProtoReflect.Descriptor instead.
func (*CommitBeforeNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{13}
}

func (x *CommitBeforeNode) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// CommitAfterNode is a predicate that matches if the commit is after the given date
type CommitAfterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CommitAfterNode) Reset() {
	*x = CommitAfterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitAfterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitAfterNode) ProtoMessage() {}

func (x *CommitAfterNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitAfterNode.ProtoReflect.Descriptor instead.
func (*CommitAfterNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{14}
}

func (x *CommitAfterNode) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// MessageMatchesNode is a predicate that matches if the commit message matches
// the provided regex pattern.
type MessageMatchesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *MessageMatchesNode) Reset() {
	*x = MessageMatchesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMatchesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMatchesNode) ProtoMessage() {}

func (x *MessageMatchesNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMatchesNode.ProtoReflect.Descriptor instead.
func (*MessageMatchesNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{15}
}

func (x *MessageMatchesNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *MessageMatchesNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// DiffMatchesNode is a a predicate that matches if any of the lines changed by
// the commit match the given regex pattern.
type DiffMatchesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *DiffMatchesNode) Reset() {
	*x = DiffMatchesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffMatchesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffMatchesNode) ProtoMessage() {}

func (x *DiffMatchesNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffMatchesNode.ProtoReflect.Descriptor instead.
func (*DiffMatchesNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{16}
}

func (x *DiffMatchesNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *DiffMatchesNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// DiffModifiesFileNode is a predicate that matches if the commit modifies any files
// that match the given regex pattern.
type DiffModifiesFileNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *DiffModifiesFileNode) Reset() {
	*x = DiffModifiesFileNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffModifiesFileNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffModifiesFileNode) ProtoMessage() {}

func (x *DiffModifiesFileNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffModifiesFileNode.ProtoReflect.Descriptor instead.
func (*DiffModifiesFileNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{17}
}

func (x *DiffModifiesFileNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *DiffModifiesFileNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// BooleanNode is a predicate that will either always match or never match
type BooleanNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanNode) Reset() {
	*x = BooleanNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanNode) ProtoMessage() {}

func (x *BooleanNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanNode.ProtoReflect.Descriptor instead.
func (*BooleanNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{18}
}

func (x *BooleanNode) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type OperatorNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     OperatorKind `protobuf:"varint,1,opt,name=kind,proto3,enum=gitserver.v1.OperatorKind" json:"kind,omitempty"`
	Operands []*QueryNode `protobuf:"bytes,2,rep,name=operands,proto3" json:"operands,omitempty"`
}

func (x *OperatorNode) Reset() {
	*x = OperatorNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorNode) ProtoMessage() {}

func (x *OperatorNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorNode.ProtoReflect.Descriptor instead.
func (*OperatorNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{19}
}

func (x *OperatorNode) GetKind() OperatorKind {
	if x != nil {
		return x.Kind
	}
	return OperatorKind_OPERATOR_KIND_UNSPECIFIED
}

func (x *OperatorNode) GetOperands() []*QueryNode {
	if x != nil {
		return x.Operands
	}
	return nil
}

type QueryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*QueryNode_AuthorMatches
	//	*QueryNode_CommitterMatches
	//	*QueryNode_CommitBefore
	//	*QueryNode_CommitAfter
	//	*QueryNode_MessageMatches
	//	*QueryNode_DiffMatches
	//	*QueryNode_DiffModifiesFile
	//	*QueryNode_Boolean
	//	*QueryNode_Operator
	Value isQueryNode_Value `protobuf_oneof:"value"`
}

func (x *QueryNode) Reset() {
	*x = QueryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNode) ProtoMessage() {}

func (x *QueryNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNode.ProtoReflect.Descriptor instead.
func (*QueryNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{20}
}

func (m *QueryNode) GetValue() isQueryNode_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QueryNode) GetAuthorMatches() *AuthorMatchesNode {
	if x, ok := x.GetValue().(*QueryNode_AuthorMatches); ok {
		return x.AuthorMatches
	}
	return nil
}

func (x *QueryNode) GetCommitterMatches() *CommitterMatchesNode {
	if x, ok := x.GetValue().(*QueryNode_CommitterMatches); ok {
		return x.CommitterMatches
	}
	return nil
}

func (x *QueryNode) GetCommitBefore() *CommitBeforeNode {
	if x, ok := x.GetValue().(*QueryNode_CommitBefore); ok {
		return x.CommitBefore
	}
	return nil
}

func (x *QueryNode) GetCommitAfter() *CommitAfterNode {
	if x, ok := x.GetValue().(*QueryNode_CommitAfter); ok {
		return x.CommitAfter
	}
	return nil
}

func (x *QueryNode) GetMessageMatches() *MessageMatchesNode {
	if x, ok := x.GetValue().(*QueryNode_MessageMatches); ok {
		return x.MessageMatches
	}
	return nil
}

func (x *QueryNode) GetDiffMatches() *DiffMatchesNode {
	if x, ok := x.GetValue().(*QueryNode_DiffMatches); ok {
		return x.DiffMatches
	}
	return nil
}

func (x *QueryNode) GetDiffModifiesFile() *DiffModifiesFileNode {
	if x, ok := x.GetValue().(*QueryNode_DiffModifiesFile); ok {
		return x.DiffModifiesFile
	}
	return nil
}

func (x *QueryNode) GetBoolean() *BooleanNode {
	if x, ok := x.GetValue().(*QueryNode_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QueryNode) GetOperator() *OperatorNode {
	if x, ok := x.GetValue().(*QueryNode_Operator); ok {
		return x.Operator
	}
	return nil
}

type isQueryNode_Value interface {
	isQueryNode_Value()
}

type QueryNode_AuthorMatches struct {
	AuthorMatches *AuthorMatchesNode `protobuf:"bytes,1,opt,name=author_matches,json=authorMatches,proto3,oneof"`
}

type QueryNode_CommitterMatches struct {
	CommitterMatches *CommitterMatchesNode `protobuf:"bytes,2,opt,name=committer_matches,json=committerMatches,proto3,oneof"`
}

type QueryNode_CommitBefore struct {
	CommitBefore *CommitBeforeNode `protobuf:"bytes,3,opt,name=commit_before,json=commitBefore,proto3,oneof"`
}

type QueryNode_CommitAfter struct {
	CommitAfter *CommitAfterNode `protobuf:"bytes,4,opt,name=commit_after,json=commitAfter,proto3,oneof"`
}

type QueryNode_MessageMatches struct {
	MessageMatches *MessageMatchesNode `protobuf:"bytes,5,opt,name=message_matches,json=messageMatches,proto3,oneof"`
}

type QueryNode_DiffMatches struct {
	DiffMatches *DiffMatchesNode `protobuf:"bytes,6,opt,name=diff_matches,json=diffMatches,proto3,oneof"`
}

type QueryNode_DiffModifiesFile struct {
	DiffModifiesFile *DiffModifiesFileNode `protobuf:"bytes,7,opt,name=diff_modifies_file,json=diffModifiesFile,proto3,oneof"`
}

type QueryNode_Boolean struct {
	Boolean *BooleanNode `protobuf:"bytes,8,opt,name=boolean,proto3,oneof"`
}

type QueryNode_Operator struct {
	Operator *OperatorNode `protobuf:"bytes,9,opt,name=operator,proto3,oneof"`
}

func (*QueryNode_AuthorMatches) isQueryNode_Value() {}

func (*QueryNode_CommitterMatches) isQueryNode_Value() {}

func (*QueryNode_CommitBefore) isQueryNode_Value() {}

func (*QueryNode_CommitAfter) isQueryNode_Value() {}

func (*QueryNode_MessageMatches) isQueryNode_Value() {}

func (*QueryNode_DiffMatches) isQueryNode_Value() {}

func (*QueryNode_DiffModifiesFile) isQueryNode_Value() {}

func (*QueryNode_Boolean) isQueryNode_Value() {}

func (*QueryNode_Operator) isQueryNode_Value() {}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*SearchResponse_Match
	//	*SearchResponse_LimitHit
	Message isSearchResponse_Message `protobuf_oneof:"message"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{21}
}

func (m *SearchResponse) GetMessage() isSearchResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *SearchResponse) GetMatch() *CommitMatch {
	if x, ok := x.GetMessage().(*SearchResponse_Match); ok {
		return x.Match
	}
	return nil
}

func (x *SearchResponse) GetLimitHit() bool {
	if x, ok := x.GetMessage().(*SearchResponse_LimitHit); ok {
		return x.LimitHit
	}
	return false
}

type isSearchResponse_Message interface {
	isSearchResponse_Message()
}

type SearchResponse_Match struct {
	Match *CommitMatch `protobuf:"bytes,1,opt,name=match,proto3,oneof"`
}

type SearchResponse_LimitHit struct {
	LimitHit bool `protobuf:"varint,2,opt,name=limit_hit,json=limitHit,proto3,oneof"`
}

func (*SearchResponse_Match) isSearchResponse_Message() {}

func (*SearchResponse_LimitHit) isSearchResponse_Message() {}

type CommitMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// oid is the 40-character, hex-encoded commit hash
	Oid       string                 `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Author    *CommitMatch_Signature `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Committer *CommitMatch_Signature `protobuf:"bytes,3,opt,name=committer,proto3" json:"committer,omitempty"`
	// parents is the list of commit hashes for this commit's parents
	Parents    []string `protobuf:"bytes,4,rep,name=parents,proto3" json:"parents,omitempty"`
	Refs       []string `protobuf:"bytes,5,rep,name=refs,proto3" json:"refs,omitempty"`
	SourceRefs []string `protobuf:"bytes,6,rep,name=source_refs,json=sourceRefs,proto3" json:"source_refs,omitempty"`
	// message is the commits message and a list of ranges that match
	// the search query.
	Message *CommitMatch_MatchedString `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	// diff is the diff between this commit and its first parent.
	// May be unset if `include_diff` was not specified in the request.
	Diff *CommitMatch_MatchedString `protobuf:"bytes,8,opt,name=diff,proto3" json:"diff,omitempty"`
	// modified_files is the list of files modified by this commit compared
	// to its first parent. May be unset if `include_modified_files` is not
	// specified in the request.
	ModifiedFiles []string `protobuf:"bytes,9,rep,name=modified_files,json=modifiedFiles,proto3" json:"modified_files,omitempty"`
}

func (x *CommitMatch) Reset() {
	*x = CommitMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch) ProtoMessage() {}

func (x *CommitMatch) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch.ProtoReflect.Descriptor instead.
func (*CommitMatch) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{22}
}

func (x *CommitMatch) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *CommitMatch) GetAuthor() *CommitMatch_Signature {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CommitMatch) GetCommitter() *CommitMatch_Signature {
	if x != nil {
		return x.Committer
	}
	return nil
}

func (x *CommitMatch) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *CommitMatch) GetRefs() []string {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *CommitMatch) GetSourceRefs() []string {
	if x != nil {
		return x.SourceRefs
	}
	return nil
}

func (x *CommitMatch) GetMessage() *CommitMatch_MatchedString {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CommitMatch) GetDiff() *CommitMatch_MatchedString {
	if x != nil {
		return x.Diff
	}
	return nil
}

func (x *CommitMatch) GetModifiedFiles() []string {
	if x != nil {
		return x.ModifiedFiles
	}
	return nil
}

// ArchiveRequest is set of parameters for the Archive RPC.
type ArchiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to be archived
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// treeish is the tree or commit to produce an archive for
	Treeish string `protobuf:"bytes,2,opt,name=treeish,proto3" json:"treeish,omitempty"`
	// format is the format of the resulting archive (usually "tar" or "zip")
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// pathspecs is the list of pathspecs to include in the archive. If empty, all pathspecs are included.
	Pathspecs []string `protobuf:"bytes,4,rep,name=pathspecs,proto3" json:"pathspecs,omitempty"`
}

func (x *ArchiveRequest) Reset() {
	*x = ArchiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRequest) ProtoMessage() {}

func (x *ArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{23}
}

func (x *ArchiveRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ArchiveRequest) GetTreeish() string {
	if x != nil {
		return x.Treeish
	}
	return ""
}

func (x *ArchiveRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ArchiveRequest) GetPathspecs() []string {
	if x != nil {
		return x.Pathspecs
	}
	return nil
}

// ArchiveResponse is the response from the Archive RPC that returns a chunk of the archive.
type ArchiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ArchiveResponse) Reset() {
	*x = ArchiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveResponse) ProtoMessage() {}

func (x *ArchiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveResponse.ProtoReflect.Descriptor instead.
func (*ArchiveResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{24}
}

func (x *ArchiveResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// IsRepoCloneableRequest is a request to check if a repository is cloneable.
type IsRepoCloneableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to check.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *IsRepoCloneableRequest) Reset() {
	*x = IsRepoCloneableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRepoCloneableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRepoCloneableRequest) ProtoMessage() {}

func (x *IsRepoCloneableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRepoCloneableRequest.ProtoReflect.Descriptor instead.
func (*IsRepoCloneableRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{25}
}

func (x *IsRepoCloneableRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

// IsRepoCloneableResponse is the response from the IsCloneable RPC.
type IsRepoCloneableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cloneable is true if the repository is cloneable.
	Cloneable bool `protobuf:"varint,1,opt,name=cloneable,proto3" json:"cloneable,omitempty"`
	// cloned is true if the repository was cloned in the past.
	Cloned bool `protobuf:"varint,2,opt,name=cloned,proto3" json:"cloned,omitempty"`
	// reason is why the repository is not cloneable.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *IsRepoCloneableResponse) Reset() {
	*x = IsRepoCloneableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRepoCloneableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRepoCloneableResponse) ProtoMessage() {}

func (x *IsRepoCloneableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRepoCloneableResponse.ProtoReflect.Descriptor instead.
func (*IsRepoCloneableResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{26}
}

func (x *IsRepoCloneableResponse) GetCloneable() bool {
	if x != nil {
		return x.Cloneable
	}
	return false
}

func (x *IsRepoCloneableResponse) GetCloned() bool {
	if x != nil {
		return x.Cloned
	}
	return false
}

func (x *IsRepoCloneableResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// RepoCloneRequest is a request to clone a repository.
type RepoCloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to clone.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *RepoCloneRequest) Reset() {
	*x = RepoCloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCloneRequest) ProtoMessage() {}

func (x *RepoCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCloneRequest.ProtoReflect.Descriptor instead.
func (*RepoCloneRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{27}
}

func (x *RepoCloneRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type RepoCloneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error is the error that occurred during cloning.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RepoCloneResponse) Reset() {
	*x = RepoCloneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCloneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCloneResponse) ProtoMessage() {}

func (x *RepoCloneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCloneResponse.ProtoReflect.Descriptor instead.
func (*RepoCloneResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{28}
}

func (x *RepoCloneResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// RepoCloneProgressRequest is a request for information about the clone progress of multiple
// repositories on gitserver.
type RepoCloneProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []string `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *RepoCloneProgressRequest) Reset() {
	*x = RepoCloneProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCloneProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCloneProgressRequest) ProtoMessage() {}

func (x *RepoCloneProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCloneProgressRequest.ProtoReflect.Descriptor instead.
func (*RepoCloneProgressRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{29}
}

func (x *RepoCloneProgressRequest) GetRepos() []string {
	if x != nil {
		return x.Repos
	}
	return nil
}

// RepoCloneProgress is information about the clone progress of a repo
type RepoCloneProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clone_in_progress is whether the repository is currently being cloned
	CloneInProgress bool `protobuf:"varint,1,opt,name=clone_in_progress,json=cloneInProgress,proto3" json:"clone_in_progress,omitempty"`
	// clone_progress is a progress message from the running clone command.
	CloneProgress string `protobuf:"bytes,2,opt,name=clone_progress,json=cloneProgress,proto3" json:"clone_progress,omitempty"`
	// cloned is whether the repository has been cloned successfully
	Cloned bool `protobuf:"varint,3,opt,name=cloned,proto3" json:"cloned,omitempty"`
}

func (x *RepoCloneProgress) Reset() {
	*x = RepoCloneProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCloneProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCloneProgress) ProtoMessage() {}

func (x *RepoCloneProgress) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCloneProgress.ProtoReflect.Descriptor instead.
func (*RepoCloneProgress) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{30}
}

func (x *RepoCloneProgress) GetCloneInProgress() bool {
	if x != nil {
		return x.CloneInProgress
	}
	return false
}

func (x *RepoCloneProgress) GetCloneProgress() string {
	if x != nil {
		return x.CloneProgress
	}
	return ""
}

func (x *RepoCloneProgress) GetCloned() bool {
	if x != nil {
		return x.Cloned
	}
	return false
}

// RepoCloneProgressResponse is the response to a repository clone progress request
// for multiple repositories at the same time.
type RepoCloneProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// results is a map from repository name to clone progress information
	Results map[string]*RepoCloneProgress `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RepoCloneProgressResponse) Reset() {
	*x = RepoCloneProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCloneProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCloneProgressResponse) ProtoMessage() {}

func (x *RepoCloneProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCloneProgressResponse.ProtoReflect.Descriptor instead.
func (*RepoCloneProgressResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{31}
}

func (x *RepoCloneProgressResponse) GetResults() map[string]*RepoCloneProgress {
	if x != nil {
		return x.Results
	}
	return nil
}

// RepoDeleteRequest is a request to delete a repository.
type RepoDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to delete.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *RepoDeleteRequest) Reset() {
	*x = RepoDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoDeleteRequest) ProtoMessage() {}

func (x *RepoDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoDeleteRequest.ProtoReflect.Descriptor instead.
func (*RepoDeleteRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{32}
}

func (x *RepoDeleteRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

// RepoDeleteResponse is the response from the RepoDelete RPC.
type RepoDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepoDeleteResponse) Reset() {
	*x = RepoDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoDeleteResponse) ProtoMessage() {}

func (x *RepoDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoDeleteResponse.ProtoReflect.Descriptor instead.
func (*RepoDeleteResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{33}
}

// RepoUpdateRequest is a request to update a repository.
type RepoUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to update.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// since is the debounce interval for queries, used only with request-repo-update
	Since *durationpb.Duration `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	// clone_from_shard is the hostname of the gitserver instance that is the current owner of the
	// repository. If this is set, then the RepoUpdateRequest is to migrate the repo from
	// that gitserver instance to the new home of the repo.
	CloneFromShard string `protobuf:"bytes,3,opt,name=clone_from_shard,json=cloneFromShard,proto3" json:"clone_from_shard,omitempty"`
}

func (x *RepoUpdateRequest) Reset() {
	*x = RepoUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoUpdateRequest) ProtoMessage() {}

func (x *RepoUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoUpdateRequest.ProtoReflect.Descriptor instead.
func (*RepoUpdateRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{34}
}

func (x *RepoUpdateRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RepoUpdateRequest) GetSince() *durationpb.Duration {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *RepoUpdateRequest) GetCloneFromShard() string {
	if x != nil {
		return x.CloneFromShard
	}
	return ""
}

// RepoUpdateResponse is the response from the RepoUpdate RPC.
type RepoUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last_fetched is the time the repository was last fetched.
	LastFetched *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_fetched,json=lastFetched,proto3" json:"last_fetched,omitempty"`
	// last_changed is the time the repository was last changed.
	LastChanged *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_changed,json=lastChanged,proto3" json:"last_changed,omitempty"`
	// error is the error that occurred during the update.
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RepoUpdateResponse) Reset() {
	*x = RepoUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoUpdateResponse) ProtoMessage() {}

func (x *RepoUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoUpdateResponse.ProtoReflect.Descriptor instead.
func (*RepoUpdateResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{35}
}

func (x *RepoUpdateResponse) GetLastFetched() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFetched
	}
	return nil
}

func (x *RepoUpdateResponse) GetLastChanged() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChanged
	}
	return nil
}

func (x *RepoUpdateResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ReposStatsRequest is a empty request for the ReposStats RPC.
type ReposStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReposStatsRequest) Reset() {
	*x = ReposStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReposStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReposStatsRequest) ProtoMessage() {}

func (x *ReposStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReposStatsRequest.ProtoReflect.Descriptor instead.
func (*ReposStatsRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{36}
}

// ReposStats is an aggregation of statistics from a gitserver.
type ReposStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// git_dir_bytes is the amount of bytes stored in .git directories.
	GitDirBytes uint64 `protobuf:"varint,1,opt,name=git_dir_bytes,json=gitDirBytes,proto3" json:"git_dir_bytes,omitempty"`
	// updated_at is the time these statistics were computed. If updated_at is
	// zero, the statistics have not yet been computed. This can happen on a
	// new gitserver.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ReposStatsResponse) Reset() {
	*x = ReposStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReposStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReposStatsResponse) ProtoMessage() {}

func (x *ReposStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReposStatsResponse.ProtoReflect.Descriptor instead.
func (*ReposStatsResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{37}
}

func (x *ReposStatsResponse) GetGitDirBytes() uint64 {
	if x != nil {
		return x.GitDirBytes
	}
	return 0
}

func (x *ReposStatsResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type P4ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P4Port   string   `protobuf:"bytes,1,opt,name=p4port,proto3" json:"p4port,omitempty"`
	P4User   string   `protobuf:"bytes,2,opt,name=p4user,proto3" json:"p4user,omitempty"`
	P4Passwd string   `protobuf:"bytes,3,opt,name=p4passwd,proto3" json:"p4passwd,omitempty"`
	Args     []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *P4ExecRequest) Reset() {
	*x = P4ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P4ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P4ExecRequest) ProtoMessage() {}

func (x *P4ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P4ExecRequest.ProtoReflect.Descriptor instead.
func (*P4ExecRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{38}
}

func (x *P4ExecRequest) GetP4Port() string {
	if x != nil {
		return x.P4Port
	}
	return ""
}

func (x *P4ExecRequest) GetP4User() string {
	if x != nil {
		return x.P4User
	}
	return ""
}

func (x *P4ExecRequest) GetP4Passwd() string {
	if x != nil {
		return x.P4Passwd
	}
	return ""
}

func (x *P4ExecRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type P4ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *P4ExecResponse) Reset() {
	*x = P4ExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P4ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P4ExecResponse) ProtoMessage() {}

func (x *P4ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P4ExecResponse.ProtoReflect.Descriptor instead.
func (*P4ExecResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{39}
}

func (x *P4ExecResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ListGitoliteRequest is a request to list all repositories in gitolite.
type ListGitoliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host is the hostname of the gitolite instance
	GitoliteHost string `protobuf:"bytes,1,opt,name=gitolite_host,json=gitoliteHost,proto3" json:"gitolite_host,omitempty"`
}

func (x *ListGitoliteRequest) Reset() {
	*x = ListGitoliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitoliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitoliteRequest) ProtoMessage() {}

func (x *ListGitoliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitoliteRequest.ProtoReflect.Descriptor instead.
func (*ListGitoliteRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{40}
}

func (x *ListGitoliteRequest) GetGitoliteHost() string {
	if x != nil {
		return x.GitoliteHost
	}
	return ""
}

// GitoliteRepo is a repository in gitolite.
type GitoliteRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the repository
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// url is the URL of the repository
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GitoliteRepo) Reset() {
	*x = GitoliteRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitoliteRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitoliteRepo) ProtoMessage() {}

func (x *GitoliteRepo) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitoliteRepo.ProtoReflect.Descriptor instead.
func (*GitoliteRepo) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{41}
}

func (x *GitoliteRepo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitoliteRepo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// ListGitoliteResponse is the response from the ListGitolite RPC.
type ListGitoliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repos is the list of repositories in gitolite
	Repos []*GitoliteRepo `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *ListGitoliteResponse) Reset() {
	*x = ListGitoliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitoliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitoliteResponse) ProtoMessage() {}

func (x *ListGitoliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitoliteResponse.ProtoReflect.Descriptor instead.
func (*ListGitoliteResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{42}
}

func (x *ListGitoliteResponse) GetRepos() []*GitoliteRepo {
	if x != nil {
		return x.Repos
	}
	return nil
}

// GetObjectRequest is a request to get a git object.
type GetObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to get the object from.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// object_name is the name of the object to get.
	ObjectName string `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
}

func (x *GetObjectRequest) Reset() {
	*x = GetObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectRequest) ProtoMessage() {}

func (x *GetObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectRequest.ProtoReflect.Descriptor instead.
func (*GetObjectRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{43}
}

func (x *GetObjectRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GetObjectRequest) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

// GetObjectResponse is the response from the GetObject RPC.
type GetObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object is the git object.
	Object *GitObject `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *GetObjectResponse) Reset() {
	*x = GetObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectResponse) ProtoMessage() {}

func (x *GetObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectResponse.ProtoReflect.Descriptor instead.
func (*GetObjectResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{44}
}

func (x *GetObjectResponse) GetObject() *GitObject {
	if x != nil {
		return x.Object
	}
	return nil
}

// GitObject is a git object.
type GitObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the object id.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type is the type of the object.
	Type GitObject_ObjectType `protobuf:"varint,2,opt,name=type,proto3,enum=gitserver.v1.GitObject_ObjectType" json:"type,omitempty"`
}

func (x *GitObject) Reset() {
	*x = GitObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitObject) ProtoMessage() {}

func (x *GitObject) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitObject.ProtoReflect.Descriptor instead.
func (*GitObject) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{45}
}

func (x *GitObject) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GitObject) GetType() GitObject_ObjectType {
	if x != nil {
		return x.Type
	}
	return GitObject_OBJECT_TYPE_UNSPECIFIED
}

type CommitMatch_Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Date  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *CommitMatch_Signature) Reset() {
	*x = CommitMatch_Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch_Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch_Signature) ProtoMessage() {}

func (x *CommitMatch_Signature) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch_Signature.ProtoReflect.Descriptor instead.
func (*CommitMatch_Signature) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CommitMatch_Signature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommitMatch_Signature) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CommitMatch_Signature) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type CommitMatch_MatchedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string               `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Ranges  []*CommitMatch_Range `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *CommitMatch_MatchedString) Reset() {
	*x = CommitMatch_MatchedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch_MatchedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch_MatchedString) ProtoMessage() {}

func (x *CommitMatch_MatchedString) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch_MatchedString.ProtoReflect.Descriptor instead.
func (*CommitMatch_MatchedString) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{22, 1}
}

func (x *CommitMatch_MatchedString) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommitMatch_MatchedString) GetRanges() []*CommitMatch_Range {
	if x != nil {
		return x.Ranges
	}
	return nil
}

// TODO move this into a shared package
type CommitMatch_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *CommitMatch_Location `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *CommitMatch_Location `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *CommitMatch_Range) Reset() {
	*x = CommitMatch_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch_Range) ProtoMessage() {}

func (x *CommitMatch_Range) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch_Range.ProtoReflect.Descriptor instead.
func (*CommitMatch_Range) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{22, 2}
}

func (x *CommitMatch_Range) GetStart() *CommitMatch_Location {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CommitMatch_Range) GetEnd() *CommitMatch_Location {
	if x != nil {
		return x.End
	}
	return nil
}

type CommitMatch_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Line   uint32 `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Column uint32 `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *CommitMatch_Location) Reset() {
	*x = CommitMatch_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch_Location) ProtoMessage() {}

func (x *CommitMatch_Location) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch_Location.ProtoReflect.Descriptor instead.
func (*CommitMatch_Location) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{22, 3}
}

func (x *CommitMatch_Location) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CommitMatch_Location) GetLine() uint32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *CommitMatch_Location) GetColumn() uint32 {
	if x != nil {
		return x.Column
	}
	return 0
}

var File_gitserver_proto protoreflect.FileDescriptor

var file_gitserver_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xef, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x6c, 0x0a, 0x0a, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x22, 0xc1, 0x02, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2c, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x41, 0x72, 0x67, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x77, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x76, 0x12,
	0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x93, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x0f, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x4c, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x22, 0x80, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x73, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x47, 0x6c, 0x6f, 0x62, 0x12,
	0x28, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x47, 0x6c, 0x6f, 0x62, 0x22, 0x48, 0x0a, 0x11, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65,
	0x22, 0x4c, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x4b,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x49, 0x0a, 0x12, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x22, 0x4b,
	0x0a, 0x14, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x73, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x92, 0x05, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x51, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x66, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x64, 0x69, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x0e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x1d, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x69, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa9, 0x06, 0x0a, 0x0b, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x1a, 0x65, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x62, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x77, 0x0a, 0x05,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x34, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0x4e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x74, 0x0a, 0x0e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x65, 0x65, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x65, 0x65, 0x69, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x74, 0x68, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x74, 0x68, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x2c, 0x0a, 0x16, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x22, 0x67, 0x0a, 0x17, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x22, 0x29, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x18,
	0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x7e,
	0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x22, 0xc8,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x5b, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x11, 0x52, 0x65, 0x70,
	0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x22, 0xa8, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x44,
	0x69, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x6f, 0x0a, 0x0d, 0x50, 0x34, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x34, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x34, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x34, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x34, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x34, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x34, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x50, 0x34, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x0c, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x48, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x44,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41,
	0x47, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x04, 0x2a,
	0x71, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x10, 0x03, 0x32, 0xf6, 0x08, 0x0a, 0x10, 0x47, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x0f, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c,
	0x69, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x07, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x47, 0x0a, 0x06, 0x50, 0x34, 0x45, 0x78, 0x65, 0x63, 0x12, 0x1b, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x34, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x34, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65,
	0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x52, 0x65,
	0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitserver_proto_rawDescOnce sync.Once
	file_gitserver_proto_rawDescData = file_gitserver_proto_rawDesc
)

func file_gitserver_proto_rawDescGZIP() []byte {
	file_gitserver_proto_rawDescOnce.Do(func() {
		file_gitserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitserver_proto_rawDescData)
	})
	return file_gitserver_proto_rawDescData
}

var file_gitserver_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gitserver_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_gitserver_proto_goTypes = []interface{}{
	(OperatorKind)(0),                           // 0: gitserver.v1.OperatorKind
	(GitObject_ObjectType)(0),                   // 1: gitserver.v1.GitObject.ObjectType
	(*PatchCommitInfo)(nil),                     // 2: gitserver.v1.PatchCommitInfo
	(*PushConfig)(nil),                          // 3: gitserver.v1.PushConfig
	(*CreateCommitFromPatchBinaryRequest)(nil),  // 4: gitserver.v1.CreateCommitFromPatchBinaryRequest
	(*CreateCommitFromPatchError)(nil),          // 5: gitserver.v1.CreateCommitFromPatchError
	(*CreateCommitFromPatchBinaryResponse)(nil), // 6: gitserver.v1.CreateCommitFromPatchBinaryResponse
	(*ExecRequest)(nil),                         // 7: gitserver.v1.ExecRequest
	(*ExecResponse)(nil),                        // 8: gitserver.v1.ExecResponse
	(*NotFoundPayload)(nil),                     // 9: gitserver.v1.NotFoundPayload
	(*ExecStatusPayload)(nil),                   // 10: gitserver.v1.ExecStatusPayload
	(*SearchRequest)(nil),                       // 11: gitserver.v1.SearchRequest
	(*RevisionSpecifier)(nil),                   // 12: gitserver.v1.RevisionSpecifier
	(*AuthorMatchesNode)(nil),                   // 13: gitserver.v1.AuthorMatchesNode
	(*CommitterMatchesNode)(nil),                // 14: gitserver.v1.CommitterMatchesNode
	(*CommitBeforeNode)(nil),                    // 15: gitserver.v1.CommitBeforeNode
	(*CommitAfterNode)(nil),                     // 16: gitserver.v1.CommitAfterNode
	(*MessageMatchesNode)(nil),                  // 17: gitserver.v1.MessageMatchesNode
	(*DiffMatchesNode)(nil),                     // 18: gitserver.v1.DiffMatchesNode
	(*DiffModifiesFileNode)(nil),                // 19: gitserver.v1.DiffModifiesFileNode
	(*BooleanNode)(nil),                         // 20: gitserver.v1.BooleanNode
	(*OperatorNode)(nil),                        // 21: gitserver.v1.OperatorNode
	(*QueryNode)(nil),                           // 22: gitserver.v1.QueryNode
	(*SearchResponse)(nil),                      // 23: gitserver.v1.SearchResponse
	(*CommitMatch)(nil),                         // 24: gitserver.v1.CommitMatch
	(*ArchiveRequest)(nil),                      // 25: gitserver.v1.ArchiveRequest
	(*ArchiveResponse)(nil),                     // 26: gitserver.v1.ArchiveResponse
	(*IsRepoCloneableRequest)(nil),              // 27: gitserver.v1.IsRepoCloneableRequest
	(*IsRepoCloneableResponse)(nil),             // 28: gitserver.v1.IsRepoCloneableResponse
	(*RepoCloneRequest)(nil),                    // 29: gitserver.v1.RepoCloneRequest
	(*RepoCloneResponse)(nil),                   // 30: gitserver.v1.RepoCloneResponse
	(*RepoCloneProgressRequest)(nil),            // 31: gitserver.v1.RepoCloneProgressRequest
	(*RepoCloneProgress)(nil),                   // 32: gitserver.v1.RepoCloneProgress
	(*RepoCloneProgressResponse)(nil),           // 33: gitserver.v1.RepoCloneProgressResponse
	(*RepoDeleteRequest)(nil),                   // 34: gitserver.v1.RepoDeleteRequest
	(*RepoDeleteResponse)(nil),                  // 35: gitserver.v1.RepoDeleteResponse
	(*RepoUpdateRequest)(nil),                   // 36: gitserver.v1.RepoUpdateRequest
	(*RepoUpdateResponse)(nil),                  // 37: gitserver.v1.RepoUpdateResponse
	(*ReposStatsRequest)(nil),                   // 38: gitserver.v1.ReposStatsRequest
	(*ReposStatsResponse)(nil),                  // 39: gitserver.v1.ReposStatsResponse
	(*P4ExecRequest)(nil),                       // 40: gitserver.v1.P4ExecRequest
	(*P4ExecResponse)(nil),                      // 41: gitserver.v1.P4ExecResponse
	(*ListGitoliteRequest)(nil),                 // 42: gitserver.v1.ListGitoliteRequest
	(*GitoliteRepo)(nil),                        // 43: gitserver.v1.GitoliteRepo
	(*ListGitoliteResponse)(nil),                // 44: gitserver.v1.ListGitoliteResponse
	(*GetObjectRequest)(nil),                    // 45: gitserver.v1.GetObjectRequest
	(*GetObjectResponse)(nil),                   // 46: gitserver.v1.GetObjectResponse
	(*GitObject)(nil),                           // 47: gitserver.v1.GitObject
	(*CommitMatch_Signature)(nil),               // 48: gitserver.v1.CommitMatch.Signature
	(*CommitMatch_MatchedString)(nil),           // 49: gitserver.v1.CommitMatch.MatchedString
	(*CommitMatch_Range)(nil),                   // 50: gitserver.v1.CommitMatch.Range
	(*CommitMatch_Location)(nil),                // 51: gitserver.v1.CommitMatch.Location
	nil,                                         // 52: gitserver.v1.RepoCloneProgressResponse.ResultsEntry
	(*timestamppb.Timestamp)(nil),               // 53: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                 // 54: google.protobuf.Duration
}
var file_gitserver_proto_depIdxs = []int32{
	53, // 0: gitserver.v1.PatchCommitInfo.date:type_name -> google.protobuf.Timestamp
	2,  // 1: gitserver.v1.CreateCommitFromPatchBinaryRequest.commit_info:type_name -> gitserver.v1.PatchCommitInfo
	3,  // 2: gitserver.v1.CreateCommitFromPatchBinaryRequest.push:type_name -> gitserver.v1.PushConfig
	5,  // 3: gitserver.v1.CreateCommitFromPatchBinaryResponse.error:type_name -> gitserver.v1.CreateCommitFromPatchError
	12, // 4: gitserver.v1.SearchRequest.revisions:type_name -> gitserver.v1.RevisionSpecifier
	22, // 5: gitserver.v1.SearchRequest.query:type_name -> gitserver.v1.QueryNode
	53, // 6: gitserver.v1.CommitBeforeNode.timestamp:type_name -> google.protobuf.Timestamp
	53, // 7: gitserver.v1.CommitAfterNode.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 8: gitserver.v1.OperatorNode.kind:type_name -> gitserver.v1.OperatorKind
	22, // 9: gitserver.v1.OperatorNode.operands:type_name -> gitserver.v1.QueryNode
	13, // 10: gitserver.v1.QueryNode.author_matches:type_name -> gitserver.v1.AuthorMatchesNode
	14, // 11: gitserver.v1.QueryNode.committer_matches:type_name -> gitserver.v1.CommitterMatchesNode
	15, // 12: gitserver.v1.QueryNode.commit_before:type_name -> gitserver.v1.CommitBeforeNode
	16, // 13: gitserver.v1.QueryNode.commit_after:type_name -> gitserver.v1.CommitAfterNode
	17, // 14: gitserver.v1.QueryNode.message_matches:type_name -> gitserver.v1.MessageMatchesNode
	18, // 15: gitserver.v1.QueryNode.diff_matches:type_name -> gitserver.v1.DiffMatchesNode
	19, // 16: gitserver.v1.QueryNode.diff_modifies_file:type_name -> gitserver.v1.DiffModifiesFileNode
	20, // 17: gitserver.v1.QueryNode.boolean:type_name -> gitserver.v1.BooleanNode
	21, // 18: gitserver.v1.QueryNode.operator:type_name -> gitserver.v1.OperatorNode
	24, // 19: gitserver.v1.SearchResponse.match:type_name -> gitserver.v1.CommitMatch
	48, // 20: gitserver.v1.CommitMatch.author:type_name -> gitserver.v1.CommitMatch.Signature
	48, // 21: gitserver.v1.CommitMatch.committer:type_name -> gitserver.v1.CommitMatch.Signature
	49, // 22: gitserver.v1.CommitMatch.message:type_name -> gitserver.v1.CommitMatch.MatchedString
	49, // 23: gitserver.v1.CommitMatch.diff:type_name -> gitserver.v1.CommitMatch.MatchedString
	52, // 24: gitserver.v1.RepoCloneProgressResponse.results:type_name -> gitserver.v1.RepoCloneProgressResponse.ResultsEntry
	54, // 25: gitserver.v1.RepoUpdateRequest.since:type_name -> google.protobuf.Duration
	53, // 26: gitserver.v1.RepoUpdateResponse.last_fetched:type_name -> google.protobuf.Timestamp
	53, // 27: gitserver.v1.RepoUpdateResponse.last_changed:type_name -> google.protobuf.Timestamp
	53, // 28: gitserver.v1.ReposStatsResponse.updated_at:type_name -> google.protobuf.Timestamp
	43, // 29: gitserver.v1.ListGitoliteResponse.repos:type_name -> gitserver.v1.GitoliteRepo
	47, // 30: gitserver.v1.GetObjectResponse.object:type_name -> gitserver.v1.GitObject
	1,  // 31: gitserver.v1.GitObject.type:type_name -> gitserver.v1.GitObject.ObjectType
	53, // 32: gitserver.v1.CommitMatch.Signature.date:type_name -> google.protobuf.Timestamp
	50, // 33: gitserver.v1.CommitMatch.MatchedString.ranges:type_name -> gitserver.v1.CommitMatch.Range
	51, // 34: gitserver.v1.CommitMatch.Range.start:type_name -> gitserver.v1.CommitMatch.Location
	51, // 35: gitserver.v1.CommitMatch.Range.end:type_name -> gitserver.v1.CommitMatch.Location
	32, // 36: gitserver.v1.RepoCloneProgressResponse.ResultsEntry.value:type_name -> gitserver.v1.RepoCloneProgress
	4,  // 37: gitserver.v1.GitserverService.CreateCommitFromPatchBinary:input_type -> gitserver.v1.CreateCommitFromPatchBinaryRequest
	7,  // 38: gitserver.v1.GitserverService.Exec:input_type -> gitserver.v1.ExecRequest
	45, // 39: gitserver.v1.GitserverService.GetObject:input_type -> gitserver.v1.GetObjectRequest
	27, // 40: gitserver.v1.GitserverService.IsRepoCloneable:input_type -> gitserver.v1.IsRepoCloneableRequest
	42, // 41: gitserver.v1.GitserverService.ListGitolite:input_type -> gitserver.v1.ListGitoliteRequest
	11, // 42: gitserver.v1.GitserverService.Search:input_type -> gitserver.v1.SearchRequest
	25, // 43: gitserver.v1.GitserverService.Archive:input_type -> gitserver.v1.ArchiveRequest
	40, // 44: gitserver.v1.GitserverService.P4Exec:input_type -> gitserver.v1.P4ExecRequest
	29, // 45: gitserver.v1.GitserverService.RepoClone:input_type -> gitserver.v1.RepoCloneRequest
	31, // 46: gitserver.v1.GitserverService.RepoCloneProgress:input_type -> gitserver.v1.RepoCloneProgressRequest
	34, // 47: gitserver.v1.GitserverService.RepoDelete:input_type -> gitserver.v1.RepoDeleteRequest
	36, // 48: gitserver.v1.GitserverService.RepoUpdate:input_type -> gitserver.v1.RepoUpdateRequest
	38, // 49: gitserver.v1.GitserverService.ReposStats:input_type -> gitserver.v1.ReposStatsRequest
	6,  // 50: gitserver.v1.GitserverService.CreateCommitFromPatchBinary:output_type -> gitserver.v1.CreateCommitFromPatchBinaryResponse
	8,  // 51: gitserver.v1.GitserverService.Exec:output_type -> gitserver.v1.ExecResponse
	46, // 52: gitserver.v1.GitserverService.GetObject:output_type -> gitserver.v1.GetObjectResponse
	28, // 53: gitserver.v1.GitserverService.IsRepoCloneable:output_type -> gitserver.v1.IsRepoCloneableResponse
	44, // 54: gitserver.v1.GitserverService.ListGitolite:output_type -> gitserver.v1.ListGitoliteResponse
	23, // 55: gitserver.v1.GitserverService.Search:output_type -> gitserver.v1.SearchResponse
	26, // 56: gitserver.v1.GitserverService.Archive:output_type -> gitserver.v1.ArchiveResponse
	41, // 57: gitserver.v1.GitserverService.P4Exec:output_type -> gitserver.v1.P4ExecResponse
	30, // 58: gitserver.v1.GitserverService.RepoClone:output_type -> gitserver.v1.RepoCloneResponse
	33, // 59: gitserver.v1.GitserverService.RepoCloneProgress:output_type -> gitserver.v1.RepoCloneProgressResponse
	35, // 60: gitserver.v1.GitserverService.RepoDelete:output_type -> gitserver.v1.RepoDeleteResponse
	37, // 61: gitserver.v1.GitserverService.RepoUpdate:output_type -> gitserver.v1.RepoUpdateResponse
	39, // 62: gitserver.v1.GitserverService.ReposStats:output_type -> gitserver.v1.ReposStatsResponse
	50, // [50:63] is the sub-list for method output_type
	37, // [37:50] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_gitserver_proto_init() }
func file_gitserver_proto_init() {
	if File_gitserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCommitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitFromPatchBinaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitFromPatchError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitFromPatchBinaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotFoundPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStatusPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionSpecifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorMatchesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitterMatchesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitBeforeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitAfterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMatchesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffMatchesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffModifiesFileNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRepoCloneableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRepoCloneableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCloneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCloneProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCloneProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCloneProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReposStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReposStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P4ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P4ExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitoliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitoliteRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitoliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch_Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch_MatchedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gitserver_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*QueryNode_AuthorMatches)(nil),
		(*QueryNode_CommitterMatches)(nil),
		(*QueryNode_CommitBefore)(nil),
		(*QueryNode_CommitAfter)(nil),
		(*QueryNode_MessageMatches)(nil),
		(*QueryNode_DiffMatches)(nil),
		(*QueryNode_DiffModifiesFile)(nil),
		(*QueryNode_Boolean)(nil),
		(*QueryNode_Operator)(nil),
	}
	file_gitserver_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*SearchResponse_Match)(nil),
		(*SearchResponse_LimitHit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitserver_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitserver_proto_goTypes,
		DependencyIndexes: file_gitserver_proto_depIdxs,
		EnumInfos:         file_gitserver_proto_enumTypes,
		MessageInfos:      file_gitserver_proto_msgTypes,
	}.Build()
	File_gitserver_proto = out.File
	file_gitserver_proto_rawDesc = nil
	file_gitserver_proto_goTypes = nil
	file_gitserver_proto_depIdxs = nil
}
