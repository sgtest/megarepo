// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: gitserver.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperatorKind int32

const (
	OperatorKind_OPERATOR_KIND_UNSPECIFIED OperatorKind = 0
	OperatorKind_OPERATOR_KIND_AND         OperatorKind = 1
	OperatorKind_OPERATOR_KIND_OR          OperatorKind = 2
	OperatorKind_OPERATOR_KIND_NOT         OperatorKind = 3
)

// Enum value maps for OperatorKind.
var (
	OperatorKind_name = map[int32]string{
		0: "OPERATOR_KIND_UNSPECIFIED",
		1: "OPERATOR_KIND_AND",
		2: "OPERATOR_KIND_OR",
		3: "OPERATOR_KIND_NOT",
	}
	OperatorKind_value = map[string]int32{
		"OPERATOR_KIND_UNSPECIFIED": 0,
		"OPERATOR_KIND_AND":         1,
		"OPERATOR_KIND_OR":          2,
		"OPERATOR_KIND_NOT":         3,
	}
)

func (x OperatorKind) Enum() *OperatorKind {
	p := new(OperatorKind)
	*p = x
	return p
}

func (x OperatorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_gitserver_proto_enumTypes[0].Descriptor()
}

func (OperatorKind) Type() protoreflect.EnumType {
	return &file_gitserver_proto_enumTypes[0]
}

func (x OperatorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorKind.Descriptor instead.
func (OperatorKind) EnumDescriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{0}
}

type ArchiveFormat int32

const (
	ArchiveFormat_ARCHIVE_FORMAT_UNSPECIFIED ArchiveFormat = 0
	ArchiveFormat_ARCHIVE_FORMAT_ZIP         ArchiveFormat = 1
	ArchiveFormat_ARCHIVE_FORMAT_TAR         ArchiveFormat = 2
)

// Enum value maps for ArchiveFormat.
var (
	ArchiveFormat_name = map[int32]string{
		0: "ARCHIVE_FORMAT_UNSPECIFIED",
		1: "ARCHIVE_FORMAT_ZIP",
		2: "ARCHIVE_FORMAT_TAR",
	}
	ArchiveFormat_value = map[string]int32{
		"ARCHIVE_FORMAT_UNSPECIFIED": 0,
		"ARCHIVE_FORMAT_ZIP":         1,
		"ARCHIVE_FORMAT_TAR":         2,
	}
)

func (x ArchiveFormat) Enum() *ArchiveFormat {
	p := new(ArchiveFormat)
	*p = x
	return p
}

func (x ArchiveFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchiveFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_gitserver_proto_enumTypes[1].Descriptor()
}

func (ArchiveFormat) Type() protoreflect.EnumType {
	return &file_gitserver_proto_enumTypes[1]
}

func (x ArchiveFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchiveFormat.Descriptor instead.
func (ArchiveFormat) EnumDescriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{1}
}

type RawDiffRequest_ComparisonType int32

const (
	RawDiffRequest_COMPARISON_TYPE_UNSPECIFIED RawDiffRequest_ComparisonType = 0
	// Corresponds to the BASE..HEAD syntax that only returns any commits that are
	// in HEAD but not in BASE.
	RawDiffRequest_COMPARISON_TYPE_ONLY_IN_HEAD RawDiffRequest_ComparisonType = 1
	// Corresponds to the BASE...HEAD syntax that returns any commits that are not
	// in both BASE and HEAD.
	RawDiffRequest_COMPARISON_TYPE_INTERSECTION RawDiffRequest_ComparisonType = 2
)

// Enum value maps for RawDiffRequest_ComparisonType.
var (
	RawDiffRequest_ComparisonType_name = map[int32]string{
		0: "COMPARISON_TYPE_UNSPECIFIED",
		1: "COMPARISON_TYPE_ONLY_IN_HEAD",
		2: "COMPARISON_TYPE_INTERSECTION",
	}
	RawDiffRequest_ComparisonType_value = map[string]int32{
		"COMPARISON_TYPE_UNSPECIFIED":  0,
		"COMPARISON_TYPE_ONLY_IN_HEAD": 1,
		"COMPARISON_TYPE_INTERSECTION": 2,
	}
)

func (x RawDiffRequest_ComparisonType) Enum() *RawDiffRequest_ComparisonType {
	p := new(RawDiffRequest_ComparisonType)
	*p = x
	return p
}

func (x RawDiffRequest_ComparisonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RawDiffRequest_ComparisonType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitserver_proto_enumTypes[2].Descriptor()
}

func (RawDiffRequest_ComparisonType) Type() protoreflect.EnumType {
	return &file_gitserver_proto_enumTypes[2]
}

func (x RawDiffRequest_ComparisonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RawDiffRequest_ComparisonType.Descriptor instead.
func (RawDiffRequest_ComparisonType) EnumDescriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{7, 0}
}

type GitRef_RefType int32

const (
	GitRef_REF_TYPE_UNSPECIFIED GitRef_RefType = 0
	GitRef_REF_TYPE_BRANCH      GitRef_RefType = 1
	GitRef_REF_TYPE_TAG         GitRef_RefType = 2
)

// Enum value maps for GitRef_RefType.
var (
	GitRef_RefType_name = map[int32]string{
		0: "REF_TYPE_UNSPECIFIED",
		1: "REF_TYPE_BRANCH",
		2: "REF_TYPE_TAG",
	}
	GitRef_RefType_value = map[string]int32{
		"REF_TYPE_UNSPECIFIED": 0,
		"REF_TYPE_BRANCH":      1,
		"REF_TYPE_TAG":         2,
	}
)

func (x GitRef_RefType) Enum() *GitRef_RefType {
	p := new(GitRef_RefType)
	*p = x
	return p
}

func (x GitRef_RefType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitRef_RefType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitserver_proto_enumTypes[3].Descriptor()
}

func (GitRef_RefType) Type() protoreflect.EnumType {
	return &file_gitserver_proto_enumTypes[3]
}

func (x GitRef_RefType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitRef_RefType.Descriptor instead.
func (GitRef_RefType) EnumDescriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{11, 0}
}

type GitObject_ObjectType int32

const (
	GitObject_OBJECT_TYPE_UNSPECIFIED GitObject_ObjectType = 0
	GitObject_OBJECT_TYPE_COMMIT      GitObject_ObjectType = 1
	GitObject_OBJECT_TYPE_TAG         GitObject_ObjectType = 2
	GitObject_OBJECT_TYPE_TREE        GitObject_ObjectType = 3
	GitObject_OBJECT_TYPE_BLOB        GitObject_ObjectType = 4
)

// Enum value maps for GitObject_ObjectType.
var (
	GitObject_ObjectType_name = map[int32]string{
		0: "OBJECT_TYPE_UNSPECIFIED",
		1: "OBJECT_TYPE_COMMIT",
		2: "OBJECT_TYPE_TAG",
		3: "OBJECT_TYPE_TREE",
		4: "OBJECT_TYPE_BLOB",
	}
	GitObject_ObjectType_value = map[string]int32{
		"OBJECT_TYPE_UNSPECIFIED": 0,
		"OBJECT_TYPE_COMMIT":      1,
		"OBJECT_TYPE_TAG":         2,
		"OBJECT_TYPE_TREE":        3,
		"OBJECT_TYPE_BLOB":        4,
	}
)

func (x GitObject_ObjectType) Enum() *GitObject_ObjectType {
	p := new(GitObject_ObjectType)
	*p = x
	return p
}

func (x GitObject_ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitObject_ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitserver_proto_enumTypes[4].Descriptor()
}

func (GitObject_ObjectType) Type() protoreflect.EnumType {
	return &file_gitserver_proto_enumTypes[4]
}

func (x GitObject_ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitObject_ObjectType.Descriptor instead.
func (GitObject_ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{68, 0}
}

// PerforceChangelistState is the valid state values of a Perforce changelist.
type PerforceChangelist_PerforceChangelistState int32

const (
	PerforceChangelist_PERFORCE_CHANGELIST_STATE_UNSPECIFIED PerforceChangelist_PerforceChangelistState = 0
	PerforceChangelist_PERFORCE_CHANGELIST_STATE_SUBMITTED   PerforceChangelist_PerforceChangelistState = 1
	PerforceChangelist_PERFORCE_CHANGELIST_STATE_PENDING     PerforceChangelist_PerforceChangelistState = 2
	PerforceChangelist_PERFORCE_CHANGELIST_STATE_SHELVED     PerforceChangelist_PerforceChangelistState = 3
	// Perforce doesn't actually return a state for closed changelists, so this
	// is one we use to indicate the changelist is closed.
	PerforceChangelist_PERFORCE_CHANGELIST_STATE_CLOSED PerforceChangelist_PerforceChangelistState = 4
)

// Enum value maps for PerforceChangelist_PerforceChangelistState.
var (
	PerforceChangelist_PerforceChangelistState_name = map[int32]string{
		0: "PERFORCE_CHANGELIST_STATE_UNSPECIFIED",
		1: "PERFORCE_CHANGELIST_STATE_SUBMITTED",
		2: "PERFORCE_CHANGELIST_STATE_PENDING",
		3: "PERFORCE_CHANGELIST_STATE_SHELVED",
		4: "PERFORCE_CHANGELIST_STATE_CLOSED",
	}
	PerforceChangelist_PerforceChangelistState_value = map[string]int32{
		"PERFORCE_CHANGELIST_STATE_UNSPECIFIED": 0,
		"PERFORCE_CHANGELIST_STATE_SUBMITTED":   1,
		"PERFORCE_CHANGELIST_STATE_PENDING":     2,
		"PERFORCE_CHANGELIST_STATE_SHELVED":     3,
		"PERFORCE_CHANGELIST_STATE_CLOSED":      4,
	}
)

func (x PerforceChangelist_PerforceChangelistState) Enum() *PerforceChangelist_PerforceChangelistState {
	p := new(PerforceChangelist_PerforceChangelistState)
	*p = x
	return p
}

func (x PerforceChangelist_PerforceChangelistState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerforceChangelist_PerforceChangelistState) Descriptor() protoreflect.EnumDescriptor {
	return file_gitserver_proto_enumTypes[5].Descriptor()
}

func (PerforceChangelist_PerforceChangelistState) Type() protoreflect.EnumType {
	return &file_gitserver_proto_enumTypes[5]
}

func (x PerforceChangelist_PerforceChangelistState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerforceChangelist_PerforceChangelistState.Descriptor instead.
func (PerforceChangelist_PerforceChangelistState) EnumDescriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{76, 0}
}

// status is the status of the path.
type ChangedFile_Status int32

const (
	ChangedFile_STATUS_UNSPECIFIED ChangedFile_Status = 0
	ChangedFile_STATUS_ADDED       ChangedFile_Status = 1
	ChangedFile_STATUS_MODIFIED    ChangedFile_Status = 2
	ChangedFile_STATUS_DELETED     ChangedFile_Status = 3
)

// Enum value maps for ChangedFile_Status.
var (
	ChangedFile_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ADDED",
		2: "STATUS_MODIFIED",
		3: "STATUS_DELETED",
	}
	ChangedFile_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_ADDED":       1,
		"STATUS_MODIFIED":    2,
		"STATUS_DELETED":     3,
	}
)

func (x ChangedFile_Status) Enum() *ChangedFile_Status {
	p := new(ChangedFile_Status)
	*p = x
	return p
}

func (x ChangedFile_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangedFile_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_gitserver_proto_enumTypes[6].Descriptor()
}

func (ChangedFile_Status) Type() protoreflect.EnumType {
	return &file_gitserver_proto_enumTypes[6]
}

func (x ChangedFile_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangedFile_Status.Descriptor instead.
func (ChangedFile_Status) EnumDescriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{97, 0}
}

type DeleteRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to delete.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *DeleteRepositoryRequest) Reset() {
	*x = DeleteRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepositoryRequest) ProtoMessage() {}

func (x *DeleteRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepositoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteRepositoryRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type DeleteRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRepositoryResponse) Reset() {
	*x = DeleteRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepositoryResponse) ProtoMessage() {}

func (x *DeleteRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepositoryResponse.ProtoReflect.Descriptor instead.
func (*DeleteRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{1}
}

type FetchRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to fetch.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *FetchRepositoryRequest) Reset() {
	*x = FetchRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRepositoryRequest) ProtoMessage() {}

func (x *FetchRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRepositoryRequest.ProtoReflect.Descriptor instead.
func (*FetchRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{2}
}

func (x *FetchRepositoryRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type FetchRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last_fetched is the time the repository was last fetched.
	LastFetched *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_fetched,json=lastFetched,proto3" json:"last_fetched,omitempty"`
	// last_changed is the time the repository was last changed.
	LastChanged *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_changed,json=lastChanged,proto3" json:"last_changed,omitempty"`
}

func (x *FetchRepositoryResponse) Reset() {
	*x = FetchRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRepositoryResponse) ProtoMessage() {}

func (x *FetchRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRepositoryResponse.ProtoReflect.Descriptor instead.
func (*FetchRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{3}
}

func (x *FetchRepositoryResponse) GetLastFetched() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFetched
	}
	return nil
}

func (x *FetchRepositoryResponse) GetLastChanged() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChanged
	}
	return nil
}

type ContributorCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to run the blame operation in.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// Optional range to limit the commits inspected. If not given, all commits are considered.
	// This can either be a revspec, which will be interpreted as "every commit since
	// root until this commit", or a range, with either .. or ... separator.
	Range []byte `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	// After is an optional parameter to specify the earliest commit to consider in
	// the aggregation. If not specified, all commits will be returned.
	After *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=after,proto3" json:"after,omitempty"`
	// path can optionally be specified to limit the commits to a single path.
	// If not specified, the commits will be returned for all paths.
	// Path can also be a path prefix, for example cmd/gitserver/.
	Path []byte `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ContributorCountsRequest) Reset() {
	*x = ContributorCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorCountsRequest) ProtoMessage() {}

func (x *ContributorCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorCountsRequest.ProtoReflect.Descriptor instead.
func (*ContributorCountsRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{4}
}

func (x *ContributorCountsRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ContributorCountsRequest) GetRange() []byte {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ContributorCountsRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ContributorCountsRequest) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

type ContributorCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author *GitSignature `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Count  int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ContributorCount) Reset() {
	*x = ContributorCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorCount) ProtoMessage() {}

func (x *ContributorCount) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorCount.ProtoReflect.Descriptor instead.
func (*ContributorCount) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{5}
}

func (x *ContributorCount) GetAuthor() *GitSignature {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ContributorCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ContributorCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counts []*ContributorCount `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *ContributorCountsResponse) Reset() {
	*x = ContributorCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorCountsResponse) ProtoMessage() {}

func (x *ContributorCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorCountsResponse.ProtoReflect.Descriptor instead.
func (*ContributorCountsResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{6}
}

func (x *ContributorCountsResponse) GetCounts() []*ContributorCount {
	if x != nil {
		return x.Counts
	}
	return nil
}

type RawDiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to run the blame operation in.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// The base spec to resolve. I.e., HEAD, deadbeefdeadbeefdeadbeefdeadbeef, or
	// refs/heads/main.
	BaseRevSpec []byte `protobuf:"bytes,3,opt,name=base_rev_spec,json=baseRevSpec,proto3" json:"base_rev_spec,omitempty"`
	// The head spec to resolve. I.e., HEAD, deadbeefdeadbeefdeadbeefdeadbeef, or
	// refs/heads/main.
	HeadRevSpec []byte `protobuf:"bytes,4,opt,name=head_rev_spec,json=headRevSpec,proto3" json:"head_rev_spec,omitempty"`
	// comparison_type is the type of comparison to perform. If unspecified, will
	// fall back to COMPARISON_TYPE_INTERSECTION.
	ComparisonType RawDiffRequest_ComparisonType `protobuf:"varint,5,opt,name=comparison_type,json=comparisonType,proto3,enum=gitserver.v1.RawDiffRequest_ComparisonType" json:"comparison_type,omitempty"`
	// paths is a list of paths to filter the diff to. If empty, all paths are diffed.
	Paths [][]byte `protobuf:"bytes,6,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *RawDiffRequest) Reset() {
	*x = RawDiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawDiffRequest) ProtoMessage() {}

func (x *RawDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawDiffRequest.ProtoReflect.Descriptor instead.
func (*RawDiffRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{7}
}

func (x *RawDiffRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *RawDiffRequest) GetBaseRevSpec() []byte {
	if x != nil {
		return x.BaseRevSpec
	}
	return nil
}

func (x *RawDiffRequest) GetHeadRevSpec() []byte {
	if x != nil {
		return x.HeadRevSpec
	}
	return nil
}

func (x *RawDiffRequest) GetComparisonType() RawDiffRequest_ComparisonType {
	if x != nil {
		return x.ComparisonType
	}
	return RawDiffRequest_COMPARISON_TYPE_UNSPECIFIED
}

func (x *RawDiffRequest) GetPaths() [][]byte {
	if x != nil {
		return x.Paths
	}
	return nil
}

type RawDiffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// chunk is the raw diff chunk.
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *RawDiffResponse) Reset() {
	*x = RawDiffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawDiffResponse) ProtoMessage() {}

func (x *RawDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawDiffResponse.ProtoReflect.Descriptor instead.
func (*RawDiffResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{8}
}

func (x *RawDiffResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type ListRefsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to run the blame operation in.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// If true, only heads are returned. Can be combined with tags_only.
	HeadsOnly bool `protobuf:"varint,3,opt,name=heads_only,json=headsOnly,proto3" json:"heads_only,omitempty"`
	// If true, only tags are returned. Can be combined with heads_only.
	TagsOnly bool `protobuf:"varint,4,opt,name=tags_only,json=tagsOnly,proto3" json:"tags_only,omitempty"`
	// If set, only return refs that point at the given commit sha. Multiple values
	// will be ORed together.
	PointsAtCommit []string `protobuf:"bytes,5,rep,name=points_at_commit,json=pointsAtCommit,proto3" json:"points_at_commit,omitempty"`
	// If set, only return refs that contain the given commit sha.
	ContainsSha *string `protobuf:"bytes,6,opt,name=contains_sha,json=containsSha,proto3,oneof" json:"contains_sha,omitempty"`
}

func (x *ListRefsRequest) Reset() {
	*x = ListRefsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefsRequest) ProtoMessage() {}

func (x *ListRefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefsRequest.ProtoReflect.Descriptor instead.
func (*ListRefsRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{9}
}

func (x *ListRefsRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ListRefsRequest) GetHeadsOnly() bool {
	if x != nil {
		return x.HeadsOnly
	}
	return false
}

func (x *ListRefsRequest) GetTagsOnly() bool {
	if x != nil {
		return x.TagsOnly
	}
	return false
}

func (x *ListRefsRequest) GetPointsAtCommit() []string {
	if x != nil {
		return x.PointsAtCommit
	}
	return nil
}

func (x *ListRefsRequest) GetContainsSha() string {
	if x != nil && x.ContainsSha != nil {
		return *x.ContainsSha
	}
	return ""
}

type ListRefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refs []*GitRef `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (x *ListRefsResponse) Reset() {
	*x = ListRefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefsResponse) ProtoMessage() {}

func (x *ListRefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefsResponse.ProtoReflect.Descriptor instead.
func (*ListRefsResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{10}
}

func (x *ListRefsResponse) GetRefs() []*GitRef {
	if x != nil {
		return x.Refs
	}
	return nil
}

type GitRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ref_name is the unabbreviated name of the reference, i.e., refs/heads/main, or refs/tags/1.0.
	RefName []byte `protobuf:"bytes,1,opt,name=ref_name,json=refName,proto3" json:"ref_name,omitempty"`
	// short_ref_name is the abbreviated name of the reference, if unambiguous.
	// I.e., main, or 1.0.
	ShortRefName []byte `protobuf:"bytes,2,opt,name=short_ref_name,json=shortRefName,proto3" json:"short_ref_name,omitempty"`
	// target_commit is the hash of the commit the reference is currently pointing at.
	// For a head reference, this is the commit the head is currently pointing at.
	// For a tag, this is the commit that the tag is attached to.
	TargetCommit string `protobuf:"bytes,3,opt,name=target_commit,json=targetCommit,proto3" json:"target_commit,omitempty"`
	// ref_oid is the full object ID of the reference. For a head reference and
	// a lightweight tag, this value is the same as target_commit. For annotated tags,
	// it is the object ID of the tag.
	RefOid string `protobuf:"bytes,4,opt,name=ref_oid,json=refOid,proto3" json:"ref_oid,omitempty"`
	// created_at is the timestamp when the ref was created or modified last.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// ref_type is the type of the reference. Non-tag references will be of
	// type branch. I.e., refs/pull/123/head will be a branch as well.
	RefType GitRef_RefType `protobuf:"varint,6,opt,name=ref_type,json=refType,proto3,enum=gitserver.v1.GitRef_RefType" json:"ref_type,omitempty"`
	// is_head is true if the reference is the HEAD reference.
	IsHead bool `protobuf:"varint,7,opt,name=is_head,json=isHead,proto3" json:"is_head,omitempty"`
}

func (x *GitRef) Reset() {
	*x = GitRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRef) ProtoMessage() {}

func (x *GitRef) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRef.ProtoReflect.Descriptor instead.
func (*GitRef) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{11}
}

func (x *GitRef) GetRefName() []byte {
	if x != nil {
		return x.RefName
	}
	return nil
}

func (x *GitRef) GetShortRefName() []byte {
	if x != nil {
		return x.ShortRefName
	}
	return nil
}

func (x *GitRef) GetTargetCommit() string {
	if x != nil {
		return x.TargetCommit
	}
	return ""
}

func (x *GitRef) GetRefOid() string {
	if x != nil {
		return x.RefOid
	}
	return ""
}

func (x *GitRef) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GitRef) GetRefType() GitRef_RefType {
	if x != nil {
		return x.RefType
	}
	return GitRef_REF_TYPE_UNSPECIFIED
}

func (x *GitRef) GetIsHead() bool {
	if x != nil {
		return x.IsHead
	}
	return false
}

type ResolveRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to run the blame operation in.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// The rev spec to resolve. I.e., HEAD, deadbeefdeadbeefdeadbeefdeadbeef, or
	// refs/heads/main.
	RevSpec []byte `protobuf:"bytes,3,opt,name=rev_spec,json=revSpec,proto3" json:"rev_spec,omitempty"`
	// ensure_revision tries to ensure that the revision is present in the repo by
	// triggering a git fetch if it is not present. It's not guaranteed that
	// a revision exists in the repo after this call, if it really doesn't exist.
	// This can slow down the response time significantly, only use it if you have
	// good reason to do so.
	EnsureRevision *bool `protobuf:"varint,4,opt,name=ensure_revision,json=ensureRevision,proto3,oneof" json:"ensure_revision,omitempty"`
}

func (x *ResolveRevisionRequest) Reset() {
	*x = ResolveRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRevisionRequest) ProtoMessage() {}

func (x *ResolveRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRevisionRequest.ProtoReflect.Descriptor instead.
func (*ResolveRevisionRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{12}
}

func (x *ResolveRevisionRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ResolveRevisionRequest) GetRevSpec() []byte {
	if x != nil {
		return x.RevSpec
	}
	return nil
}

func (x *ResolveRevisionRequest) GetEnsureRevision() bool {
	if x != nil && x.EnsureRevision != nil {
		return *x.EnsureRevision
	}
	return false
}

type ResolveRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commit is the commit SHA of the resolved revision.
	CommitSha string `protobuf:"bytes,1,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *ResolveRevisionResponse) Reset() {
	*x = ResolveRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRevisionResponse) ProtoMessage() {}

func (x *ResolveRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRevisionResponse.ProtoReflect.Descriptor instead.
func (*ResolveRevisionResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{13}
}

func (x *ResolveRevisionResponse) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

type RevAtTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to run the operation in.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// rev_spec is the starting revision for the search. We iterate
	// through its --first-parent ancestors looking for the first ancestor
	// that has a committer time before `time`.
	//
	// e.g., HEAD, deadbeefdeadbeefdeadbeefdeadbeef, or refs/heads/main.
	RevSpec []byte `protobuf:"bytes,3,opt,name=rev_spec,json=revSpec,proto3" json:"rev_spec,omitempty"`
	// time is the timestamp we are looking for commits before
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RevAtTimeRequest) Reset() {
	*x = RevAtTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevAtTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevAtTimeRequest) ProtoMessage() {}

func (x *RevAtTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevAtTimeRequest.ProtoReflect.Descriptor instead.
func (*RevAtTimeRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{14}
}

func (x *RevAtTimeRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *RevAtTimeRequest) GetRevSpec() []byte {
	if x != nil {
		return x.RevSpec
	}
	return nil
}

func (x *RevAtTimeRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RevAtTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commit is the commit SHA of the resolved revision.
	CommitSha string `protobuf:"bytes,1,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *RevAtTimeResponse) Reset() {
	*x = RevAtTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevAtTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevAtTimeResponse) ProtoMessage() {}

func (x *RevAtTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevAtTimeResponse.ProtoReflect.Descriptor instead.
func (*RevAtTimeResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{15}
}

func (x *RevAtTimeResponse) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

type GetCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to run the blame operation in.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	Commit   string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	// If true, the modified_files field in the GetCommitResponse will be populated.
	IncludeModifiedFiles bool `protobuf:"varint,4,opt,name=include_modified_files,json=includeModifiedFiles,proto3" json:"include_modified_files,omitempty"`
}

func (x *GetCommitRequest) Reset() {
	*x = GetCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitRequest) ProtoMessage() {}

func (x *GetCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitRequest.ProtoReflect.Descriptor instead.
func (*GetCommitRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{16}
}

func (x *GetCommitRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *GetCommitRequest) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *GetCommitRequest) GetIncludeModifiedFiles() bool {
	if x != nil {
		return x.IncludeModifiedFiles
	}
	return false
}

type GetCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *GitCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// Contains the list of files the commit modified.
	// NOTE: Only populated if include_modified_files in the GetCommitRequest is true.
	ModifiedFiles [][]byte `protobuf:"bytes,2,rep,name=modified_files,json=modifiedFiles,proto3" json:"modified_files,omitempty"`
}

func (x *GetCommitResponse) Reset() {
	*x = GetCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitResponse) ProtoMessage() {}

func (x *GetCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitResponse.ProtoReflect.Descriptor instead.
func (*GetCommitResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{17}
}

func (x *GetCommitResponse) GetCommit() *GitCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *GetCommitResponse) GetModifiedFiles() [][]byte {
	if x != nil {
		return x.ModifiedFiles
	}
	return nil
}

type GitCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid       string        `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Author    *GitSignature `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Committer *GitSignature `protobuf:"bytes,3,opt,name=committer,proto3" json:"committer,omitempty"`
	Message   []byte        `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Parents   []string      `protobuf:"bytes,5,rep,name=parents,proto3" json:"parents,omitempty"`
}

func (x *GitCommit) Reset() {
	*x = GitCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommit) ProtoMessage() {}

func (x *GitCommit) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommit.ProtoReflect.Descriptor instead.
func (*GitCommit) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{18}
}

func (x *GitCommit) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *GitCommit) GetAuthor() *GitSignature {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *GitCommit) GetCommitter() *GitSignature {
	if x != nil {
		return x.Committer
	}
	return nil
}

func (x *GitCommit) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GitCommit) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

type GitSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  []byte                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email []byte                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Date  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GitSignature) Reset() {
	*x = GitSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitSignature) ProtoMessage() {}

func (x *GitSignature) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitSignature.ProtoReflect.Descriptor instead.
func (*GitSignature) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{19}
}

func (x *GitSignature) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *GitSignature) GetEmail() []byte {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *GitSignature) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type BlameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to run the blame operation in.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// commit is the commit sha to start the blame operation at.
	Commit           string      `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Path             string      `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	IgnoreWhitespace bool        `protobuf:"varint,5,opt,name=ignore_whitespace,json=ignoreWhitespace,proto3" json:"ignore_whitespace,omitempty"`
	Range            *BlameRange `protobuf:"bytes,8,opt,name=range,proto3,oneof" json:"range,omitempty"`
}

func (x *BlameRequest) Reset() {
	*x = BlameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameRequest) ProtoMessage() {}

func (x *BlameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameRequest.ProtoReflect.Descriptor instead.
func (*BlameRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{20}
}

func (x *BlameRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *BlameRequest) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *BlameRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *BlameRequest) GetIgnoreWhitespace() bool {
	if x != nil {
		return x.IgnoreWhitespace
	}
	return false
}

func (x *BlameRequest) GetRange() *BlameRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type BlameRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine uint32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine   uint32 `protobuf:"varint,2,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
}

func (x *BlameRange) Reset() {
	*x = BlameRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlameRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameRange) ProtoMessage() {}

func (x *BlameRange) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameRange.ProtoReflect.Descriptor instead.
func (*BlameRange) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{21}
}

func (x *BlameRange) GetStartLine() uint32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *BlameRange) GetEndLine() uint32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

type BlameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hunk *BlameHunk `protobuf:"bytes,1,opt,name=hunk,proto3" json:"hunk,omitempty"`
}

func (x *BlameResponse) Reset() {
	*x = BlameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameResponse) ProtoMessage() {}

func (x *BlameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameResponse.ProtoReflect.Descriptor instead.
func (*BlameResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{22}
}

func (x *BlameResponse) GetHunk() *BlameHunk {
	if x != nil {
		return x.Hunk
	}
	return nil
}

type BlameHunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine      uint32          `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine        uint32          `protobuf:"varint,2,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	StartByte      uint32          `protobuf:"varint,3,opt,name=start_byte,json=startByte,proto3" json:"start_byte,omitempty"`
	EndByte        uint32          `protobuf:"varint,4,opt,name=end_byte,json=endByte,proto3" json:"end_byte,omitempty"`
	Commit         string          `protobuf:"bytes,5,opt,name=commit,proto3" json:"commit,omitempty"`
	Author         *BlameAuthor    `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Message        string          `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	Filename       string          `protobuf:"bytes,8,opt,name=filename,proto3" json:"filename,omitempty"`
	PreviousCommit *PreviousCommit `protobuf:"bytes,9,opt,name=previous_commit,json=previousCommit,proto3,oneof" json:"previous_commit,omitempty"`
}

func (x *BlameHunk) Reset() {
	*x = BlameHunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlameHunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameHunk) ProtoMessage() {}

func (x *BlameHunk) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameHunk.ProtoReflect.Descriptor instead.
func (*BlameHunk) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{23}
}

func (x *BlameHunk) GetStartLine() uint32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *BlameHunk) GetEndLine() uint32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *BlameHunk) GetStartByte() uint32 {
	if x != nil {
		return x.StartByte
	}
	return 0
}

func (x *BlameHunk) GetEndByte() uint32 {
	if x != nil {
		return x.EndByte
	}
	return 0
}

func (x *BlameHunk) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *BlameHunk) GetAuthor() *BlameAuthor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *BlameHunk) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BlameHunk) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *BlameHunk) GetPreviousCommit() *PreviousCommit {
	if x != nil {
		return x.PreviousCommit
	}
	return nil
}

type BlameAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Date  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *BlameAuthor) Reset() {
	*x = BlameAuthor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlameAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameAuthor) ProtoMessage() {}

func (x *BlameAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameAuthor.ProtoReflect.Descriptor instead.
func (*BlameAuthor) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{24}
}

func (x *BlameAuthor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlameAuthor) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BlameAuthor) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type PreviousCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit   string `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *PreviousCommit) Reset() {
	*x = PreviousCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviousCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviousCommit) ProtoMessage() {}

func (x *PreviousCommit) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviousCommit.ProtoReflect.Descriptor instead.
func (*PreviousCommit) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{25}
}

func (x *PreviousCommit) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PreviousCommit) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type DefaultBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to get the default branch for.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	ShortRef bool   `protobuf:"varint,3,opt,name=short_ref,json=shortRef,proto3" json:"short_ref,omitempty"`
}

func (x *DefaultBranchRequest) Reset() {
	*x = DefaultBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultBranchRequest) ProtoMessage() {}

func (x *DefaultBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultBranchRequest.ProtoReflect.Descriptor instead.
func (*DefaultBranchRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{26}
}

func (x *DefaultBranchRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *DefaultBranchRequest) GetShortRef() bool {
	if x != nil {
		return x.ShortRef
	}
	return false
}

type DefaultBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefName string `protobuf:"bytes,1,opt,name=ref_name,json=refName,proto3" json:"ref_name,omitempty"`
	Commit  string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *DefaultBranchResponse) Reset() {
	*x = DefaultBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultBranchResponse) ProtoMessage() {}

func (x *DefaultBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultBranchResponse.ProtoReflect.Descriptor instead.
func (*DefaultBranchResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{27}
}

func (x *DefaultBranchResponse) GetRefName() string {
	if x != nil {
		return x.RefName
	}
	return ""
}

func (x *DefaultBranchResponse) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type ReadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to get the default branch for.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	Commit   string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Path     string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ReadFileRequest) Reset() {
	*x = ReadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileRequest) ProtoMessage() {}

func (x *ReadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileRequest.ProtoReflect.Descriptor instead.
func (*ReadFileRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{28}
}

func (x *ReadFileRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ReadFileRequest) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *ReadFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ReadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReadFileResponse) Reset() {
	*x = ReadFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileResponse) ProtoMessage() {}

func (x *ReadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileResponse.ProtoReflect.Descriptor instead.
func (*ReadFileResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{29}
}

func (x *ReadFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// DiskInfoRequest is a empty request for the DiskInfo RPC.
type DiskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiskInfoRequest) Reset() {
	*x = DiskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInfoRequest) ProtoMessage() {}

func (x *DiskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInfoRequest.ProtoReflect.Descriptor instead.
func (*DiskInfoRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{30}
}

// DiskInfoResponse contains the results of the DiskInfo RPC request.
type DiskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// free_space is the amount of space avaialable on a gitserver instance.
	FreeSpace uint64 `protobuf:"varint,1,opt,name=free_space,json=freeSpace,proto3" json:"free_space,omitempty"`
	// total_space is the total amount of space on a gitserver instance.
	TotalSpace uint64 `protobuf:"varint,2,opt,name=total_space,json=totalSpace,proto3" json:"total_space,omitempty"`
	// percent_used is the percent of disk space used on a gitserver instance.
	PercentUsed float32 `protobuf:"fixed32,3,opt,name=percent_used,json=percentUsed,proto3" json:"percent_used,omitempty"`
}

func (x *DiskInfoResponse) Reset() {
	*x = DiskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInfoResponse) ProtoMessage() {}

func (x *DiskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInfoResponse.ProtoReflect.Descriptor instead.
func (*DiskInfoResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{31}
}

func (x *DiskInfoResponse) GetFreeSpace() uint64 {
	if x != nil {
		return x.FreeSpace
	}
	return 0
}

func (x *DiskInfoResponse) GetTotalSpace() uint64 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *DiskInfoResponse) GetPercentUsed() float32 {
	if x != nil {
		return x.PercentUsed
	}
	return 0
}

type PatchCommitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// messages are the commit messages to be used for the commit
	Messages []string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// author_name is the name of the author to be used for the commit
	AuthorName string `protobuf:"bytes,2,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	// author_email is the email of the author to be used for the commit
	AuthorEmail string `protobuf:"bytes,3,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	// committer_name is the name of the committer to be used for the commit
	CommitterName string `protobuf:"bytes,4,opt,name=committer_name,json=committerName,proto3" json:"committer_name,omitempty"`
	// committer_email is the email of the committer to be used for the commit
	CommitterEmail string `protobuf:"bytes,5,opt,name=committer_email,json=committerEmail,proto3" json:"committer_email,omitempty"`
	// author_date is the date of the author to be used for the commit
	Date *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *PatchCommitInfo) Reset() {
	*x = PatchCommitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCommitInfo) ProtoMessage() {}

func (x *PatchCommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCommitInfo.ProtoReflect.Descriptor instead.
func (*PatchCommitInfo) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{32}
}

func (x *PatchCommitInfo) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *PatchCommitInfo) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *PatchCommitInfo) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *PatchCommitInfo) GetCommitterName() string {
	if x != nil {
		return x.CommitterName
	}
	return ""
}

func (x *PatchCommitInfo) GetCommitterEmail() string {
	if x != nil {
		return x.CommitterEmail
	}
	return ""
}

func (x *PatchCommitInfo) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type PushConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// remote_url is the git remote URL to which to push the commits.
	// The URL needs to include HTTP basic auth credentials if no
	// unauthenticated requests are allowed by the remote host.
	RemoteUrl string `protobuf:"bytes,1,opt,name=remote_url,json=remoteUrl,proto3" json:"remote_url,omitempty"`
	// private_key is used when the remote URL uses scheme `ssh`. If set,
	// this value is used as the content of the private key. Needs to be
	// set in conjunction with a passphrase.
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// passphrase is the passphrase to decrypt the private key. It is required
	// when passing PrivateKey.
	Passphrase string `protobuf:"bytes,3,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (x *PushConfig) Reset() {
	*x = PushConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushConfig) ProtoMessage() {}

func (x *PushConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushConfig.ProtoReflect.Descriptor instead.
func (*PushConfig) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{33}
}

func (x *PushConfig) GetRemoteUrl() string {
	if x != nil {
		return x.RemoteUrl
	}
	return ""
}

func (x *PushConfig) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *PushConfig) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

// CreateCommitFromPatchBinaryRequest is the request information needed for
// creating the simulated staging area git object for a repo.
type CreateCommitFromPatchBinaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*CreateCommitFromPatchBinaryRequest_Metadata_
	//	*CreateCommitFromPatchBinaryRequest_Patch_
	Payload isCreateCommitFromPatchBinaryRequest_Payload `protobuf_oneof:"payload"`
}

func (x *CreateCommitFromPatchBinaryRequest) Reset() {
	*x = CreateCommitFromPatchBinaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitFromPatchBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitFromPatchBinaryRequest) ProtoMessage() {}

func (x *CreateCommitFromPatchBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitFromPatchBinaryRequest.ProtoReflect.Descriptor instead.
func (*CreateCommitFromPatchBinaryRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{34}
}

func (m *CreateCommitFromPatchBinaryRequest) GetPayload() isCreateCommitFromPatchBinaryRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CreateCommitFromPatchBinaryRequest) GetMetadata() *CreateCommitFromPatchBinaryRequest_Metadata {
	if x, ok := x.GetPayload().(*CreateCommitFromPatchBinaryRequest_Metadata_); ok {
		return x.Metadata
	}
	return nil
}

func (x *CreateCommitFromPatchBinaryRequest) GetPatch() *CreateCommitFromPatchBinaryRequest_Patch {
	if x, ok := x.GetPayload().(*CreateCommitFromPatchBinaryRequest_Patch_); ok {
		return x.Patch
	}
	return nil
}

type isCreateCommitFromPatchBinaryRequest_Payload interface {
	isCreateCommitFromPatchBinaryRequest_Payload()
}

type CreateCommitFromPatchBinaryRequest_Metadata_ struct {
	Metadata *CreateCommitFromPatchBinaryRequest_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type CreateCommitFromPatchBinaryRequest_Patch_ struct {
	Patch *CreateCommitFromPatchBinaryRequest_Patch `protobuf:"bytes,2,opt,name=patch,proto3,oneof"`
}

func (*CreateCommitFromPatchBinaryRequest_Metadata_) isCreateCommitFromPatchBinaryRequest_Payload() {}

func (*CreateCommitFromPatchBinaryRequest_Patch_) isCreateCommitFromPatchBinaryRequest_Payload() {}

type CreateCommitFromPatchError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repository_name is the name of the repository that the error occurred on
	RepositoryName string `protobuf:"bytes,1,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	// internal_error is the error that occurred on the server
	InternalError string `protobuf:"bytes,2,opt,name=internal_error,json=internalError,proto3" json:"internal_error,omitempty"`
	// command is the git command that was attempted
	Command string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	// combined_output is the combined stderr and stdout from running the command
	CombinedOutput string `protobuf:"bytes,4,opt,name=combined_output,json=combinedOutput,proto3" json:"combined_output,omitempty"`
}

func (x *CreateCommitFromPatchError) Reset() {
	*x = CreateCommitFromPatchError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitFromPatchError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitFromPatchError) ProtoMessage() {}

func (x *CreateCommitFromPatchError) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitFromPatchError.ProtoReflect.Descriptor instead.
func (*CreateCommitFromPatchError) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{35}
}

func (x *CreateCommitFromPatchError) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *CreateCommitFromPatchError) GetInternalError() string {
	if x != nil {
		return x.InternalError
	}
	return ""
}

func (x *CreateCommitFromPatchError) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CreateCommitFromPatchError) GetCombinedOutput() string {
	if x != nil {
		return x.CombinedOutput
	}
	return ""
}

// CreateCommitFromPatchBinaryResponse is the response type returned after
// creating a commit from a patch
type CreateCommitFromPatchBinaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rev is the tag that the staging object can be found at
	Rev string `protobuf:"bytes,1,opt,name=rev,proto3" json:"rev,omitempty"`
	// changelistid is the Perforce changelist id
	ChangelistId string `protobuf:"bytes,3,opt,name=changelist_id,json=changelistId,proto3" json:"changelist_id,omitempty"`
}

func (x *CreateCommitFromPatchBinaryResponse) Reset() {
	*x = CreateCommitFromPatchBinaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitFromPatchBinaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitFromPatchBinaryResponse) ProtoMessage() {}

func (x *CreateCommitFromPatchBinaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitFromPatchBinaryResponse.ProtoReflect.Descriptor instead.
func (*CreateCommitFromPatchBinaryResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{36}
}

func (x *CreateCommitFromPatchBinaryResponse) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

func (x *CreateCommitFromPatchBinaryResponse) GetChangelistId() string {
	if x != nil {
		return x.ChangelistId
	}
	return ""
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// Deprecated: Marked as deprecated in gitserver.proto.
	EnsureRevision []byte   `protobuf:"bytes,2,opt,name=ensure_revision,json=ensureRevision,proto3" json:"ensure_revision,omitempty"`
	Args           [][]byte `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Deprecated: Marked as deprecated in gitserver.proto.
	Stdin     []byte `protobuf:"bytes,4,opt,name=stdin,proto3" json:"stdin,omitempty"`
	NoTimeout bool   `protobuf:"varint,5,opt,name=no_timeout,json=noTimeout,proto3" json:"no_timeout,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{37}
}

func (x *ExecRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

// Deprecated: Marked as deprecated in gitserver.proto.
func (x *ExecRequest) GetEnsureRevision() []byte {
	if x != nil {
		return x.EnsureRevision
	}
	return nil
}

func (x *ExecRequest) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

// Deprecated: Marked as deprecated in gitserver.proto.
func (x *ExecRequest) GetStdin() []byte {
	if x != nil {
		return x.Stdin
	}
	return nil
}

func (x *ExecRequest) GetNoTimeout() bool {
	if x != nil {
		return x.NoTimeout
	}
	return false
}

type ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExecResponse) Reset() {
	*x = ExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResponse) ProtoMessage() {}

func (x *ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResponse.ProtoReflect.Descriptor instead.
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{38}
}

func (x *ExecResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RepoNotFoundPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo            string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	CloneInProgress bool   `protobuf:"varint,2,opt,name=clone_in_progress,json=cloneInProgress,proto3" json:"clone_in_progress,omitempty"`
	CloneProgress   string `protobuf:"bytes,3,opt,name=clone_progress,json=cloneProgress,proto3" json:"clone_progress,omitempty"`
}

func (x *RepoNotFoundPayload) Reset() {
	*x = RepoNotFoundPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoNotFoundPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoNotFoundPayload) ProtoMessage() {}

func (x *RepoNotFoundPayload) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoNotFoundPayload.ProtoReflect.Descriptor instead.
func (*RepoNotFoundPayload) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{39}
}

func (x *RepoNotFoundPayload) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RepoNotFoundPayload) GetCloneInProgress() bool {
	if x != nil {
		return x.CloneInProgress
	}
	return false
}

func (x *RepoNotFoundPayload) GetCloneProgress() string {
	if x != nil {
		return x.CloneProgress
	}
	return ""
}

type RevisionNotFoundPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Spec string `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *RevisionNotFoundPayload) Reset() {
	*x = RevisionNotFoundPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionNotFoundPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionNotFoundPayload) ProtoMessage() {}

func (x *RevisionNotFoundPayload) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionNotFoundPayload.ProtoReflect.Descriptor instead.
func (*RevisionNotFoundPayload) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{40}
}

func (x *RevisionNotFoundPayload) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RevisionNotFoundPayload) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

type FileNotFoundPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo   string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Commit string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileNotFoundPayload) Reset() {
	*x = FileNotFoundPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileNotFoundPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileNotFoundPayload) ProtoMessage() {}

func (x *FileNotFoundPayload) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileNotFoundPayload.ProtoReflect.Descriptor instead.
func (*FileNotFoundPayload) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{41}
}

func (x *FileNotFoundPayload) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *FileNotFoundPayload) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *FileNotFoundPayload) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ExecStatusPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Stderr     string `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *ExecStatusPayload) Reset() {
	*x = ExecStatusPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStatusPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStatusPayload) ProtoMessage() {}

func (x *ExecStatusPayload) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStatusPayload.ProtoReflect.Descriptor instead.
func (*ExecStatusPayload) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{42}
}

func (x *ExecStatusPayload) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ExecStatusPayload) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to be searched
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// revisions is the list of git revision to be searched. They are all passed
	// to the same underlying git command, so the searched commits will be the
	// union of all revisions listed.
	Revisions []*RevisionSpecifier `protobuf:"bytes,2,rep,name=revisions,proto3" json:"revisions,omitempty"`
	// limit is a limit on the number of search results returned. Additional
	// results will be ignored.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// include_diff specifies whether the full diff should be included on the
	// result messages. This can be expensive, so is disabled by default.
	IncludeDiff bool `protobuf:"varint,4,opt,name=include_diff,json=includeDiff,proto3" json:"include_diff,omitempty"`
	// include_modified specifies whether to include the list of modified files
	// in the search results. This can be expensive, so is disabled by default.
	IncludeModifiedFiles bool `protobuf:"varint,5,opt,name=include_modified_files,json=includeModifiedFiles,proto3" json:"include_modified_files,omitempty"`
	// query is a tree of filters to apply to commits being searched.
	Query *QueryNode `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{43}
}

func (x *SearchRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *SearchRequest) GetRevisions() []*RevisionSpecifier {
	if x != nil {
		return x.Revisions
	}
	return nil
}

func (x *SearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchRequest) GetIncludeDiff() bool {
	if x != nil {
		return x.IncludeDiff
	}
	return false
}

func (x *SearchRequest) GetIncludeModifiedFiles() bool {
	if x != nil {
		return x.IncludeModifiedFiles
	}
	return false
}

func (x *SearchRequest) GetQuery() *QueryNode {
	if x != nil {
		return x.Query
	}
	return nil
}

type RevisionSpecifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RevSpec is a revision range specifier suitable for passing to git. See
	// the manpage gitrevisions(7).
	RevSpec string `protobuf:"bytes,1,opt,name=rev_spec,json=revSpec,proto3" json:"rev_spec,omitempty"`
}

func (x *RevisionSpecifier) Reset() {
	*x = RevisionSpecifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionSpecifier) ProtoMessage() {}

func (x *RevisionSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionSpecifier.ProtoReflect.Descriptor instead.
func (*RevisionSpecifier) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{44}
}

func (x *RevisionSpecifier) GetRevSpec() string {
	if x != nil {
		return x.RevSpec
	}
	return ""
}

// AuthorMatchesNode is a predicate that matches if the author's name or email
// address matches the regex pattern.
type AuthorMatchesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *AuthorMatchesNode) Reset() {
	*x = AuthorMatchesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorMatchesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorMatchesNode) ProtoMessage() {}

func (x *AuthorMatchesNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorMatchesNode.ProtoReflect.Descriptor instead.
func (*AuthorMatchesNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{45}
}

func (x *AuthorMatchesNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *AuthorMatchesNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// CommitterMatchesNode is a predicate that matches if the author's name or
// email address matches the regex pattern.
type CommitterMatchesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *CommitterMatchesNode) Reset() {
	*x = CommitterMatchesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitterMatchesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitterMatchesNode) ProtoMessage() {}

func (x *CommitterMatchesNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitterMatchesNode.ProtoReflect.Descriptor instead.
func (*CommitterMatchesNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{46}
}

func (x *CommitterMatchesNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *CommitterMatchesNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// CommitBeforeNode is a predicate that matches if the commit is before the
// given date
type CommitBeforeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CommitBeforeNode) Reset() {
	*x = CommitBeforeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitBeforeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitBeforeNode) ProtoMessage() {}

func (x *CommitBeforeNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitBeforeNode.ProtoReflect.Descriptor instead.
func (*CommitBeforeNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{47}
}

func (x *CommitBeforeNode) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// CommitAfterNode is a predicate that matches if the commit is after the given
// date
type CommitAfterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CommitAfterNode) Reset() {
	*x = CommitAfterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitAfterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitAfterNode) ProtoMessage() {}

func (x *CommitAfterNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitAfterNode.ProtoReflect.Descriptor instead.
func (*CommitAfterNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{48}
}

func (x *CommitAfterNode) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// MessageMatchesNode is a predicate that matches if the commit message matches
// the provided regex pattern.
type MessageMatchesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *MessageMatchesNode) Reset() {
	*x = MessageMatchesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMatchesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMatchesNode) ProtoMessage() {}

func (x *MessageMatchesNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMatchesNode.ProtoReflect.Descriptor instead.
func (*MessageMatchesNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{49}
}

func (x *MessageMatchesNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *MessageMatchesNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// DiffMatchesNode is a a predicate that matches if any of the lines changed by
// the commit match the given regex pattern.
type DiffMatchesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *DiffMatchesNode) Reset() {
	*x = DiffMatchesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffMatchesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffMatchesNode) ProtoMessage() {}

func (x *DiffMatchesNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffMatchesNode.ProtoReflect.Descriptor instead.
func (*DiffMatchesNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{50}
}

func (x *DiffMatchesNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *DiffMatchesNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// DiffModifiesFileNode is a predicate that matches if the commit modifies any
// files that match the given regex pattern.
type DiffModifiesFileNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	IgnoreCase bool   `protobuf:"varint,2,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
}

func (x *DiffModifiesFileNode) Reset() {
	*x = DiffModifiesFileNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffModifiesFileNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffModifiesFileNode) ProtoMessage() {}

func (x *DiffModifiesFileNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffModifiesFileNode.ProtoReflect.Descriptor instead.
func (*DiffModifiesFileNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{51}
}

func (x *DiffModifiesFileNode) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *DiffModifiesFileNode) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// BooleanNode is a predicate that will either always match or never match
type BooleanNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanNode) Reset() {
	*x = BooleanNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanNode) ProtoMessage() {}

func (x *BooleanNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanNode.ProtoReflect.Descriptor instead.
func (*BooleanNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{52}
}

func (x *BooleanNode) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type OperatorNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     OperatorKind `protobuf:"varint,1,opt,name=kind,proto3,enum=gitserver.v1.OperatorKind" json:"kind,omitempty"`
	Operands []*QueryNode `protobuf:"bytes,2,rep,name=operands,proto3" json:"operands,omitempty"`
}

func (x *OperatorNode) Reset() {
	*x = OperatorNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorNode) ProtoMessage() {}

func (x *OperatorNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorNode.ProtoReflect.Descriptor instead.
func (*OperatorNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{53}
}

func (x *OperatorNode) GetKind() OperatorKind {
	if x != nil {
		return x.Kind
	}
	return OperatorKind_OPERATOR_KIND_UNSPECIFIED
}

func (x *OperatorNode) GetOperands() []*QueryNode {
	if x != nil {
		return x.Operands
	}
	return nil
}

type QueryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*QueryNode_AuthorMatches
	//	*QueryNode_CommitterMatches
	//	*QueryNode_CommitBefore
	//	*QueryNode_CommitAfter
	//	*QueryNode_MessageMatches
	//	*QueryNode_DiffMatches
	//	*QueryNode_DiffModifiesFile
	//	*QueryNode_Boolean
	//	*QueryNode_Operator
	Value isQueryNode_Value `protobuf_oneof:"value"`
}

func (x *QueryNode) Reset() {
	*x = QueryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNode) ProtoMessage() {}

func (x *QueryNode) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNode.ProtoReflect.Descriptor instead.
func (*QueryNode) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{54}
}

func (m *QueryNode) GetValue() isQueryNode_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QueryNode) GetAuthorMatches() *AuthorMatchesNode {
	if x, ok := x.GetValue().(*QueryNode_AuthorMatches); ok {
		return x.AuthorMatches
	}
	return nil
}

func (x *QueryNode) GetCommitterMatches() *CommitterMatchesNode {
	if x, ok := x.GetValue().(*QueryNode_CommitterMatches); ok {
		return x.CommitterMatches
	}
	return nil
}

func (x *QueryNode) GetCommitBefore() *CommitBeforeNode {
	if x, ok := x.GetValue().(*QueryNode_CommitBefore); ok {
		return x.CommitBefore
	}
	return nil
}

func (x *QueryNode) GetCommitAfter() *CommitAfterNode {
	if x, ok := x.GetValue().(*QueryNode_CommitAfter); ok {
		return x.CommitAfter
	}
	return nil
}

func (x *QueryNode) GetMessageMatches() *MessageMatchesNode {
	if x, ok := x.GetValue().(*QueryNode_MessageMatches); ok {
		return x.MessageMatches
	}
	return nil
}

func (x *QueryNode) GetDiffMatches() *DiffMatchesNode {
	if x, ok := x.GetValue().(*QueryNode_DiffMatches); ok {
		return x.DiffMatches
	}
	return nil
}

func (x *QueryNode) GetDiffModifiesFile() *DiffModifiesFileNode {
	if x, ok := x.GetValue().(*QueryNode_DiffModifiesFile); ok {
		return x.DiffModifiesFile
	}
	return nil
}

func (x *QueryNode) GetBoolean() *BooleanNode {
	if x, ok := x.GetValue().(*QueryNode_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QueryNode) GetOperator() *OperatorNode {
	if x, ok := x.GetValue().(*QueryNode_Operator); ok {
		return x.Operator
	}
	return nil
}

type isQueryNode_Value interface {
	isQueryNode_Value()
}

type QueryNode_AuthorMatches struct {
	AuthorMatches *AuthorMatchesNode `protobuf:"bytes,1,opt,name=author_matches,json=authorMatches,proto3,oneof"`
}

type QueryNode_CommitterMatches struct {
	CommitterMatches *CommitterMatchesNode `protobuf:"bytes,2,opt,name=committer_matches,json=committerMatches,proto3,oneof"`
}

type QueryNode_CommitBefore struct {
	CommitBefore *CommitBeforeNode `protobuf:"bytes,3,opt,name=commit_before,json=commitBefore,proto3,oneof"`
}

type QueryNode_CommitAfter struct {
	CommitAfter *CommitAfterNode `protobuf:"bytes,4,opt,name=commit_after,json=commitAfter,proto3,oneof"`
}

type QueryNode_MessageMatches struct {
	MessageMatches *MessageMatchesNode `protobuf:"bytes,5,opt,name=message_matches,json=messageMatches,proto3,oneof"`
}

type QueryNode_DiffMatches struct {
	DiffMatches *DiffMatchesNode `protobuf:"bytes,6,opt,name=diff_matches,json=diffMatches,proto3,oneof"`
}

type QueryNode_DiffModifiesFile struct {
	DiffModifiesFile *DiffModifiesFileNode `protobuf:"bytes,7,opt,name=diff_modifies_file,json=diffModifiesFile,proto3,oneof"`
}

type QueryNode_Boolean struct {
	Boolean *BooleanNode `protobuf:"bytes,8,opt,name=boolean,proto3,oneof"`
}

type QueryNode_Operator struct {
	Operator *OperatorNode `protobuf:"bytes,9,opt,name=operator,proto3,oneof"`
}

func (*QueryNode_AuthorMatches) isQueryNode_Value() {}

func (*QueryNode_CommitterMatches) isQueryNode_Value() {}

func (*QueryNode_CommitBefore) isQueryNode_Value() {}

func (*QueryNode_CommitAfter) isQueryNode_Value() {}

func (*QueryNode_MessageMatches) isQueryNode_Value() {}

func (*QueryNode_DiffMatches) isQueryNode_Value() {}

func (*QueryNode_DiffModifiesFile) isQueryNode_Value() {}

func (*QueryNode_Boolean) isQueryNode_Value() {}

func (*QueryNode_Operator) isQueryNode_Value() {}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*SearchResponse_Match
	//	*SearchResponse_LimitHit
	Message isSearchResponse_Message `protobuf_oneof:"message"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{55}
}

func (m *SearchResponse) GetMessage() isSearchResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *SearchResponse) GetMatch() *CommitMatch {
	if x, ok := x.GetMessage().(*SearchResponse_Match); ok {
		return x.Match
	}
	return nil
}

func (x *SearchResponse) GetLimitHit() bool {
	if x, ok := x.GetMessage().(*SearchResponse_LimitHit); ok {
		return x.LimitHit
	}
	return false
}

type isSearchResponse_Message interface {
	isSearchResponse_Message()
}

type SearchResponse_Match struct {
	Match *CommitMatch `protobuf:"bytes,1,opt,name=match,proto3,oneof"`
}

type SearchResponse_LimitHit struct {
	LimitHit bool `protobuf:"varint,2,opt,name=limit_hit,json=limitHit,proto3,oneof"`
}

func (*SearchResponse_Match) isSearchResponse_Message() {}

func (*SearchResponse_LimitHit) isSearchResponse_Message() {}

type CommitMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// oid is the 40-character, hex-encoded commit hash
	Oid       string                 `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Author    *CommitMatch_Signature `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Committer *CommitMatch_Signature `protobuf:"bytes,3,opt,name=committer,proto3" json:"committer,omitempty"`
	// parents is the list of commit hashes for this commit's parents
	Parents    []string `protobuf:"bytes,4,rep,name=parents,proto3" json:"parents,omitempty"`
	Refs       []string `protobuf:"bytes,5,rep,name=refs,proto3" json:"refs,omitempty"`
	SourceRefs []string `protobuf:"bytes,6,rep,name=source_refs,json=sourceRefs,proto3" json:"source_refs,omitempty"`
	// message is the commits message and a list of ranges that match
	// the search query.
	Message *CommitMatch_MatchedString `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	// diff is the diff between this commit and its first parent.
	// May be unset if `include_diff` was not specified in the request.
	Diff *CommitMatch_MatchedString `protobuf:"bytes,8,opt,name=diff,proto3" json:"diff,omitempty"`
	// modified_files is the list of files modified by this commit compared
	// to its first parent. May be unset if `include_modified_files` is not
	// specified in the request.
	ModifiedFiles []string `protobuf:"bytes,9,rep,name=modified_files,json=modifiedFiles,proto3" json:"modified_files,omitempty"`
}

func (x *CommitMatch) Reset() {
	*x = CommitMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch) ProtoMessage() {}

func (x *CommitMatch) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch.ProtoReflect.Descriptor instead.
func (*CommitMatch) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{56}
}

func (x *CommitMatch) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *CommitMatch) GetAuthor() *CommitMatch_Signature {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CommitMatch) GetCommitter() *CommitMatch_Signature {
	if x != nil {
		return x.Committer
	}
	return nil
}

func (x *CommitMatch) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *CommitMatch) GetRefs() []string {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *CommitMatch) GetSourceRefs() []string {
	if x != nil {
		return x.SourceRefs
	}
	return nil
}

func (x *CommitMatch) GetMessage() *CommitMatch_MatchedString {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CommitMatch) GetDiff() *CommitMatch_MatchedString {
	if x != nil {
		return x.Diff
	}
	return nil
}

func (x *CommitMatch) GetModifiedFiles() []string {
	if x != nil {
		return x.ModifiedFiles
	}
	return nil
}

// ArchiveRequest is set of parameters for the Archive RPC.
type ArchiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to be archived.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// treeish is the tree or commit to produce an archive for.
	Treeish string `protobuf:"bytes,2,opt,name=treeish,proto3" json:"treeish,omitempty"`
	// format is the format of the resulting archive (either ZIP or TAR).
	Format ArchiveFormat `protobuf:"varint,3,opt,name=format,proto3,enum=gitserver.v1.ArchiveFormat" json:"format,omitempty"`
	// paths is the list of paths to include in the archive. If empty, all
	// paths are included.
	Paths [][]byte `protobuf:"bytes,4,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *ArchiveRequest) Reset() {
	*x = ArchiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRequest) ProtoMessage() {}

func (x *ArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{57}
}

func (x *ArchiveRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ArchiveRequest) GetTreeish() string {
	if x != nil {
		return x.Treeish
	}
	return ""
}

func (x *ArchiveRequest) GetFormat() ArchiveFormat {
	if x != nil {
		return x.Format
	}
	return ArchiveFormat_ARCHIVE_FORMAT_UNSPECIFIED
}

func (x *ArchiveRequest) GetPaths() [][]byte {
	if x != nil {
		return x.Paths
	}
	return nil
}

// ArchiveResponse is the response from the Archive RPC that returns a chunk of
// the archive.
type ArchiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ArchiveResponse) Reset() {
	*x = ArchiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveResponse) ProtoMessage() {}

func (x *ArchiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveResponse.ProtoReflect.Descriptor instead.
func (*ArchiveResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{58}
}

func (x *ArchiveResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// IsRepoCloneableRequest is a request to check if a repository is cloneable.
type IsRepoCloneableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to check.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *IsRepoCloneableRequest) Reset() {
	*x = IsRepoCloneableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRepoCloneableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRepoCloneableRequest) ProtoMessage() {}

func (x *IsRepoCloneableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRepoCloneableRequest.ProtoReflect.Descriptor instead.
func (*IsRepoCloneableRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{59}
}

func (x *IsRepoCloneableRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

// IsRepoCloneableResponse is the response from the IsCloneable RPC.
type IsRepoCloneableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cloneable is true if the repository is cloneable.
	Cloneable bool `protobuf:"varint,1,opt,name=cloneable,proto3" json:"cloneable,omitempty"`
	// cloned is true if the repository was cloned in the past.
	Cloned bool `protobuf:"varint,2,opt,name=cloned,proto3" json:"cloned,omitempty"`
	// reason is why the repository is not cloneable.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *IsRepoCloneableResponse) Reset() {
	*x = IsRepoCloneableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsRepoCloneableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRepoCloneableResponse) ProtoMessage() {}

func (x *IsRepoCloneableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsRepoCloneableResponse.ProtoReflect.Descriptor instead.
func (*IsRepoCloneableResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{60}
}

func (x *IsRepoCloneableResponse) GetCloneable() bool {
	if x != nil {
		return x.Cloneable
	}
	return false
}

func (x *IsRepoCloneableResponse) GetCloned() bool {
	if x != nil {
		return x.Cloned
	}
	return false
}

func (x *IsRepoCloneableResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// RepoCloneProgressRequest is a request for information about the clone
// progress of multiple repositories on gitserver.
type RepoCloneProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to get the progress for.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *RepoCloneProgressRequest) Reset() {
	*x = RepoCloneProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCloneProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCloneProgressRequest) ProtoMessage() {}

func (x *RepoCloneProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCloneProgressRequest.ProtoReflect.Descriptor instead.
func (*RepoCloneProgressRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{61}
}

func (x *RepoCloneProgressRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

// RepoCloneProgressResponse is the response to a repository clone progress
// request.
type RepoCloneProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clone_in_progress is whether the repository is currently being cloned
	CloneInProgress bool `protobuf:"varint,1,opt,name=clone_in_progress,json=cloneInProgress,proto3" json:"clone_in_progress,omitempty"`
	// clone_progress is a progress message from the running clone command.
	CloneProgress string `protobuf:"bytes,2,opt,name=clone_progress,json=cloneProgress,proto3" json:"clone_progress,omitempty"`
	// cloned is whether the repository has been cloned successfully
	Cloned bool `protobuf:"varint,3,opt,name=cloned,proto3" json:"cloned,omitempty"`
}

func (x *RepoCloneProgressResponse) Reset() {
	*x = RepoCloneProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCloneProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCloneProgressResponse) ProtoMessage() {}

func (x *RepoCloneProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCloneProgressResponse.ProtoReflect.Descriptor instead.
func (*RepoCloneProgressResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{62}
}

func (x *RepoCloneProgressResponse) GetCloneInProgress() bool {
	if x != nil {
		return x.CloneInProgress
	}
	return false
}

func (x *RepoCloneProgressResponse) GetCloneProgress() string {
	if x != nil {
		return x.CloneProgress
	}
	return ""
}

func (x *RepoCloneProgressResponse) GetCloned() bool {
	if x != nil {
		return x.Cloned
	}
	return false
}

// ListGitoliteRequest is a request to list all repositories in gitolite.
type ListGitoliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host is the hostname of the gitolite instance
	GitoliteHost string `protobuf:"bytes,1,opt,name=gitolite_host,json=gitoliteHost,proto3" json:"gitolite_host,omitempty"`
}

func (x *ListGitoliteRequest) Reset() {
	*x = ListGitoliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitoliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitoliteRequest) ProtoMessage() {}

func (x *ListGitoliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitoliteRequest.ProtoReflect.Descriptor instead.
func (*ListGitoliteRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{63}
}

func (x *ListGitoliteRequest) GetGitoliteHost() string {
	if x != nil {
		return x.GitoliteHost
	}
	return ""
}

// GitoliteRepo is a repository in gitolite.
type GitoliteRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the repository
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// url is the URL of the repository
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GitoliteRepo) Reset() {
	*x = GitoliteRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitoliteRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitoliteRepo) ProtoMessage() {}

func (x *GitoliteRepo) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitoliteRepo.ProtoReflect.Descriptor instead.
func (*GitoliteRepo) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{64}
}

func (x *GitoliteRepo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitoliteRepo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// ListGitoliteResponse is the response from the ListGitolite RPC.
type ListGitoliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repos is the list of repositories in gitolite
	Repos []*GitoliteRepo `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *ListGitoliteResponse) Reset() {
	*x = ListGitoliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitoliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitoliteResponse) ProtoMessage() {}

func (x *ListGitoliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitoliteResponse.ProtoReflect.Descriptor instead.
func (*ListGitoliteResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{65}
}

func (x *ListGitoliteResponse) GetRepos() []*GitoliteRepo {
	if x != nil {
		return x.Repos
	}
	return nil
}

// GetObjectRequest is a request to get a git object.
type GetObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to get the object from.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// object_name is the name of the object to get.
	ObjectName string `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
}

func (x *GetObjectRequest) Reset() {
	*x = GetObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectRequest) ProtoMessage() {}

func (x *GetObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectRequest.ProtoReflect.Descriptor instead.
func (*GetObjectRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{66}
}

func (x *GetObjectRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GetObjectRequest) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

// GetObjectResponse is the response from the GetObject RPC.
type GetObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// object is the git object.
	Object *GitObject `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *GetObjectResponse) Reset() {
	*x = GetObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectResponse) ProtoMessage() {}

func (x *GetObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectResponse.ProtoReflect.Descriptor instead.
func (*GetObjectResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{67}
}

func (x *GetObjectResponse) GetObject() *GitObject {
	if x != nil {
		return x.Object
	}
	return nil
}

// GitObject is a git object.
type GitObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the object id.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type is the type of the object.
	Type GitObject_ObjectType `protobuf:"varint,2,opt,name=type,proto3,enum=gitserver.v1.GitObject_ObjectType" json:"type,omitempty"`
}

func (x *GitObject) Reset() {
	*x = GitObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitObject) ProtoMessage() {}

func (x *GitObject) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitObject.ProtoReflect.Descriptor instead.
func (*GitObject) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{68}
}

func (x *GitObject) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GitObject) GetType() GitObject_ObjectType {
	if x != nil {
		return x.Type
	}
	return GitObject_OBJECT_TYPE_UNSPECIFIED
}

// IsPerforcePathCloneableRequest is the request to check if a Perforce path is
// cloneable.
type IsPerforcePathCloneableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionDetails *PerforceConnectionDetails `protobuf:"bytes,1,opt,name=connection_details,json=connectionDetails,proto3" json:"connection_details,omitempty"`
	DepotPath         string                     `protobuf:"bytes,2,opt,name=depot_path,json=depotPath,proto3" json:"depot_path,omitempty"`
}

func (x *IsPerforcePathCloneableRequest) Reset() {
	*x = IsPerforcePathCloneableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPerforcePathCloneableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPerforcePathCloneableRequest) ProtoMessage() {}

func (x *IsPerforcePathCloneableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPerforcePathCloneableRequest.ProtoReflect.Descriptor instead.
func (*IsPerforcePathCloneableRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{69}
}

func (x *IsPerforcePathCloneableRequest) GetConnectionDetails() *PerforceConnectionDetails {
	if x != nil {
		return x.ConnectionDetails
	}
	return nil
}

func (x *IsPerforcePathCloneableRequest) GetDepotPath() string {
	if x != nil {
		return x.DepotPath
	}
	return ""
}

// IsPerforcePathCloneableResponse is the response from checking if a Perforce
// path is cloneable.
type IsPerforcePathCloneableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsPerforcePathCloneableResponse) Reset() {
	*x = IsPerforcePathCloneableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPerforcePathCloneableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPerforcePathCloneableResponse) ProtoMessage() {}

func (x *IsPerforcePathCloneableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPerforcePathCloneableResponse.ProtoReflect.Descriptor instead.
func (*IsPerforcePathCloneableResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{70}
}

// CheckPerforceCredentialsRequest is the request to check if given Perforce
// credentials are valid.
type CheckPerforceCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionDetails *PerforceConnectionDetails `protobuf:"bytes,1,opt,name=connection_details,json=connectionDetails,proto3" json:"connection_details,omitempty"`
}

func (x *CheckPerforceCredentialsRequest) Reset() {
	*x = CheckPerforceCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPerforceCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPerforceCredentialsRequest) ProtoMessage() {}

func (x *CheckPerforceCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPerforceCredentialsRequest.ProtoReflect.Descriptor instead.
func (*CheckPerforceCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{71}
}

func (x *CheckPerforceCredentialsRequest) GetConnectionDetails() *PerforceConnectionDetails {
	if x != nil {
		return x.ConnectionDetails
	}
	return nil
}

// IsPerforcePathCloneableResponse is the response from checking if given
// Perforce credentials are valid.
type CheckPerforceCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckPerforceCredentialsResponse) Reset() {
	*x = CheckPerforceCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPerforceCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPerforceCredentialsResponse) ProtoMessage() {}

func (x *CheckPerforceCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPerforceCredentialsResponse.ProtoReflect.Descriptor instead.
func (*CheckPerforceCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{72}
}

// PerforceConnectionDetails holds all the details required to talk to a
// Perforce server.
type PerforceConnectionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P4Port   string `protobuf:"bytes,1,opt,name=p4port,proto3" json:"p4port,omitempty"`
	P4User   string `protobuf:"bytes,2,opt,name=p4user,proto3" json:"p4user,omitempty"`
	P4Passwd string `protobuf:"bytes,3,opt,name=p4passwd,proto3" json:"p4passwd,omitempty"`
}

func (x *PerforceConnectionDetails) Reset() {
	*x = PerforceConnectionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceConnectionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceConnectionDetails) ProtoMessage() {}

func (x *PerforceConnectionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceConnectionDetails.ProtoReflect.Descriptor instead.
func (*PerforceConnectionDetails) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{73}
}

func (x *PerforceConnectionDetails) GetP4Port() string {
	if x != nil {
		return x.P4Port
	}
	return ""
}

func (x *PerforceConnectionDetails) GetP4User() string {
	if x != nil {
		return x.P4User
	}
	return ""
}

func (x *PerforceConnectionDetails) GetP4Passwd() string {
	if x != nil {
		return x.P4Passwd
	}
	return ""
}

// PerforceGetChangelistRequest is used to retrieve information about a specific
// Perforce changelist.
type PerforceGetChangelistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionDetails *PerforceConnectionDetails `protobuf:"bytes,1,opt,name=connection_details,json=connectionDetails,proto3" json:"connection_details,omitempty"`
	ChangelistId      string                     `protobuf:"bytes,2,opt,name=changelist_id,json=changelistId,proto3" json:"changelist_id,omitempty"`
}

func (x *PerforceGetChangelistRequest) Reset() {
	*x = PerforceGetChangelistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceGetChangelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceGetChangelistRequest) ProtoMessage() {}

func (x *PerforceGetChangelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceGetChangelistRequest.ProtoReflect.Descriptor instead.
func (*PerforceGetChangelistRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{74}
}

func (x *PerforceGetChangelistRequest) GetConnectionDetails() *PerforceConnectionDetails {
	if x != nil {
		return x.ConnectionDetails
	}
	return nil
}

func (x *PerforceGetChangelistRequest) GetChangelistId() string {
	if x != nil {
		return x.ChangelistId
	}
	return ""
}

// PerforceGetChangelistResponse returns information about the requested
// changelist.
type PerforceGetChangelistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changelist *PerforceChangelist `protobuf:"bytes,1,opt,name=changelist,proto3" json:"changelist,omitempty"`
}

func (x *PerforceGetChangelistResponse) Reset() {
	*x = PerforceGetChangelistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceGetChangelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceGetChangelistResponse) ProtoMessage() {}

func (x *PerforceGetChangelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceGetChangelistResponse.ProtoReflect.Descriptor instead.
func (*PerforceGetChangelistResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{75}
}

func (x *PerforceGetChangelistResponse) GetChangelist() *PerforceChangelist {
	if x != nil {
		return x.Changelist
	}
	return nil
}

// PerforceChangelist represents a changelist in Perforce.
type PerforceChangelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationDate *timestamppb.Timestamp                     `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	State        PerforceChangelist_PerforceChangelistState `protobuf:"varint,3,opt,name=state,proto3,enum=gitserver.v1.PerforceChangelist_PerforceChangelistState" json:"state,omitempty"`
	Author       string                                     `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Title        string                                     `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Message      string                                     `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PerforceChangelist) Reset() {
	*x = PerforceChangelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceChangelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceChangelist) ProtoMessage() {}

func (x *PerforceChangelist) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceChangelist.ProtoReflect.Descriptor instead.
func (*PerforceChangelist) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{76}
}

func (x *PerforceChangelist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PerforceChangelist) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *PerforceChangelist) GetState() PerforceChangelist_PerforceChangelistState {
	if x != nil {
		return x.State
	}
	return PerforceChangelist_PERFORCE_CHANGELIST_STATE_UNSPECIFIED
}

func (x *PerforceChangelist) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PerforceChangelist) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PerforceChangelist) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// IsPerforceSuperUserRequest can be used to check if a given Perforce user is a
// super user.
type IsPerforceSuperUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionDetails *PerforceConnectionDetails `protobuf:"bytes,1,opt,name=connection_details,json=connectionDetails,proto3" json:"connection_details,omitempty"`
}

func (x *IsPerforceSuperUserRequest) Reset() {
	*x = IsPerforceSuperUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPerforceSuperUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPerforceSuperUserRequest) ProtoMessage() {}

func (x *IsPerforceSuperUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPerforceSuperUserRequest.ProtoReflect.Descriptor instead.
func (*IsPerforceSuperUserRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{77}
}

func (x *IsPerforceSuperUserRequest) GetConnectionDetails() *PerforceConnectionDetails {
	if x != nil {
		return x.ConnectionDetails
	}
	return nil
}

// IsPerforceSuperUserResponse is the response from checking if a given Perforce
// user is a super user.
// No fields here, returning an error means "no".
type IsPerforceSuperUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsPerforceSuperUserResponse) Reset() {
	*x = IsPerforceSuperUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPerforceSuperUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPerforceSuperUserResponse) ProtoMessage() {}

func (x *IsPerforceSuperUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPerforceSuperUserResponse.ProtoReflect.Descriptor instead.
func (*IsPerforceSuperUserResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{78}
}

// PerforceProtectsForDepotRequest requests all the protections that apply to
// the given depot.
type PerforceProtectsForDepotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionDetails *PerforceConnectionDetails `protobuf:"bytes,1,opt,name=connection_details,json=connectionDetails,proto3" json:"connection_details,omitempty"`
	Depot             string                     `protobuf:"bytes,2,opt,name=depot,proto3" json:"depot,omitempty"`
}

func (x *PerforceProtectsForDepotRequest) Reset() {
	*x = PerforceProtectsForDepotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceProtectsForDepotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceProtectsForDepotRequest) ProtoMessage() {}

func (x *PerforceProtectsForDepotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceProtectsForDepotRequest.ProtoReflect.Descriptor instead.
func (*PerforceProtectsForDepotRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{79}
}

func (x *PerforceProtectsForDepotRequest) GetConnectionDetails() *PerforceConnectionDetails {
	if x != nil {
		return x.ConnectionDetails
	}
	return nil
}

func (x *PerforceProtectsForDepotRequest) GetDepot() string {
	if x != nil {
		return x.Depot
	}
	return ""
}

// PerforceProtectsForDepotResponse returns all the protections that apply to
// the given depot.
type PerforceProtectsForDepotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protects []*PerforceProtect `protobuf:"bytes,1,rep,name=protects,proto3" json:"protects,omitempty"`
}

func (x *PerforceProtectsForDepotResponse) Reset() {
	*x = PerforceProtectsForDepotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceProtectsForDepotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceProtectsForDepotResponse) ProtoMessage() {}

func (x *PerforceProtectsForDepotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceProtectsForDepotResponse.ProtoReflect.Descriptor instead.
func (*PerforceProtectsForDepotResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{80}
}

func (x *PerforceProtectsForDepotResponse) GetProtects() []*PerforceProtect {
	if x != nil {
		return x.Protects
	}
	return nil
}

// PerforceProtectsForUserRequest requests all the protections that apply to the
// given user.
type PerforceProtectsForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionDetails *PerforceConnectionDetails `protobuf:"bytes,1,opt,name=connection_details,json=connectionDetails,proto3" json:"connection_details,omitempty"`
	Username          string                     `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *PerforceProtectsForUserRequest) Reset() {
	*x = PerforceProtectsForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceProtectsForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceProtectsForUserRequest) ProtoMessage() {}

func (x *PerforceProtectsForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceProtectsForUserRequest.ProtoReflect.Descriptor instead.
func (*PerforceProtectsForUserRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{81}
}

func (x *PerforceProtectsForUserRequest) GetConnectionDetails() *PerforceConnectionDetails {
	if x != nil {
		return x.ConnectionDetails
	}
	return nil
}

func (x *PerforceProtectsForUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// PerforceProtectsForUserResponse returns all the protections that apply to the
// given user.
type PerforceProtectsForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protects []*PerforceProtect `protobuf:"bytes,1,rep,name=protects,proto3" json:"protects,omitempty"`
}

func (x *PerforceProtectsForUserResponse) Reset() {
	*x = PerforceProtectsForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceProtectsForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceProtectsForUserResponse) ProtoMessage() {}

func (x *PerforceProtectsForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceProtectsForUserResponse.ProtoReflect.Descriptor instead.
func (*PerforceProtectsForUserResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{82}
}

func (x *PerforceProtectsForUserResponse) GetProtects() []*PerforceProtect {
	if x != nil {
		return x.Protects
	}
	return nil
}

// PerforceProtect is a single line definition of a protection in Perforce.
type PerforceProtect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level       string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	EntityType  string `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	EntityName  string `protobuf:"bytes,3,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	Match       string `protobuf:"bytes,4,opt,name=match,proto3" json:"match,omitempty"`
	IsExclusion bool   `protobuf:"varint,5,opt,name=is_exclusion,json=isExclusion,proto3" json:"is_exclusion,omitempty"`
	Host        string `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *PerforceProtect) Reset() {
	*x = PerforceProtect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceProtect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceProtect) ProtoMessage() {}

func (x *PerforceProtect) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceProtect.ProtoReflect.Descriptor instead.
func (*PerforceProtect) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{83}
}

func (x *PerforceProtect) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *PerforceProtect) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *PerforceProtect) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

func (x *PerforceProtect) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *PerforceProtect) GetIsExclusion() bool {
	if x != nil {
		return x.IsExclusion
	}
	return false
}

func (x *PerforceProtect) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// PerforceGroupMembersRequest requests the members of the given Perforce group.
type PerforceGroupMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionDetails *PerforceConnectionDetails `protobuf:"bytes,1,opt,name=connection_details,json=connectionDetails,proto3" json:"connection_details,omitempty"`
	Group             string                     `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *PerforceGroupMembersRequest) Reset() {
	*x = PerforceGroupMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceGroupMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceGroupMembersRequest) ProtoMessage() {}

func (x *PerforceGroupMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceGroupMembersRequest.ProtoReflect.Descriptor instead.
func (*PerforceGroupMembersRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{84}
}

func (x *PerforceGroupMembersRequest) GetConnectionDetails() *PerforceConnectionDetails {
	if x != nil {
		return x.ConnectionDetails
	}
	return nil
}

func (x *PerforceGroupMembersRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

// PerforceGroupMembersResponse returns the members of the requested Perforce
// group.
type PerforceGroupMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usernames []string `protobuf:"bytes,1,rep,name=usernames,proto3" json:"usernames,omitempty"`
}

func (x *PerforceGroupMembersResponse) Reset() {
	*x = PerforceGroupMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceGroupMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceGroupMembersResponse) ProtoMessage() {}

func (x *PerforceGroupMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceGroupMembersResponse.ProtoReflect.Descriptor instead.
func (*PerforceGroupMembersResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{85}
}

func (x *PerforceGroupMembersResponse) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

// PerforceUsersRequest lists all the users known to the Perforce server.
type PerforceUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionDetails *PerforceConnectionDetails `protobuf:"bytes,1,opt,name=connection_details,json=connectionDetails,proto3" json:"connection_details,omitempty"`
}

func (x *PerforceUsersRequest) Reset() {
	*x = PerforceUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceUsersRequest) ProtoMessage() {}

func (x *PerforceUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceUsersRequest.ProtoReflect.Descriptor instead.
func (*PerforceUsersRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{86}
}

func (x *PerforceUsersRequest) GetConnectionDetails() *PerforceConnectionDetails {
	if x != nil {
		return x.ConnectionDetails
	}
	return nil
}

// PerforceUsersResponse contains the list of users known by the server.
type PerforceUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*PerforceUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *PerforceUsersResponse) Reset() {
	*x = PerforceUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceUsersResponse) ProtoMessage() {}

func (x *PerforceUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceUsersResponse.ProtoReflect.Descriptor instead.
func (*PerforceUsersResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{87}
}

func (x *PerforceUsersResponse) GetUsers() []*PerforceUser {
	if x != nil {
		return x.Users
	}
	return nil
}

// PerforceUser is a representation of a user account in Perforce.
type PerforceUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *PerforceUser) Reset() {
	*x = PerforceUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerforceUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerforceUser) ProtoMessage() {}

func (x *PerforceUser) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerforceUser.ProtoReflect.Descriptor instead.
func (*PerforceUser) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{88}
}

func (x *PerforceUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PerforceUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// MergeBaseRequest is a request to find the merge base of two revspecs.
type MergeBaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to get the merge base for.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// base is a revspec, for now, we allow non-utf8 revspecs.
	Base []byte `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	// head is a revspec, for now, we allow non-utf8 revspecs.
	Head []byte `protobuf:"bytes,4,opt,name=head,proto3" json:"head,omitempty"`
}

func (x *MergeBaseRequest) Reset() {
	*x = MergeBaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeBaseRequest) ProtoMessage() {}

func (x *MergeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeBaseRequest.ProtoReflect.Descriptor instead.
func (*MergeBaseRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{89}
}

func (x *MergeBaseRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *MergeBaseRequest) GetBase() []byte {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MergeBaseRequest) GetHead() []byte {
	if x != nil {
		return x.Head
	}
	return nil
}

// MergeBaseResponse is the response from finding the merge base of two
// revspecs.
type MergeBaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeBaseCommitSha string `protobuf:"bytes,1,opt,name=merge_base_commit_sha,json=mergeBaseCommitSha,proto3" json:"merge_base_commit_sha,omitempty"`
}

func (x *MergeBaseResponse) Reset() {
	*x = MergeBaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeBaseResponse) ProtoMessage() {}

func (x *MergeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeBaseResponse.ProtoReflect.Descriptor instead.
func (*MergeBaseResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{90}
}

func (x *MergeBaseResponse) GetMergeBaseCommitSha() string {
	if x != nil {
		return x.MergeBaseCommitSha
	}
	return ""
}

// FirstEverCommitRequest is a request to get the first ever commit in a repo.
type FirstEverCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to get the first ever commit for.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *FirstEverCommitRequest) Reset() {
	*x = FirstEverCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstEverCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstEverCommitRequest) ProtoMessage() {}

func (x *FirstEverCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstEverCommitRequest.ProtoReflect.Descriptor instead.
func (*FirstEverCommitRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{91}
}

func (x *FirstEverCommitRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

// FirstEverCommitResponse is the response from getting the first ever commit in
// a repo.
type FirstEverCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *GitCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *FirstEverCommitResponse) Reset() {
	*x = FirstEverCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstEverCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstEverCommitResponse) ProtoMessage() {}

func (x *FirstEverCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstEverCommitResponse.ProtoReflect.Descriptor instead.
func (*FirstEverCommitResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{92}
}

func (x *FirstEverCommitResponse) GetCommit() *GitCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type BehindAheadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to get the behind/ahead information for.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// left is a revspec that we'll take the symmetric difference against.
	// for now, we allow non-utf8 revspecs.
	Left []byte `protobuf:"bytes,3,opt,name=left,proto3" json:"left,omitempty"`
	// right is a revspec that we'll take the symmetric difference against.
	// for now, we allow non-utf8 revspecs.
	Right []byte `protobuf:"bytes,4,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *BehindAheadRequest) Reset() {
	*x = BehindAheadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BehindAheadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BehindAheadRequest) ProtoMessage() {}

func (x *BehindAheadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BehindAheadRequest.ProtoReflect.Descriptor instead.
func (*BehindAheadRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{93}
}

func (x *BehindAheadRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *BehindAheadRequest) GetLeft() []byte {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *BehindAheadRequest) GetRight() []byte {
	if x != nil {
		return x.Right
	}
	return nil
}

type BehindAheadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// behind is the number of commits that are solely reachable in "left" but not "right".
	Behind uint32 `protobuf:"varint,1,opt,name=behind,proto3" json:"behind,omitempty"`
	// ahead is the number of commits that are solely reachable in "right" but not "left".
	Ahead uint32 `protobuf:"varint,2,opt,name=ahead,proto3" json:"ahead,omitempty"`
}

func (x *BehindAheadResponse) Reset() {
	*x = BehindAheadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BehindAheadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BehindAheadResponse) ProtoMessage() {}

func (x *BehindAheadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BehindAheadResponse.ProtoReflect.Descriptor instead.
func (*BehindAheadResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{94}
}

func (x *BehindAheadResponse) GetBehind() uint32 {
	if x != nil {
		return x.Behind
	}
	return 0
}

func (x *BehindAheadResponse) GetAhead() uint32 {
	if x != nil {
		return x.Ahead
	}
	return 0
}

type ChangedFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_name is the name of the repo to get the changed files for.
	// Note: We use field ID 2 here to reserve 1 for a future repo int32 field.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// base is a <tree-ish> id, for now, we allow non-utf8 revspecs.
	//
	// If base is empty, the parent of the head is used.
	Base []byte `protobuf:"bytes,3,opt,name=base,proto3,oneof" json:"base,omitempty"`
	// head is a <tree-ish> id, for now, we allow non-utf8 revspecs.
	Head []byte `protobuf:"bytes,4,opt,name=head,proto3" json:"head,omitempty"`
}

func (x *ChangedFilesRequest) Reset() {
	*x = ChangedFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangedFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangedFilesRequest) ProtoMessage() {}

func (x *ChangedFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangedFilesRequest.ProtoReflect.Descriptor instead.
func (*ChangedFilesRequest) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{95}
}

func (x *ChangedFilesRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *ChangedFilesRequest) GetBase() []byte {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ChangedFilesRequest) GetHead() []byte {
	if x != nil {
		return x.Head
	}
	return nil
}

type ChangedFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*ChangedFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ChangedFilesResponse) Reset() {
	*x = ChangedFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangedFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangedFilesResponse) ProtoMessage() {}

func (x *ChangedFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangedFilesResponse.ProtoReflect.Descriptor instead.
func (*ChangedFilesResponse) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{96}
}

func (x *ChangedFilesResponse) GetFiles() []*ChangedFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type ChangedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the file path of the file that the status is for.
	Path   []byte             `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Status ChangedFile_Status `protobuf:"varint,2,opt,name=status,proto3,enum=gitserver.v1.ChangedFile_Status" json:"status,omitempty"`
}

func (x *ChangedFile) Reset() {
	*x = ChangedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangedFile) ProtoMessage() {}

func (x *ChangedFile) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangedFile.ProtoReflect.Descriptor instead.
func (*ChangedFile) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{97}
}

func (x *ChangedFile) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ChangedFile) GetStatus() ChangedFile_Status {
	if x != nil {
		return x.Status
	}
	return ChangedFile_STATUS_UNSPECIFIED
}

type CreateCommitFromPatchBinaryRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repo to be updated
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// base_commit is the revision that the staging area object is based on
	BaseCommit string `protobuf:"bytes,2,opt,name=base_commit,json=baseCommit,proto3" json:"base_commit,omitempty"`
	// target_ref is the ref that will be created for this patch
	TargetRef string `protobuf:"bytes,3,opt,name=target_ref,json=targetRef,proto3" json:"target_ref,omitempty"`
	// unique_ref is a boolean that indicates whether a unique number will be
	// appended to the end (ie TargetRef-{#}). The generated ref will be
	// returned.
	UniqueRef bool `protobuf:"varint,4,opt,name=unique_ref,json=uniqueRef,proto3" json:"unique_ref,omitempty"`
	// commit_info is the information to be used for the commit
	CommitInfo *PatchCommitInfo `protobuf:"bytes,5,opt,name=commit_info,json=commitInfo,proto3" json:"commit_info,omitempty"`
	// push_config is the configuration to be used for pushing the commit
	Push *PushConfig `protobuf:"bytes,6,opt,name=push,proto3" json:"push,omitempty"`
	// git_apply_args are the arguments to be passed to git apply
	GitApplyArgs []string `protobuf:"bytes,7,rep,name=git_apply_args,json=gitApplyArgs,proto3" json:"git_apply_args,omitempty"`
	// push_ref is the optional override for the ref that is pushed to
	PushRef *string `protobuf:"bytes,8,opt,name=push_ref,json=pushRef,proto3,oneof" json:"push_ref,omitempty"`
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) Reset() {
	*x = CreateCommitFromPatchBinaryRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitFromPatchBinaryRequest_Metadata) ProtoMessage() {}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitFromPatchBinaryRequest_Metadata.ProtoReflect.Descriptor instead.
func (*CreateCommitFromPatchBinaryRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{34, 0}
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) GetBaseCommit() string {
	if x != nil {
		return x.BaseCommit
	}
	return ""
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) GetTargetRef() string {
	if x != nil {
		return x.TargetRef
	}
	return ""
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) GetUniqueRef() bool {
	if x != nil {
		return x.UniqueRef
	}
	return false
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) GetCommitInfo() *PatchCommitInfo {
	if x != nil {
		return x.CommitInfo
	}
	return nil
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) GetPush() *PushConfig {
	if x != nil {
		return x.Push
	}
	return nil
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) GetGitApplyArgs() []string {
	if x != nil {
		return x.GitApplyArgs
	}
	return nil
}

func (x *CreateCommitFromPatchBinaryRequest_Metadata) GetPushRef() string {
	if x != nil && x.PushRef != nil {
		return *x.PushRef
	}
	return ""
}

type CreateCommitFromPatchBinaryRequest_Patch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// data is the diff contents to be used to create the staging area revision
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCommitFromPatchBinaryRequest_Patch) Reset() {
	*x = CreateCommitFromPatchBinaryRequest_Patch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitFromPatchBinaryRequest_Patch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitFromPatchBinaryRequest_Patch) ProtoMessage() {}

func (x *CreateCommitFromPatchBinaryRequest_Patch) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitFromPatchBinaryRequest_Patch.ProtoReflect.Descriptor instead.
func (*CreateCommitFromPatchBinaryRequest_Patch) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{34, 1}
}

func (x *CreateCommitFromPatchBinaryRequest_Patch) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommitMatch_Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Date  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *CommitMatch_Signature) Reset() {
	*x = CommitMatch_Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch_Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch_Signature) ProtoMessage() {}

func (x *CommitMatch_Signature) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch_Signature.ProtoReflect.Descriptor instead.
func (*CommitMatch_Signature) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{56, 0}
}

func (x *CommitMatch_Signature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommitMatch_Signature) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CommitMatch_Signature) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type CommitMatch_MatchedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string               `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Ranges  []*CommitMatch_Range `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *CommitMatch_MatchedString) Reset() {
	*x = CommitMatch_MatchedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch_MatchedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch_MatchedString) ProtoMessage() {}

func (x *CommitMatch_MatchedString) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch_MatchedString.ProtoReflect.Descriptor instead.
func (*CommitMatch_MatchedString) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{56, 1}
}

func (x *CommitMatch_MatchedString) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommitMatch_MatchedString) GetRanges() []*CommitMatch_Range {
	if x != nil {
		return x.Ranges
	}
	return nil
}

// TODO move this into a shared package
type CommitMatch_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *CommitMatch_Location `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *CommitMatch_Location `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *CommitMatch_Range) Reset() {
	*x = CommitMatch_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch_Range) ProtoMessage() {}

func (x *CommitMatch_Range) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch_Range.ProtoReflect.Descriptor instead.
func (*CommitMatch_Range) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{56, 2}
}

func (x *CommitMatch_Range) GetStart() *CommitMatch_Location {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CommitMatch_Range) GetEnd() *CommitMatch_Location {
	if x != nil {
		return x.End
	}
	return nil
}

type CommitMatch_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Line   uint32 `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Column uint32 `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *CommitMatch_Location) Reset() {
	*x = CommitMatch_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitserver_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMatch_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMatch_Location) ProtoMessage() {}

func (x *CommitMatch_Location) ProtoReflect() protoreflect.Message {
	mi := &file_gitserver_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMatch_Location.ProtoReflect.Descriptor instead.
func (*CommitMatch_Location) Descriptor() ([]byte, []int) {
	return file_gitserver_proto_rawDescGZIP(), []int{56, 3}
}

func (x *CommitMatch_Location) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CommitMatch_Location) GetLine() uint32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *CommitMatch_Location) GetColumn() uint32 {
	if x != nil {
		return x.Column
	}
	return 0
}

var File_gitserver_proto protoreflect.FileDescriptor

var file_gitserver_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x36, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x17,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xd8,
	0x02, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x76, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x76, 0x53, 0x70, 0x65, 0x63, 0x12, 0x54, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x77, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x22, 0x75, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49,
	0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x49, 0x4e,
	0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x27, 0x0a, 0x0f, 0x52, 0x61, 0x77,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x61, 0x67, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x41, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x73,
	0x68, 0x61, 0x22, 0x3c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73,
	0x22, 0xe0, 0x02, 0x0a, 0x06, 0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x66, 0x4f, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x2e, 0x52, 0x65,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x22, 0x4a, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41,
	0x47, 0x10, 0x02, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x65, 0x76, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0e, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x68, 0x61, 0x22, 0x7a, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x76, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x32,
	0x0a, 0x11, 0x52, 0x65, 0x76, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53,
	0x68, 0x61, 0x22, 0x7d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0x6b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xbf,
	0x01, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x68, 0x0a, 0x0c, 0x47, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0c, 0x42,
	0x6c, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x3c, 0x0a, 0x0d, 0x42, 0x6c,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x48, 0x75,
	0x6e, 0x6b, 0x52, 0x04, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xe0, 0x02, 0x0a, 0x09, 0x42, 0x6c, 0x61,
	0x6d, 0x65, 0x48, 0x75, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x67, 0x0a, 0x0b, 0x42,
	0x6c, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x22, 0x4a, 0x0a, 0x15,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x5a, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x11, 0x0a, 0x0f,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x75, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x64, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x6c, 0x0a, 0x0a, 0x50, 0x75,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0xb6, 0x04, 0x0a, 0x22, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xbe, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x08,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x75, 0x73, 0x68, 0x52, 0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x1a, 0x1b, 0x0a, 0x05, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xaf, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x69, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x76, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9b,
	0x01, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0e, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6e, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x22, 0x0a, 0x0c,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x7c, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x41,
	0x0a, 0x17, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0x55, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x4c, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0x80, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x3d, 0x0a, 0x09,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x3a, 0x0a, 0x11, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x53, 0x70, 0x65, 0x63, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x48, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x22,
	0x4b, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x4b, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x49, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x14, 0x44, 0x69,
	0x66, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a, 0x0c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x73, 0x22, 0x92, 0x05, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x48, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x66,
	0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x09, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa9, 0x06, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x69, 0x66,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x65, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x1a, 0x62, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x77, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x1a, 0x4e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65,
	0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x65, 0x65, 0x69,
	0x73, 0x68, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x25, 0x0a,
	0x0f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x16, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x22, 0x67, 0x0a, 0x17, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x18, 0x52,
	0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x22, 0x3a, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x6f, 0x6c, 0x69,
	0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x0c, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x48, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x44, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0a,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x04,
	0x22, 0x97, 0x01, 0x0a, 0x1e, 0x49, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x21, 0x0a, 0x1f, 0x49, 0x73,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a,
	0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x19,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x34, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x34, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x34, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x34, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x34, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x34, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x1c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1d, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x56,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x04, 0x22, 0x74, 0x0a, 0x1a, 0x49, 0x73,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x1d, 0x0a, 0x1b, 0x49, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x1f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x70, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x70, 0x6f,
	0x74, 0x22, 0x5d, 0x0a, 0x20, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x73,
	0x22, 0x94, 0x01, 0x0a, 0x1e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x1f, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x8b,
	0x01, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3c, 0x0a, 0x1c,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x14, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x49, 0x0a, 0x15, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x40, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x57, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x22, 0x46, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x22, 0x35, 0x0a, 0x16, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x4a, 0x0a, 0x17, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x5b, 0x0a, 0x12, 0x42,
	0x65, 0x68, 0x69, 0x6e, 0x64, 0x41, 0x68, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x43, 0x0a, 0x13, 0x42, 0x65, 0x68, 0x69,
	0x6e, 0x64, 0x41, 0x68, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x68, 0x65, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x68, 0x65, 0x61, 0x64, 0x22, 0x68, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x71, 0x0a, 0x0c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x03, 0x2a, 0x5f,
	0x0a, 0x0d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x5a, 0x49, 0x50, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x10, 0x02, 0x32,
	0xe6, 0x01, 0x0a, 0x1a, 0x47, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67,
	0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x32, 0xfd, 0x16, 0x0a, 0x10, 0x47, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x30, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x4e, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x41, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x19,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x63, 0x0a, 0x0f,
	0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x24, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x5a, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6f, 0x6c, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x4a, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x07, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x7b, 0x0a, 0x17, 0x49, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67,
	0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x12, 0x7e, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x67,
	0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x12, 0x5d, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12,
	0x7b, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7e, 0x0a, 0x18,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x12, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x72, 0x0a, 0x14,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x12, 0x6f, 0x0a, 0x13, 0x49, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x75, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x51, 0x0a, 0x09, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x47, 0x0a, 0x05, 0x42,
	0x6c, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90,
	0x02, 0x01, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x50, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x63, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x50, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x12,
	0x51, 0x0a, 0x09, 0x52, 0x65, 0x76, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x67,
	0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x41,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67,
	0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x41,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90,
	0x02, 0x01, 0x12, 0x4d, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1c, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x69,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30,
	0x01, 0x12, 0x69, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x63, 0x0a, 0x0f,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x24, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x45, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x57, 0x0a, 0x0b, 0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x41, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x41, 0x68, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x41, 0x68, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x69, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x30, 0x01, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x69, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitserver_proto_rawDescOnce sync.Once
	file_gitserver_proto_rawDescData = file_gitserver_proto_rawDesc
)

func file_gitserver_proto_rawDescGZIP() []byte {
	file_gitserver_proto_rawDescOnce.Do(func() {
		file_gitserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitserver_proto_rawDescData)
	})
	return file_gitserver_proto_rawDescData
}

var file_gitserver_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_gitserver_proto_msgTypes = make([]protoimpl.MessageInfo, 104)
var file_gitserver_proto_goTypes = []interface{}{
	(OperatorKind)(0),                                   // 0: gitserver.v1.OperatorKind
	(ArchiveFormat)(0),                                  // 1: gitserver.v1.ArchiveFormat
	(RawDiffRequest_ComparisonType)(0),                  // 2: gitserver.v1.RawDiffRequest.ComparisonType
	(GitRef_RefType)(0),                                 // 3: gitserver.v1.GitRef.RefType
	(GitObject_ObjectType)(0),                           // 4: gitserver.v1.GitObject.ObjectType
	(PerforceChangelist_PerforceChangelistState)(0),     // 5: gitserver.v1.PerforceChangelist.PerforceChangelistState
	(ChangedFile_Status)(0),                             // 6: gitserver.v1.ChangedFile.Status
	(*DeleteRepositoryRequest)(nil),                     // 7: gitserver.v1.DeleteRepositoryRequest
	(*DeleteRepositoryResponse)(nil),                    // 8: gitserver.v1.DeleteRepositoryResponse
	(*FetchRepositoryRequest)(nil),                      // 9: gitserver.v1.FetchRepositoryRequest
	(*FetchRepositoryResponse)(nil),                     // 10: gitserver.v1.FetchRepositoryResponse
	(*ContributorCountsRequest)(nil),                    // 11: gitserver.v1.ContributorCountsRequest
	(*ContributorCount)(nil),                            // 12: gitserver.v1.ContributorCount
	(*ContributorCountsResponse)(nil),                   // 13: gitserver.v1.ContributorCountsResponse
	(*RawDiffRequest)(nil),                              // 14: gitserver.v1.RawDiffRequest
	(*RawDiffResponse)(nil),                             // 15: gitserver.v1.RawDiffResponse
	(*ListRefsRequest)(nil),                             // 16: gitserver.v1.ListRefsRequest
	(*ListRefsResponse)(nil),                            // 17: gitserver.v1.ListRefsResponse
	(*GitRef)(nil),                                      // 18: gitserver.v1.GitRef
	(*ResolveRevisionRequest)(nil),                      // 19: gitserver.v1.ResolveRevisionRequest
	(*ResolveRevisionResponse)(nil),                     // 20: gitserver.v1.ResolveRevisionResponse
	(*RevAtTimeRequest)(nil),                            // 21: gitserver.v1.RevAtTimeRequest
	(*RevAtTimeResponse)(nil),                           // 22: gitserver.v1.RevAtTimeResponse
	(*GetCommitRequest)(nil),                            // 23: gitserver.v1.GetCommitRequest
	(*GetCommitResponse)(nil),                           // 24: gitserver.v1.GetCommitResponse
	(*GitCommit)(nil),                                   // 25: gitserver.v1.GitCommit
	(*GitSignature)(nil),                                // 26: gitserver.v1.GitSignature
	(*BlameRequest)(nil),                                // 27: gitserver.v1.BlameRequest
	(*BlameRange)(nil),                                  // 28: gitserver.v1.BlameRange
	(*BlameResponse)(nil),                               // 29: gitserver.v1.BlameResponse
	(*BlameHunk)(nil),                                   // 30: gitserver.v1.BlameHunk
	(*BlameAuthor)(nil),                                 // 31: gitserver.v1.BlameAuthor
	(*PreviousCommit)(nil),                              // 32: gitserver.v1.PreviousCommit
	(*DefaultBranchRequest)(nil),                        // 33: gitserver.v1.DefaultBranchRequest
	(*DefaultBranchResponse)(nil),                       // 34: gitserver.v1.DefaultBranchResponse
	(*ReadFileRequest)(nil),                             // 35: gitserver.v1.ReadFileRequest
	(*ReadFileResponse)(nil),                            // 36: gitserver.v1.ReadFileResponse
	(*DiskInfoRequest)(nil),                             // 37: gitserver.v1.DiskInfoRequest
	(*DiskInfoResponse)(nil),                            // 38: gitserver.v1.DiskInfoResponse
	(*PatchCommitInfo)(nil),                             // 39: gitserver.v1.PatchCommitInfo
	(*PushConfig)(nil),                                  // 40: gitserver.v1.PushConfig
	(*CreateCommitFromPatchBinaryRequest)(nil),          // 41: gitserver.v1.CreateCommitFromPatchBinaryRequest
	(*CreateCommitFromPatchError)(nil),                  // 42: gitserver.v1.CreateCommitFromPatchError
	(*CreateCommitFromPatchBinaryResponse)(nil),         // 43: gitserver.v1.CreateCommitFromPatchBinaryResponse
	(*ExecRequest)(nil),                                 // 44: gitserver.v1.ExecRequest
	(*ExecResponse)(nil),                                // 45: gitserver.v1.ExecResponse
	(*RepoNotFoundPayload)(nil),                         // 46: gitserver.v1.RepoNotFoundPayload
	(*RevisionNotFoundPayload)(nil),                     // 47: gitserver.v1.RevisionNotFoundPayload
	(*FileNotFoundPayload)(nil),                         // 48: gitserver.v1.FileNotFoundPayload
	(*ExecStatusPayload)(nil),                           // 49: gitserver.v1.ExecStatusPayload
	(*SearchRequest)(nil),                               // 50: gitserver.v1.SearchRequest
	(*RevisionSpecifier)(nil),                           // 51: gitserver.v1.RevisionSpecifier
	(*AuthorMatchesNode)(nil),                           // 52: gitserver.v1.AuthorMatchesNode
	(*CommitterMatchesNode)(nil),                        // 53: gitserver.v1.CommitterMatchesNode
	(*CommitBeforeNode)(nil),                            // 54: gitserver.v1.CommitBeforeNode
	(*CommitAfterNode)(nil),                             // 55: gitserver.v1.CommitAfterNode
	(*MessageMatchesNode)(nil),                          // 56: gitserver.v1.MessageMatchesNode
	(*DiffMatchesNode)(nil),                             // 57: gitserver.v1.DiffMatchesNode
	(*DiffModifiesFileNode)(nil),                        // 58: gitserver.v1.DiffModifiesFileNode
	(*BooleanNode)(nil),                                 // 59: gitserver.v1.BooleanNode
	(*OperatorNode)(nil),                                // 60: gitserver.v1.OperatorNode
	(*QueryNode)(nil),                                   // 61: gitserver.v1.QueryNode
	(*SearchResponse)(nil),                              // 62: gitserver.v1.SearchResponse
	(*CommitMatch)(nil),                                 // 63: gitserver.v1.CommitMatch
	(*ArchiveRequest)(nil),                              // 64: gitserver.v1.ArchiveRequest
	(*ArchiveResponse)(nil),                             // 65: gitserver.v1.ArchiveResponse
	(*IsRepoCloneableRequest)(nil),                      // 66: gitserver.v1.IsRepoCloneableRequest
	(*IsRepoCloneableResponse)(nil),                     // 67: gitserver.v1.IsRepoCloneableResponse
	(*RepoCloneProgressRequest)(nil),                    // 68: gitserver.v1.RepoCloneProgressRequest
	(*RepoCloneProgressResponse)(nil),                   // 69: gitserver.v1.RepoCloneProgressResponse
	(*ListGitoliteRequest)(nil),                         // 70: gitserver.v1.ListGitoliteRequest
	(*GitoliteRepo)(nil),                                // 71: gitserver.v1.GitoliteRepo
	(*ListGitoliteResponse)(nil),                        // 72: gitserver.v1.ListGitoliteResponse
	(*GetObjectRequest)(nil),                            // 73: gitserver.v1.GetObjectRequest
	(*GetObjectResponse)(nil),                           // 74: gitserver.v1.GetObjectResponse
	(*GitObject)(nil),                                   // 75: gitserver.v1.GitObject
	(*IsPerforcePathCloneableRequest)(nil),              // 76: gitserver.v1.IsPerforcePathCloneableRequest
	(*IsPerforcePathCloneableResponse)(nil),             // 77: gitserver.v1.IsPerforcePathCloneableResponse
	(*CheckPerforceCredentialsRequest)(nil),             // 78: gitserver.v1.CheckPerforceCredentialsRequest
	(*CheckPerforceCredentialsResponse)(nil),            // 79: gitserver.v1.CheckPerforceCredentialsResponse
	(*PerforceConnectionDetails)(nil),                   // 80: gitserver.v1.PerforceConnectionDetails
	(*PerforceGetChangelistRequest)(nil),                // 81: gitserver.v1.PerforceGetChangelistRequest
	(*PerforceGetChangelistResponse)(nil),               // 82: gitserver.v1.PerforceGetChangelistResponse
	(*PerforceChangelist)(nil),                          // 83: gitserver.v1.PerforceChangelist
	(*IsPerforceSuperUserRequest)(nil),                  // 84: gitserver.v1.IsPerforceSuperUserRequest
	(*IsPerforceSuperUserResponse)(nil),                 // 85: gitserver.v1.IsPerforceSuperUserResponse
	(*PerforceProtectsForDepotRequest)(nil),             // 86: gitserver.v1.PerforceProtectsForDepotRequest
	(*PerforceProtectsForDepotResponse)(nil),            // 87: gitserver.v1.PerforceProtectsForDepotResponse
	(*PerforceProtectsForUserRequest)(nil),              // 88: gitserver.v1.PerforceProtectsForUserRequest
	(*PerforceProtectsForUserResponse)(nil),             // 89: gitserver.v1.PerforceProtectsForUserResponse
	(*PerforceProtect)(nil),                             // 90: gitserver.v1.PerforceProtect
	(*PerforceGroupMembersRequest)(nil),                 // 91: gitserver.v1.PerforceGroupMembersRequest
	(*PerforceGroupMembersResponse)(nil),                // 92: gitserver.v1.PerforceGroupMembersResponse
	(*PerforceUsersRequest)(nil),                        // 93: gitserver.v1.PerforceUsersRequest
	(*PerforceUsersResponse)(nil),                       // 94: gitserver.v1.PerforceUsersResponse
	(*PerforceUser)(nil),                                // 95: gitserver.v1.PerforceUser
	(*MergeBaseRequest)(nil),                            // 96: gitserver.v1.MergeBaseRequest
	(*MergeBaseResponse)(nil),                           // 97: gitserver.v1.MergeBaseResponse
	(*FirstEverCommitRequest)(nil),                      // 98: gitserver.v1.FirstEverCommitRequest
	(*FirstEverCommitResponse)(nil),                     // 99: gitserver.v1.FirstEverCommitResponse
	(*BehindAheadRequest)(nil),                          // 100: gitserver.v1.BehindAheadRequest
	(*BehindAheadResponse)(nil),                         // 101: gitserver.v1.BehindAheadResponse
	(*ChangedFilesRequest)(nil),                         // 102: gitserver.v1.ChangedFilesRequest
	(*ChangedFilesResponse)(nil),                        // 103: gitserver.v1.ChangedFilesResponse
	(*ChangedFile)(nil),                                 // 104: gitserver.v1.ChangedFile
	(*CreateCommitFromPatchBinaryRequest_Metadata)(nil), // 105: gitserver.v1.CreateCommitFromPatchBinaryRequest.Metadata
	(*CreateCommitFromPatchBinaryRequest_Patch)(nil),    // 106: gitserver.v1.CreateCommitFromPatchBinaryRequest.Patch
	(*CommitMatch_Signature)(nil),                       // 107: gitserver.v1.CommitMatch.Signature
	(*CommitMatch_MatchedString)(nil),                   // 108: gitserver.v1.CommitMatch.MatchedString
	(*CommitMatch_Range)(nil),                           // 109: gitserver.v1.CommitMatch.Range
	(*CommitMatch_Location)(nil),                        // 110: gitserver.v1.CommitMatch.Location
	(*timestamppb.Timestamp)(nil),                       // 111: google.protobuf.Timestamp
}
var file_gitserver_proto_depIdxs = []int32{
	111, // 0: gitserver.v1.FetchRepositoryResponse.last_fetched:type_name -> google.protobuf.Timestamp
	111, // 1: gitserver.v1.FetchRepositoryResponse.last_changed:type_name -> google.protobuf.Timestamp
	111, // 2: gitserver.v1.ContributorCountsRequest.after:type_name -> google.protobuf.Timestamp
	26,  // 3: gitserver.v1.ContributorCount.author:type_name -> gitserver.v1.GitSignature
	12,  // 4: gitserver.v1.ContributorCountsResponse.counts:type_name -> gitserver.v1.ContributorCount
	2,   // 5: gitserver.v1.RawDiffRequest.comparison_type:type_name -> gitserver.v1.RawDiffRequest.ComparisonType
	18,  // 6: gitserver.v1.ListRefsResponse.refs:type_name -> gitserver.v1.GitRef
	111, // 7: gitserver.v1.GitRef.created_at:type_name -> google.protobuf.Timestamp
	3,   // 8: gitserver.v1.GitRef.ref_type:type_name -> gitserver.v1.GitRef.RefType
	111, // 9: gitserver.v1.RevAtTimeRequest.time:type_name -> google.protobuf.Timestamp
	25,  // 10: gitserver.v1.GetCommitResponse.commit:type_name -> gitserver.v1.GitCommit
	26,  // 11: gitserver.v1.GitCommit.author:type_name -> gitserver.v1.GitSignature
	26,  // 12: gitserver.v1.GitCommit.committer:type_name -> gitserver.v1.GitSignature
	111, // 13: gitserver.v1.GitSignature.date:type_name -> google.protobuf.Timestamp
	28,  // 14: gitserver.v1.BlameRequest.range:type_name -> gitserver.v1.BlameRange
	30,  // 15: gitserver.v1.BlameResponse.hunk:type_name -> gitserver.v1.BlameHunk
	31,  // 16: gitserver.v1.BlameHunk.author:type_name -> gitserver.v1.BlameAuthor
	32,  // 17: gitserver.v1.BlameHunk.previous_commit:type_name -> gitserver.v1.PreviousCommit
	111, // 18: gitserver.v1.BlameAuthor.date:type_name -> google.protobuf.Timestamp
	111, // 19: gitserver.v1.PatchCommitInfo.date:type_name -> google.protobuf.Timestamp
	105, // 20: gitserver.v1.CreateCommitFromPatchBinaryRequest.metadata:type_name -> gitserver.v1.CreateCommitFromPatchBinaryRequest.Metadata
	106, // 21: gitserver.v1.CreateCommitFromPatchBinaryRequest.patch:type_name -> gitserver.v1.CreateCommitFromPatchBinaryRequest.Patch
	51,  // 22: gitserver.v1.SearchRequest.revisions:type_name -> gitserver.v1.RevisionSpecifier
	61,  // 23: gitserver.v1.SearchRequest.query:type_name -> gitserver.v1.QueryNode
	111, // 24: gitserver.v1.CommitBeforeNode.timestamp:type_name -> google.protobuf.Timestamp
	111, // 25: gitserver.v1.CommitAfterNode.timestamp:type_name -> google.protobuf.Timestamp
	0,   // 26: gitserver.v1.OperatorNode.kind:type_name -> gitserver.v1.OperatorKind
	61,  // 27: gitserver.v1.OperatorNode.operands:type_name -> gitserver.v1.QueryNode
	52,  // 28: gitserver.v1.QueryNode.author_matches:type_name -> gitserver.v1.AuthorMatchesNode
	53,  // 29: gitserver.v1.QueryNode.committer_matches:type_name -> gitserver.v1.CommitterMatchesNode
	54,  // 30: gitserver.v1.QueryNode.commit_before:type_name -> gitserver.v1.CommitBeforeNode
	55,  // 31: gitserver.v1.QueryNode.commit_after:type_name -> gitserver.v1.CommitAfterNode
	56,  // 32: gitserver.v1.QueryNode.message_matches:type_name -> gitserver.v1.MessageMatchesNode
	57,  // 33: gitserver.v1.QueryNode.diff_matches:type_name -> gitserver.v1.DiffMatchesNode
	58,  // 34: gitserver.v1.QueryNode.diff_modifies_file:type_name -> gitserver.v1.DiffModifiesFileNode
	59,  // 35: gitserver.v1.QueryNode.boolean:type_name -> gitserver.v1.BooleanNode
	60,  // 36: gitserver.v1.QueryNode.operator:type_name -> gitserver.v1.OperatorNode
	63,  // 37: gitserver.v1.SearchResponse.match:type_name -> gitserver.v1.CommitMatch
	107, // 38: gitserver.v1.CommitMatch.author:type_name -> gitserver.v1.CommitMatch.Signature
	107, // 39: gitserver.v1.CommitMatch.committer:type_name -> gitserver.v1.CommitMatch.Signature
	108, // 40: gitserver.v1.CommitMatch.message:type_name -> gitserver.v1.CommitMatch.MatchedString
	108, // 41: gitserver.v1.CommitMatch.diff:type_name -> gitserver.v1.CommitMatch.MatchedString
	1,   // 42: gitserver.v1.ArchiveRequest.format:type_name -> gitserver.v1.ArchiveFormat
	71,  // 43: gitserver.v1.ListGitoliteResponse.repos:type_name -> gitserver.v1.GitoliteRepo
	75,  // 44: gitserver.v1.GetObjectResponse.object:type_name -> gitserver.v1.GitObject
	4,   // 45: gitserver.v1.GitObject.type:type_name -> gitserver.v1.GitObject.ObjectType
	80,  // 46: gitserver.v1.IsPerforcePathCloneableRequest.connection_details:type_name -> gitserver.v1.PerforceConnectionDetails
	80,  // 47: gitserver.v1.CheckPerforceCredentialsRequest.connection_details:type_name -> gitserver.v1.PerforceConnectionDetails
	80,  // 48: gitserver.v1.PerforceGetChangelistRequest.connection_details:type_name -> gitserver.v1.PerforceConnectionDetails
	83,  // 49: gitserver.v1.PerforceGetChangelistResponse.changelist:type_name -> gitserver.v1.PerforceChangelist
	111, // 50: gitserver.v1.PerforceChangelist.creation_date:type_name -> google.protobuf.Timestamp
	5,   // 51: gitserver.v1.PerforceChangelist.state:type_name -> gitserver.v1.PerforceChangelist.PerforceChangelistState
	80,  // 52: gitserver.v1.IsPerforceSuperUserRequest.connection_details:type_name -> gitserver.v1.PerforceConnectionDetails
	80,  // 53: gitserver.v1.PerforceProtectsForDepotRequest.connection_details:type_name -> gitserver.v1.PerforceConnectionDetails
	90,  // 54: gitserver.v1.PerforceProtectsForDepotResponse.protects:type_name -> gitserver.v1.PerforceProtect
	80,  // 55: gitserver.v1.PerforceProtectsForUserRequest.connection_details:type_name -> gitserver.v1.PerforceConnectionDetails
	90,  // 56: gitserver.v1.PerforceProtectsForUserResponse.protects:type_name -> gitserver.v1.PerforceProtect
	80,  // 57: gitserver.v1.PerforceGroupMembersRequest.connection_details:type_name -> gitserver.v1.PerforceConnectionDetails
	80,  // 58: gitserver.v1.PerforceUsersRequest.connection_details:type_name -> gitserver.v1.PerforceConnectionDetails
	95,  // 59: gitserver.v1.PerforceUsersResponse.users:type_name -> gitserver.v1.PerforceUser
	25,  // 60: gitserver.v1.FirstEverCommitResponse.commit:type_name -> gitserver.v1.GitCommit
	104, // 61: gitserver.v1.ChangedFilesResponse.files:type_name -> gitserver.v1.ChangedFile
	6,   // 62: gitserver.v1.ChangedFile.status:type_name -> gitserver.v1.ChangedFile.Status
	39,  // 63: gitserver.v1.CreateCommitFromPatchBinaryRequest.Metadata.commit_info:type_name -> gitserver.v1.PatchCommitInfo
	40,  // 64: gitserver.v1.CreateCommitFromPatchBinaryRequest.Metadata.push:type_name -> gitserver.v1.PushConfig
	111, // 65: gitserver.v1.CommitMatch.Signature.date:type_name -> google.protobuf.Timestamp
	109, // 66: gitserver.v1.CommitMatch.MatchedString.ranges:type_name -> gitserver.v1.CommitMatch.Range
	110, // 67: gitserver.v1.CommitMatch.Range.start:type_name -> gitserver.v1.CommitMatch.Location
	110, // 68: gitserver.v1.CommitMatch.Range.end:type_name -> gitserver.v1.CommitMatch.Location
	7,   // 69: gitserver.v1.GitserverRepositoryService.DeleteRepository:input_type -> gitserver.v1.DeleteRepositoryRequest
	9,   // 70: gitserver.v1.GitserverRepositoryService.FetchRepository:input_type -> gitserver.v1.FetchRepositoryRequest
	41,  // 71: gitserver.v1.GitserverService.CreateCommitFromPatchBinary:input_type -> gitserver.v1.CreateCommitFromPatchBinaryRequest
	37,  // 72: gitserver.v1.GitserverService.DiskInfo:input_type -> gitserver.v1.DiskInfoRequest
	44,  // 73: gitserver.v1.GitserverService.Exec:input_type -> gitserver.v1.ExecRequest
	73,  // 74: gitserver.v1.GitserverService.GetObject:input_type -> gitserver.v1.GetObjectRequest
	66,  // 75: gitserver.v1.GitserverService.IsRepoCloneable:input_type -> gitserver.v1.IsRepoCloneableRequest
	70,  // 76: gitserver.v1.GitserverService.ListGitolite:input_type -> gitserver.v1.ListGitoliteRequest
	50,  // 77: gitserver.v1.GitserverService.Search:input_type -> gitserver.v1.SearchRequest
	64,  // 78: gitserver.v1.GitserverService.Archive:input_type -> gitserver.v1.ArchiveRequest
	68,  // 79: gitserver.v1.GitserverService.RepoCloneProgress:input_type -> gitserver.v1.RepoCloneProgressRequest
	76,  // 80: gitserver.v1.GitserverService.IsPerforcePathCloneable:input_type -> gitserver.v1.IsPerforcePathCloneableRequest
	78,  // 81: gitserver.v1.GitserverService.CheckPerforceCredentials:input_type -> gitserver.v1.CheckPerforceCredentialsRequest
	93,  // 82: gitserver.v1.GitserverService.PerforceUsers:input_type -> gitserver.v1.PerforceUsersRequest
	88,  // 83: gitserver.v1.GitserverService.PerforceProtectsForUser:input_type -> gitserver.v1.PerforceProtectsForUserRequest
	86,  // 84: gitserver.v1.GitserverService.PerforceProtectsForDepot:input_type -> gitserver.v1.PerforceProtectsForDepotRequest
	91,  // 85: gitserver.v1.GitserverService.PerforceGroupMembers:input_type -> gitserver.v1.PerforceGroupMembersRequest
	84,  // 86: gitserver.v1.GitserverService.IsPerforceSuperUser:input_type -> gitserver.v1.IsPerforceSuperUserRequest
	81,  // 87: gitserver.v1.GitserverService.PerforceGetChangelist:input_type -> gitserver.v1.PerforceGetChangelistRequest
	96,  // 88: gitserver.v1.GitserverService.MergeBase:input_type -> gitserver.v1.MergeBaseRequest
	27,  // 89: gitserver.v1.GitserverService.Blame:input_type -> gitserver.v1.BlameRequest
	33,  // 90: gitserver.v1.GitserverService.DefaultBranch:input_type -> gitserver.v1.DefaultBranchRequest
	35,  // 91: gitserver.v1.GitserverService.ReadFile:input_type -> gitserver.v1.ReadFileRequest
	23,  // 92: gitserver.v1.GitserverService.GetCommit:input_type -> gitserver.v1.GetCommitRequest
	19,  // 93: gitserver.v1.GitserverService.ResolveRevision:input_type -> gitserver.v1.ResolveRevisionRequest
	16,  // 94: gitserver.v1.GitserverService.ListRefs:input_type -> gitserver.v1.ListRefsRequest
	21,  // 95: gitserver.v1.GitserverService.RevAtTime:input_type -> gitserver.v1.RevAtTimeRequest
	14,  // 96: gitserver.v1.GitserverService.RawDiff:input_type -> gitserver.v1.RawDiffRequest
	11,  // 97: gitserver.v1.GitserverService.ContributorCounts:input_type -> gitserver.v1.ContributorCountsRequest
	98,  // 98: gitserver.v1.GitserverService.FirstEverCommit:input_type -> gitserver.v1.FirstEverCommitRequest
	100, // 99: gitserver.v1.GitserverService.BehindAhead:input_type -> gitserver.v1.BehindAheadRequest
	102, // 100: gitserver.v1.GitserverService.ChangedFiles:input_type -> gitserver.v1.ChangedFilesRequest
	8,   // 101: gitserver.v1.GitserverRepositoryService.DeleteRepository:output_type -> gitserver.v1.DeleteRepositoryResponse
	10,  // 102: gitserver.v1.GitserverRepositoryService.FetchRepository:output_type -> gitserver.v1.FetchRepositoryResponse
	43,  // 103: gitserver.v1.GitserverService.CreateCommitFromPatchBinary:output_type -> gitserver.v1.CreateCommitFromPatchBinaryResponse
	38,  // 104: gitserver.v1.GitserverService.DiskInfo:output_type -> gitserver.v1.DiskInfoResponse
	45,  // 105: gitserver.v1.GitserverService.Exec:output_type -> gitserver.v1.ExecResponse
	74,  // 106: gitserver.v1.GitserverService.GetObject:output_type -> gitserver.v1.GetObjectResponse
	67,  // 107: gitserver.v1.GitserverService.IsRepoCloneable:output_type -> gitserver.v1.IsRepoCloneableResponse
	72,  // 108: gitserver.v1.GitserverService.ListGitolite:output_type -> gitserver.v1.ListGitoliteResponse
	62,  // 109: gitserver.v1.GitserverService.Search:output_type -> gitserver.v1.SearchResponse
	65,  // 110: gitserver.v1.GitserverService.Archive:output_type -> gitserver.v1.ArchiveResponse
	69,  // 111: gitserver.v1.GitserverService.RepoCloneProgress:output_type -> gitserver.v1.RepoCloneProgressResponse
	77,  // 112: gitserver.v1.GitserverService.IsPerforcePathCloneable:output_type -> gitserver.v1.IsPerforcePathCloneableResponse
	79,  // 113: gitserver.v1.GitserverService.CheckPerforceCredentials:output_type -> gitserver.v1.CheckPerforceCredentialsResponse
	94,  // 114: gitserver.v1.GitserverService.PerforceUsers:output_type -> gitserver.v1.PerforceUsersResponse
	89,  // 115: gitserver.v1.GitserverService.PerforceProtectsForUser:output_type -> gitserver.v1.PerforceProtectsForUserResponse
	87,  // 116: gitserver.v1.GitserverService.PerforceProtectsForDepot:output_type -> gitserver.v1.PerforceProtectsForDepotResponse
	92,  // 117: gitserver.v1.GitserverService.PerforceGroupMembers:output_type -> gitserver.v1.PerforceGroupMembersResponse
	85,  // 118: gitserver.v1.GitserverService.IsPerforceSuperUser:output_type -> gitserver.v1.IsPerforceSuperUserResponse
	82,  // 119: gitserver.v1.GitserverService.PerforceGetChangelist:output_type -> gitserver.v1.PerforceGetChangelistResponse
	97,  // 120: gitserver.v1.GitserverService.MergeBase:output_type -> gitserver.v1.MergeBaseResponse
	29,  // 121: gitserver.v1.GitserverService.Blame:output_type -> gitserver.v1.BlameResponse
	34,  // 122: gitserver.v1.GitserverService.DefaultBranch:output_type -> gitserver.v1.DefaultBranchResponse
	36,  // 123: gitserver.v1.GitserverService.ReadFile:output_type -> gitserver.v1.ReadFileResponse
	24,  // 124: gitserver.v1.GitserverService.GetCommit:output_type -> gitserver.v1.GetCommitResponse
	20,  // 125: gitserver.v1.GitserverService.ResolveRevision:output_type -> gitserver.v1.ResolveRevisionResponse
	17,  // 126: gitserver.v1.GitserverService.ListRefs:output_type -> gitserver.v1.ListRefsResponse
	22,  // 127: gitserver.v1.GitserverService.RevAtTime:output_type -> gitserver.v1.RevAtTimeResponse
	15,  // 128: gitserver.v1.GitserverService.RawDiff:output_type -> gitserver.v1.RawDiffResponse
	13,  // 129: gitserver.v1.GitserverService.ContributorCounts:output_type -> gitserver.v1.ContributorCountsResponse
	99,  // 130: gitserver.v1.GitserverService.FirstEverCommit:output_type -> gitserver.v1.FirstEverCommitResponse
	101, // 131: gitserver.v1.GitserverService.BehindAhead:output_type -> gitserver.v1.BehindAheadResponse
	103, // 132: gitserver.v1.GitserverService.ChangedFiles:output_type -> gitserver.v1.ChangedFilesResponse
	101, // [101:133] is the sub-list for method output_type
	69,  // [69:101] is the sub-list for method input_type
	69,  // [69:69] is the sub-list for extension type_name
	69,  // [69:69] is the sub-list for extension extendee
	0,   // [0:69] is the sub-list for field type_name
}

func init() { file_gitserver_proto_init() }
func file_gitserver_proto_init() {
	if File_gitserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawDiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawDiffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevAtTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevAtTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlameRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlameHunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlameAuthor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviousCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCommitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitFromPatchBinaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitFromPatchError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitFromPatchBinaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoNotFoundPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionNotFoundPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileNotFoundPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStatusPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionSpecifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorMatchesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitterMatchesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitBeforeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitAfterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMatchesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffMatchesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffModifiesFileNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRepoCloneableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsRepoCloneableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCloneProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCloneProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitoliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitoliteRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitoliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPerforcePathCloneableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPerforcePathCloneableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPerforceCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPerforceCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceConnectionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceGetChangelistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceGetChangelistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceChangelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPerforceSuperUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPerforceSuperUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceProtectsForDepotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceProtectsForDepotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceProtectsForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceProtectsForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceProtect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceGroupMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceGroupMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerforceUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeBaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeBaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstEverCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstEverCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BehindAheadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BehindAheadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangedFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangedFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitFromPatchBinaryRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitFromPatchBinaryRequest_Patch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch_Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch_MatchedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitserver_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMatch_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gitserver_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_gitserver_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_gitserver_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_gitserver_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_gitserver_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*CreateCommitFromPatchBinaryRequest_Metadata_)(nil),
		(*CreateCommitFromPatchBinaryRequest_Patch_)(nil),
	}
	file_gitserver_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*QueryNode_AuthorMatches)(nil),
		(*QueryNode_CommitterMatches)(nil),
		(*QueryNode_CommitBefore)(nil),
		(*QueryNode_CommitAfter)(nil),
		(*QueryNode_MessageMatches)(nil),
		(*QueryNode_DiffMatches)(nil),
		(*QueryNode_DiffModifiesFile)(nil),
		(*QueryNode_Boolean)(nil),
		(*QueryNode_Operator)(nil),
	}
	file_gitserver_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*SearchResponse_Match)(nil),
		(*SearchResponse_LimitHit)(nil),
	}
	file_gitserver_proto_msgTypes[95].OneofWrappers = []interface{}{}
	file_gitserver_proto_msgTypes[98].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitserver_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   104,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_gitserver_proto_goTypes,
		DependencyIndexes: file_gitserver_proto_depIdxs,
		EnumInfos:         file_gitserver_proto_enumTypes,
		MessageInfos:      file_gitserver_proto_msgTypes,
	}.Build()
	File_gitserver_proto = out.File
	file_gitserver_proto_rawDesc = nil
	file_gitserver_proto_goTypes = nil
	file_gitserver_proto_depIdxs = nil
}
