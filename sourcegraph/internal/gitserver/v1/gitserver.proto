syntax = "proto3";

package gitserver.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/sourcegraph/sourcegraph/internal/gitserver/v1";

service GitserverService {
  rpc Exec(ExecRequest) returns (stream ExecResponse) {}
  rpc Search(SearchRequest) returns (stream SearchResponse) {}
  rpc Archive(ArchiveRequest) returns (stream ArchiveResponse) {}
}

message ExecRequest {
  string repo = 1;
  string ensure_revision = 2;
  repeated string args = 3;
  bytes stdin = 4;
  bool no_timeout = 5;
}

message ExecResponse {
  bytes data = 1;
}

message NotFoundPayload {
  string repo = 1;
  bool clone_in_progress = 2;
  string clone_progress = 3;
}

message ExecStatusPayload {
  int32 status_code = 1;
  string stderr = 2;
}

message SearchRequest {
  // repo is the name of the repo to be searched
  string repo = 1;
  // revisions is the list of git revision to be searched. They are all passed
  // to the same underlying git command, so the searched commits will be the
  // union of all revisions listed.
  repeated RevisionSpecifier revisions = 2;
  // limit is a limit on the number of search results returned. Additional
  // results will be ignored.
  int64 limit = 3;
  // include_diff specifies whether the full diff should be included on the result messages.
  // This can be expensive, so is disabled by default.
  bool include_diff = 4;
  // include_modified specifies whether to include the list of modified files
  // in the search results. This can be expensive, so is disabled by default.
  bool include_modified_files = 5;
  // query is a tree of filters to apply to commits being searched.
  QueryNode query = 6;
}

message RevisionSpecifier {
  // RevSpec is a revision range specifier suitable for passing to git. See
  // the manpage gitrevisions(7).
  string rev_spec = 1;
  // RefGlob is a reference glob to pass to git. See the documentation for
  // "--glob" in git-log.
  string ref_glob = 2;
  // ExcludeRefGlob is a glob for references to exclude. See the
  // documentation for "--exclude" in git-log.
  string exclude_ref_glob = 3;
}

// AuthorMatchesNode is a predicate that matches if the author's name or email address
// matches the regex pattern.
message AuthorMatchesNode {
  string expr = 1;
  bool ignore_case = 2;
}

// CommitterMatchesNode is a predicate that matches if the author's name or email address
// matches the regex pattern.
message CommitterMatchesNode {
  string expr = 1;
  bool ignore_case = 2;
}

// CommitBeforeNode is a predicate that matches if the commit is before the given date
message CommitBeforeNode {
  google.protobuf.Timestamp timestamp = 1;
}

// CommitAfterNode is a predicate that matches if the commit is after the given date
message CommitAfterNode {
  google.protobuf.Timestamp timestamp = 1;
}

// MessageMatchesNode is a predicate that matches if the commit message matches
// the provided regex pattern.
message MessageMatchesNode {
  string expr = 1;
  bool ignore_case = 2;
}

// DiffMatchesNode is a a predicate that matches if any of the lines changed by
// the commit match the given regex pattern.
message DiffMatchesNode {
  string expr = 1;
  bool ignore_case = 2;
}

// DiffModifiesFileNode is a predicate that matches if the commit modifies any files
// that match the given regex pattern.
message DiffModifiesFileNode {
  string expr = 1;
  bool ignore_case = 2;
}

// BooleanNode is a predicate that will either always match or never match
message BooleanNode {
  bool value = 1;
}

enum OperatorKind {
  OPERATOR_KIND_UNSPECIFIED = 0;
  OPERATOR_KIND_AND = 1;
  OPERATOR_KIND_OR = 2;
  OPERATOR_KIND_NOT = 3;
}

message OperatorNode {
  OperatorKind kind = 1;
  repeated QueryNode operands = 2;
}

message QueryNode {
  oneof value {
    AuthorMatchesNode author_matches = 1;
    CommitterMatchesNode committer_matches = 2;
    CommitBeforeNode commit_before = 3;
    CommitAfterNode commit_after = 4;
    MessageMatchesNode message_matches = 5;
    DiffMatchesNode diff_matches = 6;
    DiffModifiesFileNode diff_modifies_file = 7;
    BooleanNode boolean = 8;
    OperatorNode operator = 9;
  }
}

message SearchResponse {
  oneof message {
    CommitMatch match = 1;
    bool limit_hit = 2;
  }
}

message CommitMatch {
  message Signature {
    string name = 1;
    string email = 2;
    google.protobuf.Timestamp date = 3;
  }

  message MatchedString {
    string content = 1;
    repeated Range ranges = 2;
  }

  // TODO move this into a shared package
  message Range {
    Location start = 1;
    Location end = 2;
  }

  message Location {
    uint32 offset = 1;
    uint32 line = 2;
    uint32 column = 3;
  }

  // oid is the 40-character, hex-encoded commit hash
  string oid = 1;
  Signature author = 2;
  Signature committer = 3;
  // parents is the list of commit hashes for this commit's parents
  repeated string parents = 4;
  repeated string refs = 5;
  repeated string source_refs = 6;
  // message is the commits message and a list of ranges that match
  // the search query.
  MatchedString message = 7;
  // diff is the diff between this commit and its first parent.
  // May be unset if `include_diff` was not specified in the request.
  MatchedString diff = 8;
  // modified_files is the list of files modified by this commit compared
  // to its first parent. May be unset if `include_modified_files` is not
  // specified in the request.
  repeated string modified_files = 9;
}

// ArchiveRequest is set of parameters for the Archive RPC.
message ArchiveRequest {
  // repo is the name of the repo to be archived
  string repo = 1;
  // treeish is the tree or commit to produce an archive for
  string treeish = 2;
  // format is the format of the resulting archive (usually "tar" or "zip")
  string format = 3;
  // pathspecs is the list of pathspecs to include in the archive. If empty, all pathspecs are included.
  repeated string pathspecs = 4;
}

// ArchiveResponse is the response from the Archive RPC that returns a chunk of the archive.
message ArchiveResponse {
  bytes data = 1;
}
