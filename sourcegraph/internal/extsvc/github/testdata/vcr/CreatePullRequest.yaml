---
version: 1
interactions:
- request:
    body: '{"query":"\nfragment actor on Actor { avatarUrl, login, url }\nfragment
      commit on Commit {\n\toid, message, messageHeadline, committedDate, pushedDate,
      url\n\tcommitter {\n\tavatarUrl, email, name\n\tuser { ...actor }\n\t}\n}\nfragment
      review on PullRequestReview {\n\tdatabaseId\n\tauthor { ...actor }\n\tauthorAssociation\n\tbody\n\tstate\n\turl\n\tcreatedAt\n\tupdatedAt\n\tcommit
      { ...commit }\n\tincludesCreatedEdit\n}\nfragment pr on PullRequest {\n\tid,
      title, body, state, url, number, createdAt, updatedAt\n\theadRefOid, baseRefOid,
      headRefName, baseRefName\n\tlabels(first:100) { nodes { color description name
      } }\n\tauthor { ...actor }\n\tparticipants(first: 100) { nodes { ...actor }
      }\n\ttimelineItems(\n\tfirst: 250\n\titemTypes: [\n\t\tASSIGNED_EVENT\n\t\tCLOSED_EVENT\n\t\tISSUE_COMMENT\n\t\tRENAMED_TITLE_EVENT\n\t\tMERGED_EVENT\n\t\tPULL_REQUEST_REVIEW\n\t\tPULL_REQUEST_REVIEW_THREAD\n\t\tREOPENED_EVENT\n\t\tREVIEW_DISMISSED_EVENT\n\t\tREVIEW_REQUEST_REMOVED_EVENT\n\t\tREVIEW_REQUESTED_EVENT\n\t\tUNASSIGNED_EVENT\n\t]\n\t)
      {\n\tnodes {\n\t\t__typename\n\t\t... on AssignedEvent {\n\t\tactor { ...actor
      }\n\t\tassignee { ...actor }\n\t\tcreatedAt\n\t\t}\n\t\t... on ClosedEvent {\n\t\tactor
      { ...actor }\n\t\tcreatedAt\n\t\turl\n\t\t}\n\t\t... on IssueComment {\n\t\tdatabaseId\n\t\tauthor
      { ...actor }\n\t\tauthorAssociation\n\t\tbody\n\t\tcreatedAt\n\t\teditor { ...actor
      }\n\t\turl\n\t\tupdatedAt\n\t\tincludesCreatedEdit\n\t\tpublishedAt\n\t\t}\n\t\t...
      on RenamedTitleEvent {\n\t\tactor { ...actor }\n\t\tpreviousTitle\n\t\tcurrentTitle\n\t\tcreatedAt\n\t\t}\n\t\t...
      on MergedEvent {\n\t\tactor { ...actor }\n\t\tmergeRefName\n\t\turl\n\t\tcommit
      { ...commit }\n\t\tcreatedAt\n\t\t}\n\t\t... on PullRequestReview {\n\t\t...review\n\t\t}\n\t\t...
      on PullRequestReviewThread {\n\t\tcomments(last: 100) {\n\t\t\tnodes {\n\t\t\tdatabaseId\n\t\t\tauthor
      { ...actor }\n\t\t\tauthorAssociation\n\t\t\teditor { ...actor }\n\t\t\tcommit
      { ...commit }\n\t\t\tbody\n\t\t\tstate\n\t\t\turl\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\tincludesCreatedEdit\n\t\t\t}\n\t\t}\n\t\t}\n\t\t...
      on ReopenedEvent {\n\t\tactor { ...actor }\n\t\tcreatedAt\n\t\t}\n\t\t... on
      ReviewDismissedEvent {\n\t\tactor { ...actor }\n\t\treview { ...review }\n\t\tdismissalMessage\n\t\tcreatedAt\n\t\t}\n\t\t...
      on ReviewRequestRemovedEvent {\n\t\tactor { ...actor }\n\t\trequestedReviewer
      { ...actor }\n\t\trequestedTeam: requestedReviewer {\n\t\t\t... on Team { name
      url avatarUrl }\n\t\t}\n\t\tcreatedAt\n\t\t}\n\t\t... on ReviewRequestedEvent
      {\n\t\tactor { ...actor }\n\t\trequestedReviewer { ...actor }\n\t\trequestedTeam:
      requestedReviewer {\n\t\t\t... on Team { name url avatarUrl }\n\t\t}\n\t\tcreatedAt\n\t\t}\n\t\t...
      on UnassignedEvent {\n\t\tactor { ...actor }\n\t\tassignee { ...actor }\n\t\tcreatedAt\n\t\t}\n\t}\n\t}\n}\nmutation\tCreatePullRequest($input:CreatePullRequestInput!)
      {\n  createPullRequest(input:$input) {\n    pullRequest {\n      ... pr\n    }\n  }\n}","variables":{"input":{"repositoryId":"MDEwOlJlcG9zaXRvcnkyMjExNDc1MTM=","baseRefName":"master","headRefName":"test-pr-3","title":"This
      is a test PR, feel free to ignore","body":"I''m opening this PR to test something.
      Please ignore."}}}'
    form: {}
    headers:
      Content-Type:
      - application/json; charset=utf-8
    url: https://api.github.com/graphql
    method: POST
  response:
    body: '{"data":{"createPullRequest":{"pullRequest":{"id":"MDExOlB1bGxSZXF1ZXN0MzY5MDMyNzkw","title":"This
      is a test PR, feel free to ignore","body":"I''m opening this PR to test something.
      Please ignore.","state":"OPEN","url":"https://github.com/sourcegraph/automation-testing/pull/132","number":132,"createdAt":"2020-01-30T11:53:48Z","updatedAt":"2020-01-30T11:53:48Z","headRefOid":"05e562cc5d8ab50b5fcab8dfd5dfa5db13a48e80","baseRefOid":"3b79a5d479d2af9cfe91e0aad4e9dddca7278150","headRefName":"test-pr-3","baseRefName":"master","labels":{"nodes":[]},"author":{"avatarUrl":"https://avatars3.githubusercontent.com/u/25610?v=4","login":"ryanslade","url":"https://github.com/ryanslade"},"participants":{"nodes":[{"avatarUrl":"https://avatars3.githubusercontent.com/u/25610?v=4","login":"ryanslade","url":"https://github.com/ryanslade"},{"avatarUrl":"https://avatars3.githubusercontent.com/u/1185253?v=4","login":"mrnugget","url":"https://github.com/mrnugget"}]},"timelineItems":{"nodes":[]}}}}}'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval,
        X-GitHub-Media-Type
      Cache-Control:
      - no-cache
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 30 Jan 2020 11:53:49 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept-Encoding
      X-Accepted-Oauth-Scopes:
      - repo
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Github-Media-Type:
      - github.v4; format=json
      X-Github-Request-Id:
      - D01B:C8C6:109329B:13C17B7:5E32C3CB
      X-Oauth-Scopes:
      - read:org, repo
      X-Ratelimit-Limit:
      - "5000"
      X-Ratelimit-Remaining:
      - "4958"
      X-Ratelimit-Reset:
      - "1580385706"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: '{"query":"\nfragment actor on Actor { avatarUrl, login, url }\nfragment
      commit on Commit {\n\toid, message, messageHeadline, committedDate, pushedDate,
      url\n\tcommitter {\n\tavatarUrl, email, name\n\tuser { ...actor }\n\t}\n}\nfragment
      review on PullRequestReview {\n\tdatabaseId\n\tauthor { ...actor }\n\tauthorAssociation\n\tbody\n\tstate\n\turl\n\tcreatedAt\n\tupdatedAt\n\tcommit
      { ...commit }\n\tincludesCreatedEdit\n}\nfragment pr on PullRequest {\n\tid,
      title, body, state, url, number, createdAt, updatedAt\n\theadRefOid, baseRefOid,
      headRefName, baseRefName\n\tlabels(first:100) { nodes { color description name
      } }\n\tauthor { ...actor }\n\tparticipants(first: 100) { nodes { ...actor }
      }\n\ttimelineItems(\n\tfirst: 250\n\titemTypes: [\n\t\tASSIGNED_EVENT\n\t\tCLOSED_EVENT\n\t\tISSUE_COMMENT\n\t\tRENAMED_TITLE_EVENT\n\t\tMERGED_EVENT\n\t\tPULL_REQUEST_REVIEW\n\t\tPULL_REQUEST_REVIEW_THREAD\n\t\tREOPENED_EVENT\n\t\tREVIEW_DISMISSED_EVENT\n\t\tREVIEW_REQUEST_REMOVED_EVENT\n\t\tREVIEW_REQUESTED_EVENT\n\t\tUNASSIGNED_EVENT\n\t]\n\t)
      {\n\tnodes {\n\t\t__typename\n\t\t... on AssignedEvent {\n\t\tactor { ...actor
      }\n\t\tassignee { ...actor }\n\t\tcreatedAt\n\t\t}\n\t\t... on ClosedEvent {\n\t\tactor
      { ...actor }\n\t\tcreatedAt\n\t\turl\n\t\t}\n\t\t... on IssueComment {\n\t\tdatabaseId\n\t\tauthor
      { ...actor }\n\t\tauthorAssociation\n\t\tbody\n\t\tcreatedAt\n\t\teditor { ...actor
      }\n\t\turl\n\t\tupdatedAt\n\t\tincludesCreatedEdit\n\t\tpublishedAt\n\t\t}\n\t\t...
      on RenamedTitleEvent {\n\t\tactor { ...actor }\n\t\tpreviousTitle\n\t\tcurrentTitle\n\t\tcreatedAt\n\t\t}\n\t\t...
      on MergedEvent {\n\t\tactor { ...actor }\n\t\tmergeRefName\n\t\turl\n\t\tcommit
      { ...commit }\n\t\tcreatedAt\n\t\t}\n\t\t... on PullRequestReview {\n\t\t...review\n\t\t}\n\t\t...
      on PullRequestReviewThread {\n\t\tcomments(last: 100) {\n\t\t\tnodes {\n\t\t\tdatabaseId\n\t\t\tauthor
      { ...actor }\n\t\t\tauthorAssociation\n\t\t\teditor { ...actor }\n\t\t\tcommit
      { ...commit }\n\t\t\tbody\n\t\t\tstate\n\t\t\turl\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\tincludesCreatedEdit\n\t\t\t}\n\t\t}\n\t\t}\n\t\t...
      on ReopenedEvent {\n\t\tactor { ...actor }\n\t\tcreatedAt\n\t\t}\n\t\t... on
      ReviewDismissedEvent {\n\t\tactor { ...actor }\n\t\treview { ...review }\n\t\tdismissalMessage\n\t\tcreatedAt\n\t\t}\n\t\t...
      on ReviewRequestRemovedEvent {\n\t\tactor { ...actor }\n\t\trequestedReviewer
      { ...actor }\n\t\trequestedTeam: requestedReviewer {\n\t\t\t... on Team { name
      url avatarUrl }\n\t\t}\n\t\tcreatedAt\n\t\t}\n\t\t... on ReviewRequestedEvent
      {\n\t\tactor { ...actor }\n\t\trequestedReviewer { ...actor }\n\t\trequestedTeam:
      requestedReviewer {\n\t\t\t... on Team { name url avatarUrl }\n\t\t}\n\t\tcreatedAt\n\t\t}\n\t\t...
      on UnassignedEvent {\n\t\tactor { ...actor }\n\t\tassignee { ...actor }\n\t\tcreatedAt\n\t\t}\n\t}\n\t}\n}\nmutation\tCreatePullRequest($input:CreatePullRequestInput!)
      {\n  createPullRequest(input:$input) {\n    pullRequest {\n      ... pr\n    }\n  }\n}","variables":{"input":{"repositoryId":"MDEwOlJlcG9zaXRvcnkyMjExNDc1MTM=","baseRefName":"master","headRefName":"always-open-pr","title":"This
      is a test PR that is always open","body":"Feel free to ignore this. This is
      a test PR that is always open."}}}'
    form: {}
    headers:
      Content-Type:
      - application/json; charset=utf-8
    url: https://api.github.com/graphql
    method: POST
  response:
    body: '{"data":{"createPullRequest":{"pullRequest":null}},"errors":[{"type":"UNPROCESSABLE","path":["createPullRequest"],"locations":[{"line":137,"column":3}],"message":"A
      pull request already exists for sourcegraph:always-open-pr."}]}'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval,
        X-GitHub-Media-Type
      Cache-Control:
      - no-cache
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 30 Jan 2020 11:53:49 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept-Encoding
      X-Accepted-Oauth-Scopes:
      - repo
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Github-Media-Type:
      - github.v4; format=json
      X-Github-Request-Id:
      - D01B:C8C6:1093385:13C1881:5E32C3CD
      X-Oauth-Scopes:
      - read:org, repo
      X-Ratelimit-Limit:
      - "5000"
      X-Ratelimit-Remaining:
      - "4955"
      X-Ratelimit-Reset:
      - "1580385706"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: '{"query":"\nfragment actor on Actor { avatarUrl, login, url }\nfragment
      commit on Commit {\n\toid, message, messageHeadline, committedDate, pushedDate,
      url\n\tcommitter {\n\tavatarUrl, email, name\n\tuser { ...actor }\n\t}\n}\nfragment
      review on PullRequestReview {\n\tdatabaseId\n\tauthor { ...actor }\n\tauthorAssociation\n\tbody\n\tstate\n\turl\n\tcreatedAt\n\tupdatedAt\n\tcommit
      { ...commit }\n\tincludesCreatedEdit\n}\nfragment pr on PullRequest {\n\tid,
      title, body, state, url, number, createdAt, updatedAt\n\theadRefOid, baseRefOid,
      headRefName, baseRefName\n\tlabels(first:100) { nodes { color description name
      } }\n\tauthor { ...actor }\n\tparticipants(first: 100) { nodes { ...actor }
      }\n\ttimelineItems(\n\tfirst: 250\n\titemTypes: [\n\t\tASSIGNED_EVENT\n\t\tCLOSED_EVENT\n\t\tISSUE_COMMENT\n\t\tRENAMED_TITLE_EVENT\n\t\tMERGED_EVENT\n\t\tPULL_REQUEST_REVIEW\n\t\tPULL_REQUEST_REVIEW_THREAD\n\t\tREOPENED_EVENT\n\t\tREVIEW_DISMISSED_EVENT\n\t\tREVIEW_REQUEST_REMOVED_EVENT\n\t\tREVIEW_REQUESTED_EVENT\n\t\tUNASSIGNED_EVENT\n\t]\n\t)
      {\n\tnodes {\n\t\t__typename\n\t\t... on AssignedEvent {\n\t\tactor { ...actor
      }\n\t\tassignee { ...actor }\n\t\tcreatedAt\n\t\t}\n\t\t... on ClosedEvent {\n\t\tactor
      { ...actor }\n\t\tcreatedAt\n\t\turl\n\t\t}\n\t\t... on IssueComment {\n\t\tdatabaseId\n\t\tauthor
      { ...actor }\n\t\tauthorAssociation\n\t\tbody\n\t\tcreatedAt\n\t\teditor { ...actor
      }\n\t\turl\n\t\tupdatedAt\n\t\tincludesCreatedEdit\n\t\tpublishedAt\n\t\t}\n\t\t...
      on RenamedTitleEvent {\n\t\tactor { ...actor }\n\t\tpreviousTitle\n\t\tcurrentTitle\n\t\tcreatedAt\n\t\t}\n\t\t...
      on MergedEvent {\n\t\tactor { ...actor }\n\t\tmergeRefName\n\t\turl\n\t\tcommit
      { ...commit }\n\t\tcreatedAt\n\t\t}\n\t\t... on PullRequestReview {\n\t\t...review\n\t\t}\n\t\t...
      on PullRequestReviewThread {\n\t\tcomments(last: 100) {\n\t\t\tnodes {\n\t\t\tdatabaseId\n\t\t\tauthor
      { ...actor }\n\t\t\tauthorAssociation\n\t\t\teditor { ...actor }\n\t\t\tcommit
      { ...commit }\n\t\t\tbody\n\t\t\tstate\n\t\t\turl\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\tincludesCreatedEdit\n\t\t\t}\n\t\t}\n\t\t}\n\t\t...
      on ReopenedEvent {\n\t\tactor { ...actor }\n\t\tcreatedAt\n\t\t}\n\t\t... on
      ReviewDismissedEvent {\n\t\tactor { ...actor }\n\t\treview { ...review }\n\t\tdismissalMessage\n\t\tcreatedAt\n\t\t}\n\t\t...
      on ReviewRequestRemovedEvent {\n\t\tactor { ...actor }\n\t\trequestedReviewer
      { ...actor }\n\t\trequestedTeam: requestedReviewer {\n\t\t\t... on Team { name
      url avatarUrl }\n\t\t}\n\t\tcreatedAt\n\t\t}\n\t\t... on ReviewRequestedEvent
      {\n\t\tactor { ...actor }\n\t\trequestedReviewer { ...actor }\n\t\trequestedTeam:
      requestedReviewer {\n\t\t\t... on Team { name url avatarUrl }\n\t\t}\n\t\tcreatedAt\n\t\t}\n\t\t...
      on UnassignedEvent {\n\t\tactor { ...actor }\n\t\tassignee { ...actor }\n\t\tcreatedAt\n\t\t}\n\t}\n\t}\n}\nmutation\tCreatePullRequest($input:CreatePullRequestInput!)
      {\n  createPullRequest(input:$input) {\n    pullRequest {\n      ... pr\n    }\n  }\n}","variables":{"input":{"repositoryId":"MDEwOlJlcG9zaXRvcnkyMjExNDc1MTM=","baseRefName":"master","headRefName":"this-head-ref-should-not-exist","title":"Test","body":""}}}'
    form: {}
    headers:
      Content-Type:
      - application/json; charset=utf-8
    url: https://api.github.com/graphql
    method: POST
  response:
    body: '{"data":{"createPullRequest":{"pullRequest":null}},"errors":[{"type":"UNPROCESSABLE","path":["createPullRequest"],"locations":[{"line":137,"column":3}],"message":"Head
      sha can''t be blank, Base sha can''t be blank, No commits between master and
      this-head-ref-should-not-exist, Head ref must be a branch"}]}'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval,
        X-GitHub-Media-Type
      Cache-Control:
      - no-cache
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 30 Jan 2020 11:53:50 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept-Encoding
      X-Accepted-Oauth-Scopes:
      - repo
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Github-Media-Type:
      - github.v4; format=json
      X-Github-Request-Id:
      - D01B:C8C6:1093414:13C191B:5E32C3CD
      X-Oauth-Scopes:
      - read:org, repo
      X-Ratelimit-Limit:
      - "5000"
      X-Ratelimit-Remaining:
      - "4952"
      X-Ratelimit-Reset:
      - "1580385706"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
    duration: ""
