//go:build ignore
// +build ignore

package main

import (
	"flag"
	"fmt"
	"os"
	"strings"

	"github.com/sourcegraph/sourcegraph/internal/rbac"
	"github.com/sourcegraph/sourcegraph/internal/types"
)

var (
	outputFile = flag.String("o", "", "output file")
	pkgName    = flag.String("pkg", "main", "Go package name")
	lang       = flag.String("lang", "go", "language to generate constants for")
)

// This generates the permission constants used on the frontend and backend for access control checks.
// The source of truth for RBAC is the `schema.yaml`, and this parses the YAML file, constructs the permission
// display names and saves the display names as constants.
func main() {
	flag.Parse()

	if *outputFile == "" {
		flag.Usage()
		os.Exit(1)
	}

	output, err := os.Create(*outputFile)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	defer output.Close()

	schema := rbac.RBACSchema

	var permissions = []types.Permission{}
	for _, namespace := range schema.Namespaces {
		for _, action := range namespace.Actions {
			permissions = append(permissions, types.Permission{
				Namespace: namespace.Name,
				Action:    action,
			})
		}
	}

	switch strings.ToLower(*lang) {
	case "go":
		generateGoConstants(output, permissions)
	case "ts":
		generateTSConstants(output, permissions)
	}
}

func generateTSConstants(output *os.File, permissions []types.Permission) {
	fmt.Fprintln(output, "// Code generated by internal/rbac/yamldata. DO NOT EDIT.")
	for _, permission := range permissions {
		fmt.Fprintln(output)
		dn := permission.DisplayName()
		fmt.Fprintln(output, fmt.Sprintf("export const %sPermission = '%s'", sentencizePermission(dn), dn))
	}
}

func generateGoConstants(output *os.File, permissions []types.Permission) {
	fmt.Fprintln(output, "// Code generated by yamldata. DO NOT EDIT.")
	fmt.Fprintln(output)
	fmt.Fprintf(output, "package %s\n", *pkgName)
	for _, permission := range permissions {
		fmt.Fprintln(output)
		dn := permission.DisplayName()
		fmt.Fprintln(output, fmt.Sprintf("const %sPermission string = \"%s\"", sentencizePermission(dn), dn))
	}
}

func sentencizePermission(permission string) string {
	separators := [2]string{"#", "_"}
	// Replace all separators with white spaces
	for _, sep := range separators {
		permission = strings.ReplaceAll(permission, sep, " ")
	}

	return toTitleCase(permission)
}

func toTitleCase(input string) string {
	words := strings.Fields(input)

	formattedWords := make([]string, len(words))

	for i, word := range words {
		formattedWords[i] = strings.Title(strings.ToLower(word))
	}

	return strings.Join(formattedWords, "")
}
