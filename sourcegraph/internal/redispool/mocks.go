// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package redispool

import (
	"context"
	"sync"

	redis "github.com/gomodule/redigo/redis"
)

// MockKeyValue is a mock implementation of the KeyValue interface (from the
// package github.com/sourcegraph/sourcegraph/internal/redispool) used for
// unit testing.
type MockKeyValue struct {
	// DelFunc is an instance of a mock function object controlling the
	// behavior of the method Del.
	DelFunc *KeyValueDelFunc
	// ExpireFunc is an instance of a mock function object controlling the
	// behavior of the method Expire.
	ExpireFunc *KeyValueExpireFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *KeyValueGetFunc
	// GetSetFunc is an instance of a mock function object controlling the
	// behavior of the method GetSet.
	GetSetFunc *KeyValueGetSetFunc
	// HDelFunc is an instance of a mock function object controlling the
	// behavior of the method HDel.
	HDelFunc *KeyValueHDelFunc
	// HGetFunc is an instance of a mock function object controlling the
	// behavior of the method HGet.
	HGetFunc *KeyValueHGetFunc
	// HGetAllFunc is an instance of a mock function object controlling the
	// behavior of the method HGetAll.
	HGetAllFunc *KeyValueHGetAllFunc
	// HSetFunc is an instance of a mock function object controlling the
	// behavior of the method HSet.
	HSetFunc *KeyValueHSetFunc
	// IncrFunc is an instance of a mock function object controlling the
	// behavior of the method Incr.
	IncrFunc *KeyValueIncrFunc
	// IncrbyFunc is an instance of a mock function object controlling the
	// behavior of the method Incrby.
	IncrbyFunc *KeyValueIncrbyFunc
	// LLenFunc is an instance of a mock function object controlling the
	// behavior of the method LLen.
	LLenFunc *KeyValueLLenFunc
	// LPushFunc is an instance of a mock function object controlling the
	// behavior of the method LPush.
	LPushFunc *KeyValueLPushFunc
	// LRangeFunc is an instance of a mock function object controlling the
	// behavior of the method LRange.
	LRangeFunc *KeyValueLRangeFunc
	// LTrimFunc is an instance of a mock function object controlling the
	// behavior of the method LTrim.
	LTrimFunc *KeyValueLTrimFunc
	// PoolFunc is an instance of a mock function object controlling the
	// behavior of the method Pool.
	PoolFunc *KeyValuePoolFunc
	// SetFunc is an instance of a mock function object controlling the
	// behavior of the method Set.
	SetFunc *KeyValueSetFunc
	// SetExFunc is an instance of a mock function object controlling the
	// behavior of the method SetEx.
	SetExFunc *KeyValueSetExFunc
	// SetNxFunc is an instance of a mock function object controlling the
	// behavior of the method SetNx.
	SetNxFunc *KeyValueSetNxFunc
	// TTLFunc is an instance of a mock function object controlling the
	// behavior of the method TTL.
	TTLFunc *KeyValueTTLFunc
	// WithContextFunc is an instance of a mock function object controlling
	// the behavior of the method WithContext.
	WithContextFunc *KeyValueWithContextFunc
}

// NewMockKeyValue creates a new mock of the KeyValue interface. All methods
// return zero values for all results, unless overwritten.
func NewMockKeyValue() *MockKeyValue {
	return &MockKeyValue{
		DelFunc: &KeyValueDelFunc{
			defaultHook: func(string) (r0 error) {
				return
			},
		},
		ExpireFunc: &KeyValueExpireFunc{
			defaultHook: func(string, int) (r0 error) {
				return
			},
		},
		GetFunc: &KeyValueGetFunc{
			defaultHook: func(string) (r0 Value) {
				return
			},
		},
		GetSetFunc: &KeyValueGetSetFunc{
			defaultHook: func(string, interface{}) (r0 Value) {
				return
			},
		},
		HDelFunc: &KeyValueHDelFunc{
			defaultHook: func(string, string) (r0 Value) {
				return
			},
		},
		HGetFunc: &KeyValueHGetFunc{
			defaultHook: func(string, string) (r0 Value) {
				return
			},
		},
		HGetAllFunc: &KeyValueHGetAllFunc{
			defaultHook: func(string) (r0 Values) {
				return
			},
		},
		HSetFunc: &KeyValueHSetFunc{
			defaultHook: func(string, string, interface{}) (r0 error) {
				return
			},
		},
		IncrFunc: &KeyValueIncrFunc{
			defaultHook: func(string) (r0 int, r1 error) {
				return
			},
		},
		IncrbyFunc: &KeyValueIncrbyFunc{
			defaultHook: func(string, int) (r0 int, r1 error) {
				return
			},
		},
		LLenFunc: &KeyValueLLenFunc{
			defaultHook: func(string) (r0 int, r1 error) {
				return
			},
		},
		LPushFunc: &KeyValueLPushFunc{
			defaultHook: func(string, interface{}) (r0 error) {
				return
			},
		},
		LRangeFunc: &KeyValueLRangeFunc{
			defaultHook: func(string, int, int) (r0 Values) {
				return
			},
		},
		LTrimFunc: &KeyValueLTrimFunc{
			defaultHook: func(string, int, int) (r0 error) {
				return
			},
		},
		PoolFunc: &KeyValuePoolFunc{
			defaultHook: func() (r0 *redis.Pool, r1 bool) {
				return
			},
		},
		SetFunc: &KeyValueSetFunc{
			defaultHook: func(string, interface{}) (r0 error) {
				return
			},
		},
		SetExFunc: &KeyValueSetExFunc{
			defaultHook: func(string, int, interface{}) (r0 error) {
				return
			},
		},
		SetNxFunc: &KeyValueSetNxFunc{
			defaultHook: func(string, interface{}) (r0 bool, r1 error) {
				return
			},
		},
		TTLFunc: &KeyValueTTLFunc{
			defaultHook: func(string) (r0 int, r1 error) {
				return
			},
		},
		WithContextFunc: &KeyValueWithContextFunc{
			defaultHook: func(context.Context) (r0 KeyValue) {
				return
			},
		},
	}
}

// NewStrictMockKeyValue creates a new mock of the KeyValue interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockKeyValue() *MockKeyValue {
	return &MockKeyValue{
		DelFunc: &KeyValueDelFunc{
			defaultHook: func(string) error {
				panic("unexpected invocation of MockKeyValue.Del")
			},
		},
		ExpireFunc: &KeyValueExpireFunc{
			defaultHook: func(string, int) error {
				panic("unexpected invocation of MockKeyValue.Expire")
			},
		},
		GetFunc: &KeyValueGetFunc{
			defaultHook: func(string) Value {
				panic("unexpected invocation of MockKeyValue.Get")
			},
		},
		GetSetFunc: &KeyValueGetSetFunc{
			defaultHook: func(string, interface{}) Value {
				panic("unexpected invocation of MockKeyValue.GetSet")
			},
		},
		HDelFunc: &KeyValueHDelFunc{
			defaultHook: func(string, string) Value {
				panic("unexpected invocation of MockKeyValue.HDel")
			},
		},
		HGetFunc: &KeyValueHGetFunc{
			defaultHook: func(string, string) Value {
				panic("unexpected invocation of MockKeyValue.HGet")
			},
		},
		HGetAllFunc: &KeyValueHGetAllFunc{
			defaultHook: func(string) Values {
				panic("unexpected invocation of MockKeyValue.HGetAll")
			},
		},
		HSetFunc: &KeyValueHSetFunc{
			defaultHook: func(string, string, interface{}) error {
				panic("unexpected invocation of MockKeyValue.HSet")
			},
		},
		IncrFunc: &KeyValueIncrFunc{
			defaultHook: func(string) (int, error) {
				panic("unexpected invocation of MockKeyValue.Incr")
			},
		},
		IncrbyFunc: &KeyValueIncrbyFunc{
			defaultHook: func(string, int) (int, error) {
				panic("unexpected invocation of MockKeyValue.Incrby")
			},
		},
		LLenFunc: &KeyValueLLenFunc{
			defaultHook: func(string) (int, error) {
				panic("unexpected invocation of MockKeyValue.LLen")
			},
		},
		LPushFunc: &KeyValueLPushFunc{
			defaultHook: func(string, interface{}) error {
				panic("unexpected invocation of MockKeyValue.LPush")
			},
		},
		LRangeFunc: &KeyValueLRangeFunc{
			defaultHook: func(string, int, int) Values {
				panic("unexpected invocation of MockKeyValue.LRange")
			},
		},
		LTrimFunc: &KeyValueLTrimFunc{
			defaultHook: func(string, int, int) error {
				panic("unexpected invocation of MockKeyValue.LTrim")
			},
		},
		PoolFunc: &KeyValuePoolFunc{
			defaultHook: func() (*redis.Pool, bool) {
				panic("unexpected invocation of MockKeyValue.Pool")
			},
		},
		SetFunc: &KeyValueSetFunc{
			defaultHook: func(string, interface{}) error {
				panic("unexpected invocation of MockKeyValue.Set")
			},
		},
		SetExFunc: &KeyValueSetExFunc{
			defaultHook: func(string, int, interface{}) error {
				panic("unexpected invocation of MockKeyValue.SetEx")
			},
		},
		SetNxFunc: &KeyValueSetNxFunc{
			defaultHook: func(string, interface{}) (bool, error) {
				panic("unexpected invocation of MockKeyValue.SetNx")
			},
		},
		TTLFunc: &KeyValueTTLFunc{
			defaultHook: func(string) (int, error) {
				panic("unexpected invocation of MockKeyValue.TTL")
			},
		},
		WithContextFunc: &KeyValueWithContextFunc{
			defaultHook: func(context.Context) KeyValue {
				panic("unexpected invocation of MockKeyValue.WithContext")
			},
		},
	}
}

// NewMockKeyValueFrom creates a new mock of the MockKeyValue interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockKeyValueFrom(i KeyValue) *MockKeyValue {
	return &MockKeyValue{
		DelFunc: &KeyValueDelFunc{
			defaultHook: i.Del,
		},
		ExpireFunc: &KeyValueExpireFunc{
			defaultHook: i.Expire,
		},
		GetFunc: &KeyValueGetFunc{
			defaultHook: i.Get,
		},
		GetSetFunc: &KeyValueGetSetFunc{
			defaultHook: i.GetSet,
		},
		HDelFunc: &KeyValueHDelFunc{
			defaultHook: i.HDel,
		},
		HGetFunc: &KeyValueHGetFunc{
			defaultHook: i.HGet,
		},
		HGetAllFunc: &KeyValueHGetAllFunc{
			defaultHook: i.HGetAll,
		},
		HSetFunc: &KeyValueHSetFunc{
			defaultHook: i.HSet,
		},
		IncrFunc: &KeyValueIncrFunc{
			defaultHook: i.Incr,
		},
		IncrbyFunc: &KeyValueIncrbyFunc{
			defaultHook: i.Incrby,
		},
		LLenFunc: &KeyValueLLenFunc{
			defaultHook: i.LLen,
		},
		LPushFunc: &KeyValueLPushFunc{
			defaultHook: i.LPush,
		},
		LRangeFunc: &KeyValueLRangeFunc{
			defaultHook: i.LRange,
		},
		LTrimFunc: &KeyValueLTrimFunc{
			defaultHook: i.LTrim,
		},
		PoolFunc: &KeyValuePoolFunc{
			defaultHook: i.Pool,
		},
		SetFunc: &KeyValueSetFunc{
			defaultHook: i.Set,
		},
		SetExFunc: &KeyValueSetExFunc{
			defaultHook: i.SetEx,
		},
		SetNxFunc: &KeyValueSetNxFunc{
			defaultHook: i.SetNx,
		},
		TTLFunc: &KeyValueTTLFunc{
			defaultHook: i.TTL,
		},
		WithContextFunc: &KeyValueWithContextFunc{
			defaultHook: i.WithContext,
		},
	}
}

// KeyValueDelFunc describes the behavior when the Del method of the parent
// MockKeyValue instance is invoked.
type KeyValueDelFunc struct {
	defaultHook func(string) error
	hooks       []func(string) error
	history     []KeyValueDelFuncCall
	mutex       sync.Mutex
}

// Del delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) Del(v0 string) error {
	r0 := m.DelFunc.nextHook()(v0)
	m.DelFunc.appendCall(KeyValueDelFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Del method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueDelFunc) SetDefaultHook(hook func(string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Del method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueDelFunc) PushHook(hook func(string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueDelFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueDelFunc) PushReturn(r0 error) {
	f.PushHook(func(string) error {
		return r0
	})
}

func (f *KeyValueDelFunc) nextHook() func(string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueDelFunc) appendCall(r0 KeyValueDelFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueDelFuncCall objects describing the
// invocations of this function.
func (f *KeyValueDelFunc) History() []KeyValueDelFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueDelFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueDelFuncCall is an object that describes an invocation of method
// Del on an instance of MockKeyValue.
type KeyValueDelFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueDelFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueDelFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueExpireFunc describes the behavior when the Expire method of the
// parent MockKeyValue instance is invoked.
type KeyValueExpireFunc struct {
	defaultHook func(string, int) error
	hooks       []func(string, int) error
	history     []KeyValueExpireFuncCall
	mutex       sync.Mutex
}

// Expire delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) Expire(v0 string, v1 int) error {
	r0 := m.ExpireFunc.nextHook()(v0, v1)
	m.ExpireFunc.appendCall(KeyValueExpireFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Expire method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueExpireFunc) SetDefaultHook(hook func(string, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Expire method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueExpireFunc) PushHook(hook func(string, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueExpireFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueExpireFunc) PushReturn(r0 error) {
	f.PushHook(func(string, int) error {
		return r0
	})
}

func (f *KeyValueExpireFunc) nextHook() func(string, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueExpireFunc) appendCall(r0 KeyValueExpireFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueExpireFuncCall objects describing
// the invocations of this function.
func (f *KeyValueExpireFunc) History() []KeyValueExpireFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueExpireFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueExpireFuncCall is an object that describes an invocation of
// method Expire on an instance of MockKeyValue.
type KeyValueExpireFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueExpireFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueExpireFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueGetFunc describes the behavior when the Get method of the parent
// MockKeyValue instance is invoked.
type KeyValueGetFunc struct {
	defaultHook func(string) Value
	hooks       []func(string) Value
	history     []KeyValueGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) Get(v0 string) Value {
	r0 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(KeyValueGetFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueGetFunc) SetDefaultHook(hook func(string) Value) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueGetFunc) PushHook(hook func(string) Value) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueGetFunc) SetDefaultReturn(r0 Value) {
	f.SetDefaultHook(func(string) Value {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueGetFunc) PushReturn(r0 Value) {
	f.PushHook(func(string) Value {
		return r0
	})
}

func (f *KeyValueGetFunc) nextHook() func(string) Value {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueGetFunc) appendCall(r0 KeyValueGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueGetFuncCall objects describing the
// invocations of this function.
func (f *KeyValueGetFunc) History() []KeyValueGetFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockKeyValue.
type KeyValueGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Value
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueGetSetFunc describes the behavior when the GetSet method of the
// parent MockKeyValue instance is invoked.
type KeyValueGetSetFunc struct {
	defaultHook func(string, interface{}) Value
	hooks       []func(string, interface{}) Value
	history     []KeyValueGetSetFuncCall
	mutex       sync.Mutex
}

// GetSet delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) GetSet(v0 string, v1 interface{}) Value {
	r0 := m.GetSetFunc.nextHook()(v0, v1)
	m.GetSetFunc.appendCall(KeyValueGetSetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetSet method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueGetSetFunc) SetDefaultHook(hook func(string, interface{}) Value) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSet method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueGetSetFunc) PushHook(hook func(string, interface{}) Value) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueGetSetFunc) SetDefaultReturn(r0 Value) {
	f.SetDefaultHook(func(string, interface{}) Value {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueGetSetFunc) PushReturn(r0 Value) {
	f.PushHook(func(string, interface{}) Value {
		return r0
	})
}

func (f *KeyValueGetSetFunc) nextHook() func(string, interface{}) Value {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueGetSetFunc) appendCall(r0 KeyValueGetSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueGetSetFuncCall objects describing
// the invocations of this function.
func (f *KeyValueGetSetFunc) History() []KeyValueGetSetFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueGetSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueGetSetFuncCall is an object that describes an invocation of
// method GetSet on an instance of MockKeyValue.
type KeyValueGetSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Value
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueGetSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueGetSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueHDelFunc describes the behavior when the HDel method of the
// parent MockKeyValue instance is invoked.
type KeyValueHDelFunc struct {
	defaultHook func(string, string) Value
	hooks       []func(string, string) Value
	history     []KeyValueHDelFuncCall
	mutex       sync.Mutex
}

// HDel delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) HDel(v0 string, v1 string) Value {
	r0 := m.HDelFunc.nextHook()(v0, v1)
	m.HDelFunc.appendCall(KeyValueHDelFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HDel method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueHDelFunc) SetDefaultHook(hook func(string, string) Value) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HDel method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueHDelFunc) PushHook(hook func(string, string) Value) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueHDelFunc) SetDefaultReturn(r0 Value) {
	f.SetDefaultHook(func(string, string) Value {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueHDelFunc) PushReturn(r0 Value) {
	f.PushHook(func(string, string) Value {
		return r0
	})
}

func (f *KeyValueHDelFunc) nextHook() func(string, string) Value {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueHDelFunc) appendCall(r0 KeyValueHDelFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueHDelFuncCall objects describing the
// invocations of this function.
func (f *KeyValueHDelFunc) History() []KeyValueHDelFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueHDelFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueHDelFuncCall is an object that describes an invocation of method
// HDel on an instance of MockKeyValue.
type KeyValueHDelFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Value
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueHDelFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueHDelFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueHGetFunc describes the behavior when the HGet method of the
// parent MockKeyValue instance is invoked.
type KeyValueHGetFunc struct {
	defaultHook func(string, string) Value
	hooks       []func(string, string) Value
	history     []KeyValueHGetFuncCall
	mutex       sync.Mutex
}

// HGet delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) HGet(v0 string, v1 string) Value {
	r0 := m.HGetFunc.nextHook()(v0, v1)
	m.HGetFunc.appendCall(KeyValueHGetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HGet method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueHGetFunc) SetDefaultHook(hook func(string, string) Value) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HGet method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueHGetFunc) PushHook(hook func(string, string) Value) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueHGetFunc) SetDefaultReturn(r0 Value) {
	f.SetDefaultHook(func(string, string) Value {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueHGetFunc) PushReturn(r0 Value) {
	f.PushHook(func(string, string) Value {
		return r0
	})
}

func (f *KeyValueHGetFunc) nextHook() func(string, string) Value {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueHGetFunc) appendCall(r0 KeyValueHGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueHGetFuncCall objects describing the
// invocations of this function.
func (f *KeyValueHGetFunc) History() []KeyValueHGetFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueHGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueHGetFuncCall is an object that describes an invocation of method
// HGet on an instance of MockKeyValue.
type KeyValueHGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Value
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueHGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueHGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueHGetAllFunc describes the behavior when the HGetAll method of the
// parent MockKeyValue instance is invoked.
type KeyValueHGetAllFunc struct {
	defaultHook func(string) Values
	hooks       []func(string) Values
	history     []KeyValueHGetAllFuncCall
	mutex       sync.Mutex
}

// HGetAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) HGetAll(v0 string) Values {
	r0 := m.HGetAllFunc.nextHook()(v0)
	m.HGetAllFunc.appendCall(KeyValueHGetAllFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HGetAll method of
// the parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueHGetAllFunc) SetDefaultHook(hook func(string) Values) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HGetAll method of the parent MockKeyValue instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *KeyValueHGetAllFunc) PushHook(hook func(string) Values) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueHGetAllFunc) SetDefaultReturn(r0 Values) {
	f.SetDefaultHook(func(string) Values {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueHGetAllFunc) PushReturn(r0 Values) {
	f.PushHook(func(string) Values {
		return r0
	})
}

func (f *KeyValueHGetAllFunc) nextHook() func(string) Values {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueHGetAllFunc) appendCall(r0 KeyValueHGetAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueHGetAllFuncCall objects describing
// the invocations of this function.
func (f *KeyValueHGetAllFunc) History() []KeyValueHGetAllFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueHGetAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueHGetAllFuncCall is an object that describes an invocation of
// method HGetAll on an instance of MockKeyValue.
type KeyValueHGetAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Values
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueHGetAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueHGetAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueHSetFunc describes the behavior when the HSet method of the
// parent MockKeyValue instance is invoked.
type KeyValueHSetFunc struct {
	defaultHook func(string, string, interface{}) error
	hooks       []func(string, string, interface{}) error
	history     []KeyValueHSetFuncCall
	mutex       sync.Mutex
}

// HSet delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) HSet(v0 string, v1 string, v2 interface{}) error {
	r0 := m.HSetFunc.nextHook()(v0, v1, v2)
	m.HSetFunc.appendCall(KeyValueHSetFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HSet method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueHSetFunc) SetDefaultHook(hook func(string, string, interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HSet method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueHSetFunc) PushHook(hook func(string, string, interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueHSetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, string, interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueHSetFunc) PushReturn(r0 error) {
	f.PushHook(func(string, string, interface{}) error {
		return r0
	})
}

func (f *KeyValueHSetFunc) nextHook() func(string, string, interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueHSetFunc) appendCall(r0 KeyValueHSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueHSetFuncCall objects describing the
// invocations of this function.
func (f *KeyValueHSetFunc) History() []KeyValueHSetFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueHSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueHSetFuncCall is an object that describes an invocation of method
// HSet on an instance of MockKeyValue.
type KeyValueHSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueHSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueHSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueIncrFunc describes the behavior when the Incr method of the
// parent MockKeyValue instance is invoked.
type KeyValueIncrFunc struct {
	defaultHook func(string) (int, error)
	hooks       []func(string) (int, error)
	history     []KeyValueIncrFuncCall
	mutex       sync.Mutex
}

// Incr delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) Incr(v0 string) (int, error) {
	r0, r1 := m.IncrFunc.nextHook()(v0)
	m.IncrFunc.appendCall(KeyValueIncrFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Incr method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueIncrFunc) SetDefaultHook(hook func(string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Incr method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueIncrFunc) PushHook(hook func(string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueIncrFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueIncrFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(string) (int, error) {
		return r0, r1
	})
}

func (f *KeyValueIncrFunc) nextHook() func(string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueIncrFunc) appendCall(r0 KeyValueIncrFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueIncrFuncCall objects describing the
// invocations of this function.
func (f *KeyValueIncrFunc) History() []KeyValueIncrFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueIncrFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueIncrFuncCall is an object that describes an invocation of method
// Incr on an instance of MockKeyValue.
type KeyValueIncrFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueIncrFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueIncrFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// KeyValueIncrbyFunc describes the behavior when the Incrby method of the
// parent MockKeyValue instance is invoked.
type KeyValueIncrbyFunc struct {
	defaultHook func(string, int) (int, error)
	hooks       []func(string, int) (int, error)
	history     []KeyValueIncrbyFuncCall
	mutex       sync.Mutex
}

// Incrby delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) Incrby(v0 string, v1 int) (int, error) {
	r0, r1 := m.IncrbyFunc.nextHook()(v0, v1)
	m.IncrbyFunc.appendCall(KeyValueIncrbyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Incrby method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueIncrbyFunc) SetDefaultHook(hook func(string, int) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Incrby method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueIncrbyFunc) PushHook(hook func(string, int) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueIncrbyFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(string, int) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueIncrbyFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(string, int) (int, error) {
		return r0, r1
	})
}

func (f *KeyValueIncrbyFunc) nextHook() func(string, int) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueIncrbyFunc) appendCall(r0 KeyValueIncrbyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueIncrbyFuncCall objects describing
// the invocations of this function.
func (f *KeyValueIncrbyFunc) History() []KeyValueIncrbyFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueIncrbyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueIncrbyFuncCall is an object that describes an invocation of
// method Incrby on an instance of MockKeyValue.
type KeyValueIncrbyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueIncrbyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueIncrbyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// KeyValueLLenFunc describes the behavior when the LLen method of the
// parent MockKeyValue instance is invoked.
type KeyValueLLenFunc struct {
	defaultHook func(string) (int, error)
	hooks       []func(string) (int, error)
	history     []KeyValueLLenFuncCall
	mutex       sync.Mutex
}

// LLen delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) LLen(v0 string) (int, error) {
	r0, r1 := m.LLenFunc.nextHook()(v0)
	m.LLenFunc.appendCall(KeyValueLLenFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LLen method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueLLenFunc) SetDefaultHook(hook func(string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LLen method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueLLenFunc) PushHook(hook func(string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueLLenFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueLLenFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(string) (int, error) {
		return r0, r1
	})
}

func (f *KeyValueLLenFunc) nextHook() func(string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueLLenFunc) appendCall(r0 KeyValueLLenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueLLenFuncCall objects describing the
// invocations of this function.
func (f *KeyValueLLenFunc) History() []KeyValueLLenFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueLLenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueLLenFuncCall is an object that describes an invocation of method
// LLen on an instance of MockKeyValue.
type KeyValueLLenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueLLenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueLLenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// KeyValueLPushFunc describes the behavior when the LPush method of the
// parent MockKeyValue instance is invoked.
type KeyValueLPushFunc struct {
	defaultHook func(string, interface{}) error
	hooks       []func(string, interface{}) error
	history     []KeyValueLPushFuncCall
	mutex       sync.Mutex
}

// LPush delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) LPush(v0 string, v1 interface{}) error {
	r0 := m.LPushFunc.nextHook()(v0, v1)
	m.LPushFunc.appendCall(KeyValueLPushFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LPush method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueLPushFunc) SetDefaultHook(hook func(string, interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LPush method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueLPushFunc) PushHook(hook func(string, interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueLPushFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueLPushFunc) PushReturn(r0 error) {
	f.PushHook(func(string, interface{}) error {
		return r0
	})
}

func (f *KeyValueLPushFunc) nextHook() func(string, interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueLPushFunc) appendCall(r0 KeyValueLPushFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueLPushFuncCall objects describing
// the invocations of this function.
func (f *KeyValueLPushFunc) History() []KeyValueLPushFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueLPushFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueLPushFuncCall is an object that describes an invocation of method
// LPush on an instance of MockKeyValue.
type KeyValueLPushFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueLPushFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueLPushFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueLRangeFunc describes the behavior when the LRange method of the
// parent MockKeyValue instance is invoked.
type KeyValueLRangeFunc struct {
	defaultHook func(string, int, int) Values
	hooks       []func(string, int, int) Values
	history     []KeyValueLRangeFuncCall
	mutex       sync.Mutex
}

// LRange delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) LRange(v0 string, v1 int, v2 int) Values {
	r0 := m.LRangeFunc.nextHook()(v0, v1, v2)
	m.LRangeFunc.appendCall(KeyValueLRangeFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LRange method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueLRangeFunc) SetDefaultHook(hook func(string, int, int) Values) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LRange method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueLRangeFunc) PushHook(hook func(string, int, int) Values) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueLRangeFunc) SetDefaultReturn(r0 Values) {
	f.SetDefaultHook(func(string, int, int) Values {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueLRangeFunc) PushReturn(r0 Values) {
	f.PushHook(func(string, int, int) Values {
		return r0
	})
}

func (f *KeyValueLRangeFunc) nextHook() func(string, int, int) Values {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueLRangeFunc) appendCall(r0 KeyValueLRangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueLRangeFuncCall objects describing
// the invocations of this function.
func (f *KeyValueLRangeFunc) History() []KeyValueLRangeFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueLRangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueLRangeFuncCall is an object that describes an invocation of
// method LRange on an instance of MockKeyValue.
type KeyValueLRangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Values
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueLRangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueLRangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueLTrimFunc describes the behavior when the LTrim method of the
// parent MockKeyValue instance is invoked.
type KeyValueLTrimFunc struct {
	defaultHook func(string, int, int) error
	hooks       []func(string, int, int) error
	history     []KeyValueLTrimFuncCall
	mutex       sync.Mutex
}

// LTrim delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) LTrim(v0 string, v1 int, v2 int) error {
	r0 := m.LTrimFunc.nextHook()(v0, v1, v2)
	m.LTrimFunc.appendCall(KeyValueLTrimFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LTrim method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueLTrimFunc) SetDefaultHook(hook func(string, int, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LTrim method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueLTrimFunc) PushHook(hook func(string, int, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueLTrimFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, int, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueLTrimFunc) PushReturn(r0 error) {
	f.PushHook(func(string, int, int) error {
		return r0
	})
}

func (f *KeyValueLTrimFunc) nextHook() func(string, int, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueLTrimFunc) appendCall(r0 KeyValueLTrimFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueLTrimFuncCall objects describing
// the invocations of this function.
func (f *KeyValueLTrimFunc) History() []KeyValueLTrimFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueLTrimFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueLTrimFuncCall is an object that describes an invocation of method
// LTrim on an instance of MockKeyValue.
type KeyValueLTrimFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueLTrimFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueLTrimFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValuePoolFunc describes the behavior when the Pool method of the
// parent MockKeyValue instance is invoked.
type KeyValuePoolFunc struct {
	defaultHook func() (*redis.Pool, bool)
	hooks       []func() (*redis.Pool, bool)
	history     []KeyValuePoolFuncCall
	mutex       sync.Mutex
}

// Pool delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) Pool() (*redis.Pool, bool) {
	r0, r1 := m.PoolFunc.nextHook()()
	m.PoolFunc.appendCall(KeyValuePoolFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Pool method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValuePoolFunc) SetDefaultHook(hook func() (*redis.Pool, bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Pool method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValuePoolFunc) PushHook(hook func() (*redis.Pool, bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValuePoolFunc) SetDefaultReturn(r0 *redis.Pool, r1 bool) {
	f.SetDefaultHook(func() (*redis.Pool, bool) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValuePoolFunc) PushReturn(r0 *redis.Pool, r1 bool) {
	f.PushHook(func() (*redis.Pool, bool) {
		return r0, r1
	})
}

func (f *KeyValuePoolFunc) nextHook() func() (*redis.Pool, bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValuePoolFunc) appendCall(r0 KeyValuePoolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValuePoolFuncCall objects describing the
// invocations of this function.
func (f *KeyValuePoolFunc) History() []KeyValuePoolFuncCall {
	f.mutex.Lock()
	history := make([]KeyValuePoolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValuePoolFuncCall is an object that describes an invocation of method
// Pool on an instance of MockKeyValue.
type KeyValuePoolFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *redis.Pool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValuePoolFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValuePoolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// KeyValueSetFunc describes the behavior when the Set method of the parent
// MockKeyValue instance is invoked.
type KeyValueSetFunc struct {
	defaultHook func(string, interface{}) error
	hooks       []func(string, interface{}) error
	history     []KeyValueSetFuncCall
	mutex       sync.Mutex
}

// Set delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) Set(v0 string, v1 interface{}) error {
	r0 := m.SetFunc.nextHook()(v0, v1)
	m.SetFunc.appendCall(KeyValueSetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Set method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueSetFunc) SetDefaultHook(hook func(string, interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Set method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueSetFunc) PushHook(hook func(string, interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueSetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueSetFunc) PushReturn(r0 error) {
	f.PushHook(func(string, interface{}) error {
		return r0
	})
}

func (f *KeyValueSetFunc) nextHook() func(string, interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueSetFunc) appendCall(r0 KeyValueSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueSetFuncCall objects describing the
// invocations of this function.
func (f *KeyValueSetFunc) History() []KeyValueSetFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueSetFuncCall is an object that describes an invocation of method
// Set on an instance of MockKeyValue.
type KeyValueSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueSetExFunc describes the behavior when the SetEx method of the
// parent MockKeyValue instance is invoked.
type KeyValueSetExFunc struct {
	defaultHook func(string, int, interface{}) error
	hooks       []func(string, int, interface{}) error
	history     []KeyValueSetExFuncCall
	mutex       sync.Mutex
}

// SetEx delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) SetEx(v0 string, v1 int, v2 interface{}) error {
	r0 := m.SetExFunc.nextHook()(v0, v1, v2)
	m.SetExFunc.appendCall(KeyValueSetExFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetEx method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueSetExFunc) SetDefaultHook(hook func(string, int, interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetEx method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueSetExFunc) PushHook(hook func(string, int, interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueSetExFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, int, interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueSetExFunc) PushReturn(r0 error) {
	f.PushHook(func(string, int, interface{}) error {
		return r0
	})
}

func (f *KeyValueSetExFunc) nextHook() func(string, int, interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueSetExFunc) appendCall(r0 KeyValueSetExFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueSetExFuncCall objects describing
// the invocations of this function.
func (f *KeyValueSetExFunc) History() []KeyValueSetExFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueSetExFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueSetExFuncCall is an object that describes an invocation of method
// SetEx on an instance of MockKeyValue.
type KeyValueSetExFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueSetExFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueSetExFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// KeyValueSetNxFunc describes the behavior when the SetNx method of the
// parent MockKeyValue instance is invoked.
type KeyValueSetNxFunc struct {
	defaultHook func(string, interface{}) (bool, error)
	hooks       []func(string, interface{}) (bool, error)
	history     []KeyValueSetNxFuncCall
	mutex       sync.Mutex
}

// SetNx delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) SetNx(v0 string, v1 interface{}) (bool, error) {
	r0, r1 := m.SetNxFunc.nextHook()(v0, v1)
	m.SetNxFunc.appendCall(KeyValueSetNxFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetNx method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueSetNxFunc) SetDefaultHook(hook func(string, interface{}) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetNx method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueSetNxFunc) PushHook(hook func(string, interface{}) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueSetNxFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(string, interface{}) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueSetNxFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(string, interface{}) (bool, error) {
		return r0, r1
	})
}

func (f *KeyValueSetNxFunc) nextHook() func(string, interface{}) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueSetNxFunc) appendCall(r0 KeyValueSetNxFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueSetNxFuncCall objects describing
// the invocations of this function.
func (f *KeyValueSetNxFunc) History() []KeyValueSetNxFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueSetNxFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueSetNxFuncCall is an object that describes an invocation of method
// SetNx on an instance of MockKeyValue.
type KeyValueSetNxFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueSetNxFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueSetNxFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// KeyValueTTLFunc describes the behavior when the TTL method of the parent
// MockKeyValue instance is invoked.
type KeyValueTTLFunc struct {
	defaultHook func(string) (int, error)
	hooks       []func(string) (int, error)
	history     []KeyValueTTLFuncCall
	mutex       sync.Mutex
}

// TTL delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockKeyValue) TTL(v0 string) (int, error) {
	r0, r1 := m.TTLFunc.nextHook()(v0)
	m.TTLFunc.appendCall(KeyValueTTLFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TTL method of the
// parent MockKeyValue instance is invoked and the hook queue is empty.
func (f *KeyValueTTLFunc) SetDefaultHook(hook func(string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TTL method of the parent MockKeyValue instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *KeyValueTTLFunc) PushHook(hook func(string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueTTLFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueTTLFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(string) (int, error) {
		return r0, r1
	})
}

func (f *KeyValueTTLFunc) nextHook() func(string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueTTLFunc) appendCall(r0 KeyValueTTLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueTTLFuncCall objects describing the
// invocations of this function.
func (f *KeyValueTTLFunc) History() []KeyValueTTLFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueTTLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueTTLFuncCall is an object that describes an invocation of method
// TTL on an instance of MockKeyValue.
type KeyValueTTLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueTTLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueTTLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// KeyValueWithContextFunc describes the behavior when the WithContext
// method of the parent MockKeyValue instance is invoked.
type KeyValueWithContextFunc struct {
	defaultHook func(context.Context) KeyValue
	hooks       []func(context.Context) KeyValue
	history     []KeyValueWithContextFuncCall
	mutex       sync.Mutex
}

// WithContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockKeyValue) WithContext(v0 context.Context) KeyValue {
	r0 := m.WithContextFunc.nextHook()(v0)
	m.WithContextFunc.appendCall(KeyValueWithContextFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithContext method
// of the parent MockKeyValue instance is invoked and the hook queue is
// empty.
func (f *KeyValueWithContextFunc) SetDefaultHook(hook func(context.Context) KeyValue) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithContext method of the parent MockKeyValue instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *KeyValueWithContextFunc) PushHook(hook func(context.Context) KeyValue) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *KeyValueWithContextFunc) SetDefaultReturn(r0 KeyValue) {
	f.SetDefaultHook(func(context.Context) KeyValue {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *KeyValueWithContextFunc) PushReturn(r0 KeyValue) {
	f.PushHook(func(context.Context) KeyValue {
		return r0
	})
}

func (f *KeyValueWithContextFunc) nextHook() func(context.Context) KeyValue {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *KeyValueWithContextFunc) appendCall(r0 KeyValueWithContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of KeyValueWithContextFuncCall objects
// describing the invocations of this function.
func (f *KeyValueWithContextFunc) History() []KeyValueWithContextFuncCall {
	f.mutex.Lock()
	history := make([]KeyValueWithContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// KeyValueWithContextFuncCall is an object that describes an invocation of
// method WithContext on an instance of MockKeyValue.
type KeyValueWithContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 KeyValue
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c KeyValueWithContextFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c KeyValueWithContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
