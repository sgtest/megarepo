// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package sources

import (
	"context"
	"io"
	"io/fs"
	"net/url"
	"sync"
	"time"

	diff "github.com/sourcegraph/go-diff/diff"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	store "github.com/sourcegraph/sourcegraph/internal/batches/store"
	types1 "github.com/sourcegraph/sourcegraph/internal/batches/types"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	auth "github.com/sourcegraph/sourcegraph/internal/extsvc/auth"
	azuredevops "github.com/sourcegraph/sourcegraph/internal/extsvc/azuredevops"
	bitbucketcloud "github.com/sourcegraph/sourcegraph/internal/extsvc/bitbucketcloud"
	gerrit "github.com/sourcegraph/sourcegraph/internal/extsvc/gerrit"
	store1 "github.com/sourcegraph/sourcegraph/internal/github_apps/store"
	gitserver "github.com/sourcegraph/sourcegraph/internal/gitserver"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
	protocol "github.com/sourcegraph/sourcegraph/internal/gitserver/protocol"
	perforce "github.com/sourcegraph/sourcegraph/internal/perforce"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockChangesetSource is a mock implementation of the ChangesetSource
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/batches/sources) used for
// unit testing.
type MockChangesetSource struct {
	// BuildCommitOptsFunc is an instance of a mock function object
	// controlling the behavior of the method BuildCommitOpts.
	BuildCommitOptsFunc *ChangesetSourceBuildCommitOptsFunc
	// CloseChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CloseChangeset.
	CloseChangesetFunc *ChangesetSourceCloseChangesetFunc
	// CreateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CreateChangeset.
	CreateChangesetFunc *ChangesetSourceCreateChangesetFunc
	// CreateCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreateComment.
	CreateCommentFunc *ChangesetSourceCreateCommentFunc
	// GitserverPushConfigFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverPushConfig.
	GitserverPushConfigFunc *ChangesetSourceGitserverPushConfigFunc
	// LoadChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method LoadChangeset.
	LoadChangesetFunc *ChangesetSourceLoadChangesetFunc
	// MergeChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method MergeChangeset.
	MergeChangesetFunc *ChangesetSourceMergeChangesetFunc
	// ReopenChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method ReopenChangeset.
	ReopenChangesetFunc *ChangesetSourceReopenChangesetFunc
	// UpdateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateChangeset.
	UpdateChangesetFunc *ChangesetSourceUpdateChangesetFunc
	// ValidateAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method ValidateAuthenticator.
	ValidateAuthenticatorFunc *ChangesetSourceValidateAuthenticatorFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *ChangesetSourceWithAuthenticatorFunc
}

// NewMockChangesetSource creates a new mock of the ChangesetSource
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockChangesetSource() *MockChangesetSource {
	return &MockChangesetSource{
		BuildCommitOptsFunc: &ChangesetSourceBuildCommitOptsFunc{
			defaultHook: func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) (r0 protocol.CreateCommitFromPatchRequest) {
				return
			},
		},
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 bool, r1 error) {
				return
			},
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) (r0 error) {
				return
			},
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(*types.Repo) (r0 *protocol.PushConfig, r1 error) {
				return
			},
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) (r0 error) {
				return
			},
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 ChangesetSource, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockChangesetSource creates a new mock of the ChangesetSource
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockChangesetSource() *MockChangesetSource {
	return &MockChangesetSource{
		BuildCommitOptsFunc: &ChangesetSourceBuildCommitOptsFunc{
			defaultHook: func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
				panic("unexpected invocation of MockChangesetSource.BuildCommitOpts")
			},
		},
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.CloseChangeset")
			},
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (bool, error) {
				panic("unexpected invocation of MockChangesetSource.CreateChangeset")
			},
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) error {
				panic("unexpected invocation of MockChangesetSource.CreateComment")
			},
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(*types.Repo) (*protocol.PushConfig, error) {
				panic("unexpected invocation of MockChangesetSource.GitserverPushConfig")
			},
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.LoadChangeset")
			},
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) error {
				panic("unexpected invocation of MockChangesetSource.MergeChangeset")
			},
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.ReopenChangeset")
			},
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.UpdateChangeset")
			},
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockChangesetSource.ValidateAuthenticator")
			},
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (ChangesetSource, error) {
				panic("unexpected invocation of MockChangesetSource.WithAuthenticator")
			},
		},
	}
}

// NewMockChangesetSourceFrom creates a new mock of the MockChangesetSource
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockChangesetSourceFrom(i ChangesetSource) *MockChangesetSource {
	return &MockChangesetSource{
		BuildCommitOptsFunc: &ChangesetSourceBuildCommitOptsFunc{
			defaultHook: i.BuildCommitOpts,
		},
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: i.CloseChangeset,
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: i.CreateChangeset,
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: i.CreateComment,
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: i.GitserverPushConfig,
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: i.LoadChangeset,
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: i.MergeChangeset,
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: i.ReopenChangeset,
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: i.UpdateChangeset,
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: i.ValidateAuthenticator,
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// ChangesetSourceBuildCommitOptsFunc describes the behavior when the
// BuildCommitOpts method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceBuildCommitOptsFunc struct {
	defaultHook func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest
	hooks       []func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest
	history     []ChangesetSourceBuildCommitOptsFuncCall
	mutex       sync.Mutex
}

// BuildCommitOpts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) BuildCommitOpts(v0 *types.Repo, v1 *types1.Changeset, v2 *types1.ChangesetSpec, v3 *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
	r0 := m.BuildCommitOptsFunc.nextHook()(v0, v1, v2, v3)
	m.BuildCommitOptsFunc.appendCall(ChangesetSourceBuildCommitOptsFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BuildCommitOpts
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceBuildCommitOptsFunc) SetDefaultHook(hook func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BuildCommitOpts method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceBuildCommitOptsFunc) PushHook(hook func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceBuildCommitOptsFunc) SetDefaultReturn(r0 protocol.CreateCommitFromPatchRequest) {
	f.SetDefaultHook(func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceBuildCommitOptsFunc) PushReturn(r0 protocol.CreateCommitFromPatchRequest) {
	f.PushHook(func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
		return r0
	})
}

func (f *ChangesetSourceBuildCommitOptsFunc) nextHook() func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceBuildCommitOptsFunc) appendCall(r0 ChangesetSourceBuildCommitOptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceBuildCommitOptsFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceBuildCommitOptsFunc) History() []ChangesetSourceBuildCommitOptsFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceBuildCommitOptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceBuildCommitOptsFuncCall is an object that describes an
// invocation of method BuildCommitOpts on an instance of
// MockChangesetSource.
type ChangesetSourceBuildCommitOptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *types.Repo
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types1.Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types1.ChangesetSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *protocol.PushConfig
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 protocol.CreateCommitFromPatchRequest
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceBuildCommitOptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceBuildCommitOptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceCloseChangesetFunc describes the behavior when the
// CloseChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCloseChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceCloseChangesetFuncCall
	mutex       sync.Mutex
}

// CloseChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) CloseChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.CloseChangesetFunc.nextHook()(v0, v1)
	m.CloseChangesetFunc.appendCall(ChangesetSourceCloseChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceCloseChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCloseChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCloseChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCloseChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceCloseChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCloseChangesetFunc) appendCall(r0 ChangesetSourceCloseChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCloseChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCloseChangesetFunc) History() []ChangesetSourceCloseChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCloseChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCloseChangesetFuncCall is an object that describes an
// invocation of method CloseChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceCloseChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCloseChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCloseChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceCreateChangesetFunc describes the behavior when the
// CreateChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCreateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) (bool, error)
	hooks       []func(context.Context, *Changeset) (bool, error)
	history     []ChangesetSourceCreateChangesetFuncCall
	mutex       sync.Mutex
}

// CreateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) CreateChangeset(v0 context.Context, v1 *Changeset) (bool, error) {
	r0, r1 := m.CreateChangesetFunc.nextHook()(v0, v1)
	m.CreateChangesetFunc.appendCall(ChangesetSourceCreateChangesetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceCreateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCreateChangesetFunc) PushHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCreateChangesetFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCreateChangesetFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceCreateChangesetFunc) nextHook() func(context.Context, *Changeset) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCreateChangesetFunc) appendCall(r0 ChangesetSourceCreateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCreateChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCreateChangesetFunc) History() []ChangesetSourceCreateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCreateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCreateChangesetFuncCall is an object that describes an
// invocation of method CreateChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceCreateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCreateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCreateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ChangesetSourceCreateCommentFunc describes the behavior when the
// CreateComment method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCreateCommentFunc struct {
	defaultHook func(context.Context, *Changeset, string) error
	hooks       []func(context.Context, *Changeset, string) error
	history     []ChangesetSourceCreateCommentFuncCall
	mutex       sync.Mutex
}

// CreateComment delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockChangesetSource) CreateComment(v0 context.Context, v1 *Changeset, v2 string) error {
	r0 := m.CreateCommentFunc.nextHook()(v0, v1, v2)
	m.CreateCommentFunc.appendCall(ChangesetSourceCreateCommentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateComment method
// of the parent MockChangesetSource instance is invoked and the hook queue
// is empty.
func (f *ChangesetSourceCreateCommentFunc) SetDefaultHook(hook func(context.Context, *Changeset, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateComment method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCreateCommentFunc) PushHook(hook func(context.Context, *Changeset, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCreateCommentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCreateCommentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

func (f *ChangesetSourceCreateCommentFunc) nextHook() func(context.Context, *Changeset, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCreateCommentFunc) appendCall(r0 ChangesetSourceCreateCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCreateCommentFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCreateCommentFunc) History() []ChangesetSourceCreateCommentFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCreateCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCreateCommentFuncCall is an object that describes an
// invocation of method CreateComment on an instance of MockChangesetSource.
type ChangesetSourceCreateCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCreateCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCreateCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceGitserverPushConfigFunc describes the behavior when the
// GitserverPushConfig method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceGitserverPushConfigFunc struct {
	defaultHook func(*types.Repo) (*protocol.PushConfig, error)
	hooks       []func(*types.Repo) (*protocol.PushConfig, error)
	history     []ChangesetSourceGitserverPushConfigFuncCall
	mutex       sync.Mutex
}

// GitserverPushConfig delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) GitserverPushConfig(v0 *types.Repo) (*protocol.PushConfig, error) {
	r0, r1 := m.GitserverPushConfigFunc.nextHook()(v0)
	m.GitserverPushConfigFunc.appendCall(ChangesetSourceGitserverPushConfigFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GitserverPushConfig
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceGitserverPushConfigFunc) SetDefaultHook(hook func(*types.Repo) (*protocol.PushConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverPushConfig method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceGitserverPushConfigFunc) PushHook(hook func(*types.Repo) (*protocol.PushConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceGitserverPushConfigFunc) SetDefaultReturn(r0 *protocol.PushConfig, r1 error) {
	f.SetDefaultHook(func(*types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceGitserverPushConfigFunc) PushReturn(r0 *protocol.PushConfig, r1 error) {
	f.PushHook(func(*types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceGitserverPushConfigFunc) nextHook() func(*types.Repo) (*protocol.PushConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceGitserverPushConfigFunc) appendCall(r0 ChangesetSourceGitserverPushConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceGitserverPushConfigFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceGitserverPushConfigFunc) History() []ChangesetSourceGitserverPushConfigFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceGitserverPushConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceGitserverPushConfigFuncCall is an object that describes an
// invocation of method GitserverPushConfig on an instance of
// MockChangesetSource.
type ChangesetSourceGitserverPushConfigFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.PushConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceGitserverPushConfigFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceGitserverPushConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ChangesetSourceLoadChangesetFunc describes the behavior when the
// LoadChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceLoadChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceLoadChangesetFuncCall
	mutex       sync.Mutex
}

// LoadChangeset delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockChangesetSource) LoadChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.LoadChangesetFunc.nextHook()(v0, v1)
	m.LoadChangesetFunc.appendCall(ChangesetSourceLoadChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadChangeset method
// of the parent MockChangesetSource instance is invoked and the hook queue
// is empty.
func (f *ChangesetSourceLoadChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceLoadChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceLoadChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceLoadChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceLoadChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceLoadChangesetFunc) appendCall(r0 ChangesetSourceLoadChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceLoadChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceLoadChangesetFunc) History() []ChangesetSourceLoadChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceLoadChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceLoadChangesetFuncCall is an object that describes an
// invocation of method LoadChangeset on an instance of MockChangesetSource.
type ChangesetSourceLoadChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceLoadChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceLoadChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceMergeChangesetFunc describes the behavior when the
// MergeChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceMergeChangesetFunc struct {
	defaultHook func(context.Context, *Changeset, bool) error
	hooks       []func(context.Context, *Changeset, bool) error
	history     []ChangesetSourceMergeChangesetFuncCall
	mutex       sync.Mutex
}

// MergeChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) MergeChangeset(v0 context.Context, v1 *Changeset, v2 bool) error {
	r0 := m.MergeChangesetFunc.nextHook()(v0, v1, v2)
	m.MergeChangesetFunc.appendCall(ChangesetSourceMergeChangesetFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MergeChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceMergeChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceMergeChangesetFunc) PushHook(hook func(context.Context, *Changeset, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceMergeChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceMergeChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

func (f *ChangesetSourceMergeChangesetFunc) nextHook() func(context.Context, *Changeset, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceMergeChangesetFunc) appendCall(r0 ChangesetSourceMergeChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceMergeChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceMergeChangesetFunc) History() []ChangesetSourceMergeChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceMergeChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceMergeChangesetFuncCall is an object that describes an
// invocation of method MergeChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceMergeChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceMergeChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceMergeChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceReopenChangesetFunc describes the behavior when the
// ReopenChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceReopenChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceReopenChangesetFuncCall
	mutex       sync.Mutex
}

// ReopenChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) ReopenChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.ReopenChangesetFunc.nextHook()(v0, v1)
	m.ReopenChangesetFunc.appendCall(ChangesetSourceReopenChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReopenChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceReopenChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReopenChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceReopenChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceReopenChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceReopenChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceReopenChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceReopenChangesetFunc) appendCall(r0 ChangesetSourceReopenChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceReopenChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceReopenChangesetFunc) History() []ChangesetSourceReopenChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceReopenChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceReopenChangesetFuncCall is an object that describes an
// invocation of method ReopenChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceReopenChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceReopenChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceReopenChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceUpdateChangesetFunc describes the behavior when the
// UpdateChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceUpdateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceUpdateChangesetFuncCall
	mutex       sync.Mutex
}

// UpdateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) UpdateChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.UpdateChangesetFunc.nextHook()(v0, v1)
	m.UpdateChangesetFunc.appendCall(ChangesetSourceUpdateChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceUpdateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceUpdateChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceUpdateChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceUpdateChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceUpdateChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceUpdateChangesetFunc) appendCall(r0 ChangesetSourceUpdateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceUpdateChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceUpdateChangesetFunc) History() []ChangesetSourceUpdateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceUpdateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceUpdateChangesetFuncCall is an object that describes an
// invocation of method UpdateChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceUpdateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceUpdateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceUpdateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceValidateAuthenticatorFunc describes the behavior when the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// is invoked.
type ChangesetSourceValidateAuthenticatorFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ChangesetSourceValidateAuthenticatorFuncCall
	mutex       sync.Mutex
}

// ValidateAuthenticator delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockChangesetSource) ValidateAuthenticator(v0 context.Context) error {
	r0 := m.ValidateAuthenticatorFunc.nextHook()(v0)
	m.ValidateAuthenticatorFunc.appendCall(ChangesetSourceValidateAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// is invoked and the hook queue is empty.
func (f *ChangesetSourceValidateAuthenticatorFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceValidateAuthenticatorFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceValidateAuthenticatorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceValidateAuthenticatorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ChangesetSourceValidateAuthenticatorFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceValidateAuthenticatorFunc) appendCall(r0 ChangesetSourceValidateAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ChangesetSourceValidateAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *ChangesetSourceValidateAuthenticatorFunc) History() []ChangesetSourceValidateAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceValidateAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceValidateAuthenticatorFuncCall is an object that describes
// an invocation of method ValidateAuthenticator on an instance of
// MockChangesetSource.
type ChangesetSourceValidateAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceValidateAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceValidateAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceWithAuthenticatorFunc describes the behavior when the
// WithAuthenticator method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) (ChangesetSource, error)
	hooks       []func(auth.Authenticator) (ChangesetSource, error)
	history     []ChangesetSourceWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) WithAuthenticator(v0 auth.Authenticator) (ChangesetSource, error) {
	r0, r1 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(ChangesetSourceWithAuthenticatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceWithAuthenticatorFunc) SetDefaultReturn(r0 ChangesetSource, r1 error) {
	f.SetDefaultHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceWithAuthenticatorFunc) PushReturn(r0 ChangesetSource, r1 error) {
	f.PushHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceWithAuthenticatorFunc) nextHook() func(auth.Authenticator) (ChangesetSource, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceWithAuthenticatorFunc) appendCall(r0 ChangesetSourceWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceWithAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceWithAuthenticatorFunc) History() []ChangesetSourceWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceWithAuthenticatorFuncCall is an object that describes an
// invocation of method WithAuthenticator on an instance of
// MockChangesetSource.
type ChangesetSourceWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ChangesetSource
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockForkableChangesetSource is a mock implementation of the
// ForkableChangesetSource interface (from the package
// github.com/sourcegraph/sourcegraph/internal/batches/sources) used for
// unit testing.
type MockForkableChangesetSource struct {
	// BuildCommitOptsFunc is an instance of a mock function object
	// controlling the behavior of the method BuildCommitOpts.
	BuildCommitOptsFunc *ForkableChangesetSourceBuildCommitOptsFunc
	// CloseChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CloseChangeset.
	CloseChangesetFunc *ForkableChangesetSourceCloseChangesetFunc
	// CreateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CreateChangeset.
	CreateChangesetFunc *ForkableChangesetSourceCreateChangesetFunc
	// CreateCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreateComment.
	CreateCommentFunc *ForkableChangesetSourceCreateCommentFunc
	// GetForkFunc is an instance of a mock function object controlling the
	// behavior of the method GetFork.
	GetForkFunc *ForkableChangesetSourceGetForkFunc
	// GitserverPushConfigFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverPushConfig.
	GitserverPushConfigFunc *ForkableChangesetSourceGitserverPushConfigFunc
	// LoadChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method LoadChangeset.
	LoadChangesetFunc *ForkableChangesetSourceLoadChangesetFunc
	// MergeChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method MergeChangeset.
	MergeChangesetFunc *ForkableChangesetSourceMergeChangesetFunc
	// ReopenChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method ReopenChangeset.
	ReopenChangesetFunc *ForkableChangesetSourceReopenChangesetFunc
	// UpdateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateChangeset.
	UpdateChangesetFunc *ForkableChangesetSourceUpdateChangesetFunc
	// ValidateAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method ValidateAuthenticator.
	ValidateAuthenticatorFunc *ForkableChangesetSourceValidateAuthenticatorFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *ForkableChangesetSourceWithAuthenticatorFunc
}

// NewMockForkableChangesetSource creates a new mock of the
// ForkableChangesetSource interface. All methods return zero values for all
// results, unless overwritten.
func NewMockForkableChangesetSource() *MockForkableChangesetSource {
	return &MockForkableChangesetSource{
		BuildCommitOptsFunc: &ForkableChangesetSourceBuildCommitOptsFunc{
			defaultHook: func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) (r0 protocol.CreateCommitFromPatchRequest) {
				return
			},
		},
		CloseChangesetFunc: &ForkableChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		CreateChangesetFunc: &ForkableChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 bool, r1 error) {
				return
			},
		},
		CreateCommentFunc: &ForkableChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) (r0 error) {
				return
			},
		},
		GetForkFunc: &ForkableChangesetSourceGetForkFunc{
			defaultHook: func(context.Context, *types.Repo, *string, *string) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GitserverPushConfigFunc: &ForkableChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(*types.Repo) (r0 *protocol.PushConfig, r1 error) {
				return
			},
		},
		LoadChangesetFunc: &ForkableChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		MergeChangesetFunc: &ForkableChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) (r0 error) {
				return
			},
		},
		ReopenChangesetFunc: &ForkableChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		UpdateChangesetFunc: &ForkableChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		ValidateAuthenticatorFunc: &ForkableChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		WithAuthenticatorFunc: &ForkableChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 ChangesetSource, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockForkableChangesetSource creates a new mock of the
// ForkableChangesetSource interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockForkableChangesetSource() *MockForkableChangesetSource {
	return &MockForkableChangesetSource{
		BuildCommitOptsFunc: &ForkableChangesetSourceBuildCommitOptsFunc{
			defaultHook: func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
				panic("unexpected invocation of MockForkableChangesetSource.BuildCommitOpts")
			},
		},
		CloseChangesetFunc: &ForkableChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.CloseChangeset")
			},
		},
		CreateChangesetFunc: &ForkableChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (bool, error) {
				panic("unexpected invocation of MockForkableChangesetSource.CreateChangeset")
			},
		},
		CreateCommentFunc: &ForkableChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) error {
				panic("unexpected invocation of MockForkableChangesetSource.CreateComment")
			},
		},
		GetForkFunc: &ForkableChangesetSourceGetForkFunc{
			defaultHook: func(context.Context, *types.Repo, *string, *string) (*types.Repo, error) {
				panic("unexpected invocation of MockForkableChangesetSource.GetFork")
			},
		},
		GitserverPushConfigFunc: &ForkableChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(*types.Repo) (*protocol.PushConfig, error) {
				panic("unexpected invocation of MockForkableChangesetSource.GitserverPushConfig")
			},
		},
		LoadChangesetFunc: &ForkableChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.LoadChangeset")
			},
		},
		MergeChangesetFunc: &ForkableChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) error {
				panic("unexpected invocation of MockForkableChangesetSource.MergeChangeset")
			},
		},
		ReopenChangesetFunc: &ForkableChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.ReopenChangeset")
			},
		},
		UpdateChangesetFunc: &ForkableChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.UpdateChangeset")
			},
		},
		ValidateAuthenticatorFunc: &ForkableChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockForkableChangesetSource.ValidateAuthenticator")
			},
		},
		WithAuthenticatorFunc: &ForkableChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (ChangesetSource, error) {
				panic("unexpected invocation of MockForkableChangesetSource.WithAuthenticator")
			},
		},
	}
}

// NewMockForkableChangesetSourceFrom creates a new mock of the
// MockForkableChangesetSource interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockForkableChangesetSourceFrom(i ForkableChangesetSource) *MockForkableChangesetSource {
	return &MockForkableChangesetSource{
		BuildCommitOptsFunc: &ForkableChangesetSourceBuildCommitOptsFunc{
			defaultHook: i.BuildCommitOpts,
		},
		CloseChangesetFunc: &ForkableChangesetSourceCloseChangesetFunc{
			defaultHook: i.CloseChangeset,
		},
		CreateChangesetFunc: &ForkableChangesetSourceCreateChangesetFunc{
			defaultHook: i.CreateChangeset,
		},
		CreateCommentFunc: &ForkableChangesetSourceCreateCommentFunc{
			defaultHook: i.CreateComment,
		},
		GetForkFunc: &ForkableChangesetSourceGetForkFunc{
			defaultHook: i.GetFork,
		},
		GitserverPushConfigFunc: &ForkableChangesetSourceGitserverPushConfigFunc{
			defaultHook: i.GitserverPushConfig,
		},
		LoadChangesetFunc: &ForkableChangesetSourceLoadChangesetFunc{
			defaultHook: i.LoadChangeset,
		},
		MergeChangesetFunc: &ForkableChangesetSourceMergeChangesetFunc{
			defaultHook: i.MergeChangeset,
		},
		ReopenChangesetFunc: &ForkableChangesetSourceReopenChangesetFunc{
			defaultHook: i.ReopenChangeset,
		},
		UpdateChangesetFunc: &ForkableChangesetSourceUpdateChangesetFunc{
			defaultHook: i.UpdateChangeset,
		},
		ValidateAuthenticatorFunc: &ForkableChangesetSourceValidateAuthenticatorFunc{
			defaultHook: i.ValidateAuthenticator,
		},
		WithAuthenticatorFunc: &ForkableChangesetSourceWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// ForkableChangesetSourceBuildCommitOptsFunc describes the behavior when
// the BuildCommitOpts method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceBuildCommitOptsFunc struct {
	defaultHook func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest
	hooks       []func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest
	history     []ForkableChangesetSourceBuildCommitOptsFuncCall
	mutex       sync.Mutex
}

// BuildCommitOpts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) BuildCommitOpts(v0 *types.Repo, v1 *types1.Changeset, v2 *types1.ChangesetSpec, v3 *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
	r0 := m.BuildCommitOptsFunc.nextHook()(v0, v1, v2, v3)
	m.BuildCommitOptsFunc.appendCall(ForkableChangesetSourceBuildCommitOptsFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BuildCommitOpts
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceBuildCommitOptsFunc) SetDefaultHook(hook func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BuildCommitOpts method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceBuildCommitOptsFunc) PushHook(hook func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceBuildCommitOptsFunc) SetDefaultReturn(r0 protocol.CreateCommitFromPatchRequest) {
	f.SetDefaultHook(func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceBuildCommitOptsFunc) PushReturn(r0 protocol.CreateCommitFromPatchRequest) {
	f.PushHook(func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
		return r0
	})
}

func (f *ForkableChangesetSourceBuildCommitOptsFunc) nextHook() func(*types.Repo, *types1.Changeset, *types1.ChangesetSpec, *protocol.PushConfig) protocol.CreateCommitFromPatchRequest {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceBuildCommitOptsFunc) appendCall(r0 ForkableChangesetSourceBuildCommitOptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceBuildCommitOptsFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceBuildCommitOptsFunc) History() []ForkableChangesetSourceBuildCommitOptsFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceBuildCommitOptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceBuildCommitOptsFuncCall is an object that
// describes an invocation of method BuildCommitOpts on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceBuildCommitOptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *types.Repo
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types1.Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types1.ChangesetSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *protocol.PushConfig
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 protocol.CreateCommitFromPatchRequest
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceBuildCommitOptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceBuildCommitOptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceCloseChangesetFunc describes the behavior when the
// CloseChangeset method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceCloseChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ForkableChangesetSourceCloseChangesetFuncCall
	mutex       sync.Mutex
}

// CloseChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) CloseChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.CloseChangesetFunc.nextHook()(v0, v1)
	m.CloseChangesetFunc.appendCall(ForkableChangesetSourceCloseChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceCloseChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceCloseChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceCloseChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceCloseChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceCloseChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceCloseChangesetFunc) appendCall(r0 ForkableChangesetSourceCloseChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceCloseChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceCloseChangesetFunc) History() []ForkableChangesetSourceCloseChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceCloseChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceCloseChangesetFuncCall is an object that describes
// an invocation of method CloseChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceCloseChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceCloseChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceCloseChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceCreateChangesetFunc describes the behavior when
// the CreateChangeset method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceCreateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) (bool, error)
	hooks       []func(context.Context, *Changeset) (bool, error)
	history     []ForkableChangesetSourceCreateChangesetFuncCall
	mutex       sync.Mutex
}

// CreateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) CreateChangeset(v0 context.Context, v1 *Changeset) (bool, error) {
	r0, r1 := m.CreateChangesetFunc.nextHook()(v0, v1)
	m.CreateChangesetFunc.appendCall(ForkableChangesetSourceCreateChangesetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceCreateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceCreateChangesetFunc) PushHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceCreateChangesetFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceCreateChangesetFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceCreateChangesetFunc) nextHook() func(context.Context, *Changeset) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceCreateChangesetFunc) appendCall(r0 ForkableChangesetSourceCreateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceCreateChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceCreateChangesetFunc) History() []ForkableChangesetSourceCreateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceCreateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceCreateChangesetFuncCall is an object that
// describes an invocation of method CreateChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceCreateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceCreateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceCreateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceCreateCommentFunc describes the behavior when the
// CreateComment method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceCreateCommentFunc struct {
	defaultHook func(context.Context, *Changeset, string) error
	hooks       []func(context.Context, *Changeset, string) error
	history     []ForkableChangesetSourceCreateCommentFuncCall
	mutex       sync.Mutex
}

// CreateComment delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) CreateComment(v0 context.Context, v1 *Changeset, v2 string) error {
	r0 := m.CreateCommentFunc.nextHook()(v0, v1, v2)
	m.CreateCommentFunc.appendCall(ForkableChangesetSourceCreateCommentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateComment method
// of the parent MockForkableChangesetSource instance is invoked and the
// hook queue is empty.
func (f *ForkableChangesetSourceCreateCommentFunc) SetDefaultHook(hook func(context.Context, *Changeset, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateComment method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceCreateCommentFunc) PushHook(hook func(context.Context, *Changeset, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceCreateCommentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceCreateCommentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

func (f *ForkableChangesetSourceCreateCommentFunc) nextHook() func(context.Context, *Changeset, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceCreateCommentFunc) appendCall(r0 ForkableChangesetSourceCreateCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceCreateCommentFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceCreateCommentFunc) History() []ForkableChangesetSourceCreateCommentFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceCreateCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceCreateCommentFuncCall is an object that describes
// an invocation of method CreateComment on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceCreateCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceCreateCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceCreateCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceGetForkFunc describes the behavior when the
// GetFork method of the parent MockForkableChangesetSource instance is
// invoked.
type ForkableChangesetSourceGetForkFunc struct {
	defaultHook func(context.Context, *types.Repo, *string, *string) (*types.Repo, error)
	hooks       []func(context.Context, *types.Repo, *string, *string) (*types.Repo, error)
	history     []ForkableChangesetSourceGetForkFuncCall
	mutex       sync.Mutex
}

// GetFork delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockForkableChangesetSource) GetFork(v0 context.Context, v1 *types.Repo, v2 *string, v3 *string) (*types.Repo, error) {
	r0, r1 := m.GetForkFunc.nextHook()(v0, v1, v2, v3)
	m.GetForkFunc.appendCall(ForkableChangesetSourceGetForkFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFork method of
// the parent MockForkableChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ForkableChangesetSourceGetForkFunc) SetDefaultHook(hook func(context.Context, *types.Repo, *string, *string) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFork method of the parent MockForkableChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ForkableChangesetSourceGetForkFunc) PushHook(hook func(context.Context, *types.Repo, *string, *string) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceGetForkFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Repo, *string, *string) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceGetForkFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, *types.Repo, *string, *string) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceGetForkFunc) nextHook() func(context.Context, *types.Repo, *string, *string) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceGetForkFunc) appendCall(r0 ForkableChangesetSourceGetForkFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ForkableChangesetSourceGetForkFuncCall
// objects describing the invocations of this function.
func (f *ForkableChangesetSourceGetForkFunc) History() []ForkableChangesetSourceGetForkFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceGetForkFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceGetForkFuncCall is an object that describes an
// invocation of method GetFork on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceGetForkFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceGetForkFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceGetForkFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceGitserverPushConfigFunc describes the behavior
// when the GitserverPushConfig method of the parent
// MockForkableChangesetSource instance is invoked.
type ForkableChangesetSourceGitserverPushConfigFunc struct {
	defaultHook func(*types.Repo) (*protocol.PushConfig, error)
	hooks       []func(*types.Repo) (*protocol.PushConfig, error)
	history     []ForkableChangesetSourceGitserverPushConfigFuncCall
	mutex       sync.Mutex
}

// GitserverPushConfig delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) GitserverPushConfig(v0 *types.Repo) (*protocol.PushConfig, error) {
	r0, r1 := m.GitserverPushConfigFunc.nextHook()(v0)
	m.GitserverPushConfigFunc.appendCall(ForkableChangesetSourceGitserverPushConfigFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GitserverPushConfig
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) SetDefaultHook(hook func(*types.Repo) (*protocol.PushConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverPushConfig method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) PushHook(hook func(*types.Repo) (*protocol.PushConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) SetDefaultReturn(r0 *protocol.PushConfig, r1 error) {
	f.SetDefaultHook(func(*types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) PushReturn(r0 *protocol.PushConfig, r1 error) {
	f.PushHook(func(*types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceGitserverPushConfigFunc) nextHook() func(*types.Repo) (*protocol.PushConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceGitserverPushConfigFunc) appendCall(r0 ForkableChangesetSourceGitserverPushConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceGitserverPushConfigFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) History() []ForkableChangesetSourceGitserverPushConfigFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceGitserverPushConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceGitserverPushConfigFuncCall is an object that
// describes an invocation of method GitserverPushConfig on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceGitserverPushConfigFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.PushConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceGitserverPushConfigFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceGitserverPushConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceLoadChangesetFunc describes the behavior when the
// LoadChangeset method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceLoadChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ForkableChangesetSourceLoadChangesetFuncCall
	mutex       sync.Mutex
}

// LoadChangeset delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) LoadChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.LoadChangesetFunc.nextHook()(v0, v1)
	m.LoadChangesetFunc.appendCall(ForkableChangesetSourceLoadChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadChangeset method
// of the parent MockForkableChangesetSource instance is invoked and the
// hook queue is empty.
func (f *ForkableChangesetSourceLoadChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceLoadChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceLoadChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceLoadChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceLoadChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceLoadChangesetFunc) appendCall(r0 ForkableChangesetSourceLoadChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceLoadChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceLoadChangesetFunc) History() []ForkableChangesetSourceLoadChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceLoadChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceLoadChangesetFuncCall is an object that describes
// an invocation of method LoadChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceLoadChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceLoadChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceLoadChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceMergeChangesetFunc describes the behavior when the
// MergeChangeset method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceMergeChangesetFunc struct {
	defaultHook func(context.Context, *Changeset, bool) error
	hooks       []func(context.Context, *Changeset, bool) error
	history     []ForkableChangesetSourceMergeChangesetFuncCall
	mutex       sync.Mutex
}

// MergeChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) MergeChangeset(v0 context.Context, v1 *Changeset, v2 bool) error {
	r0 := m.MergeChangesetFunc.nextHook()(v0, v1, v2)
	m.MergeChangesetFunc.appendCall(ForkableChangesetSourceMergeChangesetFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MergeChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceMergeChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceMergeChangesetFunc) PushHook(hook func(context.Context, *Changeset, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceMergeChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceMergeChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

func (f *ForkableChangesetSourceMergeChangesetFunc) nextHook() func(context.Context, *Changeset, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceMergeChangesetFunc) appendCall(r0 ForkableChangesetSourceMergeChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceMergeChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceMergeChangesetFunc) History() []ForkableChangesetSourceMergeChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceMergeChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceMergeChangesetFuncCall is an object that describes
// an invocation of method MergeChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceMergeChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceMergeChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceMergeChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceReopenChangesetFunc describes the behavior when
// the ReopenChangeset method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceReopenChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ForkableChangesetSourceReopenChangesetFuncCall
	mutex       sync.Mutex
}

// ReopenChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) ReopenChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.ReopenChangesetFunc.nextHook()(v0, v1)
	m.ReopenChangesetFunc.appendCall(ForkableChangesetSourceReopenChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReopenChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceReopenChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReopenChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceReopenChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceReopenChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceReopenChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceReopenChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceReopenChangesetFunc) appendCall(r0 ForkableChangesetSourceReopenChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceReopenChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceReopenChangesetFunc) History() []ForkableChangesetSourceReopenChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceReopenChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceReopenChangesetFuncCall is an object that
// describes an invocation of method ReopenChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceReopenChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceReopenChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceReopenChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceUpdateChangesetFunc describes the behavior when
// the UpdateChangeset method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceUpdateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ForkableChangesetSourceUpdateChangesetFuncCall
	mutex       sync.Mutex
}

// UpdateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) UpdateChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.UpdateChangesetFunc.nextHook()(v0, v1)
	m.UpdateChangesetFunc.appendCall(ForkableChangesetSourceUpdateChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceUpdateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceUpdateChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceUpdateChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceUpdateChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceUpdateChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceUpdateChangesetFunc) appendCall(r0 ForkableChangesetSourceUpdateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceUpdateChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceUpdateChangesetFunc) History() []ForkableChangesetSourceUpdateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceUpdateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceUpdateChangesetFuncCall is an object that
// describes an invocation of method UpdateChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceUpdateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceUpdateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceUpdateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceValidateAuthenticatorFunc describes the behavior
// when the ValidateAuthenticator method of the parent
// MockForkableChangesetSource instance is invoked.
type ForkableChangesetSourceValidateAuthenticatorFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ForkableChangesetSourceValidateAuthenticatorFuncCall
	mutex       sync.Mutex
}

// ValidateAuthenticator delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) ValidateAuthenticator(v0 context.Context) error {
	r0 := m.ValidateAuthenticatorFunc.nextHook()(v0)
	m.ValidateAuthenticatorFunc.appendCall(ForkableChangesetSourceValidateAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidateAuthenticator method of the parent MockForkableChangesetSource
// instance is invoked and the hook queue is empty.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidateAuthenticator method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ForkableChangesetSourceValidateAuthenticatorFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceValidateAuthenticatorFunc) appendCall(r0 ForkableChangesetSourceValidateAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceValidateAuthenticatorFuncCall objects describing
// the invocations of this function.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) History() []ForkableChangesetSourceValidateAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceValidateAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceValidateAuthenticatorFuncCall is an object that
// describes an invocation of method ValidateAuthenticator on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceValidateAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceValidateAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceValidateAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceWithAuthenticatorFunc describes the behavior when
// the WithAuthenticator method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) (ChangesetSource, error)
	hooks       []func(auth.Authenticator) (ChangesetSource, error)
	history     []ForkableChangesetSourceWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) WithAuthenticator(v0 auth.Authenticator) (ChangesetSource, error) {
	r0, r1 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(ForkableChangesetSourceWithAuthenticatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) SetDefaultReturn(r0 ChangesetSource, r1 error) {
	f.SetDefaultHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) PushReturn(r0 ChangesetSource, r1 error) {
	f.PushHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceWithAuthenticatorFunc) nextHook() func(auth.Authenticator) (ChangesetSource, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceWithAuthenticatorFunc) appendCall(r0 ForkableChangesetSourceWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceWithAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) History() []ForkableChangesetSourceWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceWithAuthenticatorFuncCall is an object that
// describes an invocation of method WithAuthenticator on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ChangesetSource
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSourcerStore is a mock implementation of the SourcerStore interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/batches/sources) used for
// unit testing.
type MockSourcerStore struct {
	// DatabaseDBFunc is an instance of a mock function object controlling
	// the behavior of the method DatabaseDB.
	DatabaseDBFunc *SourcerStoreDatabaseDBFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *SourcerStoreExternalServicesFunc
	// GetBatchChangeFunc is an instance of a mock function object
	// controlling the behavior of the method GetBatchChange.
	GetBatchChangeFunc *SourcerStoreGetBatchChangeFunc
	// GetChangesetSpecByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetChangesetSpecByID.
	GetChangesetSpecByIDFunc *SourcerStoreGetChangesetSpecByIDFunc
	// GetExternalServiceIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetExternalServiceIDs.
	GetExternalServiceIDsFunc *SourcerStoreGetExternalServiceIDsFunc
	// GetSiteCredentialFunc is an instance of a mock function object
	// controlling the behavior of the method GetSiteCredential.
	GetSiteCredentialFunc *SourcerStoreGetSiteCredentialFunc
	// GitHubAppsStoreFunc is an instance of a mock function object
	// controlling the behavior of the method GitHubAppsStore.
	GitHubAppsStoreFunc *SourcerStoreGitHubAppsStoreFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *SourcerStoreReposFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *SourcerStoreUserCredentialsFunc
}

// NewMockSourcerStore creates a new mock of the SourcerStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockSourcerStore() *MockSourcerStore {
	return &MockSourcerStore{
		DatabaseDBFunc: &SourcerStoreDatabaseDBFunc{
			defaultHook: func() (r0 database.DB) {
				return
			},
		},
		ExternalServicesFunc: &SourcerStoreExternalServicesFunc{
			defaultHook: func() (r0 database.ExternalServiceStore) {
				return
			},
		},
		GetBatchChangeFunc: &SourcerStoreGetBatchChangeFunc{
			defaultHook: func(context.Context, store.GetBatchChangeOpts) (r0 *types1.BatchChange, r1 error) {
				return
			},
		},
		GetChangesetSpecByIDFunc: &SourcerStoreGetChangesetSpecByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *types1.ChangesetSpec, r1 error) {
				return
			},
		},
		GetExternalServiceIDsFunc: &SourcerStoreGetExternalServiceIDsFunc{
			defaultHook: func(context.Context, store.GetExternalServiceIDsOpts) (r0 []int64, r1 error) {
				return
			},
		},
		GetSiteCredentialFunc: &SourcerStoreGetSiteCredentialFunc{
			defaultHook: func(context.Context, store.GetSiteCredentialOpts) (r0 *types1.SiteCredential, r1 error) {
				return
			},
		},
		GitHubAppsStoreFunc: &SourcerStoreGitHubAppsStoreFunc{
			defaultHook: func() (r0 store1.GitHubAppsStore) {
				return
			},
		},
		ReposFunc: &SourcerStoreReposFunc{
			defaultHook: func() (r0 database.RepoStore) {
				return
			},
		},
		UserCredentialsFunc: &SourcerStoreUserCredentialsFunc{
			defaultHook: func() (r0 database.UserCredentialsStore) {
				return
			},
		},
	}
}

// NewStrictMockSourcerStore creates a new mock of the SourcerStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSourcerStore() *MockSourcerStore {
	return &MockSourcerStore{
		DatabaseDBFunc: &SourcerStoreDatabaseDBFunc{
			defaultHook: func() database.DB {
				panic("unexpected invocation of MockSourcerStore.DatabaseDB")
			},
		},
		ExternalServicesFunc: &SourcerStoreExternalServicesFunc{
			defaultHook: func() database.ExternalServiceStore {
				panic("unexpected invocation of MockSourcerStore.ExternalServices")
			},
		},
		GetBatchChangeFunc: &SourcerStoreGetBatchChangeFunc{
			defaultHook: func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
				panic("unexpected invocation of MockSourcerStore.GetBatchChange")
			},
		},
		GetChangesetSpecByIDFunc: &SourcerStoreGetChangesetSpecByIDFunc{
			defaultHook: func(context.Context, int64) (*types1.ChangesetSpec, error) {
				panic("unexpected invocation of MockSourcerStore.GetChangesetSpecByID")
			},
		},
		GetExternalServiceIDsFunc: &SourcerStoreGetExternalServiceIDsFunc{
			defaultHook: func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
				panic("unexpected invocation of MockSourcerStore.GetExternalServiceIDs")
			},
		},
		GetSiteCredentialFunc: &SourcerStoreGetSiteCredentialFunc{
			defaultHook: func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
				panic("unexpected invocation of MockSourcerStore.GetSiteCredential")
			},
		},
		GitHubAppsStoreFunc: &SourcerStoreGitHubAppsStoreFunc{
			defaultHook: func() store1.GitHubAppsStore {
				panic("unexpected invocation of MockSourcerStore.GitHubAppsStore")
			},
		},
		ReposFunc: &SourcerStoreReposFunc{
			defaultHook: func() database.RepoStore {
				panic("unexpected invocation of MockSourcerStore.Repos")
			},
		},
		UserCredentialsFunc: &SourcerStoreUserCredentialsFunc{
			defaultHook: func() database.UserCredentialsStore {
				panic("unexpected invocation of MockSourcerStore.UserCredentials")
			},
		},
	}
}

// NewMockSourcerStoreFrom creates a new mock of the MockSourcerStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockSourcerStoreFrom(i SourcerStore) *MockSourcerStore {
	return &MockSourcerStore{
		DatabaseDBFunc: &SourcerStoreDatabaseDBFunc{
			defaultHook: i.DatabaseDB,
		},
		ExternalServicesFunc: &SourcerStoreExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		GetBatchChangeFunc: &SourcerStoreGetBatchChangeFunc{
			defaultHook: i.GetBatchChange,
		},
		GetChangesetSpecByIDFunc: &SourcerStoreGetChangesetSpecByIDFunc{
			defaultHook: i.GetChangesetSpecByID,
		},
		GetExternalServiceIDsFunc: &SourcerStoreGetExternalServiceIDsFunc{
			defaultHook: i.GetExternalServiceIDs,
		},
		GetSiteCredentialFunc: &SourcerStoreGetSiteCredentialFunc{
			defaultHook: i.GetSiteCredential,
		},
		GitHubAppsStoreFunc: &SourcerStoreGitHubAppsStoreFunc{
			defaultHook: i.GitHubAppsStore,
		},
		ReposFunc: &SourcerStoreReposFunc{
			defaultHook: i.Repos,
		},
		UserCredentialsFunc: &SourcerStoreUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
	}
}

// SourcerStoreDatabaseDBFunc describes the behavior when the DatabaseDB
// method of the parent MockSourcerStore instance is invoked.
type SourcerStoreDatabaseDBFunc struct {
	defaultHook func() database.DB
	hooks       []func() database.DB
	history     []SourcerStoreDatabaseDBFuncCall
	mutex       sync.Mutex
}

// DatabaseDB delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSourcerStore) DatabaseDB() database.DB {
	r0 := m.DatabaseDBFunc.nextHook()()
	m.DatabaseDBFunc.appendCall(SourcerStoreDatabaseDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the DatabaseDB method of
// the parent MockSourcerStore instance is invoked and the hook queue is
// empty.
func (f *SourcerStoreDatabaseDBFunc) SetDefaultHook(hook func() database.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DatabaseDB method of the parent MockSourcerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SourcerStoreDatabaseDBFunc) PushHook(hook func() database.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreDatabaseDBFunc) SetDefaultReturn(r0 database.DB) {
	f.SetDefaultHook(func() database.DB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreDatabaseDBFunc) PushReturn(r0 database.DB) {
	f.PushHook(func() database.DB {
		return r0
	})
}

func (f *SourcerStoreDatabaseDBFunc) nextHook() func() database.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreDatabaseDBFunc) appendCall(r0 SourcerStoreDatabaseDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreDatabaseDBFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreDatabaseDBFunc) History() []SourcerStoreDatabaseDBFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreDatabaseDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreDatabaseDBFuncCall is an object that describes an invocation
// of method DatabaseDB on an instance of MockSourcerStore.
type SourcerStoreDatabaseDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreDatabaseDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreDatabaseDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreExternalServicesFunc describes the behavior when the
// ExternalServices method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreExternalServicesFunc struct {
	defaultHook func() database.ExternalServiceStore
	hooks       []func() database.ExternalServiceStore
	history     []SourcerStoreExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) ExternalServices() database.ExternalServiceStore {
	r0 := m.ExternalServicesFunc.nextHook()()
	m.ExternalServicesFunc.appendCall(SourcerStoreExternalServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreExternalServicesFunc) SetDefaultHook(hook func() database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreExternalServicesFunc) PushHook(hook func() database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreExternalServicesFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func() database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreExternalServicesFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func() database.ExternalServiceStore {
		return r0
	})
}

func (f *SourcerStoreExternalServicesFunc) nextHook() func() database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreExternalServicesFunc) appendCall(r0 SourcerStoreExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreExternalServicesFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreExternalServicesFunc) History() []SourcerStoreExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreExternalServicesFuncCall is an object that describes an
// invocation of method ExternalServices on an instance of MockSourcerStore.
type SourcerStoreExternalServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreGetBatchChangeFunc describes the behavior when the
// GetBatchChange method of the parent MockSourcerStore instance is invoked.
type SourcerStoreGetBatchChangeFunc struct {
	defaultHook func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)
	hooks       []func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)
	history     []SourcerStoreGetBatchChangeFuncCall
	mutex       sync.Mutex
}

// GetBatchChange delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetBatchChange(v0 context.Context, v1 store.GetBatchChangeOpts) (*types1.BatchChange, error) {
	r0, r1 := m.GetBatchChangeFunc.nextHook()(v0, v1)
	m.GetBatchChangeFunc.appendCall(SourcerStoreGetBatchChangeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBatchChange
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreGetBatchChangeFunc) SetDefaultHook(hook func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBatchChange method of the parent MockSourcerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SourcerStoreGetBatchChangeFunc) PushHook(hook func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetBatchChangeFunc) SetDefaultReturn(r0 *types1.BatchChange, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetBatchChangeFunc) PushReturn(r0 *types1.BatchChange, r1 error) {
	f.PushHook(func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetBatchChangeFunc) nextHook() func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetBatchChangeFunc) appendCall(r0 SourcerStoreGetBatchChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetBatchChangeFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreGetBatchChangeFunc) History() []SourcerStoreGetBatchChangeFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetBatchChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetBatchChangeFuncCall is an object that describes an
// invocation of method GetBatchChange on an instance of MockSourcerStore.
type SourcerStoreGetBatchChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetBatchChangeOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types1.BatchChange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetBatchChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetBatchChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreGetChangesetSpecByIDFunc describes the behavior when the
// GetChangesetSpecByID method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreGetChangesetSpecByIDFunc struct {
	defaultHook func(context.Context, int64) (*types1.ChangesetSpec, error)
	hooks       []func(context.Context, int64) (*types1.ChangesetSpec, error)
	history     []SourcerStoreGetChangesetSpecByIDFuncCall
	mutex       sync.Mutex
}

// GetChangesetSpecByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetChangesetSpecByID(v0 context.Context, v1 int64) (*types1.ChangesetSpec, error) {
	r0, r1 := m.GetChangesetSpecByIDFunc.nextHook()(v0, v1)
	m.GetChangesetSpecByIDFunc.appendCall(SourcerStoreGetChangesetSpecByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetChangesetSpecByID
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreGetChangesetSpecByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types1.ChangesetSpec, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChangesetSpecByID method of the parent MockSourcerStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SourcerStoreGetChangesetSpecByIDFunc) PushHook(hook func(context.Context, int64) (*types1.ChangesetSpec, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetChangesetSpecByIDFunc) SetDefaultReturn(r0 *types1.ChangesetSpec, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types1.ChangesetSpec, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetChangesetSpecByIDFunc) PushReturn(r0 *types1.ChangesetSpec, r1 error) {
	f.PushHook(func(context.Context, int64) (*types1.ChangesetSpec, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetChangesetSpecByIDFunc) nextHook() func(context.Context, int64) (*types1.ChangesetSpec, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetChangesetSpecByIDFunc) appendCall(r0 SourcerStoreGetChangesetSpecByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetChangesetSpecByIDFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreGetChangesetSpecByIDFunc) History() []SourcerStoreGetChangesetSpecByIDFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetChangesetSpecByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetChangesetSpecByIDFuncCall is an object that describes an
// invocation of method GetChangesetSpecByID on an instance of
// MockSourcerStore.
type SourcerStoreGetChangesetSpecByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types1.ChangesetSpec
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetChangesetSpecByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetChangesetSpecByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreGetExternalServiceIDsFunc describes the behavior when the
// GetExternalServiceIDs method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreGetExternalServiceIDsFunc struct {
	defaultHook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)
	hooks       []func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)
	history     []SourcerStoreGetExternalServiceIDsFuncCall
	mutex       sync.Mutex
}

// GetExternalServiceIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetExternalServiceIDs(v0 context.Context, v1 store.GetExternalServiceIDsOpts) ([]int64, error) {
	r0, r1 := m.GetExternalServiceIDsFunc.nextHook()(v0, v1)
	m.GetExternalServiceIDsFunc.appendCall(SourcerStoreGetExternalServiceIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetExternalServiceIDs method of the parent MockSourcerStore instance is
// invoked and the hook queue is empty.
func (f *SourcerStoreGetExternalServiceIDsFunc) SetDefaultHook(hook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetExternalServiceIDs method of the parent MockSourcerStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SourcerStoreGetExternalServiceIDsFunc) PushHook(hook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetExternalServiceIDsFunc) SetDefaultReturn(r0 []int64, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetExternalServiceIDsFunc) PushReturn(r0 []int64, r1 error) {
	f.PushHook(func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetExternalServiceIDsFunc) nextHook() func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetExternalServiceIDsFunc) appendCall(r0 SourcerStoreGetExternalServiceIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetExternalServiceIDsFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreGetExternalServiceIDsFunc) History() []SourcerStoreGetExternalServiceIDsFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetExternalServiceIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetExternalServiceIDsFuncCall is an object that describes an
// invocation of method GetExternalServiceIDs on an instance of
// MockSourcerStore.
type SourcerStoreGetExternalServiceIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetExternalServiceIDsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetExternalServiceIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetExternalServiceIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreGetSiteCredentialFunc describes the behavior when the
// GetSiteCredential method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreGetSiteCredentialFunc struct {
	defaultHook func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)
	hooks       []func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)
	history     []SourcerStoreGetSiteCredentialFuncCall
	mutex       sync.Mutex
}

// GetSiteCredential delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetSiteCredential(v0 context.Context, v1 store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
	r0, r1 := m.GetSiteCredentialFunc.nextHook()(v0, v1)
	m.GetSiteCredentialFunc.appendCall(SourcerStoreGetSiteCredentialFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSiteCredential
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreGetSiteCredentialFunc) SetDefaultHook(hook func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSiteCredential method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreGetSiteCredentialFunc) PushHook(hook func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetSiteCredentialFunc) SetDefaultReturn(r0 *types1.SiteCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetSiteCredentialFunc) PushReturn(r0 *types1.SiteCredential, r1 error) {
	f.PushHook(func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetSiteCredentialFunc) nextHook() func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetSiteCredentialFunc) appendCall(r0 SourcerStoreGetSiteCredentialFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetSiteCredentialFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreGetSiteCredentialFunc) History() []SourcerStoreGetSiteCredentialFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetSiteCredentialFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetSiteCredentialFuncCall is an object that describes an
// invocation of method GetSiteCredential on an instance of
// MockSourcerStore.
type SourcerStoreGetSiteCredentialFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetSiteCredentialOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types1.SiteCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetSiteCredentialFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetSiteCredentialFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreGitHubAppsStoreFunc describes the behavior when the
// GitHubAppsStore method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreGitHubAppsStoreFunc struct {
	defaultHook func() store1.GitHubAppsStore
	hooks       []func() store1.GitHubAppsStore
	history     []SourcerStoreGitHubAppsStoreFuncCall
	mutex       sync.Mutex
}

// GitHubAppsStore delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GitHubAppsStore() store1.GitHubAppsStore {
	r0 := m.GitHubAppsStoreFunc.nextHook()()
	m.GitHubAppsStoreFunc.appendCall(SourcerStoreGitHubAppsStoreFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitHubAppsStore
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreGitHubAppsStoreFunc) SetDefaultHook(hook func() store1.GitHubAppsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitHubAppsStore method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreGitHubAppsStoreFunc) PushHook(hook func() store1.GitHubAppsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGitHubAppsStoreFunc) SetDefaultReturn(r0 store1.GitHubAppsStore) {
	f.SetDefaultHook(func() store1.GitHubAppsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGitHubAppsStoreFunc) PushReturn(r0 store1.GitHubAppsStore) {
	f.PushHook(func() store1.GitHubAppsStore {
		return r0
	})
}

func (f *SourcerStoreGitHubAppsStoreFunc) nextHook() func() store1.GitHubAppsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGitHubAppsStoreFunc) appendCall(r0 SourcerStoreGitHubAppsStoreFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGitHubAppsStoreFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreGitHubAppsStoreFunc) History() []SourcerStoreGitHubAppsStoreFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGitHubAppsStoreFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGitHubAppsStoreFuncCall is an object that describes an
// invocation of method GitHubAppsStore on an instance of MockSourcerStore.
type SourcerStoreGitHubAppsStoreFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 store1.GitHubAppsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGitHubAppsStoreFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGitHubAppsStoreFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreReposFunc describes the behavior when the Repos method of the
// parent MockSourcerStore instance is invoked.
type SourcerStoreReposFunc struct {
	defaultHook func() database.RepoStore
	hooks       []func() database.RepoStore
	history     []SourcerStoreReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSourcerStore) Repos() database.RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(SourcerStoreReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockSourcerStore instance is invoked and the hook queue is empty.
func (f *SourcerStoreReposFunc) SetDefaultHook(hook func() database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockSourcerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SourcerStoreReposFunc) PushHook(hook func() database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreReposFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func() database.RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreReposFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func() database.RepoStore {
		return r0
	})
}

func (f *SourcerStoreReposFunc) nextHook() func() database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreReposFunc) appendCall(r0 SourcerStoreReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreReposFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreReposFunc) History() []SourcerStoreReposFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreReposFuncCall is an object that describes an invocation of
// method Repos on an instance of MockSourcerStore.
type SourcerStoreReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreUserCredentialsFunc describes the behavior when the
// UserCredentials method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreUserCredentialsFunc struct {
	defaultHook func() database.UserCredentialsStore
	hooks       []func() database.UserCredentialsStore
	history     []SourcerStoreUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) UserCredentials() database.UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()()
	m.UserCredentialsFunc.appendCall(SourcerStoreUserCredentialsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreUserCredentialsFunc) SetDefaultHook(hook func() database.UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreUserCredentialsFunc) PushHook(hook func() database.UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreUserCredentialsFunc) SetDefaultReturn(r0 database.UserCredentialsStore) {
	f.SetDefaultHook(func() database.UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreUserCredentialsFunc) PushReturn(r0 database.UserCredentialsStore) {
	f.PushHook(func() database.UserCredentialsStore {
		return r0
	})
}

func (f *SourcerStoreUserCredentialsFunc) nextHook() func() database.UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreUserCredentialsFunc) appendCall(r0 SourcerStoreUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreUserCredentialsFunc) History() []SourcerStoreUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreUserCredentialsFuncCall is an object that describes an
// invocation of method UserCredentials on an instance of MockSourcerStore.
type SourcerStoreUserCredentialsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockBitbucketCloudClient is a mock implementation of the Client interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/extsvc/bitbucketcloud) used
// for unit testing.
type MockBitbucketCloudClient struct {
	// AllCurrentUserEmailsFunc is an instance of a mock function object
	// controlling the behavior of the method AllCurrentUserEmails.
	AllCurrentUserEmailsFunc *BitbucketCloudClientAllCurrentUserEmailsFunc
	// AuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method Authenticator.
	AuthenticatorFunc *BitbucketCloudClientAuthenticatorFunc
	// CreatePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePullRequest.
	CreatePullRequestFunc *BitbucketCloudClientCreatePullRequestFunc
	// CreatePullRequestCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePullRequestComment.
	CreatePullRequestCommentFunc *BitbucketCloudClientCreatePullRequestCommentFunc
	// CurrentUserFunc is an instance of a mock function object controlling
	// the behavior of the method CurrentUser.
	CurrentUserFunc *BitbucketCloudClientCurrentUserFunc
	// CurrentUserEmailsFunc is an instance of a mock function object
	// controlling the behavior of the method CurrentUserEmails.
	CurrentUserEmailsFunc *BitbucketCloudClientCurrentUserEmailsFunc
	// DeclinePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method DeclinePullRequest.
	DeclinePullRequestFunc *BitbucketCloudClientDeclinePullRequestFunc
	// ForkRepositoryFunc is an instance of a mock function object
	// controlling the behavior of the method ForkRepository.
	ForkRepositoryFunc *BitbucketCloudClientForkRepositoryFunc
	// GetPullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method GetPullRequest.
	GetPullRequestFunc *BitbucketCloudClientGetPullRequestFunc
	// GetPullRequestStatusesFunc is an instance of a mock function object
	// controlling the behavior of the method GetPullRequestStatuses.
	GetPullRequestStatusesFunc *BitbucketCloudClientGetPullRequestStatusesFunc
	// ListExplicitUserPermsForRepoFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListExplicitUserPermsForRepo.
	ListExplicitUserPermsForRepoFunc *BitbucketCloudClientListExplicitUserPermsForRepoFunc
	// MergePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method MergePullRequest.
	MergePullRequestFunc *BitbucketCloudClientMergePullRequestFunc
	// PingFunc is an instance of a mock function object controlling the
	// behavior of the method Ping.
	PingFunc *BitbucketCloudClientPingFunc
	// RepoFunc is an instance of a mock function object controlling the
	// behavior of the method Repo.
	RepoFunc *BitbucketCloudClientRepoFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *BitbucketCloudClientReposFunc
	// UpdatePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePullRequest.
	UpdatePullRequestFunc *BitbucketCloudClientUpdatePullRequestFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *BitbucketCloudClientWithAuthenticatorFunc
}

// NewMockBitbucketCloudClient creates a new mock of the Client interface.
// All methods return zero values for all results, unless overwritten.
func NewMockBitbucketCloudClient() *MockBitbucketCloudClient {
	return &MockBitbucketCloudClient{
		AllCurrentUserEmailsFunc: &BitbucketCloudClientAllCurrentUserEmailsFunc{
			defaultHook: func(context.Context) (r0 []*bitbucketcloud.UserEmail, r1 error) {
				return
			},
		},
		AuthenticatorFunc: &BitbucketCloudClientAuthenticatorFunc{
			defaultHook: func() (r0 auth.Authenticator) {
				return
			},
		},
		CreatePullRequestFunc: &BitbucketCloudClientCreatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		CreatePullRequestCommentFunc: &BitbucketCloudClientCreatePullRequestCommentFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (r0 *bitbucketcloud.Comment, r1 error) {
				return
			},
		},
		CurrentUserFunc: &BitbucketCloudClientCurrentUserFunc{
			defaultHook: func(context.Context) (r0 *bitbucketcloud.User, r1 error) {
				return
			},
		},
		CurrentUserEmailsFunc: &BitbucketCloudClientCurrentUserEmailsFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken) (r0 []*bitbucketcloud.UserEmail, r1 *bitbucketcloud.PageToken, r2 error) {
				return
			},
		},
		DeclinePullRequestFunc: &BitbucketCloudClientDeclinePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		ForkRepositoryFunc: &BitbucketCloudClientForkRepositoryFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (r0 *bitbucketcloud.Repo, r1 error) {
				return
			},
		},
		GetPullRequestFunc: &BitbucketCloudClientGetPullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		GetPullRequestStatusesFunc: &BitbucketCloudClientGetPullRequestStatusesFunc{
			defaultHook: func(*bitbucketcloud.Repo, int64) (r0 *bitbucketcloud.PaginatedResultSet, r1 error) {
				return
			},
		},
		ListExplicitUserPermsForRepoFunc: &BitbucketCloudClientListExplicitUserPermsForRepoFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken, string, string, *bitbucketcloud.RequestOptions) (r0 []*bitbucketcloud.Account, r1 *bitbucketcloud.PageToken, r2 error) {
				return
			},
		},
		MergePullRequestFunc: &BitbucketCloudClientMergePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		PingFunc: &BitbucketCloudClientPingFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		RepoFunc: &BitbucketCloudClientRepoFunc{
			defaultHook: func(context.Context, string, string) (r0 *bitbucketcloud.Repo, r1 error) {
				return
			},
		},
		ReposFunc: &BitbucketCloudClientReposFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken, string, *bitbucketcloud.ReposOptions) (r0 []*bitbucketcloud.Repo, r1 *bitbucketcloud.PageToken, r2 error) {
				return
			},
		},
		UpdatePullRequestFunc: &BitbucketCloudClientUpdatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		WithAuthenticatorFunc: &BitbucketCloudClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 bitbucketcloud.Client) {
				return
			},
		},
	}
}

// NewStrictMockBitbucketCloudClient creates a new mock of the Client
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockBitbucketCloudClient() *MockBitbucketCloudClient {
	return &MockBitbucketCloudClient{
		AllCurrentUserEmailsFunc: &BitbucketCloudClientAllCurrentUserEmailsFunc{
			defaultHook: func(context.Context) ([]*bitbucketcloud.UserEmail, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.AllCurrentUserEmails")
			},
		},
		AuthenticatorFunc: &BitbucketCloudClientAuthenticatorFunc{
			defaultHook: func() auth.Authenticator {
				panic("unexpected invocation of MockBitbucketCloudClient.Authenticator")
			},
		},
		CreatePullRequestFunc: &BitbucketCloudClientCreatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CreatePullRequest")
			},
		},
		CreatePullRequestCommentFunc: &BitbucketCloudClientCreatePullRequestCommentFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CreatePullRequestComment")
			},
		},
		CurrentUserFunc: &BitbucketCloudClientCurrentUserFunc{
			defaultHook: func(context.Context) (*bitbucketcloud.User, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CurrentUser")
			},
		},
		CurrentUserEmailsFunc: &BitbucketCloudClientCurrentUserEmailsFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken) ([]*bitbucketcloud.UserEmail, *bitbucketcloud.PageToken, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CurrentUserEmails")
			},
		},
		DeclinePullRequestFunc: &BitbucketCloudClientDeclinePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.DeclinePullRequest")
			},
		},
		ForkRepositoryFunc: &BitbucketCloudClientForkRepositoryFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.ForkRepository")
			},
		},
		GetPullRequestFunc: &BitbucketCloudClientGetPullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.GetPullRequest")
			},
		},
		GetPullRequestStatusesFunc: &BitbucketCloudClientGetPullRequestStatusesFunc{
			defaultHook: func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.GetPullRequestStatuses")
			},
		},
		ListExplicitUserPermsForRepoFunc: &BitbucketCloudClientListExplicitUserPermsForRepoFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken, string, string, *bitbucketcloud.RequestOptions) ([]*bitbucketcloud.Account, *bitbucketcloud.PageToken, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.ListExplicitUserPermsForRepo")
			},
		},
		MergePullRequestFunc: &BitbucketCloudClientMergePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.MergePullRequest")
			},
		},
		PingFunc: &BitbucketCloudClientPingFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockBitbucketCloudClient.Ping")
			},
		},
		RepoFunc: &BitbucketCloudClientRepoFunc{
			defaultHook: func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.Repo")
			},
		},
		ReposFunc: &BitbucketCloudClientReposFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken, string, *bitbucketcloud.ReposOptions) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.Repos")
			},
		},
		UpdatePullRequestFunc: &BitbucketCloudClientUpdatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.UpdatePullRequest")
			},
		},
		WithAuthenticatorFunc: &BitbucketCloudClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) bitbucketcloud.Client {
				panic("unexpected invocation of MockBitbucketCloudClient.WithAuthenticator")
			},
		},
	}
}

// NewMockBitbucketCloudClientFrom creates a new mock of the
// MockBitbucketCloudClient interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockBitbucketCloudClientFrom(i bitbucketcloud.Client) *MockBitbucketCloudClient {
	return &MockBitbucketCloudClient{
		AllCurrentUserEmailsFunc: &BitbucketCloudClientAllCurrentUserEmailsFunc{
			defaultHook: i.AllCurrentUserEmails,
		},
		AuthenticatorFunc: &BitbucketCloudClientAuthenticatorFunc{
			defaultHook: i.Authenticator,
		},
		CreatePullRequestFunc: &BitbucketCloudClientCreatePullRequestFunc{
			defaultHook: i.CreatePullRequest,
		},
		CreatePullRequestCommentFunc: &BitbucketCloudClientCreatePullRequestCommentFunc{
			defaultHook: i.CreatePullRequestComment,
		},
		CurrentUserFunc: &BitbucketCloudClientCurrentUserFunc{
			defaultHook: i.CurrentUser,
		},
		CurrentUserEmailsFunc: &BitbucketCloudClientCurrentUserEmailsFunc{
			defaultHook: i.CurrentUserEmails,
		},
		DeclinePullRequestFunc: &BitbucketCloudClientDeclinePullRequestFunc{
			defaultHook: i.DeclinePullRequest,
		},
		ForkRepositoryFunc: &BitbucketCloudClientForkRepositoryFunc{
			defaultHook: i.ForkRepository,
		},
		GetPullRequestFunc: &BitbucketCloudClientGetPullRequestFunc{
			defaultHook: i.GetPullRequest,
		},
		GetPullRequestStatusesFunc: &BitbucketCloudClientGetPullRequestStatusesFunc{
			defaultHook: i.GetPullRequestStatuses,
		},
		ListExplicitUserPermsForRepoFunc: &BitbucketCloudClientListExplicitUserPermsForRepoFunc{
			defaultHook: i.ListExplicitUserPermsForRepo,
		},
		MergePullRequestFunc: &BitbucketCloudClientMergePullRequestFunc{
			defaultHook: i.MergePullRequest,
		},
		PingFunc: &BitbucketCloudClientPingFunc{
			defaultHook: i.Ping,
		},
		RepoFunc: &BitbucketCloudClientRepoFunc{
			defaultHook: i.Repo,
		},
		ReposFunc: &BitbucketCloudClientReposFunc{
			defaultHook: i.Repos,
		},
		UpdatePullRequestFunc: &BitbucketCloudClientUpdatePullRequestFunc{
			defaultHook: i.UpdatePullRequest,
		},
		WithAuthenticatorFunc: &BitbucketCloudClientWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// BitbucketCloudClientAllCurrentUserEmailsFunc describes the behavior when
// the AllCurrentUserEmails method of the parent MockBitbucketCloudClient
// instance is invoked.
type BitbucketCloudClientAllCurrentUserEmailsFunc struct {
	defaultHook func(context.Context) ([]*bitbucketcloud.UserEmail, error)
	hooks       []func(context.Context) ([]*bitbucketcloud.UserEmail, error)
	history     []BitbucketCloudClientAllCurrentUserEmailsFuncCall
	mutex       sync.Mutex
}

// AllCurrentUserEmails delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) AllCurrentUserEmails(v0 context.Context) ([]*bitbucketcloud.UserEmail, error) {
	r0, r1 := m.AllCurrentUserEmailsFunc.nextHook()(v0)
	m.AllCurrentUserEmailsFunc.appendCall(BitbucketCloudClientAllCurrentUserEmailsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AllCurrentUserEmails
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientAllCurrentUserEmailsFunc) SetDefaultHook(hook func(context.Context) ([]*bitbucketcloud.UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AllCurrentUserEmails method of the parent MockBitbucketCloudClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketCloudClientAllCurrentUserEmailsFunc) PushHook(hook func(context.Context) ([]*bitbucketcloud.UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientAllCurrentUserEmailsFunc) SetDefaultReturn(r0 []*bitbucketcloud.UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*bitbucketcloud.UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientAllCurrentUserEmailsFunc) PushReturn(r0 []*bitbucketcloud.UserEmail, r1 error) {
	f.PushHook(func(context.Context) ([]*bitbucketcloud.UserEmail, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientAllCurrentUserEmailsFunc) nextHook() func(context.Context) ([]*bitbucketcloud.UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientAllCurrentUserEmailsFunc) appendCall(r0 BitbucketCloudClientAllCurrentUserEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientAllCurrentUserEmailsFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientAllCurrentUserEmailsFunc) History() []BitbucketCloudClientAllCurrentUserEmailsFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientAllCurrentUserEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientAllCurrentUserEmailsFuncCall is an object that
// describes an invocation of method AllCurrentUserEmails on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientAllCurrentUserEmailsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*bitbucketcloud.UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientAllCurrentUserEmailsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientAllCurrentUserEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientAuthenticatorFunc describes the behavior when the
// Authenticator method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientAuthenticatorFunc struct {
	defaultHook func() auth.Authenticator
	hooks       []func() auth.Authenticator
	history     []BitbucketCloudClientAuthenticatorFuncCall
	mutex       sync.Mutex
}

// Authenticator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Authenticator() auth.Authenticator {
	r0 := m.AuthenticatorFunc.nextHook()()
	m.AuthenticatorFunc.appendCall(BitbucketCloudClientAuthenticatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authenticator method
// of the parent MockBitbucketCloudClient instance is invoked and the hook
// queue is empty.
func (f *BitbucketCloudClientAuthenticatorFunc) SetDefaultHook(hook func() auth.Authenticator) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authenticator method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientAuthenticatorFunc) PushHook(hook func() auth.Authenticator) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientAuthenticatorFunc) SetDefaultReturn(r0 auth.Authenticator) {
	f.SetDefaultHook(func() auth.Authenticator {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientAuthenticatorFunc) PushReturn(r0 auth.Authenticator) {
	f.PushHook(func() auth.Authenticator {
		return r0
	})
}

func (f *BitbucketCloudClientAuthenticatorFunc) nextHook() func() auth.Authenticator {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientAuthenticatorFunc) appendCall(r0 BitbucketCloudClientAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientAuthenticatorFunc) History() []BitbucketCloudClientAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientAuthenticatorFuncCall is an object that describes an
// invocation of method Authenticator on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientAuthenticatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 auth.Authenticator
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketCloudClientCreatePullRequestFunc describes the behavior when the
// CreatePullRequest method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientCreatePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientCreatePullRequestFuncCall
	mutex       sync.Mutex
}

// CreatePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CreatePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.CreatePullRequestFunc.nextHook()(v0, v1, v2)
	m.CreatePullRequestFunc.appendCall(BitbucketCloudClientCreatePullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreatePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientCreatePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientCreatePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCreatePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCreatePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientCreatePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCreatePullRequestFunc) appendCall(r0 BitbucketCloudClientCreatePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientCreatePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientCreatePullRequestFunc) History() []BitbucketCloudClientCreatePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCreatePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCreatePullRequestFuncCall is an object that describes
// an invocation of method CreatePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientCreatePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bitbucketcloud.PullRequestInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientCreatePullRequestCommentFunc describes the behavior
// when the CreatePullRequestComment method of the parent
// MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientCreatePullRequestCommentFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)
	history     []BitbucketCloudClientCreatePullRequestCommentFuncCall
	mutex       sync.Mutex
}

// CreatePullRequestComment delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CreatePullRequestComment(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64, v3 bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
	r0, r1 := m.CreatePullRequestCommentFunc.nextHook()(v0, v1, v2, v3)
	m.CreatePullRequestCommentFunc.appendCall(BitbucketCloudClientCreatePullRequestCommentFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreatePullRequestComment method of the parent MockBitbucketCloudClient
// instance is invoked and the hook queue is empty.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePullRequestComment method of the parent MockBitbucketCloudClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) SetDefaultReturn(r0 *bitbucketcloud.Comment, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) PushReturn(r0 *bitbucketcloud.Comment, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientCreatePullRequestCommentFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCreatePullRequestCommentFunc) appendCall(r0 BitbucketCloudClientCreatePullRequestCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientCreatePullRequestCommentFuncCall objects describing
// the invocations of this function.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) History() []BitbucketCloudClientCreatePullRequestCommentFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCreatePullRequestCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCreatePullRequestCommentFuncCall is an object that
// describes an invocation of method CreatePullRequestComment on an instance
// of MockBitbucketCloudClient.
type BitbucketCloudClientCreatePullRequestCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bitbucketcloud.CommentInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.Comment
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientCurrentUserFunc describes the behavior when the
// CurrentUser method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientCurrentUserFunc struct {
	defaultHook func(context.Context) (*bitbucketcloud.User, error)
	hooks       []func(context.Context) (*bitbucketcloud.User, error)
	history     []BitbucketCloudClientCurrentUserFuncCall
	mutex       sync.Mutex
}

// CurrentUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CurrentUser(v0 context.Context) (*bitbucketcloud.User, error) {
	r0, r1 := m.CurrentUserFunc.nextHook()(v0)
	m.CurrentUserFunc.appendCall(BitbucketCloudClientCurrentUserFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CurrentUser method
// of the parent MockBitbucketCloudClient instance is invoked and the hook
// queue is empty.
func (f *BitbucketCloudClientCurrentUserFunc) SetDefaultHook(hook func(context.Context) (*bitbucketcloud.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CurrentUser method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientCurrentUserFunc) PushHook(hook func(context.Context) (*bitbucketcloud.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCurrentUserFunc) SetDefaultReturn(r0 *bitbucketcloud.User, r1 error) {
	f.SetDefaultHook(func(context.Context) (*bitbucketcloud.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCurrentUserFunc) PushReturn(r0 *bitbucketcloud.User, r1 error) {
	f.PushHook(func(context.Context) (*bitbucketcloud.User, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientCurrentUserFunc) nextHook() func(context.Context) (*bitbucketcloud.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCurrentUserFunc) appendCall(r0 BitbucketCloudClientCurrentUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientCurrentUserFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientCurrentUserFunc) History() []BitbucketCloudClientCurrentUserFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCurrentUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCurrentUserFuncCall is an object that describes an
// invocation of method CurrentUser on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientCurrentUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCurrentUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCurrentUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientCurrentUserEmailsFunc describes the behavior when the
// CurrentUserEmails method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientCurrentUserEmailsFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.PageToken) ([]*bitbucketcloud.UserEmail, *bitbucketcloud.PageToken, error)
	hooks       []func(context.Context, *bitbucketcloud.PageToken) ([]*bitbucketcloud.UserEmail, *bitbucketcloud.PageToken, error)
	history     []BitbucketCloudClientCurrentUserEmailsFuncCall
	mutex       sync.Mutex
}

// CurrentUserEmails delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CurrentUserEmails(v0 context.Context, v1 *bitbucketcloud.PageToken) ([]*bitbucketcloud.UserEmail, *bitbucketcloud.PageToken, error) {
	r0, r1, r2 := m.CurrentUserEmailsFunc.nextHook()(v0, v1)
	m.CurrentUserEmailsFunc.appendCall(BitbucketCloudClientCurrentUserEmailsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the CurrentUserEmails
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientCurrentUserEmailsFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.PageToken) ([]*bitbucketcloud.UserEmail, *bitbucketcloud.PageToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CurrentUserEmails method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientCurrentUserEmailsFunc) PushHook(hook func(context.Context, *bitbucketcloud.PageToken) ([]*bitbucketcloud.UserEmail, *bitbucketcloud.PageToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCurrentUserEmailsFunc) SetDefaultReturn(r0 []*bitbucketcloud.UserEmail, r1 *bitbucketcloud.PageToken, r2 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.PageToken) ([]*bitbucketcloud.UserEmail, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCurrentUserEmailsFunc) PushReturn(r0 []*bitbucketcloud.UserEmail, r1 *bitbucketcloud.PageToken, r2 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.PageToken) ([]*bitbucketcloud.UserEmail, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

func (f *BitbucketCloudClientCurrentUserEmailsFunc) nextHook() func(context.Context, *bitbucketcloud.PageToken) ([]*bitbucketcloud.UserEmail, *bitbucketcloud.PageToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCurrentUserEmailsFunc) appendCall(r0 BitbucketCloudClientCurrentUserEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientCurrentUserEmailsFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientCurrentUserEmailsFunc) History() []BitbucketCloudClientCurrentUserEmailsFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCurrentUserEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCurrentUserEmailsFuncCall is an object that describes
// an invocation of method CurrentUserEmails on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientCurrentUserEmailsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.PageToken
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*bitbucketcloud.UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *bitbucketcloud.PageToken
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCurrentUserEmailsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCurrentUserEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// BitbucketCloudClientDeclinePullRequestFunc describes the behavior when
// the DeclinePullRequest method of the parent MockBitbucketCloudClient
// instance is invoked.
type BitbucketCloudClientDeclinePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientDeclinePullRequestFuncCall
	mutex       sync.Mutex
}

// DeclinePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) DeclinePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.DeclinePullRequestFunc.nextHook()(v0, v1, v2)
	m.DeclinePullRequestFunc.appendCall(BitbucketCloudClientDeclinePullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeclinePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientDeclinePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeclinePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientDeclinePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientDeclinePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientDeclinePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientDeclinePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientDeclinePullRequestFunc) appendCall(r0 BitbucketCloudClientDeclinePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientDeclinePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientDeclinePullRequestFunc) History() []BitbucketCloudClientDeclinePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientDeclinePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientDeclinePullRequestFuncCall is an object that
// describes an invocation of method DeclinePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientDeclinePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientDeclinePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientDeclinePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientForkRepositoryFunc describes the behavior when the
// ForkRepository method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientForkRepositoryFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)
	history     []BitbucketCloudClientForkRepositoryFuncCall
	mutex       sync.Mutex
}

// ForkRepository delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) ForkRepository(v0 context.Context, v1 *bitbucketcloud.Repo, v2 bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
	r0, r1 := m.ForkRepositoryFunc.nextHook()(v0, v1, v2)
	m.ForkRepositoryFunc.appendCall(BitbucketCloudClientForkRepositoryFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ForkRepository
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientForkRepositoryFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ForkRepository method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientForkRepositoryFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientForkRepositoryFunc) SetDefaultReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientForkRepositoryFunc) PushReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientForkRepositoryFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientForkRepositoryFunc) appendCall(r0 BitbucketCloudClientForkRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientForkRepositoryFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientForkRepositoryFunc) History() []BitbucketCloudClientForkRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientForkRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientForkRepositoryFuncCall is an object that describes an
// invocation of method ForkRepository on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientForkRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bitbucketcloud.ForkInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientForkRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientForkRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientGetPullRequestFunc describes the behavior when the
// GetPullRequest method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientGetPullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientGetPullRequestFuncCall
	mutex       sync.Mutex
}

// GetPullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) GetPullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.GetPullRequestFunc.nextHook()(v0, v1, v2)
	m.GetPullRequestFunc.appendCall(BitbucketCloudClientGetPullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientGetPullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientGetPullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientGetPullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientGetPullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientGetPullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientGetPullRequestFunc) appendCall(r0 BitbucketCloudClientGetPullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientGetPullRequestFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientGetPullRequestFunc) History() []BitbucketCloudClientGetPullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientGetPullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientGetPullRequestFuncCall is an object that describes an
// invocation of method GetPullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientGetPullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientGetPullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientGetPullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientGetPullRequestStatusesFunc describes the behavior
// when the GetPullRequestStatuses method of the parent
// MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientGetPullRequestStatusesFunc struct {
	defaultHook func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)
	hooks       []func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)
	history     []BitbucketCloudClientGetPullRequestStatusesFuncCall
	mutex       sync.Mutex
}

// GetPullRequestStatuses delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) GetPullRequestStatuses(v0 *bitbucketcloud.Repo, v1 int64) (*bitbucketcloud.PaginatedResultSet, error) {
	r0, r1 := m.GetPullRequestStatusesFunc.nextHook()(v0, v1)
	m.GetPullRequestStatusesFunc.appendCall(BitbucketCloudClientGetPullRequestStatusesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetPullRequestStatuses method of the parent MockBitbucketCloudClient
// instance is invoked and the hook queue is empty.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) SetDefaultHook(hook func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPullRequestStatuses method of the parent MockBitbucketCloudClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) PushHook(hook func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) SetDefaultReturn(r0 *bitbucketcloud.PaginatedResultSet, r1 error) {
	f.SetDefaultHook(func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) PushReturn(r0 *bitbucketcloud.PaginatedResultSet, r1 error) {
	f.PushHook(func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientGetPullRequestStatusesFunc) nextHook() func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientGetPullRequestStatusesFunc) appendCall(r0 BitbucketCloudClientGetPullRequestStatusesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientGetPullRequestStatusesFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) History() []BitbucketCloudClientGetPullRequestStatusesFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientGetPullRequestStatusesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientGetPullRequestStatusesFuncCall is an object that
// describes an invocation of method GetPullRequestStatuses on an instance
// of MockBitbucketCloudClient.
type BitbucketCloudClientGetPullRequestStatusesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bitbucketcloud.Repo
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PaginatedResultSet
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientGetPullRequestStatusesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientGetPullRequestStatusesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientListExplicitUserPermsForRepoFunc describes the
// behavior when the ListExplicitUserPermsForRepo method of the parent
// MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientListExplicitUserPermsForRepoFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.PageToken, string, string, *bitbucketcloud.RequestOptions) ([]*bitbucketcloud.Account, *bitbucketcloud.PageToken, error)
	hooks       []func(context.Context, *bitbucketcloud.PageToken, string, string, *bitbucketcloud.RequestOptions) ([]*bitbucketcloud.Account, *bitbucketcloud.PageToken, error)
	history     []BitbucketCloudClientListExplicitUserPermsForRepoFuncCall
	mutex       sync.Mutex
}

// ListExplicitUserPermsForRepo delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) ListExplicitUserPermsForRepo(v0 context.Context, v1 *bitbucketcloud.PageToken, v2 string, v3 string, v4 *bitbucketcloud.RequestOptions) ([]*bitbucketcloud.Account, *bitbucketcloud.PageToken, error) {
	r0, r1, r2 := m.ListExplicitUserPermsForRepoFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ListExplicitUserPermsForRepoFunc.appendCall(BitbucketCloudClientListExplicitUserPermsForRepoFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// ListExplicitUserPermsForRepo method of the parent
// MockBitbucketCloudClient instance is invoked and the hook queue is empty.
func (f *BitbucketCloudClientListExplicitUserPermsForRepoFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.PageToken, string, string, *bitbucketcloud.RequestOptions) ([]*bitbucketcloud.Account, *bitbucketcloud.PageToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListExplicitUserPermsForRepo method of the parent
// MockBitbucketCloudClient instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *BitbucketCloudClientListExplicitUserPermsForRepoFunc) PushHook(hook func(context.Context, *bitbucketcloud.PageToken, string, string, *bitbucketcloud.RequestOptions) ([]*bitbucketcloud.Account, *bitbucketcloud.PageToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientListExplicitUserPermsForRepoFunc) SetDefaultReturn(r0 []*bitbucketcloud.Account, r1 *bitbucketcloud.PageToken, r2 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.PageToken, string, string, *bitbucketcloud.RequestOptions) ([]*bitbucketcloud.Account, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientListExplicitUserPermsForRepoFunc) PushReturn(r0 []*bitbucketcloud.Account, r1 *bitbucketcloud.PageToken, r2 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.PageToken, string, string, *bitbucketcloud.RequestOptions) ([]*bitbucketcloud.Account, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

func (f *BitbucketCloudClientListExplicitUserPermsForRepoFunc) nextHook() func(context.Context, *bitbucketcloud.PageToken, string, string, *bitbucketcloud.RequestOptions) ([]*bitbucketcloud.Account, *bitbucketcloud.PageToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientListExplicitUserPermsForRepoFunc) appendCall(r0 BitbucketCloudClientListExplicitUserPermsForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientListExplicitUserPermsForRepoFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientListExplicitUserPermsForRepoFunc) History() []BitbucketCloudClientListExplicitUserPermsForRepoFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientListExplicitUserPermsForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientListExplicitUserPermsForRepoFuncCall is an object
// that describes an invocation of method ListExplicitUserPermsForRepo on an
// instance of MockBitbucketCloudClient.
type BitbucketCloudClientListExplicitUserPermsForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.PageToken
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *bitbucketcloud.RequestOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*bitbucketcloud.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *bitbucketcloud.PageToken
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientListExplicitUserPermsForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientListExplicitUserPermsForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// BitbucketCloudClientMergePullRequestFunc describes the behavior when the
// MergePullRequest method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientMergePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientMergePullRequestFuncCall
	mutex       sync.Mutex
}

// MergePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) MergePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64, v3 bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.MergePullRequestFunc.nextHook()(v0, v1, v2, v3)
	m.MergePullRequestFunc.appendCall(BitbucketCloudClientMergePullRequestFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MergePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientMergePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientMergePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientMergePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientMergePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientMergePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientMergePullRequestFunc) appendCall(r0 BitbucketCloudClientMergePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientMergePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientMergePullRequestFunc) History() []BitbucketCloudClientMergePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientMergePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientMergePullRequestFuncCall is an object that describes
// an invocation of method MergePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientMergePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bitbucketcloud.MergePullRequestOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientMergePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientMergePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientPingFunc describes the behavior when the Ping method
// of the parent MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientPingFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []BitbucketCloudClientPingFuncCall
	mutex       sync.Mutex
}

// Ping delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Ping(v0 context.Context) error {
	r0 := m.PingFunc.nextHook()(v0)
	m.PingFunc.appendCall(BitbucketCloudClientPingFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Ping method of the
// parent MockBitbucketCloudClient instance is invoked and the hook queue is
// empty.
func (f *BitbucketCloudClientPingFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Ping method of the parent MockBitbucketCloudClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BitbucketCloudClientPingFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientPingFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientPingFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *BitbucketCloudClientPingFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientPingFunc) appendCall(r0 BitbucketCloudClientPingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientPingFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientPingFunc) History() []BitbucketCloudClientPingFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientPingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientPingFuncCall is an object that describes an
// invocation of method Ping on an instance of MockBitbucketCloudClient.
type BitbucketCloudClientPingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientPingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientPingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketCloudClientRepoFunc describes the behavior when the Repo method
// of the parent MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientRepoFunc struct {
	defaultHook func(context.Context, string, string) (*bitbucketcloud.Repo, error)
	hooks       []func(context.Context, string, string) (*bitbucketcloud.Repo, error)
	history     []BitbucketCloudClientRepoFuncCall
	mutex       sync.Mutex
}

// Repo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Repo(v0 context.Context, v1 string, v2 string) (*bitbucketcloud.Repo, error) {
	r0, r1 := m.RepoFunc.nextHook()(v0, v1, v2)
	m.RepoFunc.appendCall(BitbucketCloudClientRepoFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Repo method of the
// parent MockBitbucketCloudClient instance is invoked and the hook queue is
// empty.
func (f *BitbucketCloudClientRepoFunc) SetDefaultHook(hook func(context.Context, string, string) (*bitbucketcloud.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repo method of the parent MockBitbucketCloudClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BitbucketCloudClientRepoFunc) PushHook(hook func(context.Context, string, string) (*bitbucketcloud.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientRepoFunc) SetDefaultReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientRepoFunc) PushReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.PushHook(func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientRepoFunc) nextHook() func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientRepoFunc) appendCall(r0 BitbucketCloudClientRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientRepoFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientRepoFunc) History() []BitbucketCloudClientRepoFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientRepoFuncCall is an object that describes an
// invocation of method Repo on an instance of MockBitbucketCloudClient.
type BitbucketCloudClientRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientReposFunc describes the behavior when the Repos
// method of the parent MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientReposFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.PageToken, string, *bitbucketcloud.ReposOptions) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)
	hooks       []func(context.Context, *bitbucketcloud.PageToken, string, *bitbucketcloud.ReposOptions) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)
	history     []BitbucketCloudClientReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Repos(v0 context.Context, v1 *bitbucketcloud.PageToken, v2 string, v3 *bitbucketcloud.ReposOptions) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
	r0, r1, r2 := m.ReposFunc.nextHook()(v0, v1, v2, v3)
	m.ReposFunc.appendCall(BitbucketCloudClientReposFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockBitbucketCloudClient instance is invoked and the hook queue is
// empty.
func (f *BitbucketCloudClientReposFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.PageToken, string, *bitbucketcloud.ReposOptions) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockBitbucketCloudClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BitbucketCloudClientReposFunc) PushHook(hook func(context.Context, *bitbucketcloud.PageToken, string, *bitbucketcloud.ReposOptions) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientReposFunc) SetDefaultReturn(r0 []*bitbucketcloud.Repo, r1 *bitbucketcloud.PageToken, r2 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.PageToken, string, *bitbucketcloud.ReposOptions) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientReposFunc) PushReturn(r0 []*bitbucketcloud.Repo, r1 *bitbucketcloud.PageToken, r2 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.PageToken, string, *bitbucketcloud.ReposOptions) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

func (f *BitbucketCloudClientReposFunc) nextHook() func(context.Context, *bitbucketcloud.PageToken, string, *bitbucketcloud.ReposOptions) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientReposFunc) appendCall(r0 BitbucketCloudClientReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientReposFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientReposFunc) History() []BitbucketCloudClientReposFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientReposFuncCall is an object that describes an
// invocation of method Repos on an instance of MockBitbucketCloudClient.
type BitbucketCloudClientReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.PageToken
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *bitbucketcloud.ReposOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*bitbucketcloud.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *bitbucketcloud.PageToken
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// BitbucketCloudClientUpdatePullRequestFunc describes the behavior when the
// UpdatePullRequest method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientUpdatePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientUpdatePullRequestFuncCall
	mutex       sync.Mutex
}

// UpdatePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) UpdatePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64, v3 bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.UpdatePullRequestFunc.nextHook()(v0, v1, v2, v3)
	m.UpdatePullRequestFunc.appendCall(BitbucketCloudClientUpdatePullRequestFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdatePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientUpdatePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientUpdatePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientUpdatePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientUpdatePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientUpdatePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientUpdatePullRequestFunc) appendCall(r0 BitbucketCloudClientUpdatePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientUpdatePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientUpdatePullRequestFunc) History() []BitbucketCloudClientUpdatePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientUpdatePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientUpdatePullRequestFuncCall is an object that describes
// an invocation of method UpdatePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientUpdatePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bitbucketcloud.PullRequestInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientUpdatePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientUpdatePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientWithAuthenticatorFunc describes the behavior when the
// WithAuthenticator method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) bitbucketcloud.Client
	hooks       []func(auth.Authenticator) bitbucketcloud.Client
	history     []BitbucketCloudClientWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) WithAuthenticator(v0 auth.Authenticator) bitbucketcloud.Client {
	r0 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(BitbucketCloudClientWithAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) bitbucketcloud.Client) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) bitbucketcloud.Client) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientWithAuthenticatorFunc) SetDefaultReturn(r0 bitbucketcloud.Client) {
	f.SetDefaultHook(func(auth.Authenticator) bitbucketcloud.Client {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientWithAuthenticatorFunc) PushReturn(r0 bitbucketcloud.Client) {
	f.PushHook(func(auth.Authenticator) bitbucketcloud.Client {
		return r0
	})
}

func (f *BitbucketCloudClientWithAuthenticatorFunc) nextHook() func(auth.Authenticator) bitbucketcloud.Client {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientWithAuthenticatorFunc) appendCall(r0 BitbucketCloudClientWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientWithAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientWithAuthenticatorFunc) History() []BitbucketCloudClientWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientWithAuthenticatorFuncCall is an object that describes
// an invocation of method WithAuthenticator on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bitbucketcloud.Client
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockAzureDevOpsClient is a mock implementation of the Client interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/extsvc/azuredevops) used for
// unit testing.
type MockAzureDevOpsClient struct {
	// AbandonPullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method AbandonPullRequest.
	AbandonPullRequestFunc *AzureDevOpsClientAbandonPullRequestFunc
	// AuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method Authenticator.
	AuthenticatorFunc *AzureDevOpsClientAuthenticatorFunc
	// CompletePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method CompletePullRequest.
	CompletePullRequestFunc *AzureDevOpsClientCompletePullRequestFunc
	// CreatePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePullRequest.
	CreatePullRequestFunc *AzureDevOpsClientCreatePullRequestFunc
	// CreatePullRequestCommentThreadFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CreatePullRequestCommentThread.
	CreatePullRequestCommentThreadFunc *AzureDevOpsClientCreatePullRequestCommentThreadFunc
	// ForkRepositoryFunc is an instance of a mock function object
	// controlling the behavior of the method ForkRepository.
	ForkRepositoryFunc *AzureDevOpsClientForkRepositoryFunc
	// GetAuthorizedProfileFunc is an instance of a mock function object
	// controlling the behavior of the method GetAuthorizedProfile.
	GetAuthorizedProfileFunc *AzureDevOpsClientGetAuthorizedProfileFunc
	// GetProjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetProject.
	GetProjectFunc *AzureDevOpsClientGetProjectFunc
	// GetPullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method GetPullRequest.
	GetPullRequestFunc *AzureDevOpsClientGetPullRequestFunc
	// GetPullRequestStatusesFunc is an instance of a mock function object
	// controlling the behavior of the method GetPullRequestStatuses.
	GetPullRequestStatusesFunc *AzureDevOpsClientGetPullRequestStatusesFunc
	// GetRepoFunc is an instance of a mock function object controlling the
	// behavior of the method GetRepo.
	GetRepoFunc *AzureDevOpsClientGetRepoFunc
	// GetRepositoryBranchFunc is an instance of a mock function object
	// controlling the behavior of the method GetRepositoryBranch.
	GetRepositoryBranchFunc *AzureDevOpsClientGetRepositoryBranchFunc
	// GetURLFunc is an instance of a mock function object controlling the
	// behavior of the method GetURL.
	GetURLFunc *AzureDevOpsClientGetURLFunc
	// IsAzureDevOpsServicesFunc is an instance of a mock function object
	// controlling the behavior of the method IsAzureDevOpsServices.
	IsAzureDevOpsServicesFunc *AzureDevOpsClientIsAzureDevOpsServicesFunc
	// ListAuthorizedUserOrganizationsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListAuthorizedUserOrganizations.
	ListAuthorizedUserOrganizationsFunc *AzureDevOpsClientListAuthorizedUserOrganizationsFunc
	// ListRepositoriesByProjectOrOrgFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListRepositoriesByProjectOrOrg.
	ListRepositoriesByProjectOrOrgFunc *AzureDevOpsClientListRepositoriesByProjectOrOrgFunc
	// SetWaitForRateLimitFunc is an instance of a mock function object
	// controlling the behavior of the method SetWaitForRateLimit.
	SetWaitForRateLimitFunc *AzureDevOpsClientSetWaitForRateLimitFunc
	// UpdatePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePullRequest.
	UpdatePullRequestFunc *AzureDevOpsClientUpdatePullRequestFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *AzureDevOpsClientWithAuthenticatorFunc
}

// NewMockAzureDevOpsClient creates a new mock of the Client interface. All
// methods return zero values for all results, unless overwritten.
func NewMockAzureDevOpsClient() *MockAzureDevOpsClient {
	return &MockAzureDevOpsClient{
		AbandonPullRequestFunc: &AzureDevOpsClientAbandonPullRequestFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs) (r0 azuredevops.PullRequest, r1 error) {
				return
			},
		},
		AuthenticatorFunc: &AzureDevOpsClientAuthenticatorFunc{
			defaultHook: func() (r0 auth.Authenticator) {
				return
			},
		},
		CompletePullRequestFunc: &AzureDevOpsClientCompletePullRequestFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCompleteInput) (r0 azuredevops.PullRequest, r1 error) {
				return
			},
		},
		CreatePullRequestFunc: &AzureDevOpsClientCreatePullRequestFunc{
			defaultHook: func(context.Context, azuredevops.OrgProjectRepoArgs, azuredevops.CreatePullRequestInput) (r0 azuredevops.PullRequest, r1 error) {
				return
			},
		},
		CreatePullRequestCommentThreadFunc: &AzureDevOpsClientCreatePullRequestCommentThreadFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCommentInput) (r0 azuredevops.PullRequestCommentResponse, r1 error) {
				return
			},
		},
		ForkRepositoryFunc: &AzureDevOpsClientForkRepositoryFunc{
			defaultHook: func(context.Context, string, azuredevops.ForkRepositoryInput) (r0 azuredevops.Repository, r1 error) {
				return
			},
		},
		GetAuthorizedProfileFunc: &AzureDevOpsClientGetAuthorizedProfileFunc{
			defaultHook: func(context.Context) (r0 azuredevops.Profile, r1 error) {
				return
			},
		},
		GetProjectFunc: &AzureDevOpsClientGetProjectFunc{
			defaultHook: func(context.Context, string, string) (r0 azuredevops.Project, r1 error) {
				return
			},
		},
		GetPullRequestFunc: &AzureDevOpsClientGetPullRequestFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs) (r0 azuredevops.PullRequest, r1 error) {
				return
			},
		},
		GetPullRequestStatusesFunc: &AzureDevOpsClientGetPullRequestStatusesFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs) (r0 []azuredevops.PullRequestBuildStatus, r1 error) {
				return
			},
		},
		GetRepoFunc: &AzureDevOpsClientGetRepoFunc{
			defaultHook: func(context.Context, azuredevops.OrgProjectRepoArgs) (r0 azuredevops.Repository, r1 error) {
				return
			},
		},
		GetRepositoryBranchFunc: &AzureDevOpsClientGetRepositoryBranchFunc{
			defaultHook: func(context.Context, azuredevops.OrgProjectRepoArgs, string) (r0 azuredevops.Ref, r1 error) {
				return
			},
		},
		GetURLFunc: &AzureDevOpsClientGetURLFunc{
			defaultHook: func() (r0 *url.URL) {
				return
			},
		},
		IsAzureDevOpsServicesFunc: &AzureDevOpsClientIsAzureDevOpsServicesFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
		ListAuthorizedUserOrganizationsFunc: &AzureDevOpsClientListAuthorizedUserOrganizationsFunc{
			defaultHook: func(context.Context, azuredevops.Profile) (r0 []azuredevops.Org, r1 error) {
				return
			},
		},
		ListRepositoriesByProjectOrOrgFunc: &AzureDevOpsClientListRepositoriesByProjectOrOrgFunc{
			defaultHook: func(context.Context, azuredevops.ListRepositoriesByProjectOrOrgArgs) (r0 []azuredevops.Repository, r1 error) {
				return
			},
		},
		SetWaitForRateLimitFunc: &AzureDevOpsClientSetWaitForRateLimitFunc{
			defaultHook: func(bool) {
				return
			},
		},
		UpdatePullRequestFunc: &AzureDevOpsClientUpdatePullRequestFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestUpdateInput) (r0 azuredevops.PullRequest, r1 error) {
				return
			},
		},
		WithAuthenticatorFunc: &AzureDevOpsClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 azuredevops.Client, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockAzureDevOpsClient creates a new mock of the Client
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAzureDevOpsClient() *MockAzureDevOpsClient {
	return &MockAzureDevOpsClient{
		AbandonPullRequestFunc: &AzureDevOpsClientAbandonPullRequestFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.AbandonPullRequest")
			},
		},
		AuthenticatorFunc: &AzureDevOpsClientAuthenticatorFunc{
			defaultHook: func() auth.Authenticator {
				panic("unexpected invocation of MockAzureDevOpsClient.Authenticator")
			},
		},
		CompletePullRequestFunc: &AzureDevOpsClientCompletePullRequestFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCompleteInput) (azuredevops.PullRequest, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.CompletePullRequest")
			},
		},
		CreatePullRequestFunc: &AzureDevOpsClientCreatePullRequestFunc{
			defaultHook: func(context.Context, azuredevops.OrgProjectRepoArgs, azuredevops.CreatePullRequestInput) (azuredevops.PullRequest, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.CreatePullRequest")
			},
		},
		CreatePullRequestCommentThreadFunc: &AzureDevOpsClientCreatePullRequestCommentThreadFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCommentInput) (azuredevops.PullRequestCommentResponse, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.CreatePullRequestCommentThread")
			},
		},
		ForkRepositoryFunc: &AzureDevOpsClientForkRepositoryFunc{
			defaultHook: func(context.Context, string, azuredevops.ForkRepositoryInput) (azuredevops.Repository, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.ForkRepository")
			},
		},
		GetAuthorizedProfileFunc: &AzureDevOpsClientGetAuthorizedProfileFunc{
			defaultHook: func(context.Context) (azuredevops.Profile, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.GetAuthorizedProfile")
			},
		},
		GetProjectFunc: &AzureDevOpsClientGetProjectFunc{
			defaultHook: func(context.Context, string, string) (azuredevops.Project, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.GetProject")
			},
		},
		GetPullRequestFunc: &AzureDevOpsClientGetPullRequestFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.GetPullRequest")
			},
		},
		GetPullRequestStatusesFunc: &AzureDevOpsClientGetPullRequestStatusesFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs) ([]azuredevops.PullRequestBuildStatus, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.GetPullRequestStatuses")
			},
		},
		GetRepoFunc: &AzureDevOpsClientGetRepoFunc{
			defaultHook: func(context.Context, azuredevops.OrgProjectRepoArgs) (azuredevops.Repository, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.GetRepo")
			},
		},
		GetRepositoryBranchFunc: &AzureDevOpsClientGetRepositoryBranchFunc{
			defaultHook: func(context.Context, azuredevops.OrgProjectRepoArgs, string) (azuredevops.Ref, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.GetRepositoryBranch")
			},
		},
		GetURLFunc: &AzureDevOpsClientGetURLFunc{
			defaultHook: func() *url.URL {
				panic("unexpected invocation of MockAzureDevOpsClient.GetURL")
			},
		},
		IsAzureDevOpsServicesFunc: &AzureDevOpsClientIsAzureDevOpsServicesFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockAzureDevOpsClient.IsAzureDevOpsServices")
			},
		},
		ListAuthorizedUserOrganizationsFunc: &AzureDevOpsClientListAuthorizedUserOrganizationsFunc{
			defaultHook: func(context.Context, azuredevops.Profile) ([]azuredevops.Org, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.ListAuthorizedUserOrganizations")
			},
		},
		ListRepositoriesByProjectOrOrgFunc: &AzureDevOpsClientListRepositoriesByProjectOrOrgFunc{
			defaultHook: func(context.Context, azuredevops.ListRepositoriesByProjectOrOrgArgs) ([]azuredevops.Repository, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.ListRepositoriesByProjectOrOrg")
			},
		},
		SetWaitForRateLimitFunc: &AzureDevOpsClientSetWaitForRateLimitFunc{
			defaultHook: func(bool) {
				panic("unexpected invocation of MockAzureDevOpsClient.SetWaitForRateLimit")
			},
		},
		UpdatePullRequestFunc: &AzureDevOpsClientUpdatePullRequestFunc{
			defaultHook: func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestUpdateInput) (azuredevops.PullRequest, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.UpdatePullRequest")
			},
		},
		WithAuthenticatorFunc: &AzureDevOpsClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (azuredevops.Client, error) {
				panic("unexpected invocation of MockAzureDevOpsClient.WithAuthenticator")
			},
		},
	}
}

// NewMockAzureDevOpsClientFrom creates a new mock of the
// MockAzureDevOpsClient interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAzureDevOpsClientFrom(i azuredevops.Client) *MockAzureDevOpsClient {
	return &MockAzureDevOpsClient{
		AbandonPullRequestFunc: &AzureDevOpsClientAbandonPullRequestFunc{
			defaultHook: i.AbandonPullRequest,
		},
		AuthenticatorFunc: &AzureDevOpsClientAuthenticatorFunc{
			defaultHook: i.Authenticator,
		},
		CompletePullRequestFunc: &AzureDevOpsClientCompletePullRequestFunc{
			defaultHook: i.CompletePullRequest,
		},
		CreatePullRequestFunc: &AzureDevOpsClientCreatePullRequestFunc{
			defaultHook: i.CreatePullRequest,
		},
		CreatePullRequestCommentThreadFunc: &AzureDevOpsClientCreatePullRequestCommentThreadFunc{
			defaultHook: i.CreatePullRequestCommentThread,
		},
		ForkRepositoryFunc: &AzureDevOpsClientForkRepositoryFunc{
			defaultHook: i.ForkRepository,
		},
		GetAuthorizedProfileFunc: &AzureDevOpsClientGetAuthorizedProfileFunc{
			defaultHook: i.GetAuthorizedProfile,
		},
		GetProjectFunc: &AzureDevOpsClientGetProjectFunc{
			defaultHook: i.GetProject,
		},
		GetPullRequestFunc: &AzureDevOpsClientGetPullRequestFunc{
			defaultHook: i.GetPullRequest,
		},
		GetPullRequestStatusesFunc: &AzureDevOpsClientGetPullRequestStatusesFunc{
			defaultHook: i.GetPullRequestStatuses,
		},
		GetRepoFunc: &AzureDevOpsClientGetRepoFunc{
			defaultHook: i.GetRepo,
		},
		GetRepositoryBranchFunc: &AzureDevOpsClientGetRepositoryBranchFunc{
			defaultHook: i.GetRepositoryBranch,
		},
		GetURLFunc: &AzureDevOpsClientGetURLFunc{
			defaultHook: i.GetURL,
		},
		IsAzureDevOpsServicesFunc: &AzureDevOpsClientIsAzureDevOpsServicesFunc{
			defaultHook: i.IsAzureDevOpsServices,
		},
		ListAuthorizedUserOrganizationsFunc: &AzureDevOpsClientListAuthorizedUserOrganizationsFunc{
			defaultHook: i.ListAuthorizedUserOrganizations,
		},
		ListRepositoriesByProjectOrOrgFunc: &AzureDevOpsClientListRepositoriesByProjectOrOrgFunc{
			defaultHook: i.ListRepositoriesByProjectOrOrg,
		},
		SetWaitForRateLimitFunc: &AzureDevOpsClientSetWaitForRateLimitFunc{
			defaultHook: i.SetWaitForRateLimit,
		},
		UpdatePullRequestFunc: &AzureDevOpsClientUpdatePullRequestFunc{
			defaultHook: i.UpdatePullRequest,
		},
		WithAuthenticatorFunc: &AzureDevOpsClientWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// AzureDevOpsClientAbandonPullRequestFunc describes the behavior when the
// AbandonPullRequest method of the parent MockAzureDevOpsClient instance is
// invoked.
type AzureDevOpsClientAbandonPullRequestFunc struct {
	defaultHook func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error)
	hooks       []func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error)
	history     []AzureDevOpsClientAbandonPullRequestFuncCall
	mutex       sync.Mutex
}

// AbandonPullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) AbandonPullRequest(v0 context.Context, v1 azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
	r0, r1 := m.AbandonPullRequestFunc.nextHook()(v0, v1)
	m.AbandonPullRequestFunc.appendCall(AzureDevOpsClientAbandonPullRequestFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AbandonPullRequest
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientAbandonPullRequestFunc) SetDefaultHook(hook func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AbandonPullRequest method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientAbandonPullRequestFunc) PushHook(hook func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientAbandonPullRequestFunc) SetDefaultReturn(r0 azuredevops.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientAbandonPullRequestFunc) PushReturn(r0 azuredevops.PullRequest, r1 error) {
	f.PushHook(func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientAbandonPullRequestFunc) nextHook() func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientAbandonPullRequestFunc) appendCall(r0 AzureDevOpsClientAbandonPullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientAbandonPullRequestFuncCall
// objects describing the invocations of this function.
func (f *AzureDevOpsClientAbandonPullRequestFunc) History() []AzureDevOpsClientAbandonPullRequestFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientAbandonPullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientAbandonPullRequestFuncCall is an object that describes
// an invocation of method AbandonPullRequest on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientAbandonPullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.PullRequestCommonArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientAbandonPullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientAbandonPullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientAuthenticatorFunc describes the behavior when the
// Authenticator method of the parent MockAzureDevOpsClient instance is
// invoked.
type AzureDevOpsClientAuthenticatorFunc struct {
	defaultHook func() auth.Authenticator
	hooks       []func() auth.Authenticator
	history     []AzureDevOpsClientAuthenticatorFuncCall
	mutex       sync.Mutex
}

// Authenticator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) Authenticator() auth.Authenticator {
	r0 := m.AuthenticatorFunc.nextHook()()
	m.AuthenticatorFunc.appendCall(AzureDevOpsClientAuthenticatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authenticator method
// of the parent MockAzureDevOpsClient instance is invoked and the hook
// queue is empty.
func (f *AzureDevOpsClientAuthenticatorFunc) SetDefaultHook(hook func() auth.Authenticator) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authenticator method of the parent MockAzureDevOpsClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AzureDevOpsClientAuthenticatorFunc) PushHook(hook func() auth.Authenticator) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientAuthenticatorFunc) SetDefaultReturn(r0 auth.Authenticator) {
	f.SetDefaultHook(func() auth.Authenticator {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientAuthenticatorFunc) PushReturn(r0 auth.Authenticator) {
	f.PushHook(func() auth.Authenticator {
		return r0
	})
}

func (f *AzureDevOpsClientAuthenticatorFunc) nextHook() func() auth.Authenticator {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientAuthenticatorFunc) appendCall(r0 AzureDevOpsClientAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *AzureDevOpsClientAuthenticatorFunc) History() []AzureDevOpsClientAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientAuthenticatorFuncCall is an object that describes an
// invocation of method Authenticator on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientAuthenticatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 auth.Authenticator
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AzureDevOpsClientCompletePullRequestFunc describes the behavior when the
// CompletePullRequest method of the parent MockAzureDevOpsClient instance
// is invoked.
type AzureDevOpsClientCompletePullRequestFunc struct {
	defaultHook func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCompleteInput) (azuredevops.PullRequest, error)
	hooks       []func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCompleteInput) (azuredevops.PullRequest, error)
	history     []AzureDevOpsClientCompletePullRequestFuncCall
	mutex       sync.Mutex
}

// CompletePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) CompletePullRequest(v0 context.Context, v1 azuredevops.PullRequestCommonArgs, v2 azuredevops.PullRequestCompleteInput) (azuredevops.PullRequest, error) {
	r0, r1 := m.CompletePullRequestFunc.nextHook()(v0, v1, v2)
	m.CompletePullRequestFunc.appendCall(AzureDevOpsClientCompletePullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CompletePullRequest
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientCompletePullRequestFunc) SetDefaultHook(hook func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCompleteInput) (azuredevops.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CompletePullRequest method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientCompletePullRequestFunc) PushHook(hook func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCompleteInput) (azuredevops.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientCompletePullRequestFunc) SetDefaultReturn(r0 azuredevops.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCompleteInput) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientCompletePullRequestFunc) PushReturn(r0 azuredevops.PullRequest, r1 error) {
	f.PushHook(func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCompleteInput) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientCompletePullRequestFunc) nextHook() func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCompleteInput) (azuredevops.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientCompletePullRequestFunc) appendCall(r0 AzureDevOpsClientCompletePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AzureDevOpsClientCompletePullRequestFuncCall objects describing the
// invocations of this function.
func (f *AzureDevOpsClientCompletePullRequestFunc) History() []AzureDevOpsClientCompletePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientCompletePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientCompletePullRequestFuncCall is an object that describes
// an invocation of method CompletePullRequest on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientCompletePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.PullRequestCommonArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 azuredevops.PullRequestCompleteInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientCompletePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientCompletePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientCreatePullRequestFunc describes the behavior when the
// CreatePullRequest method of the parent MockAzureDevOpsClient instance is
// invoked.
type AzureDevOpsClientCreatePullRequestFunc struct {
	defaultHook func(context.Context, azuredevops.OrgProjectRepoArgs, azuredevops.CreatePullRequestInput) (azuredevops.PullRequest, error)
	hooks       []func(context.Context, azuredevops.OrgProjectRepoArgs, azuredevops.CreatePullRequestInput) (azuredevops.PullRequest, error)
	history     []AzureDevOpsClientCreatePullRequestFuncCall
	mutex       sync.Mutex
}

// CreatePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) CreatePullRequest(v0 context.Context, v1 azuredevops.OrgProjectRepoArgs, v2 azuredevops.CreatePullRequestInput) (azuredevops.PullRequest, error) {
	r0, r1 := m.CreatePullRequestFunc.nextHook()(v0, v1, v2)
	m.CreatePullRequestFunc.appendCall(AzureDevOpsClientCreatePullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreatePullRequest
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientCreatePullRequestFunc) SetDefaultHook(hook func(context.Context, azuredevops.OrgProjectRepoArgs, azuredevops.CreatePullRequestInput) (azuredevops.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePullRequest method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientCreatePullRequestFunc) PushHook(hook func(context.Context, azuredevops.OrgProjectRepoArgs, azuredevops.CreatePullRequestInput) (azuredevops.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientCreatePullRequestFunc) SetDefaultReturn(r0 azuredevops.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.OrgProjectRepoArgs, azuredevops.CreatePullRequestInput) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientCreatePullRequestFunc) PushReturn(r0 azuredevops.PullRequest, r1 error) {
	f.PushHook(func(context.Context, azuredevops.OrgProjectRepoArgs, azuredevops.CreatePullRequestInput) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientCreatePullRequestFunc) nextHook() func(context.Context, azuredevops.OrgProjectRepoArgs, azuredevops.CreatePullRequestInput) (azuredevops.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientCreatePullRequestFunc) appendCall(r0 AzureDevOpsClientCreatePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientCreatePullRequestFuncCall
// objects describing the invocations of this function.
func (f *AzureDevOpsClientCreatePullRequestFunc) History() []AzureDevOpsClientCreatePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientCreatePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientCreatePullRequestFuncCall is an object that describes an
// invocation of method CreatePullRequest on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientCreatePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.OrgProjectRepoArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 azuredevops.CreatePullRequestInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientCreatePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientCreatePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientCreatePullRequestCommentThreadFunc describes the
// behavior when the CreatePullRequestCommentThread method of the parent
// MockAzureDevOpsClient instance is invoked.
type AzureDevOpsClientCreatePullRequestCommentThreadFunc struct {
	defaultHook func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCommentInput) (azuredevops.PullRequestCommentResponse, error)
	hooks       []func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCommentInput) (azuredevops.PullRequestCommentResponse, error)
	history     []AzureDevOpsClientCreatePullRequestCommentThreadFuncCall
	mutex       sync.Mutex
}

// CreatePullRequestCommentThread delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) CreatePullRequestCommentThread(v0 context.Context, v1 azuredevops.PullRequestCommonArgs, v2 azuredevops.PullRequestCommentInput) (azuredevops.PullRequestCommentResponse, error) {
	r0, r1 := m.CreatePullRequestCommentThreadFunc.nextHook()(v0, v1, v2)
	m.CreatePullRequestCommentThreadFunc.appendCall(AzureDevOpsClientCreatePullRequestCommentThreadFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreatePullRequestCommentThread method of the parent MockAzureDevOpsClient
// instance is invoked and the hook queue is empty.
func (f *AzureDevOpsClientCreatePullRequestCommentThreadFunc) SetDefaultHook(hook func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCommentInput) (azuredevops.PullRequestCommentResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePullRequestCommentThread method of the parent MockAzureDevOpsClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *AzureDevOpsClientCreatePullRequestCommentThreadFunc) PushHook(hook func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCommentInput) (azuredevops.PullRequestCommentResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientCreatePullRequestCommentThreadFunc) SetDefaultReturn(r0 azuredevops.PullRequestCommentResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCommentInput) (azuredevops.PullRequestCommentResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientCreatePullRequestCommentThreadFunc) PushReturn(r0 azuredevops.PullRequestCommentResponse, r1 error) {
	f.PushHook(func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCommentInput) (azuredevops.PullRequestCommentResponse, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientCreatePullRequestCommentThreadFunc) nextHook() func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestCommentInput) (azuredevops.PullRequestCommentResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientCreatePullRequestCommentThreadFunc) appendCall(r0 AzureDevOpsClientCreatePullRequestCommentThreadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AzureDevOpsClientCreatePullRequestCommentThreadFuncCall objects
// describing the invocations of this function.
func (f *AzureDevOpsClientCreatePullRequestCommentThreadFunc) History() []AzureDevOpsClientCreatePullRequestCommentThreadFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientCreatePullRequestCommentThreadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientCreatePullRequestCommentThreadFuncCall is an object that
// describes an invocation of method CreatePullRequestCommentThread on an
// instance of MockAzureDevOpsClient.
type AzureDevOpsClientCreatePullRequestCommentThreadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.PullRequestCommonArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 azuredevops.PullRequestCommentInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.PullRequestCommentResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientCreatePullRequestCommentThreadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientCreatePullRequestCommentThreadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientForkRepositoryFunc describes the behavior when the
// ForkRepository method of the parent MockAzureDevOpsClient instance is
// invoked.
type AzureDevOpsClientForkRepositoryFunc struct {
	defaultHook func(context.Context, string, azuredevops.ForkRepositoryInput) (azuredevops.Repository, error)
	hooks       []func(context.Context, string, azuredevops.ForkRepositoryInput) (azuredevops.Repository, error)
	history     []AzureDevOpsClientForkRepositoryFuncCall
	mutex       sync.Mutex
}

// ForkRepository delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) ForkRepository(v0 context.Context, v1 string, v2 azuredevops.ForkRepositoryInput) (azuredevops.Repository, error) {
	r0, r1 := m.ForkRepositoryFunc.nextHook()(v0, v1, v2)
	m.ForkRepositoryFunc.appendCall(AzureDevOpsClientForkRepositoryFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ForkRepository
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientForkRepositoryFunc) SetDefaultHook(hook func(context.Context, string, azuredevops.ForkRepositoryInput) (azuredevops.Repository, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ForkRepository method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientForkRepositoryFunc) PushHook(hook func(context.Context, string, azuredevops.ForkRepositoryInput) (azuredevops.Repository, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientForkRepositoryFunc) SetDefaultReturn(r0 azuredevops.Repository, r1 error) {
	f.SetDefaultHook(func(context.Context, string, azuredevops.ForkRepositoryInput) (azuredevops.Repository, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientForkRepositoryFunc) PushReturn(r0 azuredevops.Repository, r1 error) {
	f.PushHook(func(context.Context, string, azuredevops.ForkRepositoryInput) (azuredevops.Repository, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientForkRepositoryFunc) nextHook() func(context.Context, string, azuredevops.ForkRepositoryInput) (azuredevops.Repository, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientForkRepositoryFunc) appendCall(r0 AzureDevOpsClientForkRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientForkRepositoryFuncCall
// objects describing the invocations of this function.
func (f *AzureDevOpsClientForkRepositoryFunc) History() []AzureDevOpsClientForkRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientForkRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientForkRepositoryFuncCall is an object that describes an
// invocation of method ForkRepository on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientForkRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 azuredevops.ForkRepositoryInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.Repository
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientForkRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientForkRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientGetAuthorizedProfileFunc describes the behavior when the
// GetAuthorizedProfile method of the parent MockAzureDevOpsClient instance
// is invoked.
type AzureDevOpsClientGetAuthorizedProfileFunc struct {
	defaultHook func(context.Context) (azuredevops.Profile, error)
	hooks       []func(context.Context) (azuredevops.Profile, error)
	history     []AzureDevOpsClientGetAuthorizedProfileFuncCall
	mutex       sync.Mutex
}

// GetAuthorizedProfile delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) GetAuthorizedProfile(v0 context.Context) (azuredevops.Profile, error) {
	r0, r1 := m.GetAuthorizedProfileFunc.nextHook()(v0)
	m.GetAuthorizedProfileFunc.appendCall(AzureDevOpsClientGetAuthorizedProfileFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAuthorizedProfile
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientGetAuthorizedProfileFunc) SetDefaultHook(hook func(context.Context) (azuredevops.Profile, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuthorizedProfile method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientGetAuthorizedProfileFunc) PushHook(hook func(context.Context) (azuredevops.Profile, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientGetAuthorizedProfileFunc) SetDefaultReturn(r0 azuredevops.Profile, r1 error) {
	f.SetDefaultHook(func(context.Context) (azuredevops.Profile, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientGetAuthorizedProfileFunc) PushReturn(r0 azuredevops.Profile, r1 error) {
	f.PushHook(func(context.Context) (azuredevops.Profile, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientGetAuthorizedProfileFunc) nextHook() func(context.Context) (azuredevops.Profile, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientGetAuthorizedProfileFunc) appendCall(r0 AzureDevOpsClientGetAuthorizedProfileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AzureDevOpsClientGetAuthorizedProfileFuncCall objects describing the
// invocations of this function.
func (f *AzureDevOpsClientGetAuthorizedProfileFunc) History() []AzureDevOpsClientGetAuthorizedProfileFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientGetAuthorizedProfileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientGetAuthorizedProfileFuncCall is an object that describes
// an invocation of method GetAuthorizedProfile on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientGetAuthorizedProfileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.Profile
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientGetAuthorizedProfileFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientGetAuthorizedProfileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientGetProjectFunc describes the behavior when the
// GetProject method of the parent MockAzureDevOpsClient instance is
// invoked.
type AzureDevOpsClientGetProjectFunc struct {
	defaultHook func(context.Context, string, string) (azuredevops.Project, error)
	hooks       []func(context.Context, string, string) (azuredevops.Project, error)
	history     []AzureDevOpsClientGetProjectFuncCall
	mutex       sync.Mutex
}

// GetProject delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) GetProject(v0 context.Context, v1 string, v2 string) (azuredevops.Project, error) {
	r0, r1 := m.GetProjectFunc.nextHook()(v0, v1, v2)
	m.GetProjectFunc.appendCall(AzureDevOpsClientGetProjectFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetProject method of
// the parent MockAzureDevOpsClient instance is invoked and the hook queue
// is empty.
func (f *AzureDevOpsClientGetProjectFunc) SetDefaultHook(hook func(context.Context, string, string) (azuredevops.Project, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetProject method of the parent MockAzureDevOpsClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AzureDevOpsClientGetProjectFunc) PushHook(hook func(context.Context, string, string) (azuredevops.Project, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientGetProjectFunc) SetDefaultReturn(r0 azuredevops.Project, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (azuredevops.Project, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientGetProjectFunc) PushReturn(r0 azuredevops.Project, r1 error) {
	f.PushHook(func(context.Context, string, string) (azuredevops.Project, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientGetProjectFunc) nextHook() func(context.Context, string, string) (azuredevops.Project, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientGetProjectFunc) appendCall(r0 AzureDevOpsClientGetProjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientGetProjectFuncCall objects
// describing the invocations of this function.
func (f *AzureDevOpsClientGetProjectFunc) History() []AzureDevOpsClientGetProjectFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientGetProjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientGetProjectFuncCall is an object that describes an
// invocation of method GetProject on an instance of MockAzureDevOpsClient.
type AzureDevOpsClientGetProjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.Project
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientGetProjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientGetProjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientGetPullRequestFunc describes the behavior when the
// GetPullRequest method of the parent MockAzureDevOpsClient instance is
// invoked.
type AzureDevOpsClientGetPullRequestFunc struct {
	defaultHook func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error)
	hooks       []func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error)
	history     []AzureDevOpsClientGetPullRequestFuncCall
	mutex       sync.Mutex
}

// GetPullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) GetPullRequest(v0 context.Context, v1 azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
	r0, r1 := m.GetPullRequestFunc.nextHook()(v0, v1)
	m.GetPullRequestFunc.appendCall(AzureDevOpsClientGetPullRequestFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPullRequest
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientGetPullRequestFunc) SetDefaultHook(hook func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPullRequest method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientGetPullRequestFunc) PushHook(hook func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientGetPullRequestFunc) SetDefaultReturn(r0 azuredevops.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientGetPullRequestFunc) PushReturn(r0 azuredevops.PullRequest, r1 error) {
	f.PushHook(func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientGetPullRequestFunc) nextHook() func(context.Context, azuredevops.PullRequestCommonArgs) (azuredevops.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientGetPullRequestFunc) appendCall(r0 AzureDevOpsClientGetPullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientGetPullRequestFuncCall
// objects describing the invocations of this function.
func (f *AzureDevOpsClientGetPullRequestFunc) History() []AzureDevOpsClientGetPullRequestFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientGetPullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientGetPullRequestFuncCall is an object that describes an
// invocation of method GetPullRequest on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientGetPullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.PullRequestCommonArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientGetPullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientGetPullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientGetPullRequestStatusesFunc describes the behavior when
// the GetPullRequestStatuses method of the parent MockAzureDevOpsClient
// instance is invoked.
type AzureDevOpsClientGetPullRequestStatusesFunc struct {
	defaultHook func(context.Context, azuredevops.PullRequestCommonArgs) ([]azuredevops.PullRequestBuildStatus, error)
	hooks       []func(context.Context, azuredevops.PullRequestCommonArgs) ([]azuredevops.PullRequestBuildStatus, error)
	history     []AzureDevOpsClientGetPullRequestStatusesFuncCall
	mutex       sync.Mutex
}

// GetPullRequestStatuses delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) GetPullRequestStatuses(v0 context.Context, v1 azuredevops.PullRequestCommonArgs) ([]azuredevops.PullRequestBuildStatus, error) {
	r0, r1 := m.GetPullRequestStatusesFunc.nextHook()(v0, v1)
	m.GetPullRequestStatusesFunc.appendCall(AzureDevOpsClientGetPullRequestStatusesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetPullRequestStatuses method of the parent MockAzureDevOpsClient
// instance is invoked and the hook queue is empty.
func (f *AzureDevOpsClientGetPullRequestStatusesFunc) SetDefaultHook(hook func(context.Context, azuredevops.PullRequestCommonArgs) ([]azuredevops.PullRequestBuildStatus, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPullRequestStatuses method of the parent MockAzureDevOpsClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *AzureDevOpsClientGetPullRequestStatusesFunc) PushHook(hook func(context.Context, azuredevops.PullRequestCommonArgs) ([]azuredevops.PullRequestBuildStatus, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientGetPullRequestStatusesFunc) SetDefaultReturn(r0 []azuredevops.PullRequestBuildStatus, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.PullRequestCommonArgs) ([]azuredevops.PullRequestBuildStatus, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientGetPullRequestStatusesFunc) PushReturn(r0 []azuredevops.PullRequestBuildStatus, r1 error) {
	f.PushHook(func(context.Context, azuredevops.PullRequestCommonArgs) ([]azuredevops.PullRequestBuildStatus, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientGetPullRequestStatusesFunc) nextHook() func(context.Context, azuredevops.PullRequestCommonArgs) ([]azuredevops.PullRequestBuildStatus, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientGetPullRequestStatusesFunc) appendCall(r0 AzureDevOpsClientGetPullRequestStatusesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AzureDevOpsClientGetPullRequestStatusesFuncCall objects describing the
// invocations of this function.
func (f *AzureDevOpsClientGetPullRequestStatusesFunc) History() []AzureDevOpsClientGetPullRequestStatusesFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientGetPullRequestStatusesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientGetPullRequestStatusesFuncCall is an object that
// describes an invocation of method GetPullRequestStatuses on an instance
// of MockAzureDevOpsClient.
type AzureDevOpsClientGetPullRequestStatusesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.PullRequestCommonArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []azuredevops.PullRequestBuildStatus
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientGetPullRequestStatusesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientGetPullRequestStatusesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientGetRepoFunc describes the behavior when the GetRepo
// method of the parent MockAzureDevOpsClient instance is invoked.
type AzureDevOpsClientGetRepoFunc struct {
	defaultHook func(context.Context, azuredevops.OrgProjectRepoArgs) (azuredevops.Repository, error)
	hooks       []func(context.Context, azuredevops.OrgProjectRepoArgs) (azuredevops.Repository, error)
	history     []AzureDevOpsClientGetRepoFuncCall
	mutex       sync.Mutex
}

// GetRepo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) GetRepo(v0 context.Context, v1 azuredevops.OrgProjectRepoArgs) (azuredevops.Repository, error) {
	r0, r1 := m.GetRepoFunc.nextHook()(v0, v1)
	m.GetRepoFunc.appendCall(AzureDevOpsClientGetRepoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRepo method of
// the parent MockAzureDevOpsClient instance is invoked and the hook queue
// is empty.
func (f *AzureDevOpsClientGetRepoFunc) SetDefaultHook(hook func(context.Context, azuredevops.OrgProjectRepoArgs) (azuredevops.Repository, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRepo method of the parent MockAzureDevOpsClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AzureDevOpsClientGetRepoFunc) PushHook(hook func(context.Context, azuredevops.OrgProjectRepoArgs) (azuredevops.Repository, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientGetRepoFunc) SetDefaultReturn(r0 azuredevops.Repository, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.OrgProjectRepoArgs) (azuredevops.Repository, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientGetRepoFunc) PushReturn(r0 azuredevops.Repository, r1 error) {
	f.PushHook(func(context.Context, azuredevops.OrgProjectRepoArgs) (azuredevops.Repository, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientGetRepoFunc) nextHook() func(context.Context, azuredevops.OrgProjectRepoArgs) (azuredevops.Repository, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientGetRepoFunc) appendCall(r0 AzureDevOpsClientGetRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientGetRepoFuncCall objects
// describing the invocations of this function.
func (f *AzureDevOpsClientGetRepoFunc) History() []AzureDevOpsClientGetRepoFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientGetRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientGetRepoFuncCall is an object that describes an
// invocation of method GetRepo on an instance of MockAzureDevOpsClient.
type AzureDevOpsClientGetRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.OrgProjectRepoArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.Repository
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientGetRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientGetRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientGetRepositoryBranchFunc describes the behavior when the
// GetRepositoryBranch method of the parent MockAzureDevOpsClient instance
// is invoked.
type AzureDevOpsClientGetRepositoryBranchFunc struct {
	defaultHook func(context.Context, azuredevops.OrgProjectRepoArgs, string) (azuredevops.Ref, error)
	hooks       []func(context.Context, azuredevops.OrgProjectRepoArgs, string) (azuredevops.Ref, error)
	history     []AzureDevOpsClientGetRepositoryBranchFuncCall
	mutex       sync.Mutex
}

// GetRepositoryBranch delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) GetRepositoryBranch(v0 context.Context, v1 azuredevops.OrgProjectRepoArgs, v2 string) (azuredevops.Ref, error) {
	r0, r1 := m.GetRepositoryBranchFunc.nextHook()(v0, v1, v2)
	m.GetRepositoryBranchFunc.appendCall(AzureDevOpsClientGetRepositoryBranchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRepositoryBranch
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientGetRepositoryBranchFunc) SetDefaultHook(hook func(context.Context, azuredevops.OrgProjectRepoArgs, string) (azuredevops.Ref, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRepositoryBranch method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientGetRepositoryBranchFunc) PushHook(hook func(context.Context, azuredevops.OrgProjectRepoArgs, string) (azuredevops.Ref, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientGetRepositoryBranchFunc) SetDefaultReturn(r0 azuredevops.Ref, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.OrgProjectRepoArgs, string) (azuredevops.Ref, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientGetRepositoryBranchFunc) PushReturn(r0 azuredevops.Ref, r1 error) {
	f.PushHook(func(context.Context, azuredevops.OrgProjectRepoArgs, string) (azuredevops.Ref, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientGetRepositoryBranchFunc) nextHook() func(context.Context, azuredevops.OrgProjectRepoArgs, string) (azuredevops.Ref, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientGetRepositoryBranchFunc) appendCall(r0 AzureDevOpsClientGetRepositoryBranchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AzureDevOpsClientGetRepositoryBranchFuncCall objects describing the
// invocations of this function.
func (f *AzureDevOpsClientGetRepositoryBranchFunc) History() []AzureDevOpsClientGetRepositoryBranchFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientGetRepositoryBranchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientGetRepositoryBranchFuncCall is an object that describes
// an invocation of method GetRepositoryBranch on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientGetRepositoryBranchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.OrgProjectRepoArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.Ref
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientGetRepositoryBranchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientGetRepositoryBranchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientGetURLFunc describes the behavior when the GetURL method
// of the parent MockAzureDevOpsClient instance is invoked.
type AzureDevOpsClientGetURLFunc struct {
	defaultHook func() *url.URL
	hooks       []func() *url.URL
	history     []AzureDevOpsClientGetURLFuncCall
	mutex       sync.Mutex
}

// GetURL delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) GetURL() *url.URL {
	r0 := m.GetURLFunc.nextHook()()
	m.GetURLFunc.appendCall(AzureDevOpsClientGetURLFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetURL method of the
// parent MockAzureDevOpsClient instance is invoked and the hook queue is
// empty.
func (f *AzureDevOpsClientGetURLFunc) SetDefaultHook(hook func() *url.URL) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetURL method of the parent MockAzureDevOpsClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AzureDevOpsClientGetURLFunc) PushHook(hook func() *url.URL) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientGetURLFunc) SetDefaultReturn(r0 *url.URL) {
	f.SetDefaultHook(func() *url.URL {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientGetURLFunc) PushReturn(r0 *url.URL) {
	f.PushHook(func() *url.URL {
		return r0
	})
}

func (f *AzureDevOpsClientGetURLFunc) nextHook() func() *url.URL {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientGetURLFunc) appendCall(r0 AzureDevOpsClientGetURLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientGetURLFuncCall objects
// describing the invocations of this function.
func (f *AzureDevOpsClientGetURLFunc) History() []AzureDevOpsClientGetURLFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientGetURLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientGetURLFuncCall is an object that describes an invocation
// of method GetURL on an instance of MockAzureDevOpsClient.
type AzureDevOpsClientGetURLFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *url.URL
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientGetURLFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientGetURLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AzureDevOpsClientIsAzureDevOpsServicesFunc describes the behavior when
// the IsAzureDevOpsServices method of the parent MockAzureDevOpsClient
// instance is invoked.
type AzureDevOpsClientIsAzureDevOpsServicesFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []AzureDevOpsClientIsAzureDevOpsServicesFuncCall
	mutex       sync.Mutex
}

// IsAzureDevOpsServices delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) IsAzureDevOpsServices() bool {
	r0 := m.IsAzureDevOpsServicesFunc.nextHook()()
	m.IsAzureDevOpsServicesFunc.appendCall(AzureDevOpsClientIsAzureDevOpsServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IsAzureDevOpsServices method of the parent MockAzureDevOpsClient instance
// is invoked and the hook queue is empty.
func (f *AzureDevOpsClientIsAzureDevOpsServicesFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsAzureDevOpsServices method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientIsAzureDevOpsServicesFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientIsAzureDevOpsServicesFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientIsAzureDevOpsServicesFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *AzureDevOpsClientIsAzureDevOpsServicesFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientIsAzureDevOpsServicesFunc) appendCall(r0 AzureDevOpsClientIsAzureDevOpsServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AzureDevOpsClientIsAzureDevOpsServicesFuncCall objects describing the
// invocations of this function.
func (f *AzureDevOpsClientIsAzureDevOpsServicesFunc) History() []AzureDevOpsClientIsAzureDevOpsServicesFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientIsAzureDevOpsServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientIsAzureDevOpsServicesFuncCall is an object that
// describes an invocation of method IsAzureDevOpsServices on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientIsAzureDevOpsServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientIsAzureDevOpsServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientIsAzureDevOpsServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AzureDevOpsClientListAuthorizedUserOrganizationsFunc describes the
// behavior when the ListAuthorizedUserOrganizations method of the parent
// MockAzureDevOpsClient instance is invoked.
type AzureDevOpsClientListAuthorizedUserOrganizationsFunc struct {
	defaultHook func(context.Context, azuredevops.Profile) ([]azuredevops.Org, error)
	hooks       []func(context.Context, azuredevops.Profile) ([]azuredevops.Org, error)
	history     []AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall
	mutex       sync.Mutex
}

// ListAuthorizedUserOrganizations delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) ListAuthorizedUserOrganizations(v0 context.Context, v1 azuredevops.Profile) ([]azuredevops.Org, error) {
	r0, r1 := m.ListAuthorizedUserOrganizationsFunc.nextHook()(v0, v1)
	m.ListAuthorizedUserOrganizationsFunc.appendCall(AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListAuthorizedUserOrganizations method of the parent
// MockAzureDevOpsClient instance is invoked and the hook queue is empty.
func (f *AzureDevOpsClientListAuthorizedUserOrganizationsFunc) SetDefaultHook(hook func(context.Context, azuredevops.Profile) ([]azuredevops.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAuthorizedUserOrganizations method of the parent
// MockAzureDevOpsClient instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *AzureDevOpsClientListAuthorizedUserOrganizationsFunc) PushHook(hook func(context.Context, azuredevops.Profile) ([]azuredevops.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientListAuthorizedUserOrganizationsFunc) SetDefaultReturn(r0 []azuredevops.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.Profile) ([]azuredevops.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientListAuthorizedUserOrganizationsFunc) PushReturn(r0 []azuredevops.Org, r1 error) {
	f.PushHook(func(context.Context, azuredevops.Profile) ([]azuredevops.Org, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientListAuthorizedUserOrganizationsFunc) nextHook() func(context.Context, azuredevops.Profile) ([]azuredevops.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientListAuthorizedUserOrganizationsFunc) appendCall(r0 AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall objects
// describing the invocations of this function.
func (f *AzureDevOpsClientListAuthorizedUserOrganizationsFunc) History() []AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall is an object
// that describes an invocation of method ListAuthorizedUserOrganizations on
// an instance of MockAzureDevOpsClient.
type AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.Profile
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []azuredevops.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientListAuthorizedUserOrganizationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientListRepositoriesByProjectOrOrgFunc describes the
// behavior when the ListRepositoriesByProjectOrOrg method of the parent
// MockAzureDevOpsClient instance is invoked.
type AzureDevOpsClientListRepositoriesByProjectOrOrgFunc struct {
	defaultHook func(context.Context, azuredevops.ListRepositoriesByProjectOrOrgArgs) ([]azuredevops.Repository, error)
	hooks       []func(context.Context, azuredevops.ListRepositoriesByProjectOrOrgArgs) ([]azuredevops.Repository, error)
	history     []AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall
	mutex       sync.Mutex
}

// ListRepositoriesByProjectOrOrg delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) ListRepositoriesByProjectOrOrg(v0 context.Context, v1 azuredevops.ListRepositoriesByProjectOrOrgArgs) ([]azuredevops.Repository, error) {
	r0, r1 := m.ListRepositoriesByProjectOrOrgFunc.nextHook()(v0, v1)
	m.ListRepositoriesByProjectOrOrgFunc.appendCall(AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListRepositoriesByProjectOrOrg method of the parent MockAzureDevOpsClient
// instance is invoked and the hook queue is empty.
func (f *AzureDevOpsClientListRepositoriesByProjectOrOrgFunc) SetDefaultHook(hook func(context.Context, azuredevops.ListRepositoriesByProjectOrOrgArgs) ([]azuredevops.Repository, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRepositoriesByProjectOrOrg method of the parent MockAzureDevOpsClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *AzureDevOpsClientListRepositoriesByProjectOrOrgFunc) PushHook(hook func(context.Context, azuredevops.ListRepositoriesByProjectOrOrgArgs) ([]azuredevops.Repository, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientListRepositoriesByProjectOrOrgFunc) SetDefaultReturn(r0 []azuredevops.Repository, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.ListRepositoriesByProjectOrOrgArgs) ([]azuredevops.Repository, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientListRepositoriesByProjectOrOrgFunc) PushReturn(r0 []azuredevops.Repository, r1 error) {
	f.PushHook(func(context.Context, azuredevops.ListRepositoriesByProjectOrOrgArgs) ([]azuredevops.Repository, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientListRepositoriesByProjectOrOrgFunc) nextHook() func(context.Context, azuredevops.ListRepositoriesByProjectOrOrgArgs) ([]azuredevops.Repository, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientListRepositoriesByProjectOrOrgFunc) appendCall(r0 AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall objects
// describing the invocations of this function.
func (f *AzureDevOpsClientListRepositoriesByProjectOrOrgFunc) History() []AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall is an object that
// describes an invocation of method ListRepositoriesByProjectOrOrg on an
// instance of MockAzureDevOpsClient.
type AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.ListRepositoriesByProjectOrOrgArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []azuredevops.Repository
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientListRepositoriesByProjectOrOrgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientSetWaitForRateLimitFunc describes the behavior when the
// SetWaitForRateLimit method of the parent MockAzureDevOpsClient instance
// is invoked.
type AzureDevOpsClientSetWaitForRateLimitFunc struct {
	defaultHook func(bool)
	hooks       []func(bool)
	history     []AzureDevOpsClientSetWaitForRateLimitFuncCall
	mutex       sync.Mutex
}

// SetWaitForRateLimit delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) SetWaitForRateLimit(v0 bool) {
	m.SetWaitForRateLimitFunc.nextHook()(v0)
	m.SetWaitForRateLimitFunc.appendCall(AzureDevOpsClientSetWaitForRateLimitFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetWaitForRateLimit
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientSetWaitForRateLimitFunc) SetDefaultHook(hook func(bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetWaitForRateLimit method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientSetWaitForRateLimitFunc) PushHook(hook func(bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientSetWaitForRateLimitFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(bool) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientSetWaitForRateLimitFunc) PushReturn() {
	f.PushHook(func(bool) {
		return
	})
}

func (f *AzureDevOpsClientSetWaitForRateLimitFunc) nextHook() func(bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientSetWaitForRateLimitFunc) appendCall(r0 AzureDevOpsClientSetWaitForRateLimitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AzureDevOpsClientSetWaitForRateLimitFuncCall objects describing the
// invocations of this function.
func (f *AzureDevOpsClientSetWaitForRateLimitFunc) History() []AzureDevOpsClientSetWaitForRateLimitFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientSetWaitForRateLimitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientSetWaitForRateLimitFuncCall is an object that describes
// an invocation of method SetWaitForRateLimit on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientSetWaitForRateLimitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientSetWaitForRateLimitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientSetWaitForRateLimitFuncCall) Results() []interface{} {
	return []interface{}{}
}

// AzureDevOpsClientUpdatePullRequestFunc describes the behavior when the
// UpdatePullRequest method of the parent MockAzureDevOpsClient instance is
// invoked.
type AzureDevOpsClientUpdatePullRequestFunc struct {
	defaultHook func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestUpdateInput) (azuredevops.PullRequest, error)
	hooks       []func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestUpdateInput) (azuredevops.PullRequest, error)
	history     []AzureDevOpsClientUpdatePullRequestFuncCall
	mutex       sync.Mutex
}

// UpdatePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) UpdatePullRequest(v0 context.Context, v1 azuredevops.PullRequestCommonArgs, v2 azuredevops.PullRequestUpdateInput) (azuredevops.PullRequest, error) {
	r0, r1 := m.UpdatePullRequestFunc.nextHook()(v0, v1, v2)
	m.UpdatePullRequestFunc.appendCall(AzureDevOpsClientUpdatePullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdatePullRequest
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientUpdatePullRequestFunc) SetDefaultHook(hook func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestUpdateInput) (azuredevops.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePullRequest method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientUpdatePullRequestFunc) PushHook(hook func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestUpdateInput) (azuredevops.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientUpdatePullRequestFunc) SetDefaultReturn(r0 azuredevops.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestUpdateInput) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientUpdatePullRequestFunc) PushReturn(r0 azuredevops.PullRequest, r1 error) {
	f.PushHook(func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestUpdateInput) (azuredevops.PullRequest, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientUpdatePullRequestFunc) nextHook() func(context.Context, azuredevops.PullRequestCommonArgs, azuredevops.PullRequestUpdateInput) (azuredevops.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientUpdatePullRequestFunc) appendCall(r0 AzureDevOpsClientUpdatePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientUpdatePullRequestFuncCall
// objects describing the invocations of this function.
func (f *AzureDevOpsClientUpdatePullRequestFunc) History() []AzureDevOpsClientUpdatePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientUpdatePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientUpdatePullRequestFuncCall is an object that describes an
// invocation of method UpdatePullRequest on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientUpdatePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 azuredevops.PullRequestCommonArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 azuredevops.PullRequestUpdateInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientUpdatePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientUpdatePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AzureDevOpsClientWithAuthenticatorFunc describes the behavior when the
// WithAuthenticator method of the parent MockAzureDevOpsClient instance is
// invoked.
type AzureDevOpsClientWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) (azuredevops.Client, error)
	hooks       []func(auth.Authenticator) (azuredevops.Client, error)
	history     []AzureDevOpsClientWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAzureDevOpsClient) WithAuthenticator(v0 auth.Authenticator) (azuredevops.Client, error) {
	r0, r1 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(AzureDevOpsClientWithAuthenticatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockAzureDevOpsClient instance is invoked and the
// hook queue is empty.
func (f *AzureDevOpsClientWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) (azuredevops.Client, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockAzureDevOpsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AzureDevOpsClientWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) (azuredevops.Client, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AzureDevOpsClientWithAuthenticatorFunc) SetDefaultReturn(r0 azuredevops.Client, r1 error) {
	f.SetDefaultHook(func(auth.Authenticator) (azuredevops.Client, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AzureDevOpsClientWithAuthenticatorFunc) PushReturn(r0 azuredevops.Client, r1 error) {
	f.PushHook(func(auth.Authenticator) (azuredevops.Client, error) {
		return r0, r1
	})
}

func (f *AzureDevOpsClientWithAuthenticatorFunc) nextHook() func(auth.Authenticator) (azuredevops.Client, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AzureDevOpsClientWithAuthenticatorFunc) appendCall(r0 AzureDevOpsClientWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AzureDevOpsClientWithAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *AzureDevOpsClientWithAuthenticatorFunc) History() []AzureDevOpsClientWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]AzureDevOpsClientWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AzureDevOpsClientWithAuthenticatorFuncCall is an object that describes an
// invocation of method WithAuthenticator on an instance of
// MockAzureDevOpsClient.
type AzureDevOpsClientWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 azuredevops.Client
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AzureDevOpsClientWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AzureDevOpsClientWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGerritClient is a mock implementation of the Client interface (from
// the package github.com/sourcegraph/sourcegraph/internal/extsvc/gerrit)
// used for unit testing.
type MockGerritClient struct {
	// AbandonChangeFunc is an instance of a mock function object
	// controlling the behavior of the method AbandonChange.
	AbandonChangeFunc *GerritClientAbandonChangeFunc
	// AuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method Authenticator.
	AuthenticatorFunc *GerritClientAuthenticatorFunc
	// DeleteChangeFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteChange.
	DeleteChangeFunc *GerritClientDeleteChangeFunc
	// GetAuthenticatedUserAccountFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetAuthenticatedUserAccount.
	GetAuthenticatedUserAccountFunc *GerritClientGetAuthenticatedUserAccountFunc
	// GetChangeFunc is an instance of a mock function object controlling
	// the behavior of the method GetChange.
	GetChangeFunc *GerritClientGetChangeFunc
	// GetChangeReviewsFunc is an instance of a mock function object
	// controlling the behavior of the method GetChangeReviews.
	GetChangeReviewsFunc *GerritClientGetChangeReviewsFunc
	// GetGroupFunc is an instance of a mock function object controlling the
	// behavior of the method GetGroup.
	GetGroupFunc *GerritClientGetGroupFunc
	// GetURLFunc is an instance of a mock function object controlling the
	// behavior of the method GetURL.
	GetURLFunc *GerritClientGetURLFunc
	// ListProjectsFunc is an instance of a mock function object controlling
	// the behavior of the method ListProjects.
	ListProjectsFunc *GerritClientListProjectsFunc
	// MoveChangeFunc is an instance of a mock function object controlling
	// the behavior of the method MoveChange.
	MoveChangeFunc *GerritClientMoveChangeFunc
	// RestoreChangeFunc is an instance of a mock function object
	// controlling the behavior of the method RestoreChange.
	RestoreChangeFunc *GerritClientRestoreChangeFunc
	// SetCommitMessageFunc is an instance of a mock function object
	// controlling the behavior of the method SetCommitMessage.
	SetCommitMessageFunc *GerritClientSetCommitMessageFunc
	// SetReadyForReviewFunc is an instance of a mock function object
	// controlling the behavior of the method SetReadyForReview.
	SetReadyForReviewFunc *GerritClientSetReadyForReviewFunc
	// SetWIPFunc is an instance of a mock function object controlling the
	// behavior of the method SetWIP.
	SetWIPFunc *GerritClientSetWIPFunc
	// SubmitChangeFunc is an instance of a mock function object controlling
	// the behavior of the method SubmitChange.
	SubmitChangeFunc *GerritClientSubmitChangeFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *GerritClientWithAuthenticatorFunc
	// WriteReviewCommentFunc is an instance of a mock function object
	// controlling the behavior of the method WriteReviewComment.
	WriteReviewCommentFunc *GerritClientWriteReviewCommentFunc
}

// NewMockGerritClient creates a new mock of the Client interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGerritClient() *MockGerritClient {
	return &MockGerritClient{
		AbandonChangeFunc: &GerritClientAbandonChangeFunc{
			defaultHook: func(context.Context, string) (r0 *gerrit.Change, r1 error) {
				return
			},
		},
		AuthenticatorFunc: &GerritClientAuthenticatorFunc{
			defaultHook: func() (r0 auth.Authenticator) {
				return
			},
		},
		DeleteChangeFunc: &GerritClientDeleteChangeFunc{
			defaultHook: func(context.Context, string) (r0 error) {
				return
			},
		},
		GetAuthenticatedUserAccountFunc: &GerritClientGetAuthenticatedUserAccountFunc{
			defaultHook: func(context.Context) (r0 *gerrit.Account, r1 error) {
				return
			},
		},
		GetChangeFunc: &GerritClientGetChangeFunc{
			defaultHook: func(context.Context, string) (r0 *gerrit.Change, r1 error) {
				return
			},
		},
		GetChangeReviewsFunc: &GerritClientGetChangeReviewsFunc{
			defaultHook: func(context.Context, string) (r0 *[]gerrit.Reviewer, r1 error) {
				return
			},
		},
		GetGroupFunc: &GerritClientGetGroupFunc{
			defaultHook: func(context.Context, string) (r0 gerrit.Group, r1 error) {
				return
			},
		},
		GetURLFunc: &GerritClientGetURLFunc{
			defaultHook: func() (r0 *url.URL) {
				return
			},
		},
		ListProjectsFunc: &GerritClientListProjectsFunc{
			defaultHook: func(context.Context, gerrit.ListProjectsArgs) (r0 gerrit.ListProjectsResponse, r1 bool, r2 error) {
				return
			},
		},
		MoveChangeFunc: &GerritClientMoveChangeFunc{
			defaultHook: func(context.Context, string, gerrit.MoveChangePayload) (r0 *gerrit.Change, r1 error) {
				return
			},
		},
		RestoreChangeFunc: &GerritClientRestoreChangeFunc{
			defaultHook: func(context.Context, string) (r0 *gerrit.Change, r1 error) {
				return
			},
		},
		SetCommitMessageFunc: &GerritClientSetCommitMessageFunc{
			defaultHook: func(context.Context, string, gerrit.SetCommitMessagePayload) (r0 error) {
				return
			},
		},
		SetReadyForReviewFunc: &GerritClientSetReadyForReviewFunc{
			defaultHook: func(context.Context, string) (r0 error) {
				return
			},
		},
		SetWIPFunc: &GerritClientSetWIPFunc{
			defaultHook: func(context.Context, string) (r0 error) {
				return
			},
		},
		SubmitChangeFunc: &GerritClientSubmitChangeFunc{
			defaultHook: func(context.Context, string) (r0 *gerrit.Change, r1 error) {
				return
			},
		},
		WithAuthenticatorFunc: &GerritClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 gerrit.Client, r1 error) {
				return
			},
		},
		WriteReviewCommentFunc: &GerritClientWriteReviewCommentFunc{
			defaultHook: func(context.Context, string, gerrit.ChangeReviewComment) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockGerritClient creates a new mock of the Client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockGerritClient() *MockGerritClient {
	return &MockGerritClient{
		AbandonChangeFunc: &GerritClientAbandonChangeFunc{
			defaultHook: func(context.Context, string) (*gerrit.Change, error) {
				panic("unexpected invocation of MockGerritClient.AbandonChange")
			},
		},
		AuthenticatorFunc: &GerritClientAuthenticatorFunc{
			defaultHook: func() auth.Authenticator {
				panic("unexpected invocation of MockGerritClient.Authenticator")
			},
		},
		DeleteChangeFunc: &GerritClientDeleteChangeFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockGerritClient.DeleteChange")
			},
		},
		GetAuthenticatedUserAccountFunc: &GerritClientGetAuthenticatedUserAccountFunc{
			defaultHook: func(context.Context) (*gerrit.Account, error) {
				panic("unexpected invocation of MockGerritClient.GetAuthenticatedUserAccount")
			},
		},
		GetChangeFunc: &GerritClientGetChangeFunc{
			defaultHook: func(context.Context, string) (*gerrit.Change, error) {
				panic("unexpected invocation of MockGerritClient.GetChange")
			},
		},
		GetChangeReviewsFunc: &GerritClientGetChangeReviewsFunc{
			defaultHook: func(context.Context, string) (*[]gerrit.Reviewer, error) {
				panic("unexpected invocation of MockGerritClient.GetChangeReviews")
			},
		},
		GetGroupFunc: &GerritClientGetGroupFunc{
			defaultHook: func(context.Context, string) (gerrit.Group, error) {
				panic("unexpected invocation of MockGerritClient.GetGroup")
			},
		},
		GetURLFunc: &GerritClientGetURLFunc{
			defaultHook: func() *url.URL {
				panic("unexpected invocation of MockGerritClient.GetURL")
			},
		},
		ListProjectsFunc: &GerritClientListProjectsFunc{
			defaultHook: func(context.Context, gerrit.ListProjectsArgs) (gerrit.ListProjectsResponse, bool, error) {
				panic("unexpected invocation of MockGerritClient.ListProjects")
			},
		},
		MoveChangeFunc: &GerritClientMoveChangeFunc{
			defaultHook: func(context.Context, string, gerrit.MoveChangePayload) (*gerrit.Change, error) {
				panic("unexpected invocation of MockGerritClient.MoveChange")
			},
		},
		RestoreChangeFunc: &GerritClientRestoreChangeFunc{
			defaultHook: func(context.Context, string) (*gerrit.Change, error) {
				panic("unexpected invocation of MockGerritClient.RestoreChange")
			},
		},
		SetCommitMessageFunc: &GerritClientSetCommitMessageFunc{
			defaultHook: func(context.Context, string, gerrit.SetCommitMessagePayload) error {
				panic("unexpected invocation of MockGerritClient.SetCommitMessage")
			},
		},
		SetReadyForReviewFunc: &GerritClientSetReadyForReviewFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockGerritClient.SetReadyForReview")
			},
		},
		SetWIPFunc: &GerritClientSetWIPFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockGerritClient.SetWIP")
			},
		},
		SubmitChangeFunc: &GerritClientSubmitChangeFunc{
			defaultHook: func(context.Context, string) (*gerrit.Change, error) {
				panic("unexpected invocation of MockGerritClient.SubmitChange")
			},
		},
		WithAuthenticatorFunc: &GerritClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (gerrit.Client, error) {
				panic("unexpected invocation of MockGerritClient.WithAuthenticator")
			},
		},
		WriteReviewCommentFunc: &GerritClientWriteReviewCommentFunc{
			defaultHook: func(context.Context, string, gerrit.ChangeReviewComment) error {
				panic("unexpected invocation of MockGerritClient.WriteReviewComment")
			},
		},
	}
}

// NewMockGerritClientFrom creates a new mock of the MockGerritClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGerritClientFrom(i gerrit.Client) *MockGerritClient {
	return &MockGerritClient{
		AbandonChangeFunc: &GerritClientAbandonChangeFunc{
			defaultHook: i.AbandonChange,
		},
		AuthenticatorFunc: &GerritClientAuthenticatorFunc{
			defaultHook: i.Authenticator,
		},
		DeleteChangeFunc: &GerritClientDeleteChangeFunc{
			defaultHook: i.DeleteChange,
		},
		GetAuthenticatedUserAccountFunc: &GerritClientGetAuthenticatedUserAccountFunc{
			defaultHook: i.GetAuthenticatedUserAccount,
		},
		GetChangeFunc: &GerritClientGetChangeFunc{
			defaultHook: i.GetChange,
		},
		GetChangeReviewsFunc: &GerritClientGetChangeReviewsFunc{
			defaultHook: i.GetChangeReviews,
		},
		GetGroupFunc: &GerritClientGetGroupFunc{
			defaultHook: i.GetGroup,
		},
		GetURLFunc: &GerritClientGetURLFunc{
			defaultHook: i.GetURL,
		},
		ListProjectsFunc: &GerritClientListProjectsFunc{
			defaultHook: i.ListProjects,
		},
		MoveChangeFunc: &GerritClientMoveChangeFunc{
			defaultHook: i.MoveChange,
		},
		RestoreChangeFunc: &GerritClientRestoreChangeFunc{
			defaultHook: i.RestoreChange,
		},
		SetCommitMessageFunc: &GerritClientSetCommitMessageFunc{
			defaultHook: i.SetCommitMessage,
		},
		SetReadyForReviewFunc: &GerritClientSetReadyForReviewFunc{
			defaultHook: i.SetReadyForReview,
		},
		SetWIPFunc: &GerritClientSetWIPFunc{
			defaultHook: i.SetWIP,
		},
		SubmitChangeFunc: &GerritClientSubmitChangeFunc{
			defaultHook: i.SubmitChange,
		},
		WithAuthenticatorFunc: &GerritClientWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
		WriteReviewCommentFunc: &GerritClientWriteReviewCommentFunc{
			defaultHook: i.WriteReviewComment,
		},
	}
}

// GerritClientAbandonChangeFunc describes the behavior when the
// AbandonChange method of the parent MockGerritClient instance is invoked.
type GerritClientAbandonChangeFunc struct {
	defaultHook func(context.Context, string) (*gerrit.Change, error)
	hooks       []func(context.Context, string) (*gerrit.Change, error)
	history     []GerritClientAbandonChangeFuncCall
	mutex       sync.Mutex
}

// AbandonChange delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGerritClient) AbandonChange(v0 context.Context, v1 string) (*gerrit.Change, error) {
	r0, r1 := m.AbandonChangeFunc.nextHook()(v0, v1)
	m.AbandonChangeFunc.appendCall(GerritClientAbandonChangeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AbandonChange method
// of the parent MockGerritClient instance is invoked and the hook queue is
// empty.
func (f *GerritClientAbandonChangeFunc) SetDefaultHook(hook func(context.Context, string) (*gerrit.Change, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AbandonChange method of the parent MockGerritClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GerritClientAbandonChangeFunc) PushHook(hook func(context.Context, string) (*gerrit.Change, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientAbandonChangeFunc) SetDefaultReturn(r0 *gerrit.Change, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*gerrit.Change, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientAbandonChangeFunc) PushReturn(r0 *gerrit.Change, r1 error) {
	f.PushHook(func(context.Context, string) (*gerrit.Change, error) {
		return r0, r1
	})
}

func (f *GerritClientAbandonChangeFunc) nextHook() func(context.Context, string) (*gerrit.Change, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientAbandonChangeFunc) appendCall(r0 GerritClientAbandonChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientAbandonChangeFuncCall objects
// describing the invocations of this function.
func (f *GerritClientAbandonChangeFunc) History() []GerritClientAbandonChangeFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientAbandonChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientAbandonChangeFuncCall is an object that describes an
// invocation of method AbandonChange on an instance of MockGerritClient.
type GerritClientAbandonChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gerrit.Change
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientAbandonChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientAbandonChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GerritClientAuthenticatorFunc describes the behavior when the
// Authenticator method of the parent MockGerritClient instance is invoked.
type GerritClientAuthenticatorFunc struct {
	defaultHook func() auth.Authenticator
	hooks       []func() auth.Authenticator
	history     []GerritClientAuthenticatorFuncCall
	mutex       sync.Mutex
}

// Authenticator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGerritClient) Authenticator() auth.Authenticator {
	r0 := m.AuthenticatorFunc.nextHook()()
	m.AuthenticatorFunc.appendCall(GerritClientAuthenticatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authenticator method
// of the parent MockGerritClient instance is invoked and the hook queue is
// empty.
func (f *GerritClientAuthenticatorFunc) SetDefaultHook(hook func() auth.Authenticator) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authenticator method of the parent MockGerritClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GerritClientAuthenticatorFunc) PushHook(hook func() auth.Authenticator) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientAuthenticatorFunc) SetDefaultReturn(r0 auth.Authenticator) {
	f.SetDefaultHook(func() auth.Authenticator {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientAuthenticatorFunc) PushReturn(r0 auth.Authenticator) {
	f.PushHook(func() auth.Authenticator {
		return r0
	})
}

func (f *GerritClientAuthenticatorFunc) nextHook() func() auth.Authenticator {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientAuthenticatorFunc) appendCall(r0 GerritClientAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientAuthenticatorFuncCall objects
// describing the invocations of this function.
func (f *GerritClientAuthenticatorFunc) History() []GerritClientAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientAuthenticatorFuncCall is an object that describes an
// invocation of method Authenticator on an instance of MockGerritClient.
type GerritClientAuthenticatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 auth.Authenticator
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GerritClientDeleteChangeFunc describes the behavior when the DeleteChange
// method of the parent MockGerritClient instance is invoked.
type GerritClientDeleteChangeFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []GerritClientDeleteChangeFuncCall
	mutex       sync.Mutex
}

// DeleteChange delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGerritClient) DeleteChange(v0 context.Context, v1 string) error {
	r0 := m.DeleteChangeFunc.nextHook()(v0, v1)
	m.DeleteChangeFunc.appendCall(GerritClientDeleteChangeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteChange method
// of the parent MockGerritClient instance is invoked and the hook queue is
// empty.
func (f *GerritClientDeleteChangeFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteChange method of the parent MockGerritClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GerritClientDeleteChangeFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientDeleteChangeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientDeleteChangeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *GerritClientDeleteChangeFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientDeleteChangeFunc) appendCall(r0 GerritClientDeleteChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientDeleteChangeFuncCall objects
// describing the invocations of this function.
func (f *GerritClientDeleteChangeFunc) History() []GerritClientDeleteChangeFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientDeleteChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientDeleteChangeFuncCall is an object that describes an
// invocation of method DeleteChange on an instance of MockGerritClient.
type GerritClientDeleteChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientDeleteChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientDeleteChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GerritClientGetAuthenticatedUserAccountFunc describes the behavior when
// the GetAuthenticatedUserAccount method of the parent MockGerritClient
// instance is invoked.
type GerritClientGetAuthenticatedUserAccountFunc struct {
	defaultHook func(context.Context) (*gerrit.Account, error)
	hooks       []func(context.Context) (*gerrit.Account, error)
	history     []GerritClientGetAuthenticatedUserAccountFuncCall
	mutex       sync.Mutex
}

// GetAuthenticatedUserAccount delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockGerritClient) GetAuthenticatedUserAccount(v0 context.Context) (*gerrit.Account, error) {
	r0, r1 := m.GetAuthenticatedUserAccountFunc.nextHook()(v0)
	m.GetAuthenticatedUserAccountFunc.appendCall(GerritClientGetAuthenticatedUserAccountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAuthenticatedUserAccount method of the parent MockGerritClient
// instance is invoked and the hook queue is empty.
func (f *GerritClientGetAuthenticatedUserAccountFunc) SetDefaultHook(hook func(context.Context) (*gerrit.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuthenticatedUserAccount method of the parent MockGerritClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GerritClientGetAuthenticatedUserAccountFunc) PushHook(hook func(context.Context) (*gerrit.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientGetAuthenticatedUserAccountFunc) SetDefaultReturn(r0 *gerrit.Account, r1 error) {
	f.SetDefaultHook(func(context.Context) (*gerrit.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientGetAuthenticatedUserAccountFunc) PushReturn(r0 *gerrit.Account, r1 error) {
	f.PushHook(func(context.Context) (*gerrit.Account, error) {
		return r0, r1
	})
}

func (f *GerritClientGetAuthenticatedUserAccountFunc) nextHook() func(context.Context) (*gerrit.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientGetAuthenticatedUserAccountFunc) appendCall(r0 GerritClientGetAuthenticatedUserAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GerritClientGetAuthenticatedUserAccountFuncCall objects describing the
// invocations of this function.
func (f *GerritClientGetAuthenticatedUserAccountFunc) History() []GerritClientGetAuthenticatedUserAccountFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientGetAuthenticatedUserAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientGetAuthenticatedUserAccountFuncCall is an object that
// describes an invocation of method GetAuthenticatedUserAccount on an
// instance of MockGerritClient.
type GerritClientGetAuthenticatedUserAccountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gerrit.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientGetAuthenticatedUserAccountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientGetAuthenticatedUserAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GerritClientGetChangeFunc describes the behavior when the GetChange
// method of the parent MockGerritClient instance is invoked.
type GerritClientGetChangeFunc struct {
	defaultHook func(context.Context, string) (*gerrit.Change, error)
	hooks       []func(context.Context, string) (*gerrit.Change, error)
	history     []GerritClientGetChangeFuncCall
	mutex       sync.Mutex
}

// GetChange delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGerritClient) GetChange(v0 context.Context, v1 string) (*gerrit.Change, error) {
	r0, r1 := m.GetChangeFunc.nextHook()(v0, v1)
	m.GetChangeFunc.appendCall(GerritClientGetChangeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetChange method of
// the parent MockGerritClient instance is invoked and the hook queue is
// empty.
func (f *GerritClientGetChangeFunc) SetDefaultHook(hook func(context.Context, string) (*gerrit.Change, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChange method of the parent MockGerritClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GerritClientGetChangeFunc) PushHook(hook func(context.Context, string) (*gerrit.Change, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientGetChangeFunc) SetDefaultReturn(r0 *gerrit.Change, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*gerrit.Change, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientGetChangeFunc) PushReturn(r0 *gerrit.Change, r1 error) {
	f.PushHook(func(context.Context, string) (*gerrit.Change, error) {
		return r0, r1
	})
}

func (f *GerritClientGetChangeFunc) nextHook() func(context.Context, string) (*gerrit.Change, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientGetChangeFunc) appendCall(r0 GerritClientGetChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientGetChangeFuncCall objects
// describing the invocations of this function.
func (f *GerritClientGetChangeFunc) History() []GerritClientGetChangeFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientGetChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientGetChangeFuncCall is an object that describes an invocation
// of method GetChange on an instance of MockGerritClient.
type GerritClientGetChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gerrit.Change
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientGetChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientGetChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GerritClientGetChangeReviewsFunc describes the behavior when the
// GetChangeReviews method of the parent MockGerritClient instance is
// invoked.
type GerritClientGetChangeReviewsFunc struct {
	defaultHook func(context.Context, string) (*[]gerrit.Reviewer, error)
	hooks       []func(context.Context, string) (*[]gerrit.Reviewer, error)
	history     []GerritClientGetChangeReviewsFuncCall
	mutex       sync.Mutex
}

// GetChangeReviews delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGerritClient) GetChangeReviews(v0 context.Context, v1 string) (*[]gerrit.Reviewer, error) {
	r0, r1 := m.GetChangeReviewsFunc.nextHook()(v0, v1)
	m.GetChangeReviewsFunc.appendCall(GerritClientGetChangeReviewsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetChangeReviews
// method of the parent MockGerritClient instance is invoked and the hook
// queue is empty.
func (f *GerritClientGetChangeReviewsFunc) SetDefaultHook(hook func(context.Context, string) (*[]gerrit.Reviewer, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChangeReviews method of the parent MockGerritClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GerritClientGetChangeReviewsFunc) PushHook(hook func(context.Context, string) (*[]gerrit.Reviewer, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientGetChangeReviewsFunc) SetDefaultReturn(r0 *[]gerrit.Reviewer, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*[]gerrit.Reviewer, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientGetChangeReviewsFunc) PushReturn(r0 *[]gerrit.Reviewer, r1 error) {
	f.PushHook(func(context.Context, string) (*[]gerrit.Reviewer, error) {
		return r0, r1
	})
}

func (f *GerritClientGetChangeReviewsFunc) nextHook() func(context.Context, string) (*[]gerrit.Reviewer, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientGetChangeReviewsFunc) appendCall(r0 GerritClientGetChangeReviewsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientGetChangeReviewsFuncCall
// objects describing the invocations of this function.
func (f *GerritClientGetChangeReviewsFunc) History() []GerritClientGetChangeReviewsFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientGetChangeReviewsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientGetChangeReviewsFuncCall is an object that describes an
// invocation of method GetChangeReviews on an instance of MockGerritClient.
type GerritClientGetChangeReviewsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *[]gerrit.Reviewer
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientGetChangeReviewsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientGetChangeReviewsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GerritClientGetGroupFunc describes the behavior when the GetGroup method
// of the parent MockGerritClient instance is invoked.
type GerritClientGetGroupFunc struct {
	defaultHook func(context.Context, string) (gerrit.Group, error)
	hooks       []func(context.Context, string) (gerrit.Group, error)
	history     []GerritClientGetGroupFuncCall
	mutex       sync.Mutex
}

// GetGroup delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGerritClient) GetGroup(v0 context.Context, v1 string) (gerrit.Group, error) {
	r0, r1 := m.GetGroupFunc.nextHook()(v0, v1)
	m.GetGroupFunc.appendCall(GerritClientGetGroupFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetGroup method of
// the parent MockGerritClient instance is invoked and the hook queue is
// empty.
func (f *GerritClientGetGroupFunc) SetDefaultHook(hook func(context.Context, string) (gerrit.Group, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetGroup method of the parent MockGerritClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GerritClientGetGroupFunc) PushHook(hook func(context.Context, string) (gerrit.Group, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientGetGroupFunc) SetDefaultReturn(r0 gerrit.Group, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (gerrit.Group, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientGetGroupFunc) PushReturn(r0 gerrit.Group, r1 error) {
	f.PushHook(func(context.Context, string) (gerrit.Group, error) {
		return r0, r1
	})
}

func (f *GerritClientGetGroupFunc) nextHook() func(context.Context, string) (gerrit.Group, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientGetGroupFunc) appendCall(r0 GerritClientGetGroupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientGetGroupFuncCall objects
// describing the invocations of this function.
func (f *GerritClientGetGroupFunc) History() []GerritClientGetGroupFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientGetGroupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientGetGroupFuncCall is an object that describes an invocation of
// method GetGroup on an instance of MockGerritClient.
type GerritClientGetGroupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gerrit.Group
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientGetGroupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientGetGroupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GerritClientGetURLFunc describes the behavior when the GetURL method of
// the parent MockGerritClient instance is invoked.
type GerritClientGetURLFunc struct {
	defaultHook func() *url.URL
	hooks       []func() *url.URL
	history     []GerritClientGetURLFuncCall
	mutex       sync.Mutex
}

// GetURL delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGerritClient) GetURL() *url.URL {
	r0 := m.GetURLFunc.nextHook()()
	m.GetURLFunc.appendCall(GerritClientGetURLFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetURL method of the
// parent MockGerritClient instance is invoked and the hook queue is empty.
func (f *GerritClientGetURLFunc) SetDefaultHook(hook func() *url.URL) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetURL method of the parent MockGerritClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GerritClientGetURLFunc) PushHook(hook func() *url.URL) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientGetURLFunc) SetDefaultReturn(r0 *url.URL) {
	f.SetDefaultHook(func() *url.URL {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientGetURLFunc) PushReturn(r0 *url.URL) {
	f.PushHook(func() *url.URL {
		return r0
	})
}

func (f *GerritClientGetURLFunc) nextHook() func() *url.URL {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientGetURLFunc) appendCall(r0 GerritClientGetURLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientGetURLFuncCall objects
// describing the invocations of this function.
func (f *GerritClientGetURLFunc) History() []GerritClientGetURLFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientGetURLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientGetURLFuncCall is an object that describes an invocation of
// method GetURL on an instance of MockGerritClient.
type GerritClientGetURLFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *url.URL
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientGetURLFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientGetURLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GerritClientListProjectsFunc describes the behavior when the ListProjects
// method of the parent MockGerritClient instance is invoked.
type GerritClientListProjectsFunc struct {
	defaultHook func(context.Context, gerrit.ListProjectsArgs) (gerrit.ListProjectsResponse, bool, error)
	hooks       []func(context.Context, gerrit.ListProjectsArgs) (gerrit.ListProjectsResponse, bool, error)
	history     []GerritClientListProjectsFuncCall
	mutex       sync.Mutex
}

// ListProjects delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGerritClient) ListProjects(v0 context.Context, v1 gerrit.ListProjectsArgs) (gerrit.ListProjectsResponse, bool, error) {
	r0, r1, r2 := m.ListProjectsFunc.nextHook()(v0, v1)
	m.ListProjectsFunc.appendCall(GerritClientListProjectsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ListProjects method
// of the parent MockGerritClient instance is invoked and the hook queue is
// empty.
func (f *GerritClientListProjectsFunc) SetDefaultHook(hook func(context.Context, gerrit.ListProjectsArgs) (gerrit.ListProjectsResponse, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListProjects method of the parent MockGerritClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GerritClientListProjectsFunc) PushHook(hook func(context.Context, gerrit.ListProjectsArgs) (gerrit.ListProjectsResponse, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientListProjectsFunc) SetDefaultReturn(r0 gerrit.ListProjectsResponse, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, gerrit.ListProjectsArgs) (gerrit.ListProjectsResponse, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientListProjectsFunc) PushReturn(r0 gerrit.ListProjectsResponse, r1 bool, r2 error) {
	f.PushHook(func(context.Context, gerrit.ListProjectsArgs) (gerrit.ListProjectsResponse, bool, error) {
		return r0, r1, r2
	})
}

func (f *GerritClientListProjectsFunc) nextHook() func(context.Context, gerrit.ListProjectsArgs) (gerrit.ListProjectsResponse, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientListProjectsFunc) appendCall(r0 GerritClientListProjectsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientListProjectsFuncCall objects
// describing the invocations of this function.
func (f *GerritClientListProjectsFunc) History() []GerritClientListProjectsFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientListProjectsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientListProjectsFuncCall is an object that describes an
// invocation of method ListProjects on an instance of MockGerritClient.
type GerritClientListProjectsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 gerrit.ListProjectsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gerrit.ListProjectsResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientListProjectsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientListProjectsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GerritClientMoveChangeFunc describes the behavior when the MoveChange
// method of the parent MockGerritClient instance is invoked.
type GerritClientMoveChangeFunc struct {
	defaultHook func(context.Context, string, gerrit.MoveChangePayload) (*gerrit.Change, error)
	hooks       []func(context.Context, string, gerrit.MoveChangePayload) (*gerrit.Change, error)
	history     []GerritClientMoveChangeFuncCall
	mutex       sync.Mutex
}

// MoveChange delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGerritClient) MoveChange(v0 context.Context, v1 string, v2 gerrit.MoveChangePayload) (*gerrit.Change, error) {
	r0, r1 := m.MoveChangeFunc.nextHook()(v0, v1, v2)
	m.MoveChangeFunc.appendCall(GerritClientMoveChangeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MoveChange method of
// the parent MockGerritClient instance is invoked and the hook queue is
// empty.
func (f *GerritClientMoveChangeFunc) SetDefaultHook(hook func(context.Context, string, gerrit.MoveChangePayload) (*gerrit.Change, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MoveChange method of the parent MockGerritClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GerritClientMoveChangeFunc) PushHook(hook func(context.Context, string, gerrit.MoveChangePayload) (*gerrit.Change, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientMoveChangeFunc) SetDefaultReturn(r0 *gerrit.Change, r1 error) {
	f.SetDefaultHook(func(context.Context, string, gerrit.MoveChangePayload) (*gerrit.Change, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientMoveChangeFunc) PushReturn(r0 *gerrit.Change, r1 error) {
	f.PushHook(func(context.Context, string, gerrit.MoveChangePayload) (*gerrit.Change, error) {
		return r0, r1
	})
}

func (f *GerritClientMoveChangeFunc) nextHook() func(context.Context, string, gerrit.MoveChangePayload) (*gerrit.Change, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientMoveChangeFunc) appendCall(r0 GerritClientMoveChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientMoveChangeFuncCall objects
// describing the invocations of this function.
func (f *GerritClientMoveChangeFunc) History() []GerritClientMoveChangeFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientMoveChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientMoveChangeFuncCall is an object that describes an invocation
// of method MoveChange on an instance of MockGerritClient.
type GerritClientMoveChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gerrit.MoveChangePayload
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gerrit.Change
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientMoveChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientMoveChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GerritClientRestoreChangeFunc describes the behavior when the
// RestoreChange method of the parent MockGerritClient instance is invoked.
type GerritClientRestoreChangeFunc struct {
	defaultHook func(context.Context, string) (*gerrit.Change, error)
	hooks       []func(context.Context, string) (*gerrit.Change, error)
	history     []GerritClientRestoreChangeFuncCall
	mutex       sync.Mutex
}

// RestoreChange delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGerritClient) RestoreChange(v0 context.Context, v1 string) (*gerrit.Change, error) {
	r0, r1 := m.RestoreChangeFunc.nextHook()(v0, v1)
	m.RestoreChangeFunc.appendCall(GerritClientRestoreChangeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RestoreChange method
// of the parent MockGerritClient instance is invoked and the hook queue is
// empty.
func (f *GerritClientRestoreChangeFunc) SetDefaultHook(hook func(context.Context, string) (*gerrit.Change, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RestoreChange method of the parent MockGerritClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GerritClientRestoreChangeFunc) PushHook(hook func(context.Context, string) (*gerrit.Change, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientRestoreChangeFunc) SetDefaultReturn(r0 *gerrit.Change, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*gerrit.Change, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientRestoreChangeFunc) PushReturn(r0 *gerrit.Change, r1 error) {
	f.PushHook(func(context.Context, string) (*gerrit.Change, error) {
		return r0, r1
	})
}

func (f *GerritClientRestoreChangeFunc) nextHook() func(context.Context, string) (*gerrit.Change, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientRestoreChangeFunc) appendCall(r0 GerritClientRestoreChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientRestoreChangeFuncCall objects
// describing the invocations of this function.
func (f *GerritClientRestoreChangeFunc) History() []GerritClientRestoreChangeFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientRestoreChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientRestoreChangeFuncCall is an object that describes an
// invocation of method RestoreChange on an instance of MockGerritClient.
type GerritClientRestoreChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gerrit.Change
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientRestoreChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientRestoreChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GerritClientSetCommitMessageFunc describes the behavior when the
// SetCommitMessage method of the parent MockGerritClient instance is
// invoked.
type GerritClientSetCommitMessageFunc struct {
	defaultHook func(context.Context, string, gerrit.SetCommitMessagePayload) error
	hooks       []func(context.Context, string, gerrit.SetCommitMessagePayload) error
	history     []GerritClientSetCommitMessageFuncCall
	mutex       sync.Mutex
}

// SetCommitMessage delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGerritClient) SetCommitMessage(v0 context.Context, v1 string, v2 gerrit.SetCommitMessagePayload) error {
	r0 := m.SetCommitMessageFunc.nextHook()(v0, v1, v2)
	m.SetCommitMessageFunc.appendCall(GerritClientSetCommitMessageFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetCommitMessage
// method of the parent MockGerritClient instance is invoked and the hook
// queue is empty.
func (f *GerritClientSetCommitMessageFunc) SetDefaultHook(hook func(context.Context, string, gerrit.SetCommitMessagePayload) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetCommitMessage method of the parent MockGerritClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GerritClientSetCommitMessageFunc) PushHook(hook func(context.Context, string, gerrit.SetCommitMessagePayload) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientSetCommitMessageFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, gerrit.SetCommitMessagePayload) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientSetCommitMessageFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, gerrit.SetCommitMessagePayload) error {
		return r0
	})
}

func (f *GerritClientSetCommitMessageFunc) nextHook() func(context.Context, string, gerrit.SetCommitMessagePayload) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientSetCommitMessageFunc) appendCall(r0 GerritClientSetCommitMessageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientSetCommitMessageFuncCall
// objects describing the invocations of this function.
func (f *GerritClientSetCommitMessageFunc) History() []GerritClientSetCommitMessageFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientSetCommitMessageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientSetCommitMessageFuncCall is an object that describes an
// invocation of method SetCommitMessage on an instance of MockGerritClient.
type GerritClientSetCommitMessageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gerrit.SetCommitMessagePayload
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientSetCommitMessageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientSetCommitMessageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GerritClientSetReadyForReviewFunc describes the behavior when the
// SetReadyForReview method of the parent MockGerritClient instance is
// invoked.
type GerritClientSetReadyForReviewFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []GerritClientSetReadyForReviewFuncCall
	mutex       sync.Mutex
}

// SetReadyForReview delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGerritClient) SetReadyForReview(v0 context.Context, v1 string) error {
	r0 := m.SetReadyForReviewFunc.nextHook()(v0, v1)
	m.SetReadyForReviewFunc.appendCall(GerritClientSetReadyForReviewFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetReadyForReview
// method of the parent MockGerritClient instance is invoked and the hook
// queue is empty.
func (f *GerritClientSetReadyForReviewFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetReadyForReview method of the parent MockGerritClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GerritClientSetReadyForReviewFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientSetReadyForReviewFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientSetReadyForReviewFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *GerritClientSetReadyForReviewFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientSetReadyForReviewFunc) appendCall(r0 GerritClientSetReadyForReviewFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientSetReadyForReviewFuncCall
// objects describing the invocations of this function.
func (f *GerritClientSetReadyForReviewFunc) History() []GerritClientSetReadyForReviewFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientSetReadyForReviewFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientSetReadyForReviewFuncCall is an object that describes an
// invocation of method SetReadyForReview on an instance of
// MockGerritClient.
type GerritClientSetReadyForReviewFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientSetReadyForReviewFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientSetReadyForReviewFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GerritClientSetWIPFunc describes the behavior when the SetWIP method of
// the parent MockGerritClient instance is invoked.
type GerritClientSetWIPFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []GerritClientSetWIPFuncCall
	mutex       sync.Mutex
}

// SetWIP delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGerritClient) SetWIP(v0 context.Context, v1 string) error {
	r0 := m.SetWIPFunc.nextHook()(v0, v1)
	m.SetWIPFunc.appendCall(GerritClientSetWIPFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetWIP method of the
// parent MockGerritClient instance is invoked and the hook queue is empty.
func (f *GerritClientSetWIPFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetWIP method of the parent MockGerritClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GerritClientSetWIPFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientSetWIPFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientSetWIPFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *GerritClientSetWIPFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientSetWIPFunc) appendCall(r0 GerritClientSetWIPFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientSetWIPFuncCall objects
// describing the invocations of this function.
func (f *GerritClientSetWIPFunc) History() []GerritClientSetWIPFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientSetWIPFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientSetWIPFuncCall is an object that describes an invocation of
// method SetWIP on an instance of MockGerritClient.
type GerritClientSetWIPFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientSetWIPFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientSetWIPFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GerritClientSubmitChangeFunc describes the behavior when the SubmitChange
// method of the parent MockGerritClient instance is invoked.
type GerritClientSubmitChangeFunc struct {
	defaultHook func(context.Context, string) (*gerrit.Change, error)
	hooks       []func(context.Context, string) (*gerrit.Change, error)
	history     []GerritClientSubmitChangeFuncCall
	mutex       sync.Mutex
}

// SubmitChange delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGerritClient) SubmitChange(v0 context.Context, v1 string) (*gerrit.Change, error) {
	r0, r1 := m.SubmitChangeFunc.nextHook()(v0, v1)
	m.SubmitChangeFunc.appendCall(GerritClientSubmitChangeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SubmitChange method
// of the parent MockGerritClient instance is invoked and the hook queue is
// empty.
func (f *GerritClientSubmitChangeFunc) SetDefaultHook(hook func(context.Context, string) (*gerrit.Change, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubmitChange method of the parent MockGerritClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GerritClientSubmitChangeFunc) PushHook(hook func(context.Context, string) (*gerrit.Change, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientSubmitChangeFunc) SetDefaultReturn(r0 *gerrit.Change, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*gerrit.Change, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientSubmitChangeFunc) PushReturn(r0 *gerrit.Change, r1 error) {
	f.PushHook(func(context.Context, string) (*gerrit.Change, error) {
		return r0, r1
	})
}

func (f *GerritClientSubmitChangeFunc) nextHook() func(context.Context, string) (*gerrit.Change, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientSubmitChangeFunc) appendCall(r0 GerritClientSubmitChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientSubmitChangeFuncCall objects
// describing the invocations of this function.
func (f *GerritClientSubmitChangeFunc) History() []GerritClientSubmitChangeFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientSubmitChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientSubmitChangeFuncCall is an object that describes an
// invocation of method SubmitChange on an instance of MockGerritClient.
type GerritClientSubmitChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gerrit.Change
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientSubmitChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientSubmitChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GerritClientWithAuthenticatorFunc describes the behavior when the
// WithAuthenticator method of the parent MockGerritClient instance is
// invoked.
type GerritClientWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) (gerrit.Client, error)
	hooks       []func(auth.Authenticator) (gerrit.Client, error)
	history     []GerritClientWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGerritClient) WithAuthenticator(v0 auth.Authenticator) (gerrit.Client, error) {
	r0, r1 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(GerritClientWithAuthenticatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockGerritClient instance is invoked and the hook
// queue is empty.
func (f *GerritClientWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) (gerrit.Client, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockGerritClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GerritClientWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) (gerrit.Client, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientWithAuthenticatorFunc) SetDefaultReturn(r0 gerrit.Client, r1 error) {
	f.SetDefaultHook(func(auth.Authenticator) (gerrit.Client, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientWithAuthenticatorFunc) PushReturn(r0 gerrit.Client, r1 error) {
	f.PushHook(func(auth.Authenticator) (gerrit.Client, error) {
		return r0, r1
	})
}

func (f *GerritClientWithAuthenticatorFunc) nextHook() func(auth.Authenticator) (gerrit.Client, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientWithAuthenticatorFunc) appendCall(r0 GerritClientWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientWithAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *GerritClientWithAuthenticatorFunc) History() []GerritClientWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientWithAuthenticatorFuncCall is an object that describes an
// invocation of method WithAuthenticator on an instance of
// MockGerritClient.
type GerritClientWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gerrit.Client
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GerritClientWriteReviewCommentFunc describes the behavior when the
// WriteReviewComment method of the parent MockGerritClient instance is
// invoked.
type GerritClientWriteReviewCommentFunc struct {
	defaultHook func(context.Context, string, gerrit.ChangeReviewComment) error
	hooks       []func(context.Context, string, gerrit.ChangeReviewComment) error
	history     []GerritClientWriteReviewCommentFuncCall
	mutex       sync.Mutex
}

// WriteReviewComment delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGerritClient) WriteReviewComment(v0 context.Context, v1 string, v2 gerrit.ChangeReviewComment) error {
	r0 := m.WriteReviewCommentFunc.nextHook()(v0, v1, v2)
	m.WriteReviewCommentFunc.appendCall(GerritClientWriteReviewCommentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WriteReviewComment
// method of the parent MockGerritClient instance is invoked and the hook
// queue is empty.
func (f *GerritClientWriteReviewCommentFunc) SetDefaultHook(hook func(context.Context, string, gerrit.ChangeReviewComment) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WriteReviewComment method of the parent MockGerritClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GerritClientWriteReviewCommentFunc) PushHook(hook func(context.Context, string, gerrit.ChangeReviewComment) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GerritClientWriteReviewCommentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, gerrit.ChangeReviewComment) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GerritClientWriteReviewCommentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, gerrit.ChangeReviewComment) error {
		return r0
	})
}

func (f *GerritClientWriteReviewCommentFunc) nextHook() func(context.Context, string, gerrit.ChangeReviewComment) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GerritClientWriteReviewCommentFunc) appendCall(r0 GerritClientWriteReviewCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GerritClientWriteReviewCommentFuncCall
// objects describing the invocations of this function.
func (f *GerritClientWriteReviewCommentFunc) History() []GerritClientWriteReviewCommentFuncCall {
	f.mutex.Lock()
	history := make([]GerritClientWriteReviewCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GerritClientWriteReviewCommentFuncCall is an object that describes an
// invocation of method WriteReviewComment on an instance of
// MockGerritClient.
type GerritClientWriteReviewCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gerrit.ChangeReviewComment
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GerritClientWriteReviewCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GerritClientWriteReviewCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverClient is a mock implementation of the Client interface
// (from the package github.com/sourcegraph/sourcegraph/internal/gitserver)
// used for unit testing.
type MockGitserverClient struct {
	// AddrForRepoFunc is an instance of a mock function object controlling
	// the behavior of the method AddrForRepo.
	AddrForRepoFunc *GitserverClientAddrForRepoFunc
	// AddrsFunc is an instance of a mock function object controlling the
	// behavior of the method Addrs.
	AddrsFunc *GitserverClientAddrsFunc
	// ArchiveReaderFunc is an instance of a mock function object
	// controlling the behavior of the method ArchiveReader.
	ArchiveReaderFunc *GitserverClientArchiveReaderFunc
	// BatchLogFunc is an instance of a mock function object controlling the
	// behavior of the method BatchLog.
	BatchLogFunc *GitserverClientBatchLogFunc
	// BlameFileFunc is an instance of a mock function object controlling
	// the behavior of the method BlameFile.
	BlameFileFunc *GitserverClientBlameFileFunc
	// BranchesContainingFunc is an instance of a mock function object
	// controlling the behavior of the method BranchesContaining.
	BranchesContainingFunc *GitserverClientBranchesContainingFunc
	// CheckPerforceCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method CheckPerforceCredentials.
	CheckPerforceCredentialsFunc *GitserverClientCheckPerforceCredentialsFunc
	// CommitDateFunc is an instance of a mock function object controlling
	// the behavior of the method CommitDate.
	CommitDateFunc *GitserverClientCommitDateFunc
	// CommitExistsFunc is an instance of a mock function object controlling
	// the behavior of the method CommitExists.
	CommitExistsFunc *GitserverClientCommitExistsFunc
	// CommitGraphFunc is an instance of a mock function object controlling
	// the behavior of the method CommitGraph.
	CommitGraphFunc *GitserverClientCommitGraphFunc
	// CommitLogFunc is an instance of a mock function object controlling
	// the behavior of the method CommitLog.
	CommitLogFunc *GitserverClientCommitLogFunc
	// CommitsFunc is an instance of a mock function object controlling the
	// behavior of the method Commits.
	CommitsFunc *GitserverClientCommitsFunc
	// CommitsExistFunc is an instance of a mock function object controlling
	// the behavior of the method CommitsExist.
	CommitsExistFunc *GitserverClientCommitsExistFunc
	// CommitsUniqueToBranchFunc is an instance of a mock function object
	// controlling the behavior of the method CommitsUniqueToBranch.
	CommitsUniqueToBranchFunc *GitserverClientCommitsUniqueToBranchFunc
	// ContributorCountFunc is an instance of a mock function object
	// controlling the behavior of the method ContributorCount.
	ContributorCountFunc *GitserverClientContributorCountFunc
	// CreateCommitFromPatchFunc is an instance of a mock function object
	// controlling the behavior of the method CreateCommitFromPatch.
	CreateCommitFromPatchFunc *GitserverClientCreateCommitFromPatchFunc
	// DiffFunc is an instance of a mock function object controlling the
	// behavior of the method Diff.
	DiffFunc *GitserverClientDiffFunc
	// DiffPathFunc is an instance of a mock function object controlling the
	// behavior of the method DiffPath.
	DiffPathFunc *GitserverClientDiffPathFunc
	// DiffSymbolsFunc is an instance of a mock function object controlling
	// the behavior of the method DiffSymbols.
	DiffSymbolsFunc *GitserverClientDiffSymbolsFunc
	// FirstEverCommitFunc is an instance of a mock function object
	// controlling the behavior of the method FirstEverCommit.
	FirstEverCommitFunc *GitserverClientFirstEverCommitFunc
	// GetBehindAheadFunc is an instance of a mock function object
	// controlling the behavior of the method GetBehindAhead.
	GetBehindAheadFunc *GitserverClientGetBehindAheadFunc
	// GetCommitFunc is an instance of a mock function object controlling
	// the behavior of the method GetCommit.
	GetCommitFunc *GitserverClientGetCommitFunc
	// GetCommitsFunc is an instance of a mock function object controlling
	// the behavior of the method GetCommits.
	GetCommitsFunc *GitserverClientGetCommitsFunc
	// GetDefaultBranchFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefaultBranch.
	GetDefaultBranchFunc *GitserverClientGetDefaultBranchFunc
	// GetObjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetObject.
	GetObjectFunc *GitserverClientGetObjectFunc
	// HasCommitAfterFunc is an instance of a mock function object
	// controlling the behavior of the method HasCommitAfter.
	HasCommitAfterFunc *GitserverClientHasCommitAfterFunc
	// HeadFunc is an instance of a mock function object controlling the
	// behavior of the method Head.
	HeadFunc *GitserverClientHeadFunc
	// IsPerforcePathCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsPerforcePathCloneable.
	IsPerforcePathCloneableFunc *GitserverClientIsPerforcePathCloneableFunc
	// IsPerforceSuperUserFunc is an instance of a mock function object
	// controlling the behavior of the method IsPerforceSuperUser.
	IsPerforceSuperUserFunc *GitserverClientIsPerforceSuperUserFunc
	// IsRepoCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsRepoCloneable.
	IsRepoCloneableFunc *GitserverClientIsRepoCloneableFunc
	// ListBranchesFunc is an instance of a mock function object controlling
	// the behavior of the method ListBranches.
	ListBranchesFunc *GitserverClientListBranchesFunc
	// ListDirectoryChildrenFunc is an instance of a mock function object
	// controlling the behavior of the method ListDirectoryChildren.
	ListDirectoryChildrenFunc *GitserverClientListDirectoryChildrenFunc
	// ListRefsFunc is an instance of a mock function object controlling the
	// behavior of the method ListRefs.
	ListRefsFunc *GitserverClientListRefsFunc
	// ListTagsFunc is an instance of a mock function object controlling the
	// behavior of the method ListTags.
	ListTagsFunc *GitserverClientListTagsFunc
	// LogReverseEachFunc is an instance of a mock function object
	// controlling the behavior of the method LogReverseEach.
	LogReverseEachFunc *GitserverClientLogReverseEachFunc
	// LsFilesFunc is an instance of a mock function object controlling the
	// behavior of the method LsFiles.
	LsFilesFunc *GitserverClientLsFilesFunc
	// MergeBaseFunc is an instance of a mock function object controlling
	// the behavior of the method MergeBase.
	MergeBaseFunc *GitserverClientMergeBaseFunc
	// NewFileReaderFunc is an instance of a mock function object
	// controlling the behavior of the method NewFileReader.
	NewFileReaderFunc *GitserverClientNewFileReaderFunc
	// PerforceGetChangelistFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceGetChangelist.
	PerforceGetChangelistFunc *GitserverClientPerforceGetChangelistFunc
	// PerforceGroupMembersFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceGroupMembers.
	PerforceGroupMembersFunc *GitserverClientPerforceGroupMembersFunc
	// PerforceProtectsForDepotFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceProtectsForDepot.
	PerforceProtectsForDepotFunc *GitserverClientPerforceProtectsForDepotFunc
	// PerforceProtectsForUserFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceProtectsForUser.
	PerforceProtectsForUserFunc *GitserverClientPerforceProtectsForUserFunc
	// PerforceUsersFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceUsers.
	PerforceUsersFunc *GitserverClientPerforceUsersFunc
	// ReadDirFunc is an instance of a mock function object controlling the
	// behavior of the method ReadDir.
	ReadDirFunc *GitserverClientReadDirFunc
	// ReadFileFunc is an instance of a mock function object controlling the
	// behavior of the method ReadFile.
	ReadFileFunc *GitserverClientReadFileFunc
	// RefDescriptionsFunc is an instance of a mock function object
	// controlling the behavior of the method RefDescriptions.
	RefDescriptionsFunc *GitserverClientRefDescriptionsFunc
	// RemoveFunc is an instance of a mock function object controlling the
	// behavior of the method Remove.
	RemoveFunc *GitserverClientRemoveFunc
	// RepoCloneProgressFunc is an instance of a mock function object
	// controlling the behavior of the method RepoCloneProgress.
	RepoCloneProgressFunc *GitserverClientRepoCloneProgressFunc
	// RequestRepoCloneFunc is an instance of a mock function object
	// controlling the behavior of the method RequestRepoClone.
	RequestRepoCloneFunc *GitserverClientRequestRepoCloneFunc
	// RequestRepoUpdateFunc is an instance of a mock function object
	// controlling the behavior of the method RequestRepoUpdate.
	RequestRepoUpdateFunc *GitserverClientRequestRepoUpdateFunc
	// ResolveRevisionFunc is an instance of a mock function object
	// controlling the behavior of the method ResolveRevision.
	ResolveRevisionFunc *GitserverClientResolveRevisionFunc
	// ResolveRevisionsFunc is an instance of a mock function object
	// controlling the behavior of the method ResolveRevisions.
	ResolveRevisionsFunc *GitserverClientResolveRevisionsFunc
	// RevListFunc is an instance of a mock function object controlling the
	// behavior of the method RevList.
	RevListFunc *GitserverClientRevListFunc
	// SearchFunc is an instance of a mock function object controlling the
	// behavior of the method Search.
	SearchFunc *GitserverClientSearchFunc
	// StatFunc is an instance of a mock function object controlling the
	// behavior of the method Stat.
	StatFunc *GitserverClientStatFunc
	// StreamBlameFileFunc is an instance of a mock function object
	// controlling the behavior of the method StreamBlameFile.
	StreamBlameFileFunc *GitserverClientStreamBlameFileFunc
	// SystemInfoFunc is an instance of a mock function object controlling
	// the behavior of the method SystemInfo.
	SystemInfoFunc *GitserverClientSystemInfoFunc
	// SystemsInfoFunc is an instance of a mock function object controlling
	// the behavior of the method SystemsInfo.
	SystemsInfoFunc *GitserverClientSystemsInfoFunc
}

// NewMockGitserverClient creates a new mock of the Client interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		AddrForRepoFunc: &GitserverClientAddrForRepoFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 string) {
				return
			},
		},
		AddrsFunc: &GitserverClientAddrsFunc{
			defaultHook: func() (r0 []string) {
				return
			},
		},
		ArchiveReaderFunc: &GitserverClientArchiveReaderFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.ArchiveOptions) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		BatchLogFunc: &GitserverClientBatchLogFunc{
			defaultHook: func(context.Context, gitserver.BatchLogOptions, gitserver.BatchLogCallback) (r0 error) {
				return
			},
		},
		BlameFileFunc: &GitserverClientBlameFileFunc{
			defaultHook: func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (r0 []*gitserver.Hunk, r1 error) {
				return
			},
		},
		BranchesContainingFunc: &GitserverClientBranchesContainingFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID) (r0 []string, r1 error) {
				return
			},
		},
		CheckPerforceCredentialsFunc: &GitserverClientCheckPerforceCredentialsFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) (r0 error) {
				return
			},
		},
		CommitDateFunc: &GitserverClientCommitDateFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID) (r0 string, r1 time.Time, r2 bool, r3 error) {
				return
			},
		},
		CommitExistsFunc: &GitserverClientCommitExistsFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID) (r0 bool, r1 error) {
				return
			},
		},
		CommitGraphFunc: &GitserverClientCommitGraphFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.CommitGraphOptions) (r0 *gitdomain.CommitGraph, r1 error) {
				return
			},
		},
		CommitLogFunc: &GitserverClientCommitLogFunc{
			defaultHook: func(context.Context, api.RepoName, time.Time) (r0 []gitserver.CommitLog, r1 error) {
				return
			},
		},
		CommitsFunc: &GitserverClientCommitsFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.CommitsOptions) (r0 []*gitdomain.Commit, r1 error) {
				return
			},
		},
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: func(context.Context, []api.RepoCommit) (r0 []bool, r1 error) {
				return
			},
		},
		CommitsUniqueToBranchFunc: &GitserverClientCommitsUniqueToBranchFunc{
			defaultHook: func(context.Context, api.RepoName, string, bool, *time.Time) (r0 map[string]time.Time, r1 error) {
				return
			},
		},
		ContributorCountFunc: &GitserverClientContributorCountFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.ContributorOptions) (r0 []*gitdomain.ContributorCount, r1 error) {
				return
			},
		},
		CreateCommitFromPatchFunc: &GitserverClientCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest) (r0 *protocol.CreateCommitFromPatchResponse, r1 error) {
				return
			},
		},
		DiffFunc: &GitserverClientDiffFunc{
			defaultHook: func(context.Context, gitserver.DiffOptions) (r0 *gitserver.DiffFileIterator, r1 error) {
				return
			},
		},
		DiffPathFunc: &GitserverClientDiffPathFunc{
			defaultHook: func(context.Context, api.RepoName, string, string, string) (r0 []*diff.Hunk, r1 error) {
				return
			},
		},
		DiffSymbolsFunc: &GitserverClientDiffSymbolsFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, api.CommitID) (r0 []byte, r1 error) {
				return
			},
		},
		FirstEverCommitFunc: &GitserverClientFirstEverCommitFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *gitdomain.Commit, r1 error) {
				return
			},
		},
		GetBehindAheadFunc: &GitserverClientGetBehindAheadFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 *gitdomain.BehindAhead, r1 error) {
				return
			},
		},
		GetCommitFunc: &GitserverClientGetCommitFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, gitserver.ResolveRevisionOptions) (r0 *gitdomain.Commit, r1 error) {
				return
			},
		},
		GetCommitsFunc: &GitserverClientGetCommitsFunc{
			defaultHook: func(context.Context, []api.RepoCommit, bool) (r0 []*gitdomain.Commit, r1 error) {
				return
			},
		},
		GetDefaultBranchFunc: &GitserverClientGetDefaultBranchFunc{
			defaultHook: func(context.Context, api.RepoName, bool) (r0 string, r1 api.CommitID, r2 error) {
				return
			},
		},
		GetObjectFunc: &GitserverClientGetObjectFunc{
			defaultHook: func(context.Context, api.RepoName, string) (r0 *gitdomain.GitObject, r1 error) {
				return
			},
		},
		HasCommitAfterFunc: &GitserverClientHasCommitAfterFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 bool, r1 error) {
				return
			},
		},
		HeadFunc: &GitserverClientHeadFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		IsPerforcePathCloneableFunc: &GitserverClientIsPerforcePathCloneableFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 error) {
				return
			},
		},
		IsPerforceSuperUserFunc: &GitserverClientIsPerforceSuperUserFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) (r0 error) {
				return
			},
		},
		IsRepoCloneableFunc: &GitserverClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 error) {
				return
			},
		},
		ListBranchesFunc: &GitserverClientListBranchesFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.BranchesOptions) (r0 []*gitdomain.Branch, r1 error) {
				return
			},
		},
		ListDirectoryChildrenFunc: &GitserverClientListDirectoryChildrenFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, []string) (r0 map[string][]string, r1 error) {
				return
			},
		},
		ListRefsFunc: &GitserverClientListRefsFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 []gitdomain.Ref, r1 error) {
				return
			},
		},
		ListTagsFunc: &GitserverClientListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (r0 []*gitdomain.Tag, r1 error) {
				return
			},
		},
		LogReverseEachFunc: &GitserverClientLogReverseEachFunc{
			defaultHook: func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) (r0 error) {
				return
			},
		},
		LsFilesFunc: &GitserverClientLsFilesFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) (r0 []string, r1 error) {
				return
			},
		},
		MergeBaseFunc: &GitserverClientMergeBaseFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, api.CommitID) (r0 api.CommitID, r1 error) {
				return
			},
		},
		NewFileReaderFunc: &GitserverClientNewFileReaderFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		PerforceGetChangelistFunc: &GitserverClientPerforceGetChangelistFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 *perforce.Changelist, r1 error) {
				return
			},
		},
		PerforceGroupMembersFunc: &GitserverClientPerforceGroupMembersFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 []string, r1 error) {
				return
			},
		},
		PerforceProtectsForDepotFunc: &GitserverClientPerforceProtectsForDepotFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 []*perforce.Protect, r1 error) {
				return
			},
		},
		PerforceProtectsForUserFunc: &GitserverClientPerforceProtectsForUserFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 []*perforce.Protect, r1 error) {
				return
			},
		},
		PerforceUsersFunc: &GitserverClientPerforceUsersFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) (r0 []*perforce.User, r1 error) {
				return
			},
		},
		ReadDirFunc: &GitserverClientReadDirFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string, bool) (r0 []fs.FileInfo, r1 error) {
				return
			},
		},
		ReadFileFunc: &GitserverClientReadFileFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) (r0 []byte, r1 error) {
				return
			},
		},
		RefDescriptionsFunc: &GitserverClientRefDescriptionsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (r0 map[string][]gitdomain.RefDescription, r1 error) {
				return
			},
		},
		RemoveFunc: &GitserverClientRemoveFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 error) {
				return
			},
		},
		RepoCloneProgressFunc: &GitserverClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, ...api.RepoName) (r0 *protocol.RepoCloneProgressResponse, r1 error) {
				return
			},
		},
		RequestRepoCloneFunc: &GitserverClientRequestRepoCloneFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *protocol.RepoCloneResponse, r1 error) {
				return
			},
		},
		RequestRepoUpdateFunc: &GitserverClientRequestRepoUpdateFunc{
			defaultHook: func(context.Context, api.RepoName, time.Duration) (r0 *protocol.RepoUpdateResponse, r1 error) {
				return
			},
		},
		ResolveRevisionFunc: &GitserverClientResolveRevisionFunc{
			defaultHook: func(context.Context, api.RepoName, string, gitserver.ResolveRevisionOptions) (r0 api.CommitID, r1 error) {
				return
			},
		},
		ResolveRevisionsFunc: &GitserverClientResolveRevisionsFunc{
			defaultHook: func(context.Context, api.RepoName, []protocol.RevisionSpecifier) (r0 []string, r1 error) {
				return
			},
		},
		RevListFunc: &GitserverClientRevListFunc{
			defaultHook: func(context.Context, string, string, func(commit string) (bool, error)) (r0 error) {
				return
			},
		},
		SearchFunc: &GitserverClientSearchFunc{
			defaultHook: func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (r0 bool, r1 error) {
				return
			},
		},
		StatFunc: &GitserverClientStatFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) (r0 fs.FileInfo, r1 error) {
				return
			},
		},
		StreamBlameFileFunc: &GitserverClientStreamBlameFileFunc{
			defaultHook: func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (r0 gitserver.HunkReader, r1 error) {
				return
			},
		},
		SystemInfoFunc: &GitserverClientSystemInfoFunc{
			defaultHook: func(context.Context, string) (r0 protocol.SystemInfo, r1 error) {
				return
			},
		},
		SystemsInfoFunc: &GitserverClientSystemsInfoFunc{
			defaultHook: func(context.Context) (r0 []protocol.SystemInfo, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitserverClient creates a new mock of the Client interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		AddrForRepoFunc: &GitserverClientAddrForRepoFunc{
			defaultHook: func(context.Context, api.RepoName) string {
				panic("unexpected invocation of MockGitserverClient.AddrForRepo")
			},
		},
		AddrsFunc: &GitserverClientAddrsFunc{
			defaultHook: func() []string {
				panic("unexpected invocation of MockGitserverClient.Addrs")
			},
		},
		ArchiveReaderFunc: &GitserverClientArchiveReaderFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
				panic("unexpected invocation of MockGitserverClient.ArchiveReader")
			},
		},
		BatchLogFunc: &GitserverClientBatchLogFunc{
			defaultHook: func(context.Context, gitserver.BatchLogOptions, gitserver.BatchLogCallback) error {
				panic("unexpected invocation of MockGitserverClient.BatchLog")
			},
		},
		BlameFileFunc: &GitserverClientBlameFileFunc{
			defaultHook: func(context.Context, api.RepoName, string, *gitserver.BlameOptions) ([]*gitserver.Hunk, error) {
				panic("unexpected invocation of MockGitserverClient.BlameFile")
			},
		},
		BranchesContainingFunc: &GitserverClientBranchesContainingFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID) ([]string, error) {
				panic("unexpected invocation of MockGitserverClient.BranchesContaining")
			},
		},
		CheckPerforceCredentialsFunc: &GitserverClientCheckPerforceCredentialsFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) error {
				panic("unexpected invocation of MockGitserverClient.CheckPerforceCredentials")
			},
		},
		CommitDateFunc: &GitserverClientCommitDateFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID) (string, time.Time, bool, error) {
				panic("unexpected invocation of MockGitserverClient.CommitDate")
			},
		},
		CommitExistsFunc: &GitserverClientCommitExistsFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID) (bool, error) {
				panic("unexpected invocation of MockGitserverClient.CommitExists")
			},
		},
		CommitGraphFunc: &GitserverClientCommitGraphFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.CommitGraphOptions) (*gitdomain.CommitGraph, error) {
				panic("unexpected invocation of MockGitserverClient.CommitGraph")
			},
		},
		CommitLogFunc: &GitserverClientCommitLogFunc{
			defaultHook: func(context.Context, api.RepoName, time.Time) ([]gitserver.CommitLog, error) {
				panic("unexpected invocation of MockGitserverClient.CommitLog")
			},
		},
		CommitsFunc: &GitserverClientCommitsFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.CommitsOptions) ([]*gitdomain.Commit, error) {
				panic("unexpected invocation of MockGitserverClient.Commits")
			},
		},
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: func(context.Context, []api.RepoCommit) ([]bool, error) {
				panic("unexpected invocation of MockGitserverClient.CommitsExist")
			},
		},
		CommitsUniqueToBranchFunc: &GitserverClientCommitsUniqueToBranchFunc{
			defaultHook: func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
				panic("unexpected invocation of MockGitserverClient.CommitsUniqueToBranch")
			},
		},
		ContributorCountFunc: &GitserverClientContributorCountFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.ContributorOptions) ([]*gitdomain.ContributorCount, error) {
				panic("unexpected invocation of MockGitserverClient.ContributorCount")
			},
		},
		CreateCommitFromPatchFunc: &GitserverClientCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
				panic("unexpected invocation of MockGitserverClient.CreateCommitFromPatch")
			},
		},
		DiffFunc: &GitserverClientDiffFunc{
			defaultHook: func(context.Context, gitserver.DiffOptions) (*gitserver.DiffFileIterator, error) {
				panic("unexpected invocation of MockGitserverClient.Diff")
			},
		},
		DiffPathFunc: &GitserverClientDiffPathFunc{
			defaultHook: func(context.Context, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
				panic("unexpected invocation of MockGitserverClient.DiffPath")
			},
		},
		DiffSymbolsFunc: &GitserverClientDiffSymbolsFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error) {
				panic("unexpected invocation of MockGitserverClient.DiffSymbols")
			},
		},
		FirstEverCommitFunc: &GitserverClientFirstEverCommitFunc{
			defaultHook: func(context.Context, api.RepoName) (*gitdomain.Commit, error) {
				panic("unexpected invocation of MockGitserverClient.FirstEverCommit")
			},
		},
		GetBehindAheadFunc: &GitserverClientGetBehindAheadFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
				panic("unexpected invocation of MockGitserverClient.GetBehindAhead")
			},
		},
		GetCommitFunc: &GitserverClientGetCommitFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, gitserver.ResolveRevisionOptions) (*gitdomain.Commit, error) {
				panic("unexpected invocation of MockGitserverClient.GetCommit")
			},
		},
		GetCommitsFunc: &GitserverClientGetCommitsFunc{
			defaultHook: func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
				panic("unexpected invocation of MockGitserverClient.GetCommits")
			},
		},
		GetDefaultBranchFunc: &GitserverClientGetDefaultBranchFunc{
			defaultHook: func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
				panic("unexpected invocation of MockGitserverClient.GetDefaultBranch")
			},
		},
		GetObjectFunc: &GitserverClientGetObjectFunc{
			defaultHook: func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
				panic("unexpected invocation of MockGitserverClient.GetObject")
			},
		},
		HasCommitAfterFunc: &GitserverClientHasCommitAfterFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (bool, error) {
				panic("unexpected invocation of MockGitserverClient.HasCommitAfter")
			},
		},
		HeadFunc: &GitserverClientHeadFunc{
			defaultHook: func(context.Context, api.RepoName) (string, bool, error) {
				panic("unexpected invocation of MockGitserverClient.Head")
			},
		},
		IsPerforcePathCloneableFunc: &GitserverClientIsPerforcePathCloneableFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) error {
				panic("unexpected invocation of MockGitserverClient.IsPerforcePathCloneable")
			},
		},
		IsPerforceSuperUserFunc: &GitserverClientIsPerforceSuperUserFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) error {
				panic("unexpected invocation of MockGitserverClient.IsPerforceSuperUser")
			},
		},
		IsRepoCloneableFunc: &GitserverClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				panic("unexpected invocation of MockGitserverClient.IsRepoCloneable")
			},
		},
		ListBranchesFunc: &GitserverClientListBranchesFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.BranchesOptions) ([]*gitdomain.Branch, error) {
				panic("unexpected invocation of MockGitserverClient.ListBranches")
			},
		},
		ListDirectoryChildrenFunc: &GitserverClientListDirectoryChildrenFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
				panic("unexpected invocation of MockGitserverClient.ListDirectoryChildren")
			},
		},
		ListRefsFunc: &GitserverClientListRefsFunc{
			defaultHook: func(context.Context, api.RepoName) ([]gitdomain.Ref, error) {
				panic("unexpected invocation of MockGitserverClient.ListRefs")
			},
		},
		ListTagsFunc: &GitserverClientListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
				panic("unexpected invocation of MockGitserverClient.ListTags")
			},
		},
		LogReverseEachFunc: &GitserverClientLogReverseEachFunc{
			defaultHook: func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
				panic("unexpected invocation of MockGitserverClient.LogReverseEach")
			},
		},
		LsFilesFunc: &GitserverClientLsFilesFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
				panic("unexpected invocation of MockGitserverClient.LsFiles")
			},
		},
		MergeBaseFunc: &GitserverClientMergeBaseFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error) {
				panic("unexpected invocation of MockGitserverClient.MergeBase")
			},
		},
		NewFileReaderFunc: &GitserverClientNewFileReaderFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
				panic("unexpected invocation of MockGitserverClient.NewFileReader")
			},
		},
		PerforceGetChangelistFunc: &GitserverClientPerforceGetChangelistFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error) {
				panic("unexpected invocation of MockGitserverClient.PerforceGetChangelist")
			},
		},
		PerforceGroupMembersFunc: &GitserverClientPerforceGroupMembersFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error) {
				panic("unexpected invocation of MockGitserverClient.PerforceGroupMembers")
			},
		},
		PerforceProtectsForDepotFunc: &GitserverClientPerforceProtectsForDepotFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
				panic("unexpected invocation of MockGitserverClient.PerforceProtectsForDepot")
			},
		},
		PerforceProtectsForUserFunc: &GitserverClientPerforceProtectsForUserFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
				panic("unexpected invocation of MockGitserverClient.PerforceProtectsForUser")
			},
		},
		PerforceUsersFunc: &GitserverClientPerforceUsersFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
				panic("unexpected invocation of MockGitserverClient.PerforceUsers")
			},
		},
		ReadDirFunc: &GitserverClientReadDirFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
				panic("unexpected invocation of MockGitserverClient.ReadDir")
			},
		},
		ReadFileFunc: &GitserverClientReadFileFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) ([]byte, error) {
				panic("unexpected invocation of MockGitserverClient.ReadFile")
			},
		},
		RefDescriptionsFunc: &GitserverClientRefDescriptionsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error) {
				panic("unexpected invocation of MockGitserverClient.RefDescriptions")
			},
		},
		RemoveFunc: &GitserverClientRemoveFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				panic("unexpected invocation of MockGitserverClient.Remove")
			},
		},
		RepoCloneProgressFunc: &GitserverClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
				panic("unexpected invocation of MockGitserverClient.RepoCloneProgress")
			},
		},
		RequestRepoCloneFunc: &GitserverClientRequestRepoCloneFunc{
			defaultHook: func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error) {
				panic("unexpected invocation of MockGitserverClient.RequestRepoClone")
			},
		},
		RequestRepoUpdateFunc: &GitserverClientRequestRepoUpdateFunc{
			defaultHook: func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
				panic("unexpected invocation of MockGitserverClient.RequestRepoUpdate")
			},
		},
		ResolveRevisionFunc: &GitserverClientResolveRevisionFunc{
			defaultHook: func(context.Context, api.RepoName, string, gitserver.ResolveRevisionOptions) (api.CommitID, error) {
				panic("unexpected invocation of MockGitserverClient.ResolveRevision")
			},
		},
		ResolveRevisionsFunc: &GitserverClientResolveRevisionsFunc{
			defaultHook: func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error) {
				panic("unexpected invocation of MockGitserverClient.ResolveRevisions")
			},
		},
		RevListFunc: &GitserverClientRevListFunc{
			defaultHook: func(context.Context, string, string, func(commit string) (bool, error)) error {
				panic("unexpected invocation of MockGitserverClient.RevList")
			},
		},
		SearchFunc: &GitserverClientSearchFunc{
			defaultHook: func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
				panic("unexpected invocation of MockGitserverClient.Search")
			},
		},
		StatFunc: &GitserverClientStatFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
				panic("unexpected invocation of MockGitserverClient.Stat")
			},
		},
		StreamBlameFileFunc: &GitserverClientStreamBlameFileFunc{
			defaultHook: func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (gitserver.HunkReader, error) {
				panic("unexpected invocation of MockGitserverClient.StreamBlameFile")
			},
		},
		SystemInfoFunc: &GitserverClientSystemInfoFunc{
			defaultHook: func(context.Context, string) (protocol.SystemInfo, error) {
				panic("unexpected invocation of MockGitserverClient.SystemInfo")
			},
		},
		SystemsInfoFunc: &GitserverClientSystemsInfoFunc{
			defaultHook: func(context.Context) ([]protocol.SystemInfo, error) {
				panic("unexpected invocation of MockGitserverClient.SystemsInfo")
			},
		},
	}
}

// NewMockGitserverClientFrom creates a new mock of the MockGitserverClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGitserverClientFrom(i gitserver.Client) *MockGitserverClient {
	return &MockGitserverClient{
		AddrForRepoFunc: &GitserverClientAddrForRepoFunc{
			defaultHook: i.AddrForRepo,
		},
		AddrsFunc: &GitserverClientAddrsFunc{
			defaultHook: i.Addrs,
		},
		ArchiveReaderFunc: &GitserverClientArchiveReaderFunc{
			defaultHook: i.ArchiveReader,
		},
		BatchLogFunc: &GitserverClientBatchLogFunc{
			defaultHook: i.BatchLog,
		},
		BlameFileFunc: &GitserverClientBlameFileFunc{
			defaultHook: i.BlameFile,
		},
		BranchesContainingFunc: &GitserverClientBranchesContainingFunc{
			defaultHook: i.BranchesContaining,
		},
		CheckPerforceCredentialsFunc: &GitserverClientCheckPerforceCredentialsFunc{
			defaultHook: i.CheckPerforceCredentials,
		},
		CommitDateFunc: &GitserverClientCommitDateFunc{
			defaultHook: i.CommitDate,
		},
		CommitExistsFunc: &GitserverClientCommitExistsFunc{
			defaultHook: i.CommitExists,
		},
		CommitGraphFunc: &GitserverClientCommitGraphFunc{
			defaultHook: i.CommitGraph,
		},
		CommitLogFunc: &GitserverClientCommitLogFunc{
			defaultHook: i.CommitLog,
		},
		CommitsFunc: &GitserverClientCommitsFunc{
			defaultHook: i.Commits,
		},
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: i.CommitsExist,
		},
		CommitsUniqueToBranchFunc: &GitserverClientCommitsUniqueToBranchFunc{
			defaultHook: i.CommitsUniqueToBranch,
		},
		ContributorCountFunc: &GitserverClientContributorCountFunc{
			defaultHook: i.ContributorCount,
		},
		CreateCommitFromPatchFunc: &GitserverClientCreateCommitFromPatchFunc{
			defaultHook: i.CreateCommitFromPatch,
		},
		DiffFunc: &GitserverClientDiffFunc{
			defaultHook: i.Diff,
		},
		DiffPathFunc: &GitserverClientDiffPathFunc{
			defaultHook: i.DiffPath,
		},
		DiffSymbolsFunc: &GitserverClientDiffSymbolsFunc{
			defaultHook: i.DiffSymbols,
		},
		FirstEverCommitFunc: &GitserverClientFirstEverCommitFunc{
			defaultHook: i.FirstEverCommit,
		},
		GetBehindAheadFunc: &GitserverClientGetBehindAheadFunc{
			defaultHook: i.GetBehindAhead,
		},
		GetCommitFunc: &GitserverClientGetCommitFunc{
			defaultHook: i.GetCommit,
		},
		GetCommitsFunc: &GitserverClientGetCommitsFunc{
			defaultHook: i.GetCommits,
		},
		GetDefaultBranchFunc: &GitserverClientGetDefaultBranchFunc{
			defaultHook: i.GetDefaultBranch,
		},
		GetObjectFunc: &GitserverClientGetObjectFunc{
			defaultHook: i.GetObject,
		},
		HasCommitAfterFunc: &GitserverClientHasCommitAfterFunc{
			defaultHook: i.HasCommitAfter,
		},
		HeadFunc: &GitserverClientHeadFunc{
			defaultHook: i.Head,
		},
		IsPerforcePathCloneableFunc: &GitserverClientIsPerforcePathCloneableFunc{
			defaultHook: i.IsPerforcePathCloneable,
		},
		IsPerforceSuperUserFunc: &GitserverClientIsPerforceSuperUserFunc{
			defaultHook: i.IsPerforceSuperUser,
		},
		IsRepoCloneableFunc: &GitserverClientIsRepoCloneableFunc{
			defaultHook: i.IsRepoCloneable,
		},
		ListBranchesFunc: &GitserverClientListBranchesFunc{
			defaultHook: i.ListBranches,
		},
		ListDirectoryChildrenFunc: &GitserverClientListDirectoryChildrenFunc{
			defaultHook: i.ListDirectoryChildren,
		},
		ListRefsFunc: &GitserverClientListRefsFunc{
			defaultHook: i.ListRefs,
		},
		ListTagsFunc: &GitserverClientListTagsFunc{
			defaultHook: i.ListTags,
		},
		LogReverseEachFunc: &GitserverClientLogReverseEachFunc{
			defaultHook: i.LogReverseEach,
		},
		LsFilesFunc: &GitserverClientLsFilesFunc{
			defaultHook: i.LsFiles,
		},
		MergeBaseFunc: &GitserverClientMergeBaseFunc{
			defaultHook: i.MergeBase,
		},
		NewFileReaderFunc: &GitserverClientNewFileReaderFunc{
			defaultHook: i.NewFileReader,
		},
		PerforceGetChangelistFunc: &GitserverClientPerforceGetChangelistFunc{
			defaultHook: i.PerforceGetChangelist,
		},
		PerforceGroupMembersFunc: &GitserverClientPerforceGroupMembersFunc{
			defaultHook: i.PerforceGroupMembers,
		},
		PerforceProtectsForDepotFunc: &GitserverClientPerforceProtectsForDepotFunc{
			defaultHook: i.PerforceProtectsForDepot,
		},
		PerforceProtectsForUserFunc: &GitserverClientPerforceProtectsForUserFunc{
			defaultHook: i.PerforceProtectsForUser,
		},
		PerforceUsersFunc: &GitserverClientPerforceUsersFunc{
			defaultHook: i.PerforceUsers,
		},
		ReadDirFunc: &GitserverClientReadDirFunc{
			defaultHook: i.ReadDir,
		},
		ReadFileFunc: &GitserverClientReadFileFunc{
			defaultHook: i.ReadFile,
		},
		RefDescriptionsFunc: &GitserverClientRefDescriptionsFunc{
			defaultHook: i.RefDescriptions,
		},
		RemoveFunc: &GitserverClientRemoveFunc{
			defaultHook: i.Remove,
		},
		RepoCloneProgressFunc: &GitserverClientRepoCloneProgressFunc{
			defaultHook: i.RepoCloneProgress,
		},
		RequestRepoCloneFunc: &GitserverClientRequestRepoCloneFunc{
			defaultHook: i.RequestRepoClone,
		},
		RequestRepoUpdateFunc: &GitserverClientRequestRepoUpdateFunc{
			defaultHook: i.RequestRepoUpdate,
		},
		ResolveRevisionFunc: &GitserverClientResolveRevisionFunc{
			defaultHook: i.ResolveRevision,
		},
		ResolveRevisionsFunc: &GitserverClientResolveRevisionsFunc{
			defaultHook: i.ResolveRevisions,
		},
		RevListFunc: &GitserverClientRevListFunc{
			defaultHook: i.RevList,
		},
		SearchFunc: &GitserverClientSearchFunc{
			defaultHook: i.Search,
		},
		StatFunc: &GitserverClientStatFunc{
			defaultHook: i.Stat,
		},
		StreamBlameFileFunc: &GitserverClientStreamBlameFileFunc{
			defaultHook: i.StreamBlameFile,
		},
		SystemInfoFunc: &GitserverClientSystemInfoFunc{
			defaultHook: i.SystemInfo,
		},
		SystemsInfoFunc: &GitserverClientSystemsInfoFunc{
			defaultHook: i.SystemsInfo,
		},
	}
}

// GitserverClientAddrForRepoFunc describes the behavior when the
// AddrForRepo method of the parent MockGitserverClient instance is invoked.
type GitserverClientAddrForRepoFunc struct {
	defaultHook func(context.Context, api.RepoName) string
	hooks       []func(context.Context, api.RepoName) string
	history     []GitserverClientAddrForRepoFuncCall
	mutex       sync.Mutex
}

// AddrForRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) AddrForRepo(v0 context.Context, v1 api.RepoName) string {
	r0 := m.AddrForRepoFunc.nextHook()(v0, v1)
	m.AddrForRepoFunc.appendCall(GitserverClientAddrForRepoFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddrForRepo method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientAddrForRepoFunc) SetDefaultHook(hook func(context.Context, api.RepoName) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddrForRepo method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientAddrForRepoFunc) PushHook(hook func(context.Context, api.RepoName) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientAddrForRepoFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(context.Context, api.RepoName) string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientAddrForRepoFunc) PushReturn(r0 string) {
	f.PushHook(func(context.Context, api.RepoName) string {
		return r0
	})
}

func (f *GitserverClientAddrForRepoFunc) nextHook() func(context.Context, api.RepoName) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientAddrForRepoFunc) appendCall(r0 GitserverClientAddrForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientAddrForRepoFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientAddrForRepoFunc) History() []GitserverClientAddrForRepoFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientAddrForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientAddrForRepoFuncCall is an object that describes an
// invocation of method AddrForRepo on an instance of MockGitserverClient.
type GitserverClientAddrForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientAddrForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientAddrForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientAddrsFunc describes the behavior when the Addrs method of
// the parent MockGitserverClient instance is invoked.
type GitserverClientAddrsFunc struct {
	defaultHook func() []string
	hooks       []func() []string
	history     []GitserverClientAddrsFuncCall
	mutex       sync.Mutex
}

// Addrs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) Addrs() []string {
	r0 := m.AddrsFunc.nextHook()()
	m.AddrsFunc.appendCall(GitserverClientAddrsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Addrs method of the
// parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientAddrsFunc) SetDefaultHook(hook func() []string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Addrs method of the parent MockGitserverClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitserverClientAddrsFunc) PushHook(hook func() []string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientAddrsFunc) SetDefaultReturn(r0 []string) {
	f.SetDefaultHook(func() []string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientAddrsFunc) PushReturn(r0 []string) {
	f.PushHook(func() []string {
		return r0
	})
}

func (f *GitserverClientAddrsFunc) nextHook() func() []string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientAddrsFunc) appendCall(r0 GitserverClientAddrsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientAddrsFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientAddrsFunc) History() []GitserverClientAddrsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientAddrsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientAddrsFuncCall is an object that describes an invocation of
// method Addrs on an instance of MockGitserverClient.
type GitserverClientAddrsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientAddrsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientAddrsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientArchiveReaderFunc describes the behavior when the
// ArchiveReader method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientArchiveReaderFunc struct {
	defaultHook func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)
	hooks       []func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)
	history     []GitserverClientArchiveReaderFuncCall
	mutex       sync.Mutex
}

// ArchiveReader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) ArchiveReader(v0 context.Context, v1 api.RepoName, v2 gitserver.ArchiveOptions) (io.ReadCloser, error) {
	r0, r1 := m.ArchiveReaderFunc.nextHook()(v0, v1, v2)
	m.ArchiveReaderFunc.appendCall(GitserverClientArchiveReaderFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ArchiveReader method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientArchiveReaderFunc) SetDefaultHook(hook func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ArchiveReader method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientArchiveReaderFunc) PushHook(hook func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientArchiveReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientArchiveReaderFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *GitserverClientArchiveReaderFunc) nextHook() func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientArchiveReaderFunc) appendCall(r0 GitserverClientArchiveReaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientArchiveReaderFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientArchiveReaderFunc) History() []GitserverClientArchiveReaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientArchiveReaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientArchiveReaderFuncCall is an object that describes an
// invocation of method ArchiveReader on an instance of MockGitserverClient.
type GitserverClientArchiveReaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gitserver.ArchiveOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientArchiveReaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientArchiveReaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientBatchLogFunc describes the behavior when the BatchLog
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientBatchLogFunc struct {
	defaultHook func(context.Context, gitserver.BatchLogOptions, gitserver.BatchLogCallback) error
	hooks       []func(context.Context, gitserver.BatchLogOptions, gitserver.BatchLogCallback) error
	history     []GitserverClientBatchLogFuncCall
	mutex       sync.Mutex
}

// BatchLog delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) BatchLog(v0 context.Context, v1 gitserver.BatchLogOptions, v2 gitserver.BatchLogCallback) error {
	r0 := m.BatchLogFunc.nextHook()(v0, v1, v2)
	m.BatchLogFunc.appendCall(GitserverClientBatchLogFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BatchLog method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientBatchLogFunc) SetDefaultHook(hook func(context.Context, gitserver.BatchLogOptions, gitserver.BatchLogCallback) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BatchLog method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientBatchLogFunc) PushHook(hook func(context.Context, gitserver.BatchLogOptions, gitserver.BatchLogCallback) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientBatchLogFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, gitserver.BatchLogOptions, gitserver.BatchLogCallback) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientBatchLogFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, gitserver.BatchLogOptions, gitserver.BatchLogCallback) error {
		return r0
	})
}

func (f *GitserverClientBatchLogFunc) nextHook() func(context.Context, gitserver.BatchLogOptions, gitserver.BatchLogCallback) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientBatchLogFunc) appendCall(r0 GitserverClientBatchLogFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientBatchLogFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientBatchLogFunc) History() []GitserverClientBatchLogFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientBatchLogFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientBatchLogFuncCall is an object that describes an invocation
// of method BatchLog on an instance of MockGitserverClient.
type GitserverClientBatchLogFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 gitserver.BatchLogOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gitserver.BatchLogCallback
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientBatchLogFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientBatchLogFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientBlameFileFunc describes the behavior when the BlameFile
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientBlameFileFunc struct {
	defaultHook func(context.Context, api.RepoName, string, *gitserver.BlameOptions) ([]*gitserver.Hunk, error)
	hooks       []func(context.Context, api.RepoName, string, *gitserver.BlameOptions) ([]*gitserver.Hunk, error)
	history     []GitserverClientBlameFileFuncCall
	mutex       sync.Mutex
}

// BlameFile delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) BlameFile(v0 context.Context, v1 api.RepoName, v2 string, v3 *gitserver.BlameOptions) ([]*gitserver.Hunk, error) {
	r0, r1 := m.BlameFileFunc.nextHook()(v0, v1, v2, v3)
	m.BlameFileFunc.appendCall(GitserverClientBlameFileFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BlameFile method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientBlameFileFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, *gitserver.BlameOptions) ([]*gitserver.Hunk, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BlameFile method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientBlameFileFunc) PushHook(hook func(context.Context, api.RepoName, string, *gitserver.BlameOptions) ([]*gitserver.Hunk, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientBlameFileFunc) SetDefaultReturn(r0 []*gitserver.Hunk, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, *gitserver.BlameOptions) ([]*gitserver.Hunk, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientBlameFileFunc) PushReturn(r0 []*gitserver.Hunk, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, *gitserver.BlameOptions) ([]*gitserver.Hunk, error) {
		return r0, r1
	})
}

func (f *GitserverClientBlameFileFunc) nextHook() func(context.Context, api.RepoName, string, *gitserver.BlameOptions) ([]*gitserver.Hunk, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientBlameFileFunc) appendCall(r0 GitserverClientBlameFileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientBlameFileFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientBlameFileFunc) History() []GitserverClientBlameFileFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientBlameFileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientBlameFileFuncCall is an object that describes an
// invocation of method BlameFile on an instance of MockGitserverClient.
type GitserverClientBlameFileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *gitserver.BlameOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitserver.Hunk
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientBlameFileFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientBlameFileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientBranchesContainingFunc describes the behavior when the
// BranchesContaining method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientBranchesContainingFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID) ([]string, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID) ([]string, error)
	history     []GitserverClientBranchesContainingFuncCall
	mutex       sync.Mutex
}

// BranchesContaining delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) BranchesContaining(v0 context.Context, v1 api.RepoName, v2 api.CommitID) ([]string, error) {
	r0, r1 := m.BranchesContainingFunc.nextHook()(v0, v1, v2)
	m.BranchesContainingFunc.appendCall(GitserverClientBranchesContainingFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BranchesContaining
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientBranchesContainingFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BranchesContaining method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientBranchesContainingFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientBranchesContainingFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientBranchesContainingFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID) ([]string, error) {
		return r0, r1
	})
}

func (f *GitserverClientBranchesContainingFunc) nextHook() func(context.Context, api.RepoName, api.CommitID) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientBranchesContainingFunc) appendCall(r0 GitserverClientBranchesContainingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientBranchesContainingFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientBranchesContainingFunc) History() []GitserverClientBranchesContainingFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientBranchesContainingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientBranchesContainingFuncCall is an object that describes an
// invocation of method BranchesContaining on an instance of
// MockGitserverClient.
type GitserverClientBranchesContainingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientBranchesContainingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientBranchesContainingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientCheckPerforceCredentialsFunc describes the behavior when
// the CheckPerforceCredentials method of the parent MockGitserverClient
// instance is invoked.
type GitserverClientCheckPerforceCredentialsFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails) error
	hooks       []func(context.Context, protocol.PerforceConnectionDetails) error
	history     []GitserverClientCheckPerforceCredentialsFuncCall
	mutex       sync.Mutex
}

// CheckPerforceCredentials delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverClient) CheckPerforceCredentials(v0 context.Context, v1 protocol.PerforceConnectionDetails) error {
	r0 := m.CheckPerforceCredentialsFunc.nextHook()(v0, v1)
	m.CheckPerforceCredentialsFunc.appendCall(GitserverClientCheckPerforceCredentialsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CheckPerforceCredentials method of the parent MockGitserverClient
// instance is invoked and the hook queue is empty.
func (f *GitserverClientCheckPerforceCredentialsFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CheckPerforceCredentials method of the parent MockGitserverClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverClientCheckPerforceCredentialsFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCheckPerforceCredentialsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCheckPerforceCredentialsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails) error {
		return r0
	})
}

func (f *GitserverClientCheckPerforceCredentialsFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCheckPerforceCredentialsFunc) appendCall(r0 GitserverClientCheckPerforceCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverClientCheckPerforceCredentialsFuncCall objects describing the
// invocations of this function.
func (f *GitserverClientCheckPerforceCredentialsFunc) History() []GitserverClientCheckPerforceCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCheckPerforceCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCheckPerforceCredentialsFuncCall is an object that
// describes an invocation of method CheckPerforceCredentials on an instance
// of MockGitserverClient.
type GitserverClientCheckPerforceCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCheckPerforceCredentialsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCheckPerforceCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientCommitDateFunc describes the behavior when the CommitDate
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientCommitDateFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID) (string, time.Time, bool, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID) (string, time.Time, bool, error)
	history     []GitserverClientCommitDateFuncCall
	mutex       sync.Mutex
}

// CommitDate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitDate(v0 context.Context, v1 api.RepoName, v2 api.CommitID) (string, time.Time, bool, error) {
	r0, r1, r2, r3 := m.CommitDateFunc.nextHook()(v0, v1, v2)
	m.CommitDateFunc.appendCall(GitserverClientCommitDateFuncCall{v0, v1, v2, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the CommitDate method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientCommitDateFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID) (string, time.Time, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitDate method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientCommitDateFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID) (string, time.Time, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitDateFunc) SetDefaultReturn(r0 string, r1 time.Time, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID) (string, time.Time, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitDateFunc) PushReturn(r0 string, r1 time.Time, r2 bool, r3 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID) (string, time.Time, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *GitserverClientCommitDateFunc) nextHook() func(context.Context, api.RepoName, api.CommitID) (string, time.Time, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitDateFunc) appendCall(r0 GitserverClientCommitDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitDateFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitDateFunc) History() []GitserverClientCommitDateFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitDateFuncCall is an object that describes an
// invocation of method CommitDate on an instance of MockGitserverClient.
type GitserverClientCommitDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 time.Time
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// GitserverClientCommitExistsFunc describes the behavior when the
// CommitExists method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientCommitExistsFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID) (bool, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID) (bool, error)
	history     []GitserverClientCommitExistsFuncCall
	mutex       sync.Mutex
}

// CommitExists delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitExists(v0 context.Context, v1 api.RepoName, v2 api.CommitID) (bool, error) {
	r0, r1 := m.CommitExistsFunc.nextHook()(v0, v1, v2)
	m.CommitExistsFunc.appendCall(GitserverClientCommitExistsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitExists method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientCommitExistsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitExists method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientCommitExistsFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID) (bool, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitExistsFunc) nextHook() func(context.Context, api.RepoName, api.CommitID) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitExistsFunc) appendCall(r0 GitserverClientCommitExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitExistsFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitExistsFunc) History() []GitserverClientCommitExistsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitExistsFuncCall is an object that describes an
// invocation of method CommitExists on an instance of MockGitserverClient.
type GitserverClientCommitExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientCommitGraphFunc describes the behavior when the
// CommitGraph method of the parent MockGitserverClient instance is invoked.
type GitserverClientCommitGraphFunc struct {
	defaultHook func(context.Context, api.RepoName, gitserver.CommitGraphOptions) (*gitdomain.CommitGraph, error)
	hooks       []func(context.Context, api.RepoName, gitserver.CommitGraphOptions) (*gitdomain.CommitGraph, error)
	history     []GitserverClientCommitGraphFuncCall
	mutex       sync.Mutex
}

// CommitGraph delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitGraph(v0 context.Context, v1 api.RepoName, v2 gitserver.CommitGraphOptions) (*gitdomain.CommitGraph, error) {
	r0, r1 := m.CommitGraphFunc.nextHook()(v0, v1, v2)
	m.CommitGraphFunc.appendCall(GitserverClientCommitGraphFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitGraph method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientCommitGraphFunc) SetDefaultHook(hook func(context.Context, api.RepoName, gitserver.CommitGraphOptions) (*gitdomain.CommitGraph, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitGraph method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientCommitGraphFunc) PushHook(hook func(context.Context, api.RepoName, gitserver.CommitGraphOptions) (*gitdomain.CommitGraph, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitGraphFunc) SetDefaultReturn(r0 *gitdomain.CommitGraph, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, gitserver.CommitGraphOptions) (*gitdomain.CommitGraph, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitGraphFunc) PushReturn(r0 *gitdomain.CommitGraph, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, gitserver.CommitGraphOptions) (*gitdomain.CommitGraph, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitGraphFunc) nextHook() func(context.Context, api.RepoName, gitserver.CommitGraphOptions) (*gitdomain.CommitGraph, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitGraphFunc) appendCall(r0 GitserverClientCommitGraphFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitGraphFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitGraphFunc) History() []GitserverClientCommitGraphFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitGraphFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitGraphFuncCall is an object that describes an
// invocation of method CommitGraph on an instance of MockGitserverClient.
type GitserverClientCommitGraphFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gitserver.CommitGraphOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.CommitGraph
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitGraphFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitGraphFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientCommitLogFunc describes the behavior when the CommitLog
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientCommitLogFunc struct {
	defaultHook func(context.Context, api.RepoName, time.Time) ([]gitserver.CommitLog, error)
	hooks       []func(context.Context, api.RepoName, time.Time) ([]gitserver.CommitLog, error)
	history     []GitserverClientCommitLogFuncCall
	mutex       sync.Mutex
}

// CommitLog delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) CommitLog(v0 context.Context, v1 api.RepoName, v2 time.Time) ([]gitserver.CommitLog, error) {
	r0, r1 := m.CommitLogFunc.nextHook()(v0, v1, v2)
	m.CommitLogFunc.appendCall(GitserverClientCommitLogFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitLog method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientCommitLogFunc) SetDefaultHook(hook func(context.Context, api.RepoName, time.Time) ([]gitserver.CommitLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitLog method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientCommitLogFunc) PushHook(hook func(context.Context, api.RepoName, time.Time) ([]gitserver.CommitLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitLogFunc) SetDefaultReturn(r0 []gitserver.CommitLog, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, time.Time) ([]gitserver.CommitLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitLogFunc) PushReturn(r0 []gitserver.CommitLog, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, time.Time) ([]gitserver.CommitLog, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitLogFunc) nextHook() func(context.Context, api.RepoName, time.Time) ([]gitserver.CommitLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitLogFunc) appendCall(r0 GitserverClientCommitLogFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitLogFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitLogFunc) History() []GitserverClientCommitLogFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitLogFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitLogFuncCall is an object that describes an
// invocation of method CommitLog on an instance of MockGitserverClient.
type GitserverClientCommitLogFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []gitserver.CommitLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitLogFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitLogFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientCommitsFunc describes the behavior when the Commits method
// of the parent MockGitserverClient instance is invoked.
type GitserverClientCommitsFunc struct {
	defaultHook func(context.Context, api.RepoName, gitserver.CommitsOptions) ([]*gitdomain.Commit, error)
	hooks       []func(context.Context, api.RepoName, gitserver.CommitsOptions) ([]*gitdomain.Commit, error)
	history     []GitserverClientCommitsFuncCall
	mutex       sync.Mutex
}

// Commits delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) Commits(v0 context.Context, v1 api.RepoName, v2 gitserver.CommitsOptions) ([]*gitdomain.Commit, error) {
	r0, r1 := m.CommitsFunc.nextHook()(v0, v1, v2)
	m.CommitsFunc.appendCall(GitserverClientCommitsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Commits method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientCommitsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, gitserver.CommitsOptions) ([]*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Commits method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientCommitsFunc) PushHook(hook func(context.Context, api.RepoName, gitserver.CommitsOptions) ([]*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitsFunc) SetDefaultReturn(r0 []*gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, gitserver.CommitsOptions) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitsFunc) PushReturn(r0 []*gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, gitserver.CommitsOptions) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitsFunc) nextHook() func(context.Context, api.RepoName, gitserver.CommitsOptions) ([]*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitsFunc) appendCall(r0 GitserverClientCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitsFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitsFunc) History() []GitserverClientCommitsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitsFuncCall is an object that describes an invocation
// of method Commits on an instance of MockGitserverClient.
type GitserverClientCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gitserver.CommitsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientCommitsExistFunc describes the behavior when the
// CommitsExist method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientCommitsExistFunc struct {
	defaultHook func(context.Context, []api.RepoCommit) ([]bool, error)
	hooks       []func(context.Context, []api.RepoCommit) ([]bool, error)
	history     []GitserverClientCommitsExistFuncCall
	mutex       sync.Mutex
}

// CommitsExist delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitsExist(v0 context.Context, v1 []api.RepoCommit) ([]bool, error) {
	r0, r1 := m.CommitsExistFunc.nextHook()(v0, v1)
	m.CommitsExistFunc.appendCall(GitserverClientCommitsExistFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitsExist method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientCommitsExistFunc) SetDefaultHook(hook func(context.Context, []api.RepoCommit) ([]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitsExist method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientCommitsExistFunc) PushHook(hook func(context.Context, []api.RepoCommit) ([]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitsExistFunc) SetDefaultReturn(r0 []bool, r1 error) {
	f.SetDefaultHook(func(context.Context, []api.RepoCommit) ([]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitsExistFunc) PushReturn(r0 []bool, r1 error) {
	f.PushHook(func(context.Context, []api.RepoCommit) ([]bool, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitsExistFunc) nextHook() func(context.Context, []api.RepoCommit) ([]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitsExistFunc) appendCall(r0 GitserverClientCommitsExistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitsExistFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitsExistFunc) History() []GitserverClientCommitsExistFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitsExistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitsExistFuncCall is an object that describes an
// invocation of method CommitsExist on an instance of MockGitserverClient.
type GitserverClientCommitsExistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []api.RepoCommit
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitsExistFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitsExistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientCommitsUniqueToBranchFunc describes the behavior when the
// CommitsUniqueToBranch method of the parent MockGitserverClient instance
// is invoked.
type GitserverClientCommitsUniqueToBranchFunc struct {
	defaultHook func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)
	hooks       []func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)
	history     []GitserverClientCommitsUniqueToBranchFuncCall
	mutex       sync.Mutex
}

// CommitsUniqueToBranch delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitsUniqueToBranch(v0 context.Context, v1 api.RepoName, v2 string, v3 bool, v4 *time.Time) (map[string]time.Time, error) {
	r0, r1 := m.CommitsUniqueToBranchFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CommitsUniqueToBranchFunc.appendCall(GitserverClientCommitsUniqueToBranchFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CommitsUniqueToBranch method of the parent MockGitserverClient instance
// is invoked and the hook queue is empty.
func (f *GitserverClientCommitsUniqueToBranchFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitsUniqueToBranch method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientCommitsUniqueToBranchFunc) PushHook(hook func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitsUniqueToBranchFunc) SetDefaultReturn(r0 map[string]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitsUniqueToBranchFunc) PushReturn(r0 map[string]time.Time, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitsUniqueToBranchFunc) nextHook() func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitsUniqueToBranchFunc) appendCall(r0 GitserverClientCommitsUniqueToBranchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverClientCommitsUniqueToBranchFuncCall objects describing the
// invocations of this function.
func (f *GitserverClientCommitsUniqueToBranchFunc) History() []GitserverClientCommitsUniqueToBranchFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitsUniqueToBranchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitsUniqueToBranchFuncCall is an object that describes
// an invocation of method CommitsUniqueToBranch on an instance of
// MockGitserverClient.
type GitserverClientCommitsUniqueToBranchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitsUniqueToBranchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitsUniqueToBranchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientContributorCountFunc describes the behavior when the
// ContributorCount method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientContributorCountFunc struct {
	defaultHook func(context.Context, api.RepoName, gitserver.ContributorOptions) ([]*gitdomain.ContributorCount, error)
	hooks       []func(context.Context, api.RepoName, gitserver.ContributorOptions) ([]*gitdomain.ContributorCount, error)
	history     []GitserverClientContributorCountFuncCall
	mutex       sync.Mutex
}

// ContributorCount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) ContributorCount(v0 context.Context, v1 api.RepoName, v2 gitserver.ContributorOptions) ([]*gitdomain.ContributorCount, error) {
	r0, r1 := m.ContributorCountFunc.nextHook()(v0, v1, v2)
	m.ContributorCountFunc.appendCall(GitserverClientContributorCountFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ContributorCount
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientContributorCountFunc) SetDefaultHook(hook func(context.Context, api.RepoName, gitserver.ContributorOptions) ([]*gitdomain.ContributorCount, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContributorCount method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientContributorCountFunc) PushHook(hook func(context.Context, api.RepoName, gitserver.ContributorOptions) ([]*gitdomain.ContributorCount, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientContributorCountFunc) SetDefaultReturn(r0 []*gitdomain.ContributorCount, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, gitserver.ContributorOptions) ([]*gitdomain.ContributorCount, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientContributorCountFunc) PushReturn(r0 []*gitdomain.ContributorCount, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, gitserver.ContributorOptions) ([]*gitdomain.ContributorCount, error) {
		return r0, r1
	})
}

func (f *GitserverClientContributorCountFunc) nextHook() func(context.Context, api.RepoName, gitserver.ContributorOptions) ([]*gitdomain.ContributorCount, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientContributorCountFunc) appendCall(r0 GitserverClientContributorCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientContributorCountFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientContributorCountFunc) History() []GitserverClientContributorCountFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientContributorCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientContributorCountFuncCall is an object that describes an
// invocation of method ContributorCount on an instance of
// MockGitserverClient.
type GitserverClientContributorCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gitserver.ContributorOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.ContributorCount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientContributorCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientContributorCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientCreateCommitFromPatchFunc describes the behavior when the
// CreateCommitFromPatch method of the parent MockGitserverClient instance
// is invoked.
type GitserverClientCreateCommitFromPatchFunc struct {
	defaultHook func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)
	hooks       []func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)
	history     []GitserverClientCreateCommitFromPatchFuncCall
	mutex       sync.Mutex
}

// CreateCommitFromPatch delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverClient) CreateCommitFromPatch(v0 context.Context, v1 protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
	r0, r1 := m.CreateCommitFromPatchFunc.nextHook()(v0, v1)
	m.CreateCommitFromPatchFunc.appendCall(GitserverClientCreateCommitFromPatchFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateCommitFromPatch method of the parent MockGitserverClient instance
// is invoked and the hook queue is empty.
func (f *GitserverClientCreateCommitFromPatchFunc) SetDefaultHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCommitFromPatch method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientCreateCommitFromPatchFunc) PushHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCreateCommitFromPatchFunc) SetDefaultReturn(r0 *protocol.CreateCommitFromPatchResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCreateCommitFromPatchFunc) PushReturn(r0 *protocol.CreateCommitFromPatchResponse, r1 error) {
	f.PushHook(func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
		return r0, r1
	})
}

func (f *GitserverClientCreateCommitFromPatchFunc) nextHook() func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCreateCommitFromPatchFunc) appendCall(r0 GitserverClientCreateCommitFromPatchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverClientCreateCommitFromPatchFuncCall objects describing the
// invocations of this function.
func (f *GitserverClientCreateCommitFromPatchFunc) History() []GitserverClientCreateCommitFromPatchFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCreateCommitFromPatchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCreateCommitFromPatchFuncCall is an object that describes
// an invocation of method CreateCommitFromPatch on an instance of
// MockGitserverClient.
type GitserverClientCreateCommitFromPatchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.CreateCommitFromPatchRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.CreateCommitFromPatchResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCreateCommitFromPatchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCreateCommitFromPatchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientDiffFunc describes the behavior when the Diff method of
// the parent MockGitserverClient instance is invoked.
type GitserverClientDiffFunc struct {
	defaultHook func(context.Context, gitserver.DiffOptions) (*gitserver.DiffFileIterator, error)
	hooks       []func(context.Context, gitserver.DiffOptions) (*gitserver.DiffFileIterator, error)
	history     []GitserverClientDiffFuncCall
	mutex       sync.Mutex
}

// Diff delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) Diff(v0 context.Context, v1 gitserver.DiffOptions) (*gitserver.DiffFileIterator, error) {
	r0, r1 := m.DiffFunc.nextHook()(v0, v1)
	m.DiffFunc.appendCall(GitserverClientDiffFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Diff method of the
// parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientDiffFunc) SetDefaultHook(hook func(context.Context, gitserver.DiffOptions) (*gitserver.DiffFileIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Diff method of the parent MockGitserverClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitserverClientDiffFunc) PushHook(hook func(context.Context, gitserver.DiffOptions) (*gitserver.DiffFileIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientDiffFunc) SetDefaultReturn(r0 *gitserver.DiffFileIterator, r1 error) {
	f.SetDefaultHook(func(context.Context, gitserver.DiffOptions) (*gitserver.DiffFileIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientDiffFunc) PushReturn(r0 *gitserver.DiffFileIterator, r1 error) {
	f.PushHook(func(context.Context, gitserver.DiffOptions) (*gitserver.DiffFileIterator, error) {
		return r0, r1
	})
}

func (f *GitserverClientDiffFunc) nextHook() func(context.Context, gitserver.DiffOptions) (*gitserver.DiffFileIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientDiffFunc) appendCall(r0 GitserverClientDiffFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientDiffFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientDiffFunc) History() []GitserverClientDiffFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientDiffFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientDiffFuncCall is an object that describes an invocation of
// method Diff on an instance of MockGitserverClient.
type GitserverClientDiffFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 gitserver.DiffOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitserver.DiffFileIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientDiffFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientDiffFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientDiffPathFunc describes the behavior when the DiffPath
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientDiffPathFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string, string) ([]*diff.Hunk, error)
	hooks       []func(context.Context, api.RepoName, string, string, string) ([]*diff.Hunk, error)
	history     []GitserverClientDiffPathFuncCall
	mutex       sync.Mutex
}

// DiffPath delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) DiffPath(v0 context.Context, v1 api.RepoName, v2 string, v3 string, v4 string) ([]*diff.Hunk, error) {
	r0, r1 := m.DiffPathFunc.nextHook()(v0, v1, v2, v3, v4)
	m.DiffPathFunc.appendCall(GitserverClientDiffPathFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DiffPath method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientDiffPathFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string, string) ([]*diff.Hunk, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DiffPath method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientDiffPathFunc) PushHook(hook func(context.Context, api.RepoName, string, string, string) ([]*diff.Hunk, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientDiffPathFunc) SetDefaultReturn(r0 []*diff.Hunk, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientDiffPathFunc) PushReturn(r0 []*diff.Hunk, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
		return r0, r1
	})
}

func (f *GitserverClientDiffPathFunc) nextHook() func(context.Context, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientDiffPathFunc) appendCall(r0 GitserverClientDiffPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientDiffPathFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientDiffPathFunc) History() []GitserverClientDiffPathFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientDiffPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientDiffPathFuncCall is an object that describes an invocation
// of method DiffPath on an instance of MockGitserverClient.
type GitserverClientDiffPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*diff.Hunk
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientDiffPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientDiffPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientDiffSymbolsFunc describes the behavior when the
// DiffSymbols method of the parent MockGitserverClient instance is invoked.
type GitserverClientDiffSymbolsFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error)
	history     []GitserverClientDiffSymbolsFuncCall
	mutex       sync.Mutex
}

// DiffSymbols delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) DiffSymbols(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 api.CommitID) ([]byte, error) {
	r0, r1 := m.DiffSymbolsFunc.nextHook()(v0, v1, v2, v3)
	m.DiffSymbolsFunc.appendCall(GitserverClientDiffSymbolsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DiffSymbols method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientDiffSymbolsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DiffSymbols method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientDiffSymbolsFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientDiffSymbolsFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientDiffSymbolsFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error) {
		return r0, r1
	})
}

func (f *GitserverClientDiffSymbolsFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientDiffSymbolsFunc) appendCall(r0 GitserverClientDiffSymbolsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientDiffSymbolsFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientDiffSymbolsFunc) History() []GitserverClientDiffSymbolsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientDiffSymbolsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientDiffSymbolsFuncCall is an object that describes an
// invocation of method DiffSymbols on an instance of MockGitserverClient.
type GitserverClientDiffSymbolsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientDiffSymbolsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientDiffSymbolsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientFirstEverCommitFunc describes the behavior when the
// FirstEverCommit method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientFirstEverCommitFunc struct {
	defaultHook func(context.Context, api.RepoName) (*gitdomain.Commit, error)
	hooks       []func(context.Context, api.RepoName) (*gitdomain.Commit, error)
	history     []GitserverClientFirstEverCommitFuncCall
	mutex       sync.Mutex
}

// FirstEverCommit delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) FirstEverCommit(v0 context.Context, v1 api.RepoName) (*gitdomain.Commit, error) {
	r0, r1 := m.FirstEverCommitFunc.nextHook()(v0, v1)
	m.FirstEverCommitFunc.appendCall(GitserverClientFirstEverCommitFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FirstEverCommit
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientFirstEverCommitFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FirstEverCommit method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientFirstEverCommitFunc) PushHook(hook func(context.Context, api.RepoName) (*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientFirstEverCommitFunc) SetDefaultReturn(r0 *gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientFirstEverCommitFunc) PushReturn(r0 *gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *GitserverClientFirstEverCommitFunc) nextHook() func(context.Context, api.RepoName) (*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientFirstEverCommitFunc) appendCall(r0 GitserverClientFirstEverCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientFirstEverCommitFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientFirstEverCommitFunc) History() []GitserverClientFirstEverCommitFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientFirstEverCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientFirstEverCommitFuncCall is an object that describes an
// invocation of method FirstEverCommit on an instance of
// MockGitserverClient.
type GitserverClientFirstEverCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientFirstEverCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientFirstEverCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientGetBehindAheadFunc describes the behavior when the
// GetBehindAhead method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientGetBehindAheadFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)
	hooks       []func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)
	history     []GitserverClientGetBehindAheadFuncCall
	mutex       sync.Mutex
}

// GetBehindAhead delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) GetBehindAhead(v0 context.Context, v1 api.RepoName, v2 string, v3 string) (*gitdomain.BehindAhead, error) {
	r0, r1 := m.GetBehindAheadFunc.nextHook()(v0, v1, v2, v3)
	m.GetBehindAheadFunc.appendCall(GitserverClientGetBehindAheadFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBehindAhead
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientGetBehindAheadFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBehindAhead method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientGetBehindAheadFunc) PushHook(hook func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientGetBehindAheadFunc) SetDefaultReturn(r0 *gitdomain.BehindAhead, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientGetBehindAheadFunc) PushReturn(r0 *gitdomain.BehindAhead, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
		return r0, r1
	})
}

func (f *GitserverClientGetBehindAheadFunc) nextHook() func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientGetBehindAheadFunc) appendCall(r0 GitserverClientGetBehindAheadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientGetBehindAheadFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientGetBehindAheadFunc) History() []GitserverClientGetBehindAheadFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientGetBehindAheadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientGetBehindAheadFuncCall is an object that describes an
// invocation of method GetBehindAhead on an instance of
// MockGitserverClient.
type GitserverClientGetBehindAheadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.BehindAhead
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientGetBehindAheadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientGetBehindAheadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientGetCommitFunc describes the behavior when the GetCommit
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientGetCommitFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, gitserver.ResolveRevisionOptions) (*gitdomain.Commit, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, gitserver.ResolveRevisionOptions) (*gitdomain.Commit, error)
	history     []GitserverClientGetCommitFuncCall
	mutex       sync.Mutex
}

// GetCommit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) GetCommit(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 gitserver.ResolveRevisionOptions) (*gitdomain.Commit, error) {
	r0, r1 := m.GetCommitFunc.nextHook()(v0, v1, v2, v3)
	m.GetCommitFunc.appendCall(GitserverClientGetCommitFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCommit method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientGetCommitFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, gitserver.ResolveRevisionOptions) (*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommit method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientGetCommitFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, gitserver.ResolveRevisionOptions) (*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientGetCommitFunc) SetDefaultReturn(r0 *gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, gitserver.ResolveRevisionOptions) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientGetCommitFunc) PushReturn(r0 *gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, gitserver.ResolveRevisionOptions) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *GitserverClientGetCommitFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, gitserver.ResolveRevisionOptions) (*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientGetCommitFunc) appendCall(r0 GitserverClientGetCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientGetCommitFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientGetCommitFunc) History() []GitserverClientGetCommitFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientGetCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientGetCommitFuncCall is an object that describes an
// invocation of method GetCommit on an instance of MockGitserverClient.
type GitserverClientGetCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 gitserver.ResolveRevisionOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientGetCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientGetCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientGetCommitsFunc describes the behavior when the GetCommits
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientGetCommitsFunc struct {
	defaultHook func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)
	hooks       []func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)
	history     []GitserverClientGetCommitsFuncCall
	mutex       sync.Mutex
}

// GetCommits delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) GetCommits(v0 context.Context, v1 []api.RepoCommit, v2 bool) ([]*gitdomain.Commit, error) {
	r0, r1 := m.GetCommitsFunc.nextHook()(v0, v1, v2)
	m.GetCommitsFunc.appendCall(GitserverClientGetCommitsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCommits method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientGetCommitsFunc) SetDefaultHook(hook func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommits method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientGetCommitsFunc) PushHook(hook func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientGetCommitsFunc) SetDefaultReturn(r0 []*gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientGetCommitsFunc) PushReturn(r0 []*gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *GitserverClientGetCommitsFunc) nextHook() func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientGetCommitsFunc) appendCall(r0 GitserverClientGetCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientGetCommitsFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientGetCommitsFunc) History() []GitserverClientGetCommitsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientGetCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientGetCommitsFuncCall is an object that describes an
// invocation of method GetCommits on an instance of MockGitserverClient.
type GitserverClientGetCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []api.RepoCommit
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientGetCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientGetCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientGetDefaultBranchFunc describes the behavior when the
// GetDefaultBranch method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientGetDefaultBranchFunc struct {
	defaultHook func(context.Context, api.RepoName, bool) (string, api.CommitID, error)
	hooks       []func(context.Context, api.RepoName, bool) (string, api.CommitID, error)
	history     []GitserverClientGetDefaultBranchFuncCall
	mutex       sync.Mutex
}

// GetDefaultBranch delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) GetDefaultBranch(v0 context.Context, v1 api.RepoName, v2 bool) (string, api.CommitID, error) {
	r0, r1, r2 := m.GetDefaultBranchFunc.nextHook()(v0, v1, v2)
	m.GetDefaultBranchFunc.appendCall(GitserverClientGetDefaultBranchFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDefaultBranch
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientGetDefaultBranchFunc) SetDefaultHook(hook func(context.Context, api.RepoName, bool) (string, api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefaultBranch method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientGetDefaultBranchFunc) PushHook(hook func(context.Context, api.RepoName, bool) (string, api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientGetDefaultBranchFunc) SetDefaultReturn(r0 string, r1 api.CommitID, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientGetDefaultBranchFunc) PushReturn(r0 string, r1 api.CommitID, r2 error) {
	f.PushHook(func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
		return r0, r1, r2
	})
}

func (f *GitserverClientGetDefaultBranchFunc) nextHook() func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientGetDefaultBranchFunc) appendCall(r0 GitserverClientGetDefaultBranchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientGetDefaultBranchFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientGetDefaultBranchFunc) History() []GitserverClientGetDefaultBranchFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientGetDefaultBranchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientGetDefaultBranchFuncCall is an object that describes an
// invocation of method GetDefaultBranch on an instance of
// MockGitserverClient.
type GitserverClientGetDefaultBranchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 api.CommitID
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientGetDefaultBranchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientGetDefaultBranchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GitserverClientGetObjectFunc describes the behavior when the GetObject
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientGetObjectFunc struct {
	defaultHook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)
	hooks       []func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)
	history     []GitserverClientGetObjectFuncCall
	mutex       sync.Mutex
}

// GetObject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) GetObject(v0 context.Context, v1 api.RepoName, v2 string) (*gitdomain.GitObject, error) {
	r0, r1 := m.GetObjectFunc.nextHook()(v0, v1, v2)
	m.GetObjectFunc.appendCall(GitserverClientGetObjectFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetObject method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientGetObjectFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetObject method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientGetObjectFunc) PushHook(hook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientGetObjectFunc) SetDefaultReturn(r0 *gitdomain.GitObject, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientGetObjectFunc) PushReturn(r0 *gitdomain.GitObject, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

func (f *GitserverClientGetObjectFunc) nextHook() func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientGetObjectFunc) appendCall(r0 GitserverClientGetObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientGetObjectFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientGetObjectFunc) History() []GitserverClientGetObjectFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientGetObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientGetObjectFuncCall is an object that describes an
// invocation of method GetObject on an instance of MockGitserverClient.
type GitserverClientGetObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.GitObject
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientGetObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientGetObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientHasCommitAfterFunc describes the behavior when the
// HasCommitAfter method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientHasCommitAfterFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) (bool, error)
	hooks       []func(context.Context, api.RepoName, string, string) (bool, error)
	history     []GitserverClientHasCommitAfterFuncCall
	mutex       sync.Mutex
}

// HasCommitAfter delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) HasCommitAfter(v0 context.Context, v1 api.RepoName, v2 string, v3 string) (bool, error) {
	r0, r1 := m.HasCommitAfterFunc.nextHook()(v0, v1, v2, v3)
	m.HasCommitAfterFunc.appendCall(GitserverClientHasCommitAfterFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasCommitAfter
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientHasCommitAfterFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasCommitAfter method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientHasCommitAfterFunc) PushHook(hook func(context.Context, api.RepoName, string, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientHasCommitAfterFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientHasCommitAfterFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) (bool, error) {
		return r0, r1
	})
}

func (f *GitserverClientHasCommitAfterFunc) nextHook() func(context.Context, api.RepoName, string, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientHasCommitAfterFunc) appendCall(r0 GitserverClientHasCommitAfterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientHasCommitAfterFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientHasCommitAfterFunc) History() []GitserverClientHasCommitAfterFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientHasCommitAfterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientHasCommitAfterFuncCall is an object that describes an
// invocation of method HasCommitAfter on an instance of
// MockGitserverClient.
type GitserverClientHasCommitAfterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientHasCommitAfterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientHasCommitAfterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientHeadFunc describes the behavior when the Head method of
// the parent MockGitserverClient instance is invoked.
type GitserverClientHeadFunc struct {
	defaultHook func(context.Context, api.RepoName) (string, bool, error)
	hooks       []func(context.Context, api.RepoName) (string, bool, error)
	history     []GitserverClientHeadFuncCall
	mutex       sync.Mutex
}

// Head delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) Head(v0 context.Context, v1 api.RepoName) (string, bool, error) {
	r0, r1, r2 := m.HeadFunc.nextHook()(v0, v1)
	m.HeadFunc.appendCall(GitserverClientHeadFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Head method of the
// parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientHeadFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Head method of the parent MockGitserverClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitserverClientHeadFunc) PushHook(hook func(context.Context, api.RepoName) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientHeadFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientHeadFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, api.RepoName) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *GitserverClientHeadFunc) nextHook() func(context.Context, api.RepoName) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientHeadFunc) appendCall(r0 GitserverClientHeadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientHeadFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientHeadFunc) History() []GitserverClientHeadFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientHeadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientHeadFuncCall is an object that describes an invocation of
// method Head on an instance of MockGitserverClient.
type GitserverClientHeadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientHeadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientHeadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GitserverClientIsPerforcePathCloneableFunc describes the behavior when
// the IsPerforcePathCloneable method of the parent MockGitserverClient
// instance is invoked.
type GitserverClientIsPerforcePathCloneableFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) error
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) error
	history     []GitserverClientIsPerforcePathCloneableFuncCall
	mutex       sync.Mutex
}

// IsPerforcePathCloneable delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverClient) IsPerforcePathCloneable(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) error {
	r0 := m.IsPerforcePathCloneableFunc.nextHook()(v0, v1, v2)
	m.IsPerforcePathCloneableFunc.appendCall(GitserverClientIsPerforcePathCloneableFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IsPerforcePathCloneable method of the parent MockGitserverClient instance
// is invoked and the hook queue is empty.
func (f *GitserverClientIsPerforcePathCloneableFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPerforcePathCloneable method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientIsPerforcePathCloneableFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientIsPerforcePathCloneableFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientIsPerforcePathCloneableFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) error {
		return r0
	})
}

func (f *GitserverClientIsPerforcePathCloneableFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientIsPerforcePathCloneableFunc) appendCall(r0 GitserverClientIsPerforcePathCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverClientIsPerforcePathCloneableFuncCall objects describing the
// invocations of this function.
func (f *GitserverClientIsPerforcePathCloneableFunc) History() []GitserverClientIsPerforcePathCloneableFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientIsPerforcePathCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientIsPerforcePathCloneableFuncCall is an object that
// describes an invocation of method IsPerforcePathCloneable on an instance
// of MockGitserverClient.
type GitserverClientIsPerforcePathCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientIsPerforcePathCloneableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientIsPerforcePathCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientIsPerforceSuperUserFunc describes the behavior when the
// IsPerforceSuperUser method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientIsPerforceSuperUserFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails) error
	hooks       []func(context.Context, protocol.PerforceConnectionDetails) error
	history     []GitserverClientIsPerforceSuperUserFuncCall
	mutex       sync.Mutex
}

// IsPerforceSuperUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) IsPerforceSuperUser(v0 context.Context, v1 protocol.PerforceConnectionDetails) error {
	r0 := m.IsPerforceSuperUserFunc.nextHook()(v0, v1)
	m.IsPerforceSuperUserFunc.appendCall(GitserverClientIsPerforceSuperUserFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsPerforceSuperUser
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientIsPerforceSuperUserFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPerforceSuperUser method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientIsPerforceSuperUserFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientIsPerforceSuperUserFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientIsPerforceSuperUserFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails) error {
		return r0
	})
}

func (f *GitserverClientIsPerforceSuperUserFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientIsPerforceSuperUserFunc) appendCall(r0 GitserverClientIsPerforceSuperUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientIsPerforceSuperUserFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientIsPerforceSuperUserFunc) History() []GitserverClientIsPerforceSuperUserFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientIsPerforceSuperUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientIsPerforceSuperUserFuncCall is an object that describes an
// invocation of method IsPerforceSuperUser on an instance of
// MockGitserverClient.
type GitserverClientIsPerforceSuperUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientIsPerforceSuperUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientIsPerforceSuperUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientIsRepoCloneableFunc describes the behavior when the
// IsRepoCloneable method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientIsRepoCloneableFunc struct {
	defaultHook func(context.Context, api.RepoName) error
	hooks       []func(context.Context, api.RepoName) error
	history     []GitserverClientIsRepoCloneableFuncCall
	mutex       sync.Mutex
}

// IsRepoCloneable delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) IsRepoCloneable(v0 context.Context, v1 api.RepoName) error {
	r0 := m.IsRepoCloneableFunc.nextHook()(v0, v1)
	m.IsRepoCloneableFunc.appendCall(GitserverClientIsRepoCloneableFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsRepoCloneable
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientIsRepoCloneableFunc) SetDefaultHook(hook func(context.Context, api.RepoName) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRepoCloneable method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientIsRepoCloneableFunc) PushHook(hook func(context.Context, api.RepoName) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientIsRepoCloneableFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientIsRepoCloneableFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

func (f *GitserverClientIsRepoCloneableFunc) nextHook() func(context.Context, api.RepoName) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientIsRepoCloneableFunc) appendCall(r0 GitserverClientIsRepoCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientIsRepoCloneableFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientIsRepoCloneableFunc) History() []GitserverClientIsRepoCloneableFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientIsRepoCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientIsRepoCloneableFuncCall is an object that describes an
// invocation of method IsRepoCloneable on an instance of
// MockGitserverClient.
type GitserverClientIsRepoCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientIsRepoCloneableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientIsRepoCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientListBranchesFunc describes the behavior when the
// ListBranches method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientListBranchesFunc struct {
	defaultHook func(context.Context, api.RepoName, gitserver.BranchesOptions) ([]*gitdomain.Branch, error)
	hooks       []func(context.Context, api.RepoName, gitserver.BranchesOptions) ([]*gitdomain.Branch, error)
	history     []GitserverClientListBranchesFuncCall
	mutex       sync.Mutex
}

// ListBranches delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) ListBranches(v0 context.Context, v1 api.RepoName, v2 gitserver.BranchesOptions) ([]*gitdomain.Branch, error) {
	r0, r1 := m.ListBranchesFunc.nextHook()(v0, v1, v2)
	m.ListBranchesFunc.appendCall(GitserverClientListBranchesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListBranches method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientListBranchesFunc) SetDefaultHook(hook func(context.Context, api.RepoName, gitserver.BranchesOptions) ([]*gitdomain.Branch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListBranches method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientListBranchesFunc) PushHook(hook func(context.Context, api.RepoName, gitserver.BranchesOptions) ([]*gitdomain.Branch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientListBranchesFunc) SetDefaultReturn(r0 []*gitdomain.Branch, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, gitserver.BranchesOptions) ([]*gitdomain.Branch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientListBranchesFunc) PushReturn(r0 []*gitdomain.Branch, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, gitserver.BranchesOptions) ([]*gitdomain.Branch, error) {
		return r0, r1
	})
}

func (f *GitserverClientListBranchesFunc) nextHook() func(context.Context, api.RepoName, gitserver.BranchesOptions) ([]*gitdomain.Branch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientListBranchesFunc) appendCall(r0 GitserverClientListBranchesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientListBranchesFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientListBranchesFunc) History() []GitserverClientListBranchesFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientListBranchesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientListBranchesFuncCall is an object that describes an
// invocation of method ListBranches on an instance of MockGitserverClient.
type GitserverClientListBranchesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gitserver.BranchesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Branch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientListBranchesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientListBranchesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientListDirectoryChildrenFunc describes the behavior when the
// ListDirectoryChildren method of the parent MockGitserverClient instance
// is invoked.
type GitserverClientListDirectoryChildrenFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error)
	history     []GitserverClientListDirectoryChildrenFuncCall
	mutex       sync.Mutex
}

// ListDirectoryChildren delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverClient) ListDirectoryChildren(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 []string) (map[string][]string, error) {
	r0, r1 := m.ListDirectoryChildrenFunc.nextHook()(v0, v1, v2, v3)
	m.ListDirectoryChildrenFunc.appendCall(GitserverClientListDirectoryChildrenFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListDirectoryChildren method of the parent MockGitserverClient instance
// is invoked and the hook queue is empty.
func (f *GitserverClientListDirectoryChildrenFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDirectoryChildren method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientListDirectoryChildrenFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientListDirectoryChildrenFunc) SetDefaultReturn(r0 map[string][]string, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientListDirectoryChildrenFunc) PushReturn(r0 map[string][]string, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
		return r0, r1
	})
}

func (f *GitserverClientListDirectoryChildrenFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientListDirectoryChildrenFunc) appendCall(r0 GitserverClientListDirectoryChildrenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverClientListDirectoryChildrenFuncCall objects describing the
// invocations of this function.
func (f *GitserverClientListDirectoryChildrenFunc) History() []GitserverClientListDirectoryChildrenFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientListDirectoryChildrenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientListDirectoryChildrenFuncCall is an object that describes
// an invocation of method ListDirectoryChildren on an instance of
// MockGitserverClient.
type GitserverClientListDirectoryChildrenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientListDirectoryChildrenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientListDirectoryChildrenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientListRefsFunc describes the behavior when the ListRefs
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientListRefsFunc struct {
	defaultHook func(context.Context, api.RepoName) ([]gitdomain.Ref, error)
	hooks       []func(context.Context, api.RepoName) ([]gitdomain.Ref, error)
	history     []GitserverClientListRefsFuncCall
	mutex       sync.Mutex
}

// ListRefs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) ListRefs(v0 context.Context, v1 api.RepoName) ([]gitdomain.Ref, error) {
	r0, r1 := m.ListRefsFunc.nextHook()(v0, v1)
	m.ListRefsFunc.appendCall(GitserverClientListRefsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListRefs method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientListRefsFunc) SetDefaultHook(hook func(context.Context, api.RepoName) ([]gitdomain.Ref, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRefs method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientListRefsFunc) PushHook(hook func(context.Context, api.RepoName) ([]gitdomain.Ref, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientListRefsFunc) SetDefaultReturn(r0 []gitdomain.Ref, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) ([]gitdomain.Ref, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientListRefsFunc) PushReturn(r0 []gitdomain.Ref, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) ([]gitdomain.Ref, error) {
		return r0, r1
	})
}

func (f *GitserverClientListRefsFunc) nextHook() func(context.Context, api.RepoName) ([]gitdomain.Ref, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientListRefsFunc) appendCall(r0 GitserverClientListRefsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientListRefsFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientListRefsFunc) History() []GitserverClientListRefsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientListRefsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientListRefsFuncCall is an object that describes an invocation
// of method ListRefs on an instance of MockGitserverClient.
type GitserverClientListRefsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []gitdomain.Ref
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientListRefsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientListRefsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientListTagsFunc describes the behavior when the ListTags
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientListTagsFunc struct {
	defaultHook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	hooks       []func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	history     []GitserverClientListTagsFuncCall
	mutex       sync.Mutex
}

// ListTags delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) ListTags(v0 context.Context, v1 api.RepoName, v2 ...string) ([]*gitdomain.Tag, error) {
	r0, r1 := m.ListTagsFunc.nextHook()(v0, v1, v2...)
	m.ListTagsFunc.appendCall(GitserverClientListTagsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListTags method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientListTagsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListTags method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientListTagsFunc) PushHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientListTagsFunc) SetDefaultReturn(r0 []*gitdomain.Tag, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientListTagsFunc) PushReturn(r0 []*gitdomain.Tag, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

func (f *GitserverClientListTagsFunc) nextHook() func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientListTagsFunc) appendCall(r0 GitserverClientListTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientListTagsFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientListTagsFunc) History() []GitserverClientListTagsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientListTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientListTagsFuncCall is an object that describes an invocation
// of method ListTags on an instance of MockGitserverClient.
type GitserverClientListTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Tag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverClientListTagsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientListTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientLogReverseEachFunc describes the behavior when the
// LogReverseEach method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientLogReverseEachFunc struct {
	defaultHook func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error
	hooks       []func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error
	history     []GitserverClientLogReverseEachFuncCall
	mutex       sync.Mutex
}

// LogReverseEach delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) LogReverseEach(v0 context.Context, v1 string, v2 string, v3 int, v4 func(entry gitdomain.LogEntry) error) error {
	r0 := m.LogReverseEachFunc.nextHook()(v0, v1, v2, v3, v4)
	m.LogReverseEachFunc.appendCall(GitserverClientLogReverseEachFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LogReverseEach
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientLogReverseEachFunc) SetDefaultHook(hook func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogReverseEach method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientLogReverseEachFunc) PushHook(hook func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientLogReverseEachFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientLogReverseEachFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
		return r0
	})
}

func (f *GitserverClientLogReverseEachFunc) nextHook() func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientLogReverseEachFunc) appendCall(r0 GitserverClientLogReverseEachFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientLogReverseEachFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientLogReverseEachFunc) History() []GitserverClientLogReverseEachFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientLogReverseEachFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientLogReverseEachFuncCall is an object that describes an
// invocation of method LogReverseEach on an instance of
// MockGitserverClient.
type GitserverClientLogReverseEachFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 func(entry gitdomain.LogEntry) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientLogReverseEachFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientLogReverseEachFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientLsFilesFunc describes the behavior when the LsFiles method
// of the parent MockGitserverClient instance is invoked.
type GitserverClientLsFilesFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)
	history     []GitserverClientLsFilesFuncCall
	mutex       sync.Mutex
}

// LsFiles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) LsFiles(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 ...gitdomain.Pathspec) ([]string, error) {
	r0, r1 := m.LsFilesFunc.nextHook()(v0, v1, v2, v3...)
	m.LsFilesFunc.appendCall(GitserverClientLsFilesFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LsFiles method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientLsFilesFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LsFiles method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientLsFilesFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientLsFilesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientLsFilesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
		return r0, r1
	})
}

func (f *GitserverClientLsFilesFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientLsFilesFunc) appendCall(r0 GitserverClientLsFilesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientLsFilesFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientLsFilesFunc) History() []GitserverClientLsFilesFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientLsFilesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientLsFilesFuncCall is an object that describes an invocation
// of method LsFiles on an instance of MockGitserverClient.
type GitserverClientLsFilesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg3 []gitdomain.Pathspec
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverClientLsFilesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg3 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1, c.Arg2}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientLsFilesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientMergeBaseFunc describes the behavior when the MergeBase
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientMergeBaseFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error)
	history     []GitserverClientMergeBaseFuncCall
	mutex       sync.Mutex
}

// MergeBase delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) MergeBase(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 api.CommitID) (api.CommitID, error) {
	r0, r1 := m.MergeBaseFunc.nextHook()(v0, v1, v2, v3)
	m.MergeBaseFunc.appendCall(GitserverClientMergeBaseFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MergeBase method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientMergeBaseFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeBase method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientMergeBaseFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientMergeBaseFunc) SetDefaultReturn(r0 api.CommitID, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientMergeBaseFunc) PushReturn(r0 api.CommitID, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error) {
		return r0, r1
	})
}

func (f *GitserverClientMergeBaseFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientMergeBaseFunc) appendCall(r0 GitserverClientMergeBaseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientMergeBaseFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientMergeBaseFunc) History() []GitserverClientMergeBaseFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientMergeBaseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientMergeBaseFuncCall is an object that describes an
// invocation of method MergeBase on an instance of MockGitserverClient.
type GitserverClientMergeBaseFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientMergeBaseFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientMergeBaseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientNewFileReaderFunc describes the behavior when the
// NewFileReader method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientNewFileReaderFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error)
	history     []GitserverClientNewFileReaderFuncCall
	mutex       sync.Mutex
}

// NewFileReader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) NewFileReader(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 string) (io.ReadCloser, error) {
	r0, r1 := m.NewFileReaderFunc.nextHook()(v0, v1, v2, v3)
	m.NewFileReaderFunc.appendCall(GitserverClientNewFileReaderFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NewFileReader method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientNewFileReaderFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewFileReader method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientNewFileReaderFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientNewFileReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientNewFileReaderFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *GitserverClientNewFileReaderFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientNewFileReaderFunc) appendCall(r0 GitserverClientNewFileReaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientNewFileReaderFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientNewFileReaderFunc) History() []GitserverClientNewFileReaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientNewFileReaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientNewFileReaderFuncCall is an object that describes an
// invocation of method NewFileReader on an instance of MockGitserverClient.
type GitserverClientNewFileReaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientNewFileReaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientNewFileReaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientPerforceGetChangelistFunc describes the behavior when the
// PerforceGetChangelist method of the parent MockGitserverClient instance
// is invoked.
type GitserverClientPerforceGetChangelistFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error)
	history     []GitserverClientPerforceGetChangelistFuncCall
	mutex       sync.Mutex
}

// PerforceGetChangelist delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverClient) PerforceGetChangelist(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) (*perforce.Changelist, error) {
	r0, r1 := m.PerforceGetChangelistFunc.nextHook()(v0, v1, v2)
	m.PerforceGetChangelistFunc.appendCall(GitserverClientPerforceGetChangelistFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceGetChangelist method of the parent MockGitserverClient instance
// is invoked and the hook queue is empty.
func (f *GitserverClientPerforceGetChangelistFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceGetChangelist method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientPerforceGetChangelistFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientPerforceGetChangelistFunc) SetDefaultReturn(r0 *perforce.Changelist, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientPerforceGetChangelistFunc) PushReturn(r0 *perforce.Changelist, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error) {
		return r0, r1
	})
}

func (f *GitserverClientPerforceGetChangelistFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientPerforceGetChangelistFunc) appendCall(r0 GitserverClientPerforceGetChangelistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverClientPerforceGetChangelistFuncCall objects describing the
// invocations of this function.
func (f *GitserverClientPerforceGetChangelistFunc) History() []GitserverClientPerforceGetChangelistFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientPerforceGetChangelistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientPerforceGetChangelistFuncCall is an object that describes
// an invocation of method PerforceGetChangelist on an instance of
// MockGitserverClient.
type GitserverClientPerforceGetChangelistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *perforce.Changelist
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientPerforceGetChangelistFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientPerforceGetChangelistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientPerforceGroupMembersFunc describes the behavior when the
// PerforceGroupMembers method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientPerforceGroupMembersFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error)
	history     []GitserverClientPerforceGroupMembersFuncCall
	mutex       sync.Mutex
}

// PerforceGroupMembers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) PerforceGroupMembers(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) ([]string, error) {
	r0, r1 := m.PerforceGroupMembersFunc.nextHook()(v0, v1, v2)
	m.PerforceGroupMembersFunc.appendCall(GitserverClientPerforceGroupMembersFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PerforceGroupMembers
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientPerforceGroupMembersFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceGroupMembers method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientPerforceGroupMembersFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientPerforceGroupMembersFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientPerforceGroupMembersFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error) {
		return r0, r1
	})
}

func (f *GitserverClientPerforceGroupMembersFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientPerforceGroupMembersFunc) appendCall(r0 GitserverClientPerforceGroupMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientPerforceGroupMembersFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientPerforceGroupMembersFunc) History() []GitserverClientPerforceGroupMembersFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientPerforceGroupMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientPerforceGroupMembersFuncCall is an object that describes
// an invocation of method PerforceGroupMembers on an instance of
// MockGitserverClient.
type GitserverClientPerforceGroupMembersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientPerforceGroupMembersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientPerforceGroupMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientPerforceProtectsForDepotFunc describes the behavior when
// the PerforceProtectsForDepot method of the parent MockGitserverClient
// instance is invoked.
type GitserverClientPerforceProtectsForDepotFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)
	history     []GitserverClientPerforceProtectsForDepotFuncCall
	mutex       sync.Mutex
}

// PerforceProtectsForDepot delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverClient) PerforceProtectsForDepot(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) ([]*perforce.Protect, error) {
	r0, r1 := m.PerforceProtectsForDepotFunc.nextHook()(v0, v1, v2)
	m.PerforceProtectsForDepotFunc.appendCall(GitserverClientPerforceProtectsForDepotFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceProtectsForDepot method of the parent MockGitserverClient
// instance is invoked and the hook queue is empty.
func (f *GitserverClientPerforceProtectsForDepotFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceProtectsForDepot method of the parent MockGitserverClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverClientPerforceProtectsForDepotFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientPerforceProtectsForDepotFunc) SetDefaultReturn(r0 []*perforce.Protect, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientPerforceProtectsForDepotFunc) PushReturn(r0 []*perforce.Protect, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
		return r0, r1
	})
}

func (f *GitserverClientPerforceProtectsForDepotFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientPerforceProtectsForDepotFunc) appendCall(r0 GitserverClientPerforceProtectsForDepotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverClientPerforceProtectsForDepotFuncCall objects describing the
// invocations of this function.
func (f *GitserverClientPerforceProtectsForDepotFunc) History() []GitserverClientPerforceProtectsForDepotFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientPerforceProtectsForDepotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientPerforceProtectsForDepotFuncCall is an object that
// describes an invocation of method PerforceProtectsForDepot on an instance
// of MockGitserverClient.
type GitserverClientPerforceProtectsForDepotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*perforce.Protect
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientPerforceProtectsForDepotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientPerforceProtectsForDepotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientPerforceProtectsForUserFunc describes the behavior when
// the PerforceProtectsForUser method of the parent MockGitserverClient
// instance is invoked.
type GitserverClientPerforceProtectsForUserFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)
	history     []GitserverClientPerforceProtectsForUserFuncCall
	mutex       sync.Mutex
}

// PerforceProtectsForUser delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverClient) PerforceProtectsForUser(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) ([]*perforce.Protect, error) {
	r0, r1 := m.PerforceProtectsForUserFunc.nextHook()(v0, v1, v2)
	m.PerforceProtectsForUserFunc.appendCall(GitserverClientPerforceProtectsForUserFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceProtectsForUser method of the parent MockGitserverClient instance
// is invoked and the hook queue is empty.
func (f *GitserverClientPerforceProtectsForUserFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceProtectsForUser method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientPerforceProtectsForUserFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientPerforceProtectsForUserFunc) SetDefaultReturn(r0 []*perforce.Protect, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientPerforceProtectsForUserFunc) PushReturn(r0 []*perforce.Protect, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
		return r0, r1
	})
}

func (f *GitserverClientPerforceProtectsForUserFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientPerforceProtectsForUserFunc) appendCall(r0 GitserverClientPerforceProtectsForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverClientPerforceProtectsForUserFuncCall objects describing the
// invocations of this function.
func (f *GitserverClientPerforceProtectsForUserFunc) History() []GitserverClientPerforceProtectsForUserFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientPerforceProtectsForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientPerforceProtectsForUserFuncCall is an object that
// describes an invocation of method PerforceProtectsForUser on an instance
// of MockGitserverClient.
type GitserverClientPerforceProtectsForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*perforce.Protect
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientPerforceProtectsForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientPerforceProtectsForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientPerforceUsersFunc describes the behavior when the
// PerforceUsers method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientPerforceUsersFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error)
	history     []GitserverClientPerforceUsersFuncCall
	mutex       sync.Mutex
}

// PerforceUsers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) PerforceUsers(v0 context.Context, v1 protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
	r0, r1 := m.PerforceUsersFunc.nextHook()(v0, v1)
	m.PerforceUsersFunc.appendCall(GitserverClientPerforceUsersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PerforceUsers method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientPerforceUsersFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceUsers method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientPerforceUsersFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientPerforceUsersFunc) SetDefaultReturn(r0 []*perforce.User, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientPerforceUsersFunc) PushReturn(r0 []*perforce.User, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
		return r0, r1
	})
}

func (f *GitserverClientPerforceUsersFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientPerforceUsersFunc) appendCall(r0 GitserverClientPerforceUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientPerforceUsersFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientPerforceUsersFunc) History() []GitserverClientPerforceUsersFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientPerforceUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientPerforceUsersFuncCall is an object that describes an
// invocation of method PerforceUsers on an instance of MockGitserverClient.
type GitserverClientPerforceUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*perforce.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientPerforceUsersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientPerforceUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientReadDirFunc describes the behavior when the ReadDir method
// of the parent MockGitserverClient instance is invoked.
type GitserverClientReadDirFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)
	history     []GitserverClientReadDirFuncCall
	mutex       sync.Mutex
}

// ReadDir delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) ReadDir(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 string, v4 bool) ([]fs.FileInfo, error) {
	r0, r1 := m.ReadDirFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ReadDirFunc.appendCall(GitserverClientReadDirFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReadDir method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientReadDirFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadDir method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientReadDirFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientReadDirFunc) SetDefaultReturn(r0 []fs.FileInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientReadDirFunc) PushReturn(r0 []fs.FileInfo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
		return r0, r1
	})
}

func (f *GitserverClientReadDirFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientReadDirFunc) appendCall(r0 GitserverClientReadDirFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientReadDirFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientReadDirFunc) History() []GitserverClientReadDirFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientReadDirFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientReadDirFuncCall is an object that describes an invocation
// of method ReadDir on an instance of MockGitserverClient.
type GitserverClientReadDirFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []fs.FileInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientReadDirFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientReadDirFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientReadFileFunc describes the behavior when the ReadFile
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientReadFileFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, string) ([]byte, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, string) ([]byte, error)
	history     []GitserverClientReadFileFuncCall
	mutex       sync.Mutex
}

// ReadFile delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) ReadFile(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 string) ([]byte, error) {
	r0, r1 := m.ReadFileFunc.nextHook()(v0, v1, v2, v3)
	m.ReadFileFunc.appendCall(GitserverClientReadFileFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReadFile method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientReadFileFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, string) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadFile method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientReadFileFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, string) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientReadFileFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, string) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientReadFileFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, string) ([]byte, error) {
		return r0, r1
	})
}

func (f *GitserverClientReadFileFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, string) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientReadFileFunc) appendCall(r0 GitserverClientReadFileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientReadFileFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientReadFileFunc) History() []GitserverClientReadFileFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientReadFileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientReadFileFuncCall is an object that describes an invocation
// of method ReadFile on an instance of MockGitserverClient.
type GitserverClientReadFileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientReadFileFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientReadFileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientRefDescriptionsFunc describes the behavior when the
// RefDescriptions method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientRefDescriptionsFunc struct {
	defaultHook func(context.Context, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error)
	hooks       []func(context.Context, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error)
	history     []GitserverClientRefDescriptionsFuncCall
	mutex       sync.Mutex
}

// RefDescriptions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) RefDescriptions(v0 context.Context, v1 api.RepoName, v2 ...string) (map[string][]gitdomain.RefDescription, error) {
	r0, r1 := m.RefDescriptionsFunc.nextHook()(v0, v1, v2...)
	m.RefDescriptionsFunc.appendCall(GitserverClientRefDescriptionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RefDescriptions
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientRefDescriptionsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RefDescriptions method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientRefDescriptionsFunc) PushHook(hook func(context.Context, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientRefDescriptionsFunc) SetDefaultReturn(r0 map[string][]gitdomain.RefDescription, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientRefDescriptionsFunc) PushReturn(r0 map[string][]gitdomain.RefDescription, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error) {
		return r0, r1
	})
}

func (f *GitserverClientRefDescriptionsFunc) nextHook() func(context.Context, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientRefDescriptionsFunc) appendCall(r0 GitserverClientRefDescriptionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientRefDescriptionsFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientRefDescriptionsFunc) History() []GitserverClientRefDescriptionsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientRefDescriptionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientRefDescriptionsFuncCall is an object that describes an
// invocation of method RefDescriptions on an instance of
// MockGitserverClient.
type GitserverClientRefDescriptionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][]gitdomain.RefDescription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverClientRefDescriptionsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientRefDescriptionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientRemoveFunc describes the behavior when the Remove method
// of the parent MockGitserverClient instance is invoked.
type GitserverClientRemoveFunc struct {
	defaultHook func(context.Context, api.RepoName) error
	hooks       []func(context.Context, api.RepoName) error
	history     []GitserverClientRemoveFuncCall
	mutex       sync.Mutex
}

// Remove delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) Remove(v0 context.Context, v1 api.RepoName) error {
	r0 := m.RemoveFunc.nextHook()(v0, v1)
	m.RemoveFunc.appendCall(GitserverClientRemoveFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Remove method of the
// parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientRemoveFunc) SetDefaultHook(hook func(context.Context, api.RepoName) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Remove method of the parent MockGitserverClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitserverClientRemoveFunc) PushHook(hook func(context.Context, api.RepoName) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientRemoveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientRemoveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

func (f *GitserverClientRemoveFunc) nextHook() func(context.Context, api.RepoName) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientRemoveFunc) appendCall(r0 GitserverClientRemoveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientRemoveFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientRemoveFunc) History() []GitserverClientRemoveFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientRemoveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientRemoveFuncCall is an object that describes an invocation
// of method Remove on an instance of MockGitserverClient.
type GitserverClientRemoveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientRemoveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientRemoveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientRepoCloneProgressFunc describes the behavior when the
// RepoCloneProgress method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientRepoCloneProgressFunc struct {
	defaultHook func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)
	hooks       []func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)
	history     []GitserverClientRepoCloneProgressFuncCall
	mutex       sync.Mutex
}

// RepoCloneProgress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) RepoCloneProgress(v0 context.Context, v1 ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
	r0, r1 := m.RepoCloneProgressFunc.nextHook()(v0, v1...)
	m.RepoCloneProgressFunc.appendCall(GitserverClientRepoCloneProgressFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCloneProgress
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientRepoCloneProgressFunc) SetDefaultHook(hook func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCloneProgress method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientRepoCloneProgressFunc) PushHook(hook func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientRepoCloneProgressFunc) SetDefaultReturn(r0 *protocol.RepoCloneProgressResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientRepoCloneProgressFunc) PushReturn(r0 *protocol.RepoCloneProgressResponse, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

func (f *GitserverClientRepoCloneProgressFunc) nextHook() func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientRepoCloneProgressFunc) appendCall(r0 GitserverClientRepoCloneProgressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientRepoCloneProgressFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientRepoCloneProgressFunc) History() []GitserverClientRepoCloneProgressFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientRepoCloneProgressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientRepoCloneProgressFuncCall is an object that describes an
// invocation of method RepoCloneProgress on an instance of
// MockGitserverClient.
type GitserverClientRepoCloneProgressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoCloneProgressResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverClientRepoCloneProgressFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientRepoCloneProgressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientRequestRepoCloneFunc describes the behavior when the
// RequestRepoClone method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientRequestRepoCloneFunc struct {
	defaultHook func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error)
	hooks       []func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error)
	history     []GitserverClientRequestRepoCloneFuncCall
	mutex       sync.Mutex
}

// RequestRepoClone delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) RequestRepoClone(v0 context.Context, v1 api.RepoName) (*protocol.RepoCloneResponse, error) {
	r0, r1 := m.RequestRepoCloneFunc.nextHook()(v0, v1)
	m.RequestRepoCloneFunc.appendCall(GitserverClientRequestRepoCloneFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RequestRepoClone
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientRequestRepoCloneFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestRepoClone method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientRequestRepoCloneFunc) PushHook(hook func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientRequestRepoCloneFunc) SetDefaultReturn(r0 *protocol.RepoCloneResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientRequestRepoCloneFunc) PushReturn(r0 *protocol.RepoCloneResponse, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error) {
		return r0, r1
	})
}

func (f *GitserverClientRequestRepoCloneFunc) nextHook() func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientRequestRepoCloneFunc) appendCall(r0 GitserverClientRequestRepoCloneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientRequestRepoCloneFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientRequestRepoCloneFunc) History() []GitserverClientRequestRepoCloneFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientRequestRepoCloneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientRequestRepoCloneFuncCall is an object that describes an
// invocation of method RequestRepoClone on an instance of
// MockGitserverClient.
type GitserverClientRequestRepoCloneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoCloneResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientRequestRepoCloneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientRequestRepoCloneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientRequestRepoUpdateFunc describes the behavior when the
// RequestRepoUpdate method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientRequestRepoUpdateFunc struct {
	defaultHook func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)
	hooks       []func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)
	history     []GitserverClientRequestRepoUpdateFuncCall
	mutex       sync.Mutex
}

// RequestRepoUpdate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) RequestRepoUpdate(v0 context.Context, v1 api.RepoName, v2 time.Duration) (*protocol.RepoUpdateResponse, error) {
	r0, r1 := m.RequestRepoUpdateFunc.nextHook()(v0, v1, v2)
	m.RequestRepoUpdateFunc.appendCall(GitserverClientRequestRepoUpdateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RequestRepoUpdate
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientRequestRepoUpdateFunc) SetDefaultHook(hook func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestRepoUpdate method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientRequestRepoUpdateFunc) PushHook(hook func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientRequestRepoUpdateFunc) SetDefaultReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientRequestRepoUpdateFunc) PushReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

func (f *GitserverClientRequestRepoUpdateFunc) nextHook() func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientRequestRepoUpdateFunc) appendCall(r0 GitserverClientRequestRepoUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientRequestRepoUpdateFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientRequestRepoUpdateFunc) History() []GitserverClientRequestRepoUpdateFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientRequestRepoUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientRequestRepoUpdateFuncCall is an object that describes an
// invocation of method RequestRepoUpdate on an instance of
// MockGitserverClient.
type GitserverClientRequestRepoUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoUpdateResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientRequestRepoUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientRequestRepoUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientResolveRevisionFunc describes the behavior when the
// ResolveRevision method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientResolveRevisionFunc struct {
	defaultHook func(context.Context, api.RepoName, string, gitserver.ResolveRevisionOptions) (api.CommitID, error)
	hooks       []func(context.Context, api.RepoName, string, gitserver.ResolveRevisionOptions) (api.CommitID, error)
	history     []GitserverClientResolveRevisionFuncCall
	mutex       sync.Mutex
}

// ResolveRevision delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) ResolveRevision(v0 context.Context, v1 api.RepoName, v2 string, v3 gitserver.ResolveRevisionOptions) (api.CommitID, error) {
	r0, r1 := m.ResolveRevisionFunc.nextHook()(v0, v1, v2, v3)
	m.ResolveRevisionFunc.appendCall(GitserverClientResolveRevisionFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResolveRevision
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, gitserver.ResolveRevisionOptions) (api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResolveRevision method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientResolveRevisionFunc) PushHook(hook func(context.Context, api.RepoName, string, gitserver.ResolveRevisionOptions) (api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientResolveRevisionFunc) SetDefaultReturn(r0 api.CommitID, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, gitserver.ResolveRevisionOptions) (api.CommitID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientResolveRevisionFunc) PushReturn(r0 api.CommitID, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, gitserver.ResolveRevisionOptions) (api.CommitID, error) {
		return r0, r1
	})
}

func (f *GitserverClientResolveRevisionFunc) nextHook() func(context.Context, api.RepoName, string, gitserver.ResolveRevisionOptions) (api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientResolveRevisionFunc) appendCall(r0 GitserverClientResolveRevisionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientResolveRevisionFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientResolveRevisionFunc) History() []GitserverClientResolveRevisionFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientResolveRevisionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientResolveRevisionFuncCall is an object that describes an
// invocation of method ResolveRevision on an instance of
// MockGitserverClient.
type GitserverClientResolveRevisionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 gitserver.ResolveRevisionOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientResolveRevisionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientResolveRevisionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientResolveRevisionsFunc describes the behavior when the
// ResolveRevisions method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientResolveRevisionsFunc struct {
	defaultHook func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error)
	hooks       []func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error)
	history     []GitserverClientResolveRevisionsFuncCall
	mutex       sync.Mutex
}

// ResolveRevisions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) ResolveRevisions(v0 context.Context, v1 api.RepoName, v2 []protocol.RevisionSpecifier) ([]string, error) {
	r0, r1 := m.ResolveRevisionsFunc.nextHook()(v0, v1, v2)
	m.ResolveRevisionsFunc.appendCall(GitserverClientResolveRevisionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResolveRevisions
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientResolveRevisionsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResolveRevisions method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientResolveRevisionsFunc) PushHook(hook func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientResolveRevisionsFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientResolveRevisionsFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error) {
		return r0, r1
	})
}

func (f *GitserverClientResolveRevisionsFunc) nextHook() func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientResolveRevisionsFunc) appendCall(r0 GitserverClientResolveRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientResolveRevisionsFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientResolveRevisionsFunc) History() []GitserverClientResolveRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientResolveRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientResolveRevisionsFuncCall is an object that describes an
// invocation of method ResolveRevisions on an instance of
// MockGitserverClient.
type GitserverClientResolveRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []protocol.RevisionSpecifier
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientResolveRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientResolveRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientRevListFunc describes the behavior when the RevList method
// of the parent MockGitserverClient instance is invoked.
type GitserverClientRevListFunc struct {
	defaultHook func(context.Context, string, string, func(commit string) (bool, error)) error
	hooks       []func(context.Context, string, string, func(commit string) (bool, error)) error
	history     []GitserverClientRevListFuncCall
	mutex       sync.Mutex
}

// RevList delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) RevList(v0 context.Context, v1 string, v2 string, v3 func(commit string) (bool, error)) error {
	r0 := m.RevListFunc.nextHook()(v0, v1, v2, v3)
	m.RevListFunc.appendCall(GitserverClientRevListFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RevList method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientRevListFunc) SetDefaultHook(hook func(context.Context, string, string, func(commit string) (bool, error)) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RevList method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientRevListFunc) PushHook(hook func(context.Context, string, string, func(commit string) (bool, error)) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientRevListFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, string, func(commit string) (bool, error)) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientRevListFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, string, func(commit string) (bool, error)) error {
		return r0
	})
}

func (f *GitserverClientRevListFunc) nextHook() func(context.Context, string, string, func(commit string) (bool, error)) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientRevListFunc) appendCall(r0 GitserverClientRevListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientRevListFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientRevListFunc) History() []GitserverClientRevListFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientRevListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientRevListFuncCall is an object that describes an invocation
// of method RevList on an instance of MockGitserverClient.
type GitserverClientRevListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 func(commit string) (bool, error)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientRevListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientRevListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverClientSearchFunc describes the behavior when the Search method
// of the parent MockGitserverClient instance is invoked.
type GitserverClientSearchFunc struct {
	defaultHook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)
	hooks       []func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)
	history     []GitserverClientSearchFuncCall
	mutex       sync.Mutex
}

// Search delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) Search(v0 context.Context, v1 *protocol.SearchRequest, v2 func([]protocol.CommitMatch)) (bool, error) {
	r0, r1 := m.SearchFunc.nextHook()(v0, v1, v2)
	m.SearchFunc.appendCall(GitserverClientSearchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Search method of the
// parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientSearchFunc) SetDefaultHook(hook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Search method of the parent MockGitserverClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitserverClientSearchFunc) PushHook(hook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientSearchFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientSearchFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
		return r0, r1
	})
}

func (f *GitserverClientSearchFunc) nextHook() func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientSearchFunc) appendCall(r0 GitserverClientSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientSearchFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientSearchFunc) History() []GitserverClientSearchFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientSearchFuncCall is an object that describes an invocation
// of method Search on an instance of MockGitserverClient.
type GitserverClientSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *protocol.SearchRequest
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func([]protocol.CommitMatch)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientStatFunc describes the behavior when the Stat method of
// the parent MockGitserverClient instance is invoked.
type GitserverClientStatFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error)
	history     []GitserverClientStatFuncCall
	mutex       sync.Mutex
}

// Stat delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) Stat(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 string) (fs.FileInfo, error) {
	r0, r1 := m.StatFunc.nextHook()(v0, v1, v2, v3)
	m.StatFunc.appendCall(GitserverClientStatFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Stat method of the
// parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientStatFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Stat method of the parent MockGitserverClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitserverClientStatFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientStatFunc) SetDefaultReturn(r0 fs.FileInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientStatFunc) PushReturn(r0 fs.FileInfo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
		return r0, r1
	})
}

func (f *GitserverClientStatFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientStatFunc) appendCall(r0 GitserverClientStatFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientStatFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientStatFunc) History() []GitserverClientStatFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientStatFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientStatFuncCall is an object that describes an invocation of
// method Stat on an instance of MockGitserverClient.
type GitserverClientStatFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 fs.FileInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientStatFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientStatFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientStreamBlameFileFunc describes the behavior when the
// StreamBlameFile method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientStreamBlameFileFunc struct {
	defaultHook func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (gitserver.HunkReader, error)
	hooks       []func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (gitserver.HunkReader, error)
	history     []GitserverClientStreamBlameFileFuncCall
	mutex       sync.Mutex
}

// StreamBlameFile delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) StreamBlameFile(v0 context.Context, v1 api.RepoName, v2 string, v3 *gitserver.BlameOptions) (gitserver.HunkReader, error) {
	r0, r1 := m.StreamBlameFileFunc.nextHook()(v0, v1, v2, v3)
	m.StreamBlameFileFunc.appendCall(GitserverClientStreamBlameFileFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StreamBlameFile
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientStreamBlameFileFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (gitserver.HunkReader, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StreamBlameFile method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientStreamBlameFileFunc) PushHook(hook func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (gitserver.HunkReader, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientStreamBlameFileFunc) SetDefaultReturn(r0 gitserver.HunkReader, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (gitserver.HunkReader, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientStreamBlameFileFunc) PushReturn(r0 gitserver.HunkReader, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (gitserver.HunkReader, error) {
		return r0, r1
	})
}

func (f *GitserverClientStreamBlameFileFunc) nextHook() func(context.Context, api.RepoName, string, *gitserver.BlameOptions) (gitserver.HunkReader, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientStreamBlameFileFunc) appendCall(r0 GitserverClientStreamBlameFileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientStreamBlameFileFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientStreamBlameFileFunc) History() []GitserverClientStreamBlameFileFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientStreamBlameFileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientStreamBlameFileFuncCall is an object that describes an
// invocation of method StreamBlameFile on an instance of
// MockGitserverClient.
type GitserverClientStreamBlameFileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *gitserver.BlameOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gitserver.HunkReader
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientStreamBlameFileFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientStreamBlameFileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientSystemInfoFunc describes the behavior when the SystemInfo
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientSystemInfoFunc struct {
	defaultHook func(context.Context, string) (protocol.SystemInfo, error)
	hooks       []func(context.Context, string) (protocol.SystemInfo, error)
	history     []GitserverClientSystemInfoFuncCall
	mutex       sync.Mutex
}

// SystemInfo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) SystemInfo(v0 context.Context, v1 string) (protocol.SystemInfo, error) {
	r0, r1 := m.SystemInfoFunc.nextHook()(v0, v1)
	m.SystemInfoFunc.appendCall(GitserverClientSystemInfoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SystemInfo method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientSystemInfoFunc) SetDefaultHook(hook func(context.Context, string) (protocol.SystemInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SystemInfo method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientSystemInfoFunc) PushHook(hook func(context.Context, string) (protocol.SystemInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientSystemInfoFunc) SetDefaultReturn(r0 protocol.SystemInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (protocol.SystemInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientSystemInfoFunc) PushReturn(r0 protocol.SystemInfo, r1 error) {
	f.PushHook(func(context.Context, string) (protocol.SystemInfo, error) {
		return r0, r1
	})
}

func (f *GitserverClientSystemInfoFunc) nextHook() func(context.Context, string) (protocol.SystemInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientSystemInfoFunc) appendCall(r0 GitserverClientSystemInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientSystemInfoFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientSystemInfoFunc) History() []GitserverClientSystemInfoFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientSystemInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientSystemInfoFuncCall is an object that describes an
// invocation of method SystemInfo on an instance of MockGitserverClient.
type GitserverClientSystemInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 protocol.SystemInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientSystemInfoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientSystemInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientSystemsInfoFunc describes the behavior when the
// SystemsInfo method of the parent MockGitserverClient instance is invoked.
type GitserverClientSystemsInfoFunc struct {
	defaultHook func(context.Context) ([]protocol.SystemInfo, error)
	hooks       []func(context.Context) ([]protocol.SystemInfo, error)
	history     []GitserverClientSystemsInfoFuncCall
	mutex       sync.Mutex
}

// SystemsInfo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) SystemsInfo(v0 context.Context) ([]protocol.SystemInfo, error) {
	r0, r1 := m.SystemsInfoFunc.nextHook()(v0)
	m.SystemsInfoFunc.appendCall(GitserverClientSystemsInfoFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SystemsInfo method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientSystemsInfoFunc) SetDefaultHook(hook func(context.Context) ([]protocol.SystemInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SystemsInfo method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientSystemsInfoFunc) PushHook(hook func(context.Context) ([]protocol.SystemInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientSystemsInfoFunc) SetDefaultReturn(r0 []protocol.SystemInfo, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]protocol.SystemInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientSystemsInfoFunc) PushReturn(r0 []protocol.SystemInfo, r1 error) {
	f.PushHook(func(context.Context) ([]protocol.SystemInfo, error) {
		return r0, r1
	})
}

func (f *GitserverClientSystemsInfoFunc) nextHook() func(context.Context) ([]protocol.SystemInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientSystemsInfoFunc) appendCall(r0 GitserverClientSystemsInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientSystemsInfoFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientSystemsInfoFunc) History() []GitserverClientSystemsInfoFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientSystemsInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientSystemsInfoFuncCall is an object that describes an
// invocation of method SystemsInfo on an instance of MockGitserverClient.
type GitserverClientSystemsInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []protocol.SystemInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientSystemsInfoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientSystemsInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
