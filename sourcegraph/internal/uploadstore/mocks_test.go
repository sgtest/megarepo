// Code generated by go-mockgen 1.3.3; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package uploadstore

import (
	"context"
	"io"
	"sync"

	storage "cloud.google.com/go/storage"
	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
)

// MockGcsAPI is a mock implementation of the gcsAPI interface (from the
// package github.com/sourcegraph/sourcegraph/internal/uploadstore) used for
// unit testing.
type MockGcsAPI struct {
	// BucketFunc is an instance of a mock function object controlling the
	// behavior of the method Bucket.
	BucketFunc *GcsAPIBucketFunc
}

// NewMockGcsAPI creates a new mock of the gcsAPI interface. All methods
// return zero values for all results, unless overwritten.
func NewMockGcsAPI() *MockGcsAPI {
	return &MockGcsAPI{
		BucketFunc: &GcsAPIBucketFunc{
			defaultHook: func(string) (r0 gcsBucketHandle) {
				return
			},
		},
	}
}

// NewStrictMockGcsAPI creates a new mock of the gcsAPI interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockGcsAPI() *MockGcsAPI {
	return &MockGcsAPI{
		BucketFunc: &GcsAPIBucketFunc{
			defaultHook: func(string) gcsBucketHandle {
				panic("unexpected invocation of MockGcsAPI.Bucket")
			},
		},
	}
}

// surrogateMockGcsAPI is a copy of the gcsAPI interface (from the package
// github.com/sourcegraph/sourcegraph/internal/uploadstore). It is redefined
// here as it is unexported in the source package.
type surrogateMockGcsAPI interface {
	Bucket(string) gcsBucketHandle
}

// NewMockGcsAPIFrom creates a new mock of the MockGcsAPI interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockGcsAPIFrom(i surrogateMockGcsAPI) *MockGcsAPI {
	return &MockGcsAPI{
		BucketFunc: &GcsAPIBucketFunc{
			defaultHook: i.Bucket,
		},
	}
}

// GcsAPIBucketFunc describes the behavior when the Bucket method of the
// parent MockGcsAPI instance is invoked.
type GcsAPIBucketFunc struct {
	defaultHook func(string) gcsBucketHandle
	hooks       []func(string) gcsBucketHandle
	history     []GcsAPIBucketFuncCall
	mutex       sync.Mutex
}

// Bucket delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsAPI) Bucket(v0 string) gcsBucketHandle {
	r0 := m.BucketFunc.nextHook()(v0)
	m.BucketFunc.appendCall(GcsAPIBucketFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Bucket method of the
// parent MockGcsAPI instance is invoked and the hook queue is empty.
func (f *GcsAPIBucketFunc) SetDefaultHook(hook func(string) gcsBucketHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Bucket method of the parent MockGcsAPI instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *GcsAPIBucketFunc) PushHook(hook func(string) gcsBucketHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsAPIBucketFunc) SetDefaultReturn(r0 gcsBucketHandle) {
	f.SetDefaultHook(func(string) gcsBucketHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsAPIBucketFunc) PushReturn(r0 gcsBucketHandle) {
	f.PushHook(func(string) gcsBucketHandle {
		return r0
	})
}

func (f *GcsAPIBucketFunc) nextHook() func(string) gcsBucketHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsAPIBucketFunc) appendCall(r0 GcsAPIBucketFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsAPIBucketFuncCall objects describing the
// invocations of this function.
func (f *GcsAPIBucketFunc) History() []GcsAPIBucketFuncCall {
	f.mutex.Lock()
	history := make([]GcsAPIBucketFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsAPIBucketFuncCall is an object that describes an invocation of method
// Bucket on an instance of MockGcsAPI.
type GcsAPIBucketFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gcsBucketHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsAPIBucketFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsAPIBucketFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGcsBucketHandle is a mock implementation of the gcsBucketHandle
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/uploadstore) used for unit
// testing.
type MockGcsBucketHandle struct {
	// AttrsFunc is an instance of a mock function object controlling the
	// behavior of the method Attrs.
	AttrsFunc *GcsBucketHandleAttrsFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *GcsBucketHandleCreateFunc
	// ObjectFunc is an instance of a mock function object controlling the
	// behavior of the method Object.
	ObjectFunc *GcsBucketHandleObjectFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *GcsBucketHandleUpdateFunc
}

// NewMockGcsBucketHandle creates a new mock of the gcsBucketHandle
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGcsBucketHandle() *MockGcsBucketHandle {
	return &MockGcsBucketHandle{
		AttrsFunc: &GcsBucketHandleAttrsFunc{
			defaultHook: func(context.Context) (r0 *storage.BucketAttrs, r1 error) {
				return
			},
		},
		CreateFunc: &GcsBucketHandleCreateFunc{
			defaultHook: func(context.Context, string, *storage.BucketAttrs) (r0 error) {
				return
			},
		},
		ObjectFunc: &GcsBucketHandleObjectFunc{
			defaultHook: func(string) (r0 gcsObjectHandle) {
				return
			},
		},
		UpdateFunc: &GcsBucketHandleUpdateFunc{
			defaultHook: func(context.Context, storage.BucketAttrsToUpdate) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockGcsBucketHandle creates a new mock of the gcsBucketHandle
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGcsBucketHandle() *MockGcsBucketHandle {
	return &MockGcsBucketHandle{
		AttrsFunc: &GcsBucketHandleAttrsFunc{
			defaultHook: func(context.Context) (*storage.BucketAttrs, error) {
				panic("unexpected invocation of MockGcsBucketHandle.Attrs")
			},
		},
		CreateFunc: &GcsBucketHandleCreateFunc{
			defaultHook: func(context.Context, string, *storage.BucketAttrs) error {
				panic("unexpected invocation of MockGcsBucketHandle.Create")
			},
		},
		ObjectFunc: &GcsBucketHandleObjectFunc{
			defaultHook: func(string) gcsObjectHandle {
				panic("unexpected invocation of MockGcsBucketHandle.Object")
			},
		},
		UpdateFunc: &GcsBucketHandleUpdateFunc{
			defaultHook: func(context.Context, storage.BucketAttrsToUpdate) error {
				panic("unexpected invocation of MockGcsBucketHandle.Update")
			},
		},
	}
}

// surrogateMockGcsBucketHandle is a copy of the gcsBucketHandle interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/uploadstore). It is redefined
// here as it is unexported in the source package.
type surrogateMockGcsBucketHandle interface {
	Attrs(context.Context) (*storage.BucketAttrs, error)
	Create(context.Context, string, *storage.BucketAttrs) error
	Object(string) gcsObjectHandle
	Update(context.Context, storage.BucketAttrsToUpdate) error
}

// NewMockGcsBucketHandleFrom creates a new mock of the MockGcsBucketHandle
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGcsBucketHandleFrom(i surrogateMockGcsBucketHandle) *MockGcsBucketHandle {
	return &MockGcsBucketHandle{
		AttrsFunc: &GcsBucketHandleAttrsFunc{
			defaultHook: i.Attrs,
		},
		CreateFunc: &GcsBucketHandleCreateFunc{
			defaultHook: i.Create,
		},
		ObjectFunc: &GcsBucketHandleObjectFunc{
			defaultHook: i.Object,
		},
		UpdateFunc: &GcsBucketHandleUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// GcsBucketHandleAttrsFunc describes the behavior when the Attrs method of
// the parent MockGcsBucketHandle instance is invoked.
type GcsBucketHandleAttrsFunc struct {
	defaultHook func(context.Context) (*storage.BucketAttrs, error)
	hooks       []func(context.Context) (*storage.BucketAttrs, error)
	history     []GcsBucketHandleAttrsFuncCall
	mutex       sync.Mutex
}

// Attrs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsBucketHandle) Attrs(v0 context.Context) (*storage.BucketAttrs, error) {
	r0, r1 := m.AttrsFunc.nextHook()(v0)
	m.AttrsFunc.appendCall(GcsBucketHandleAttrsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Attrs method of the
// parent MockGcsBucketHandle instance is invoked and the hook queue is
// empty.
func (f *GcsBucketHandleAttrsFunc) SetDefaultHook(hook func(context.Context) (*storage.BucketAttrs, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Attrs method of the parent MockGcsBucketHandle instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsBucketHandleAttrsFunc) PushHook(hook func(context.Context) (*storage.BucketAttrs, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsBucketHandleAttrsFunc) SetDefaultReturn(r0 *storage.BucketAttrs, r1 error) {
	f.SetDefaultHook(func(context.Context) (*storage.BucketAttrs, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsBucketHandleAttrsFunc) PushReturn(r0 *storage.BucketAttrs, r1 error) {
	f.PushHook(func(context.Context) (*storage.BucketAttrs, error) {
		return r0, r1
	})
}

func (f *GcsBucketHandleAttrsFunc) nextHook() func(context.Context) (*storage.BucketAttrs, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsBucketHandleAttrsFunc) appendCall(r0 GcsBucketHandleAttrsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsBucketHandleAttrsFuncCall objects
// describing the invocations of this function.
func (f *GcsBucketHandleAttrsFunc) History() []GcsBucketHandleAttrsFuncCall {
	f.mutex.Lock()
	history := make([]GcsBucketHandleAttrsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsBucketHandleAttrsFuncCall is an object that describes an invocation of
// method Attrs on an instance of MockGcsBucketHandle.
type GcsBucketHandleAttrsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *storage.BucketAttrs
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsBucketHandleAttrsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsBucketHandleAttrsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GcsBucketHandleCreateFunc describes the behavior when the Create method
// of the parent MockGcsBucketHandle instance is invoked.
type GcsBucketHandleCreateFunc struct {
	defaultHook func(context.Context, string, *storage.BucketAttrs) error
	hooks       []func(context.Context, string, *storage.BucketAttrs) error
	history     []GcsBucketHandleCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsBucketHandle) Create(v0 context.Context, v1 string, v2 *storage.BucketAttrs) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(GcsBucketHandleCreateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockGcsBucketHandle instance is invoked and the hook queue is
// empty.
func (f *GcsBucketHandleCreateFunc) SetDefaultHook(hook func(context.Context, string, *storage.BucketAttrs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockGcsBucketHandle instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsBucketHandleCreateFunc) PushHook(hook func(context.Context, string, *storage.BucketAttrs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsBucketHandleCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, *storage.BucketAttrs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsBucketHandleCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, *storage.BucketAttrs) error {
		return r0
	})
}

func (f *GcsBucketHandleCreateFunc) nextHook() func(context.Context, string, *storage.BucketAttrs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsBucketHandleCreateFunc) appendCall(r0 GcsBucketHandleCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsBucketHandleCreateFuncCall objects
// describing the invocations of this function.
func (f *GcsBucketHandleCreateFunc) History() []GcsBucketHandleCreateFuncCall {
	f.mutex.Lock()
	history := make([]GcsBucketHandleCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsBucketHandleCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockGcsBucketHandle.
type GcsBucketHandleCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *storage.BucketAttrs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsBucketHandleCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsBucketHandleCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GcsBucketHandleObjectFunc describes the behavior when the Object method
// of the parent MockGcsBucketHandle instance is invoked.
type GcsBucketHandleObjectFunc struct {
	defaultHook func(string) gcsObjectHandle
	hooks       []func(string) gcsObjectHandle
	history     []GcsBucketHandleObjectFuncCall
	mutex       sync.Mutex
}

// Object delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsBucketHandle) Object(v0 string) gcsObjectHandle {
	r0 := m.ObjectFunc.nextHook()(v0)
	m.ObjectFunc.appendCall(GcsBucketHandleObjectFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Object method of the
// parent MockGcsBucketHandle instance is invoked and the hook queue is
// empty.
func (f *GcsBucketHandleObjectFunc) SetDefaultHook(hook func(string) gcsObjectHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Object method of the parent MockGcsBucketHandle instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsBucketHandleObjectFunc) PushHook(hook func(string) gcsObjectHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsBucketHandleObjectFunc) SetDefaultReturn(r0 gcsObjectHandle) {
	f.SetDefaultHook(func(string) gcsObjectHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsBucketHandleObjectFunc) PushReturn(r0 gcsObjectHandle) {
	f.PushHook(func(string) gcsObjectHandle {
		return r0
	})
}

func (f *GcsBucketHandleObjectFunc) nextHook() func(string) gcsObjectHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsBucketHandleObjectFunc) appendCall(r0 GcsBucketHandleObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsBucketHandleObjectFuncCall objects
// describing the invocations of this function.
func (f *GcsBucketHandleObjectFunc) History() []GcsBucketHandleObjectFuncCall {
	f.mutex.Lock()
	history := make([]GcsBucketHandleObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsBucketHandleObjectFuncCall is an object that describes an invocation
// of method Object on an instance of MockGcsBucketHandle.
type GcsBucketHandleObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gcsObjectHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsBucketHandleObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsBucketHandleObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GcsBucketHandleUpdateFunc describes the behavior when the Update method
// of the parent MockGcsBucketHandle instance is invoked.
type GcsBucketHandleUpdateFunc struct {
	defaultHook func(context.Context, storage.BucketAttrsToUpdate) error
	hooks       []func(context.Context, storage.BucketAttrsToUpdate) error
	history     []GcsBucketHandleUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsBucketHandle) Update(v0 context.Context, v1 storage.BucketAttrsToUpdate) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(GcsBucketHandleUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockGcsBucketHandle instance is invoked and the hook queue is
// empty.
func (f *GcsBucketHandleUpdateFunc) SetDefaultHook(hook func(context.Context, storage.BucketAttrsToUpdate) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockGcsBucketHandle instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsBucketHandleUpdateFunc) PushHook(hook func(context.Context, storage.BucketAttrsToUpdate) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsBucketHandleUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, storage.BucketAttrsToUpdate) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsBucketHandleUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, storage.BucketAttrsToUpdate) error {
		return r0
	})
}

func (f *GcsBucketHandleUpdateFunc) nextHook() func(context.Context, storage.BucketAttrsToUpdate) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsBucketHandleUpdateFunc) appendCall(r0 GcsBucketHandleUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsBucketHandleUpdateFuncCall objects
// describing the invocations of this function.
func (f *GcsBucketHandleUpdateFunc) History() []GcsBucketHandleUpdateFuncCall {
	f.mutex.Lock()
	history := make([]GcsBucketHandleUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsBucketHandleUpdateFuncCall is an object that describes an invocation
// of method Update on an instance of MockGcsBucketHandle.
type GcsBucketHandleUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 storage.BucketAttrsToUpdate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsBucketHandleUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsBucketHandleUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGcsComposer is a mock implementation of the gcsComposer interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/uploadstore) used for unit
// testing.
type MockGcsComposer struct {
	// RunFunc is an instance of a mock function object controlling the
	// behavior of the method Run.
	RunFunc *GcsComposerRunFunc
}

// NewMockGcsComposer creates a new mock of the gcsComposer interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGcsComposer() *MockGcsComposer {
	return &MockGcsComposer{
		RunFunc: &GcsComposerRunFunc{
			defaultHook: func(context.Context) (r0 *storage.ObjectAttrs, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGcsComposer creates a new mock of the gcsComposer interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockGcsComposer() *MockGcsComposer {
	return &MockGcsComposer{
		RunFunc: &GcsComposerRunFunc{
			defaultHook: func(context.Context) (*storage.ObjectAttrs, error) {
				panic("unexpected invocation of MockGcsComposer.Run")
			},
		},
	}
}

// surrogateMockGcsComposer is a copy of the gcsComposer interface (from the
// package github.com/sourcegraph/sourcegraph/internal/uploadstore). It is
// redefined here as it is unexported in the source package.
type surrogateMockGcsComposer interface {
	Run(context.Context) (*storage.ObjectAttrs, error)
}

// NewMockGcsComposerFrom creates a new mock of the MockGcsComposer
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGcsComposerFrom(i surrogateMockGcsComposer) *MockGcsComposer {
	return &MockGcsComposer{
		RunFunc: &GcsComposerRunFunc{
			defaultHook: i.Run,
		},
	}
}

// GcsComposerRunFunc describes the behavior when the Run method of the
// parent MockGcsComposer instance is invoked.
type GcsComposerRunFunc struct {
	defaultHook func(context.Context) (*storage.ObjectAttrs, error)
	hooks       []func(context.Context) (*storage.ObjectAttrs, error)
	history     []GcsComposerRunFuncCall
	mutex       sync.Mutex
}

// Run delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsComposer) Run(v0 context.Context) (*storage.ObjectAttrs, error) {
	r0, r1 := m.RunFunc.nextHook()(v0)
	m.RunFunc.appendCall(GcsComposerRunFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Run method of the
// parent MockGcsComposer instance is invoked and the hook queue is empty.
func (f *GcsComposerRunFunc) SetDefaultHook(hook func(context.Context) (*storage.ObjectAttrs, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Run method of the parent MockGcsComposer instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *GcsComposerRunFunc) PushHook(hook func(context.Context) (*storage.ObjectAttrs, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsComposerRunFunc) SetDefaultReturn(r0 *storage.ObjectAttrs, r1 error) {
	f.SetDefaultHook(func(context.Context) (*storage.ObjectAttrs, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsComposerRunFunc) PushReturn(r0 *storage.ObjectAttrs, r1 error) {
	f.PushHook(func(context.Context) (*storage.ObjectAttrs, error) {
		return r0, r1
	})
}

func (f *GcsComposerRunFunc) nextHook() func(context.Context) (*storage.ObjectAttrs, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsComposerRunFunc) appendCall(r0 GcsComposerRunFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsComposerRunFuncCall objects describing
// the invocations of this function.
func (f *GcsComposerRunFunc) History() []GcsComposerRunFuncCall {
	f.mutex.Lock()
	history := make([]GcsComposerRunFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsComposerRunFuncCall is an object that describes an invocation of
// method Run on an instance of MockGcsComposer.
type GcsComposerRunFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *storage.ObjectAttrs
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsComposerRunFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsComposerRunFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGcsObjectHandle is a mock implementation of the gcsObjectHandle
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/uploadstore) used for unit
// testing.
type MockGcsObjectHandle struct {
	// ComposerFromFunc is an instance of a mock function object controlling
	// the behavior of the method ComposerFrom.
	ComposerFromFunc *GcsObjectHandleComposerFromFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *GcsObjectHandleDeleteFunc
	// NewRangeReaderFunc is an instance of a mock function object
	// controlling the behavior of the method NewRangeReader.
	NewRangeReaderFunc *GcsObjectHandleNewRangeReaderFunc
	// NewWriterFunc is an instance of a mock function object controlling
	// the behavior of the method NewWriter.
	NewWriterFunc *GcsObjectHandleNewWriterFunc
}

// NewMockGcsObjectHandle creates a new mock of the gcsObjectHandle
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGcsObjectHandle() *MockGcsObjectHandle {
	return &MockGcsObjectHandle{
		ComposerFromFunc: &GcsObjectHandleComposerFromFunc{
			defaultHook: func(...gcsObjectHandle) (r0 gcsComposer) {
				return
			},
		},
		DeleteFunc: &GcsObjectHandleDeleteFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		NewRangeReaderFunc: &GcsObjectHandleNewRangeReaderFunc{
			defaultHook: func(context.Context, int64, int64) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		NewWriterFunc: &GcsObjectHandleNewWriterFunc{
			defaultHook: func(context.Context) (r0 io.WriteCloser) {
				return
			},
		},
	}
}

// NewStrictMockGcsObjectHandle creates a new mock of the gcsObjectHandle
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGcsObjectHandle() *MockGcsObjectHandle {
	return &MockGcsObjectHandle{
		ComposerFromFunc: &GcsObjectHandleComposerFromFunc{
			defaultHook: func(...gcsObjectHandle) gcsComposer {
				panic("unexpected invocation of MockGcsObjectHandle.ComposerFrom")
			},
		},
		DeleteFunc: &GcsObjectHandleDeleteFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockGcsObjectHandle.Delete")
			},
		},
		NewRangeReaderFunc: &GcsObjectHandleNewRangeReaderFunc{
			defaultHook: func(context.Context, int64, int64) (io.ReadCloser, error) {
				panic("unexpected invocation of MockGcsObjectHandle.NewRangeReader")
			},
		},
		NewWriterFunc: &GcsObjectHandleNewWriterFunc{
			defaultHook: func(context.Context) io.WriteCloser {
				panic("unexpected invocation of MockGcsObjectHandle.NewWriter")
			},
		},
	}
}

// surrogateMockGcsObjectHandle is a copy of the gcsObjectHandle interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/uploadstore). It is redefined
// here as it is unexported in the source package.
type surrogateMockGcsObjectHandle interface {
	ComposerFrom(...gcsObjectHandle) gcsComposer
	Delete(context.Context) error
	NewRangeReader(context.Context, int64, int64) (io.ReadCloser, error)
	NewWriter(context.Context) io.WriteCloser
}

// NewMockGcsObjectHandleFrom creates a new mock of the MockGcsObjectHandle
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGcsObjectHandleFrom(i surrogateMockGcsObjectHandle) *MockGcsObjectHandle {
	return &MockGcsObjectHandle{
		ComposerFromFunc: &GcsObjectHandleComposerFromFunc{
			defaultHook: i.ComposerFrom,
		},
		DeleteFunc: &GcsObjectHandleDeleteFunc{
			defaultHook: i.Delete,
		},
		NewRangeReaderFunc: &GcsObjectHandleNewRangeReaderFunc{
			defaultHook: i.NewRangeReader,
		},
		NewWriterFunc: &GcsObjectHandleNewWriterFunc{
			defaultHook: i.NewWriter,
		},
	}
}

// GcsObjectHandleComposerFromFunc describes the behavior when the
// ComposerFrom method of the parent MockGcsObjectHandle instance is
// invoked.
type GcsObjectHandleComposerFromFunc struct {
	defaultHook func(...gcsObjectHandle) gcsComposer
	hooks       []func(...gcsObjectHandle) gcsComposer
	history     []GcsObjectHandleComposerFromFuncCall
	mutex       sync.Mutex
}

// ComposerFrom delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGcsObjectHandle) ComposerFrom(v0 ...gcsObjectHandle) gcsComposer {
	r0 := m.ComposerFromFunc.nextHook()(v0...)
	m.ComposerFromFunc.appendCall(GcsObjectHandleComposerFromFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ComposerFrom method
// of the parent MockGcsObjectHandle instance is invoked and the hook queue
// is empty.
func (f *GcsObjectHandleComposerFromFunc) SetDefaultHook(hook func(...gcsObjectHandle) gcsComposer) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ComposerFrom method of the parent MockGcsObjectHandle instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GcsObjectHandleComposerFromFunc) PushHook(hook func(...gcsObjectHandle) gcsComposer) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsObjectHandleComposerFromFunc) SetDefaultReturn(r0 gcsComposer) {
	f.SetDefaultHook(func(...gcsObjectHandle) gcsComposer {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsObjectHandleComposerFromFunc) PushReturn(r0 gcsComposer) {
	f.PushHook(func(...gcsObjectHandle) gcsComposer {
		return r0
	})
}

func (f *GcsObjectHandleComposerFromFunc) nextHook() func(...gcsObjectHandle) gcsComposer {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsObjectHandleComposerFromFunc) appendCall(r0 GcsObjectHandleComposerFromFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsObjectHandleComposerFromFuncCall objects
// describing the invocations of this function.
func (f *GcsObjectHandleComposerFromFunc) History() []GcsObjectHandleComposerFromFuncCall {
	f.mutex.Lock()
	history := make([]GcsObjectHandleComposerFromFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsObjectHandleComposerFromFuncCall is an object that describes an
// invocation of method ComposerFrom on an instance of MockGcsObjectHandle.
type GcsObjectHandleComposerFromFuncCall struct {
	// Arg0 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg0 []gcsObjectHandle
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gcsComposer
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GcsObjectHandleComposerFromFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg0 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsObjectHandleComposerFromFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GcsObjectHandleDeleteFunc describes the behavior when the Delete method
// of the parent MockGcsObjectHandle instance is invoked.
type GcsObjectHandleDeleteFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []GcsObjectHandleDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsObjectHandle) Delete(v0 context.Context) error {
	r0 := m.DeleteFunc.nextHook()(v0)
	m.DeleteFunc.appendCall(GcsObjectHandleDeleteFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockGcsObjectHandle instance is invoked and the hook queue is
// empty.
func (f *GcsObjectHandleDeleteFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockGcsObjectHandle instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsObjectHandleDeleteFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsObjectHandleDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsObjectHandleDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *GcsObjectHandleDeleteFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsObjectHandleDeleteFunc) appendCall(r0 GcsObjectHandleDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsObjectHandleDeleteFuncCall objects
// describing the invocations of this function.
func (f *GcsObjectHandleDeleteFunc) History() []GcsObjectHandleDeleteFuncCall {
	f.mutex.Lock()
	history := make([]GcsObjectHandleDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsObjectHandleDeleteFuncCall is an object that describes an invocation
// of method Delete on an instance of MockGcsObjectHandle.
type GcsObjectHandleDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsObjectHandleDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsObjectHandleDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GcsObjectHandleNewRangeReaderFunc describes the behavior when the
// NewRangeReader method of the parent MockGcsObjectHandle instance is
// invoked.
type GcsObjectHandleNewRangeReaderFunc struct {
	defaultHook func(context.Context, int64, int64) (io.ReadCloser, error)
	hooks       []func(context.Context, int64, int64) (io.ReadCloser, error)
	history     []GcsObjectHandleNewRangeReaderFuncCall
	mutex       sync.Mutex
}

// NewRangeReader delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGcsObjectHandle) NewRangeReader(v0 context.Context, v1 int64, v2 int64) (io.ReadCloser, error) {
	r0, r1 := m.NewRangeReaderFunc.nextHook()(v0, v1, v2)
	m.NewRangeReaderFunc.appendCall(GcsObjectHandleNewRangeReaderFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NewRangeReader
// method of the parent MockGcsObjectHandle instance is invoked and the hook
// queue is empty.
func (f *GcsObjectHandleNewRangeReaderFunc) SetDefaultHook(hook func(context.Context, int64, int64) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewRangeReader method of the parent MockGcsObjectHandle instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GcsObjectHandleNewRangeReaderFunc) PushHook(hook func(context.Context, int64, int64) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsObjectHandleNewRangeReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, int64) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsObjectHandleNewRangeReaderFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, int64, int64) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *GcsObjectHandleNewRangeReaderFunc) nextHook() func(context.Context, int64, int64) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsObjectHandleNewRangeReaderFunc) appendCall(r0 GcsObjectHandleNewRangeReaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsObjectHandleNewRangeReaderFuncCall
// objects describing the invocations of this function.
func (f *GcsObjectHandleNewRangeReaderFunc) History() []GcsObjectHandleNewRangeReaderFuncCall {
	f.mutex.Lock()
	history := make([]GcsObjectHandleNewRangeReaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsObjectHandleNewRangeReaderFuncCall is an object that describes an
// invocation of method NewRangeReader on an instance of
// MockGcsObjectHandle.
type GcsObjectHandleNewRangeReaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsObjectHandleNewRangeReaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsObjectHandleNewRangeReaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GcsObjectHandleNewWriterFunc describes the behavior when the NewWriter
// method of the parent MockGcsObjectHandle instance is invoked.
type GcsObjectHandleNewWriterFunc struct {
	defaultHook func(context.Context) io.WriteCloser
	hooks       []func(context.Context) io.WriteCloser
	history     []GcsObjectHandleNewWriterFuncCall
	mutex       sync.Mutex
}

// NewWriter delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsObjectHandle) NewWriter(v0 context.Context) io.WriteCloser {
	r0 := m.NewWriterFunc.nextHook()(v0)
	m.NewWriterFunc.appendCall(GcsObjectHandleNewWriterFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the NewWriter method of
// the parent MockGcsObjectHandle instance is invoked and the hook queue is
// empty.
func (f *GcsObjectHandleNewWriterFunc) SetDefaultHook(hook func(context.Context) io.WriteCloser) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewWriter method of the parent MockGcsObjectHandle instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GcsObjectHandleNewWriterFunc) PushHook(hook func(context.Context) io.WriteCloser) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GcsObjectHandleNewWriterFunc) SetDefaultReturn(r0 io.WriteCloser) {
	f.SetDefaultHook(func(context.Context) io.WriteCloser {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GcsObjectHandleNewWriterFunc) PushReturn(r0 io.WriteCloser) {
	f.PushHook(func(context.Context) io.WriteCloser {
		return r0
	})
}

func (f *GcsObjectHandleNewWriterFunc) nextHook() func(context.Context) io.WriteCloser {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsObjectHandleNewWriterFunc) appendCall(r0 GcsObjectHandleNewWriterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsObjectHandleNewWriterFuncCall objects
// describing the invocations of this function.
func (f *GcsObjectHandleNewWriterFunc) History() []GcsObjectHandleNewWriterFuncCall {
	f.mutex.Lock()
	history := make([]GcsObjectHandleNewWriterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsObjectHandleNewWriterFuncCall is an object that describes an
// invocation of method NewWriter on an instance of MockGcsObjectHandle.
type GcsObjectHandleNewWriterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.WriteCloser
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsObjectHandleNewWriterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsObjectHandleNewWriterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockS3API is a mock implementation of the s3API interface (from the
// package github.com/sourcegraph/sourcegraph/internal/uploadstore) used for
// unit testing.
type MockS3API struct {
	// AbortMultipartUploadFunc is an instance of a mock function object
	// controlling the behavior of the method AbortMultipartUpload.
	AbortMultipartUploadFunc *S3APIAbortMultipartUploadFunc
	// CompleteMultipartUploadFunc is an instance of a mock function object
	// controlling the behavior of the method CompleteMultipartUpload.
	CompleteMultipartUploadFunc *S3APICompleteMultipartUploadFunc
	// CreateBucketFunc is an instance of a mock function object controlling
	// the behavior of the method CreateBucket.
	CreateBucketFunc *S3APICreateBucketFunc
	// CreateMultipartUploadFunc is an instance of a mock function object
	// controlling the behavior of the method CreateMultipartUpload.
	CreateMultipartUploadFunc *S3APICreateMultipartUploadFunc
	// DeleteObjectFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteObject.
	DeleteObjectFunc *S3APIDeleteObjectFunc
	// GetObjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetObject.
	GetObjectFunc *S3APIGetObjectFunc
	// HeadObjectFunc is an instance of a mock function object controlling
	// the behavior of the method HeadObject.
	HeadObjectFunc *S3APIHeadObjectFunc
	// PutBucketLifecycleConfigurationFunc is an instance of a mock function
	// object controlling the behavior of the method
	// PutBucketLifecycleConfiguration.
	PutBucketLifecycleConfigurationFunc *S3APIPutBucketLifecycleConfigurationFunc
	// UploadPartCopyFunc is an instance of a mock function object
	// controlling the behavior of the method UploadPartCopy.
	UploadPartCopyFunc *S3APIUploadPartCopyFunc
}

// NewMockS3API creates a new mock of the s3API interface. All methods
// return zero values for all results, unless overwritten.
func NewMockS3API() *MockS3API {
	return &MockS3API{
		AbortMultipartUploadFunc: &S3APIAbortMultipartUploadFunc{
			defaultHook: func(context.Context, *s3.AbortMultipartUploadInput) (r0 *s3.AbortMultipartUploadOutput, r1 error) {
				return
			},
		},
		CompleteMultipartUploadFunc: &S3APICompleteMultipartUploadFunc{
			defaultHook: func(context.Context, *s3.CompleteMultipartUploadInput) (r0 *s3.CompleteMultipartUploadOutput, r1 error) {
				return
			},
		},
		CreateBucketFunc: &S3APICreateBucketFunc{
			defaultHook: func(context.Context, *s3.CreateBucketInput) (r0 *s3.CreateBucketOutput, r1 error) {
				return
			},
		},
		CreateMultipartUploadFunc: &S3APICreateMultipartUploadFunc{
			defaultHook: func(context.Context, *s3.CreateMultipartUploadInput) (r0 *s3.CreateMultipartUploadOutput, r1 error) {
				return
			},
		},
		DeleteObjectFunc: &S3APIDeleteObjectFunc{
			defaultHook: func(context.Context, *s3.DeleteObjectInput) (r0 *s3.DeleteObjectOutput, r1 error) {
				return
			},
		},
		GetObjectFunc: &S3APIGetObjectFunc{
			defaultHook: func(context.Context, *s3.GetObjectInput) (r0 *s3.GetObjectOutput, r1 error) {
				return
			},
		},
		HeadObjectFunc: &S3APIHeadObjectFunc{
			defaultHook: func(context.Context, *s3.HeadObjectInput) (r0 *s3.HeadObjectOutput, r1 error) {
				return
			},
		},
		PutBucketLifecycleConfigurationFunc: &S3APIPutBucketLifecycleConfigurationFunc{
			defaultHook: func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error) {
				return
			},
		},
		UploadPartCopyFunc: &S3APIUploadPartCopyFunc{
			defaultHook: func(context.Context, *s3.UploadPartCopyInput) (r0 *s3.UploadPartCopyOutput, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockS3API creates a new mock of the s3API interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockS3API() *MockS3API {
	return &MockS3API{
		AbortMultipartUploadFunc: &S3APIAbortMultipartUploadFunc{
			defaultHook: func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
				panic("unexpected invocation of MockS3API.AbortMultipartUpload")
			},
		},
		CompleteMultipartUploadFunc: &S3APICompleteMultipartUploadFunc{
			defaultHook: func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
				panic("unexpected invocation of MockS3API.CompleteMultipartUpload")
			},
		},
		CreateBucketFunc: &S3APICreateBucketFunc{
			defaultHook: func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
				panic("unexpected invocation of MockS3API.CreateBucket")
			},
		},
		CreateMultipartUploadFunc: &S3APICreateMultipartUploadFunc{
			defaultHook: func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
				panic("unexpected invocation of MockS3API.CreateMultipartUpload")
			},
		},
		DeleteObjectFunc: &S3APIDeleteObjectFunc{
			defaultHook: func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
				panic("unexpected invocation of MockS3API.DeleteObject")
			},
		},
		GetObjectFunc: &S3APIGetObjectFunc{
			defaultHook: func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
				panic("unexpected invocation of MockS3API.GetObject")
			},
		},
		HeadObjectFunc: &S3APIHeadObjectFunc{
			defaultHook: func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
				panic("unexpected invocation of MockS3API.HeadObject")
			},
		},
		PutBucketLifecycleConfigurationFunc: &S3APIPutBucketLifecycleConfigurationFunc{
			defaultHook: func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
				panic("unexpected invocation of MockS3API.PutBucketLifecycleConfiguration")
			},
		},
		UploadPartCopyFunc: &S3APIUploadPartCopyFunc{
			defaultHook: func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
				panic("unexpected invocation of MockS3API.UploadPartCopy")
			},
		},
	}
}

// surrogateMockS3API is a copy of the s3API interface (from the package
// github.com/sourcegraph/sourcegraph/internal/uploadstore). It is redefined
// here as it is unexported in the source package.
type surrogateMockS3API interface {
	AbortMultipartUpload(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)
	CompleteMultipartUpload(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)
	CreateBucket(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)
	CreateMultipartUpload(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)
	DeleteObject(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)
	GetObject(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)
	HeadObject(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)
	PutBucketLifecycleConfiguration(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)
	UploadPartCopy(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)
}

// NewMockS3APIFrom creates a new mock of the MockS3API interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockS3APIFrom(i surrogateMockS3API) *MockS3API {
	return &MockS3API{
		AbortMultipartUploadFunc: &S3APIAbortMultipartUploadFunc{
			defaultHook: i.AbortMultipartUpload,
		},
		CompleteMultipartUploadFunc: &S3APICompleteMultipartUploadFunc{
			defaultHook: i.CompleteMultipartUpload,
		},
		CreateBucketFunc: &S3APICreateBucketFunc{
			defaultHook: i.CreateBucket,
		},
		CreateMultipartUploadFunc: &S3APICreateMultipartUploadFunc{
			defaultHook: i.CreateMultipartUpload,
		},
		DeleteObjectFunc: &S3APIDeleteObjectFunc{
			defaultHook: i.DeleteObject,
		},
		GetObjectFunc: &S3APIGetObjectFunc{
			defaultHook: i.GetObject,
		},
		HeadObjectFunc: &S3APIHeadObjectFunc{
			defaultHook: i.HeadObject,
		},
		PutBucketLifecycleConfigurationFunc: &S3APIPutBucketLifecycleConfigurationFunc{
			defaultHook: i.PutBucketLifecycleConfiguration,
		},
		UploadPartCopyFunc: &S3APIUploadPartCopyFunc{
			defaultHook: i.UploadPartCopy,
		},
	}
}

// S3APIAbortMultipartUploadFunc describes the behavior when the
// AbortMultipartUpload method of the parent MockS3API instance is invoked.
type S3APIAbortMultipartUploadFunc struct {
	defaultHook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)
	hooks       []func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)
	history     []S3APIAbortMultipartUploadFuncCall
	mutex       sync.Mutex
}

// AbortMultipartUpload delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockS3API) AbortMultipartUpload(v0 context.Context, v1 *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
	r0, r1 := m.AbortMultipartUploadFunc.nextHook()(v0, v1)
	m.AbortMultipartUploadFunc.appendCall(S3APIAbortMultipartUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AbortMultipartUpload
// method of the parent MockS3API instance is invoked and the hook queue is
// empty.
func (f *S3APIAbortMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AbortMultipartUpload method of the parent MockS3API instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *S3APIAbortMultipartUploadFunc) PushHook(hook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3APIAbortMultipartUploadFunc) SetDefaultReturn(r0 *s3.AbortMultipartUploadOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3APIAbortMultipartUploadFunc) PushReturn(r0 *s3.AbortMultipartUploadOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
		return r0, r1
	})
}

func (f *S3APIAbortMultipartUploadFunc) nextHook() func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIAbortMultipartUploadFunc) appendCall(r0 S3APIAbortMultipartUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIAbortMultipartUploadFuncCall objects
// describing the invocations of this function.
func (f *S3APIAbortMultipartUploadFunc) History() []S3APIAbortMultipartUploadFuncCall {
	f.mutex.Lock()
	history := make([]S3APIAbortMultipartUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIAbortMultipartUploadFuncCall is an object that describes an
// invocation of method AbortMultipartUpload on an instance of MockS3API.
type S3APIAbortMultipartUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.AbortMultipartUploadInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.AbortMultipartUploadOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIAbortMultipartUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIAbortMultipartUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APICompleteMultipartUploadFunc describes the behavior when the
// CompleteMultipartUpload method of the parent MockS3API instance is
// invoked.
type S3APICompleteMultipartUploadFunc struct {
	defaultHook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)
	hooks       []func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)
	history     []S3APICompleteMultipartUploadFuncCall
	mutex       sync.Mutex
}

// CompleteMultipartUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockS3API) CompleteMultipartUpload(v0 context.Context, v1 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	r0, r1 := m.CompleteMultipartUploadFunc.nextHook()(v0, v1)
	m.CompleteMultipartUploadFunc.appendCall(S3APICompleteMultipartUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CompleteMultipartUpload method of the parent MockS3API instance is
// invoked and the hook queue is empty.
func (f *S3APICompleteMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CompleteMultipartUpload method of the parent MockS3API instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *S3APICompleteMultipartUploadFunc) PushHook(hook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3APICompleteMultipartUploadFunc) SetDefaultReturn(r0 *s3.CompleteMultipartUploadOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3APICompleteMultipartUploadFunc) PushReturn(r0 *s3.CompleteMultipartUploadOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
		return r0, r1
	})
}

func (f *S3APICompleteMultipartUploadFunc) nextHook() func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APICompleteMultipartUploadFunc) appendCall(r0 S3APICompleteMultipartUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APICompleteMultipartUploadFuncCall
// objects describing the invocations of this function.
func (f *S3APICompleteMultipartUploadFunc) History() []S3APICompleteMultipartUploadFuncCall {
	f.mutex.Lock()
	history := make([]S3APICompleteMultipartUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APICompleteMultipartUploadFuncCall is an object that describes an
// invocation of method CompleteMultipartUpload on an instance of MockS3API.
type S3APICompleteMultipartUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.CompleteMultipartUploadInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.CompleteMultipartUploadOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APICompleteMultipartUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APICompleteMultipartUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APICreateBucketFunc describes the behavior when the CreateBucket method
// of the parent MockS3API instance is invoked.
type S3APICreateBucketFunc struct {
	defaultHook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)
	hooks       []func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)
	history     []S3APICreateBucketFuncCall
	mutex       sync.Mutex
}

// CreateBucket delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockS3API) CreateBucket(v0 context.Context, v1 *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
	r0, r1 := m.CreateBucketFunc.nextHook()(v0, v1)
	m.CreateBucketFunc.appendCall(S3APICreateBucketFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateBucket method
// of the parent MockS3API instance is invoked and the hook queue is empty.
func (f *S3APICreateBucketFunc) SetDefaultHook(hook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateBucket method of the parent MockS3API instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3APICreateBucketFunc) PushHook(hook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3APICreateBucketFunc) SetDefaultReturn(r0 *s3.CreateBucketOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3APICreateBucketFunc) PushReturn(r0 *s3.CreateBucketOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
		return r0, r1
	})
}

func (f *S3APICreateBucketFunc) nextHook() func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APICreateBucketFunc) appendCall(r0 S3APICreateBucketFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APICreateBucketFuncCall objects
// describing the invocations of this function.
func (f *S3APICreateBucketFunc) History() []S3APICreateBucketFuncCall {
	f.mutex.Lock()
	history := make([]S3APICreateBucketFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APICreateBucketFuncCall is an object that describes an invocation of
// method CreateBucket on an instance of MockS3API.
type S3APICreateBucketFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.CreateBucketInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.CreateBucketOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APICreateBucketFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APICreateBucketFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APICreateMultipartUploadFunc describes the behavior when the
// CreateMultipartUpload method of the parent MockS3API instance is invoked.
type S3APICreateMultipartUploadFunc struct {
	defaultHook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)
	hooks       []func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)
	history     []S3APICreateMultipartUploadFuncCall
	mutex       sync.Mutex
}

// CreateMultipartUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockS3API) CreateMultipartUpload(v0 context.Context, v1 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	r0, r1 := m.CreateMultipartUploadFunc.nextHook()(v0, v1)
	m.CreateMultipartUploadFunc.appendCall(S3APICreateMultipartUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateMultipartUpload method of the parent MockS3API instance is invoked
// and the hook queue is empty.
func (f *S3APICreateMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateMultipartUpload method of the parent MockS3API instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *S3APICreateMultipartUploadFunc) PushHook(hook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3APICreateMultipartUploadFunc) SetDefaultReturn(r0 *s3.CreateMultipartUploadOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3APICreateMultipartUploadFunc) PushReturn(r0 *s3.CreateMultipartUploadOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
		return r0, r1
	})
}

func (f *S3APICreateMultipartUploadFunc) nextHook() func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APICreateMultipartUploadFunc) appendCall(r0 S3APICreateMultipartUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APICreateMultipartUploadFuncCall objects
// describing the invocations of this function.
func (f *S3APICreateMultipartUploadFunc) History() []S3APICreateMultipartUploadFuncCall {
	f.mutex.Lock()
	history := make([]S3APICreateMultipartUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APICreateMultipartUploadFuncCall is an object that describes an
// invocation of method CreateMultipartUpload on an instance of MockS3API.
type S3APICreateMultipartUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.CreateMultipartUploadInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.CreateMultipartUploadOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APICreateMultipartUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APICreateMultipartUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIDeleteObjectFunc describes the behavior when the DeleteObject method
// of the parent MockS3API instance is invoked.
type S3APIDeleteObjectFunc struct {
	defaultHook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)
	hooks       []func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)
	history     []S3APIDeleteObjectFuncCall
	mutex       sync.Mutex
}

// DeleteObject delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockS3API) DeleteObject(v0 context.Context, v1 *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	r0, r1 := m.DeleteObjectFunc.nextHook()(v0, v1)
	m.DeleteObjectFunc.appendCall(S3APIDeleteObjectFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteObject method
// of the parent MockS3API instance is invoked and the hook queue is empty.
func (f *S3APIDeleteObjectFunc) SetDefaultHook(hook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteObject method of the parent MockS3API instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3APIDeleteObjectFunc) PushHook(hook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3APIDeleteObjectFunc) SetDefaultReturn(r0 *s3.DeleteObjectOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3APIDeleteObjectFunc) PushReturn(r0 *s3.DeleteObjectOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
		return r0, r1
	})
}

func (f *S3APIDeleteObjectFunc) nextHook() func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIDeleteObjectFunc) appendCall(r0 S3APIDeleteObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIDeleteObjectFuncCall objects
// describing the invocations of this function.
func (f *S3APIDeleteObjectFunc) History() []S3APIDeleteObjectFuncCall {
	f.mutex.Lock()
	history := make([]S3APIDeleteObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIDeleteObjectFuncCall is an object that describes an invocation of
// method DeleteObject on an instance of MockS3API.
type S3APIDeleteObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.DeleteObjectInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.DeleteObjectOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIDeleteObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIDeleteObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIGetObjectFunc describes the behavior when the GetObject method of
// the parent MockS3API instance is invoked.
type S3APIGetObjectFunc struct {
	defaultHook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)
	hooks       []func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)
	history     []S3APIGetObjectFuncCall
	mutex       sync.Mutex
}

// GetObject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockS3API) GetObject(v0 context.Context, v1 *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	r0, r1 := m.GetObjectFunc.nextHook()(v0, v1)
	m.GetObjectFunc.appendCall(S3APIGetObjectFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetObject method of
// the parent MockS3API instance is invoked and the hook queue is empty.
func (f *S3APIGetObjectFunc) SetDefaultHook(hook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetObject method of the parent MockS3API instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *S3APIGetObjectFunc) PushHook(hook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3APIGetObjectFunc) SetDefaultReturn(r0 *s3.GetObjectOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3APIGetObjectFunc) PushReturn(r0 *s3.GetObjectOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
		return r0, r1
	})
}

func (f *S3APIGetObjectFunc) nextHook() func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIGetObjectFunc) appendCall(r0 S3APIGetObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIGetObjectFuncCall objects describing
// the invocations of this function.
func (f *S3APIGetObjectFunc) History() []S3APIGetObjectFuncCall {
	f.mutex.Lock()
	history := make([]S3APIGetObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIGetObjectFuncCall is an object that describes an invocation of
// method GetObject on an instance of MockS3API.
type S3APIGetObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.GetObjectInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.GetObjectOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIGetObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIGetObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIHeadObjectFunc describes the behavior when the HeadObject method of
// the parent MockS3API instance is invoked.
type S3APIHeadObjectFunc struct {
	defaultHook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)
	hooks       []func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)
	history     []S3APIHeadObjectFuncCall
	mutex       sync.Mutex
}

// HeadObject delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockS3API) HeadObject(v0 context.Context, v1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	r0, r1 := m.HeadObjectFunc.nextHook()(v0, v1)
	m.HeadObjectFunc.appendCall(S3APIHeadObjectFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HeadObject method of
// the parent MockS3API instance is invoked and the hook queue is empty.
func (f *S3APIHeadObjectFunc) SetDefaultHook(hook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HeadObject method of the parent MockS3API instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3APIHeadObjectFunc) PushHook(hook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3APIHeadObjectFunc) SetDefaultReturn(r0 *s3.HeadObjectOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3APIHeadObjectFunc) PushReturn(r0 *s3.HeadObjectOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
		return r0, r1
	})
}

func (f *S3APIHeadObjectFunc) nextHook() func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIHeadObjectFunc) appendCall(r0 S3APIHeadObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIHeadObjectFuncCall objects describing
// the invocations of this function.
func (f *S3APIHeadObjectFunc) History() []S3APIHeadObjectFuncCall {
	f.mutex.Lock()
	history := make([]S3APIHeadObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIHeadObjectFuncCall is an object that describes an invocation of
// method HeadObject on an instance of MockS3API.
type S3APIHeadObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.HeadObjectInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.HeadObjectOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIHeadObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIHeadObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIPutBucketLifecycleConfigurationFunc describes the behavior when the
// PutBucketLifecycleConfiguration method of the parent MockS3API instance
// is invoked.
type S3APIPutBucketLifecycleConfigurationFunc struct {
	defaultHook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)
	hooks       []func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)
	history     []S3APIPutBucketLifecycleConfigurationFuncCall
	mutex       sync.Mutex
}

// PutBucketLifecycleConfiguration delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockS3API) PutBucketLifecycleConfiguration(v0 context.Context, v1 *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	r0, r1 := m.PutBucketLifecycleConfigurationFunc.nextHook()(v0, v1)
	m.PutBucketLifecycleConfigurationFunc.appendCall(S3APIPutBucketLifecycleConfigurationFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PutBucketLifecycleConfiguration method of the parent MockS3API instance
// is invoked and the hook queue is empty.
func (f *S3APIPutBucketLifecycleConfigurationFunc) SetDefaultHook(hook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PutBucketLifecycleConfiguration method of the parent MockS3API instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *S3APIPutBucketLifecycleConfigurationFunc) PushHook(hook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3APIPutBucketLifecycleConfigurationFunc) SetDefaultReturn(r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3APIPutBucketLifecycleConfigurationFunc) PushReturn(r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
		return r0, r1
	})
}

func (f *S3APIPutBucketLifecycleConfigurationFunc) nextHook() func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIPutBucketLifecycleConfigurationFunc) appendCall(r0 S3APIPutBucketLifecycleConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// S3APIPutBucketLifecycleConfigurationFuncCall objects describing the
// invocations of this function.
func (f *S3APIPutBucketLifecycleConfigurationFunc) History() []S3APIPutBucketLifecycleConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]S3APIPutBucketLifecycleConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIPutBucketLifecycleConfigurationFuncCall is an object that describes
// an invocation of method PutBucketLifecycleConfiguration on an instance of
// MockS3API.
type S3APIPutBucketLifecycleConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.PutBucketLifecycleConfigurationInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.PutBucketLifecycleConfigurationOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIPutBucketLifecycleConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIPutBucketLifecycleConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIUploadPartCopyFunc describes the behavior when the UploadPartCopy
// method of the parent MockS3API instance is invoked.
type S3APIUploadPartCopyFunc struct {
	defaultHook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)
	hooks       []func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)
	history     []S3APIUploadPartCopyFuncCall
	mutex       sync.Mutex
}

// UploadPartCopy delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockS3API) UploadPartCopy(v0 context.Context, v1 *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
	r0, r1 := m.UploadPartCopyFunc.nextHook()(v0, v1)
	m.UploadPartCopyFunc.appendCall(S3APIUploadPartCopyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UploadPartCopy
// method of the parent MockS3API instance is invoked and the hook queue is
// empty.
func (f *S3APIUploadPartCopyFunc) SetDefaultHook(hook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UploadPartCopy method of the parent MockS3API instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3APIUploadPartCopyFunc) PushHook(hook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3APIUploadPartCopyFunc) SetDefaultReturn(r0 *s3.UploadPartCopyOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3APIUploadPartCopyFunc) PushReturn(r0 *s3.UploadPartCopyOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
		return r0, r1
	})
}

func (f *S3APIUploadPartCopyFunc) nextHook() func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIUploadPartCopyFunc) appendCall(r0 S3APIUploadPartCopyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIUploadPartCopyFuncCall objects
// describing the invocations of this function.
func (f *S3APIUploadPartCopyFunc) History() []S3APIUploadPartCopyFuncCall {
	f.mutex.Lock()
	history := make([]S3APIUploadPartCopyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIUploadPartCopyFuncCall is an object that describes an invocation of
// method UploadPartCopy on an instance of MockS3API.
type S3APIUploadPartCopyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.UploadPartCopyInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.UploadPartCopyOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIUploadPartCopyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIUploadPartCopyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockS3Uploader is a mock implementation of the s3Uploader interface (from
// the package github.com/sourcegraph/sourcegraph/internal/uploadstore) used
// for unit testing.
type MockS3Uploader struct {
	// UploadFunc is an instance of a mock function object controlling the
	// behavior of the method Upload.
	UploadFunc *S3UploaderUploadFunc
}

// NewMockS3Uploader creates a new mock of the s3Uploader interface. All
// methods return zero values for all results, unless overwritten.
func NewMockS3Uploader() *MockS3Uploader {
	return &MockS3Uploader{
		UploadFunc: &S3UploaderUploadFunc{
			defaultHook: func(context.Context, *s3.PutObjectInput) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockS3Uploader creates a new mock of the s3Uploader interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockS3Uploader() *MockS3Uploader {
	return &MockS3Uploader{
		UploadFunc: &S3UploaderUploadFunc{
			defaultHook: func(context.Context, *s3.PutObjectInput) error {
				panic("unexpected invocation of MockS3Uploader.Upload")
			},
		},
	}
}

// surrogateMockS3Uploader is a copy of the s3Uploader interface (from the
// package github.com/sourcegraph/sourcegraph/internal/uploadstore). It is
// redefined here as it is unexported in the source package.
type surrogateMockS3Uploader interface {
	Upload(context.Context, *s3.PutObjectInput) error
}

// NewMockS3UploaderFrom creates a new mock of the MockS3Uploader interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockS3UploaderFrom(i surrogateMockS3Uploader) *MockS3Uploader {
	return &MockS3Uploader{
		UploadFunc: &S3UploaderUploadFunc{
			defaultHook: i.Upload,
		},
	}
}

// S3UploaderUploadFunc describes the behavior when the Upload method of the
// parent MockS3Uploader instance is invoked.
type S3UploaderUploadFunc struct {
	defaultHook func(context.Context, *s3.PutObjectInput) error
	hooks       []func(context.Context, *s3.PutObjectInput) error
	history     []S3UploaderUploadFuncCall
	mutex       sync.Mutex
}

// Upload delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockS3Uploader) Upload(v0 context.Context, v1 *s3.PutObjectInput) error {
	r0 := m.UploadFunc.nextHook()(v0, v1)
	m.UploadFunc.appendCall(S3UploaderUploadFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Upload method of the
// parent MockS3Uploader instance is invoked and the hook queue is empty.
func (f *S3UploaderUploadFunc) SetDefaultHook(hook func(context.Context, *s3.PutObjectInput) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Upload method of the parent MockS3Uploader instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3UploaderUploadFunc) PushHook(hook func(context.Context, *s3.PutObjectInput) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *S3UploaderUploadFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *s3.PutObjectInput) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *S3UploaderUploadFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *s3.PutObjectInput) error {
		return r0
	})
}

func (f *S3UploaderUploadFunc) nextHook() func(context.Context, *s3.PutObjectInput) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3UploaderUploadFunc) appendCall(r0 S3UploaderUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3UploaderUploadFuncCall objects describing
// the invocations of this function.
func (f *S3UploaderUploadFunc) History() []S3UploaderUploadFuncCall {
	f.mutex.Lock()
	history := make([]S3UploaderUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3UploaderUploadFuncCall is an object that describes an invocation of
// method Upload on an instance of MockS3Uploader.
type S3UploaderUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.PutObjectInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3UploaderUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3UploaderUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
