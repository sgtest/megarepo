// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CampaignDetailsPage viewerCanAdminister: false viewing existing 1`] = `
<CampaignDetailsPage
  campaignName="c"
  deleteCampaign={[Function]}
  fetchCampaignByNamespace={[Function]}
  history="[History]"
  isLightTheme={true}
  location="[Location path=/]"
  namespaceID="namespace123"
  queryChangesetCountsOverTime={[Function]}
  setBreadcrumb={[Function]}
  telemetryService={
    Object {
      "log": [Function],
      "logViewEvent": [Function],
    }
  }
  useBreadcrumb={[Function]}
>
  <PageTitle
    title="n"
  />
  <CampaignHeader
    actionSection={
      <CampaignDetailsActionSection
        campaignClosed={false}
        campaignID="c"
        campaignNamespaceURL="/users/alice"
        deleteCampaign={[Function]}
        history="[History]"
      />
    }
    className="test-campaign-details-page"
    name="n"
    namespace={
      Object {
        "namespaceName": "alice",
        "url": "/users/alice",
      }
    }
  >
    <PageHeader
      actions={
        <CampaignDetailsActionSection
          campaignClosed={false}
          campaignID="c"
          campaignNamespaceURL="/users/alice"
          deleteCampaign={[Function]}
          history="[History]"
        />
      }
      className="test-campaign-details-page"
      icon={
        Object {
          "$$typeof": Symbol(react.memo),
          "compare": null,
          "type": [Function],
        }
      }
      title={
        <React.Fragment>
          <AnchorLink
            to="/users/alice/campaigns"
          >
            alice
          </AnchorLink>
           / 
          n
           
          <sup>
            <span
              className="badge badge-merged text-uppercase"
            >
              Beta
            </span>
          </sup>
        </React.Fragment>
      }
    >
      <div
        className="page-header d-flex flex-wrap align-items-center test-campaign-details-page"
      >
        <h1
          className="flex-grow-1"
        >
          <Memo(ImageAutoAdjustIcon)
            className="icon-inline page-header__icon"
          />
           
          <AnchorLink
            to="/users/alice/campaigns"
          >
            <a
              href="/users/alice/campaigns"
            >
              alice
            </a>
          </AnchorLink>
           / 
          n
           
          <sup>
            <span
              className="badge badge-merged text-uppercase"
            >
              Beta
            </span>
          </sup>
        </h1>
        <CampaignDetailsActionSection
          campaignClosed={false}
          campaignID="c"
          campaignNamespaceURL="/users/alice"
          deleteCampaign={[Function]}
          history="[History]"
        >
          <AnchorLink
            className="btn btn-outline-danger test-campaigns-close-btn"
            data-tooltip="View a preview of all changes that will happen when you close this campaign."
            to="//close"
          >
            <a
              className="btn btn-outline-danger test-campaigns-close-btn"
              data-tooltip="View a preview of all changes that will happen when you close this campaign."
              href="//close"
            >
              <Memo(DeleteIcon)
                className="icon-inline"
              />
               Close
            </a>
          </AnchorLink>
        </CampaignDetailsActionSection>
      </div>
    </PageHeader>
  </CampaignHeader>
  <CampaignInfoByline
    className="mb-3"
    createdAt="2020-01-01"
    initialApplier={
      Object {
        "url": "/users/alice",
        "username": "alice",
      }
    }
    lastAppliedAt="2020-01-01"
    lastApplier={
      Object {
        "url": "/users/bob",
        "username": "bob",
      }
    }
  >
    <div
      className="mb-3"
    >
      <span
        className="text-muted"
      >
        Created 
        <Timestamp
          date="2020-01-01"
        >
          <span
            className="timestamp"
            data-tooltip="2020-01-01"
          >
            in almost 14 years
          </span>
        </Timestamp>
         by
         
        <AnchorLink
          to="/users/alice"
        >
          <a
            href="/users/alice"
          >
            alice
          </a>
        </AnchorLink>
      </span>
      <span
        className="mx-2 text-muted"
      >
        |
      </span>
      <span
        className="text-muted"
      >
        Updated 
        <Timestamp
          date="2020-01-01"
        >
          <span
            className="timestamp"
            data-tooltip="2020-01-01"
          >
            in almost 14 years
          </span>
        </Timestamp>
         by
         
        <AnchorLink
          to="/users/bob"
        >
          <a
            href="/users/bob"
          >
            bob
          </a>
        </AnchorLink>
      </span>
    </div>
  </CampaignInfoByline>
  <CampaignStatsCard
    className="mb-3"
    closedAt={null}
    stats={
      Object {
        "closed": 0,
        "merged": 0,
        "open": 8,
        "total": 10,
        "unpublished": 2,
      }
    }
  >
    <div
      className="card mb-3"
    >
      <div
        className="card-body p-3"
      >
        <div
          className="d-flex flex-wrap justify-content-between align-items-center"
        >
          <div
            className="d-flex align-items-center flex-grow-1"
          >
            <h2
              className="m-0 mr-3"
            >
              <CampaignStateBadge
                isClosed={false}
              >
                <span
                  className="badge badge-success text-uppercase"
                >
                  Open
                </span>
              </CampaignStateBadge>
            </h2>
            <h1
              className="d-inline mb-0"
            >
              <Memo(ProgressCheckIcon)
                className="icon-inline mr-2 text-muted"
              />
            </h1>
             
            <span
              className="lead"
            >
              0
              % complete
            </span>
          </div>
          <CampaignStatsTotalAction
            count={10}
          >
            <div
              className="m-0 mr-3 flex-grow-0 flex-shrink-0 text-nowrap d-flex flex-column align-items-center justify-content-center"
            >
              <span
                className="campaign-stats-card__changesets-pill"
              >
                <span
                  className="badge badge-pill badge-secondary"
                >
                  10
                </span>
              </span>
              <span
                className="text-muted"
              >
                changesets
              </span>
            </div>
          </CampaignStatsTotalAction>
          <ChangesetStatusUnpublished
            className="flex-grow-0 flex-shrink-0 mx-3"
            label={
              <span
                className="text-muted"
              >
                2
                 unpublished
              </span>
            }
          >
            <div
              className="m-0 text-nowrap d-flex flex-column align-items-center justify-content-center text-muted flex-grow-0 flex-shrink-0 mx-3"
            >
              <Memo(SourceBranchIcon) />
              <span
                className="text-muted"
              >
                2
                 unpublished
              </span>
            </div>
          </ChangesetStatusUnpublished>
          <ChangesetStatusOpen
            className="flex-grow-0 flex-shrink-0 mx-3"
            label={
              <span
                className="text-muted"
              >
                8
                 open
              </span>
            }
          >
            <div
              className="m-0 text-nowrap d-flex flex-column align-items-center justify-content-center text-success flex-grow-0 flex-shrink-0 mx-3"
            >
              <Memo(SourcePullIcon) />
              <span
                className="text-muted"
              >
                8
                 open
              </span>
            </div>
          </ChangesetStatusOpen>
          <ChangesetStatusClosed
            className="flex-grow-0 flex-shrink-0 mx-3"
            label={
              <span
                className="text-muted"
              >
                0
                 closed
              </span>
            }
          >
            <div
              className="m-0 text-nowrap d-flex flex-column align-items-center justify-content-center text-danger flex-grow-0 flex-shrink-0 mx-3"
            >
              <Memo(SourcePullIcon) />
              <span
                className="text-muted"
              >
                0
                 closed
              </span>
            </div>
          </ChangesetStatusClosed>
          <ChangesetStatusMerged
            className="flex-grow-0 flex-shrink-0 ml-3"
            label={
              <span
                className="text-muted"
              >
                0
                 merged
              </span>
            }
          >
            <div
              className="m-0 text-nowrap d-flex flex-column align-items-center justify-content-center text-merged flex-grow-0 flex-shrink-0 ml-3"
            >
              <Memo(SourceMergeIcon) />
              <span
                className="text-muted"
              >
                0
                 merged
              </span>
            </div>
          </ChangesetStatusMerged>
        </div>
      </div>
    </div>
  </CampaignStatsCard>
  <CampaignDescription
    description="d"
    history="[History]"
  >
    <div
      className=""
    >
      <div
        className="pb-3"
      >
        <Markdown
          dangerousInnerHTML="<p>d</p>
"
          history="[History]"
        >
          <div
            className="markdown"
            dangerouslySetInnerHTML={
              Object {
                "__html": "<p>d</p>
",
              }
            }
            onClick={[Function]}
          />
        </Markdown>
      </div>
    </div>
  </CampaignDescription>
  <CampaignTabs
    campaign={
      Object {
        "__typename": "Campaign",
        "branch": "awesome-branch",
        "changesets": Object {
          "stats": Object {
            "closed": 0,
            "merged": 0,
            "open": 8,
            "total": 10,
            "unpublished": 2,
          },
          "totalCount": 0,
        },
        "closedAt": null,
        "createdAt": "2020-01-01",
        "description": "d",
        "diffStat": Object {
          "added": 5,
          "changed": 3,
          "deleted": 2,
        },
        "id": "c",
        "initialApplier": Object {
          "url": "/users/alice",
          "username": "alice",
        },
        "lastAppliedAt": "2020-01-01",
        "lastApplier": Object {
          "url": "/users/bob",
          "username": "bob",
        },
        "name": "n",
        "namespace": Object {
          "namespaceName": "alice",
          "url": "/users/alice",
        },
        "updatedAt": "2020-01-01",
        "url": "/users/alice/campaigns/c",
        "viewerCanAdminister": false,
      }
    }
    history="[History]"
    isLightTheme={true}
    location="[Location path=/]"
    queryChangesetCountsOverTime={[Function]}
    telemetryService={
      Object {
        "log": [Function],
        "logViewEvent": [Function],
      }
    }
  >
    <ul
      className="nav nav-tabs mb-2"
    >
      <li
        className="nav-item"
      >
        <a
          className="nav-link active"
          href=""
          onClick={[Function]}
        >
          <Memo(SourceBranchIcon)
            className="icon-inline text-muted mr-1"
          />
           Changesets
        </a>
      </li>
      <li
        className="nav-item test-campaigns-chart-tab"
      >
        <a
          className="nav-link"
          href=""
          onClick={[Function]}
        >
          <Memo(ChartLineVariantIcon)
            className="icon-inline text-muted mr-1"
          />
           Burndown chart
        </a>
      </li>
    </ul>
    <CampaignChangesets
      campaignID="c"
      history="[History]"
      isLightTheme={true}
      location="[Location path=/]"
      telemetryService={
        Object {
          "log": [Function],
          "logViewEvent": [Function],
        }
      }
      viewerCanAdminister={false}
    >
      <div
        className="d-flex justify-content-end"
      >
        <ChangesetFilterRow
          history="[History]"
          location="[Location path=/]"
          onFiltersChange={[Function]}
        >
          <div
            className="form-inline m-0"
          >
            <ChangesetFilter
              className="mr-2"
              label="Status"
              onChange={[Function]}
              values={
                Array [
                  "UNPUBLISHED",
                  "ERRORED",
                  "PROCESSING",
                  "OPEN",
                  "CLOSED",
                  "MERGED",
                  "DELETED",
                ]
              }
            >
              <select
                className="form-control mr-2"
                onChange={[Function]}
              >
                <option
                  value=""
                >
                  Status
                </option>
                <option
                  key="UNPUBLISHED"
                  value="UNPUBLISHED"
                >
                  Unpublished
                </option>
                <option
                  key="ERRORED"
                  value="ERRORED"
                >
                  Errored
                </option>
                <option
                  key="PROCESSING"
                  value="PROCESSING"
                >
                  Processing
                </option>
                <option
                  key="OPEN"
                  value="OPEN"
                >
                  Open
                </option>
                <option
                  key="CLOSED"
                  value="CLOSED"
                >
                  Closed
                </option>
                <option
                  key="MERGED"
                  value="MERGED"
                >
                  Merged
                </option>
                <option
                  key="DELETED"
                  value="DELETED"
                >
                  Deleted
                </option>
              </select>
            </ChangesetFilter>
            <ChangesetFilter
              className="mr-2"
              label="Check state"
              onChange={[Function]}
              values={
                Array [
                  "PENDING",
                  "PASSED",
                  "FAILED",
                ]
              }
            >
              <select
                className="form-control mr-2"
                onChange={[Function]}
              >
                <option
                  value=""
                >
                  Check state
                </option>
                <option
                  key="PENDING"
                  value="PENDING"
                >
                  Pending
                </option>
                <option
                  key="PASSED"
                  value="PASSED"
                >
                  Passed
                </option>
                <option
                  key="FAILED"
                  value="FAILED"
                >
                  Failed
                </option>
              </select>
            </ChangesetFilter>
            <ChangesetFilter
              label="Review state"
              onChange={[Function]}
              values={
                Array [
                  "APPROVED",
                  "CHANGES_REQUESTED",
                  "PENDING",
                  "COMMENTED",
                  "DISMISSED",
                ]
              }
            >
              <select
                className="form-control"
                onChange={[Function]}
              >
                <option
                  value=""
                >
                  Review state
                </option>
                <option
                  key="APPROVED"
                  value="APPROVED"
                >
                  Approved
                </option>
                <option
                  key="CHANGES_REQUESTED"
                  value="CHANGES_REQUESTED"
                >
                  Changes requested
                </option>
                <option
                  key="PENDING"
                  value="PENDING"
                >
                  Pending
                </option>
                <option
                  key="COMMENTED"
                  value="COMMENTED"
                >
                  Commented
                </option>
                <option
                  key="DISMISSED"
                  value="DISMISSED"
                >
                  Dismissed
                </option>
              </select>
            </ChangesetFilter>
          </div>
        </ChangesetFilterRow>
      </div>
      <div
        className="list-group position-relative"
      >
        <FilteredConnection
          className="mt-2"
          defaultFirst={15}
          headComponent={[Function]}
          hideSearch={true}
          history="[History]"
          listClassName="campaign-changesets__grid mb-3"
          listComponent="div"
          location="[Location path=/]"
          nodeComponent={[Function]}
          nodeComponentProps={
            Object {
              "extensionInfo": Object {
                "extensionsController": undefined,
                "hoverifier": Object {
                  "hoverState": Object {
                    "actionsOrError": undefined,
                    "highlightedRange": undefined,
                    "hoverOverlayProps": undefined,
                    "hoveredTokenElement": undefined,
                    "selectedPosition": undefined,
                  },
                  "hoverStateUpdates": "[Subject]",
                  "hoverify": [Function],
                  "unsubscribe": [Function],
                },
              },
              "history": "[History]",
              "isLightTheme": true,
              "location": "[Location path=/]",
              "queryExternalChangesetWithFileDiffs": undefined,
              "viewerCanAdminister": false,
            }
          }
          noun="changeset"
          pluralNoun="changesets"
          queryConnection={[Function]}
          useURLQuery={true}
        >
          <div
            className="filtered-connection test-filtered-connection filtered-connection--noncompact mt-2"
          >
            <span
              className="filtered-connection__loader test-filtered-connection__loader"
            >
              <LoadingSpinner
                className="icon-inline"
              >
                <div
                  className="loading-spinner icon-inline"
                />
              </LoadingSpinner>
            </span>
          </div>
        </FilteredConnection>
      </div>
    </CampaignChangesets>
  </CampaignTabs>
</CampaignDetailsPage>
`;

exports[`CampaignDetailsPage viewerCanAdminister: true viewing existing 1`] = `
<CampaignDetailsPage
  campaignName="c"
  deleteCampaign={[Function]}
  fetchCampaignByNamespace={[Function]}
  history="[History]"
  isLightTheme={true}
  location="[Location path=/]"
  namespaceID="namespace123"
  queryChangesetCountsOverTime={[Function]}
  setBreadcrumb={[Function]}
  telemetryService={
    Object {
      "log": [Function],
      "logViewEvent": [Function],
    }
  }
  useBreadcrumb={[Function]}
>
  <PageTitle
    title="n"
  />
  <CampaignHeader
    actionSection={
      <CampaignDetailsActionSection
        campaignClosed={false}
        campaignID="c"
        campaignNamespaceURL="/users/alice"
        deleteCampaign={[Function]}
        history="[History]"
      />
    }
    className="test-campaign-details-page"
    name="n"
    namespace={
      Object {
        "namespaceName": "alice",
        "url": "/users/alice",
      }
    }
  >
    <PageHeader
      actions={
        <CampaignDetailsActionSection
          campaignClosed={false}
          campaignID="c"
          campaignNamespaceURL="/users/alice"
          deleteCampaign={[Function]}
          history="[History]"
        />
      }
      className="test-campaign-details-page"
      icon={
        Object {
          "$$typeof": Symbol(react.memo),
          "compare": null,
          "type": [Function],
        }
      }
      title={
        <React.Fragment>
          <AnchorLink
            to="/users/alice/campaigns"
          >
            alice
          </AnchorLink>
           / 
          n
           
          <sup>
            <span
              className="badge badge-merged text-uppercase"
            >
              Beta
            </span>
          </sup>
        </React.Fragment>
      }
    >
      <div
        className="page-header d-flex flex-wrap align-items-center test-campaign-details-page"
      >
        <h1
          className="flex-grow-1"
        >
          <Memo(ImageAutoAdjustIcon)
            className="icon-inline page-header__icon"
          />
           
          <AnchorLink
            to="/users/alice/campaigns"
          >
            <a
              href="/users/alice/campaigns"
            >
              alice
            </a>
          </AnchorLink>
           / 
          n
           
          <sup>
            <span
              className="badge badge-merged text-uppercase"
            >
              Beta
            </span>
          </sup>
        </h1>
        <CampaignDetailsActionSection
          campaignClosed={false}
          campaignID="c"
          campaignNamespaceURL="/users/alice"
          deleteCampaign={[Function]}
          history="[History]"
        >
          <AnchorLink
            className="btn btn-outline-danger test-campaigns-close-btn"
            data-tooltip="View a preview of all changes that will happen when you close this campaign."
            to="//close"
          >
            <a
              className="btn btn-outline-danger test-campaigns-close-btn"
              data-tooltip="View a preview of all changes that will happen when you close this campaign."
              href="//close"
            >
              <Memo(DeleteIcon)
                className="icon-inline"
              />
               Close
            </a>
          </AnchorLink>
        </CampaignDetailsActionSection>
      </div>
    </PageHeader>
  </CampaignHeader>
  <CampaignInfoByline
    className="mb-3"
    createdAt="2020-01-01"
    initialApplier={
      Object {
        "url": "/users/alice",
        "username": "alice",
      }
    }
    lastAppliedAt="2020-01-01"
    lastApplier={
      Object {
        "url": "/users/bob",
        "username": "bob",
      }
    }
  >
    <div
      className="mb-3"
    >
      <span
        className="text-muted"
      >
        Created 
        <Timestamp
          date="2020-01-01"
        >
          <span
            className="timestamp"
            data-tooltip="2020-01-01"
          >
            in almost 14 years
          </span>
        </Timestamp>
         by
         
        <AnchorLink
          to="/users/alice"
        >
          <a
            href="/users/alice"
          >
            alice
          </a>
        </AnchorLink>
      </span>
      <span
        className="mx-2 text-muted"
      >
        |
      </span>
      <span
        className="text-muted"
      >
        Updated 
        <Timestamp
          date="2020-01-01"
        >
          <span
            className="timestamp"
            data-tooltip="2020-01-01"
          >
            in almost 14 years
          </span>
        </Timestamp>
         by
         
        <AnchorLink
          to="/users/bob"
        >
          <a
            href="/users/bob"
          >
            bob
          </a>
        </AnchorLink>
      </span>
    </div>
  </CampaignInfoByline>
  <CampaignStatsCard
    className="mb-3"
    closedAt={null}
    stats={
      Object {
        "closed": 0,
        "merged": 0,
        "open": 8,
        "total": 10,
        "unpublished": 2,
      }
    }
  >
    <div
      className="card mb-3"
    >
      <div
        className="card-body p-3"
      >
        <div
          className="d-flex flex-wrap justify-content-between align-items-center"
        >
          <div
            className="d-flex align-items-center flex-grow-1"
          >
            <h2
              className="m-0 mr-3"
            >
              <CampaignStateBadge
                isClosed={false}
              >
                <span
                  className="badge badge-success text-uppercase"
                >
                  Open
                </span>
              </CampaignStateBadge>
            </h2>
            <h1
              className="d-inline mb-0"
            >
              <Memo(ProgressCheckIcon)
                className="icon-inline mr-2 text-muted"
              />
            </h1>
             
            <span
              className="lead"
            >
              0
              % complete
            </span>
          </div>
          <CampaignStatsTotalAction
            count={10}
          >
            <div
              className="m-0 mr-3 flex-grow-0 flex-shrink-0 text-nowrap d-flex flex-column align-items-center justify-content-center"
            >
              <span
                className="campaign-stats-card__changesets-pill"
              >
                <span
                  className="badge badge-pill badge-secondary"
                >
                  10
                </span>
              </span>
              <span
                className="text-muted"
              >
                changesets
              </span>
            </div>
          </CampaignStatsTotalAction>
          <ChangesetStatusUnpublished
            className="flex-grow-0 flex-shrink-0 mx-3"
            label={
              <span
                className="text-muted"
              >
                2
                 unpublished
              </span>
            }
          >
            <div
              className="m-0 text-nowrap d-flex flex-column align-items-center justify-content-center text-muted flex-grow-0 flex-shrink-0 mx-3"
            >
              <Memo(SourceBranchIcon) />
              <span
                className="text-muted"
              >
                2
                 unpublished
              </span>
            </div>
          </ChangesetStatusUnpublished>
          <ChangesetStatusOpen
            className="flex-grow-0 flex-shrink-0 mx-3"
            label={
              <span
                className="text-muted"
              >
                8
                 open
              </span>
            }
          >
            <div
              className="m-0 text-nowrap d-flex flex-column align-items-center justify-content-center text-success flex-grow-0 flex-shrink-0 mx-3"
            >
              <Memo(SourcePullIcon) />
              <span
                className="text-muted"
              >
                8
                 open
              </span>
            </div>
          </ChangesetStatusOpen>
          <ChangesetStatusClosed
            className="flex-grow-0 flex-shrink-0 mx-3"
            label={
              <span
                className="text-muted"
              >
                0
                 closed
              </span>
            }
          >
            <div
              className="m-0 text-nowrap d-flex flex-column align-items-center justify-content-center text-danger flex-grow-0 flex-shrink-0 mx-3"
            >
              <Memo(SourcePullIcon) />
              <span
                className="text-muted"
              >
                0
                 closed
              </span>
            </div>
          </ChangesetStatusClosed>
          <ChangesetStatusMerged
            className="flex-grow-0 flex-shrink-0 ml-3"
            label={
              <span
                className="text-muted"
              >
                0
                 merged
              </span>
            }
          >
            <div
              className="m-0 text-nowrap d-flex flex-column align-items-center justify-content-center text-merged flex-grow-0 flex-shrink-0 ml-3"
            >
              <Memo(SourceMergeIcon) />
              <span
                className="text-muted"
              >
                0
                 merged
              </span>
            </div>
          </ChangesetStatusMerged>
        </div>
      </div>
    </div>
  </CampaignStatsCard>
  <CampaignDescription
    description="d"
    history="[History]"
  >
    <div
      className=""
    >
      <div
        className="pb-3"
      >
        <Markdown
          dangerousInnerHTML="<p>d</p>
"
          history="[History]"
        >
          <div
            className="markdown"
            dangerouslySetInnerHTML={
              Object {
                "__html": "<p>d</p>
",
              }
            }
            onClick={[Function]}
          />
        </Markdown>
      </div>
    </div>
  </CampaignDescription>
  <CampaignTabs
    campaign={
      Object {
        "__typename": "Campaign",
        "branch": "awesome-branch",
        "changesets": Object {
          "stats": Object {
            "closed": 0,
            "merged": 0,
            "open": 8,
            "total": 10,
            "unpublished": 2,
          },
          "totalCount": 0,
        },
        "closedAt": null,
        "createdAt": "2020-01-01",
        "description": "d",
        "diffStat": Object {
          "added": 5,
          "changed": 3,
          "deleted": 2,
        },
        "id": "c",
        "initialApplier": Object {
          "url": "/users/alice",
          "username": "alice",
        },
        "lastAppliedAt": "2020-01-01",
        "lastApplier": Object {
          "url": "/users/bob",
          "username": "bob",
        },
        "name": "n",
        "namespace": Object {
          "namespaceName": "alice",
          "url": "/users/alice",
        },
        "updatedAt": "2020-01-01",
        "url": "/users/alice/campaigns/c",
        "viewerCanAdminister": true,
      }
    }
    history="[History]"
    isLightTheme={true}
    location="[Location path=/]"
    queryChangesetCountsOverTime={[Function]}
    telemetryService={
      Object {
        "log": [Function],
        "logViewEvent": [Function],
      }
    }
  >
    <ul
      className="nav nav-tabs mb-2"
    >
      <li
        className="nav-item"
      >
        <a
          className="nav-link active"
          href=""
          onClick={[Function]}
        >
          <Memo(SourceBranchIcon)
            className="icon-inline text-muted mr-1"
          />
           Changesets
        </a>
      </li>
      <li
        className="nav-item test-campaigns-chart-tab"
      >
        <a
          className="nav-link"
          href=""
          onClick={[Function]}
        >
          <Memo(ChartLineVariantIcon)
            className="icon-inline text-muted mr-1"
          />
           Burndown chart
        </a>
      </li>
    </ul>
    <CampaignChangesets
      campaignID="c"
      history="[History]"
      isLightTheme={true}
      location="[Location path=/]"
      telemetryService={
        Object {
          "log": [Function],
          "logViewEvent": [Function],
        }
      }
      viewerCanAdminister={true}
    >
      <div
        className="d-flex justify-content-end"
      >
        <ChangesetFilterRow
          history="[History]"
          location="[Location path=/]"
          onFiltersChange={[Function]}
        >
          <div
            className="form-inline m-0"
          >
            <ChangesetFilter
              className="mr-2"
              label="Status"
              onChange={[Function]}
              values={
                Array [
                  "UNPUBLISHED",
                  "ERRORED",
                  "PROCESSING",
                  "OPEN",
                  "CLOSED",
                  "MERGED",
                  "DELETED",
                ]
              }
            >
              <select
                className="form-control mr-2"
                onChange={[Function]}
              >
                <option
                  value=""
                >
                  Status
                </option>
                <option
                  key="UNPUBLISHED"
                  value="UNPUBLISHED"
                >
                  Unpublished
                </option>
                <option
                  key="ERRORED"
                  value="ERRORED"
                >
                  Errored
                </option>
                <option
                  key="PROCESSING"
                  value="PROCESSING"
                >
                  Processing
                </option>
                <option
                  key="OPEN"
                  value="OPEN"
                >
                  Open
                </option>
                <option
                  key="CLOSED"
                  value="CLOSED"
                >
                  Closed
                </option>
                <option
                  key="MERGED"
                  value="MERGED"
                >
                  Merged
                </option>
                <option
                  key="DELETED"
                  value="DELETED"
                >
                  Deleted
                </option>
              </select>
            </ChangesetFilter>
            <ChangesetFilter
              className="mr-2"
              label="Check state"
              onChange={[Function]}
              values={
                Array [
                  "PENDING",
                  "PASSED",
                  "FAILED",
                ]
              }
            >
              <select
                className="form-control mr-2"
                onChange={[Function]}
              >
                <option
                  value=""
                >
                  Check state
                </option>
                <option
                  key="PENDING"
                  value="PENDING"
                >
                  Pending
                </option>
                <option
                  key="PASSED"
                  value="PASSED"
                >
                  Passed
                </option>
                <option
                  key="FAILED"
                  value="FAILED"
                >
                  Failed
                </option>
              </select>
            </ChangesetFilter>
            <ChangesetFilter
              label="Review state"
              onChange={[Function]}
              values={
                Array [
                  "APPROVED",
                  "CHANGES_REQUESTED",
                  "PENDING",
                  "COMMENTED",
                  "DISMISSED",
                ]
              }
            >
              <select
                className="form-control"
                onChange={[Function]}
              >
                <option
                  value=""
                >
                  Review state
                </option>
                <option
                  key="APPROVED"
                  value="APPROVED"
                >
                  Approved
                </option>
                <option
                  key="CHANGES_REQUESTED"
                  value="CHANGES_REQUESTED"
                >
                  Changes requested
                </option>
                <option
                  key="PENDING"
                  value="PENDING"
                >
                  Pending
                </option>
                <option
                  key="COMMENTED"
                  value="COMMENTED"
                >
                  Commented
                </option>
                <option
                  key="DISMISSED"
                  value="DISMISSED"
                >
                  Dismissed
                </option>
              </select>
            </ChangesetFilter>
          </div>
        </ChangesetFilterRow>
      </div>
      <div
        className="list-group position-relative"
      >
        <FilteredConnection
          className="mt-2"
          defaultFirst={15}
          headComponent={[Function]}
          hideSearch={true}
          history="[History]"
          listClassName="campaign-changesets__grid mb-3"
          listComponent="div"
          location="[Location path=/]"
          nodeComponent={[Function]}
          nodeComponentProps={
            Object {
              "extensionInfo": Object {
                "extensionsController": undefined,
                "hoverifier": Object {
                  "hoverState": Object {
                    "actionsOrError": undefined,
                    "highlightedRange": undefined,
                    "hoverOverlayProps": undefined,
                    "hoveredTokenElement": undefined,
                    "selectedPosition": undefined,
                  },
                  "hoverStateUpdates": "[Subject]",
                  "hoverify": [Function],
                  "unsubscribe": [Function],
                },
              },
              "history": "[History]",
              "isLightTheme": true,
              "location": "[Location path=/]",
              "queryExternalChangesetWithFileDiffs": undefined,
              "viewerCanAdminister": true,
            }
          }
          noun="changeset"
          pluralNoun="changesets"
          queryConnection={[Function]}
          useURLQuery={true}
        >
          <div
            className="filtered-connection test-filtered-connection filtered-connection--noncompact mt-2"
          >
            <span
              className="filtered-connection__loader test-filtered-connection__loader"
            >
              <LoadingSpinner
                className="icon-inline"
              >
                <div
                  className="loading-spinner icon-inline"
                />
              </LoadingSpinner>
            </span>
          </div>
        </FilteredConnection>
      </div>
    </CampaignChangesets>
  </CampaignTabs>
</CampaignDetailsPage>
`;
