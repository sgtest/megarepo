/* eslint-disable @typescript-eslint/consistent-type-definitions */
/* This is an autogenerated file. Do not edit this file directly! */
export interface WebGraphQlOperations {
    CurrentAuthState: /* src/auth.ts */ (variables: CurrentAuthStateVariables) => CurrentAuthStateResult
    RepositoryID: /* src/enterprise/campaigns/detail/AddChangesetForm.tsx */ (
        variables: RepositoryIDVariables
    ) => RepositoryIDResult
    CreateChangeset: /* src/enterprise/campaigns/detail/AddChangesetForm.tsx */ (
        variables: CreateChangesetVariables
    ) => CreateChangesetResult
    AddChangeSetToCampaign: /* src/enterprise/campaigns/detail/AddChangesetForm.tsx */ (
        variables: AddChangeSetToCampaignVariables
    ) => AddChangeSetToCampaignResult
    UpdateCampaign: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: UpdateCampaignVariables
    ) => UpdateCampaignResult
    CreateCampaign: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: CreateCampaignVariables
    ) => CreateCampaignResult
    RetryCampaignChangesets: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: RetryCampaignChangesetsVariables
    ) => RetryCampaignChangesetsResult
    PublishCampaignChangesets: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: PublishCampaignChangesetsVariables
    ) => PublishCampaignChangesetsResult
    CloseCampaign: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: CloseCampaignVariables
    ) => CloseCampaignResult
    DeleteCampaign: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: DeleteCampaignVariables
    ) => DeleteCampaignResult
    CampaignByID: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: CampaignByIDVariables
    ) => CampaignByIDResult
    PatchSetByID: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: PatchSetByIDVariables
    ) => PatchSetByIDResult
    CampaignChangesets: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: CampaignChangesetsVariables
    ) => CampaignChangesetsResult
    CampaignPatches: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: CampaignPatchesVariables
    ) => CampaignPatchesResult
    PatchSetPatches: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: PatchSetPatchesVariables
    ) => PatchSetPatchesResult
    PublishChangeset: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: PublishChangesetVariables
    ) => PublishChangesetResult
    SyncChangeset: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: SyncChangesetVariables
    ) => SyncChangesetResult
    ExternalChangesetFileDiffs: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: ExternalChangesetFileDiffsVariables
    ) => ExternalChangesetFileDiffsResult
    PatchFileDiffs: /* src/enterprise/campaigns/detail/backend.ts */ (
        variables: PatchFileDiffsVariables
    ) => PatchFileDiffsResult
    Campaigns: /* src/enterprise/campaigns/global/list/backend.ts */ (variables: CampaignsVariables) => CampaignsResult
    CampaignsCount: /* src/enterprise/campaigns/global/list/backend.ts */ (
        variables: CampaignsCountVariables
    ) => CampaignsCountResult
    LsifUploads: /* src/enterprise/codeintel/backend.tsx */ (variables: LsifUploadsVariables) => LsifUploadsResult
    LsifUploadsWithRepo: /* src/enterprise/codeintel/backend.tsx */ (
        variables: LsifUploadsWithRepoVariables
    ) => LsifUploadsWithRepoResult
    LsifUpload: /* src/enterprise/codeintel/backend.tsx */ (variables: LsifUploadVariables) => LsifUploadResult
    DeleteLsifUpload: /* src/enterprise/codeintel/backend.tsx */ (
        variables: DeleteLsifUploadVariables
    ) => DeleteLsifUploadResult
    LsifIndexes: /* src/enterprise/codeintel/backend.tsx */ (variables: LsifIndexesVariables) => LsifIndexesResult
    LsifIndexesWithRepo: /* src/enterprise/codeintel/backend.tsx */ (
        variables: LsifIndexesWithRepoVariables
    ) => LsifIndexesWithRepoResult
    LsifIndex: /* src/enterprise/codeintel/backend.tsx */ (variables: LsifIndexVariables) => LsifIndexResult
    DeleteLsifIndex: /* src/enterprise/codeintel/backend.tsx */ (
        variables: DeleteLsifIndexVariables
    ) => DeleteLsifIndexResult
    ProductPlans: /* src/enterprise/dotcom/productPlans/ProductPlanFormControl.tsx */ (
        variables: ProductPlansVariables
    ) => ProductPlansResult
    ExploreExtensions: /* src/enterprise/extensions/explore/ExtensionsExploreSection.tsx */ (
        variables: ExploreExtensionsVariables
    ) => ExploreExtensionsResult
    UpdateRegistryExtension: /* src/enterprise/extensions/extension/RegistryExtensionManagePage.tsx */ (
        variables: UpdateRegistryExtensionVariables
    ) => UpdateRegistryExtensionResult
    PublishRegistryExtension: /* src/enterprise/extensions/extension/RegistryExtensionNewReleasePage.tsx */ (
        variables: PublishRegistryExtensionVariables
    ) => PublishRegistryExtensionResult
    CreateRegistryExtension: /* src/enterprise/extensions/registry/RegistryNewExtensionPage.tsx */ (
        variables: CreateRegistryExtensionVariables
    ) => CreateRegistryExtensionResult
    DeleteRegistryExtension: /* src/enterprise/extensions/registry/backend.ts */ (
        variables: DeleteRegistryExtensionVariables
    ) => DeleteRegistryExtensionResult
    ViewerRegistryPublishers: /* src/enterprise/extensions/registry/backend.ts */ (
        variables: ViewerRegistryPublishersVariables
    ) => ViewerRegistryPublishersResult
    ViewerNamespaces: /* src/enterprise/namespaces/backend.ts */ (
        variables: ViewerNamespacesVariables
    ) => ViewerNamespacesResult
    LsifUploadsForRepo: /* src/enterprise/repo/settings/backend.tsx */ (
        variables: LsifUploadsForRepoVariables
    ) => LsifUploadsForRepoResult
    LsifUploadForRepo: /* src/enterprise/repo/settings/backend.tsx */ (
        variables: LsifUploadForRepoVariables
    ) => LsifUploadForRepoResult
    DeleteLsifUploadForRepo: /* src/enterprise/repo/settings/backend.tsx */ (
        variables: DeleteLsifUploadForRepoVariables
    ) => DeleteLsifUploadForRepoResult
    LsifIndexesForRepo: /* src/enterprise/repo/settings/backend.tsx */ (
        variables: LsifIndexesForRepoVariables
    ) => LsifIndexesForRepoResult
    LsifIndexForRepo: /* src/enterprise/repo/settings/backend.tsx */ (
        variables: LsifIndexForRepoVariables
    ) => LsifIndexForRepoResult
    DeleteLsifIndexForRepo: /* src/enterprise/repo/settings/backend.tsx */ (
        variables: DeleteLsifIndexForRepoVariables
    ) => DeleteLsifIndexForRepoResult
    SearchResultsStats: /* src/enterprise/search/stats/backend.ts */ (
        variables: SearchResultsStatsVariables
    ) => SearchResultsStatsResult
    AuthProviders: /* src/enterprise/site-admin/SiteAdminAuthenticationProvidersPage.tsx */ (
        variables: AuthProvidersVariables
    ) => AuthProvidersResult
    ExternalAccounts: /* src/enterprise/site-admin/SiteAdminExternalAccountsPage.tsx */ (
        variables: ExternalAccountsVariables
    ) => ExternalAccountsResult
    SiteAdminRegistryExtensions: /* src/enterprise/site-admin/SiteAdminRegistryExtensionsPage.tsx */ (
        variables: SiteAdminRegistryExtensionsVariables
    ) => SiteAdminRegistryExtensionsResult
    SiteAdminLsifUpload: /* src/enterprise/site-admin/backend.ts */ (
        variables: SiteAdminLsifUploadVariables
    ) => SiteAdminLsifUploadResult
    SetCustomerBilling: /* src/enterprise/site-admin/dotcom/customers/SiteAdminCustomerBillingLink.tsx */ (
        variables: SetCustomerBillingVariables
    ) => SetCustomerBillingResult
    Customers: /* src/enterprise/site-admin/dotcom/customers/SiteAdminCustomersPage.tsx */ (
        variables: CustomersVariables
    ) => CustomersResult
    CreateProductSubscription: /* src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminCreateProductSubscriptionPage.tsx */ (
        variables: CreateProductSubscriptionVariables
    ) => CreateProductSubscriptionResult
    ProductSubscriptionAccounts: /* src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminCreateProductSubscriptionPage.tsx */ (
        variables: ProductSubscriptionAccountsVariables
    ) => ProductSubscriptionAccountsResult
    GenerateProductLicenseForSubscription: /* src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminGenerateProductLicenseForSubscriptionForm.tsx */ (
        variables: GenerateProductLicenseForSubscriptionVariables
    ) => GenerateProductLicenseForSubscriptionResult
    DotComProductLicenses: /* src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductLicensesPage.tsx */ (
        variables: DotComProductLicensesVariables
    ) => DotComProductLicensesResult
    SetProductSubscriptionBilling: /* src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionBillingLink.tsx */ (
        variables: SetProductSubscriptionBillingVariables
    ) => SetProductSubscriptionBillingResult
    DotComProductSubscription: /* src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionPage.tsx */ (
        variables: DotComProductSubscriptionVariables
    ) => DotComProductSubscriptionResult
    ProductLicenses: /* src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionPage.tsx */ (
        variables: ProductLicensesVariables
    ) => ProductLicensesResult
    ArchiveProductSubscription: /* src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionPage.tsx */ (
        variables: ArchiveProductSubscriptionVariables
    ) => ArchiveProductSubscriptionResult
    ProductSubscriptionsDotCom: /* src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionsPage.tsx */ (
        variables: ProductSubscriptionsDotComVariables
    ) => ProductSubscriptionsDotComResult
    ProductLicenseInfo: /* src/enterprise/site-admin/productSubscription/ProductSubscriptionStatus.tsx */ (
        variables: ProductLicenseInfoVariables
    ) => ProductLicenseInfoResult
    PreviewProductSubscriptionInvoice: /* src/enterprise/user/productSubscriptions/NewProductSubscriptionPaymentSection.tsx */ (
        variables: PreviewProductSubscriptionInvoiceVariables
    ) => PreviewProductSubscriptionInvoiceResult
    ProductSubscriptionOnEditPage: /* src/enterprise/user/productSubscriptions/UserSubscriptionsEditProductSubscriptionPage.tsx */ (
        variables: ProductSubscriptionOnEditPageVariables
    ) => ProductSubscriptionOnEditPageResult
    UpdatePaidProductSubscription: /* src/enterprise/user/productSubscriptions/UserSubscriptionsEditProductSubscriptionPage.tsx */ (
        variables: UpdatePaidProductSubscriptionVariables
    ) => UpdatePaidProductSubscriptionResult
    CreatePaidProductSubscription: /* src/enterprise/user/productSubscriptions/UserSubscriptionsNewProductSubscriptionPage.tsx */ (
        variables: CreatePaidProductSubscriptionVariables
    ) => CreatePaidProductSubscriptionResult
    ProductSubscription: /* src/enterprise/user/productSubscriptions/UserSubscriptionsProductSubscriptionPage.tsx */ (
        variables: ProductSubscriptionVariables
    ) => ProductSubscriptionResult
    ProductSubscriptions: /* src/enterprise/user/productSubscriptions/UserSubscriptionsProductSubscriptionsPage.tsx */ (
        variables: ProductSubscriptionsVariables
    ) => ProductSubscriptionsResult
    DeleteExternalAccount: /* src/enterprise/user/settings/ExternalAccountNode.tsx */ (
        variables: DeleteExternalAccountVariables
    ) => DeleteExternalAccountResult
    UserExternalAccounts: /* src/enterprise/user/settings/UserSettingsExternalAccountsPage.tsx */ (
        variables: UserExternalAccountsVariables
    ) => UserExternalAccountsResult
    RegistryExtensions: /* src/extensions/ExtensionsList.tsx */ (
        variables: RegistryExtensionsVariables
    ) => RegistryExtensionsResult
    RegistryExtension: /* src/extensions/extension/ExtensionArea.tsx */ (
        variables: RegistryExtensionVariables
    ) => RegistryExtensionResult
    SubmitSurvey: /* src/marketing/backend.tsx */ (variables: SubmitSurveyVariables) => SubmitSurveyResult
    FetchSurveyResponses: /* src/marketing/backend.tsx */ (
        variables: FetchSurveyResponsesVariables
    ) => FetchSurveyResponsesResult
    FetchAllUsersWithSurveyResponses: /* src/marketing/backend.tsx */ (
        variables: FetchAllUsersWithSurveyResponsesVariables
    ) => FetchAllUsersWithSurveyResponsesResult
    FetchSurveyResponseAggregates: /* src/marketing/backend.tsx */ (
        variables: FetchSurveyResponseAggregatesVariables
    ) => FetchSurveyResponseAggregatesResult
    RequestTrial: /* src/marketing/backend.tsx */ (variables: RequestTrialVariables) => RequestTrialResult
    StatusMessages: /* src/nav/StatusMessagesNavItem.tsx */ (variables: StatusMessagesVariables) => StatusMessagesResult
    createOrganization: /* src/org/backend.tsx */ (variables: createOrganizationVariables) => createOrganizationResult
    removeUserFromOrganization: /* src/org/backend.tsx */ (
        variables: removeUserFromOrganizationVariables
    ) => removeUserFromOrganizationResult
    UpdateOrganization: /* src/org/backend.tsx */ (variables: UpdateOrganizationVariables) => UpdateOrganizationResult
    Organization: /* src/org/area/OrgArea.tsx */ (variables: OrganizationVariables) => OrganizationResult
    RespondToOrganizationInvitation: /* src/org/area/OrgInvitationPage.tsx */ (
        variables: RespondToOrganizationInvitationVariables
    ) => RespondToOrganizationInvitationResult
    OrganizationMembers: /* src/org/area/OrgMembersPage.tsx */ (
        variables: OrganizationMembersVariables
    ) => OrganizationMembersResult
    InviteUserToOrganization: /* src/org/invite/InviteForm.tsx */ (
        variables: InviteUserToOrganizationVariables
    ) => InviteUserToOrganizationResult
    AddUserToOrganization: /* src/org/invite/InviteForm.tsx */ (
        variables: AddUserToOrganizationVariables
    ) => AddUserToOrganizationResult
    ViewerSettings: /* src/platform/context.ts */ (variables: ViewerSettingsVariables) => ViewerSettingsResult
    RepositoryGitRefs: /* src/repo/GitReference.tsx */ (
        variables: RepositoryGitRefsVariables
    ) => RepositoryGitRefsResult
    FetchCommits: /* src/repo/RepoRevisionSidebarCommits.tsx */ (variables: FetchCommitsVariables) => FetchCommitsResult
    RepositoriesForPopover: /* src/repo/RepositoriesPopover.tsx */ (
        variables: RepositoriesForPopoverVariables
    ) => RepositoriesForPopoverResult
    RepositoryGitCommit: /* src/repo/RevisionsPopover.tsx */ (
        variables: RepositoryGitCommitVariables
    ) => RepositoryGitCommitResult
    RepositoryRedirect: /* src/repo/backend.ts */ (variables: RepositoryRedirectVariables) => RepositoryRedirectResult
    ResolveRev: /* src/repo/backend.ts */ (variables: ResolveRevVariables) => ResolveRevResult
    HighlightedFile: /* src/repo/backend.ts */ (variables: HighlightedFileVariables) => HighlightedFileResult
    FileExternalLinks: /* src/repo/backend.ts */ (variables: FileExternalLinksVariables) => FileExternalLinksResult
    TreeEntries: /* src/repo/backend.ts */ (variables: TreeEntriesVariables) => TreeEntriesResult
    Blob: /* src/repo/blob/BlobPage.tsx */ (variables: BlobVariables) => BlobResult
    RepositoryGitBranchesOverview: /* src/repo/branches/RepositoryBranchesOverviewPage.tsx */ (
        variables: RepositoryGitBranchesOverviewVariables
    ) => RepositoryGitBranchesOverviewResult
    RepositoryCommit: /* src/repo/commit/RepositoryCommitPage.tsx */ (
        variables: RepositoryCommitVariables
    ) => RepositoryCommitResult
    RepositoryGitCommits: /* src/repo/commits/RepositoryCommitsPage.tsx */ (
        variables: RepositoryGitCommitsVariables
    ) => RepositoryGitCommitsResult
    RepositoryComparisonCommits: /* src/repo/compare/RepositoryCompareCommitsPage.tsx */ (
        variables: RepositoryComparisonCommitsVariables
    ) => RepositoryComparisonCommitsResult
    RepositoryComparisonDiff: /* src/repo/compare/RepositoryCompareDiffPage.tsx */ (
        variables: RepositoryComparisonDiffVariables
    ) => RepositoryComparisonDiffResult
    RepositoryComparison: /* src/repo/compare/RepositoryCompareOverviewPage.tsx */ (
        variables: RepositoryComparisonVariables
    ) => RepositoryComparisonResult
    ExploreRepositories: /* src/repo/explore/RepositoriesExploreSection.tsx */ (
        variables: ExploreRepositoriesVariables
    ) => ExploreRepositoriesResult
    RepositoryTextSearchIndex: /* src/repo/settings/RepoSettingsIndexPage.tsx */ (
        variables: RepositoryTextSearchIndexVariables
    ) => RepositoryTextSearchIndexResult
    Repository: /* src/repo/settings/backend.tsx */ (variables: RepositoryVariables) => RepositoryResult
    RepositoryContributors: /* src/repo/stats/RepositoryStatsContributorsPage.tsx */ (
        variables: RepositoryContributorsVariables
    ) => RepositoryContributorsResult
    TreeCommits: /* src/repo/tree/TreePage.tsx */ (variables: TreeCommitsVariables) => TreeCommitsResult
    Search: /* src/search/backend.tsx */ (variables: SearchVariables) => SearchResult
    RepoGroups: /* src/search/backend.tsx */ (variables: RepoGroupsVariables) => RepoGroupsResult
    SearchSuggestions: /* src/search/backend.tsx */ (variables: SearchSuggestionsVariables) => SearchSuggestionsResult
    ReposByQuery: /* src/search/backend.tsx */ (variables: ReposByQueryVariables) => ReposByQueryResult
    savedSearches: /* src/search/backend.tsx */ (variables: savedSearchesVariables) => savedSearchesResult
    SavedSearch: /* src/search/backend.tsx */ (variables: SavedSearchVariables) => SavedSearchResult
    CreateSavedSearch: /* src/search/backend.tsx */ (variables: CreateSavedSearchVariables) => CreateSavedSearchResult
    UpdateSavedSearch: /* src/search/backend.tsx */ (variables: UpdateSavedSearchVariables) => UpdateSavedSearchResult
    DeleteSavedSearch: /* src/search/backend.tsx */ (variables: DeleteSavedSearchVariables) => DeleteSavedSearchResult
    highlightCode: /* src/search/backend.tsx */ (variables: highlightCodeVariables) => highlightCodeResult
    ManyReposWarning: /* src/search/backend.tsx */ (variables: ManyReposWarningVariables) => ManyReposWarningResult
    SettingsCascade: /* src/settings/SettingsArea.tsx */ (variables: SettingsCascadeVariables) => SettingsCascadeResult
    DeleteAccessToken: /* src/settings/tokens/AccessTokenNode.tsx */ (
        variables: DeleteAccessTokenVariables
    ) => DeleteAccessTokenResult
    SiteFlags: /* src/site/backend.tsx */ (variables: SiteFlagsVariables) => SiteFlagsResult
    addExternalService: /* src/site-admin/SiteAdminAddExternalServicePage.tsx */ (
        variables: addExternalServiceVariables
    ) => addExternalServiceResult
    UpdateExternalService: /* src/site-admin/SiteAdminExternalServicePage.tsx */ (
        variables: UpdateExternalServiceVariables
    ) => UpdateExternalServiceResult
    ExternalService: /* src/site-admin/SiteAdminExternalServicePage.tsx */ (
        variables: ExternalServiceVariables
    ) => ExternalServiceResult
    DeleteExternalService: /* src/site-admin/SiteAdminExternalServicesPage.tsx */ (
        variables: DeleteExternalServiceVariables
    ) => DeleteExternalServiceResult
    ExternalServices: /* src/site-admin/SiteAdminExternalServicesPage.tsx */ (
        variables: ExternalServicesVariables
    ) => ExternalServicesResult
    SiteAdminAccessTokens: /* src/site-admin/SiteAdminTokensPage.tsx */ (
        variables: SiteAdminAccessTokensVariables
    ) => SiteAdminAccessTokensResult
    Users: /* src/site-admin/backend.tsx */ (variables: UsersVariables) => UsersResult
    Organizations: /* src/site-admin/backend.tsx */ (variables: OrganizationsVariables) => OrganizationsResult
    Repositories: /* src/site-admin/backend.tsx */ (variables: RepositoriesVariables) => RepositoriesResult
    UpdateMirrorRepository: /* src/site-admin/backend.tsx */ (
        variables: UpdateMirrorRepositoryVariables
    ) => UpdateMirrorRepositoryResult
    CheckMirrorRepositoryConnection: /* src/site-admin/backend.tsx */ (
        variables: CheckMirrorRepositoryConnectionVariables
    ) => CheckMirrorRepositoryConnectionResult
    ScheduleRepositoryPermissionsSync: /* src/site-admin/backend.tsx */ (
        variables: ScheduleRepositoryPermissionsSyncVariables
    ) => ScheduleRepositoryPermissionsSyncResult
    ScheduleUserPermissionsSync: /* src/site-admin/backend.tsx */ (
        variables: ScheduleUserPermissionsSyncVariables
    ) => ScheduleUserPermissionsSyncResult
    UserUsageStatistics: /* src/site-admin/backend.tsx */ (
        variables: UserUsageStatisticsVariables
    ) => UserUsageStatisticsResult
    SiteUsageStatistics: /* src/site-admin/backend.tsx */ (
        variables: SiteUsageStatisticsVariables
    ) => SiteUsageStatisticsResult
    Site: /* src/site-admin/backend.tsx */ (variables: SiteVariables) => SiteResult
    AllConfig: /* src/site-admin/backend.tsx */ (variables: AllConfigVariables) => AllConfigResult
    UpdateSiteConfiguration: /* src/site-admin/backend.tsx */ (
        variables: UpdateSiteConfigurationVariables
    ) => UpdateSiteConfigurationResult
    ReloadSite: /* src/site-admin/backend.tsx */ (variables: ReloadSiteVariables) => ReloadSiteResult
    SetUserIsSiteAdmin: /* src/site-admin/backend.tsx */ (
        variables: SetUserIsSiteAdminVariables
    ) => SetUserIsSiteAdminResult
    RandomizeUserPassword: /* src/site-admin/backend.tsx */ (
        variables: RandomizeUserPasswordVariables
    ) => RandomizeUserPasswordResult
    DeleteUser: /* src/site-admin/backend.tsx */ (variables: DeleteUserVariables) => DeleteUserResult
    CreateUser: /* src/site-admin/backend.tsx */ (variables: CreateUserVariables) => CreateUserResult
    DeleteOrganization: /* src/site-admin/backend.tsx */ (
        variables: DeleteOrganizationVariables
    ) => DeleteOrganizationResult
    SiteUpdateCheck: /* src/site-admin/backend.tsx */ (variables: SiteUpdateCheckVariables) => SiteUpdateCheckResult
    SiteMonitoringStatistics: /* src/site-admin/backend.tsx */ (
        variables: SiteMonitoringStatisticsVariables
    ) => SiteMonitoringStatisticsResult
    Overview: /* src/site-admin/overview/SiteAdminOverviewPage.tsx */ (variables: OverviewVariables) => OverviewResult
    WAUs: /* src/site-admin/overview/SiteAdminOverviewPage.tsx */ (variables: WAUsVariables) => WAUsResult
    Symbols: /* src/symbols/backend.tsx */ (variables: SymbolsVariables) => SymbolsResult
    SiteAdminActivationStatus: /* src/tracking/withActivation.tsx */ (
        variables: SiteAdminActivationStatusVariables
    ) => SiteAdminActivationStatusResult
    ActivationStatus: /* src/tracking/withActivation.tsx */ (
        variables: ActivationStatusVariables
    ) => ActivationStatusResult
    LinksForRepositories: /* src/tracking/withActivation.tsx */ (
        variables: LinksForRepositoriesVariables
    ) => LinksForRepositoriesResult
    UserEventLogs: /* src/user/UserEventLogsPage.tsx */ (variables: UserEventLogsVariables) => UserEventLogsResult
    User: /* src/user/area/UserArea.tsx */ (variables: UserVariables) => UserResult
    updateUser: /* src/user/settings/backend.tsx */ (variables: updateUserVariables) => updateUserResult
    updatePassword: /* src/user/settings/backend.tsx */ (variables: updatePasswordVariables) => updatePasswordResult
    SetUserEmailVerified: /* src/user/settings/backend.tsx */ (
        variables: SetUserEmailVerifiedVariables
    ) => SetUserEmailVerifiedResult
    logUserEvent: /* src/user/settings/backend.tsx */ (variables: logUserEventVariables) => logUserEventResult
    logEvent: /* src/user/settings/backend.tsx */ (variables: logEventVariables) => logEventResult
    CreateAccessToken: /* src/user/settings/accessTokens/UserSettingsCreateAccessTokenPage.tsx */ (
        variables: CreateAccessTokenVariables
    ) => CreateAccessTokenResult
    AccessTokens: /* src/user/settings/accessTokens/UserSettingsTokensPage.tsx */ (
        variables: AccessTokensVariables
    ) => AccessTokensResult
    AddUserEmail: /* src/user/settings/emails/AddUserEmailForm.tsx */ (
        variables: AddUserEmailVariables
    ) => AddUserEmailResult
    RemoveUserEmail: /* src/user/settings/emails/UserSettingsEmailsPage.tsx */ (
        variables: RemoveUserEmailVariables
    ) => RemoveUserEmailResult
    UserEmails: /* src/user/settings/emails/UserSettingsEmailsPage.tsx */ (
        variables: UserEmailsVariables
    ) => UserEmailsResult
    UserForProfilePage: /* src/user/settings/profile/UserSettingsProfilePage.tsx */ (
        variables: UserForProfilePageVariables
    ) => UserForProfilePageResult
}
export type CurrentAuthStateVariables = {}
export type CurrentAuthStateResult = {
    currentUser: {
        __typename: 'User'
        id: string
        databaseID: number
        username: string
        avatarURL: string | null
        email: string
        displayName: string | null
        siteAdmin: boolean
        tags: string[]
        url: string
        settingsURL: string | null
        organizations: {
            nodes: {
                id: string
                name: string
                displayName: string | null
                url: string
                settingsURL: string | null
            }[]
        }
        session: {
            canSignOut: boolean
        }
        viewerCanAdminister: boolean
    } | null
}
export type FileDiffHunkRangeFields = {
    startLine: number
    lines: number
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type FileDiffFields = {
    __typename: 'FileDiff'
    oldPath: string | null
    oldFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newPath: string | null
    mostRelevantFile: {
        __typename: string
        url: string
    }
    hunks: {
        oldRange: {
            startLine: number
            lines: number
        }
        oldNoNewlineAt: boolean
        newRange: {
            startLine: number
            lines: number
        }
        section: string | null
        highlight: {
            aborted: boolean
            lines: {
                kind: 'ADDED' | 'UNCHANGED' | 'DELETED'
                html: string
            }[]
        }
    }[]
    stat: {
        added: number
        changed: number
        deleted: number
    }
    internalID: string
}
export type RepositoryIDVariables = {
    repoName: string
}
export type RepositoryIDResult = {
    repository: {
        id: string
    } | null
}
export type CreateChangesetVariables = {
    repositoryID: string
    externalID: string
}
export type CreateChangesetResult = {
    createChangesets: {
        id: string
    }[]
}
export type AddChangeSetToCampaignVariables = {
    campaignID: string
    changesets: string[]
}
export type AddChangeSetToCampaignResult = {
    addChangesetsToCampaign: {
        id: string
    }
}
export type CampaignFields = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields1
}
export type DiffStatFields1 = {
    added: number
    changed: number
    deleted: number
}
export type PatchSetFields = {
    __typename: 'PatchSet'
    id: string
    diffStat: DiffStatFields2
    patches: {
        totalCount: number
    }
}
export type DiffStatFields2 = {
    added: number
    changed: number
    deleted: number
}
export type UpdateCampaignVariables = {
    update: {
        id: string
        name: string | null
        branch: string | null
        description: string | null
        patchSet: string | null
    }
}
export type UpdateCampaignResult = {
    updateCampaign: CampaignFields1
}
export type CampaignFields1 = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields3
}
export type DiffStatFields3 = {
    added: number
    changed: number
    deleted: number
}
export type CreateCampaignVariables = {
    input: {
        namespace: string
        name: string
        description: string | null
        branch: string | null
        patchSet: string | null
    }
}
export type CreateCampaignResult = {
    createCampaign: {
        id: string
        url: string
    }
}
export type RetryCampaignChangesetsVariables = {
    campaign: string
}
export type RetryCampaignChangesetsResult = {
    retryCampaignChangesets: CampaignFields2
}
export type CampaignFields2 = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields4
}
export type DiffStatFields4 = {
    added: number
    changed: number
    deleted: number
}
export type PublishCampaignChangesetsVariables = {
    campaign: string
}
export type PublishCampaignChangesetsResult = {
    publishCampaignChangesets: CampaignFields3
}
export type CampaignFields3 = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields5
}
export type DiffStatFields5 = {
    added: number
    changed: number
    deleted: number
}
export type CloseCampaignVariables = {
    campaign: string
    closeChangesets: boolean
}
export type CloseCampaignResult = {
    closeCampaign: {
        id: string
    }
}
export type DeleteCampaignVariables = {
    campaign: string
    closeChangesets: boolean
}
export type DeleteCampaignResult = {
    deleteCampaign: {
        alwaysNil: string | null
    } | null
}
export type CampaignByIDVariables = {
    campaign: string
}
export type CampaignByIDResult = {
    node:
        | ({
              __typename: string
          } & CampaignFields4)
        | null
}
export type CampaignFields4 = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields6
}
export type DiffStatFields6 = {
    added: number
    changed: number
    deleted: number
}
export type PatchSetByIDVariables = {
    patchSet: string
}
export type PatchSetByIDResult = {
    node:
        | ({
              __typename: string
          } & PatchSetFields1)
        | null
}
export type PatchSetFields1 = {
    __typename: 'PatchSet'
    id: string
    diffStat: DiffStatFields7
    patches: {
        totalCount: number
    }
}
export type DiffStatFields7 = {
    added: number
    changed: number
    deleted: number
}
export type CampaignChangesetsVariables = {
    campaign: string
    first: number | null
    state: ('OPEN' | 'CLOSED' | 'MERGED' | 'DELETED') | null
    reviewState: ('APPROVED' | 'CHANGES_REQUESTED' | 'PENDING' | 'COMMENTED' | 'DISMISSED') | null
    checkState: ('PENDING' | 'PASSED' | 'FAILED') | null
}
export type CampaignChangesetsResult = {
    node:
        | ({
              __typename: string
          } & {
              changesets: {
                  totalCount: number
                  nodes: ({
                      __typename: string
                      state: 'OPEN' | 'CLOSED' | 'MERGED' | 'DELETED'
                      createdAt: any
                      updatedAt: any
                      nextSyncAt: any | null
                  } & {
                      id: string
                  } & {
                      id: string
                      title: string
                      body: string
                      reviewState: 'APPROVED' | 'CHANGES_REQUESTED' | 'PENDING' | 'COMMENTED' | 'DISMISSED'
                      checkState: ('PENDING' | 'PASSED' | 'FAILED') | null
                      labels: {
                          text: string
                          description: string | null
                          color: string
                      }[]
                      repository: {
                          id: string
                          name: string
                          url: string
                      }
                      externalURL: {
                          url: string
                      }
                      externalID: string
                      diff: {
                          fileDiffs: {
                              diffStat: DiffStatFields8
                          }
                      } | null
                      diffStat: {
                          added: number
                          changed: number
                          deleted: number
                      } | null
                  })[]
              }
          })
        | null
}
export type DiffStatFields8 = {
    added: number
    changed: number
    deleted: number
}
export type CampaignPatchesVariables = {
    campaign: string
    first: number | null
}
export type CampaignPatchesResult = {
    node:
        | ({
              __typename: string
          } & {
              patches: {
                  totalCount: number
                  nodes: ({
                      __typename: string
                  } & {
                      id: string
                  } & {
                      id: string
                      repository: {
                          id: string
                          name: string
                          url: string
                      }
                      publishable: boolean
                      publicationEnqueued: boolean
                      diff: {
                          fileDiffs: {
                              diffStat: DiffStatFields9
                          }
                      }
                  })[]
              }
          })
        | null
}
export type DiffStatFields9 = {
    added: number
    changed: number
    deleted: number
}
export type PatchSetPatchesVariables = {
    patchSet: string
    first: number | null
}
export type PatchSetPatchesResult = {
    node:
        | ({
              __typename: string
          } & {
              patches: {
                  totalCount: number
                  nodes: ({
                      __typename: string
                      id: string
                  } & {
                      repository: {
                          id: string
                          name: string
                          url: string
                      }
                      publishable: boolean
                      publicationEnqueued: boolean
                      diff: {
                          fileDiffs: {
                              diffStat: DiffStatFields10
                          }
                      }
                  })[]
              }
          })
        | null
}
export type DiffStatFields10 = {
    added: number
    changed: number
    deleted: number
}
export type PublishChangesetVariables = {
    patch: string
}
export type PublishChangesetResult = {
    publishChangeset: {
        alwaysNil: string | null
    }
}
export type SyncChangesetVariables = {
    changeset: string
}
export type SyncChangesetResult = {
    syncChangeset: {
        alwaysNil: string | null
    }
}
export type ExternalChangesetFileDiffsVariables = {
    externalChangeset: string
    first: number | null
    after: string | null
    isLightTheme: boolean
}
export type ExternalChangesetFileDiffsResult = {
    node:
        | ({
              __typename: string
          } & {
              diff: {
                  range: {
                      base: GitRefSpecFields
                      head: GitRefSpecFields
                  }
                  fileDiffs: {
                      nodes: FileDiffFields1[]
                      totalCount: number | null
                      pageInfo: {
                          hasNextPage: boolean
                          endCursor: string | null
                      }
                      diffStat: DiffStatFields11
                  }
              } | null
          })
        | null
}
export type GitRefSpecFields = {
    __typename: 'GitRef' | 'GitRevSpecExpr' | 'GitObject'
} & (
    | {
          oid: any
      }
    | {
          target: {
              oid: any
          }
      }
    | {
          object: {
              oid: any
          } | null
      }
)
export type FileDiffFields1 = {
    __typename: 'FileDiff'
    oldPath: string | null
    oldFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newPath: string | null
    mostRelevantFile: {
        __typename: string
        url: string
    }
    hunks: {
        oldRange: {
            startLine: number
            lines: number
        }
        oldNoNewlineAt: boolean
        newRange: {
            startLine: number
            lines: number
        }
        section: string | null
        highlight: {
            aborted: boolean
            lines: {
                kind: 'ADDED' | 'UNCHANGED' | 'DELETED'
                html: string
            }[]
        }
    }[]
    stat: {
        added: number
        changed: number
        deleted: number
    }
    internalID: string
}
export type DiffStatFields11 = {
    added: number
    changed: number
    deleted: number
}
export type PatchFileDiffsVariables = {
    patch: string
    first: number | null
    after: string | null
    isLightTheme: boolean
}
export type PatchFileDiffsResult = {
    node:
        | ({
              __typename: string
          } & {
              diff: {
                  fileDiffs: {
                      nodes: FileDiffFields2[]
                      totalCount: number | null
                      pageInfo: {
                          hasNextPage: boolean
                          endCursor: string | null
                      }
                      diffStat: DiffStatFields12
                  }
              }
          })
        | null
}
export type FileDiffFields2 = {
    __typename: 'FileDiff'
    oldPath: string | null
    oldFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newPath: string | null
    mostRelevantFile: {
        __typename: string
        url: string
    }
    hunks: {
        oldRange: {
            startLine: number
            lines: number
        }
        oldNoNewlineAt: boolean
        newRange: {
            startLine: number
            lines: number
        }
        section: string | null
        highlight: {
            aborted: boolean
            lines: {
                kind: 'ADDED' | 'UNCHANGED' | 'DELETED'
                html: string
            }[]
        }
    }[]
    stat: {
        added: number
        changed: number
        deleted: number
    }
    internalID: string
}
export type DiffStatFields12 = {
    added: number
    changed: number
    deleted: number
}
export type CampaignsVariables = {
    first: number | null
    state: ('OPEN' | 'CLOSED') | null
    hasPatchSet: boolean | null
    viewerCanAdminister: boolean | null
}
export type CampaignsResult = {
    campaigns: {
        nodes: {
            id: string
            name: string
            description: string | null
            url: string
            createdAt: any
            closedAt: any | null
            changesets: {
                totalCount: number
                nodes: {
                    state: 'OPEN' | 'CLOSED' | 'MERGED' | 'DELETED'
                }[]
            }
            patches: {
                totalCount: number
            }
        }[]
        totalCount: number
    }
}
export type CampaignsCountVariables = {}
export type CampaignsCountResult = {
    campaigns: {
        totalCount: number
    }
}
export type LsifUploadsVariables = {
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING') | null
    isLatestForRepo: boolean | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifUploadsResult = {
    lsifUploads: {
        nodes: {
            id: string
            state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
            projectRoot: {
                url: string
                path: string
                repository: {
                    url: string
                    name: string
                }
                commit: {
                    url: string
                    oid: any
                    abbreviatedOID: string
                }
            } | null
            inputCommit: string
            inputRoot: string
            inputIndexer: string
            uploadedAt: any
            startedAt: any | null
            finishedAt: any | null
            placeInQueue: number | null
        }[]
        totalCount: number | null
        pageInfo: {
            endCursor: string | null
            hasNextPage: boolean
        }
    }
}
export type LsifUploadsWithRepoVariables = {
    repository: string
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING') | null
    isLatestForRepo: boolean | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifUploadsWithRepoResult = {
    node:
        | ({
              __typename: string
          } & {
              lsifUploads: {
                  nodes: {
                      id: string
                      state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
                      projectRoot: {
                          url: string
                          path: string
                          repository: {
                              url: string
                              name: string
                          }
                          commit: {
                              url: string
                              oid: any
                              abbreviatedOID: string
                          }
                      } | null
                      inputCommit: string
                      inputRoot: string
                      inputIndexer: string
                      uploadedAt: any
                      startedAt: any | null
                      finishedAt: any | null
                      placeInQueue: number | null
                  }[]
                  totalCount: number | null
                  pageInfo: {
                      endCursor: string | null
                      hasNextPage: boolean
                  }
              }
          })
        | null
}
export type LsifUploadVariables = {
    id: string
}
export type LsifUploadResult = {
    node:
        | ({
              __typename: string
          } & {
              id: string
              projectRoot: {
                  url: string
                  path: string
                  repository: {
                      url: string
                      name: string
                  }
                  commit: {
                      url: string
                      oid: any
                      abbreviatedOID: string
                  }
              } | null
              inputCommit: string
              inputRoot: string
              inputIndexer: string
              state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
              failure: string | null
              uploadedAt: any
              startedAt: any | null
              finishedAt: any | null
              isLatestForRepo: boolean
              placeInQueue: number | null
          })
        | null
}
export type DeleteLsifUploadVariables = {
    id: string
}
export type DeleteLsifUploadResult = {
    deleteLSIFUpload: {
        alwaysNil: string | null
    } | null
}
export type LsifIndexesVariables = {
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED') | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifIndexesResult = {
    lsifIndexes: {
        nodes: {
            id: string
            state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
            projectRoot: {
                url: string
                path: string
                repository: {
                    url: string
                    name: string
                }
                commit: {
                    url: string
                    oid: any
                    abbreviatedOID: string
                }
            } | null
            inputCommit: string
            queuedAt: any
            startedAt: any | null
            finishedAt: any | null
            placeInQueue: number | null
        }[]
        totalCount: number | null
        pageInfo: {
            endCursor: string | null
            hasNextPage: boolean
        }
    }
}
export type LsifIndexesWithRepoVariables = {
    repository: string
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED') | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifIndexesWithRepoResult = {
    node:
        | ({
              __typename: string
          } & {
              lsifIndexes: {
                  nodes: {
                      id: string
                      state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
                      projectRoot: {
                          url: string
                          path: string
                          repository: {
                              url: string
                              name: string
                          }
                          commit: {
                              url: string
                              oid: any
                              abbreviatedOID: string
                          }
                      } | null
                      inputCommit: string
                      queuedAt: any
                      startedAt: any | null
                      finishedAt: any | null
                      placeInQueue: number | null
                  }[]
                  totalCount: number | null
                  pageInfo: {
                      endCursor: string | null
                      hasNextPage: boolean
                  }
              }
          })
        | null
}
export type LsifIndexVariables = {
    id: string
}
export type LsifIndexResult = {
    node:
        | ({
              __typename: string
          } & {
              id: string
              projectRoot: {
                  url: string
                  path: string
                  repository: {
                      url: string
                      name: string
                  }
                  commit: {
                      url: string
                      oid: any
                      abbreviatedOID: string
                  }
              } | null
              inputCommit: string
              state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
              failure: string | null
              queuedAt: any
              startedAt: any | null
              finishedAt: any | null
              placeInQueue: number | null
          })
        | null
}
export type DeleteLsifIndexVariables = {
    id: string
}
export type DeleteLsifIndexResult = {
    deleteLSIFIndex: {
        alwaysNil: string | null
    } | null
}
export type ProductPlansVariables = {}
export type ProductPlansResult = {
    dotcom: {
        productPlans: {
            productPlanID: string
            billingPlanID: string
            name: string
            pricePerUserPerYear: number
            minQuantity: number | null
            maxQuantity: number | null
            tiersMode: string
            planTiers: {
                unitAmount: number
                upTo: number
                flatAmount: number
            }[]
        }[]
    }
}
export type ProductSubscriptionFields = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            verified: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            nameWithBrand: string
        }
        userCount: number
        expiresAt: any
    } | null
    activeLicense: {
        licenseKey: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
    } | null
    createdAt: any
    isArchived: boolean
    url: string
}
export type ExploreExtensionsVariables = {
    first: number | null
    prioritizeExtensionIDs: string[] | null
}
export type ExploreExtensionsResult = {
    extensionRegistry: {
        extensions: {
            nodes: {
                id: string
                extensionIDWithoutRegistry: string
                url: string
                manifest: {
                    description: string | null
                } | null
            }[]
        }
    }
}
export type UpdateRegistryExtensionVariables = {
    extension: string
    name: string | null
}
export type UpdateRegistryExtensionResult = {
    extensionRegistry: {
        updateExtension: {
            extension: {
                url: string
            }
        }
    }
}
export type PublishRegistryExtensionVariables = {
    extensionID: string
    manifest: string
    bundle: string
}
export type PublishRegistryExtensionResult = {
    extensionRegistry: {
        publishExtension: {
            extension: {
                url: string
            }
        }
    }
}
export type CreateRegistryExtensionVariables = {
    publisher: string
    name: string
}
export type CreateRegistryExtensionResult = {
    extensionRegistry: {
        createExtension: {
            extension: {
                id: string
                extensionID: string
                url: string
            }
        }
    }
}
export type DeleteRegistryExtensionVariables = {
    extension: string
}
export type DeleteRegistryExtensionResult = {
    extensionRegistry: {
        deleteExtension: {
            alwaysNil: string | null
        }
    }
}
export type ViewerRegistryPublishersVariables = {}
export type ViewerRegistryPublishersResult = {
    extensionRegistry: {
        viewerPublishers: ({
            __typename: 'User' | 'Org'
        } & (
            | {
                  id: string
                  username: string
              }
            | {
                  id: string
                  name: string
              }
        ))[]
        localExtensionIDPrefix: string | null
    }
}
export type ViewerNamespacesVariables = {}
export type ViewerNamespacesResult = {
    currentUser: {
        __typename: 'User'
        id: string
        namespaceName: string
        url: string
        organizations: {
            nodes: {
                __typename: 'Org'
                id: string
                namespaceName: string
                url: string
            }[]
        }
    } | null
}
export type LsifUploadsForRepoVariables = {
    repository: string
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING') | null
    isLatestForRepo: boolean | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifUploadsForRepoResult = {
    node:
        | ({
              __typename: string
          } & {
              lsifUploads: {
                  nodes: {
                      id: string
                      state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
                      projectRoot: {
                          commit: {
                              abbreviatedOID: string
                              url: string
                          }
                          path: string
                          url: string
                      } | null
                      inputCommit: string
                      inputRoot: string
                      inputIndexer: string
                      uploadedAt: any
                      startedAt: any | null
                      finishedAt: any | null
                      placeInQueue: number | null
                  }[]
                  totalCount: number | null
                  pageInfo: {
                      endCursor: string | null
                      hasNextPage: boolean
                  }
              }
          })
        | null
}
export type LsifUploadForRepoVariables = {
    id: string
}
export type LsifUploadForRepoResult = {
    node:
        | ({
              __typename: string
          } & {
              id: string
              projectRoot: {
                  commit: {
                      oid: any
                      abbreviatedOID: string
                      url: string
                      repository: {
                          name: string
                          url: string
                      }
                  }
                  path: string
                  url: string
              } | null
              inputCommit: string
              inputRoot: string
              inputIndexer: string
              state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
              failure: string | null
              uploadedAt: any
              startedAt: any | null
              finishedAt: any | null
              isLatestForRepo: boolean
              placeInQueue: number | null
          })
        | null
}
export type DeleteLsifUploadForRepoVariables = {
    id: string
}
export type DeleteLsifUploadForRepoResult = {
    deleteLSIFUpload: {
        alwaysNil: string | null
    } | null
}
export type LsifIndexesForRepoVariables = {
    repository: string
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED') | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifIndexesForRepoResult = {
    node:
        | ({
              __typename: string
          } & {
              lsifIndexes: {
                  nodes: {
                      id: string
                      state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
                      projectRoot: {
                          commit: {
                              abbreviatedOID: string
                              url: string
                          }
                          path: string
                          url: string
                      } | null
                      inputCommit: string
                      queuedAt: any
                      startedAt: any | null
                      finishedAt: any | null
                      placeInQueue: number | null
                  }[]
                  totalCount: number | null
                  pageInfo: {
                      endCursor: string | null
                      hasNextPage: boolean
                  }
              }
          })
        | null
}
export type LsifIndexForRepoVariables = {
    id: string
}
export type LsifIndexForRepoResult = {
    node:
        | ({
              __typename: string
          } & {
              id: string
              projectRoot: {
                  commit: {
                      oid: any
                      abbreviatedOID: string
                      url: string
                      repository: {
                          name: string
                          url: string
                      }
                  }
                  path: string
                  url: string
              } | null
              inputCommit: string
              state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
              failure: string | null
              queuedAt: any
              startedAt: any | null
              finishedAt: any | null
              placeInQueue: number | null
          })
        | null
}
export type DeleteLsifIndexForRepoVariables = {
    id: string
}
export type DeleteLsifIndexForRepoResult = {
    deleteLSIFIndex: {
        alwaysNil: string | null
    } | null
}
export type SearchResultsStatsVariables = {
    query: string
}
export type SearchResultsStatsResult = {
    search: {
        results: {
            limitHit: boolean
        }
        stats: {
            languages: {
                name: string
                totalLines: number
            }[]
        }
    } | null
}
export type AuthProviderFields = {
    serviceType: string
    serviceID: string
    clientID: string
    displayName: string
    isBuiltin: boolean
    authenticationURL: string | null
}
export type AuthProvidersVariables = {}
export type AuthProvidersResult = {
    site: {
        authProviders: {
            nodes: AuthProviderFields1[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type AuthProviderFields1 = {
    serviceType: string
    serviceID: string
    clientID: string
    displayName: string
    isBuiltin: boolean
    authenticationURL: string | null
}
export type ExternalAccountsVariables = {
    first: number | null
    user: string | null
    serviceType: string | null
    serviceID: string | null
    clientID: string | null
}
export type ExternalAccountsResult = {
    site: {
        externalAccounts: {
            nodes: ExternalAccountFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type ExternalAccountFields = {
    id: string
    user: {
        id: string
        username: string
    }
    serviceType: string
    serviceID: string
    clientID: string
    accountID: string
    createdAt: any
    updatedAt: any
    refreshURL: string | null
    accountData: any | null
}
export type SiteAdminRegistryExtensionsVariables = {
    first: number | null
    publisher: string | null
    query: string | null
    local: boolean | null
    remote: boolean | null
}
export type SiteAdminRegistryExtensionsResult = {
    extensionRegistry: {
        extensions: {
            nodes: RegistryExtensionFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
            error: string | null
        }
    }
}
export type RegistryExtensionFields = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    publishedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type SiteAdminLsifUploadVariables = {
    id: string
}
export type SiteAdminLsifUploadResult = {
    node:
        | ({
              __typename: string
          } & {
              projectRoot: {
                  commit: {
                      repository: {
                          name: string
                          url: string
                      }
                  }
              } | null
          })
        | null
}
export type SetCustomerBillingVariables = {
    user: string
    billingCustomerID: string | null
}
export type SetCustomerBillingResult = {
    dotcom: {
        setUserBilling: {
            alwaysNil: string | null
        }
    }
}
export type CustomerFields = {
    id: string
    username: string
    displayName: string | null
    urlForSiteAdminBilling: string | null
}
export type CustomersVariables = {
    first: number | null
    query: string | null
}
export type CustomersResult = {
    users: {
        nodes: CustomerFields1[]
        totalCount: number
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type CustomerFields1 = {
    id: string
    username: string
    displayName: string | null
    urlForSiteAdminBilling: string | null
}
export type CreateProductSubscriptionVariables = {
    accountID: string
}
export type CreateProductSubscriptionResult = {
    dotcom: {
        createProductSubscription: {
            urlForSiteAdmin: string | null
        }
    }
}
export type ProductSubscriptionAccountsVariables = {
    first: number | null
    query: string | null
}
export type ProductSubscriptionAccountsResult = {
    users: {
        nodes: {
            id: string
            username: string
            emails: {
                email: string
                verified: boolean
                isPrimary: boolean
            }[]
        }[]
        totalCount: number
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type GenerateProductLicenseForSubscriptionVariables = {
    productSubscriptionID: string
    license: {
        tags: string[]
        userCount: number
        expiresAt: number
    }
}
export type GenerateProductLicenseForSubscriptionResult = {
    dotcom: {
        generateProductLicenseForSubscription: {
            id: string
        }
    }
}
export type ProductLicenseFields = {
    id: string
    subscription: {
        id: string
        name: string
        account: {
            id: string
            username: string
            displayName: string | null
        } | null
        activeLicense: {
            id: string
        } | null
        urlForSiteAdmin: string | null
    }
    licenseKey: string
    info: {
        productNameWithBrand: string
        tags: string[]
        userCount: number
        expiresAt: any
    } | null
    createdAt: any
}
export type DotComProductLicensesVariables = {
    first: number | null
    licenseKeySubstring: string | null
}
export type DotComProductLicensesResult = {
    dotcom: {
        productLicenses: {
            nodes: ProductLicenseFields1[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type ProductLicenseFields1 = {
    id: string
    subscription: {
        id: string
        name: string
        account: {
            id: string
            username: string
            displayName: string | null
        } | null
        activeLicense: {
            id: string
        } | null
        urlForSiteAdmin: string | null
    }
    licenseKey: string
    info: {
        productNameWithBrand: string
        tags: string[]
        userCount: number
        expiresAt: any
    } | null
    createdAt: any
}
export type SetProductSubscriptionBillingVariables = {
    id: string
    billingSubscriptionID: string | null
}
export type SetProductSubscriptionBillingResult = {
    dotcom: {
        setProductSubscriptionBilling: {
            alwaysNil: string | null
        }
    }
}
export type ProductSubscriptionFields1 = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            isPrimary: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            nameWithBrand: string
        }
        userCount: number
        expiresAt: any
    } | null
    activeLicense: {
        id: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
        licenseKey: string
        createdAt: any
    } | null
    createdAt: any
    isArchived: boolean
    urlForSiteAdmin: string | null
}
export type DotComProductSubscriptionVariables = {
    uuid: string
}
export type DotComProductSubscriptionResult = {
    dotcom: {
        productSubscription: {
            id: string
            name: string
            account: {
                id: string
                username: string
                displayName: string | null
                emails: {
                    email: string
                    verified: boolean
                }[]
            } | null
            invoiceItem: {
                plan: {
                    billingPlanID: string
                    name: string
                    nameWithBrand: string
                    pricePerUserPerYear: number
                }
                userCount: number
                expiresAt: any
            } | null
            events: {
                id: string
                date: string
                title: string
                description: string | null
                url: string | null
            }[]
            productLicenses: {
                nodes: {
                    id: string
                    info: {
                        tags: string[]
                        userCount: number
                        expiresAt: any
                    } | null
                    licenseKey: string
                    createdAt: any
                }[]
                totalCount: number
                pageInfo: {
                    hasNextPage: boolean
                }
            }
            createdAt: any
            isArchived: boolean
            url: string
            urlForSiteAdminBilling: string | null
        }
    }
}
export type ProductLicensesVariables = {
    first: number | null
    subscriptionUUID: string
}
export type ProductLicensesResult = {
    dotcom: {
        productSubscription: {
            productLicenses: {
                nodes: ProductLicenseFields2[]
                totalCount: number
                pageInfo: {
                    hasNextPage: boolean
                }
            }
        }
    }
}
export type ProductLicenseFields2 = {
    id: string
    subscription: {
        id: string
        name: string
        account: {
            id: string
            username: string
            displayName: string | null
        } | null
        activeLicense: {
            id: string
        } | null
        urlForSiteAdmin: string | null
    }
    licenseKey: string
    info: {
        productNameWithBrand: string
        tags: string[]
        userCount: number
        expiresAt: any
    } | null
    createdAt: any
}
export type ArchiveProductSubscriptionVariables = {
    id: string
}
export type ArchiveProductSubscriptionResult = {
    dotcom: {
        archiveProductSubscription: {
            alwaysNil: string | null
        }
    }
}
export type ProductSubscriptionsDotComVariables = {
    first: number | null
    account: string | null
    query: string | null
}
export type ProductSubscriptionsDotComResult = {
    dotcom: {
        productSubscriptions: {
            nodes: ProductSubscriptionFields2[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type ProductSubscriptionFields2 = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            isPrimary: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            nameWithBrand: string
        }
        userCount: number
        expiresAt: any
    } | null
    activeLicense: {
        id: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
        licenseKey: string
        createdAt: any
    } | null
    createdAt: any
    isArchived: boolean
    urlForSiteAdmin: string | null
}
export type ProductLicenseInfoVariables = {}
export type ProductLicenseInfoResult = {
    site: {
        productSubscription: {
            productNameWithBrand: string
            actualUserCount: number
            actualUserCountDate: string
            noLicenseWarningUserCount: number | null
            license: {
                tags: string[]
                userCount: number
                expiresAt: any
            } | null
        }
    }
}
export type PreviewProductSubscriptionInvoiceVariables = {
    account: string | null
    subscriptionToUpdate: string | null
    productSubscription: {
        billingPlanID: string
        userCount: number
    }
}
export type PreviewProductSubscriptionInvoiceResult = {
    dotcom: {
        previewProductSubscriptionInvoice: {
            price: number
            prorationDate: string | null
            isDowngradeRequiringManualIntervention: boolean
            beforeInvoiceItem: {
                plan: {
                    billingPlanID: string
                    name: string
                    pricePerUserPerYear: number
                }
                userCount: number
                expiresAt: any
            } | null
            afterInvoiceItem: {
                plan: {
                    billingPlanID: string
                    name: string
                    pricePerUserPerYear: number
                }
                userCount: number
                expiresAt: any
            }
        }
    }
}
export type ProductSubscriptionOnEditPageVariables = {
    uuid: string
}
export type ProductSubscriptionOnEditPageResult = {
    dotcom: {
        productSubscription: ProductSubscriptionFields3
    }
}
export type ProductSubscriptionFields3 = {
    id: string
    name: string
    invoiceItem: {
        plan: {
            billingPlanID: string
        }
        userCount: number
        expiresAt: any
    } | null
    url: string
}
export type UpdatePaidProductSubscriptionVariables = {
    subscriptionID: string
    update: {
        billingPlanID: string
        userCount: number
    }
    paymentToken: string | null
}
export type UpdatePaidProductSubscriptionResult = {
    dotcom: {
        updatePaidProductSubscription: {
            productSubscription: {
                url: string
            }
        }
    }
}
export type CreatePaidProductSubscriptionVariables = {
    accountID: string
    productSubscription: {
        billingPlanID: string
        userCount: number
    }
    paymentToken: string | null
}
export type CreatePaidProductSubscriptionResult = {
    dotcom: {
        createPaidProductSubscription: {
            productSubscription: {
                id: string
                name: string
                url: string
            }
        }
    }
}
export type ProductSubscriptionVariables = {
    uuid: string
}
export type ProductSubscriptionResult = {
    dotcom: {
        productSubscription: ProductSubscriptionFields4
    }
}
export type ProductSubscriptionFields4 = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            verified: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            billingPlanID: string
            name: string
            nameWithBrand: string
            pricePerUserPerYear: number
        }
        userCount: number
        expiresAt: any
    } | null
    events: {
        id: string
        date: string
        title: string
        description: string | null
        url: string | null
    }[]
    activeLicense: {
        licenseKey: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
    } | null
    createdAt: any
    isArchived: boolean
    url: string
    urlForSiteAdmin: string | null
}
export type ProductSubscriptionsVariables = {
    first: number | null
    account: string | null
}
export type ProductSubscriptionsResult = {
    dotcom: {
        productSubscriptions: {
            nodes: ProductSubscriptionFields5[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type ProductSubscriptionFields5 = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            verified: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            nameWithBrand: string
        }
        userCount: number
        expiresAt: any
    } | null
    activeLicense: {
        licenseKey: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
    } | null
    createdAt: any
    isArchived: boolean
    url: string
}
export type ExternalAccountFields1 = {
    id: string
    user: {
        id: string
        username: string
    }
    serviceType: string
    serviceID: string
    clientID: string
    accountID: string
    createdAt: any
    updatedAt: any
    refreshURL: string | null
    accountData: any | null
}
export type DeleteExternalAccountVariables = {
    externalAccount: string
}
export type DeleteExternalAccountResult = {
    deleteExternalAccount: {
        alwaysNil: string | null
    }
}
export type UserExternalAccountsVariables = {
    user: string
    first: number | null
}
export type UserExternalAccountsResult = {
    node: {
        externalAccounts: {
            nodes: ExternalAccountFields2[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type ExternalAccountFields2 = {
    id: string
    user: {
        id: string
        username: string
    }
    serviceType: string
    serviceID: string
    clientID: string
    accountID: string
    createdAt: any
    updatedAt: any
    refreshURL: string | null
    accountData: any | null
}
export type RegistryExtensionFields1 = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type RegistryExtensionsVariables = {
    query: string | null
    prioritizeExtensionIDs: string[]
}
export type RegistryExtensionsResult = {
    extensionRegistry: {
        extensions: {
            nodes: RegistryExtensionFields2[]
            error: string | null
        }
    }
}
export type RegistryExtensionFields2 = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type RegistryExtensionFields3 = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    publishedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type RegistryExtensionVariables = {
    extensionID: string
}
export type RegistryExtensionResult = {
    extensionRegistry: {
        extension: RegistryExtensionFields4 | null
    }
}
export type RegistryExtensionFields4 = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    publishedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type SubmitSurveyVariables = {
    input: {
        email: string | null
        score: number
        reason: string | null
        better: string | null
    }
}
export type SubmitSurveyResult = {
    submitSurvey: {
        alwaysNil: string | null
    } | null
}
export type FetchSurveyResponsesVariables = {}
export type FetchSurveyResponsesResult = {
    surveyResponses: {
        nodes: {
            user: {
                id: string
                username: string
                emails: {
                    email: string
                }[]
            } | null
            email: string | null
            score: number
            reason: string | null
            better: string | null
            createdAt: any
        }[]
        totalCount: number
    }
}
export type FetchAllUsersWithSurveyResponsesVariables = {
    activePeriod: ('TODAY' | 'THIS_WEEK' | 'THIS_MONTH' | 'ALL_TIME') | null
    first: number | null
    query: string | null
}
export type FetchAllUsersWithSurveyResponsesResult = {
    users: {
        nodes: {
            id: string
            username: string
            emails: {
                email: string
            }[]
            surveyResponses: {
                score: number
                reason: string | null
                better: string | null
                createdAt: any
            }[]
            usageStatistics: {
                lastActiveTime: string | null
            }
        }[]
        totalCount: number
    }
}
export type FetchSurveyResponseAggregatesVariables = {}
export type FetchSurveyResponseAggregatesResult = {
    surveyResponses: {
        totalCount: number
        last30DaysCount: number
        averageScore: number
        netPromoterScore: number
    }
}
export type RequestTrialVariables = {
    email: string
}
export type RequestTrialResult = {
    requestTrial: {
        alwaysNil: string | null
    } | null
}
export type StatusMessagesVariables = {}
export type StatusMessagesResult = {
    statusMessages: ({
        __typename: 'CloningProgress' | 'ExternalServiceSyncError' | 'SyncError'
    } & (
        | {
              message: string
          }
        | {
              message: string
          }
        | {
              message: string
              externalService: {
                  id: string
                  displayName: string
              }
          }
    ))[]
}
export type createOrganizationVariables = {
    name: string
    displayName: string | null
}
export type createOrganizationResult = {
    createOrganization: {
        id: string
        name: string
    }
}
export type removeUserFromOrganizationVariables = {
    user: string
    organization: string
}
export type removeUserFromOrganizationResult = {
    removeUserFromOrganization: {
        alwaysNil: string | null
    } | null
}
export type UpdateOrganizationVariables = {
    id: string
    displayName: string | null
}
export type UpdateOrganizationResult = {
    updateOrganization: {
        id: string
    }
}
export type OrganizationVariables = {
    name: string
}
export type OrganizationResult = {
    organization: {
        __typename: 'Org'
        id: string
        name: string
        displayName: string | null
        url: string
        settingsURL: string | null
        viewerPendingInvitation: {
            id: string
            sender: {
                username: string
                displayName: string | null
                avatarURL: string | null
                createdAt: any
            }
            respondURL: string | null
        } | null
        viewerIsMember: boolean
        viewerCanAdminister: boolean
        createdAt: any
    } | null
}
export type RespondToOrganizationInvitationVariables = {
    organizationInvitation: string
    responseType: 'ACCEPT' | 'REJECT'
}
export type RespondToOrganizationInvitationResult = {
    respondToOrganizationInvitation: {
        alwaysNil: string | null
    }
}
export type OrganizationMembersVariables = {
    id: string
}
export type OrganizationMembersResult = {
    node: {
        viewerCanAdminister: boolean
        members: {
            nodes: {
                id: string
                username: string
                displayName: string | null
                avatarURL: string | null
            }[]
            totalCount: number
        }
    } | null
}
export type InviteUserToOrganizationVariables = {
    organization: string
    username: string
}
export type InviteUserToOrganizationResult = {
    inviteUserToOrganization: {
        sentInvitationEmail: boolean
        invitationURL: string
    }
}
export type AddUserToOrganizationVariables = {
    organization: string
    username: string
}
export type AddUserToOrganizationResult = {
    addUserToOrganization: {
        alwaysNil: string | null
    }
}
export type SettingsCascadeFields = {
    subjects: ({
        __typename: string
        latestSettings: {
            id: number
            contents: any
        } | null
        settingsURL: string | null
        viewerCanAdminister: boolean
    } & {
        id: string
        name: string
        displayName: string | null
    } & {
        id: string
        username: string
        displayName: string | null
    } & {
        id: string
        siteID: string
    })[]
    final: string
}
export type ViewerSettingsVariables = {}
export type ViewerSettingsResult = {
    viewerSettings: SettingsCascadeFields1
}
export type SettingsCascadeFields1 = {
    subjects: ({
        __typename: string
        latestSettings: {
            id: number
            contents: any
        } | null
        settingsURL: string | null
        viewerCanAdminister: boolean
    } & {
        id: string
        name: string
        displayName: string | null
    } & {
        id: string
        username: string
        displayName: string | null
    } & {
        id: string
        siteID: string
    })[]
    final: string
}
export type GitRefFields = {
    id: string
    displayName: string
    name: string
    abbrevName: string
    url: string
    target: {
        commit: {
            author: SignatureFields
            committer: SignatureFields | null
            behindAhead: {
                behind: number
                ahead: number
            }
        } | null
    }
}
export type SignatureFields = {
    person: {
        displayName: string
        user: {
            username: string
        } | null
    }
    date: string
}
export type RepositoryGitRefsVariables = {
    repo: string
    first: number | null
    query: string | null
    type: 'GIT_BRANCH' | 'GIT_TAG' | 'GIT_REF_OTHER'
    withBehindAhead: boolean
}
export type RepositoryGitRefsResult = {
    node: {
        gitRefs: {
            nodes: GitRefFields1[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type GitRefFields1 = {
    id: string
    displayName: string
    name: string
    abbrevName: string
    url: string
    target: {
        commit: {
            author: SignatureFields1
            committer: SignatureFields1 | null
            behindAhead: {
                behind: number
                ahead: number
            }
        } | null
    }
}
export type SignatureFields1 = {
    person: {
        displayName: string
        user: {
            username: string
        } | null
    }
    date: string
}
export type FetchCommitsVariables = {
    repo: string
    revision: string
    first: number | null
    currentPath: string | null
    query: string | null
}
export type FetchCommitsResult = {
    node:
        | ({
              __typename: string
          } & {
              commit: {
                  ancestors: {
                      nodes: GitCommitFields[]
                  }
              } | null
          })
        | null
}
export type GitCommitFields = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields2
    committer: SignatureFields2 | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields2 = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type RepositoriesForPopoverVariables = {
    first: number | null
    query: string | null
}
export type RepositoriesForPopoverResult = {
    repositories: {
        nodes: {
            id: string
            name: string
        }[]
        totalCount: number | null
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type RepositoryGitCommitVariables = {
    repo: string
    first: number | null
    revision: string
    query: string | null
}
export type RepositoryGitCommitResult = {
    node:
        | ({
              __typename: string
          } & {
              commit: {
                  ancestors: {
                      nodes: {
                          id: string
                          oid: any
                          abbreviatedOID: string
                          author: {
                              person: {
                                  name: string
                                  avatarURL: string
                              }
                              date: string
                          }
                          subject: string
                      }[]
                      pageInfo: {
                          hasNextPage: boolean
                      }
                  }
              } | null
          })
        | null
}
export type RepositoryRedirectVariables = {
    repoName: string
}
export type RepositoryRedirectResult = {
    repositoryRedirect:
        | ({
              __typename: 'Repository' | 'Redirect'
          } & (
              | {
                    id: string
                    name: string
                    url: string
                    externalURLs: {
                        url: string
                        serviceType: string | null
                    }[]
                    description: string
                    viewerCanAdminister: boolean
                    defaultBranch: {
                        displayName: string
                    } | null
                }
              | {
                    url: string
                }
          ))
        | null
}
export type ResolveRevVariables = {
    repoName: string
    revision: string
}
export type ResolveRevResult = {
    repositoryRedirect:
        | ({
              __typename: 'Repository' | 'Redirect'
          } & (
              | {
                    mirrorInfo: {
                        cloneInProgress: boolean
                        cloneProgress: string | null
                        cloned: boolean
                    }
                    commit: {
                        oid: any
                        tree: {
                            url: string
                        } | null
                    } | null
                    defaultBranch: {
                        abbrevName: string
                    } | null
                }
              | {
                    url: string
                }
          ))
        | null
}
export type HighlightedFileVariables = {
    repoName: string
    commitID: string
    filePath: string
    disableTimeout: boolean
    isLightTheme: boolean
}
export type HighlightedFileResult = {
    repository: {
        commit: {
            file: {
                isDirectory: boolean
                richHTML: string
                highlight: {
                    aborted: boolean
                    html: string
                }
            } | null
        } | null
    } | null
}
export type FileExternalLinksVariables = {
    repoName: string
    revision: string
    filePath: string
}
export type FileExternalLinksResult = {
    repository: {
        commit: {
            file: {
                externalURLs: {
                    url: string
                    serviceType: string | null
                }[]
            } | null
        } | null
    } | null
}
export type TreeEntriesVariables = {
    repoName: string
    revision: string
    commitID: string
    filePath: string
    first: number | null
}
export type TreeEntriesResult = {
    repository: {
        commit: {
            tree: {
                isRoot: boolean
                url: string
                entries: {
                    name: string
                    path: string
                    isDirectory: boolean
                    url: string
                    submodule: {
                        url: string
                        commit: string
                    } | null
                    isSingleChild: boolean
                }[]
            } | null
        } | null
    } | null
}
export type BlobVariables = {
    repoName: string
    commitID: string
    filePath: string
    isLightTheme: boolean
    disableTimeout: boolean
}
export type BlobResult = {
    repository: {
        commit: {
            file: {
                content: string
                richHTML: string
                highlight: {
                    aborted: boolean
                    html: string
                }
            } | null
        } | null
    } | null
}
export type RepositoryGitBranchesOverviewVariables = {
    repo: string
    first: number
    withBehindAhead: boolean
}
export type RepositoryGitBranchesOverviewResult = {
    node: {
        defaultBranch: GitRefFields2 | null
        gitRefs: {
            nodes: GitRefFields2[]
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type GitRefFields2 = {
    id: string
    displayName: string
    name: string
    abbrevName: string
    url: string
    target: {
        commit: {
            author: SignatureFields3
            committer: SignatureFields3 | null
            behindAhead: {
                behind: number
                ahead: number
            }
        } | null
    }
}
export type SignatureFields3 = {
    person: {
        displayName: string
        user: {
            username: string
        } | null
    }
    date: string
}
export type RepositoryCommitVariables = {
    repo: string
    revspec: string
}
export type RepositoryCommitResult = {
    node: {
        commit:
            | ({
                  __typename: 'GitCommit'
              } & GitCommitFields1)
            | null
    } | null
}
export type GitCommitFields1 = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields4
    committer: SignatureFields4 | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields4 = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type GitCommitFields2 = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields5
    committer: SignatureFields5 | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields5 = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type RepositoryGitCommitsVariables = {
    repo: string
    revspec: string
    first: number | null
    query: string | null
}
export type RepositoryGitCommitsResult = {
    node: {
        commit: {
            ancestors: {
                nodes: GitCommitFields3[]
                pageInfo: {
                    hasNextPage: boolean
                }
            }
        } | null
    } | null
}
export type GitCommitFields3 = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields6
    committer: SignatureFields6 | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields6 = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type RepositoryComparisonCommitsVariables = {
    repo: string
    base: string | null
    head: string | null
    first: number | null
}
export type RepositoryComparisonCommitsResult = {
    node: {
        comparison: {
            commits: {
                nodes: GitCommitFields4[]
                pageInfo: {
                    hasNextPage: boolean
                }
            }
        }
    } | null
}
export type GitCommitFields4 = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields7
    committer: SignatureFields7 | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields7 = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type RepositoryComparisonDiffVariables = {
    repo: string
    base: string | null
    head: string | null
    first: number | null
    after: string | null
    isLightTheme: boolean
}
export type RepositoryComparisonDiffResult = {
    node: {
        comparison: {
            fileDiffs: {
                nodes: FileDiffFields3[]
                totalCount: number | null
                pageInfo: {
                    endCursor: string | null
                    hasNextPage: boolean
                }
                diffStat: DiffStatFields13
            }
        }
    } | null
}
export type FileDiffFields3 = {
    __typename: 'FileDiff'
    oldPath: string | null
    oldFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newPath: string | null
    mostRelevantFile: {
        __typename: string
        url: string
    }
    hunks: {
        oldRange: {
            startLine: number
            lines: number
        }
        oldNoNewlineAt: boolean
        newRange: {
            startLine: number
            lines: number
        }
        section: string | null
        highlight: {
            aborted: boolean
            lines: {
                kind: 'ADDED' | 'UNCHANGED' | 'DELETED'
                html: string
            }[]
        }
    }[]
    stat: {
        added: number
        changed: number
        deleted: number
    }
    internalID: string
}
export type DiffStatFields13 = {
    added: number
    changed: number
    deleted: number
}
export type RepositoryComparisonVariables = {
    repo: string
    base: string | null
    head: string | null
}
export type RepositoryComparisonResult = {
    node: {
        comparison: {
            range: {
                expr: string
                baseRevSpec: {
                    object: {
                        oid: any
                    } | null
                }
                headRevSpec: {
                    object: {
                        oid: any
                    } | null
                }
            }
        }
    } | null
}
export type ExploreRepositoriesVariables = {
    first: number | null
    names: string[] | null
}
export type ExploreRepositoriesResult = {
    repositories: {
        nodes: {
            name: string
            description: string
            url: string
        }[]
    }
}
export type RepositoryTextSearchIndexVariables = {
    id: string
}
export type RepositoryTextSearchIndexResult = {
    node: {
        textSearchIndex: {
            status: {
                updatedAt: any
                contentByteSize: number
                contentFilesCount: number
                indexByteSize: number
                indexShardsCount: number
            } | null
            refs: {
                ref: {
                    displayName: string
                    url: string
                }
                indexed: boolean
                current: boolean
                indexedCommit: {
                    oid: any
                    abbreviatedOID: string
                    commit: {
                        url: string
                    } | null
                } | null
            }[]
        } | null
    } | null
}
export type RepositoryVariables = {
    name: string
}
export type RepositoryResult = {
    repository: {
        id: string
        name: string
        isPrivate: boolean
        viewerCanAdminister: boolean
        mirrorInfo: {
            remoteURL: string
            cloneInProgress: boolean
            cloneProgress: string | null
            cloned: boolean
            updatedAt: any | null
            updateSchedule: {
                due: any
                index: number
                total: number
            } | null
            updateQueue: {
                updating: boolean
                index: number
                total: number
            } | null
        }
        externalServices: {
            nodes: {
                id: string
                kind:
                    | 'AWSCODECOMMIT'
                    | 'BITBUCKETCLOUD'
                    | 'BITBUCKETSERVER'
                    | 'GITHUB'
                    | 'GITLAB'
                    | 'GITOLITE'
                    | 'PHABRICATOR'
                    | 'OTHER'
                displayName: string
            }[]
        }
        permissionsInfo: {
            syncedAt: any | null
            updatedAt: any
        } | null
    } | null
}
export type RepositoryContributorsVariables = {
    repo: string
    first: number | null
    revisionRange: string | null
    after: string | null
    path: string | null
}
export type RepositoryContributorsResult = {
    node: {
        contributors: {
            nodes: {
                person: {
                    name: string
                    displayName: string
                    email: string
                    avatarURL: string
                    user: {
                        username: string
                        url: string
                    } | null
                }
                count: number
                commits: {
                    nodes: {
                        oid: any
                        abbreviatedOID: string
                        url: string
                        subject: string
                        author: {
                            date: string
                        }
                    }[]
                }
            }[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type TreeCommitsVariables = {
    repo: string
    revspec: string
    first: number | null
    filePath: string | null
    after: string | null
}
export type TreeCommitsResult = {
    node:
        | ({
              __typename: string
          } & {
              commit: {
                  ancestors: {
                      nodes: GitCommitFields5[]
                      pageInfo: {
                          hasNextPage: boolean
                      }
                  }
              } | null
          })
        | null
}
export type GitCommitFields5 = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields8
    committer: SignatureFields8 | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields8 = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type SearchVariables = {
    query: string
    version: 'V1' | 'V2'
    patternType: 'literal' | 'regexp' | 'structural'
    useCodemod: boolean
    versionContext: string | null
}
export type SearchResult = {
    search: {
        results: {
            __typename: 'SearchResults'
            limitHit: boolean
            matchCount: number
            approximateResultCount: string
            missing: {
                name: string
            }[]
            cloning: {
                name: string
            }[]
            repositoriesCount: number
            timedout: {
                name: string
            }[]
            indexUnavailable: boolean
            dynamicFilters: {
                value: string
                label: string
                count: number
                limitHit: boolean
                kind: string
            }[]
            results: ({
                __typename: 'FileMatch' | 'CommitSearchResult' | 'Repository' | 'CodemodResult'
            } & (
                | {
                      id: string
                      name: string
                      label: {
                          html: string
                      }
                      url: string
                      icon: string
                      detail: {
                          html: string
                      }
                      matches: {
                          url: string
                          body: {
                              text: string
                              html: string
                          }
                          highlights: {
                              line: number
                              character: number
                              length: number
                          }[]
                      }[]
                  }
                | {
                      file: {
                          path: string
                          url: string
                          commit: {
                              oid: any
                          }
                      }
                      repository: {
                          name: string
                          url: string
                      }
                      revSpec:
                          | ({
                                __typename: 'GitRef' | 'GitRevSpecExpr' | 'GitObject'
                            } & (
                                | {
                                      displayName: string
                                      url: string
                                  }
                                | {
                                      expr: string
                                      object: {
                                          commit: {
                                              url: string
                                          } | null
                                      } | null
                                  }
                                | {
                                      abbreviatedOID: string
                                      commit: {
                                          url: string
                                      } | null
                                  }
                            ))
                          | null
                      limitHit: boolean
                      symbols: {
                          name: string
                          containerName: string | null
                          url: string
                          kind:
                              | 'UNKNOWN'
                              | 'FILE'
                              | 'MODULE'
                              | 'NAMESPACE'
                              | 'PACKAGE'
                              | 'CLASS'
                              | 'METHOD'
                              | 'PROPERTY'
                              | 'FIELD'
                              | 'CONSTRUCTOR'
                              | 'ENUM'
                              | 'INTERFACE'
                              | 'FUNCTION'
                              | 'VARIABLE'
                              | 'CONSTANT'
                              | 'STRING'
                              | 'NUMBER'
                              | 'BOOLEAN'
                              | 'ARRAY'
                              | 'OBJECT'
                              | 'KEY'
                              | 'NULL'
                              | 'ENUMMEMBER'
                              | 'STRUCT'
                              | 'EVENT'
                              | 'OPERATOR'
                              | 'TYPEPARAMETER'
                      }[]
                      lineMatches: {
                          preview: string
                          lineNumber: number
                          offsetAndLengths: number[][]
                      }[]
                  }
                | {
                      label: {
                          html: string
                      }
                      url: string
                      icon: string
                      detail: {
                          html: string
                      }
                      matches: {
                          url: string
                          body: {
                              text: string
                              html: string
                          }
                          highlights: {
                              line: number
                              character: number
                              length: number
                          }[]
                      }[]
                  }
                | {
                      label: {
                          html: string
                      }
                      url: string
                      icon: string
                      detail: {
                          html: string
                      }
                      matches: {
                          url: string
                          body: {
                              text: string
                              html: string
                          }
                          highlights: {
                              line: number
                              character: number
                              length: number
                          }[]
                      }[]
                  }
            ))[]
            alert: {
                title: string
                description: string | null
                proposedQueries:
                    | {
                          description: string | null
                          query: string
                      }[]
                    | null
            } | null
            elapsedMilliseconds: number
        }
    } | null
}
export type RepoGroupsVariables = {}
export type RepoGroupsResult = {
    repoGroups: {
        __typename: 'RepoGroup'
        name: string
    }[]
}
export type SearchSuggestionsVariables = {
    query: string
}
export type SearchSuggestionsResult = {
    search: {
        suggestions: ({
            __typename: 'Repository' | 'File' | 'Symbol' | 'Language'
        } & (
            | {
                  name: string
              }
            | {
                  path: string
                  name: string
                  isDirectory: boolean
                  url: string
                  repository: {
                      name: string
                  }
              }
            | {
                  name: string
                  containerName: string | null
                  url: string
                  kind:
                      | 'UNKNOWN'
                      | 'FILE'
                      | 'MODULE'
                      | 'NAMESPACE'
                      | 'PACKAGE'
                      | 'CLASS'
                      | 'METHOD'
                      | 'PROPERTY'
                      | 'FIELD'
                      | 'CONSTRUCTOR'
                      | 'ENUM'
                      | 'INTERFACE'
                      | 'FUNCTION'
                      | 'VARIABLE'
                      | 'CONSTANT'
                      | 'STRING'
                      | 'NUMBER'
                      | 'BOOLEAN'
                      | 'ARRAY'
                      | 'OBJECT'
                      | 'KEY'
                      | 'NULL'
                      | 'ENUMMEMBER'
                      | 'STRUCT'
                      | 'EVENT'
                      | 'OPERATOR'
                      | 'TYPEPARAMETER'
                  location: {
                      resource: {
                          path: string
                          repository: {
                              name: string
                          }
                      }
                  }
              }
        ))[]
    } | null
}
export type ReposByQueryVariables = {
    query: string
}
export type ReposByQueryResult = {
    search: {
        results: {
            repositories: {
                name: string
                url: string
            }[]
        }
    } | null
}
export type SavedSearchFields = {
    id: string
    description: string
    notify: boolean
    notifySlack: boolean
    query: string
    namespace: {
        id: string
    }
    slackWebhookURL: string | null
}
export type savedSearchesVariables = {}
export type savedSearchesResult = {
    savedSearches: SavedSearchFields1[]
}
export type SavedSearchFields1 = {
    id: string
    description: string
    notify: boolean
    notifySlack: boolean
    query: string
    namespace: {
        id: string
    }
    slackWebhookURL: string | null
}
export type SavedSearchVariables = {
    id: string
}
export type SavedSearchResult = {
    node: {
        id: string
        description: string
        query: string
        notify: boolean
        notifySlack: boolean
        slackWebhookURL: string | null
        namespace: {
            id: string
        }
    } | null
}
export type CreateSavedSearchVariables = {
    description: string
    query: string
    notifyOwner: boolean
    notifySlack: boolean
    userID: string | null
    orgID: string | null
}
export type CreateSavedSearchResult = {
    createSavedSearch: SavedSearchFields2
}
export type SavedSearchFields2 = {
    id: string
    description: string
    notify: boolean
    notifySlack: boolean
    query: string
    namespace: {
        id: string
    }
    slackWebhookURL: string | null
}
export type UpdateSavedSearchVariables = {
    id: string
    description: string
    query: string
    notifyOwner: boolean
    notifySlack: boolean
    userID: string | null
    orgID: string | null
}
export type UpdateSavedSearchResult = {
    updateSavedSearch: SavedSearchFields3
}
export type SavedSearchFields3 = {
    id: string
    description: string
    notify: boolean
    notifySlack: boolean
    query: string
    namespace: {
        id: string
    }
    slackWebhookURL: string | null
}
export type DeleteSavedSearchVariables = {
    id: string
}
export type DeleteSavedSearchResult = {
    deleteSavedSearch: {
        alwaysNil: string | null
    } | null
}
export type highlightCodeVariables = {
    code: string
    fuzzyLanguage: string
    disableTimeout: boolean
    isLightTheme: boolean
}
export type highlightCodeResult = {
    highlightCode: string
}
export type ManyReposWarningVariables = {
    first: number | null
}
export type ManyReposWarningResult = {
    repositories: {
        nodes: {
            id: string
        }[]
    }
}
export type SettingsCascadeVariables = {
    subject: string
}
export type SettingsCascadeResult = {
    settingsSubject: {
        settingsCascade: {
            subjects: {
                latestSettings: {
                    id: number
                    contents: any
                } | null
            }[]
        }
    } | null
}
export type AccessTokenFields = {
    id: string
    scopes: string[]
    note: string
    createdAt: any
    lastUsedAt: any | null
    subject: {
        username: string
    }
    creator: {
        username: string
    }
}
export type DeleteAccessTokenVariables = {
    tokenID: string
}
export type DeleteAccessTokenResult = {
    deleteAccessToken: {
        alwaysNil: string | null
    }
}
export type SiteFlagsVariables = {}
export type SiteFlagsResult = {
    site: {
        needsRepositoryConfiguration: boolean
        freeUsersExceeded: boolean
        alerts: {
            type: 'INFO' | 'WARNING' | 'ERROR'
            message: string
            isDismissibleWithKey: string | null
        }[]
        authProviders: {
            nodes: {
                serviceType: string
                serviceID: string
                clientID: string
                displayName: string
                isBuiltin: boolean
                authenticationURL: string | null
            }[]
        }
        disableBuiltInSearches: boolean
        sendsEmailVerificationEmails: boolean
        updateCheck: {
            pending: boolean
            checkedAt: any | null
            errorMessage: string | null
            updateVersionAvailable: string | null
        }
        productSubscription: {
            license: {
                expiresAt: any
            } | null
            noLicenseWarningUserCount: number | null
        }
        productVersion: string
    }
}
export type addExternalServiceVariables = {
    input: {
        kind:
            | 'AWSCODECOMMIT'
            | 'BITBUCKETCLOUD'
            | 'BITBUCKETSERVER'
            | 'GITHUB'
            | 'GITLAB'
            | 'GITOLITE'
            | 'PHABRICATOR'
            | 'OTHER'
        displayName: string
        config: string
    }
}
export type addExternalServiceResult = {
    addExternalService: {
        id: string
        kind:
            | 'AWSCODECOMMIT'
            | 'BITBUCKETCLOUD'
            | 'BITBUCKETSERVER'
            | 'GITHUB'
            | 'GITLAB'
            | 'GITOLITE'
            | 'PHABRICATOR'
            | 'OTHER'
        displayName: string
        warning: string | null
    }
}
export type externalServiceFields = {
    id: string
    kind:
        | 'AWSCODECOMMIT'
        | 'BITBUCKETCLOUD'
        | 'BITBUCKETSERVER'
        | 'GITHUB'
        | 'GITLAB'
        | 'GITOLITE'
        | 'PHABRICATOR'
        | 'OTHER'
    displayName: string
    config: any
    warning: string | null
    webhookURL: string | null
}
export type UpdateExternalServiceVariables = {
    input: {
        id: string
        displayName: string | null
        config: string | null
    }
}
export type UpdateExternalServiceResult = {
    updateExternalService: externalServiceFields1
}
export type externalServiceFields1 = {
    id: string
    kind:
        | 'AWSCODECOMMIT'
        | 'BITBUCKETCLOUD'
        | 'BITBUCKETSERVER'
        | 'GITHUB'
        | 'GITLAB'
        | 'GITOLITE'
        | 'PHABRICATOR'
        | 'OTHER'
    displayName: string
    config: any
    warning: string | null
    webhookURL: string | null
}
export type ExternalServiceVariables = {
    id: string
}
export type ExternalServiceResult = {
    node:
        | ({
              __typename: string
          } & externalServiceFields2)
        | null
}
export type externalServiceFields2 = {
    id: string
    kind:
        | 'AWSCODECOMMIT'
        | 'BITBUCKETCLOUD'
        | 'BITBUCKETSERVER'
        | 'GITHUB'
        | 'GITLAB'
        | 'GITOLITE'
        | 'PHABRICATOR'
        | 'OTHER'
    displayName: string
    config: any
    warning: string | null
    webhookURL: string | null
}
export type DeleteExternalServiceVariables = {
    externalService: string
}
export type DeleteExternalServiceResult = {
    deleteExternalService: {
        alwaysNil: string | null
    }
}
export type ExternalServicesVariables = {
    first: number | null
}
export type ExternalServicesResult = {
    externalServices: {
        nodes: {
            id: string
            kind:
                | 'AWSCODECOMMIT'
                | 'BITBUCKETCLOUD'
                | 'BITBUCKETSERVER'
                | 'GITHUB'
                | 'GITLAB'
                | 'GITOLITE'
                | 'PHABRICATOR'
                | 'OTHER'
            displayName: string
            config: any
        }[]
        totalCount: number
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type SiteAdminAccessTokensVariables = {
    first: number | null
}
export type SiteAdminAccessTokensResult = {
    site: {
        accessTokens: {
            nodes: AccessTokenFields1[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type AccessTokenFields1 = {
    id: string
    scopes: string[]
    note: string
    createdAt: any
    lastUsedAt: any | null
    subject: {
        username: string
    }
    creator: {
        username: string
    }
}
export type UsersVariables = {
    first: number | null
    query: string | null
}
export type UsersResult = {
    users: {
        nodes: {
            id: string
            username: string
            displayName: string | null
            emails: {
                email: string
                verified: boolean
                verificationPending: boolean
                viewerCanManuallyVerify: boolean
            }[]
            createdAt: any
            siteAdmin: boolean
            latestSettings: {
                createdAt: any
                contents: any
            } | null
            organizations: {
                nodes: {
                    name: string
                }[]
            }
        }[]
        totalCount: number
    }
}
export type OrganizationsVariables = {
    first: number | null
    query: string | null
}
export type OrganizationsResult = {
    organizations: {
        nodes: {
            id: string
            name: string
            displayName: string | null
            createdAt: any
            latestSettings: {
                createdAt: any
                contents: any
            } | null
            members: {
                totalCount: number
            }
        }[]
        totalCount: number
    }
}
export type RepositoriesVariables = {
    first: number | null
    query: string | null
    cloned: boolean | null
    cloneInProgress: boolean | null
    notCloned: boolean | null
    indexed: boolean | null
    notIndexed: boolean | null
}
export type RepositoriesResult = {
    repositories: {
        nodes: {
            id: string
            name: string
            createdAt: any
            viewerCanAdminister: boolean
            url: string
            mirrorInfo: {
                cloned: boolean
                cloneInProgress: boolean
                updatedAt: any | null
            }
        }[]
        totalCount: number | null
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type UpdateMirrorRepositoryVariables = {
    repository: string
}
export type UpdateMirrorRepositoryResult = {
    updateMirrorRepository: {
        alwaysNil: string | null
    }
}
export type CheckMirrorRepositoryConnectionVariables = {
    repository: string | null
    name: string | null
}
export type CheckMirrorRepositoryConnectionResult = {
    checkMirrorRepositoryConnection: {
        error: string | null
    }
}
export type ScheduleRepositoryPermissionsSyncVariables = {
    repository: string
}
export type ScheduleRepositoryPermissionsSyncResult = {
    scheduleRepositoryPermissionsSync: {
        alwaysNil: string | null
    }
}
export type ScheduleUserPermissionsSyncVariables = {
    user: string
}
export type ScheduleUserPermissionsSyncResult = {
    scheduleUserPermissionsSync: {
        alwaysNil: string | null
    }
}
export type UserUsageStatisticsVariables = {
    activePeriod: ('TODAY' | 'THIS_WEEK' | 'THIS_MONTH' | 'ALL_TIME') | null
    query: string | null
    first: number | null
}
export type UserUsageStatisticsResult = {
    users: {
        nodes: {
            id: string
            username: string
            usageStatistics: {
                searchQueries: number
                pageViews: number
                codeIntelligenceActions: number
                lastActiveTime: string | null
                lastActiveCodeHostIntegrationTime: string | null
            }
        }[]
        totalCount: number
    }
}
export type SiteUsageStatisticsVariables = {}
export type SiteUsageStatisticsResult = {
    site: {
        usageStatistics: {
            daus: {
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }[]
            waus: {
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }[]
            maus: {
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }[]
        }
    }
}
export type SiteVariables = {}
export type SiteResult = {
    site: {
        id: string
        canReloadSite: boolean
        configuration: {
            id: number
            effectiveContents: any
            validationMessages: string[]
        }
    }
}
export type AllConfigVariables = {
    first: number | null
}
export type AllConfigResult = {
    site: {
        id: string
        configuration: {
            id: number
            effectiveContents: any
        }
        latestSettings: {
            contents: any
        } | null
        settingsCascade: {
            final: string
        }
    }
    externalServices: {
        nodes: {
            id: string
            kind:
                | 'AWSCODECOMMIT'
                | 'BITBUCKETCLOUD'
                | 'BITBUCKETSERVER'
                | 'GITHUB'
                | 'GITLAB'
                | 'GITOLITE'
                | 'PHABRICATOR'
                | 'OTHER'
            displayName: string
            config: any
            createdAt: any
            updatedAt: any
            warning: string | null
        }[]
    }
    viewerSettings: SettingsCascadeFields2
}
export type SettingsCascadeFields2 = {
    subjects: {
        __typename: string
        latestSettings: {
            id: number
            contents: any
        } | null
        settingsURL: string | null
    }[]
    final: string
}
export type UpdateSiteConfigurationVariables = {
    lastID: number
    input: string
}
export type UpdateSiteConfigurationResult = {
    updateSiteConfiguration: boolean
}
export type ReloadSiteVariables = {}
export type ReloadSiteResult = {
    reloadSite: {
        alwaysNil: string | null
    } | null
}
export type SetUserIsSiteAdminVariables = {
    userID: string
    siteAdmin: boolean
}
export type SetUserIsSiteAdminResult = {
    setUserIsSiteAdmin: {
        alwaysNil: string | null
    } | null
}
export type RandomizeUserPasswordVariables = {
    user: string
}
export type RandomizeUserPasswordResult = {
    randomizeUserPassword: {
        resetPasswordURL: string | null
    }
}
export type DeleteUserVariables = {
    user: string
    hard: boolean | null
}
export type DeleteUserResult = {
    deleteUser: {
        alwaysNil: string | null
    } | null
}
export type CreateUserVariables = {
    username: string
    email: string | null
}
export type CreateUserResult = {
    createUser: {
        resetPasswordURL: string | null
    }
}
export type DeleteOrganizationVariables = {
    organization: string
}
export type DeleteOrganizationResult = {
    deleteOrganization: {
        alwaysNil: string | null
    } | null
}
export type SiteUpdateCheckVariables = {}
export type SiteUpdateCheckResult = {
    site: {
        buildVersion: string
        productVersion: string
        updateCheck: {
            pending: boolean
            checkedAt: any | null
            errorMessage: string | null
            updateVersionAvailable: string | null
        }
    }
}
export type SiteMonitoringStatisticsVariables = {
    days: number
}
export type SiteMonitoringStatisticsResult = {
    site: {
        monitoringStatistics: {
            alerts: {
                serviceName: string
                name: string
                timestamp: any
                average: number
            }[]
        }
    }
}
export type OverviewVariables = {}
export type OverviewResult = {
    repositories: {
        totalCount: number | null
    }
    users: {
        totalCount: number
    }
    organizations: {
        totalCount: number
    }
    surveyResponses: {
        totalCount: number
        averageScore: number
    }
}
export type WAUsVariables = {}
export type WAUsResult = {
    site: {
        usageStatistics: {
            waus: {
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }[]
        }
    }
}
export type SymbolsVariables = {
    repo: string
    revision: string
    first: number | null
    query: string | null
    includePatterns: string[] | null
}
export type SymbolsResult = {
    node:
        | ({
              __typename: string
          } & {
              commit: {
                  symbols: {
                      pageInfo: {
                          hasNextPage: boolean
                      }
                      nodes: {
                          name: string
                          containerName: string | null
                          kind:
                              | 'UNKNOWN'
                              | 'FILE'
                              | 'MODULE'
                              | 'NAMESPACE'
                              | 'PACKAGE'
                              | 'CLASS'
                              | 'METHOD'
                              | 'PROPERTY'
                              | 'FIELD'
                              | 'CONSTRUCTOR'
                              | 'ENUM'
                              | 'INTERFACE'
                              | 'FUNCTION'
                              | 'VARIABLE'
                              | 'CONSTANT'
                              | 'STRING'
                              | 'NUMBER'
                              | 'BOOLEAN'
                              | 'ARRAY'
                              | 'OBJECT'
                              | 'KEY'
                              | 'NULL'
                              | 'ENUMMEMBER'
                              | 'STRUCT'
                              | 'EVENT'
                              | 'OPERATOR'
                              | 'TYPEPARAMETER'
                          language: string
                          location: {
                              resource: {
                                  path: string
                              }
                              range: {
                                  start: {
                                      line: number
                                      character: number
                                  }
                                  end: {
                                      line: number
                                      character: number
                                  }
                              } | null
                          }
                          url: string
                      }[]
                  }
              } | null
          })
        | null
}
export type SiteAdminActivationStatusVariables = {}
export type SiteAdminActivationStatusResult = {
    externalServices: {
        totalCount: number
    }
    repositories: {
        totalCount: number | null
    }
    viewerSettings: {
        final: string
    }
    users: {
        totalCount: number
    }
    currentUser: {
        usageStatistics: {
            searchQueries: number
            findReferencesActions: number
            codeIntelligenceActions: number
        }
    } | null
}
export type ActivationStatusVariables = {}
export type ActivationStatusResult = {
    currentUser: {
        usageStatistics: {
            searchQueries: number
            findReferencesActions: number
            codeIntelligenceActions: number
        }
    } | null
}
export type LinksForRepositoriesVariables = {}
export type LinksForRepositoriesResult = {
    repositories: {
        nodes: {
            url: string
            gitRefs: {
                totalCount: number
            }
        }[]
    }
}
export type UserEventLogsVariables = {
    user: string
    first: number | null
}
export type UserEventLogsResult = {
    node: {
        eventLogs: {
            nodes: {
                name: string
                source: 'WEB' | 'CODEHOSTINTEGRATION' | 'BACKEND'
                url: string
                timestamp: any
            }[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type UserVariables = {
    username: string
    siteAdmin: boolean
}
export type UserResult = {
    user: {
        __typename: 'User'
        id: string
        username: string
        displayName: string | null
        url: string
        settingsURL: string | null
        avatarURL: string | null
        viewerCanAdminister: boolean
        siteAdmin: boolean
        builtinAuth: boolean
        createdAt: any
        emails: {
            email: string
            verified: boolean
        }[]
        organizations: {
            nodes: {
                id: string
                displayName: string | null
                name: string
            }[]
        }
        permissionsInfo: {
            syncedAt: any | null
            updatedAt: any
        } | null
    } | null
}
export type updateUserVariables = {
    user: string
    username: string | null
    displayName: string | null
    avatarURL: string | null
}
export type updateUserResult = {
    updateUser: {
        alwaysNil: string | null
    }
}
export type updatePasswordVariables = {
    oldPassword: string
    newPassword: string
}
export type updatePasswordResult = {
    updatePassword: {
        alwaysNil: string | null
    } | null
}
export type SetUserEmailVerifiedVariables = {
    user: string
    email: string
    verified: boolean
}
export type SetUserEmailVerifiedResult = {
    setUserEmailVerified: {
        alwaysNil: string | null
    }
}
export type logUserEventVariables = {
    event:
        | 'PAGEVIEW'
        | 'SEARCHQUERY'
        | 'CODEINTEL'
        | 'CODEINTELREFS'
        | 'CODEINTELINTEGRATION'
        | 'CODEINTELINTEGRATIONREFS'
        | 'STAGEMANAGE'
        | 'STAGEPLAN'
        | 'STAGECODE'
        | 'STAGEREVIEW'
        | 'STAGEVERIFY'
        | 'STAGEPACKAGE'
        | 'STAGEDEPLOY'
        | 'STAGECONFIGURE'
        | 'STAGEMONITOR'
        | 'STAGESECURE'
        | 'STAGEAUTOMATE'
    userCookieID: string
}
export type logUserEventResult = {
    logUserEvent: {
        alwaysNil: string | null
    } | null
}
export type logEventVariables = {
    event: string
    userCookieID: string
    url: string
    source: 'WEB' | 'CODEHOSTINTEGRATION' | 'BACKEND'
    argument: string | null
}
export type logEventResult = {
    logEvent: {
        alwaysNil: string | null
    } | null
}
export type CreateAccessTokenVariables = {
    user: string
    scopes: string[]
    note: string
}
export type CreateAccessTokenResult = {
    createAccessToken: {
        id: string
        token: string
    }
}
export type AccessTokensVariables = {
    user: string
    first: number | null
}
export type AccessTokensResult = {
    node: {
        accessTokens: {
            nodes: AccessTokenFields2[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type AccessTokenFields2 = {
    id: string
    scopes: string[]
    note: string
    createdAt: any
    lastUsedAt: any | null
    subject: {
        username: string
    }
    creator: {
        username: string
    }
}
export type AddUserEmailVariables = {
    user: string
    email: string
}
export type AddUserEmailResult = {
    addUserEmail: {
        alwaysNil: string | null
    }
}
export type RemoveUserEmailVariables = {
    user: string
    email: string
}
export type RemoveUserEmailResult = {
    removeUserEmail: {
        alwaysNil: string | null
    }
}
export type UserEmailsVariables = {
    user: string
}
export type UserEmailsResult = {
    node: {
        emails: {
            email: string
            isPrimary: boolean
            verified: boolean
            verificationPending: boolean
            viewerCanManuallyVerify: boolean
        }[]
    } | null
}
export type UserForProfilePageVariables = {
    user: string
}
export type UserForProfilePageResult = {
    node: {
        id: string
        username: string
        displayName: string | null
        avatarURL: string | null
        viewerCanChangeUsername: boolean
    } | null
}
