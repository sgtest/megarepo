// Code generated by go-bindata. DO NOT EDIT.
// sources:
// example.yaml (1.266kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x3d\x6f\xdc\x38\x10\xed\xf9\x2b\x1e\xa0\xe2\x6c\xe0\x96\x3a\x03\x57\x6d\x77\x07\x37\xe9\x02\x04\x41\xca\x80\x16\x47\x2b\x26\x14\x47\xe0\x50\xbb\x51\xe3\xdf\x1e\x90\xfa\x5c\xc3\x06\x52\x2d\x97\xc3\x99\xf7\xe6\xcd\x1b\x55\xb0\x2e\xc2\x09\x52\x47\xf9\x48\x4d\xe2\x38\x61\x88\xd4\x70\xdf\x9b\x60\x73\x2c\x8e\x01\x6d\xe4\x5e\xe3\x53\x0b\x03\x09\x66\x90\x8e\xd3\x5f\xb2\x24\xab\x0a\x91\xbc\x49\xee\x4a\x7f\xc3\x25\xdc\x9c\xf7\x78\x21\x44\x12\xf6\x57\xb2\x5b\x14\x89\x91\x3a\x27\x3b\x92\xc6\x33\xb5\x66\xf4\x49\x72\xec\xf3\xb7\x67\xad\xac\x8b\x67\xd4\xd6\x24\x53\x37\x6c\x49\x55\x33\xea\x97\x03\x2a\x49\x72\xc1\x24\xc7\xa1\xd0\xfb\x53\x6c\x55\x1d\x53\xef\xa1\x5f\x6b\x2d\x3c\xc6\x86\x2e\xd1\x0c\x5d\xbd\xf6\x28\xea\x90\xb1\xd2\xda\x83\xd5\x3b\x4a\xbd\x50\xcb\x91\x60\xc2\xb4\x29\x25\x30\x91\x90\xcc\x4f\x0a\xfa\x03\x6d\x55\x99\x84\x56\x7b\xf4\x8c\xe1\x5f\xc8\x14\x9a\x39\xd4\xb3\x25\x58\x6a\x5d\x20\xc1\xad\x33\x09\x2f\xd4\x99\xab\xe3\x31\x66\xfe\xa3\x10\x5c\x8b\xe7\x79\x9a\xbd\x13\x71\xe1\xa2\x55\x05\x55\x01\x27\xb4\xc6\x79\x3c\xd8\xb9\xe1\xc7\xf9\xce\x5d\x02\x47\x9a\xcf\x91\x7a\xbe\xd2\xf7\xdc\xac\x5a\xc0\xce\x25\x29\x83\x8f\x71\xd6\x7a\x45\xef\xf8\x06\x6e\x13\x85\x43\x83\xd2\xf1\xe8\x6d\x56\x7e\x69\xf3\x28\xee\xd3\x3f\xa2\xd5\x5a\xe6\x9c\xff\xaa\xea\x90\xeb\x04\x06\xde\x49\x02\xb7\xeb\xb5\xcc\x99\xb9\x98\x56\xdb\xd3\xb3\x3a\xa1\xf8\x43\xd7\xfd\x74\x1a\x22\xff\xa0\x26\x61\x33\xf1\xbd\xcf\xf2\xcf\x70\xf2\x74\x25\x5f\x1e\x3c\xec\xa6\x7a\xbc\xab\xc3\xde\xae\xb5\x14\x80\x0a\xbd\x0b\x5b\xd3\xae\x85\x0c\xd4\xb8\xd6\x91\x9d\xdd\xc5\xc1\x4f\x65\x30\x6f\x96\xc6\x24\xf4\x2c\xa9\x38\x7c\xae\x53\x44\xd2\xf8\x2a\xd4\x8e\x1e\x2d\xc7\xed\xb5\x2b\x43\x74\x4d\x37\x97\x8c\x26\x92\x9f\xd0\x74\x26\x5c\x48\x2b\x1c\x19\x9c\xf1\xd4\xed\x74\x2d\xd1\xe0\xa7\x3a\x90\x24\xb2\xf5\xce\xfa\x3d\x27\x66\x5f\x15\x57\xe1\x3f\xef\xf9\x26\x98\x78\xcc\xd2\xe4\x98\x09\xa0\x5f\x29\x1a\xac\x39\x99\x9d\x29\x85\x96\x76\x9b\xd9\x90\xc0\xd1\x92\xcd\x80\xd7\x2c\xd9\xc5\xa5\xd9\x3e\xd0\xdb\xb1\x24\x7f\xb0\x9b\x65\x22\xfb\x34\x0e\x8f\x1e\xde\xec\xd4\xa3\xc6\xff\xd3\x52\xaa\x38\x28\x6f\xf5\xf2\x81\x12\xd3\x13\x8c\xac\xc4\xee\x56\x53\x2f\x9a\x6c\x93\xdc\x24\xe3\xd4\x51\xdc\xae\x7f\x07\x00\x00\xff\xff\xfe\x7f\xc8\x54\xf2\x04\x00\x00")

func exampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_exampleYaml,
		"example.yaml",
	)
}

func exampleYaml() (*asset, error) {
	bytes, err := exampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x72, 0x43, 0x3, 0x53, 0x22, 0xba, 0x94, 0x90, 0x33, 0xa9, 0xa, 0x66, 0xfa, 0xf0, 0xf9, 0x1d, 0x7, 0xde, 0x27, 0xd8, 0x1, 0xd8, 0x53, 0x35, 0xeb, 0x2d, 0x95, 0x3d, 0xbd, 0xad, 0x21}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example.yaml": exampleYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"example.yaml": {exampleYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
