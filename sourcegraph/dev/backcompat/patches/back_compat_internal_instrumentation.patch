diff --git a/internal/instrumentation/BUILD.bazel b/internal/instrumentation/BUILD.bazel
index 6fd63bc4a4..00d5c85ef4 100644
--- a/internal/instrumentation/BUILD.bazel
+++ b/internal/instrumentation/BUILD.bazel
@@ -10,7 +10,7 @@ go_library(
         "@io_opentelemetry_go_contrib_instrumentation_net_http_otelhttp//:otelhttp",
         "@io_opentelemetry_go_otel//:otel",
         "@io_opentelemetry_go_otel//attribute",
-        "@io_opentelemetry_go_otel_metric//:metric",
+        "@io_opentelemetry_go_otel_metric//noop",
         "@io_opentelemetry_go_otel_trace//:trace",
     ],
 )
diff --git a/internal/instrumentation/http.go b/internal/instrumentation/http.go
index c69310b5b2..8978a29911 100644
--- a/internal/instrumentation/http.go
+++ b/internal/instrumentation/http.go
@@ -8,7 +8,7 @@ import (
 	"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
 	"go.opentelemetry.io/otel"
 	"go.opentelemetry.io/otel/attribute"
-	"go.opentelemetry.io/otel/metric"
+	"go.opentelemetry.io/otel/metric/noop"
 	"go.opentelemetry.io/otel/trace"
 
 	"github.com/sourcegraph/sourcegraph/internal/trace/policy"
@@ -36,7 +36,7 @@ var defaultOTELHTTPOptions = []otelhttp.Option{
 		return fmt.Sprintf("%s %s", r.Method, target)
 	}),
 	// Disable OTEL metrics which can be quite high-cardinality
-	otelhttp.WithMeterProvider(metric.NewNoopMeterProvider()),
+	otelhttp.WithMeterProvider(noop.NewMeterProvider()),
 	// Make sure we use the global propagator, which should be set up on
 	// service initialization to support all our commonly used propagation
 	// formats (OpenTelemetry, W3c, Jaeger, etc)
