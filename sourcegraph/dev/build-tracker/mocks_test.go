// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package main

import (
	"context"
	"sync"

	bigquery "cloud.google.com/go/bigquery"
)

// MockBigQueryWriter is a mock implementation of the BigQueryWriter
// interface (from the package
// github.com/sourcegraph/sourcegraph/dev/build-tracker) used for unit
// testing.
type MockBigQueryWriter struct {
	// WriteFunc is an instance of a mock function object controlling the
	// behavior of the method Write.
	WriteFunc *BigQueryWriterWriteFunc
}

// NewMockBigQueryWriter creates a new mock of the BigQueryWriter interface.
// All methods return zero values for all results, unless overwritten.
func NewMockBigQueryWriter() *MockBigQueryWriter {
	return &MockBigQueryWriter{
		WriteFunc: &BigQueryWriterWriteFunc{
			defaultHook: func(context.Context, ...bigquery.ValueSaver) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockBigQueryWriter creates a new mock of the BigQueryWriter
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockBigQueryWriter() *MockBigQueryWriter {
	return &MockBigQueryWriter{
		WriteFunc: &BigQueryWriterWriteFunc{
			defaultHook: func(context.Context, ...bigquery.ValueSaver) error {
				panic("unexpected invocation of MockBigQueryWriter.Write")
			},
		},
	}
}

// NewMockBigQueryWriterFrom creates a new mock of the MockBigQueryWriter
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockBigQueryWriterFrom(i BigQueryWriter) *MockBigQueryWriter {
	return &MockBigQueryWriter{
		WriteFunc: &BigQueryWriterWriteFunc{
			defaultHook: i.Write,
		},
	}
}

// BigQueryWriterWriteFunc describes the behavior when the Write method of
// the parent MockBigQueryWriter instance is invoked.
type BigQueryWriterWriteFunc struct {
	defaultHook func(context.Context, ...bigquery.ValueSaver) error
	hooks       []func(context.Context, ...bigquery.ValueSaver) error
	history     []BigQueryWriterWriteFuncCall
	mutex       sync.Mutex
}

// Write delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBigQueryWriter) Write(v0 context.Context, v1 ...bigquery.ValueSaver) error {
	r0 := m.WriteFunc.nextHook()(v0, v1...)
	m.WriteFunc.appendCall(BigQueryWriterWriteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Write method of the
// parent MockBigQueryWriter instance is invoked and the hook queue is
// empty.
func (f *BigQueryWriterWriteFunc) SetDefaultHook(hook func(context.Context, ...bigquery.ValueSaver) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Write method of the parent MockBigQueryWriter instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BigQueryWriterWriteFunc) PushHook(hook func(context.Context, ...bigquery.ValueSaver) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BigQueryWriterWriteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...bigquery.ValueSaver) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BigQueryWriterWriteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...bigquery.ValueSaver) error {
		return r0
	})
}

func (f *BigQueryWriterWriteFunc) nextHook() func(context.Context, ...bigquery.ValueSaver) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BigQueryWriterWriteFunc) appendCall(r0 BigQueryWriterWriteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BigQueryWriterWriteFuncCall objects
// describing the invocations of this function.
func (f *BigQueryWriterWriteFunc) History() []BigQueryWriterWriteFuncCall {
	f.mutex.Lock()
	history := make([]BigQueryWriterWriteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BigQueryWriterWriteFuncCall is an object that describes an invocation of
// method Write on an instance of MockBigQueryWriter.
type BigQueryWriterWriteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []bigquery.ValueSaver
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c BigQueryWriterWriteFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BigQueryWriterWriteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
