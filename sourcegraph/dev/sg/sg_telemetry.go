package main

import (
	"fmt"
	"strings"

	"github.com/sourcegraph/sourcegraph/lib/output"

	"github.com/sourcegraph/sourcegraph/dev/sg/internal/category"
	"github.com/sourcegraph/sourcegraph/dev/sg/internal/migration"

	"github.com/sourcegraph/sourcegraph/dev/sg/internal/db"

	"github.com/urfave/cli/v2"

	"github.com/sourcegraph/sourcegraph/dev/sg/internal/std"
)

var telemetryCommand = &cli.Command{
	Name:     "telemetry",
	Usage:    "Operations relating to Sourcegraph telemetry",
	Category: category.Dev,
	Subcommands: []*cli.Command{
		allowlistCommand,
	},
}

var allowlistCommand = &cli.Command{
	Name:  "allowlist",
	Usage: "Edit the usage data allow list",
	Flags: []cli.Flag{},
	Description: `
Utility that will generate SQL to add and remove events from the usage data allow list.
https://docs.sourcegraph.com/dev/background-information/data-usage-pipeline#allow-list

Events are keyed by event name and passed in as additional arguments to the add and remove subcommands.
`,
	UsageText: `
# Generate SQL to add events from the allow list
sg telemetry allowlist add EVENT_ONE EVENT_TWO

# Generate SQL to remove events from the allow list
sg telemetry allowlist remove EVENT_ONE EVENT_TWO

# Automatically generate migration files associated with the allow list modification
sg telemetry allowlist add --migration EVENT_ONE EVENT_TWO

# Provide a specific migration name for the migration files
sg telemetry allowlist add --migration --name my_migration_name EVENT_ONE EVENT_TWO
`,
	Subcommands: []*cli.Command{
		addAllowlistCommand,
		removeAllowlistCommand,
	},
}

var addAllowlistCommand = &cli.Command{
	Name:      "add",
	ArgsUsage: "[event]",
	Usage:     "Generate the SQL required to add events to the allow list",
	UsageText: `
# Generate SQL to add events from the allow list
sg telemetry allowlist add EVENT_ONE EVENT_TWO

# Automatically generate migration files associated with the allow list modification
sg telemetry allowlist add --migration EVENT_ONE EVENT_TWO

# Provide a specific migration name for the migration files
sg telemetry allowlist add --migration --name my_migration_name EVENT_ONE EVENT_TWO
`,
	Flags: []cli.Flag{
		allowlistCreateMigrationFlag,
		allowlistMigrationNameOverrideFlag,
	},
	Action: addAllowList,
}

var removeAllowlistCommand = &cli.Command{
	Name:      "remove",
	ArgsUsage: "[event]",
	Usage:     "Generate the SQL required to remove events from the allow list",
	UsageText: `
# Generate SQL to add events from the allow list
sg telemetry allowlist remove EVENT_ONE EVENT_TWO

# Automatically generate migration files associated with the allow list modification
sg telemetry allowlist remove --migration EVENT_ONE EVENT_TWO

# Provide a specific migration name for the migration files
sg telemetry allowlist remove --migration --name my_migration_name EVENT_ONE EVENT_TWO
`,
	Flags: []cli.Flag{
		allowlistCreateMigrationFlag,
		allowlistMigrationNameOverrideFlag,
	},
	Action: removeAllowList,
}

var createMigrationFiles bool
var allowlistCreateMigrationFlag = &cli.BoolFlag{
	Name:        "migration",
	Usage:       "Create migration files with the generated SQL.",
	Value:       false,
	Destination: &createMigrationFiles,
}

var allowlistMigrationName string
var allowlistMigrationNameOverrideFlag = &cli.StringFlag{
	Name:        "name",
	Usage:       "Specifies the name of the resulting migration.",
	Required:    false,
	Value:       "sg_telemetry_allowlist",
	Destination: &allowlistMigrationName,
}

func addAllowList(ctx *cli.Context) (err error) {
	events := ctx.Args().Slice()
	if len(events) == 0 {
		return cli.Exit("no events provided", 1)
	}

	return editAllowlist(ctx, events, false)
}

func removeAllowList(ctx *cli.Context) (err error) {
	events := ctx.Args().Slice()
	if len(events) == 0 {
		return cli.Exit("no events provided", 1)
	}

	return editAllowlist(ctx, events, true)
}

func editAllowlist(ctx *cli.Context, events []string, reverse bool) error {
	header := fmt.Sprintf("-- This migration was generated by the command `sg telemetry %s`", ctx.Command.FullName())
	arrayStr := fmt.Sprintf(`'{%v}'`, strings.Join(events, ","))
	upQuery := fmt.Sprintf("INSERT INTO event_logs_export_allowlist (event_name) VALUES (UNNEST(%s::TEXT[])) ON CONFLICT DO NOTHING;", arrayStr)
	downQuery := fmt.Sprintf("DELETE FROM event_logs_export_allowlist WHERE event_name IN (SELECT * FROM UNNEST(%s::TEXT[]));", arrayStr)

	if reverse {
		upQuery, downQuery = downQuery, upQuery
	}

	std.Out.WriteLine(output.Styledf(output.StylePending, "\ngenerating output..."))
	std.Out.WriteLine(output.Styledf(output.StyleSuccess, "%s", upQuery))
	std.Out.WriteLine(output.Styledf(output.StyleWarning, "revert:\n%s", downQuery))

	if !createMigrationFiles {
		return nil
	}
	std.Out.WriteLine(output.Styledf(output.StylePending, "\ncreating migration files with name: %s...\n", allowlistMigrationName))
	database, ok := db.DatabaseByName("frontend")
	if !ok {
		return cli.Exit("frontend database not found", 1)
	}
	return migration.AddWithTemplate(database, allowlistMigrationName, fmt.Sprintf("%s\n%s", header, upQuery), fmt.Sprintf("%s\n%s", header, downQuery))
}
