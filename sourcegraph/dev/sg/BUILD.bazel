load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library", "go_test")

go_library(
    name = "sg_lib",
    srcs = [
        "analytics.go",
        "categories.go",
        "checks.go",
        "generates.go",
        "live.go",
        "main.go",
        "os.go",
        "release.go",
        "sg_adr.go",
        "sg_analytics.go",
        "sg_app.go",
        "sg_audit.go",
        "sg_ci.go",
        "sg_cloud.go",
        "sg_db.go",
        "sg_embeddings_qa.go",
        "sg_feedback.go",
        "sg_generate.go",
        "sg_help.go",
        "sg_insights.go",
        "sg_install.go",
        "sg_lint.go",
        "sg_live.go",
        "sg_logo.go",
        "sg_migration.go",
        "sg_monitoring.go",
        "sg_ops.go",
        "sg_page.go",
        "sg_rfc.go",
        "sg_run.go",
        "sg_secret.go",
        "sg_setup.go",
        "sg_src.go",
        "sg_start.go",
        "sg_teammate.go",
        "sg_telemetry.go",
        "sg_tests.go",
        "sg_update.go",
        "sg_version.go",
        "suggest.go",
    ],
    importpath = "github.com/sourcegraph/sourcegraph/dev/sg",
    visibility = ["//visibility:private"],
    deps = [
        "//dev/ci/runtype",
        "//dev/sg/adr",
        "//dev/sg/buf",
        "//dev/sg/dependencies",
        "//dev/sg/internal/analytics",
        "//dev/sg/internal/background",
        "//dev/sg/internal/bk",
        "//dev/sg/internal/check",
        "//dev/sg/internal/db",
        "//dev/sg/internal/docker",
        "//dev/sg/internal/generate",
        "//dev/sg/internal/generate/golang",
        "//dev/sg/internal/generate/proto",
        "//dev/sg/internal/images",
        "//dev/sg/internal/loki",
        "//dev/sg/internal/migration",
        "//dev/sg/internal/open",
        "//dev/sg/internal/repo",
        "//dev/sg/internal/rfc",
        "//dev/sg/internal/run",
        "//dev/sg/internal/secrets",
        "//dev/sg/internal/sgconf",
        "//dev/sg/internal/slack",
        "//dev/sg/internal/std",
        "//dev/sg/internal/usershell",
        "//dev/sg/interrupt",
        "//dev/sg/linters",
        "//dev/sg/root",
        "//dev/team",
        "//enterprise/cmd/embeddings/qa",
        "//internal/database",
        "//internal/database/basestore",
        "//internal/database/connections/live",
        "//internal/database/dbconn",
        "//internal/database/dbtest",
        "//internal/database/migration/cliutil",
        "//internal/database/migration/runner",
        "//internal/database/migration/schemas",
        "//internal/database/migration/store",
        "//internal/database/postgresdsn",
        "//internal/download",
        "//internal/encryption",
        "//internal/extsvc",
        "//internal/lazyregexp",
        "//internal/observation",
        "//internal/types",
        "//lib/cliutil/completions",
        "//lib/cliutil/docgen",
        "//lib/cliutil/exit",
        "//lib/errors",
        "//lib/output",
        "//monitoring/command",
        "//monitoring/definitions",
        "//monitoring/monitoring",
        "@com_github_agext_levenshtein//:levenshtein",
        "@com_github_buildkite_go_buildkite_v3//buildkite",
        "@com_github_docker_docker_credential_helpers//credentials",
        "@com_github_gen2brain_beeep//:beeep",
        "@com_github_gomodule_redigo//redis",
        "@com_github_google_go_github//github",
        "@com_github_google_go_github_v41//github",
        "@com_github_grafana_regexp//:regexp",
        "@com_github_jackc_pgx_v4//:pgx",
        "@com_github_keegancsmith_sqlf//:sqlf",
        "@com_github_masterminds_semver//:semver",
        "@com_github_opsgenie_opsgenie_go_sdk_v2//alert",
        "@com_github_opsgenie_opsgenie_go_sdk_v2//client",
        "@com_github_slack_go_slack//:slack",
        "@com_github_sourcegraph_conc//pool",
        "@com_github_sourcegraph_log//:log",
        "@com_github_sourcegraph_run//:run",
        "@com_github_urfave_cli_v2//:cli",
        "@com_google_cloud_go_storage//:storage",
        "@in_gopkg_yaml_v3//:yaml_v3",
        "@io_opentelemetry_go_otel//attribute",
        "@io_opentelemetry_go_otel_trace//:trace",
        "@org_golang_x_mod//semver",
        "@org_golang_x_oauth2//:oauth2",
    ],
)

go_binary(
    name = "sg",
    embed = [":sg_lib"],
    visibility = ["//visibility:public"],
)

go_test(
    name = "sg_test",
    timeout = "short",
    srcs = [
        "main_test.go",
        "release_test.go",
        "sg_start_test.go",
        "suggest_test.go",
    ],
    # Required by func findRoot() to check if sg is running in sourcegraph/sourcegraph
    data = ["//:go.mod"],
    embed = [":sg_lib"],
    # HOME is required to be set to start sg
    env = {"HOME": "/tmp"},
    deps = [
        "//dev/sg/internal/run",
        "//dev/sg/internal/sgconf",
        "//dev/sg/internal/std",
        "//lib/output/outputtest",
        "@com_github_google_go_cmp//cmp",
        "@com_github_hexops_autogold_v2//:autogold",
        "@com_github_stretchr_testify//assert",
        "@com_github_urfave_cli_v2//:cli",
    ],
)
