// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package lineargql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// GetProjectsByTeamIdResponse is returned by GetProjectsByTeamId on success.
type GetProjectsByTeamIdResponse struct {
	// One specific team.
	Team GetProjectsByTeamIdTeam `json:"team"`
}

// GetTeam returns GetProjectsByTeamIdResponse.Team, and is useful for accessing the field via an interface.
func (v *GetProjectsByTeamIdResponse) GetTeam() GetProjectsByTeamIdTeam { return v.Team }

// GetProjectsByTeamIdTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type GetProjectsByTeamIdTeam struct {
	// Projects associated with the team.
	Projects GetProjectsByTeamIdTeamProjectsProjectConnection `json:"projects"`
}

// GetProjects returns GetProjectsByTeamIdTeam.Projects, and is useful for accessing the field via an interface.
func (v *GetProjectsByTeamIdTeam) GetProjects() GetProjectsByTeamIdTeamProjectsProjectConnection {
	return v.Projects
}

// GetProjectsByTeamIdTeamProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
type GetProjectsByTeamIdTeamProjectsProjectConnection struct {
	Nodes []GetProjectsByTeamIdTeamProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns GetProjectsByTeamIdTeamProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetProjectsByTeamIdTeamProjectsProjectConnection) GetNodes() []GetProjectsByTeamIdTeamProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// GetProjectsByTeamIdTeamProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// A project.
type GetProjectsByTeamIdTeamProjectsProjectConnectionNodesProject struct {
	// The project's name.
	Name string `json:"name"`
	// The unique identifier of the entity.
	Id string `json:"id"`
}

// GetName returns GetProjectsByTeamIdTeamProjectsProjectConnectionNodesProject.Name, and is useful for accessing the field via an interface.
func (v *GetProjectsByTeamIdTeamProjectsProjectConnectionNodesProject) GetName() string {
	return v.Name
}

// GetId returns GetProjectsByTeamIdTeamProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *GetProjectsByTeamIdTeamProjectsProjectConnectionNodesProject) GetId() string { return v.Id }

// GetTeamByIdResponse is returned by GetTeamById on success.
type GetTeamByIdResponse struct {
	// One specific team.
	Team GetTeamByIdTeam `json:"team"`
}

// GetTeam returns GetTeamByIdResponse.Team, and is useful for accessing the field via an interface.
func (v *GetTeamByIdResponse) GetTeam() GetTeamByIdTeam { return v.Team }

// GetTeamByIdTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// An organizational unit that contains issues.
type GetTeamByIdTeam struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The team's name.
	Name string `json:"name"`
	// The team's unique key. The key is used in URLs.
	Key string `json:"key"`
}

// GetId returns GetTeamByIdTeam.Id, and is useful for accessing the field via an interface.
func (v *GetTeamByIdTeam) GetId() string { return v.Id }

// GetName returns GetTeamByIdTeam.Name, and is useful for accessing the field via an interface.
func (v *GetTeamByIdTeam) GetName() string { return v.Name }

// GetKey returns GetTeamByIdTeam.Key, and is useful for accessing the field via an interface.
func (v *GetTeamByIdTeam) GetKey() string { return v.Key }

// MoveIssueToTeamIssueUpdateIssuePayload includes the requested fields of the GraphQL type IssuePayload.
type MoveIssueToTeamIssueUpdateIssuePayload struct {
	// The identifier of the last sync operation.
	LastSyncId float64 `json:"lastSyncId"`
}

// GetLastSyncId returns MoveIssueToTeamIssueUpdateIssuePayload.LastSyncId, and is useful for accessing the field via an interface.
func (v *MoveIssueToTeamIssueUpdateIssuePayload) GetLastSyncId() float64 { return v.LastSyncId }

// MoveIssueToTeamResponse is returned by MoveIssueToTeam on success.
type MoveIssueToTeamResponse struct {
	// Updates an issue.
	IssueUpdate MoveIssueToTeamIssueUpdateIssuePayload `json:"issueUpdate"`
}

// GetIssueUpdate returns MoveIssueToTeamResponse.IssueUpdate, and is useful for accessing the field via an interface.
func (v *MoveIssueToTeamResponse) GetIssueUpdate() MoveIssueToTeamIssueUpdateIssuePayload {
	return v.IssueUpdate
}

// __GetProjectsByTeamIdInput is used internally by genqlient
type __GetProjectsByTeamIdInput struct {
	TeamId      string `json:"teamId"`
	ProjectName string `json:"projectName"`
}

// GetTeamId returns __GetProjectsByTeamIdInput.TeamId, and is useful for accessing the field via an interface.
func (v *__GetProjectsByTeamIdInput) GetTeamId() string { return v.TeamId }

// GetProjectName returns __GetProjectsByTeamIdInput.ProjectName, and is useful for accessing the field via an interface.
func (v *__GetProjectsByTeamIdInput) GetProjectName() string { return v.ProjectName }

// __GetTeamByIdInput is used internally by genqlient
type __GetTeamByIdInput struct {
	Id string `json:"id"`
}

// GetId returns __GetTeamByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__GetTeamByIdInput) GetId() string { return v.Id }

// __MoveIssueToTeamInput is used internally by genqlient
type __MoveIssueToTeamInput struct {
	IssueId   string `json:"issueId"`
	TeamId    string `json:"teamId"`
	ProjectId string `json:"projectId"`
}

// GetIssueId returns __MoveIssueToTeamInput.IssueId, and is useful for accessing the field via an interface.
func (v *__MoveIssueToTeamInput) GetIssueId() string { return v.IssueId }

// GetTeamId returns __MoveIssueToTeamInput.TeamId, and is useful for accessing the field via an interface.
func (v *__MoveIssueToTeamInput) GetTeamId() string { return v.TeamId }

// GetProjectId returns __MoveIssueToTeamInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__MoveIssueToTeamInput) GetProjectId() string { return v.ProjectId }

// GetProjectsByTeamID returns a list of projects for a team with matching name
// - teamID: UUID or identifier of the team
// - projectName: name of the project to filter by
// It is possible to return multiple projects with the same name but different IDs
func GetProjectsByTeamId(
	ctx context.Context,
	client graphql.Client,
	teamId string,
	projectName string,
) (*GetProjectsByTeamIdResponse, error) {
	req := &graphql.Request{
		OpName: "GetProjectsByTeamId",
		Query: `
query GetProjectsByTeamId ($teamId: String!, $projectName: String!) {
	team(id: $teamId) {
		projects(filter: {name:{eq:$projectName}}) {
			nodes {
				name
				id
			}
		}
	}
}
`,
		Variables: &__GetProjectsByTeamIdInput{
			TeamId:      teamId,
			ProjectName: projectName,
		},
	}
	var err error

	var data GetProjectsByTeamIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// GetTeamById returns a team by its identifier or UUID
func GetTeamById(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetTeamByIdResponse, error) {
	req := &graphql.Request{
		OpName: "GetTeamById",
		Query: `
query GetTeamById ($id: String!) {
	team(id: $id) {
		id
		name
		key
	}
}
`,
		Variables: &__GetTeamByIdInput{
			Id: id,
		},
	}
	var err error

	var data GetTeamByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// MoveIssueToTeam moves issue between teams
// - issueId: UUID or identifier of the issue to move, required
// - teamId: UUID of the team to move the issue to, required
// - projectId: UUID of the project to move the issue to, optional
func MoveIssueToTeam(
	ctx context.Context,
	client graphql.Client,
	issueId string,
	teamId string,
	projectId string,
) (*MoveIssueToTeamResponse, error) {
	req := &graphql.Request{
		OpName: "MoveIssueToTeam",
		Query: `
mutation MoveIssueToTeam ($issueId: String!, $teamId: String!, $projectId: String) {
	issueUpdate(id: $issueId, input: {teamId:$teamId,projectId:$projectId}) {
		lastSyncId
	}
}
`,
		Variables: &__MoveIssueToTeamInput{
			IssueId:   issueId,
			TeamId:    teamId,
			ProjectId: projectId,
		},
	}
	var err error

	var data MoveIssueToTeamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
