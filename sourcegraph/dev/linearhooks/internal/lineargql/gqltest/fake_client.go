// Code generated by counterfeiter. DO NOT EDIT.
package gqltest

import (
	"context"
	"sync"

	"github.com/Khan/genqlient/graphql"
)

type FakeClient struct {
	MakeRequestStub        func(context.Context, *graphql.Request, *graphql.Response) error
	makeRequestMutex       sync.RWMutex
	makeRequestArgsForCall []struct {
		arg1 context.Context
		arg2 *graphql.Request
		arg3 *graphql.Response
	}
	makeRequestReturns struct {
		result1 error
	}
	makeRequestReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) MakeRequest(arg1 context.Context, arg2 *graphql.Request, arg3 *graphql.Response) error {
	fake.makeRequestMutex.Lock()
	ret, specificReturn := fake.makeRequestReturnsOnCall[len(fake.makeRequestArgsForCall)]
	fake.makeRequestArgsForCall = append(fake.makeRequestArgsForCall, struct {
		arg1 context.Context
		arg2 *graphql.Request
		arg3 *graphql.Response
	}{arg1, arg2, arg3})
	stub := fake.MakeRequestStub
	fakeReturns := fake.makeRequestReturns
	fake.recordInvocation("MakeRequest", []interface{}{arg1, arg2, arg3})
	fake.makeRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) MakeRequestCallCount() int {
	fake.makeRequestMutex.RLock()
	defer fake.makeRequestMutex.RUnlock()
	return len(fake.makeRequestArgsForCall)
}

func (fake *FakeClient) MakeRequestCalls(stub func(context.Context, *graphql.Request, *graphql.Response) error) {
	fake.makeRequestMutex.Lock()
	defer fake.makeRequestMutex.Unlock()
	fake.MakeRequestStub = stub
}

func (fake *FakeClient) MakeRequestArgsForCall(i int) (context.Context, *graphql.Request, *graphql.Response) {
	fake.makeRequestMutex.RLock()
	defer fake.makeRequestMutex.RUnlock()
	argsForCall := fake.makeRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) MakeRequestReturns(result1 error) {
	fake.makeRequestMutex.Lock()
	defer fake.makeRequestMutex.Unlock()
	fake.MakeRequestStub = nil
	fake.makeRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) MakeRequestReturnsOnCall(i int, result1 error) {
	fake.makeRequestMutex.Lock()
	defer fake.makeRequestMutex.Unlock()
	fake.MakeRequestStub = nil
	if fake.makeRequestReturnsOnCall == nil {
		fake.makeRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makeRequestMutex.RLock()
	defer fake.makeRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ graphql.Client = new(FakeClient)
