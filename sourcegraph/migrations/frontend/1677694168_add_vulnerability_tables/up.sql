CREATE TABLE IF NOT EXISTS vulnerabilities (
	id            SERIAL PRIMARY KEY,
	source_id     TEXT NOT NULL,
	summary       TEXT NOT NULL,
	details       TEXT NOT NULL,
	cpes          TEXT[] NOT NULL,
	cwes          TEXT[] NOT NULL,
	aliases       TEXT[] NOT NULL,
	related       TEXT[] NOT NULL,
	data_source   TEXT NOT NULL,
	urls          TEXT[] NOT NULL,
	severity      TEXT NOT NULL,
	cvss_vector   TEXT NOT NULL,
	cvss_score    TEXT NOT NULL,
	published_at  TIMESTAMP WITH TIME ZONE NOT NULL,
	modified_at   TIMESTAMP WITH TIME ZONE,
	withdrawn_at  TIMESTAMP WITH TIME ZONE
);

CREATE UNIQUE INDEX IF NOT EXISTS vulnerabilities_source_id ON vulnerabilities(source_id);

CREATE TABLE IF NOT EXISTS vulnerability_affected_packages (
	id                  SERIAL PRIMARY KEY,
	vulnerability_id    INT NOT NULL,
	package_name        TEXT NOT NULL,
	language            TEXT NOT NULL,
	namespace           TEXT NOT NULL,
	version_constraint  TEXT[] NOT NULL,
	fixed               boolean NOT NULL,
	fixed_in            TEXT,

	CONSTRAINT fk_vulnerabilities FOREIGN KEY (vulnerability_id) REFERENCES vulnerabilities(id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS vulnerability_affected_packages_vulnerability_id_package_name ON vulnerability_affected_packages(vulnerability_id, package_name);

CREATE TABLE IF NOT EXISTS vulnerability_affected_symbols (
	id                                 SERIAL PRIMARY KEY,
	vulnerability_affected_package_id  INT NOT NULL,
	path                               TEXT NOT NULL,
	symbols                            TEXT[] NOT NULL,

	CONSTRAINT fk_vulnerability_affected_packages FOREIGN KEY (vulnerability_affected_package_id) REFERENCES vulnerability_affected_packages(id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS vulnerability_affected_symbols_vulnerability_affected_package_id_path ON vulnerability_affected_symbols(vulnerability_affected_package_id, path);
