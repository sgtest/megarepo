// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1000000000_init.down.sql (19B)
// 1000000000_init.up.sql (19B)
// 1000000001_initial_schema.down.sql (117B)
// 1000000001_initial_schema.up.sql (4.599kB)
// 1000000002_comments.down.sql (411B)
// 1000000002_comments.up.sql (2.942kB)
// 1000000003_insights_series_id.down.sql (16B)
// 1000000003_insights_series_id.up.sql (404B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1000000000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x48\xcd\x2d\x28\xa9\x54\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\xe3\x02\x04\x00\x00\xff\xff\x32\x4d\x68\xbd\x13\x00\x00\x00")

func _1000000000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000000_initDownSql,
		"1000000000_init.down.sql",
	)
}

func _1000000000_initDownSql() (*asset, error) {
	bytes, err := _1000000000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000000_init.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0x46, 0xd1, 0x31, 0xb9, 0x68, 0x19, 0xcc, 0x70, 0xb6, 0x7, 0x20, 0x2e, 0x6a, 0x4d, 0xf1, 0xce, 0xd0, 0xc8, 0xda, 0x50, 0xce, 0x8c, 0xee, 0x52, 0x36, 0x80, 0xd0, 0x5a, 0xd2, 0x7a, 0x82}}
	return a, nil
}

var __1000000000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x48\xcd\x2d\x28\xa9\x54\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\xe3\x02\x04\x00\x00\xff\xff\x32\x4d\x68\xbd\x13\x00\x00\x00")

func _1000000000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000000_initUpSql,
		"1000000000_init.up.sql",
	)
}

func _1000000000_initUpSql() (*asset, error) {
	bytes, err := _1000000000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000000_init.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0x46, 0xd1, 0x31, 0xb9, 0x68, 0x19, 0xcc, 0x70, 0xb6, 0x7, 0x20, 0x2e, 0x6a, 0x4d, 0xf1, 0xce, 0xd0, 0xc8, 0xda, 0x50, 0xce, 0x8c, 0xee, 0x52, 0x36, 0x80, 0xd0, 0x5a, 0xd2, 0x7a, 0x82}}
	return a, nil
}

var __1000000001_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x4e\x2d\xca\x4c\x2d\x8e\x2f\xc8\xcf\xcc\x2b\x29\xb6\xc6\xae\xa6\x28\xb5\x20\x3f\x3e\x2f\x31\x37\x15\x97\x82\xdc\xd4\x92\xc4\x94\xc4\x92\x44\x6b\x2e\x2e\x67\x7f\x5f\x5f\xcf\x10\x6b\x2e\x40\x00\x00\x00\xff\xff\x9c\x41\x09\x13\x75\x00\x00\x00")

func _1000000001_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000001_initial_schemaDownSql,
		"1000000001_initial_schema.down.sql",
	)
}

func _1000000001_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1000000001_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000001_initial_schema.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0xfb, 0x6d, 0xf8, 0xee, 0xf, 0xe8, 0x7d, 0xc6, 0xc8, 0xe4, 0xcc, 0x61, 0x1a, 0x16, 0x4, 0x9c, 0x22, 0x2f, 0xd1, 0x8f, 0x12, 0x38, 0x5, 0xd2, 0x5f, 0x2d, 0x9a, 0x82, 0xcb, 0x5, 0xcf}}
	return a, nil
}

var __1000000001_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xdb\x3a\x12\x7e\xf7\xaf\x18\x9c\x87\x8d\x0d\x28\xca\x7b\xb2\x38\x5d\xd7\x56\x7b\xb4\x27\x91\xbb\xb6\x8b\x6d\x77\xb1\x30\x68\x69\x2c\xb1\xa5\x48\x95\xa4\xe2\x78\x2f\xff\x7d\x31\xa4\xae\x89\xdd\x06\x05\x4e\x5e\x22\x88\xc3\x6f\xbe\xb9\x8f\xfc\x36\x7a\x1f\x27\x77\x93\xc9\x62\x1d\xcd\xb7\x11\x44\x9f\xb6\x51\xb2\x89\x57\x09\xc4\xef\x20\x59\x6d\x21\xfa\x14\x6f\xb6\x1b\xb0\xbc\x44\x93\x32\x81\xd9\xfe\xee\x47\xb2\x55\xbe\xb3\x3a\x2f\x7f\x28\x97\x72\x8b\x4f\xf6\x6e\x32\xb9\xbe\x86\x35\xa6\x4a\x67\x06\x34\x56\xca\x70\xab\xf4\x09\x24\x2b\xd1\x04\xb0\x57\xb6\x80\x82\x1b\xab\x34\x4f\x99\x00\x26\x33\xa8\x34\x1a\x94\x36\x80\xda\x70\x99\x03\x83\x5a\xf2\x6f\x35\x0e\x6f\xef\xe8\xfa\x0e\xe2\x25\xa1\x4f\x6b\xa9\x51\x30\x8b\x19\x58\x05\xb6\x18\x49\xc6\xcb\x70\xd6\x52\xdd\xce\xdf\xde\x47\xee\xd0\xdd\x37\x30\x9d\x00\x00\x5c\x5f\xc3\xb6\x38\x0f\x1f\x3a\x01\x9e\xc1\x9e\xe7\x06\x35\x67\xc2\x99\x98\x7c\xbc\xbf\x87\x0f\xeb\xf8\x61\xbe\xfe\x0c\xbf\x47\x9f\x83\xc9\x10\x88\x2e\x07\x60\x35\xcf\x35\x2b\xaf\xb9\xcc\xf0\x09\x33\x38\x28\x0d\x07\x66\x2c\x60\x98\x87\xa0\x31\xc7\xa7\x0a\x0e\x5c\x58\xd4\x5c\xe6\x5e\x11\xdd\x6c\x1c\xd7\xe9\x69\xb0\x17\xab\x64\xb3\x5d\xcf\xe3\x64\x0b\x69\x81\xe9\x57\x4f\x51\x2a\x89\x65\x65\x4f\xb0\xf8\x2d\x5a\xfc\x0e\xd3\xa9\x43\x58\x7d\x88\xd6\xf3\xed\x6a\x3d\xfd\xf3\xaf\x33\xb8\xba\xba\xbd\xf5\x90\xb3\xd9\x64\xe6\xe3\x11\xc9\x83\xd2\x29\x82\x2d\x98\xf5\x91\x00\xa6\xb1\xf1\x73\xd8\xba\xeb\x63\x12\xff\xed\x63\x04\x71\xb2\x8c\x3e\x0d\xbc\xe6\x35\x7b\xd9\x1d\xcf\x9e\x60\x95\x0c\x4e\x1d\x83\x46\xcd\x42\x23\xb3\xd8\x7a\x02\xbc\x27\x8c\xf3\xc4\xb3\x4c\xe8\x1d\x01\x7b\x66\x30\x03\x25\x87\x7e\x32\x1d\xa7\xf3\x64\x28\x21\xc7\x34\xe0\xe3\x26\x4e\xde\x43\xce\x25\x4c\x85\x3a\xa2\xf6\xae\x99\xdd\xde\x3a\x4f\xd0\x81\xbb\xb5\x53\x95\x21\xb6\xc3\x2c\x65\x7a\xcf\xad\x66\xfa\x04\x25\x5a\x96\x31\xcb\x80\xed\x55\x6d\x01\x1f\x51\x5a\x13\xc2\xc6\x2a\x8d\x19\x70\x09\x0c\x0c\x56\x4c\x3b\x2b\xd9\x5e\x20\x30\x03\xdc\x02\x37\xa0\x0e\x16\x25\x11\x22\x17\x64\x04\x4f\x66\x97\xb5\xb0\xbc\x12\xd8\x42\x8d\x33\xb3\x53\x37\xca\xcb\xee\xed\x4f\xa4\xe3\xc3\xd8\x00\x5b\x70\xe3\x55\x07\xfe\x39\x65\x12\xf6\x08\x4c\x9e\x06\x56\xff\x75\xb3\x4a\x7a\xad\xc7\x82\xa7\x05\x1c\xb9\x10\x24\xa9\xd1\xd6\x5a\x62\xd6\x2a\x38\x16\x28\xe1\x5b\x8d\xfa\x44\xb1\xf3\x56\x05\xae\x8a\x1b\x68\x1f\x58\x1f\x51\x7a\x9d\x6b\x55\x57\x98\x35\xb5\xfd\xc5\x28\xb9\x07\x55\xa1\x66\x56\x69\x03\x6f\x02\x78\xf3\xa7\x00\xde\xfc\x37\x68\x15\xd0\x9d\xbf\xfc\x1a\xc2\x96\xe8\x9a\x42\xd5\x22\x23\x58\x53\x32\x21\xc0\x11\x54\x52\x9c\x02\xa8\x34\x2f\x89\x7c\x6d\x10\x52\x66\x90\x62\xe0\x85\x04\x37\xd6\x80\xa9\xd3\x02\x98\xb9\x6d\x70\x5b\x78\xf8\xcf\x2f\x5f\xd8\x23\xdb\x3d\xa2\x36\x5c\x49\xf3\xcb\x2d\xfc\x33\x0c\xc3\x7f\xfd\x6f\x20\x20\x98\xcc\x6b\x96\x23\x1d\xd2\xdf\x0b\x81\xaa\x16\x62\xa7\xf1\x5b\x8d\xc6\x9e\x45\x60\x52\x2a\xcb\x6c\xa3\xe0\x19\x82\xfb\xd7\xb9\xdb\x7b\xa4\x8d\xea\xd9\x82\xed\x64\xb9\xf9\x6e\xc9\xb6\x72\xbb\xee\x61\x5c\xb4\xed\xeb\x69\xfb\xd0\x28\x8b\xa9\x4e\x7b\x2d\x56\x81\xaa\x2c\x2f\xf9\xbf\x11\xfe\xfe\x5b\xb4\x8e\x20\x15\xac\x36\x68\xe0\xc8\x6d\xd1\x10\xee\x03\xd7\x44\xac\x0f\xea\xb3\xda\x7d\xc9\x8a\x8a\x74\x98\x71\xbe\x74\xdf\xc7\x09\x3c\x67\xd6\x56\xa8\xcf\x33\x50\x8f\xa8\xdd\xec\x02\x66\x8c\x4a\xb9\x1b\x01\x8e\x14\x1b\x36\x98\xa9\xd2\x40\x8d\x32\x00\x1e\x62\x08\xb9\x50\x7b\x26\xc4\x69\x46\xc9\xab\x91\x6a\x98\xcb\x5c\x20\x29\x90\x75\x89\x7e\x10\x3d\x32\x51\xbb\x24\xca\x95\x1b\x42\x4d\x75\x70\x71\x82\xba\x72\x36\x66\xea\x28\xc3\xc9\xf5\xb5\x27\xd6\x69\x6b\xa9\x70\x25\xe9\x7a\xd7\xce\xdc\xa4\x1b\x0d\x26\x87\x42\x5d\x29\x74\x75\x1e\x2f\xdb\x9a\xa9\x8d\x1f\x65\x1a\x0f\x64\xa0\x22\x0d\x0c\x4c\x85\x29\x3f\xf0\x74\x00\x12\x80\xd2\x20\x94\xfa\x5a\x57\x6e\xee\xa5\xb5\xd6\x28\x7d\x4b\x07\x75\x18\xbb\x81\x1d\x2c\x6a\xea\x4e\x05\x33\xb0\x47\xec\x3a\x2c\x49\x67\x64\x49\x37\xbd\x2e\x11\x71\x4a\x5a\xf0\x67\x83\x96\x59\xf7\xc6\x85\xa3\x39\x75\x61\xba\x32\x90\xd2\x1c\xe0\x4a\x06\x6d\x1b\xc4\x27\x56\x52\x17\x24\x44\xcd\x5c\x5e\x23\xa4\x05\x93\x39\xfa\xae\x9a\xb3\x3a\x47\xd8\xb3\xf4\x2b\xc9\x8c\xcc\xd8\x23\xc5\xa3\x63\x3d\x6a\xa0\xd4\x13\xd1\xec\x2a\xc5\x29\x3d\xba\x2e\x3a\x6f\x37\x08\x9e\xa1\xb4\xfc\xc0\x51\x3b\x1a\xa4\xd5\x5f\x21\xc6\x2e\xf7\x5a\x74\xca\x33\xcc\x9a\xb6\xc3\x0d\x48\x65\x81\x49\x8a\xd1\x41\xab\x12\x98\x54\xb6\x40\xdd\x2a\x70\xbd\x3f\x80\x7d\x6d\x41\x33\x3a\x80\x2f\xb5\xb1\xfd\xe6\xd2\xeb\xf5\x1d\xbc\xe1\xc9\x69\x86\x58\xcc\x51\x8f\x17\x08\xb7\x8e\x59\x56\x56\xbd\x9b\x3d\x1f\xef\x51\x8f\xe1\x1c\xbd\x8d\x1f\xa2\xcd\x76\xfe\xf0\x61\xfb\x8f\xe7\x0b\x43\x83\x75\x10\x8a\x59\xb2\xc9\x39\xa5\x49\xeb\x4b\xb1\xf2\xc8\x5e\x26\x53\x35\x0d\xb4\x4a\x63\xca\xa9\x35\x9e\xc1\x9f\xf7\x55\xd7\x15\xaf\xf7\x6b\x3f\x66\xf8\x81\xa6\x4b\x38\x6a\x72\x17\x0d\x1f\x97\xc7\xd4\xb9\x9a\xc8\x95\x8c\xb2\xa2\xaa\x04\x4f\x7d\x61\x2d\xdf\xce\x46\x46\x74\x16\xc0\x91\x35\xf9\x46\xd1\x4b\x94\xc5\x2e\x46\x45\x73\x61\xa0\xa4\x64\x27\x90\x0a\x84\x92\x39\x52\x56\x72\x63\xe1\x86\x12\xff\x91\x09\x9e\x91\x06\x37\xda\x9c\x8e\x00\x0a\x75\xc4\xc7\x36\x84\xfd\x08\x91\xb5\x10\x64\xe6\x98\x03\x25\x0c\xf9\xa2\xed\x2e\xa3\x86\xe4\xfa\x10\x6b\x3a\x91\x4f\xf6\x99\x87\x75\x1b\xcc\x25\xf7\x94\xca\x58\xca\x05\x94\x56\x9c\xe0\xab\x54\x47\xd9\x6c\x4f\x4d\x32\x0f\x3b\x43\x5d\x65\x2e\x32\x15\x6a\xae\x32\xea\x69\xe2\xe4\x8a\x29\x4d\x55\x2d\x3d\x39\x6a\x00\xad\x82\x01\x3f\x5f\x5c\x26\x84\xf8\x45\x95\x93\x69\x19\x0a\xb4\x98\x35\x2b\x04\xcd\x59\x4b\xdb\x81\x3d\xcf\xb0\x73\x13\x35\xba\x3f\xdc\x75\x6e\x1d\x7c\x45\x7a\x39\xb7\xf9\x65\x8d\x54\x7a\x5f\xbe\x22\xa3\x62\xeb\x92\xa6\x60\x8f\xe8\x7b\x68\xd3\x88\x5a\x35\x86\xcb\xb4\x31\x53\x69\x9e\x73\xc9\x68\x33\xf8\x1e\xb1\x48\x9a\x5a\x23\x79\x41\x49\x4f\x71\x34\x42\x0e\x1c\x45\xe6\x9c\xec\xdb\x3f\xf9\x9d\xb6\x1a\xa6\x1b\x35\x2f\x3e\x0c\x9c\x3a\x77\xcd\xec\x9a\x4b\xfd\x07\x82\xbb\x42\x7f\xd3\x69\x9b\x6a\xf1\xc6\x95\xf5\x0c\xe6\xc9\x12\xa6\x23\xb2\xe3\xa3\xf3\x06\xb5\x32\xb3\x0e\x7a\xb5\xbe\xa0\xa5\x69\x20\x97\x34\x8d\x8f\x2f\x6b\x6b\xe5\xbc\xc6\x59\xe3\xca\x77\xab\x75\x14\xbf\x4f\x68\xff\xed\xf7\x86\x1d\xcf\x66\xb0\x8e\xde\x45\xeb\x28\x59\x44\x9b\x7e\xe5\xa1\xf7\xab\x04\x96\xd1\x7d\xb4\x8d\x60\x31\xdf\x2c\xe6\xcb\x08\x96\x24\xb9\xa6\x51\x12\xbc\xc4\x1c\xf2\x18\x81\x0e\x3e\x7e\x7e\x02\xf6\xac\x9d\x3f\x8b\x3f\x19\x7f\x79\x15\xa7\x0a\x75\x33\x9c\x2a\xa6\x2d\xa7\x94\xea\x17\x75\xd8\xfb\xd6\xe6\x66\xff\x06\x11\x0a\x6b\x2b\x73\x7b\x73\x93\xa9\xd4\x84\xdd\x8f\x02\x61\xaa\xca\x1b\xfa\xbe\x36\xf6\xc6\xad\xed\xd7\x83\xdf\x0b\x6e\x7a\x1d\x66\xb2\x89\xee\xa3\xc5\xb6\xa9\x96\x5d\x7f\x32\xbd\x1a\x4d\xe6\xab\x00\xae\x08\xe2\x6a\xcc\x76\x6f\x35\xe2\xa5\xaf\xc4\xc1\x97\xf2\x68\x9d\x1c\x01\xef\x9a\x6c\xdb\x79\xa8\x55\xf2\x6c\x23\xf0\x9b\xa5\x3f\x6c\x33\x73\x76\xf7\x43\xc0\x26\x28\xaf\x47\x6d\xa3\xf8\x5d\xe8\xb3\x81\x7f\x95\x8e\xf3\x29\x73\x37\x99\x2c\x56\x0f\x0f\xf1\xf6\x6e\xf2\xff\x00\x00\x00\xff\xff\xed\xd2\x0f\x96\xf7\x11\x00\x00")

func _1000000001_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000001_initial_schemaUpSql,
		"1000000001_initial_schema.up.sql",
	)
}

func _1000000001_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1000000001_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000001_initial_schema.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0x37, 0xd1, 0x44, 0xf5, 0xf, 0xd, 0x69, 0xa9, 0x4b, 0x3a, 0xcf, 0xa7, 0x76, 0x8f, 0x8f, 0x73, 0x36, 0x4b, 0xb6, 0x40, 0x15, 0xc2, 0x6e, 0xb8, 0xba, 0x8, 0xb8, 0xe, 0x8, 0x20, 0xad}}
	return a, nil
}

var __1000000002_commentsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x31\x6f\xc2\x30\x10\x85\xf7\xfc\x8a\xd7\xb5\x2a\x61\x87\x09\x4a\x5a\x22\x95\x52\x11\x86\x6e\xe8\x12\x1f\xb6\x55\xc7\x8e\xec\x4b\x22\xfe\x7d\x15\x40\xa5\xdb\x49\xf7\xee\x7b\xdf\xad\x8b\xf7\xf2\x73\x99\x65\xb3\x19\x4a\x9f\x38\x0a\x5a\xab\x23\x89\x0d\x1e\x86\x23\xe7\xa8\x98\x71\x28\x56\x9b\x5d\x91\xb7\x2a\xc7\xd6\x6a\xe3\xac\x36\x92\x16\xd3\x11\x9e\xb1\x72\x23\x5d\x12\xfa\xc4\x28\xdf\x50\x7c\x97\xd5\xb1\xca\xc1\x7a\x81\xcd\x61\xff\x85\xe3\x6a\xfd\x51\x3c\x36\xd0\x2e\xd4\xe4\x4e\x8a\xbb\x53\x17\xed\x40\xc2\xcb\x3f\x90\x7b\xb4\x27\xb4\x7d\x12\xd4\x8c\x9a\x9a\x9f\x91\xa2\x9a\x35\xa1\xed\x48\x6c\xed\x38\xc7\xde\x29\x0c\x1c\xd3\x35\x19\xce\xa8\x42\x1f\x1b\xd6\x91\x3a\x73\xa5\x01\x9e\x59\x41\xc2\x44\xa0\xda\xf1\x34\x46\x26\x35\x1f\xa3\x15\x46\x17\xd2\xbf\x57\xf3\xbb\xc1\xd6\x26\x09\xd1\x36\xe4\xdc\x05\x23\x83\xd4\x60\x13\x2b\x90\x26\xeb\x93\x40\x22\xf9\x44\xcd\xcd\x2f\x59\xdf\xf0\x94\x12\x13\x7a\x6d\x04\x62\xf8\xde\x7d\x03\x33\x9c\xad\x23\xc5\x0b\x0c\x79\xe5\x58\xc1\x4a\x8e\x6d\x18\x79\xe0\xf8\x02\x2b\x50\x81\x13\x7c\x90\x27\xcc\xcf\xd4\x70\x47\xae\xcd\xb2\xd7\xfd\x6e\x57\x1e\x97\xd9\x6f\x00\x00\x00\xff\xff\x35\xf2\x37\x95\x9b\x01\x00\x00")

func _1000000002_commentsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000002_commentsDownSql,
		"1000000002_comments.down.sql",
	)
}

func _1000000002_commentsDownSql() (*asset, error) {
	bytes, err := _1000000002_commentsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000002_comments.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9a, 0xf1, 0xc2, 0x2d, 0xbd, 0xa, 0xc5, 0x3f, 0x68, 0xcb, 0x5c, 0x1d, 0x14, 0xe, 0x9c, 0x4a, 0x4, 0x64, 0xa9, 0x95, 0x5b, 0x4e, 0xe8, 0xc8, 0x6c, 0xfc, 0x85, 0x8c, 0xcf, 0xfe, 0xbb, 0x32}}
	return a, nil
}

var __1000000002_commentsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\xaf\xdb\xb6\x0f\x7d\xef\xa7\xe0\xd3\xaf\xbd\x80\xe1\xdf\x07\x28\xb0\xae\xff\xb0\x65\xe8\xcd\x05\xda\x3b\xec\x31\xa0\x2d\xc6\x56\x2b\x8b\xae\x44\x25\x35\xb0\x0f\x3f\x50\xb2\x13\xa7\xcd\x5d\xf3\xb2\x97\x00\xb6\x25\xf2\xf0\x90\xe7\x30\x6f\xde\xff\xb6\xd9\xbe\x7c\xf6\xec\xed\xc3\xfd\xfd\xfb\xed\x23\x3c\x6c\xe1\xf1\xf5\x9b\x0f\xef\xa1\x65\x43\xd6\x47\xdb\xf5\x12\x77\xb1\xed\x69\xc0\xdd\x60\xbb\x80\x62\xd9\x47\xd8\x7c\x82\xe7\xbf\xb3\x33\x11\x10\xa2\xf5\x9d\x23\x68\xd9\xa5\xc1\x43\x14\x0e\xd6\x77\x20\x3d\x41\x14\x94\x14\x81\xf7\xf9\x69\xe0\x28\x10\xa8\x25\x2f\x70\x0a\x05\x28\x42\xc3\x28\xf5\xf3\x97\x6b\x10\x6f\x1f\x3e\xfc\x79\xbf\xfd\x09\x8a\xfa\x40\x21\x6a\x0c\x45\xf3\xa8\xf9\xf2\x09\x58\x5e\x4b\x8f\x02\x47\x8c\x39\xbb\x60\xe8\x48\xfe\x3b\x2c\xc6\x06\x99\x32\x92\xbf\x7a\x92\x9e\x02\x70\x00\xcf\xf2\xf3\x74\xb0\x47\xeb\xc8\x68\xd6\x1f\xfb\x10\x68\xe4\x9d\xc7\x81\x0a\xe7\x1f\xa9\xe5\x60\x62\x7e\x1d\xad\x70\x98\x20\x7f\xac\xa0\x61\xe9\xa1\xb7\x99\xfe\x16\x1d\xa0\x37\x30\x06\x8a\xe4\xa5\x82\xa4\x3d\x02\x84\xe4\xed\xd7\x44\xeb\xdb\x39\xf6\x0e\x36\xef\xe0\x45\xf2\x81\x1c\x0a\x19\x10\xce\xa8\x57\xc7\x36\xef\xea\xbb\xab\xac\x9c\xf1\xd5\xd6\x9c\x1a\x71\x2d\xc1\x75\x56\x57\xf7\xf5\xf7\x5a\x84\xfc\x3e\x8a\x4e\x55\x05\x47\x2b\xfd\x52\x46\xcb\x3e\x4a\x40\xeb\x05\xf6\x1c\x40\xb0\x71\x04\xe4\x25\x4c\x60\xc8\xa4\xd1\xd9\x76\x26\xda\x1b\x90\xa0\xbc\x0f\x60\xbd\xa1\x6f\xf9\x3c\xd5\x5d\x0d\x81\x3a\x7d\xb4\x4e\x48\x13\x5c\x6f\xc2\x40\x82\x06\x05\x2f\x5a\x80\xa1\xb1\x12\x30\x4c\xe7\xcf\xd8\x70\x12\xa0\x03\x79\x89\x35\x7c\x12\x0e\x64\xc0\x7a\xd5\x08\x8d\x18\x50\x68\x06\x89\x11\xac\x80\x55\x69\x08\x79\x2d\x96\x32\xf1\x0a\x6b\x48\x4e\xec\xa8\x95\x94\x38\x57\x69\x5b\x52\xae\x49\x3f\xa3\x7c\x82\xeb\xd3\xa5\x8b\x7a\xee\x2f\xd1\x47\x1e\xe6\xd4\x15\x48\x6f\x23\xb4\xe8\xa1\x21\x40\x3f\xad\x4a\xfe\xe3\xd3\xc3\x16\x68\x98\x6f\x1e\x7b\xdb\xf6\x70\xb4\xce\xe9\xc9\x40\x92\x82\x27\x03\xc7\x9e\x3c\x7c\x4d\x14\x26\x9d\xbe\x52\x4e\x95\x9b\x31\xc7\x2c\xb4\x93\x81\xb9\x47\x5d\xe0\x34\x92\x99\xc7\xf5\x73\x64\xdf\x00\x8f\x14\x50\x38\x44\x78\x55\xc1\xab\xff\x55\xf0\xea\xef\x12\xe3\xd7\x5f\x6a\x78\x54\x80\xb1\xe7\xe4\x8c\xc6\x8b\x03\x3a\x07\x19\x12\x7b\x37\x5d\x6f\x66\xa4\x60\x29\xee\x46\xb6\x5e\x2e\x45\x55\x10\x02\x1f\x28\x80\xd8\x41\xdb\x14\xb9\xb5\xb9\x33\x79\xee\x70\x3d\x96\x2f\xb2\xbe\x3d\x55\x60\x6b\xaa\xa1\x73\xdc\xa0\x73\xd3\x9d\x96\x1d\xe8\xec\x8b\x3e\x0d\x54\x24\x79\x40\x97\x48\xbb\xde\x71\x96\xe3\xcc\xa6\x75\x13\xa4\x31\xd7\x64\xf8\xe8\x6b\x80\x8f\xe7\x2c\x0b\x04\x1d\x63\x1b\xa1\xc1\x58\xe8\xca\x72\xbf\x10\x68\x0e\xa0\x5a\x51\x5a\x48\x5f\xcc\x2c\xa7\x58\x24\x1d\x68\xaf\x85\x31\x42\x1c\xa9\xb5\x7b\xdb\xae\x02\x54\x6a\x57\x8e\xf9\x4b\x1a\xb3\xf6\xdb\x14\x82\xba\x55\x16\x1f\xef\x2f\x4b\xc7\xbd\x50\xd0\x09\xee\x31\x42\x43\xe4\x17\x2d\xe9\x69\x53\xf2\xe7\x8b\x4f\x20\xc8\x19\x96\xc8\xdf\x39\x0d\x16\xc7\xcc\xfc\xcf\x5f\xe7\xbe\xb4\x81\x32\x0f\x55\x51\xef\x37\x1c\x54\x25\x1a\x2d\x60\x4b\x05\x75\x8f\xbe\xa3\x22\xb9\x0e\x53\x47\xd0\x60\xfb\x45\xcf\x5c\xe0\x6f\x48\xf9\x5f\xe0\x5e\xd5\xca\xc5\x94\xd4\xf3\xd3\x2c\xb6\xd7\x8b\x01\x59\x43\x5e\xec\xde\x52\x28\x06\xa4\x2b\x28\x9f\x54\xe4\x79\x0c\x97\x4c\x3a\x60\x85\x19\x1b\xb5\x8f\xba\x18\xd0\x6b\x93\xf6\x81\x07\x40\xcf\x79\x65\x64\x77\xa8\xa0\x49\x02\x01\xf3\x9b\xcf\x29\xca\xd9\xb8\xcf\x09\x6f\x41\x9d\x39\x5c\xdc\x41\x1f\xa2\xe0\x30\x9e\x39\x2f\xa0\x0a\xbd\xb7\xc4\x2b\xf3\xbb\x04\xdc\x3b\x46\xd1\xea\xf2\xd7\x79\xb8\x9f\xea\xde\x2d\xe1\x17\x57\x3a\xd1\x7c\x56\xdf\xc9\xb0\x0a\xcd\x36\x2e\x0e\x65\xf7\x6a\x4c\xb7\x44\xcf\x8b\xe6\xfa\x8a\xd2\xe5\x97\xdb\x90\x57\x35\xea\xf4\x8c\xe7\xe5\xf1\xee\xcd\xdd\x45\x59\xa7\x9a\xf2\x5f\x8b\x3c\x94\xda\xd9\x2d\xab\xbb\xf7\xf3\xc9\x55\xf4\x01\x27\xf0\x0c\x8e\x7d\x47\x3a\xb6\x36\x0a\xfc\x5f\x55\x71\x40\x67\x8d\x86\xce\x16\x99\x83\x57\xd0\xf3\x91\x0e\xb7\xb5\xf7\xb4\x3a\xd7\x65\xad\xfe\x69\xb8\x09\xbe\x78\x3e\xfa\xa2\xb4\x65\x40\xd7\x92\x4f\xa3\xc9\xf4\x8e\x14\x2c\x1b\xf5\x28\x37\x65\xb1\xb4\x2d\xa7\x79\xab\xce\xca\x3e\x95\x53\x54\x13\x6b\xd8\xfc\x20\x5d\xe5\xc3\x90\x23\x21\x33\xef\x0e\x75\x67\xd1\xb5\x20\xff\x02\xad\x06\xf0\xc9\x39\xed\xe5\x25\xb7\x2a\x12\x85\x70\xb2\xd2\xb5\xfb\x66\xd3\xc5\xd9\x76\x8b\xd8\xef\x6e\x61\x8d\x83\xed\xac\x47\xb7\xbb\x4a\xdf\xf7\x7f\x3b\xca\xa2\x56\x30\x05\xef\x0d\x83\xb0\x91\xdc\xf2\x1e\x0f\x54\xbc\x71\xf6\x19\x2d\xa2\xa5\xd3\x4e\xda\x3c\xbe\x7c\xf6\x4f\x00\x00\x00\xff\xff\x92\x02\x1b\xbd\x7e\x0b\x00\x00")

func _1000000002_commentsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000002_commentsUpSql,
		"1000000002_comments.up.sql",
	)
}

func _1000000002_commentsUpSql() (*asset, error) {
	bytes, err := _1000000002_commentsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000002_comments.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x5d, 0x5, 0xc9, 0x3b, 0xda, 0x8d, 0x5c, 0xb2, 0x5f, 0x13, 0x1a, 0x0, 0x9c, 0xd6, 0xa3, 0xf5, 0xed, 0x93, 0x78, 0xff, 0x5e, 0x39, 0x7a, 0x9, 0xfd, 0x8c, 0x6d, 0xbd, 0xaa, 0x11, 0xab}}
	return a, nil
}

var __1000000003_insights_series_idDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\xe6\x02\x04\x00\x00\xff\xff\x80\xfb\x5a\xa5\x10\x00\x00\x00")

func _1000000003_insights_series_idDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000003_insights_series_idDownSql,
		"1000000003_insights_series_id.down.sql",
	)
}

func _1000000003_insights_series_idDownSql() (*asset, error) {
	bytes, err := _1000000003_insights_series_idDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000003_insights_series_id.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0x6c, 0xe7, 0xaa, 0xc6, 0xdb, 0x9b, 0x52, 0x49, 0xad, 0xde, 0x34, 0x6a, 0xa9, 0x90, 0x21, 0x97, 0xcc, 0xcd, 0x35, 0xee, 0xc6, 0xd1, 0x36, 0xf1, 0xa0, 0x6c, 0xe8, 0x73, 0x42, 0x77, 0x41}}
	return a, nil
}

var __1000000003_insights_series_idUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xcd\x4e\xc3\x30\x10\x04\xe0\xbb\x9f\x62\x6e\x80\x44\xfa\x02\x39\xf5\xc7\x54\x91\x12\x07\xb5\xae\x04\xa7\xca\x6d\x36\x74\x25\xb3\x01\x7b\x09\xed\xdb\x73\x28\x54\x94\x1b\xe7\x99\xd1\x37\x33\xbb\xac\x5c\x69\xcc\xc2\xd6\xd6\x5b\x3c\xac\xda\x06\x99\x12\x53\xde\xbe\x0d\x2c\x9a\x4b\x14\x05\x42\xdf\xd3\x5e\x33\x3a\x1a\x41\x32\x72\x1a\xe4\x95\x44\x33\x06\x89\xa7\x7b\x0c\x7a\xa0\x94\x21\x34\x52\xc2\x21\x74\xe8\x82\x06\xb0\x40\x0f\x9c\xa1\x61\x17\x69\x62\xa6\xb5\xb7\x2b\xf8\xe9\xac\xb6\xd7\x02\xce\xc9\xbc\xad\x37\x8d\xfb\x89\xb8\x83\x7f\x7e\xb4\x50\x3a\x6a\xf9\xff\xed\xda\x7a\xb8\xd6\xc3\x6d\xea\xba\x34\xa6\x28\xb0\xe4\x91\x7e\x15\x02\x76\x9a\x88\xc0\xd2\xd1\x11\x99\x65\x4f\xf8\xa4\x9b\x18\xb1\x23\xf4\x1c\x95\x12\xcb\x0b\x06\x01\x2b\x46\x4a\x27\xf4\x89\xde\x3f\x48\x34\x9e\x26\x66\xbe\xb2\x53\x6f\x51\xb9\x85\x7d\xba\x3e\xb4\xbd\x10\xdb\x33\xd0\xba\x3f\x8f\x37\xeb\xca\x2d\xbf\xf5\xdb\x4b\xfb\xae\x34\x66\xde\x36\x4d\xe5\x4b\xf3\x15\x00\x00\xff\xff\x68\x5d\xfa\xc9\x94\x01\x00\x00")

func _1000000003_insights_series_idUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1000000003_insights_series_idUpSql,
		"1000000003_insights_series_id.up.sql",
	)
}

func _1000000003_insights_series_idUpSql() (*asset, error) {
	bytes, err := _1000000003_insights_series_idUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1000000003_insights_series_id.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0x47, 0x12, 0xa0, 0x8c, 0x21, 0xad, 0x6b, 0x31, 0x8b, 0x9f, 0xbe, 0x7a, 0xde, 0xf9, 0xf, 0x1e, 0xcf, 0xf, 0x27, 0xa0, 0x75, 0x29, 0x98, 0x41, 0x30, 0xb9, 0x57, 0xb6, 0x42, 0x8a, 0xe3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1000000000_init.down.sql":               _1000000000_initDownSql,
	"1000000000_init.up.sql":                 _1000000000_initUpSql,
	"1000000001_initial_schema.down.sql":     _1000000001_initial_schemaDownSql,
	"1000000001_initial_schema.up.sql":       _1000000001_initial_schemaUpSql,
	"1000000002_comments.down.sql":           _1000000002_commentsDownSql,
	"1000000002_comments.up.sql":             _1000000002_commentsUpSql,
	"1000000003_insights_series_id.down.sql": _1000000003_insights_series_idDownSql,
	"1000000003_insights_series_id.up.sql":   _1000000003_insights_series_idUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1000000000_init.down.sql":               {_1000000000_initDownSql, map[string]*bintree{}},
	"1000000000_init.up.sql":                 {_1000000000_initUpSql, map[string]*bintree{}},
	"1000000001_initial_schema.down.sql":     {_1000000001_initial_schemaDownSql, map[string]*bintree{}},
	"1000000001_initial_schema.up.sql":       {_1000000001_initial_schemaUpSql, map[string]*bintree{}},
	"1000000002_comments.down.sql":           {_1000000002_commentsDownSql, map[string]*bintree{}},
	"1000000002_comments.up.sql":             {_1000000002_commentsUpSql, map[string]*bintree{}},
	"1000000003_insights_series_id.down.sql": {_1000000003_insights_series_idDownSql, map[string]*bintree{}},
	"1000000003_insights_series_id.up.sql":   {_1000000003_insights_series_idUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
