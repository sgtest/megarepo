#!/usr/bin/env bash

# About $SOFT_FAIL_EXIT_CODES (example value: "1 2 3 4"):
# It's a quick hack to circumvent the problem describe in
# https://github.com/sourcegraph/sourcegraph/issues/27264.

set -e # Not -u because $SOFT_FAIL_EXIT_CODES may not be bound

if [[ "$BUILDKITE_PIPELINE_NAME" != "sourcegraph" ]]; then
  exit 0
fi

if [ "$BUILDKITE_BRANCH" == "main" ]; then
  # It's possible for the exit status to be unset, in the case of an earlier hook failed, so we need to
  # account for that. 
  if [ -n "$BUILDKITE_COMMAND_EXIT_STATUS" ] && [ "$BUILDKITE_COMMAND_EXIT_STATUS" -eq "0" ]; then
    # If the job exit code is either 0 or a soft failt exit code defined by that step, do nothing.
    exit 0
  fi

  # Turn the string of exit codes "1 2 3 4" into an array of strings
  IFS=' ' read -ra codes <<<"$SOFT_FAIL_EXIT_CODES"
  for code in "${codes[@]}"; do
    if [ "$code" == "$BUILDKITE_COMMAND_EXIT_STATUS" ]; then
      # If the Buildkite exit code is a soft fail, do nothing either.
      exit 0
    fi
  done

  # Non-zero exit code and not a soft fail: upload the logs.
  echo "--- Uploading build logs: this only runs if your build has already failed, check the logs above, NOT below!"
  ./enterprise/dev/ci/scripts/upload-build-logs.sh
fi
