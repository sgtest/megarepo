# In this file:
#
# | name                                    | type    | description                                              |
# | --------------------------------------- | ------- | -------------------------------------------------------- |
# | pg_invalid_index_count{datname,relname} | COUNTER | Non-zero value used to tag existence of an invalid index |

pg_invalid_index:
  query: |
    SELECT
        current_database() AS datname,
        pc.relname AS relname,
        1 AS count
    FROM pg_class pc
    JOIN pg_index pi ON pi.indexrelid = pc.oid
    WHERE
        NOT indisvalid AND
        NOT EXISTS (SELECT 1 FROM pg_stat_progress_create_index pci WHERE pci.index_relid = pi.indexrelid)
  metrics:
    - datname:
        usage: "LABEL"
        description: "Name of current database"
    - relname:
        usage: "LABEL"
        description: "Name of the index"
    - count:
        usage: "COUNTER"
        description: "Non-zero value used to tag existence of an invalid index"

# In this file:
#
# | name                                     | type  | description                                                    |
# | --------------------------------- ------ | ----- | -------------------------------------------------------------- |
# | pg_table_size_bytes{datname,relname}     | GAUGE | Total size of this table (including toast, index, toast index) |
# | pg_table_size_indexsize{datname,relname} | GAUGE | Size of all related indexes                                    |
# | pg_table_size_relsize{datname,relname}   | GAUGE | Size of this table itself (main, vm, fsm)                      |
# | pg_table_size_toastsize{datname,relname} | GAUGE | Size of corresponding toast tables                             |
#
# Contents of this file are loosely based off of:
# https://github.com/Vonng/pg_exporter/blob/f682b06630db8e4585aa52df150d0a653bbde07e/conf/810-pg_table_size.yaml

pg_table_size:
  query: |
    SELECT
        CURRENT_CATALOG AS datname,
        r.relname AS relname,
        pg_total_relation_size(r.oid) AS bytes,
        pg_relation_size(r.oid) AS relsize,
        pg_indexes_size(r.oid) AS indexsize,
        pg_total_relation_size(r.reltoastrelid) AS toastsize
    FROM pg_class r
    JOIN pg_namespace n ON n.oid = r.relnamespace
    WHERE
        r.relkind = 'r' AND n.nspname NOT IN ('pg_catalog', 'information_schema');
  metrics:
    - datname:
        usage: 'LABEL'
        description: 'Name of current database'
    - relname:
        usage: 'LABEL'
        description: 'Name of the table'
    - bytes:
        usage: 'GAUGE'
        description: 'Total size of this table (including toast, index, toast index)'
    - indexsize:
        usage: 'GAUGE'
        description: 'Size of all related indexes'
    - relsize:
        usage: 'GAUGE'
        description: 'Size of this table itself (main, vm, fsm)'
    - toastsize:
        usage: 'GAUGE'
        description: 'Size of corresponding toast tables'

# In this file:
#
# | name                                  | type  | description                              |
# | ------------------------------------- | ----- | ---------------------------------------- |
# | pg_index_bloat_ratio{datname,relname} | GAUGE | Estimated bloat ratio of this index, 0~1 |
# | pg_index_bloat_size{datname,relname}  | GAUGE | Total size in bytes of this index        |
# | pg_table_bloat_ratio{datname,relname} | GAUGE | Estimated bloat ratio of this table, 0~1 |
# | pg_table_bloat_size{datname,relname}  | GAUGE | Total size in bytes of this table        |
#
# Contents of this file are loosely based off of:
# https://github.com/Vonng/pg_exporter/blob/f682b06630db8e4585aa52df150d0a653bbde07e/conf/830-pg_index_bloat.yaml

pg_index_bloat:
  query: |
    SELECT CURRENT_CATALOG AS datname, nspname, idxname AS relname, relpages::BIGINT * bs AS size,
           COALESCE((relpages - ( reltuples * (6 + ma - (CASE WHEN index_tuple_hdr % ma = 0 THEN ma ELSE index_tuple_hdr % ma END)
                                + nulldatawidth + ma - (CASE WHEN nulldatawidth % ma = 0 THEN ma ELSE nulldatawidth % ma END))
                       / (bs - pagehdr)::FLOAT  + 1 )), 0) / relpages::FLOAT AS ratio
    FROM (
         SELECT nspname,
                idxname,
                reltuples,
                relpages,
                current_setting('block_size')::INTEGER                                                               AS bs,
                (CASE WHEN version() ~ 'mingw32' OR version() ~ '64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END)  AS ma,
                24                                                                                                   AS pagehdr,
                (CASE WHEN max(COALESCE(pg_stats.null_frac, 0)) = 0 THEN 2 ELSE 6 END)                               AS index_tuple_hdr,
                sum((1.0 - COALESCE(pg_stats.null_frac, 0.0)) *
                    COALESCE(pg_stats.avg_width, 1024))::INTEGER                                                     AS nulldatawidth
         FROM pg_attribute
                  JOIN (
             SELECT pg_namespace.nspname,
                    ic.relname                                                   AS idxname,
                    ic.reltuples,
                    ic.relpages,
                    pg_index.indrelid,
                    pg_index.indexrelid,
                    tc.relname                                                   AS tablename,
                    regexp_split_to_table(pg_index.indkey::TEXT, ' ') :: INTEGER AS attnum,
                    pg_index.indexrelid                                          AS index_oid
             FROM pg_index
                      JOIN pg_class ic ON pg_index.indexrelid = ic.oid
                      JOIN pg_class tc ON pg_index.indrelid = tc.oid
                      JOIN pg_namespace ON pg_namespace.oid = ic.relnamespace
                      JOIN pg_am ON ic.relam = pg_am.oid
             WHERE pg_am.amname = 'btree' AND ic.relpages > 0 AND nspname NOT IN ('pg_catalog', 'information_schema')
         ) ind_atts ON pg_attribute.attrelid = ind_atts.indexrelid AND pg_attribute.attnum = ind_atts.attnum
                  JOIN pg_stats ON pg_stats.schemaname = ind_atts.nspname
                                       AND ((pg_stats.tablename = ind_atts.tablename AND pg_stats.attname = pg_get_indexdef(pg_attribute.attrelid, pg_attribute.attnum, TRUE))
                                                OR (pg_stats.tablename = ind_atts.idxname AND pg_stats.attname = pg_attribute.attname))
         WHERE pg_attribute.attnum > 0
         GROUP BY 1, 2, 3, 4, 5, 6
     ) est;
  metrics:
    - nspname:
        usage: 'LABEL'
        description: 'TODO: Remove me'
    - datname:
        usage: 'LABEL'
        description: 'Name of current database'
    - relname:
        usage: 'LABEL'
        description: 'Name of the index'
    - size:
        usage: 'GAUGE'
        description: 'Total size in bytes of this index'
    - ratio:
        usage: 'GAUGE'
        description: 'Estimated bloat ratio of this index, 0~1'

pg_table_bloat:
  query: |
    SELECT CURRENT_CATALOG AS datname, nspname, relname , bs * tblpages AS size,
           CASE WHEN tblpages - est_tblpages_ff > 0 THEN (tblpages - est_tblpages_ff)/tblpages::FLOAT ELSE 0 END AS ratio
    FROM (
             SELECT ceil( reltuples / ( (bs-page_hdr)*fillfactor/(tpl_size*100) ) ) + ceil( toasttuples / 4 ) AS est_tblpages_ff,
                    tblpages, fillfactor, bs, tblid, nspname, relname, is_na
             FROM (
                      SELECT
                          ( 4 + tpl_hdr_size + tpl_data_size + (2 * ma)
                              - CASE WHEN tpl_hdr_size % ma = 0 THEN ma ELSE tpl_hdr_size % ma END
                              - CASE WHEN ceil(tpl_data_size)::INT % ma = 0 THEN ma ELSE ceil(tpl_data_size)::INT % ma END
                              ) AS tpl_size, (heappages + toastpages) AS tblpages, heappages,
                          toastpages, reltuples, toasttuples, bs, page_hdr, tblid, nspname, relname, fillfactor, is_na
                      FROM (
                               SELECT
                                   tbl.oid AS tblid, ns.nspname , tbl.relname, tbl.reltuples,
                                   tbl.relpages AS heappages, coalesce(toast.relpages, 0) AS toastpages,
                                   coalesce(toast.reltuples, 0) AS toasttuples,
                                   coalesce(substring(array_to_string(tbl.reloptions, ' ') FROM 'fillfactor=([0-9]+)')::smallint, 100) AS fillfactor,
                                   current_setting('block_size')::numeric AS bs,
                                   CASE WHEN version()~'mingw32' OR version()~'64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS ma,
                                   24 AS page_hdr,
                                   23 + CASE WHEN MAX(coalesce(s.null_frac,0)) > 0 THEN ( 7 + count(s.attname) ) / 8 ELSE 0::int END
                                       + CASE WHEN bool_or(att.attname = 'oid' and att.attnum < 0) THEN 4 ELSE 0 END AS tpl_hdr_size,
                                   sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 0) ) AS tpl_data_size,
                                   bool_or(att.atttypid = 'pg_catalog.name'::regtype)
                                       OR sum(CASE WHEN att.attnum > 0 THEN 1 ELSE 0 END) <> count(s.attname) AS is_na
                               FROM pg_attribute AS att
                                        JOIN pg_class AS tbl ON att.attrelid = tbl.oid
                                        JOIN pg_namespace AS ns ON ns.oid = tbl.relnamespace
                                        LEFT JOIN pg_stats AS s ON s.schemaname=ns.nspname AND s.tablename = tbl.relname AND s.inherited=false AND s.attname=att.attname
                                        LEFT JOIN pg_class AS toast ON tbl.reltoastrelid = toast.oid
                               WHERE NOT att.attisdropped AND tbl.relkind = 'r' AND nspname NOT IN ('pg_catalog','information_schema')
                               GROUP BY 1,2,3,4,5,6,7,8,9,10
                           ) AS s
                  ) AS s2
         ) AS s3
    WHERE NOT is_na;
  metrics:
    - nspname:
        usage: 'LABEL'
        description: 'TODO: Remove me'
    - datname:
        usage: 'LABEL'
        description: 'Name of current database'
    - relname:
        usage: 'LABEL'
        description: 'Name of the table'
    - size:
        usage: 'GAUGE'
        description: 'Total size in bytes of this table'
    - ratio:
        usage: 'GAUGE'
        description: 'Estimated bloat ratio of this table, 0~1'

# In this file:
#
# | name                   | type    | description                                |
# | ---------------------- | ------- | ------------------------------------------ |
# | pg_sg_migration_status | GAUGE   | Whether the migration applied successfully |
# |                        |         | This only applies to the frontend db.      |

pg_sg_migration:
  query: |
    WITH ranked_migration_logs AS (
      SELECT
        migration_logs.*,
        ROW_NUMBER() OVER (PARTITION BY version ORDER BY finished_at DESC) AS row_number
      FROM migration_logs
      WHERE schema = 'schema_migrations'
    )
    SELECT EXISTS (
      SELECT 1
      FROM ranked_migration_logs
      WHERE row_number = 1
      AND NOT success
    )::int;
  master: true
  metrics:
    - status:
        usage: "GAUGE"
        description: Whether the migration applied successfully
