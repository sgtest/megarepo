---
source: crates/sg-syntax/src/sg_treesitter.rs
assertion_line: 362
expression: "snapshot_treesitter_syntax_kinds(&document, &contents)"
---
  package snapshots.files;
//^^^^^^^ Keyword
//        ^^^^^^^^^ Identifier
//                  ^^^^^ Identifier
  
  import java.util.concurrent.atomic.AtomicInteger;
//^^^^^^ Keyword
//       ^^^^ Identifier
//            ^^^^ Identifier
//                 ^^^^^^^^^^ Identifier
//                            ^^^^^^ Identifier
//                                   ^^^^^^^^^^^^^ Identifier
  
  @SuppressWarnings("all")
//^ IdentifierOperator
// ^^^^^^^^^^^^^^^^ IdentifierAttribute
//                  ^^^^^ StringLiteral
  public class Java {
//^^^^^^ Keyword
//       ^^^^^ Keyword
//             ^^^^ IdentifierType
      private int x; // field declaration
//    ^^^^^^^ Keyword
//            ^^^ IdentifierBuiltin
//                ^ Identifier
//                   ^^^^^^^^^^^^^^^^^^^^ Comment
      public Java() { // constructor
//    ^^^^^^ Keyword
//           ^^^^ IdentifierType
//                    ^^^^^^^^^^^^^^ Comment
          x = 5; // field access
//        ^ Identifier
//            ^ NumericLiteral
//               ^^^^^^^^^^^^^^^ Comment
      }
      public static void methodWithManyFeatures() {
//    ^^^^^^ Keyword
//           ^^^^^^ Keyword
//                  ^^^^ IdentifierBuiltin
//                       ^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction
          int x = 53;
//        ^^^ IdentifierBuiltin
//            ^ Identifier
//                ^^ NumericLiteral
          new AtomicInteger(x).incrementAndGet();
//        ^^^ Keyword
//            ^^^^^^^^^^^^^ IdentifierType
//                          ^ Identifier
//                             ^^^^^^^^^^^^^^^ IdentifierFunction
          // local variable declaration
//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
          int localVar = 0;
//        ^^^ IdentifierBuiltin
//            ^^^^^^^^ Identifier
//                       ^ NumericLiteral
          // conditional logic - if/else
//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
          if (x > 10) {
//        ^^ Keyword
//            ^ Identifier
//                ^^ NumericLiteral
              System.out.println("x is greater than 10");
//            ^^^^^^ IdentifierType
//                   ^^^ Identifier
//                       ^^^^^^^ IdentifierFunction
//                               ^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
          } else {
//          ^^^^ Keyword
              System.out.println("x is less than or equal to 10");
//            ^^^^^^ IdentifierType
//                   ^^^ Identifier
//                       ^^^^^^^ IdentifierFunction
//                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
          }
          // switch statement
//        ^^^^^^^^^^^^^^^^^^^ Comment
          switch (x) {
//        ^^^^^^ Keyword
//                ^ Identifier
              case 5:
//            ^^^^ Keyword
//                 ^ NumericLiteral
                  System.out.println("x equals 5");
//                ^^^^^^ IdentifierType
//                       ^^^ Identifier
//                           ^^^^^^^ IdentifierFunction
//                                   ^^^^^^^^^^^^ StringLiteral
                  break;
//                ^^^^^ Keyword
              case 10:
//            ^^^^ Keyword
//                 ^^ NumericLiteral
                  System.out.println("x equals 10");
//                ^^^^^^ IdentifierType
//                       ^^^ Identifier
//                           ^^^^^^^ IdentifierFunction
//                                   ^^^^^^^^^^^^^ StringLiteral
                  break;
//                ^^^^^ Keyword
              default:
//            ^^^^^^^ Keyword
                  System.out.println("x does not equal 5 or 10");
//                ^^^^^^ IdentifierType
//                       ^^^ Identifier
//                           ^^^^^^^ IdentifierFunction
//                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
          }
          // loop - for
//        ^^^^^^^^^^^^^ Comment
          for (int i = 0; i < 5; i++) {
//        ^^^ Keyword
//             ^^^ IdentifierBuiltin
//                 ^ Identifier
//                     ^ NumericLiteral
//                        ^ Identifier
//                            ^ NumericLiteral
//                               ^ Identifier
              System.out.println(i);
//            ^^^^^^ IdentifierType
//                   ^^^ Identifier
//                       ^^^^^^^ IdentifierFunction
//                               ^ Identifier
          }
          // loop - while
//        ^^^^^^^^^^^^^^^ Comment
          while (x < 10) {
//        ^^^^^ Keyword
//               ^ Identifier
//                   ^^ NumericLiteral
              x++;
//            ^ Identifier
          }
          switch (x) {
//        ^^^^^^ Keyword
//                ^ Identifier
              case 5 -> System.out.println("x equals 5");
//            ^^^^ Keyword
//                 ^ NumericLiteral
//                      ^^^^^^ IdentifierType
//                             ^^^ Identifier
//                                 ^^^^^^^ IdentifierFunction
//                                         ^^^^^^^^^^^^ StringLiteral
              case 10 -> System.out.println("x equals 10");
//            ^^^^ Keyword
//                 ^^ NumericLiteral
//                       ^^^^^^ IdentifierType
//                              ^^^ Identifier
//                                  ^^^^^^^ IdentifierFunction
//                                          ^^^^^^^^^^^^^ StringLiteral
              default -> System.out.println("x does not equal 5 or 10");
//            ^^^^^^^ Keyword
//                       ^^^^^^ IdentifierType
//                              ^^^ Identifier
//                                  ^^^^^^^ IdentifierFunction
//                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
          }
          // try/catch for exception handling
//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
          try {
//        ^^^ Keyword
              int y = 5 / 0; // will cause ArithmeticException
//            ^^^ IdentifierBuiltin
//                ^ Identifier
//                    ^ NumericLiteral
//                        ^ NumericLiteral
//                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
          } catch (ArithmeticException e) {
//          ^^^^^ Keyword
//                 ^^^^^^^^^^^^^^^^^^^ IdentifierType
//                                     ^ Identifier
              System.out.println("Arithmetic exception occurred: " + e.getMessage());
//            ^^^^^^ IdentifierType
//                   ^^^ Identifier
//                       ^^^^^^^ IdentifierFunction
//                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
//                                                                   ^ Identifier
//                                                                     ^^^^^^^^^^ IdentifierFunction
          }
          // nested class
//        ^^^^^^^^^^^^^^^ Comment
          class InnerClass {
//        ^^^^^ Keyword
//              ^^^^^^^^^^ IdentifierType
              int innerField;
//            ^^^ IdentifierBuiltin
//                ^^^^^^^^^^ Identifier
              InnerClass() {
//            ^^^^^^^^^^ IdentifierType
                  // access outer class field and method
//                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
                  System.out.println(x);
//                ^^^^^^ IdentifierType
//                       ^^^ Identifier
//                           ^^^^^^^ IdentifierFunction
//                                   ^ Identifier
                  methodWithManyFeatures();
//                ^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction
              }
          }
          new InnerClass(); // instantiate nested class
//        ^^^ Keyword
//            ^^^^^^^^^^ IdentifierType
//                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
          // array declaration and access
//        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
          int[] array = new int[3];
//        ^^^ IdentifierBuiltin
//              ^^^^^ Identifier
//                      ^^^ Keyword
//                          ^^^ IdentifierBuiltin
//                              ^ NumericLiteral
          array[0] = 5;
//        ^^^^^ Identifier
//              ^ NumericLiteral
//                   ^ NumericLiteral
          System.out.println(array[0]);
//        ^^^^^^ IdentifierType
//               ^^^ Identifier
//                   ^^^^^^^ IdentifierFunction
//                           ^^^^^ Identifier
//                                 ^ NumericLiteral
          // varargs
//        ^^^^^^^^^^ Comment
          mathOperation(1, 2, 3, 4, 5);
//        ^^^^^^^^^^^^^ IdentifierFunction
//                      ^ NumericLiteral
//                         ^ NumericLiteral
//                            ^ NumericLiteral
//                               ^ NumericLiteral
//                                  ^ NumericLiteral
      }
      // method with varargs parameter
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
      public static void mathOperation(int... nums) {
//    ^^^^^^ Keyword
//           ^^^^^^ Keyword
//                  ^^^^ IdentifierBuiltin
//                       ^^^^^^^^^^^^^ IdentifierFunction
//                                     ^^^ IdentifierBuiltin
//                                            ^^^^ Identifier
          int sum = 0;
//        ^^^ IdentifierBuiltin
//            ^^^ Identifier
//                  ^ NumericLiteral
          for (int n : nums) {
//        ^^^ Keyword
//             ^^^ IdentifierBuiltin
//                 ^ Identifier
//                     ^^^^ Identifier
              sum += n;
//            ^^^ Identifier
//                   ^ Identifier
          }
          System.out.println("sum = " + sum);
//        ^^^^^^ IdentifierType
//               ^^^ Identifier
//                   ^^^^^^^ IdentifierFunction
//                           ^^^^^^^^ StringLiteral
//                                      ^^^ Identifier
      }
      public static void instancePattern() {
//    ^^^^^^ Keyword
//           ^^^^^^ Keyword
//                  ^^^^ IdentifierBuiltin
//                       ^^^^^^^^^^^^^^^ IdentifierFunction
          Object obj = new Integer(42);
//        ^^^^^^ IdentifierType
//               ^^^ Identifier
//                     ^^^ Keyword
//                         ^^^^^^^ IdentifierType
//                                 ^^ NumericLiteral
          if (obj instanceof Integer i) {
//        ^^ Keyword
//            ^^^ Identifier
//                ^^^^^^^^^^ Keyword
//                           ^^^^^^^ IdentifierType
//                                   ^ Identifier
              int x = i; // access Integer fields/methods
//            ^^^ IdentifierBuiltin
//                ^ Identifier
//                    ^ Identifier
//                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
          }
      }
      public static void textBlock() {
//    ^^^^^^ Keyword
//           ^^^^^^ Keyword
//                  ^^^^ IdentifierBuiltin
//                       ^^^^^^^^^ IdentifierFunction
          String textBlock = """
//        ^^^^^^ IdentifierType
//               ^^^^^^^^^ Identifier
//                           ^^^ StringLiteral 83:27..86:15
              This is a text block
              It can contain multiple lines
              """;
          System.out.println(textBlock);
//        ^^^^^^ IdentifierType
//               ^^^ Identifier
//                   ^^^^^^^ IdentifierFunction
//                           ^^^^^^^^^ Identifier
      }
      record InnerRecord(int innerField) {
//    ^^^^^^ Keyword
//           ^^^^^^^^^^^ Identifier
//                       ^^^ IdentifierBuiltin
//                           ^^^^^^^^^^ Identifier
           public InnerRecord() {
//         ^^^^^^ Keyword
//                ^^^^^^^^^^^ IdentifierType
              this(42);
//            ^^^^ IdentifierBuiltin
//                 ^^ NumericLiteral
              System.out.println(42);
//            ^^^^^^ IdentifierType
//                   ^^^ Identifier
//                       ^^^^^^^ IdentifierFunction
//                               ^^ NumericLiteral
              methodWithManyFeatures();
//            ^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction
          }
      }
  
      public static void recordPattern() {
//    ^^^^^^ Keyword
//           ^^^^^^ Keyword
//                  ^^^^ IdentifierBuiltin
//                       ^^^^^^^^^^^^^ IdentifierFunction
          InnerRecord record = new InnerRecord();
//        ^^^^^^^^^^^ IdentifierType
//                    ^^^^^^ Identifier
//                             ^^^ Keyword
//                                 ^^^^^^^^^^^ IdentifierType
          if (record instanceof InnerRecord (int innerField )){
//        ^^ Keyword
//            ^^^^^^ Identifier
//                   ^^^^^^^^^^ Keyword
//                              ^^^^^^^^^^^ IdentifierType
//                                           ^^^ IdentifierBuiltin
//                                               ^^^^^^^^^^ Identifier
              System.out.println(innerField);
//            ^^^^^^ IdentifierType
//                   ^^^ Identifier
//                       ^^^^^^^ IdentifierFunction
//                               ^^^^^^^^^^ Identifier
          }
      }
  
      enum Weekend {
//    ^^^^ Keyword
//         ^^^^^^^ IdentifierType
          SATURDAY, SUNDAY
//        ^^^^^^^^ IdentifierConstant
//                  ^^^^^^ IdentifierConstant
      }
  
      interface Interface {
//    ^^^^^^^^^ Keyword
//              ^^^^^^^^^ IdentifierType
          void abstract_func(int x,int y);
//        ^^^^ IdentifierBuiltin
//             ^^^^^^^^^^^^^ IdentifierFunction
//                           ^^^ IdentifierBuiltin
//                               ^ Identifier
//                                 ^^^ IdentifierBuiltin
//                                     ^ Identifier
          default void default_Fun() {
//        ^^^^^^^ Keyword
//                ^^^^ IdentifierBuiltin
//                     ^^^^^^^^^^^ IdentifierFunction
              System.out.println("This is default method");
//            ^^^^^^ IdentifierType
//                   ^^^ Identifier
//                       ^^^^^^^ IdentifierFunction
//                               ^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
          }
      }
  
  
      public static void lambdaExpression() {
//    ^^^^^^ Keyword
//           ^^^^^^ Keyword
//                  ^^^^ IdentifierBuiltin
//                       ^^^^^^^^^^^^^^^^ IdentifierFunction
          Interface fobj = (int x, int y)->System.out.println(x+y);
//        ^^^^^^^^^ IdentifierType
//                  ^^^^ Identifier
//                          ^^^ IdentifierBuiltin
//                              ^ Identifier
//                                 ^^^ IdentifierBuiltin
//                                     ^ Identifier
//                                         ^^^^^^ IdentifierType
//                                                ^^^ Identifier
//                                                    ^^^^^^^ IdentifierFunction
//                                                            ^ Identifier
//                                                              ^ Identifier
          fobj.abstract_func(5,5);
//        ^^^^ Identifier
//             ^^^^^^^^^^^^^ IdentifierFunction
//                           ^ NumericLiteral
//                             ^ NumericLiteral
          fobj.default_Fun();
//        ^^^^ Identifier
//             ^^^^^^^^^^^ IdentifierFunction
      }
  
      // Static initializer
//    ^^^^^^^^^^^^^^^^^^^^^ Comment
      static {
//    ^^^^^^ Keyword
          var path = Java.class.getResource("/foobar.so").getPath();
//        ^^^ IdentifierType
//            ^^^^ Identifier
//                   ^^^^ IdentifierType
//                        ^^^^^ Keyword
//                              ^^^^^^^^^^^ IdentifierFunction
//                                          ^^^^^^^^^^^^ StringLiteral
//                                                        ^^^^^^^ IdentifierFunction
          System.load(path);
//        ^^^^^^ IdentifierType
//               ^^^^ IdentifierFunction
//                    ^^^^ Identifier
      }
  
      sealed public class SealedClass permits ImplementedSealedClass, ImplementedSealedClass2 {}
//    ^^^^^^ Keyword
//           ^^^^^^ Keyword
//                  ^^^^^ Keyword
//                        ^^^^^^^^^^^ IdentifierType
//                                            ^^^^^^^^^^^^^^^^^^^^^^ IdentifierType
//                                                                    ^^^^^^^^^^^^^^^^^^^^^^^ IdentifierType
      final class ImplementedSealedClass extends SealedClass {}
//    ^^^^^ Keyword
//          ^^^^^ Keyword
//                ^^^^^^^^^^^^^^^^^^^^^^ IdentifierType
//                                       ^^^^^^^ Keyword
//                                               ^^^^^^^^^^^ IdentifierType
      final class ImplementedSealedClass2 extends SealedClass {}
//    ^^^^^ Keyword
//          ^^^^^ Keyword
//                ^^^^^^^^^^^^^^^^^^^^^^^ IdentifierType
//                                        ^^^^^^^ Keyword
//                                                ^^^^^^^^^^^ IdentifierType
  }

