---
source: crates/sg-syntax/src/sg_treesitter.rs
assertion_line: 362
expression: "snapshot_treesitter_syntax_kinds(&document, &contents)"
---
  var a = 'a';
//^^^ Keyword
//    ^ Identifier
//        ^ StringLiteral
//         ^ StringLiteral
//          ^ StringLiteral
  
  var b = function() {};
//^^^ Keyword
//    ^ IdentifierFunction
//        ^^^^^^^^ Keyword
  
  var c = () => {};
//^^^ Keyword
//    ^ IdentifierFunction
  
  var d = async () => {};
//^^^ Keyword
//    ^ IdentifierFunction
//        ^^^^^ Keyword
  
  module.e = 'e';
//^^^^^^ Identifier
//       ^ Identifier
//           ^ StringLiteral
//            ^ StringLiteral
//             ^ StringLiteral
  
  module.f = function() {};
//^^^^^^ Identifier
//       ^ IdentifierFunction
//           ^^^^^^^^ Keyword
  
  module.g = async function() {};
//^^^^^^ Identifier
//       ^ IdentifierFunction
//           ^^^^^ Keyword
//                 ^^^^^^^^ Keyword
  
  module.h = () => {};
//^^^^^^ Identifier
//       ^ IdentifierFunction
  
  function i() {
//^^^^^^^^ Keyword
//         ^ IdentifierFunction
  }
  
  class Person {
//^^^^^ Keyword
//      ^^^^^^ Identifier
    static foo = bar;
//  ^^^^^^ Keyword
//         ^^^ Identifier
//               ^^^ Identifier
  
    getName() {
//  ^^^^^^^ IdentifierFunction
    }
  }
  
  foo(function callback() {
//^^^ IdentifierFunction
//    ^^^^^^^^ Keyword
//             ^^^^^^^^ IdentifierFunction
  })
  
  
  c();
//^ IdentifierFunction
  module.e();
//^^^^^^ Identifier
//       ^ IdentifierFunction
  
  export function keywords() {
//^^^^^^ Keyword
//       ^^^^^^^^ Keyword
//                ^^^^^^^^ IdentifierFunction
    do {} while (a);
//  ^^ Keyword
//        ^^^^^ Keyword
//               ^ Identifier
  
    try {} catch (e) {} finally {}
//  ^^^ Keyword
//         ^^^^^ Keyword
//                ^ Identifier
//                      ^^^^^^^ Keyword
  
    throw e
//  ^^^^^ Keyword
//        ^ Identifier
  }
  
  class A {}
//^^^^^ Keyword
//      ^ Identifier
  const ABC = 1
//^^^^^ Keyword
//      ^^^ Identifier
//            ^ NumericLiteral
  const AB_C1 = 2
//^^^^^ Keyword
//      ^^^^^ Identifier
//              ^ NumericLiteral
  const {AB_C2_D3} = x
//^^^^^ Keyword
//       ^^^^^^^^ Identifier
//                   ^ Identifier
  
  module.exports = function(one, two) {
//^^^^^^ Identifier
//       ^^^^^^^ IdentifierFunction
//                 ^^^^^^^^ Keyword
//                          ^^^ Identifier
//                               ^^^ Identifier
  
    if (something()) {
//  ^^ Keyword
//      ^^^^^^^^^ IdentifierFunction
      let module = null, one = 1;
//    ^^^ Keyword
//        ^^^^^^ Identifier
//                 ^^^^ IdentifierBuiltin
//                       ^^^ Identifier
//                             ^ NumericLiteral
  
      console.log(module, one, two);
//    ^^^^^^^ Identifier
//            ^^^ IdentifierFunction
//                ^^^^^^ Identifier
//                        ^^^ Identifier
//                             ^^^ Identifier
    }
  
    console.log(module, one, two);
//  ^^^^^^^ Identifier
//          ^^^ IdentifierFunction
//              ^^^^^^ Identifier
//                      ^^^ Identifier
//                           ^^^ Identifier
  };
  
  console.log(module, one, two);
//^^^^^^^ Identifier
//        ^^^ IdentifierFunction
//            ^^^^^^ Identifier
//                    ^^^ Identifier
//                         ^^^ Identifier
  
  function one({two: three}, [four]) {
//^^^^^^^^ Keyword
//         ^^^ IdentifierFunction
//              ^^^ Identifier
//                   ^^^^^ Identifier
//                            ^^^^ Identifier
  
    console.log(two, three, four)
//  ^^^^^^^ Identifier
//          ^^^ IdentifierFunction
//              ^^^ Identifier
//                   ^^^^^ Identifier
//                          ^^^^ Identifier
  }
  
  //1. Variables
//^^^^^^^^^^^^^^ Comment
  let name = "Sourcegraph";
//^^^ Keyword
//    ^^^^ Identifier
//           ^ StringLiteral
//            ^^^^^^^^^^^ StringLiteral
//                       ^ StringLiteral
  const age = 2;
//^^^^^ Keyword
//      ^^^ Identifier
//            ^ NumericLiteral
  var skills = ["language model", "natural language processing"];
//^^^ Keyword
//    ^^^^^^ Identifier
//              ^ StringLiteral
//               ^^^^^^^^^^^^^^ StringLiteral
//                             ^ StringLiteral
//                                ^ StringLiteral
//                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
//                                                            ^ StringLiteral
  
  //2. Data types
//^^^^^^^^^^^^^^^ Comment
  const number = 10;
//^^^^^ Keyword
//      ^^^^^^ Identifier
//               ^^ NumericLiteral
  const float = 10.5;
//^^^^^ Keyword
//      ^^^^^ Identifier
//              ^^^^ NumericLiteral
  const string = "hello";
//^^^^^ Keyword
//      ^^^^^^ Identifier
//               ^ StringLiteral
//                ^^^^^ StringLiteral
//                     ^ StringLiteral
  const boolean = true;
//^^^^^ Keyword
//      ^^^^^^^ Identifier
//                ^^^^ IdentifierBuiltin
  const array = [1, 2, 3];
//^^^^^ Keyword
//      ^^^^^ Identifier
//               ^ NumericLiteral
//                  ^ NumericLiteral
//                     ^ NumericLiteral
  const object = {key: "value"};
//^^^^^ Keyword
//      ^^^^^^ Identifier
//                ^^^ IdentifierAttribute
//                     ^ StringLiteral
//                      ^^^^^ StringLiteral
//                           ^ StringLiteral
  const symbol = Symbol();
//^^^^^ Keyword
//      ^^^^^^ Identifier
//               ^^^^^^ IdentifierFunction
  
  //3. Conditional statements
//^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
  if (age > 1) {
//^^ Keyword
//    ^^^ Identifier
//          ^ NumericLiteral
    console.log(`${name} is ${age} years old.`);
//  ^^^^^^^ Identifier
//          ^^^ IdentifierFunction
//              ^ StringLiteral
//               ^^ StringLiteralEscape
//                 ^^^^ Identifier
//                     ^ StringLiteralEscape
//                      ^^^^ StringLiteral
//                          ^^ StringLiteralEscape
//                            ^^^ Identifier
//                               ^ StringLiteralEscape
//                                ^^^^^^^^^^^^ StringLiteral
  } else {
//  ^^^^ Keyword
    console.log(`${name} is a baby.`);
//  ^^^^^^^ Identifier
//          ^^^ IdentifierFunction
//              ^ StringLiteral
//               ^^ StringLiteralEscape
//                 ^^^^ Identifier
//                     ^ StringLiteralEscape
//                      ^^^^^^^^^^^^ StringLiteral
  }
  
  //4. Loop
//^^^^^^^^^ Comment
  for (let i = 0; i < skills.length; i++) {
//^^^ Keyword
//     ^^^ Keyword
//         ^ Identifier
//             ^ NumericLiteral
//                ^ Identifier
//                    ^^^^^^ Identifier
//                           ^^^^^^ Identifier
//                                   ^ Identifier
    console.log(skills[i]);
//  ^^^^^^^ Identifier
//          ^^^ IdentifierFunction
//              ^^^^^^ Identifier
//                     ^ Identifier
  }
  
  //5. Functions
//^^^^^^^^^^^^^^ Comment
  function greet(name) {
//^^^^^^^^ Keyword
//         ^^^^^ IdentifierFunction
//               ^^^^ Identifier
    return `Hello, ${name}!`;
//  ^^^^^^ Keyword
//         ^^^^^^^^ StringLiteral
//                 ^^ StringLiteralEscape
//                   ^^^^ Identifier
//                       ^ StringLiteralEscape
//                        ^^ StringLiteral
  }
  console.log(greet(name));
//^^^^^^^ Identifier
//        ^^^ IdentifierFunction
//            ^^^^^ IdentifierFunction
//                  ^^^^ Identifier
  
  //6. Arrow functions
//^^^^^^^^^^^^^^^^^^^^ Comment
  const multiply = (a, b) => a * b;
//^^^^^ Keyword
//      ^^^^^^^^ IdentifierFunction
//                  ^ Identifier
//                     ^ Identifier
//                           ^ Identifier
//                               ^ Identifier
  console.log(multiply(2, 3));
//^^^^^^^ Identifier
//        ^^^ IdentifierFunction
//            ^^^^^^^^ IdentifierFunction
//                     ^ NumericLiteral
//                        ^ NumericLiteral
  
  //7. Object methods
//^^^^^^^^^^^^^^^^^^^ Comment
  const person = {
//^^^^^ Keyword
//      ^^^^^^ Identifier
    name: "John",
//  ^^^^ IdentifierAttribute
//        ^ StringLiteral
//         ^^^^ StringLiteral
//             ^ StringLiteral
    age: 30,
//  ^^^ IdentifierAttribute
//       ^^ NumericLiteral
    sayHello() {
//  ^^^^^^^^ IdentifierFunction
      console.log(`Hello, my name is ${this.name}.`);
//    ^^^^^^^ Identifier
//            ^^^ IdentifierFunction
//                ^^^^^^^^^^^^^^^^^^^ StringLiteral
//                                   ^^ StringLiteralEscape
//                                     ^^^^ IdentifierBuiltin
//                                         ^ StringLiteral
//                                          ^^^^ Identifier
//                                              ^ StringLiteralEscape
//                                               ^^ StringLiteral
    }
  };
  person.sayHello();
//^^^^^^ Identifier
//       ^^^^^^^^ IdentifierFunction
  
  //8. Destructuring
//^^^^^^^^^^^^^^^^^^ Comment
  const { name: personName, age: personAge } = person;
//^^^^^ Keyword
//        ^^^^ Identifier
//              ^^^^^^^^^^ Identifier
//                          ^^^ Identifier
//                               ^^^^^^^^^ Identifier
//                                             ^^^^^^ Identifier
  console.log(personName, personAge);
//^^^^^^^ Identifier
//        ^^^ IdentifierFunction
//            ^^^^^^^^^^ Identifier
//                        ^^^^^^^^^ Identifier
  
  //9. Spread operator
//^^^^^^^^^^^^^^^^^^^^ Comment
  const newSkills = [...skills, "JavaScript"];
//^^^^^ Keyword
//      ^^^^^^^^^ Identifier
//                      ^^^^^^ Identifier
//                              ^ StringLiteral
//                               ^^^^^^^^^^ StringLiteral
//                                         ^ StringLiteral
  console.log(newSkills);
//^^^^^^^ Identifier
//        ^^^ IdentifierFunction
//            ^^^^^^^^^ Identifier
  
  //10. Rest operator
//^^^^^^^^^^^^^^^^^^^ Comment
  function sum(...numbers) {
//^^^^^^^^ Keyword
//         ^^^ IdentifierFunction
//                ^^^^^^^ Identifier
    let result = 0;
//  ^^^ Keyword
//      ^^^^^^ Identifier
//               ^ NumericLiteral
    for (const number of numbers) {
//  ^^^ Keyword
//       ^^^^^ Keyword
//             ^^^^^^ Identifier
//                    ^^ Keyword
//                       ^^^^^^^ Identifier
      result += number;
//    ^^^^^^ Identifier
//              ^^^^^^ Identifier
    }
    return result;
//  ^^^^^^ Keyword
//         ^^^^^^ Identifier
  }
  console.log(sum(1, 2, 3, 4));
//^^^^^^^ Identifier
//        ^^^ IdentifierFunction
//            ^^^ IdentifierFunction
//                ^ NumericLiteral
//                   ^ NumericLiteral
//                      ^ NumericLiteral
//                         ^ NumericLiteral
  
  //11. Classes
//^^^^^^^^^^^^^ Comment
  class Animal {
//^^^^^ Keyword
//      ^^^^^^ Identifier
    constructor(name, type) {
//  ^^^^^^^^^^^ IdentifierFunction
//              ^^^^ Identifier
//                    ^^^^ Identifier
      this.name = name;
//    ^^^^ IdentifierBuiltin
//         ^^^^ Identifier
//                ^^^^ Identifier
      this.type = type;
//    ^^^^ IdentifierBuiltin
//         ^^^^ Identifier
//                ^^^^ Identifier
    }
    sayHello() {
//  ^^^^^^^^ IdentifierFunction
      console.log(`Hello, I am ${this.name} and I am a ${this.type}.`);
//    ^^^^^^^ Identifier
//            ^^^ IdentifierFunction
//                ^^^^^^^^^^^^^ StringLiteral
//                             ^^ StringLiteralEscape
//                               ^^^^ IdentifierBuiltin
//                                   ^ StringLiteral
//                                    ^^^^ Identifier
//                                        ^ StringLiteralEscape
//                                         ^^^^^^^^^^^^ StringLiteral
//                                                     ^^ StringLiteralEscape
//                                                       ^^^^ IdentifierBuiltin
//                                                           ^ StringLiteral
//                                                            ^^^^ Identifier
//                                                                ^ StringLiteralEscape
//                                                                 ^^ StringLiteral
    }
  }
  const cat = new Animal("Tom", "cat");
//^^^^^ Keyword
//      ^^^ Identifier
//            ^^^ Keyword
//                ^^^^^^ Identifier
//                       ^ StringLiteral
//                        ^^^ StringLiteral
//                           ^ StringLiteral
//                              ^ StringLiteral
//                               ^^^ StringLiteral
//                                  ^ StringLiteral
  cat.sayHello();
//^^^ Identifier
//    ^^^^^^^^ IdentifierFunction
  
  //12. Inheritance
//^^^^^^^^^^^^^^^^^ Comment
  class Dog extends Animal {
//^^^^^ Keyword
//      ^^^ Identifier
//          ^^^^^^^ Keyword
//                  ^^^^^^ Identifier
    constructor(name, breed) {
//  ^^^^^^^^^^^ IdentifierFunction
//              ^^^^ Identifier
//                    ^^^^^ Identifier
      super(name, "dog");
//    ^^^^^ IdentifierBuiltin
//          ^^^^ Identifier
//                ^ StringLiteral
//                 ^^^ StringLiteral
//                    ^ StringLiteral
      this.breed = breed;
//    ^^^^ IdentifierBuiltin
//         ^^^^^ Identifier
//                 ^^^^^ Identifier
    }
    sayHello() {
//  ^^^^^^^^ IdentifierFunction
      console.log(`Hello, I am ${this.name} and I am a ${this.breed} breed ${this.type}.`);
//    ^^^^^^^ Identifier
//            ^^^ IdentifierFunction
//                ^^^^^^^^^^^^^ StringLiteral
//                             ^^ StringLiteralEscape
//                               ^^^^ IdentifierBuiltin
//                                   ^ StringLiteral
//                                    ^^^^ Identifier
//                                        ^ StringLiteralEscape
//                                         ^^^^^^^^^^^^ StringLiteral
//                                                     ^^ StringLiteralEscape
//                                                       ^^^^ IdentifierBuiltin
//                                                           ^ StringLiteral
//                                                            ^^^^^ Identifier
//                                                                 ^ StringLiteralEscape
//                                                                  ^^^^^^^ StringLiteral
//                                                                         ^^ StringLiteralEscape
//                                                                           ^^^^ IdentifierBuiltin
//                                                                               ^ StringLiteral
//                                                                                ^^^^ Identifier
//                                                                                    ^ StringLiteralEscape
//                                                                                     ^^ StringLiteral
    }
  }
  const dog = new Dog("Max", "Labrador");
//^^^^^ Keyword
//      ^^^ Identifier
//            ^^^ Keyword
//                ^^^ Identifier
//                    ^ StringLiteral
//                     ^^^ StringLiteral
//                        ^ StringLiteral
//                           ^ StringLiteral
//                            ^^^^^^^^ StringLiteral
//                                    ^ StringLiteral
  dog.sayHello();
//^^^ Identifier
//    ^^^^^^^^ IdentifierFunction
  
  //13. Template literals
//^^^^^^^^^^^^^^^^^^^^^^^ Comment
  const message = `${name} is a ${age}-year-old ${skills[0]}.`;
//^^^^^ Keyword
//      ^^^^^^^ Identifier
//                ^ StringLiteral
//                 ^^ StringLiteralEscape
//                   ^^^^ Identifier
//                       ^ StringLiteralEscape
//                        ^^^^^^ StringLiteral
//                              ^^ StringLiteralEscape
//                                ^^^ Identifier
//                                   ^ StringLiteralEscape
//                                    ^^^^^^^^^^ StringLiteral
//                                              ^^ StringLiteralEscape
//                                                ^^^^^^ Identifier
//                                                      ^ StringLiteral
//                                                       ^ NumericLiteral
//                                                        ^ StringLiteral
//                                                         ^ StringLiteralEscape
//                                                          ^^ StringLiteral
  console.log(message);
//^^^^^^^ Identifier
//        ^^^ IdentifierFunction
//            ^^^^^^^ Identifier
  
  //14. Ternary operator
//^^^^^^^^^^^^^^^^^^^^^^ Comment
  const result = (age > 18) ? "Adult" : "Child";
//^^^^^ Keyword
//      ^^^^^^ Identifier
//                ^^^ Identifier
//                      ^^ NumericLiteral
//                            ^ StringLiteral
//                             ^^^^^ StringLiteral
//                                  ^ StringLiteral
//                                      ^ StringLiteral
//                                       ^^^^^ StringLiteral
//                                            ^ StringLiteral
  console.log(result);
//^^^^^^^ Identifier
//        ^^^ IdentifierFunction
//            ^^^^^^ Identifier
  
  //15. Map
//^^^^^^^^^ Comment
  const numbers = [1, 2, 3, 4];
//^^^^^ Keyword
//      ^^^^^^^ Identifier
//                 ^ NumericLiteral
//                    ^ NumericLiteral
//                       ^ NumericLiteral
//                          ^ NumericLiteral
  const doubledNumbers = numbers.map(number => number * 2);
//^^^^^ Keyword
//      ^^^^^^^^^^^^^^ Identifier
//                       ^^^^^^^ Identifier
//                               ^^^ IdentifierFunction
//                                   ^^^^^^ Identifier
//                                             ^^^^^^ Identifier
//                                                      ^ NumericLiteral

