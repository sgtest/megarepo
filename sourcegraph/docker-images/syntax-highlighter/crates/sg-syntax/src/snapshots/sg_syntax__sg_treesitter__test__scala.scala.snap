---
source: crates/sg-syntax/src/sg_treesitter.rs
expression: "snapshot_treesitter_syntax_kinds(&document, &contents)"
---
  package foobar
//^^^^^^^ Keyword
//        ^^^^^^ Identifier
  
  import scala.collection.immutable.List
//^^^^^^ Keyword
//       ^^^^^ Identifier
//             ^^^^^^^^^^ Identifier
//                        ^^^^^^^^^ Identifier
//                                  ^^^^ IdentifierConstant
  
  // Comment
//^^^^^^^^^^ Comment
  case class Foo(x: Int, y: String) extends AnyVal
//^^^^ Keyword
//     ^^^^^ Keyword
//           ^^^ IdentifierType
//               ^ Identifier
//                  ^^^ IdentifierType
//                       ^ Identifier
//                          ^^^^^^ IdentifierType
//                                  ^^^^^^^ Keyword
//                                          ^^^^^^ IdentifierType
  /** Docstring */
//^^^^^^^^^^^^^^^^ Comment
  object Foo {
//^^^^^^ Keyword
//       ^^^ IdentifierConstant
    val x: Int = 42
//  ^^^ Keyword
//      ^ Identifier
//         ^^^ IdentifierType
//               ^^ NumericLiteral
    val y: Double = 42.0
//  ^^^ Keyword
//      ^ Identifier
//         ^^^^^^ IdentifierType
//                  ^^^^ NumericLiteral
    val z = s"hello $x" + "hello world"
//  ^^^ Keyword
//      ^ Identifier
//          ^ Identifier
//           ^^^^^^^^ StringLiteral
//                   ^ Identifier
//                    ^ StringLiteral
//                      ^ Identifier
//                        ^^^^^^^^^^^^^ StringLiteral
    val a: Map[Int, Int] = Map.empty
//  ^^^ Keyword
//      ^ Identifier
//         ^^^ IdentifierType
//             ^^^ IdentifierType
//                  ^^^ IdentifierType
//                         ^^^ IdentifierConstant
//                             ^^^^^ Identifier
    val b: Foo = Foo(x = 42)
//  ^^^ Keyword
//      ^ Identifier
//         ^^^ IdentifierType
//               ^^^ IdentifierFunction
//                   ^ Identifier
//                       ^^ NumericLiteral
    lazy val c = 'a'
//  ^^^^ Keyword
//       ^^^ Keyword
//           ^ Identifier
//               ^^^ CharacterLiteral
    var d = 1.4f
//  ^^^ Keyword
//      ^ Identifier
//          ^^^^ NumericLiteral
    val e = true
//  ^^^ Keyword
//      ^ Identifier
//          ^^^^ BooleanLiteral
    val f = null
//  ^^^ Keyword
//      ^ Identifier
//          ^^^^ IdentifierNull
    def main(args: Array[String]): Unit = {
//  ^^^ Keyword
//      ^^^^ IdentifierFunction
//           ^^^^ Identifier
//                 ^^^^^ IdentifierType
//                       ^^^^^^ IdentifierType
//                                 ^^^^ IdentifierType
      println(args.toList)
//    ^^^^^^^ IdentifierFunction
//            ^^^^ Identifier
//                 ^^^^^^ Identifier
      System.out.println(args.toList)
//    ^^^^^^ IdentifierConstant
//           ^^^ Identifier
//               ^^^^^^^ IdentifierFunction
//                       ^^^^ Identifier
//                            ^^^^^^ Identifier
      args(1).indexOf("a")
//    ^^^^ IdentifierFunction
//         ^ NumericLiteral
//            ^^^^^^^ IdentifierFunction
//                    ^^^ StringLiteral
      args.toList match {
//    ^^^^ Identifier
//         ^^^^^^ Identifier
//                ^^^^^ Keyword
          case 1 :: 2 :: Nil =>
//        ^^^^ Keyword
//             ^ NumericLiteral
//               ^^ Identifier
//                  ^ NumericLiteral
//                    ^^ Identifier
//                       ^^^ IdentifierConstant
          case a :: Nil =>
//        ^^^^ Keyword
//             ^ Identifier
//               ^^ Identifier
//                  ^^^ IdentifierConstant
          case Some(x) =>
//        ^^^^ Keyword
//             ^^^^ Identifier
//                  ^ Identifier
      }
    }
    private def privateMethod = 42
//  ^^^^^^^ Keyword
//          ^^^ Keyword
//              ^^^^^^^^^^^^^ IdentifierFunction
//                              ^^ NumericLiteral
    protected def protectedMethod = 42
//  ^^^^^^^^^ Keyword
//            ^^^ Keyword
//                ^^^^^^^^^^^^^^^ IdentifierFunction
//                                  ^^ NumericLiteral
    private[this] def privateThisMethod = 42
//  ^^^^^^^ Keyword
//          ^^^^ IdentifierBuiltin
//                ^^^ Keyword
//                    ^^^^^^^^^^^^^^^^^ IdentifierFunction
//                                        ^^ NumericLiteral
    private[foobar] def privatePackageMethod = 42
//  ^^^^^^^ Keyword
//          ^^^^^^ Identifier
//                  ^^^ Keyword
//                      ^^^^^^^^^^^^^^^^^^^^ IdentifierFunction
//                                             ^^ NumericLiteral
    type MyMap[A, B] = Map[A, B]
//  ^^^^ Keyword
//       ^^^^^ IdentifierType
//             ^ IdentifierType
//                ^ IdentifierType
//                     ^^^ IdentifierType
//                         ^ IdentifierType
//                            ^ IdentifierType
    trait MyTrait[T] extends SuperTrait[T]
//  ^^^^^ Keyword
//        ^^^^^^^ IdentifierType
//                ^ IdentifierType
//                   ^^^^^^^ Keyword
//                           ^^^^^^^^^^ IdentifierType
//                                      ^ IdentifierType
    enum X { case A, B }
//  ^^^^ Keyword
//       ^ IdentifierConstant
//           ^^^^ Keyword
//                ^ IdentifierConstant
//                   ^ IdentifierConstant
  }

