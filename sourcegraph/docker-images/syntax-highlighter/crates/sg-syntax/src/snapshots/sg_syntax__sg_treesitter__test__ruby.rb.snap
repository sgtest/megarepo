---
source: crates/sg-syntax/src/sg_treesitter.rs
assertion_line: 362
expression: "snapshot_treesitter_syntax_kinds(&document, &contents)"
---
  #!/usr/bin/env ruby
//^^^^^^^^^^^^^^^^^^^ Comment
  # Comments - this is a comment
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
  # Variables
//^^^^^^^^^^^ Comment
  foo = "bar"
//^^^ Identifier
//    ^ IdentifierOperator
//      ^ StringLiteral
//       ^^^ StringLiteral
//          ^ StringLiteral
  baz = 1
//^^^ Identifier
//    ^ IdentifierOperator
//      ^ NumericLiteral
  # Strings
//^^^^^^^^^ Comment
  hello = "Hello world"
//^^^^^ Identifier
//      ^ IdentifierOperator
//        ^ StringLiteral
//         ^^^^^^^^^^^ StringLiteral
//                    ^ StringLiteral
  hello = 'Hello world'
//^^^^^ Identifier
//      ^ IdentifierOperator
//        ^ StringLiteral
//         ^^^^^^^^^^^ StringLiteral
//                    ^ StringLiteral
  multiline_string = """This
//^^^^^^^^^^^^^^^^ Identifier
//                 ^ IdentifierOperator
//                   ^ StringLiteral
//                    ^ StringLiteral
//                     ^ StringLiteral
//                      ^^^^ StringLiteral 8:22..12:6
  is
  a
  multiline
  string"""
//      ^ StringLiteral
//       ^ StringLiteral
//        ^ StringLiteral
  multiline_string = <<~END_OF_STRING
//^^^^^^^^^^^^^^^^ Identifier
//                 ^ IdentifierOperator
//                                    StringLiteral 13:35..17:0
    This is a multiline string.
    It can contain multiple lines of text.
    And it preserves all whitespace and formatting.
  END_OF_STRING
  
  puts multiline_string
//^^^^ IdentifierFunction
//     ^^^^^^^^^^^^^^^^ Identifier
  # Arrays
//^^^^^^^^ Comment
  array = [1, 2, 3]
//^^^^^ Identifier
//      ^ IdentifierOperator
//         ^ NumericLiteral
//            ^ NumericLiteral
//               ^ NumericLiteral
  # Hashes
//^^^^^^^^ Comment
  hash = {foo: "bar", baz: 1}
//^^^^ Identifier
//     ^ IdentifierOperator
//        ^^^ CharacterLiteral
//             ^ StringLiteral
//              ^^^ StringLiteral
//                 ^ StringLiteral
//                    ^^^ CharacterLiteral
//                         ^ NumericLiteral
  # Ranges
//^^^^^^^^ Comment
  (1..5).each { |n| print n } # Prints 1 2 3 4 5
// ^ NumericLiteral
//    ^ NumericLiteral
//       ^^^^ IdentifierFunction
//               ^ IdentifierParameter
//                  ^^^^^ IdentifierFunction
//                        ^ Identifier
//                            ^^^^^^^^^^^^^^^^^^ Comment
  # Control flow
//^^^^^^^^^^^^^^ Comment
  if foo == "bar"
//^^ Keyword
//   ^^^ Identifier
//          ^ StringLiteral
//           ^^^ StringLiteral
//              ^ StringLiteral
    puts "Foo is bar!"
//  ^^^^ IdentifierFunction
//       ^ StringLiteral
//        ^^^^^^^^^^^ StringLiteral
//                   ^ StringLiteral
  elsif foo == "baz"
//^^^^^ Keyword
//      ^^^ Identifier
//             ^ StringLiteral
//              ^^^ StringLiteral
//                 ^ StringLiteral
    puts "Foo is baz!"
//  ^^^^ IdentifierFunction
//       ^ StringLiteral
//        ^^^^^^^^^^^ StringLiteral
//                   ^ StringLiteral
  else
//^^^^ Keyword
    puts "Foo is something else!"
//  ^^^^ IdentifierFunction
//       ^ StringLiteral
//        ^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
//                              ^ StringLiteral
  end
//^^^ Keyword
  # Methods
//^^^^^^^^^ Comment
  def hello
//^^^ Keyword
//    ^^^^^ IdentifierFunction
    "Hello!"
//  ^ StringLiteral
//   ^^^^^^ StringLiteral
//         ^ StringLiteral
  end
//^^^ Keyword
  puts hello # Prints "Hello!"
//^^^^ IdentifierFunction
//     ^^^^^ Identifier
//           ^^^^^^^^^^^^^^^^^ Comment
  # Classes
//^^^^^^^^^ Comment
  class Dog
//^^^^^ Keyword
//      ^^^ Identifier
    def bark
//  ^^^ Keyword
//      ^^^^ IdentifierFunction
      "Woof!"
//    ^ StringLiteral
//     ^^^^^ StringLiteral
//          ^ StringLiteral
    end
//  ^^^ Keyword
  end
//^^^ Keyword
  fido = Dog.new
//^^^^ Identifier
//     ^ IdentifierOperator
//       ^^^ Identifier
//           ^^^ IdentifierFunction
  puts fido.bark # Prints "Woof!"
//^^^^ IdentifierFunction
//     ^^^^ Identifier
//          ^^^^ IdentifierFunction
//               ^^^^^^^^^^^^^^^^ Comment
  
  class Person
//^^^^^ Keyword
//      ^^^^^^ Identifier
    @@count = 0
//  ^^^^^^^ IdentifierAttribute
//          ^ IdentifierOperator
//            ^ NumericLiteral
    def initialize(name)
//  ^^^ Keyword
//      ^^^^^^^^^^ IdentifierFunction
//                 ^^^^ IdentifierParameter
      @name = name
//    ^^^^^ IdentifierAttribute
//          ^ IdentifierOperator
//            ^^^^ Identifier
      @@count += 1
//    ^^^^^^^ IdentifierAttribute
//               ^ NumericLiteral
    end
//  ^^^ Keyword
    def greet
//  ^^^ Keyword
//      ^^^^^ IdentifierFunction
      puts "Hello, I'm #{@name}! Count is #{@@count}"
//    ^^^^ IdentifierFunction
//         ^ StringLiteral
//          ^^^^^^^^^^^ StringLiteral
//                     ^^ StringLiteralEscape
//                       ^^^^^ IdentifierAttribute
//                            ^ StringLiteralEscape
//                             ^^^^^^^^^^^ StringLiteral
//                                        ^^ StringLiteralEscape
//                                          ^^^^^^^ IdentifierAttribute
//                                                 ^ StringLiteralEscape
//                                                  ^ StringLiteral
    end
//  ^^^ Keyword
  end
//^^^ Keyword
  # Usage:
//^^^^^^^^ Comment
  person = Person.new("John")
//^^^^^^ Identifier
//       ^ IdentifierOperator
//         ^^^^^^ Identifier
//                ^^^ IdentifierFunction
//                    ^ StringLiteral
//                     ^^^^ StringLiteral
//                         ^ StringLiteral
  person.greet # Prints "Hello, I'm John!"
//^^^^^^ Identifier
//       ^^^^^ IdentifierFunction
//             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
  
  def banana
//^^^ Keyword
//    ^^^^^^ IdentifierFunction
    File.open('foobar', mode: 'w') do |banana|
//  ^^^^ Identifier
//       ^^^^ IdentifierFunction
//            ^ StringLiteral
//             ^^^^^^ StringLiteral
//                   ^ StringLiteral
//                      ^^^^ CharacterLiteral
//                            ^ StringLiteral
//                             ^ StringLiteral
//                              ^ StringLiteral
//                                 ^^ Keyword
//                                     ^^^^^^ IdentifierParameter
            banana << "yummy\n"
//          ^^^^^^ Identifier
//                    ^ StringLiteral
//                     ^^^^^ StringLiteral
//                          ^^ StringLiteralEscape
//                            ^ StringLiteral
    end
//  ^^^ Keyword
  
    if __FILE__ == $0
//  ^^ Keyword
//     ^^^^^^^^ IdentifierBuiltin
//                 ^^ Identifier
      output_path = File.dirname($0) + 'snapshots.txt'
//    ^^^^^^^^^^^ Identifier
//                ^ IdentifierOperator
//                  ^^^^ Identifier
//                       ^^^^^^^ IdentifierFunction
//                               ^^ Identifier
//                                     ^ StringLiteral
//                                      ^^^^^^^^^^^^^ StringLiteral
//                                                   ^ StringLiteral
    end
//  ^^^ Keyword
  
  end
//^^^ Keyword
  
  
  def regexp
//^^^ Keyword
//    ^^^^^^ IdentifierFunction
    regex = /foo\.bar/
//  ^^^^^ Identifier
//        ^ IdentifierOperator
//          ^ StringLiteral
//           ^^^ StringLiteral
//              ^^ StringLiteralEscape
//                ^^^ StringLiteral
//                   ^ StringLiteral
    # Matches "foo.bar"
//  ^^^^^^^^^^^^^^^^^^^ Comment
    regex = /foo\.bar/i
//  ^^^^^ Identifier
//        ^ IdentifierOperator
//          ^ StringLiteral
//           ^^^ StringLiteral
//              ^^ StringLiteralEscape
//                ^^^ StringLiteral
//                   ^^ StringLiteral
    # Case insensitive match, matches "foo.bar" or "Foo.Bar" or "FOO.BAR" etc.
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
    regex = /f.*o/
//  ^^^^^ Identifier
//        ^ IdentifierOperator
//          ^ StringLiteral
//           ^^^^ StringLiteral
//               ^ StringLiteral
    # Uses . as a wildcard, matches "fo", "fido", "f1o", etc.
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
    regex = /f[io]o/
//  ^^^^^ Identifier
//        ^ IdentifierOperator
//          ^ StringLiteral
//           ^^^^^^ StringLiteral
//                 ^ StringLiteral
    # Uses [] for a union, matches "foo" or "fioo"
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
    # And you can use \ to escape special characters:
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
    regex = /f\.o/
//  ^^^^^ Identifier
//        ^ IdentifierOperator
//          ^ StringLiteral
//           ^ StringLiteral
//            ^^ StringLiteralEscape
//              ^ StringLiteral
//               ^ StringLiteral
    # Matches "f.o" (with a literal .)
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
  end
//^^^ Keyword
  
  def interpolation
//^^^ Keyword
//    ^^^^^^^^^^^^^ IdentifierFunction
    STDERR.puts "Parsing #{something.sub(another_thing, '')}"
//  ^^^^^^ Identifier
//         ^^^^ IdentifierFunction
//              ^ StringLiteral
//               ^^^^^^^^ StringLiteral
//                       ^^ StringLiteralEscape
//                         ^^^^^^^^^ Identifier
//                                   ^^^ IdentifierFunction
//                                       ^^^^^^^^^^^^^ Identifier
//                                                      ^ StringLiteral
//                                                       ^ StringLiteral
//                                                         ^ StringLiteralEscape
//                                                          ^ StringLiteral
    multiline_interpolation = """This
//  ^^^^^^^^^^^^^^^^^^^^^^^ Identifier
//                          ^ IdentifierOperator
//                            ^ StringLiteral
//                             ^ StringLiteral
//                              ^ StringLiteral
//                               ^^^^ StringLiteral 90:31..91:5
    is #{hello}
//     ^^ StringLiteralEscape
//       ^^^^^ Identifier
//            ^ StringLiteralEscape
//              StringLiteral 91:13..92:4
    a #{hello}
//    ^^ StringLiteralEscape
//      ^^^^^ Identifier
//           ^ StringLiteralEscape
//             StringLiteral 92:12..94:8
    multiline
    string"""
//        ^ StringLiteral
//         ^ StringLiteral
//          ^ StringLiteral
  end
//^^^ Keyword
  
  def more_stuff(mine)
//^^^ Keyword
//    ^^^^^^^^^^ IdentifierFunction
//               ^^^^ IdentifierParameter
    text = mine.foos().qux(&:horse).join.strip
//  ^^^^ Identifier
//       ^ IdentifierOperator
//         ^^^^ Identifier
//              ^^^^ IdentifierFunction
//                     ^^^ IdentifierFunction
//                          ^^^^^^ CharacterLiteral
//                                  ^^^^ IdentifierFunction
//                                       ^^^^^ IdentifierFunction
    if text.empty?
//  ^^ Keyword
//     ^^^^ Identifier
//          ^^^^^^ IdentifierFunction
      nil
//    ^^^ IdentifierNull
    else
//  ^^^^ Keyword
      text
//    ^^^^ Identifier
    end
//  ^^^ Keyword
  end
//^^^ Keyword

