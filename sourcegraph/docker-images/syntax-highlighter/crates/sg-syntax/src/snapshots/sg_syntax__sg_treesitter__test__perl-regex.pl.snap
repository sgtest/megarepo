---
source: crates/sg-syntax/src/sg_treesitter.rs
assertion_line: 362
expression: "snapshot_treesitter_syntax_kinds(&document, &contents)"
---
  package URI;
//^^^^^^^ Keyword
//        ^^^ IdentifierType
  
  use strict;
//^^^ Keyword
//    ^^^^^^ IdentifierType
  use vars qw($VERSION);
//^^^ Keyword
//    ^^^^ IdentifierType
//         ^^^^^^^^^^^^ StringLiteral
  
  sub new
//^^^ Keyword
//    ^^^ IdentifierFunction
  {
      my($class, $uri, $scheme) = @_;
//    ^^ Keyword
//       ^^^^^^ Identifier
//               ^^^^ Identifier
//                     ^^^^^^^ Identifier
//                              ^ IdentifierOperator
//                                ^^ Identifier
  
      $uri = defined ($uri) ? "$uri" : "";
//    ^^^^ Identifier
//         ^ IdentifierOperator
//           ^^^^^^^ IdentifierBuiltin
//                    ^^^^ Identifier
//                            ^ StringLiteral
//                             ^^^^ Identifier
//                                 ^ StringLiteral
//                                     ^^ StringLiteral
      $uri =~ s/^<(?:URL:)?(.*)>$/$1/;  #
//    ^^^^ Identifier
//         ^^ IdentifierOperator
//            ^ Keyword
//             ^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
//                                      ^ Comment
      $uri =~ s/^"(.*)"$/$1/;
//    ^^^^ Identifier
//         ^^ IdentifierOperator
//            ^ Keyword
//             ^^^^^^^^^^^^^ StringLiteral
      $uri =~ s/^\s+//;
//    ^^^^ Identifier
//         ^^ IdentifierOperator
//            ^ Keyword
//             ^^^^^^^ StringLiteral
      $uri =~ s/\s+$//;
//    ^^^^ Identifier
//         ^^ IdentifierOperator
//            ^ Keyword
//             ^^^^^^^ StringLiteral
  
      my $impclass;
//    ^^ Keyword
//       ^^^^^^^^^ Identifier
      if ($uri =~ m/^($scheme_re):/so) {
//    ^^ Keyword
//        ^^^^ Identifier
//             ^^ IdentifierOperator
//                ^ Keyword
//                                 ^^ Keyword
          $scheme = $1;
//        ^^^^^^^ Identifier
//                ^ IdentifierOperator
//                  ^^ Identifier
      }
      else {
//    ^^^^ Keyword
          if (($impclass = ref($scheme))) {
//        ^^ Keyword
//             ^^^^^^^^^ Identifier
//                       ^ IdentifierOperator
//                         ^^^ IdentifierBuiltin
//                             ^^^^^^^ Identifier
              $scheme = $scheme->scheme;
//            ^^^^^^^ Identifier
//                    ^ IdentifierOperator
//                      ^^^^^^^ Identifier
//                               ^^^^^^ IdentifierFunction
          }
          elsif ($scheme && $scheme =~ m/^($scheme_re)(?::|$)/o) {
//        ^^^^^ Keyword
//               ^^^^^^^ Identifier
//                          ^^^^^^^ Identifier
//                                  ^^ IdentifierOperator
//                                     ^ Keyword
//                                                            ^ Keyword
              $scheme = $1;
//            ^^^^^^^ Identifier
//                    ^ IdentifierOperator
//                      ^^ Identifier
          }
      }
      $impclass ||= implementor($scheme) ||
//    ^^^^^^^^^ Identifier
//                  ^^^^^^^^^^^ IdentifierFunction
//                              ^^^^^^^ Identifier
      do {
//    ^^ Keyword
          require URI::_foreign;
//        ^^^^^^^ Keyword
//                ^^^^^^^^^^^^^ IdentifierType
          $impclass = 'URI::_foreign';
//        ^^^^^^^^^ Identifier
//                  ^ IdentifierOperator
//                    ^^^^^^^^^^^^^^^ StringLiteral
      };
  
      return $impclass->_init($uri, $scheme);
//    ^^^^^^ Keyword
//           ^^^^^^^^^ Identifier
//                      ^^^^^ IdentifierFunction
//                            ^^^^ Identifier
//                                  ^^^^^^^ Identifier
  }

