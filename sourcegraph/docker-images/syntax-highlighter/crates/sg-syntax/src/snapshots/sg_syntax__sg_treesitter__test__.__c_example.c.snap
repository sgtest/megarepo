---
source: crates/sg-syntax/src/sg_treesitter.rs
expression: "dump_document(&document, &contents)"
---
  #include "runtime/parser.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^^^ StringLiteral 
  #include <assert.h>
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^ StringLiteral 
  #include <stdio.h>
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^ StringLiteral 
  #include <limits.h>
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^ StringLiteral 
  #include <stdbool.h>
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^ StringLiteral 
  #include "tree_sitter/runtime.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
  #include "runtime/tree.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^ StringLiteral 
  #include "runtime/lexer.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^^ StringLiteral 
  #include "runtime/length.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^^^ StringLiteral 
  #include "runtime/array.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^^ StringLiteral 
  #include "runtime/language.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^^^^^ StringLiteral 
  #include "runtime/alloc.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^^ StringLiteral 
  #include "runtime/reduce_action.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
  #include "runtime/error_costs.h"
//^^^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
  
  #define LOG(...)                                                           \
//^^^^^^^ IdentifierKeyword 
//        ^^^ IdentifierFunction 
    if (self->lexer.logger.log) {                                            \
      snprintf(self->lexer.debug_buffer, TS_DEBUG_BUFFER_SIZE, __VA_ARGS__); \
      self->lexer.logger.log(self->lexer.logger.payload, TSLogTypeParse,     \
                             self->lexer.debug_buffer);                      \
    }                                                                        \
    if (self->print_debugging_graphs) {                                      \
      fprintf(stderr, "graph {\nlabel=\"");                                  \
      fprintf(stderr, __VA_ARGS__);                                          \
      fprintf(stderr, "\"\n}\n\n");                                          \
    }
  
  
  #define SYM_NAME(symbol) ts_language_symbol_name(self->language, symbol)
//^^^^^^^ IdentifierKeyword 
//        ^^^^^^^^ IdentifierFunction 
//                 ^^^^^^ Identifier 
  
  typedef struct {
//^^^^^^^ IdentifierKeyword 
//        ^^^^^^ IdentifierKeyword 
    Parser *parser;
//  ^^^^^^ IdentifierType 
//         ^ IdentifierOperator 
//          ^^^^^^ Identifier 
    TSSymbol lookahead_symbol;
//  ^^^^^^^^ IdentifierType 
//           ^^^^^^^^^^^^^^^^ Identifier 
    TreeArray *trees_above_error;
//  ^^^^^^^^^ IdentifierType 
//            ^ IdentifierOperator 
//             ^^^^^^^^^^^^^^^^^ Identifier 
    uint32_t tree_count_above_error;
//  ^^^^^^^^ IdentifierBuiltinType 
//           ^^^^^^^^^^^^^^^^^^^^^^ Identifier 
    bool found_repair;
//  ^^^^ IdentifierBuiltinType 
//       ^^^^^^^^^^^^ Identifier 
    ReduceAction best_repair;
//  ^^^^^^^^^^^^ IdentifierType 
//               ^^^^^^^^^^^ Identifier 
    TSStateId best_repair_next_state;
//  ^^^^^^^^^ IdentifierType 
//            ^^^^^^^^^^^^^^^^^^^^^^ Identifier 
    uint32_t best_repair_skip_count;
//  ^^^^^^^^ IdentifierBuiltinType 
//           ^^^^^^^^^^^^^^^^^^^^^^ Identifier 
  } ErrorRepairSession;
//  ^^^^^^^^^^^^^^^^^^ IdentifierType 
  
  static void parser__push(Parser *self, StackVersion version, Tree *tree,
//^^^^^^ IdentifierKeyword 
//       ^^^^ IdentifierBuiltinType 
//            ^^^^^^^^^^^^ IdentifierFunction 
//                         ^^^^^^ IdentifierType 
//                                ^ IdentifierOperator 
//                                 ^^^^ Identifier 
//                                       ^^^^^^^^^^^^ IdentifierType 
//                                                    ^^^^^^^ Identifier 
//                                                             ^^^^ IdentifierType 
//                                                                  ^ IdentifierOperator 
//                                                                   ^^^^ Identifier 
                           TSStateId state) {
//                         ^^^^^^^^^ IdentifierType 
//                                   ^^^^^ Identifier 
    ts_stack_push(self->stack, version, tree, false, state);
//  ^^^^^^^^^^^^^ IdentifierFunction 
//                ^^^^ Identifier 
//                    ^^ IdentifierOperator 
//                      ^^^^^ Identifier 
//                             ^^^^^^^ Identifier 
//                                      ^^^^ Identifier 
//                                            ^^^^^ BooleanLiteral 
//                                                   ^^^^^ Identifier 
    ts_tree_release(tree);
//  ^^^^^^^^^^^^^^^ IdentifierFunction 
//                  ^^^^ Identifier 
  }
  
  static bool parser__breakdown_top_of_stack(Parser *self, StackVersion version) {
//^^^^^^ IdentifierKeyword 
//       ^^^^ IdentifierBuiltinType 
//            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                           ^^^^^^ IdentifierType 
//                                                  ^ IdentifierOperator 
//                                                   ^^^^ Identifier 
//                                                         ^^^^^^^^^^^^ IdentifierType 
//                                                                      ^^^^^^^ Identifier 
    bool did_break_down = false;
//  ^^^^ IdentifierBuiltinType 
//       ^^^^^^^^^^^^^^ Identifier 
//                      ^ IdentifierOperator 
//                        ^^^^^ BooleanLiteral 
    bool pending = false;
//  ^^^^ IdentifierBuiltinType 
//       ^^^^^^^ Identifier 
//               ^ IdentifierOperator 
//                 ^^^^^ BooleanLiteral 
  
    do {
//  ^^ IdentifierKeyword 
      StackPopResult pop = ts_stack_pop_pending(self->stack, version);
//    ^^^^^^^^^^^^^^ IdentifierType 
//                   ^^^ Identifier 
//                       ^ IdentifierOperator 
//                         ^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                              ^^^^ Identifier 
//                                                  ^^ IdentifierOperator 
//                                                    ^^^^^ Identifier 
//                                                           ^^^^^^^ Identifier 
      if (!pop.slices.size)
//    ^^ IdentifierKeyword 
//        ^ IdentifierOperator 
//         ^^^ Identifier 
//             ^^^^^^ Identifier 
//                    ^^^^ Identifier 
        break;
//      ^^^^^ IdentifierKeyword 
  
      did_break_down = true;
//    ^^^^^^^^^^^^^^ Identifier 
//                   ^ IdentifierOperator 
//                     ^^^^ BooleanLiteral 
      pending = false;
//    ^^^^^^^ Identifier 
//            ^ IdentifierOperator 
//              ^^^^^ BooleanLiteral 
      for (uint32_t i = 0; i < pop.slices.size; i++) {
//    ^^^ IdentifierKeyword 
//         ^^^^^^^^ IdentifierBuiltinType 
//                  ^ Identifier 
//                    ^ IdentifierOperator 
//                      ^ NumericLiteral 
//                         ^ Identifier 
//                           ^ IdentifierOperator 
//                             ^^^ Identifier 
//                                 ^^^^^^ Identifier 
//                                        ^^^^ Identifier 
//                                              ^ Identifier 
//                                               ^^ IdentifierOperator 
        StackSlice slice = pop.slices.contents[i];
//      ^^^^^^^^^^ IdentifierType 
//                 ^^^^^ Identifier 
//                       ^ IdentifierOperator 
//                         ^^^ Identifier 
//                             ^^^^^^ Identifier 
//                                    ^^^^^^^^ Identifier 
//                                             ^ Identifier 
        TSStateId state = ts_stack_top_state(self->stack, slice.version);
//      ^^^^^^^^^ IdentifierType 
//                ^^^^^ Identifier 
//                      ^ IdentifierOperator 
//                        ^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                           ^^^^ Identifier 
//                                               ^^ IdentifierOperator 
//                                                 ^^^^^ Identifier 
//                                                        ^^^^^ Identifier 
//                                                              ^^^^^^^ Identifier 
        Tree *parent = *array_front(&slice.trees);
//      ^^^^ IdentifierType 
//           ^ IdentifierOperator 
//            ^^^^^^ Identifier 
//                   ^ IdentifierOperator 
//                     ^ IdentifierOperator 
//                      ^^^^^^^^^^^ IdentifierFunction 
//                                  ^ IdentifierOperator 
//                                   ^^^^^ Identifier 
//                                         ^^^^^ Identifier 
  
        for (uint32_t j = 0; j < parent->child_count; j++) {
//      ^^^ IdentifierKeyword 
//           ^^^^^^^^ IdentifierBuiltinType 
//                    ^ Identifier 
//                      ^ IdentifierOperator 
//                        ^ NumericLiteral 
//                           ^ Identifier 
//                             ^ IdentifierOperator 
//                               ^^^^^^ Identifier 
//                                     ^^ IdentifierOperator 
//                                       ^^^^^^^^^^^ Identifier 
//                                                    ^ Identifier 
//                                                     ^^ IdentifierOperator 
          Tree *child = parent->children[j];
//        ^^^^ IdentifierType 
//             ^ IdentifierOperator 
//              ^^^^^ Identifier 
//                    ^ IdentifierOperator 
//                      ^^^^^^ Identifier 
//                            ^^ IdentifierOperator 
//                              ^^^^^^^^ Identifier 
//                                       ^ Identifier 
          pending = child->child_count > 0;
//        ^^^^^^^ Identifier 
//                ^ IdentifierOperator 
//                  ^^^^^ Identifier 
//                       ^^ IdentifierOperator 
//                         ^^^^^^^^^^^ Identifier 
//                                     ^ IdentifierOperator 
//                                       ^ NumericLiteral 
  
          if (child->symbol == ts_builtin_sym_error) {
//        ^^ IdentifierKeyword 
//            ^^^^^ Identifier 
//                 ^^ IdentifierOperator 
//                   ^^^^^^ Identifier 
//                          ^^ IdentifierOperator 
//                             ^^^^^^^^^^^^^^^^^^^^ Identifier 
            state = ERROR_STATE;
//          ^^^^^ Identifier 
//                ^ IdentifierOperator 
//                  ^^^^^^^^^^^ IdentifierConstant 
          } else if (!child->extra) {
//          ^^^^ IdentifierKeyword 
//               ^^ IdentifierKeyword 
//                   ^ IdentifierOperator 
//                    ^^^^^ Identifier 
//                         ^^ IdentifierOperator 
//                           ^^^^^ Identifier 
            state = ts_language_next_state(self->language, state, child->symbol);
//          ^^^^^ Identifier 
//                ^ IdentifierOperator 
//                  ^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                         ^^^^ Identifier 
//                                             ^^ IdentifierOperator 
//                                               ^^^^^^^^ Identifier 
//                                                         ^^^^^ Identifier 
//                                                                ^^^^^ Identifier 
//                                                                     ^^ IdentifierOperator 
//                                                                       ^^^^^^ Identifier 
          }
  
          ts_stack_push(self->stack, slice.version, child, pending, state);
//        ^^^^^^^^^^^^^ IdentifierFunction 
//                      ^^^^ Identifier 
//                          ^^ IdentifierOperator 
//                            ^^^^^ Identifier 
//                                   ^^^^^ Identifier 
//                                         ^^^^^^^ Identifier 
//                                                  ^^^^^ Identifier 
//                                                         ^^^^^^^ Identifier 
//                                                                  ^^^^^ Identifier 
        }
  
        for (uint32_t j = 1; j < slice.trees.size; j++) {
//      ^^^ IdentifierKeyword 
//           ^^^^^^^^ IdentifierBuiltinType 
//                    ^ Identifier 
//                      ^ IdentifierOperator 
//                        ^ NumericLiteral 
//                           ^ Identifier 
//                             ^ IdentifierOperator 
//                               ^^^^^ Identifier 
//                                     ^^^^^ Identifier 
//                                           ^^^^ Identifier 
//                                                 ^ Identifier 
//                                                  ^^ IdentifierOperator 
          Tree *tree = slice.trees.contents[j];
//        ^^^^ IdentifierType 
//             ^ IdentifierOperator 
//              ^^^^ Identifier 
//                   ^ IdentifierOperator 
//                     ^^^^^ Identifier 
//                           ^^^^^ Identifier 
//                                 ^^^^^^^^ Identifier 
//                                          ^ Identifier 
          parser__push(self, slice.version, tree, state);
//        ^^^^^^^^^^^^ IdentifierFunction 
//                     ^^^^ Identifier 
//                           ^^^^^ Identifier 
//                                 ^^^^^^^ Identifier 
//                                          ^^^^ Identifier 
//                                                ^^^^^ Identifier 
        }
  
        LOG("breakdown_top_of_stack tree:%s", SYM_NAME(parent->symbol));
//      ^^^ IdentifierFunction 
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
//                                            ^^^^^^^^ IdentifierFunction 
//                                                     ^^^^^^ Identifier 
//                                                           ^^ IdentifierOperator 
//                                                             ^^^^^^ Identifier 
        LOG_STACK();
//      ^^^^^^^^^ IdentifierFunction 
  
        ts_stack_decrease_push_count(self->stack, slice.version,
//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                   ^^^^ Identifier 
//                                       ^^ IdentifierOperator 
//                                         ^^^^^ Identifier 
//                                                ^^^^^ Identifier 
//                                                      ^^^^^^^ Identifier 
                                     parent->child_count + 1);
//                                   ^^^^^^ Identifier 
//                                         ^^ IdentifierOperator 
//                                           ^^^^^^^^^^^ Identifier 
//                                                       ^ IdentifierOperator 
//                                                         ^ NumericLiteral 
        ts_tree_release(parent);
//      ^^^^^^^^^^^^^^^ IdentifierFunction 
//                      ^^^^^^ Identifier 
        array_delete(&slice.trees);
//      ^^^^^^^^^^^^ IdentifierFunction 
//                   ^ IdentifierOperator 
//                    ^^^^^ Identifier 
//                          ^^^^^ Identifier 
      }
    } while (pending);
//    ^^^^^ IdentifierKeyword 
//           ^^^^^^^ Identifier 
  
    return did_break_down;
//  ^^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^^ Identifier 
  }
  
  static bool parser__breakdown_lookahead(Parser *self, Tree **lookahead,
//^^^^^^ IdentifierKeyword 
//       ^^^^ IdentifierBuiltinType 
//            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                        ^^^^^^ IdentifierType 
//                                               ^ IdentifierOperator 
//                                                ^^^^ Identifier 
//                                                      ^^^^ IdentifierType 
//                                                           ^ IdentifierOperator 
//                                                            ^ IdentifierOperator 
//                                                             ^^^^^^^^^ Identifier 
                                          TSStateId state,
//                                        ^^^^^^^^^ IdentifierType 
//                                                  ^^^^^ Identifier 
                                          ReusableNode *reusable_node) {
//                                        ^^^^^^^^^^^^ IdentifierType 
//                                                     ^ IdentifierOperator 
//                                                      ^^^^^^^^^^^^^ Identifier 
    bool result = false;
//  ^^^^ IdentifierBuiltinType 
//       ^^^^^^ Identifier 
//              ^ IdentifierOperator 
//                ^^^^^ BooleanLiteral 
    while (reusable_node->tree->child_count > 0 &&
//  ^^^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^^ Identifier 
//                      ^^ IdentifierOperator 
//                        ^^^^ Identifier 
//                            ^^ IdentifierOperator 
//                              ^^^^^^^^^^^ Identifier 
//                                          ^ IdentifierOperator 
//                                            ^ NumericLiteral 
//                                              ^^ IdentifierOperator 
           (self->is_split || reusable_node->tree->parse_state != state ||
//          ^^^^ Identifier 
//              ^^ IdentifierOperator 
//                ^^^^^^^^ Identifier 
//                         ^^ IdentifierOperator 
//                            ^^^^^^^^^^^^^ Identifier 
//                                         ^^ IdentifierOperator 
//                                           ^^^^ Identifier 
//                                               ^^ IdentifierOperator 
//                                                 ^^^^^^^^^^^ Identifier 
//                                                             ^^ IdentifierOperator 
//                                                                ^^^^^ Identifier 
//                                                                      ^^ IdentifierOperator 
            reusable_node->tree->fragile_left ||
//          ^^^^^^^^^^^^^ Identifier 
//                       ^^ IdentifierOperator 
//                         ^^^^ Identifier 
//                             ^^ IdentifierOperator 
//                               ^^^^^^^^^^^^ Identifier 
//                                            ^^ IdentifierOperator 
            reusable_node->tree->fragile_right)) {
//          ^^^^^^^^^^^^^ Identifier 
//                       ^^ IdentifierOperator 
//                         ^^^^ Identifier 
//                             ^^ IdentifierOperator 
//                               ^^^^^^^^^^^^^ Identifier 
      LOG("state_mismatch sym:%s", SYM_NAME(reusable_node->tree->symbol));
//    ^^^ IdentifierFunction 
//        ^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
//                                 ^^^^^^^^ IdentifierFunction 
//                                          ^^^^^^^^^^^^^ Identifier 
//                                                       ^^ IdentifierOperator 
//                                                         ^^^^ Identifier 
//                                                             ^^ IdentifierOperator 
//                                                               ^^^^^^ Identifier 
      reusable_node_breakdown(reusable_node);
//    ^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                            ^^^^^^^^^^^^^ Identifier 
      result = true;
//    ^^^^^^ Identifier 
//           ^ IdentifierOperator 
//             ^^^^ BooleanLiteral 
    }
  
    if (result) {
//  ^^ IdentifierKeyword 
//      ^^^^^^ Identifier 
      ts_tree_release(*lookahead);
//    ^^^^^^^^^^^^^^^ IdentifierFunction 
//                    ^ IdentifierOperator 
//                     ^^^^^^^^^ Identifier 
      ts_tree_retain(*lookahead = reusable_node->tree);
//    ^^^^^^^^^^^^^^ IdentifierFunction 
//                   ^ IdentifierOperator 
//                    ^^^^^^^^^ Identifier 
//                              ^ IdentifierOperator 
//                                ^^^^^^^^^^^^^ Identifier 
//                                             ^^ IdentifierOperator 
//                                               ^^^^ Identifier 
    }
  
    return result;
//  ^^^^^^ IdentifierKeyword 
//         ^^^^^^ Identifier 
  }
  
  static inline bool ts_lex_mode_eq(TSLexMode self, TSLexMode other) {
//^^^^^^ IdentifierKeyword 
//       ^^^^^^ IdentifierKeyword 
//              ^^^^ IdentifierBuiltinType 
//                   ^^^^^^^^^^^^^^ IdentifierFunction 
//                                  ^^^^^^^^^ IdentifierType 
//                                            ^^^^ Identifier 
//                                                  ^^^^^^^^^ IdentifierType 
//                                                            ^^^^^ Identifier 
    return self.lex_state == other.lex_state &&
//  ^^^^^^ IdentifierKeyword 
//         ^^^^ Identifier 
//              ^^^^^^^^^ Identifier 
//                        ^^ IdentifierOperator 
//                           ^^^^^ Identifier 
//                                 ^^^^^^^^^ Identifier 
//                                           ^^ IdentifierOperator 
      self.external_lex_state == other.external_lex_state;
//    ^^^^ Identifier 
//         ^^^^^^^^^^^^^^^^^^ Identifier 
//                            ^^ IdentifierOperator 
//                               ^^^^^ Identifier 
//                                     ^^^^^^^^^^^^^^^^^^ Identifier 
  }
  
  static bool parser__can_reuse(Parser *self, TSStateId state, Tree *tree,
//^^^^^^ IdentifierKeyword 
//       ^^^^ IdentifierBuiltinType 
//            ^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                              ^^^^^^ IdentifierType 
//                                     ^ IdentifierOperator 
//                                      ^^^^ Identifier 
//                                            ^^^^^^^^^ IdentifierType 
//                                                      ^^^^^ Identifier 
//                                                             ^^^^ IdentifierType 
//                                                                  ^ IdentifierOperator 
//                                                                   ^^^^ Identifier 
                                TableEntry *table_entry) {
//                              ^^^^^^^^^^ IdentifierType 
//                                         ^ IdentifierOperator 
//                                          ^^^^^^^^^^^ Identifier 
    TSLexMode current_lex_mode = self->language->lex_modes[state];
//  ^^^^^^^^^ IdentifierType 
//            ^^^^^^^^^^^^^^^^ Identifier 
//                             ^ IdentifierOperator 
//                               ^^^^ Identifier 
//                                   ^^ IdentifierOperator 
//                                     ^^^^^^^^ Identifier 
//                                             ^^ IdentifierOperator 
//                                               ^^^^^^^^^ Identifier 
//                                                         ^^^^^ Identifier 
    if (ts_lex_mode_eq(tree->first_leaf.lex_mode, current_lex_mode))
//  ^^ IdentifierKeyword 
//      ^^^^^^^^^^^^^^ IdentifierFunction 
//                     ^^^^ Identifier 
//                         ^^ IdentifierOperator 
//                           ^^^^^^^^^^ Identifier 
//                                      ^^^^^^^^ Identifier 
//                                                ^^^^^^^^^^^^^^^^ Identifier 
      return true;
//    ^^^^^^ IdentifierKeyword 
//           ^^^^ BooleanLiteral 
    if (current_lex_mode.external_lex_state != 0)
//  ^^ IdentifierKeyword 
//      ^^^^^^^^^^^^^^^^ Identifier 
//                       ^^^^^^^^^^^^^^^^^^ Identifier 
//                                          ^^ IdentifierOperator 
//                                             ^ NumericLiteral 
      return false;
//    ^^^^^^ IdentifierKeyword 
//           ^^^^^ BooleanLiteral 
    if (tree->size.bytes == 0)
//  ^^ IdentifierKeyword 
//      ^^^^ Identifier 
//          ^^ IdentifierOperator 
//            ^^^^ Identifier 
//                 ^^^^^ Identifier 
//                       ^^ IdentifierOperator 
//                          ^ NumericLiteral 
      return false;
//    ^^^^^^ IdentifierKeyword 
//           ^^^^^ BooleanLiteral 
    if (!table_entry->is_reusable)
//  ^^ IdentifierKeyword 
//      ^ IdentifierOperator 
//       ^^^^^^^^^^^ Identifier 
//                  ^^ IdentifierOperator 
//                    ^^^^^^^^^^^ Identifier 
      return false;
//    ^^^^^^ IdentifierKeyword 
//           ^^^^^ BooleanLiteral 
    if (!table_entry->depends_on_lookahead)
//  ^^ IdentifierKeyword 
//      ^ IdentifierOperator 
//       ^^^^^^^^^^^ Identifier 
//                  ^^ IdentifierOperator 
//                    ^^^^^^^^^^^^^^^^^^^^ Identifier 
      return true;
//    ^^^^^^ IdentifierKeyword 
//           ^^^^ BooleanLiteral 
    return tree->child_count > 1 && tree->error_cost == 0;
//  ^^^^^^ IdentifierKeyword 
//         ^^^^ Identifier 
//             ^^ IdentifierOperator 
//               ^^^^^^^^^^^ Identifier 
//                           ^ IdentifierOperator 
//                             ^ NumericLiteral 
//                               ^^ IdentifierOperator 
//                                  ^^^^ Identifier 
//                                      ^^ IdentifierOperator 
//                                        ^^^^^^^^^^ Identifier 
//                                                   ^^ IdentifierOperator 
//                                                      ^ NumericLiteral 
  }
  
  typedef int CondenseResult;
//^^^^^^^ IdentifierKeyword 
//        ^^^ IdentifierBuiltinType 
//            ^^^^^^^^^^^^^^ IdentifierType 
  static int CondenseResultMadeChange = 1;
//^^^^^^ IdentifierKeyword 
//       ^^^ IdentifierBuiltinType 
//           ^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
//                                    ^ IdentifierOperator 
//                                      ^ NumericLiteral 
  static int CondenseResultAllVersionsHadError = 2;
//^^^^^^ IdentifierKeyword 
//       ^^^ IdentifierBuiltinType 
//           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
//                                             ^ IdentifierOperator 
//                                               ^ NumericLiteral 
  
  static CondenseResult parser__condense_stack(Parser *self) {
//^^^^^^ IdentifierKeyword 
//       ^^^^^^^^^^^^^^ IdentifierType 
//                      ^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                             ^^^^^^ IdentifierType 
//                                                    ^ IdentifierOperator 
//                                                     ^^^^ Identifier 
    CondenseResult result = 0;
//  ^^^^^^^^^^^^^^ IdentifierType 
//                 ^^^^^^ Identifier 
//                        ^ IdentifierOperator 
//                          ^ NumericLiteral 
    bool has_version_without_errors = false;
//  ^^^^ IdentifierBuiltinType 
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
//                                  ^ IdentifierOperator 
//                                    ^^^^^ BooleanLiteral 
  
    for (StackVersion i = 0; i < ts_stack_version_count(self->stack); i++) {
//  ^^^ IdentifierKeyword 
//       ^^^^^^^^^^^^ IdentifierType 
//                    ^ Identifier 
//                      ^ IdentifierOperator 
//                        ^ NumericLiteral 
//                           ^ Identifier 
//                             ^ IdentifierOperator 
//                               ^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                                      ^^^^ Identifier 
//                                                          ^^ IdentifierOperator 
//                                                            ^^^^^ Identifier 
//                                                                    ^ Identifier 
//                                                                     ^^ IdentifierOperator 
      if (ts_stack_is_halted(self->stack, i)) {
//    ^^ IdentifierKeyword 
//        ^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                           ^^^^ Identifier 
//                               ^^ IdentifierOperator 
//                                 ^^^^^ Identifier 
//                                        ^ Identifier 
        ts_stack_remove_version(self->stack, i);
//      ^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                              ^^^^ Identifier 
//                                  ^^ IdentifierOperator 
//                                    ^^^^^ Identifier 
//                                           ^ Identifier 
        result |= CondenseResultMadeChange;
//      ^^^^^^ Identifier 
//                ^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
        i--;
//      ^ Identifier 
//       ^^ IdentifierOperator 
        continue;
//      ^^^^^^^^ IdentifierKeyword 
      }
  
      ErrorStatus error_status = ts_stack_error_status(self->stack, i);
//    ^^^^^^^^^^^ IdentifierType 
//                ^^^^^^^^^^^^ Identifier 
//                             ^ IdentifierOperator 
//                               ^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                                     ^^^^ Identifier 
//                                                         ^^ IdentifierOperator 
//                                                           ^^^^^ Identifier 
//                                                                  ^ Identifier 
      if (error_status.count == 0) has_version_without_errors = true;
//    ^^ IdentifierKeyword 
//        ^^^^^^^^^^^^ Identifier 
//                     ^^^^^ Identifier 
//                           ^^ IdentifierOperator 
//                              ^ NumericLiteral 
//                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
//                                                            ^ IdentifierOperator 
//                                                              ^^^^ BooleanLiteral 
  
      for (StackVersion j = 0; j < i; j++) {
//    ^^^ IdentifierKeyword 
//         ^^^^^^^^^^^^ IdentifierType 
//                      ^ Identifier 
//                        ^ IdentifierOperator 
//                          ^ NumericLiteral 
//                             ^ Identifier 
//                               ^ IdentifierOperator 
//                                 ^ Identifier 
//                                    ^ Identifier 
//                                     ^^ IdentifierOperator 
        if (ts_stack_merge(self->stack, j, i)) {
//      ^^ IdentifierKeyword 
//          ^^^^^^^^^^^^^^ IdentifierFunction 
//                         ^^^^ Identifier 
//                             ^^ IdentifierOperator 
//                               ^^^^^ Identifier 
//                                      ^ Identifier 
//                                         ^ Identifier 
          result |= CondenseResultMadeChange;
//        ^^^^^^ Identifier 
//                  ^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
          i--;
//        ^ Identifier 
//         ^^ IdentifierOperator 
          break;
//        ^^^^^ IdentifierKeyword 
        }
  
        switch (error_status_compare(error_status,
//      ^^^^^^ IdentifierKeyword 
//              ^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                   ^^^^^^^^^^^^ Identifier 
                                     ts_stack_error_status(self->stack, j))) {
//                                   ^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                                         ^^^^ Identifier 
//                                                             ^^ IdentifierOperator 
//                                                               ^^^^^ Identifier 
//                                                                      ^ Identifier 
          case -1:
//        ^^^^ IdentifierKeyword 
//             ^^ NumericLiteral 
            ts_stack_remove_version(self->stack, j);
//          ^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                  ^^^^ Identifier 
//                                      ^^ IdentifierOperator 
//                                        ^^^^^ Identifier 
//                                               ^ Identifier 
            result |= CondenseResultMadeChange;
//          ^^^^^^ Identifier 
//                    ^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
            i--;
//          ^ Identifier 
//           ^^ IdentifierOperator 
            j--;
//          ^ Identifier 
//           ^^ IdentifierOperator 
            break;
//          ^^^^^ IdentifierKeyword 
          case 1:
//        ^^^^ IdentifierKeyword 
//             ^ NumericLiteral 
            ts_stack_remove_version(self->stack, i);
//          ^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                  ^^^^ Identifier 
//                                      ^^ IdentifierOperator 
//                                        ^^^^^ Identifier 
//                                               ^ Identifier 
            result |= CondenseResultMadeChange;
//          ^^^^^^ Identifier 
//                    ^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
            i--;
//          ^ Identifier 
//           ^^ IdentifierOperator 
            break;
//          ^^^^^ IdentifierKeyword 
        }
      }
    }
  
    if (!has_version_without_errors && ts_stack_version_count(self->stack) > 0) {
//  ^^ IdentifierKeyword 
//      ^ IdentifierOperator 
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
//                                  ^^ IdentifierOperator 
//                                     ^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                                            ^^^^ Identifier 
//                                                                ^^ IdentifierOperator 
//                                                                  ^^^^^ Identifier 
//                                                                         ^ IdentifierOperator 
//                                                                           ^ NumericLiteral 
      result |= CondenseResultAllVersionsHadError;
//    ^^^^^^ Identifier 
//              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
    }
  
    return result;
//  ^^^^^^ IdentifierKeyword 
//         ^^^^^^ Identifier 
  }
  
  static void parser__restore_external_scanner(Parser *self, StackVersion version) {
//^^^^^^ IdentifierKeyword 
//       ^^^^ IdentifierBuiltinType 
//            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                             ^^^^^^ IdentifierType 
//                                                    ^ IdentifierOperator 
//                                                     ^^^^ Identifier 
//                                                           ^^^^^^^^^^^^ IdentifierType 
//                                                                        ^^^^^^^ Identifier 
    const TSExternalTokenState *state = ts_stack_external_token_state(self->stack, version);
//  ^^^^^ IdentifierKeyword 
//        ^^^^^^^^^^^^^^^^^^^^ IdentifierType 
//                             ^ IdentifierOperator 
//                              ^^^^^ Identifier 
//                                    ^ IdentifierOperator 
//                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                                                    ^^^^ Identifier 
//                                                                        ^^ IdentifierOperator 
//                                                                          ^^^^^ Identifier 
//                                                                                 ^^^^^^^ Identifier 
    if (self->lexer.last_external_token_state != state) {
//  ^^ IdentifierKeyword 
//      ^^^^ Identifier 
//          ^^ IdentifierOperator 
//            ^^^^^ Identifier 
//                  ^^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
//                                            ^^ IdentifierOperator 
//                                               ^^^^^ Identifier 
      LOG("restore_external_scanner");
//    ^^^ IdentifierFunction 
//        ^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
      self->lexer.last_external_token_state = state;
//    ^^^^ Identifier 
//        ^^ IdentifierOperator 
//          ^^^^^ Identifier 
//                ^^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
//                                          ^ IdentifierOperator 
//                                            ^^^^^ Identifier 
      if (state) {
//    ^^ IdentifierKeyword 
//        ^^^^^ Identifier 
        self->language->external_scanner.deserialize(
//      ^^^^ Identifier 
//          ^^ IdentifierOperator 
//            ^^^^^^^^ Identifier 
//                    ^^ IdentifierOperator 
//                      ^^^^^^^^^^^^^^^^ Identifier 
//                                       ^^^^^^^^^^^ IdentifierFunction 
          self->external_scanner_payload,
//        ^^^^ Identifier 
//            ^^ IdentifierOperator 
//              ^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
          *state
//        ^ IdentifierOperator 
//         ^^^^^ Identifier 
        );
      } else {
//      ^^^^ IdentifierKeyword 
        self->language->external_scanner.reset(self->external_scanner_payload);
//      ^^^^ Identifier 
//          ^^ IdentifierOperator 
//            ^^^^^^^^ Identifier 
//                    ^^ IdentifierOperator 
//                      ^^^^^^^^^^^^^^^^ Identifier 
//                                       ^^^^^ IdentifierFunction 
//                                             ^^^^ Identifier 
//                                                 ^^ IdentifierOperator 
//                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ Identifier 
      }
    }
  }
  

