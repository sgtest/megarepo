---
source: crates/sg-syntax/src/sg_treesitter.rs
assertion_line: 493
expression: "dump_document(&document, &contents)"
---
  package main
//^^^^^^^ Keyword 
//        ^^^^ IdentifierNamespace  local 1
  
  import (
//^^^^^^ Keyword 
   "fmt"
// ^^^^^ StringLiteral 
  )
  
  func main() {
//^^^^ Keyword 
//     ^^^^ IdentifierFunction  local 1
   // Variables
// ^^^^^^^^^^^^ Comment 
   var x int = 5
// ^^^ Keyword 
//     ^ Identifier  local 12
//       ^^^ IdentifierBuiltinType 
//           ^ IdentifierOperator 
//             ^ NumericLiteral 
   y := 10
// ^ Identifier  local 13
//   ^^ IdentifierOperator 
//      ^^ NumericLiteral 
   // Constants
// ^^^^^^^^^^^^ Comment 
   const z = 15
// ^^^^^ Keyword 
//       ^ IdentifierConstant  local 14
//         ^ IdentifierOperator 
//           ^^ NumericLiteral 
   // Arrays
// ^^^^^^^^^ Comment 
   array := [5]int{1, 2, 3, 4, 5}
// ^^^^^ Identifier  local 15
//       ^^ IdentifierOperator 
//           ^ NumericLiteral 
//             ^^^ IdentifierBuiltinType 
//                 ^ NumericLiteral 
//                    ^ NumericLiteral 
//                       ^ NumericLiteral 
//                          ^ NumericLiteral 
//                             ^ NumericLiteral 
   // Slices
// ^^^^^^^^^ Comment 
   slice := array[1:3]
// ^^^^^ Identifier  local 16
//       ^^ IdentifierOperator 
//          ^^^^^ Identifier  local 15
//                ^ NumericLiteral 
//                  ^ NumericLiteral 
   slice = append(slice, 6)
// ^^^^^ Identifier  local 16
//       ^ IdentifierOperator 
//         ^^^^^^ IdentifierBuiltin 
//                ^^^^^ Identifier  local 16
//                       ^ NumericLiteral 
   // Maps
// ^^^^^^^ Comment 
   m := map[string]int{"foo": 42}
// ^ Identifier  local 17
//   ^^ IdentifierOperator 
//      ^^^ Keyword 
//          ^^^^^^ IdentifierBuiltinType 
//                 ^^^ IdentifierBuiltinType 
//                     ^^^^^ StringLiteral 
//                            ^^ NumericLiteral 
   // Structs
// ^^^^^^^^^^ Comment 
   type person struct {
// ^^^^ Keyword 
//      ^^^^^^ IdentifierType  local 18
//             ^^^^^^ Keyword 
    name string
//  ^^^^ Identifier 
//       ^^^^^^ IdentifierBuiltinType 
    age  int
//  ^^^ Identifier 
//       ^^^ IdentifierBuiltinType 
   }
   p := person{"Bob", 50}
// ^ Identifier  local 19
//   ^^ IdentifierOperator 
//      ^^^^^^ IdentifierType  local 18
//             ^^^^^ StringLiteral 
//                    ^^ NumericLiteral 
   // Interfaces
// ^^^^^^^^^^^^^ Comment 
   var i interface{} = p
// ^^^ Keyword 
//     ^ Identifier  local 20
//       ^^^^^^^^^ Keyword 
//                   ^ IdentifierOperator 
//                     ^ Identifier  local 19
   fmt.Println(i.(person).name)
// ^^^ Identifier 
//     ^^^^^^^ IdentifierFunction 
//             ^ Identifier  local 20
//                ^^^^^^ IdentifierType  local 18
//                        ^^^^ Identifier 
   // Error handling
// ^^^^^^^^^^^^^^^^^ Comment 
   if err := foo(); err != nil {
// ^^ Keyword 
//    ^^^ Identifier  local 22
//        ^^ IdentifierOperator 
//           ^^^ IdentifierFunction  local 2
//                  ^^^ Identifier  local 22
//                      ^^ IdentifierOperator 
//                         ^^^ IdentifierNull 
    fmt.Println(err)
//  ^^^ Identifier 
//      ^^^^^^^ IdentifierFunction 
//              ^^^ Identifier  local 22
   }
   // Functions
// ^^^^^^^^^^^^ Comment 
   defered()
// ^^^^^^^ IdentifierFunction  local 3
   go concurrent()
// ^^ Keyword 
//    ^^^^^^^^^^ IdentifierFunction  local 4
   pointers()
// ^^^^^^^^ IdentifierFunction  local 5
   // Looping and branching
// ^^^^^^^^^^^^^^^^^^^^^^^^ Comment 
   for i := 0; i < 10; i++ {
// ^^^ Keyword 
//     ^ Identifier  local 23
//       ^^ IdentifierOperator 
//          ^ NumericLiteral 
//             ^ Identifier  local 23
//               ^ IdentifierOperator 
//                 ^^ NumericLiteral 
//                     ^ Identifier  local 23
//                      ^^ IdentifierOperator 
    if i%2 == 0 {
//  ^^ Keyword 
//     ^ Identifier  local 23
//      ^ IdentifierOperator 
//       ^ NumericLiteral 
//         ^^ IdentifierOperator 
//            ^ NumericLiteral 
     continue
//   ^^^^^^^^ Keyword 
    }
    fmt.Println(i)
//  ^^^ Identifier 
//      ^^^^^^^ IdentifierFunction 
//              ^ Identifier  local 23
    if i > 5 {
//  ^^ Keyword 
//     ^ Identifier  local 23
//       ^ IdentifierOperator 
//         ^ NumericLiteral 
     break
//   ^^^^^ Keyword 
    }
   }
   // Type conversions
// ^^^^^^^^^^^^^^^^^^^ Comment 
   j := int8(x)
// ^ Identifier  local 21
//   ^^ IdentifierOperator 
//      ^^^^ IdentifierFunction 
//           ^ Identifier  local 12
   // Packages
// ^^^^^^^^^^^ Comment 
   math.MaxInt32
// ^^^^ Identifier 
//      ^^^^^^^^ Identifier 
   // And more...
// ^^^^^^^^^^^^^^ Comment 
   signal.Notify(c, syscall.SIGINT, syscall.SIGHUP, syscall.SIGTERM)
// ^^^^^^ Identifier 
//        ^^^^^^ IdentifierFunction 
//               ^ Identifier 
//                  ^^^^^^^ Identifier 
//                          ^^^^^^ Identifier 
//                                  ^^^^^^^ Identifier 
//                                          ^^^^^^ Identifier 
//                                                  ^^^^^^^ Identifier 
//                                                          ^^^^^^^ Identifier 
  
  }
  func foo() error {
//^^^^ Keyword 
//     ^^^ IdentifierFunction  local 2
//           ^^^^^ IdentifierBuiltinType 
   return fmt.Errorf("foo error")
// ^^^^^^ Keyword 
//        ^^^ Identifier 
//            ^^^^^^ IdentifierFunction 
//                   ^^^^^^^^^^^ StringLiteral 
  }
  func defered() {
//^^^^ Keyword 
//     ^^^^^^^ IdentifierFunction  local 3
   defer fmt.Println("deferred")
// ^^^^^ Keyword 
//       ^^^ Identifier 
//           ^^^^^^^ IdentifierFunction 
//                   ^^^^^^^^^^ StringLiteral 
  }
  func concurrent() {
//^^^^ Keyword 
//     ^^^^^^^^^^ IdentifierFunction  local 4
   go func() {
// ^^ Keyword 
//    ^^^^ Keyword 
    fmt.Println("concurrent")
//  ^^^ Identifier 
//      ^^^^^^^ IdentifierFunction 
//              ^^^^^^^^^^^^ StringLiteral 
   }()
  }
  func pointers() {
//^^^^ Keyword 
//     ^^^^^^^^ IdentifierFunction  local 5
   x := 5
// ^ Identifier  local 24
//   ^^ IdentifierOperator 
//      ^ NumericLiteral 
   fmt.Println(&x) // print memory address
// ^^^ Identifier 
//     ^^^^^^^ IdentifierFunction 
//             ^ IdentifierOperator 
//              ^ Identifier  local 24
//                 ^^^^^^^^^^^^^^^^^^^^^^^ Comment 
  }
  
  type Person struct {
//^^^^ Keyword 
//     ^^^^^^ IdentifierType  local 6
//            ^^^^^^ Keyword 
   Name string
// ^^^^ Identifier 
//      ^^^^^^ IdentifierBuiltinType 
   Age  int
// ^^^ Identifier 
//      ^^^ IdentifierBuiltinType 
  }
  type Vehicle struct {
//^^^^ Keyword 
//     ^^^^^^^ IdentifierType  local 7
//             ^^^^^^ Keyword 
   Wheels int
// ^^^^^^ Identifier 
//        ^^^ IdentifierBuiltinType 
   Owner  *Person
// ^^^^^ Identifier 
//        ^ IdentifierOperator 
//         ^^^^^^ IdentifierType  local 6
  }
  type Drivable interface {
//^^^^ Keyword 
//     ^^^^^^^^ IdentifierType  local 8
//              ^^^^^^^^^ Keyword 
   Wheels() int
// ^^^^^^ IdentifierFunction 
//          ^^^ IdentifierBuiltinType 
  }
  
  func structExample() {
//^^^^ Keyword 
//     ^^^^^^^^^^^^^ IdentifierFunction  local 9
   p := Person{"Bob", 50}
// ^ Identifier  local 25
//   ^^ IdentifierOperator 
//      ^^^^^^ IdentifierType  local 6
//             ^^^^^ StringLiteral 
//                    ^^ NumericLiteral 
   v := Vehicle{Wheels: 4, Owner: &p}
// ^ Identifier  local 26
//   ^^ IdentifierOperator 
//      ^^^^^^^ IdentifierType  local 7
//              ^^^^^^ IdentifierAttribute 
//                      ^ NumericLiteral 
//                         ^^^^^ IdentifierAttribute 
//                                ^ IdentifierOperator 
//                                 ^ Identifier  local 25
   var d Drivable = v
// ^^^ Keyword 
//     ^ Identifier  local 27
//       ^^^^^^^^ IdentifierType  local 8
//                ^ IdentifierOperator 
//                  ^ Identifier  local 26
   fmt.Println(d.Wheels()) // 4
// ^^^ Identifier 
//     ^^^^^^^ IdentifierFunction 
//             ^ Identifier  local 27
//               ^^^^^^ IdentifierFunction 
//                         ^^^^ Comment 
   v.Owner.Age = 51
// ^ Identifier  local 26
//   ^^^^^ Identifier 
//         ^^^ Identifier 
//             ^ IdentifierOperator 
//               ^^ NumericLiteral 
   fmt.Println(p.Age) // 51
// ^^^ Identifier 
//     ^^^^^^^ IdentifierFunction 
//             ^ Identifier  local 25
//               ^^^ Identifier 
//                    ^^^^^ Comment 
  }
  
  func Min[T Comparable](a, b T) T {
//^^^^ Keyword 
//     ^^^ Identifier 
//         ^ Identifier 
//           ^^^^^^^^^^ IdentifierFunction  local 10
//                       ^ IdentifierParameter  local 28
//                          ^ IdentifierParameter 
//                            ^ IdentifierType 
//                               ^ IdentifierType 
   if a < b {
// ^^ Keyword 
//    ^ Identifier  local 28
//      ^ IdentifierOperator 
//        ^ Identifier 
    return a
//  ^^^^^^ Keyword 
//         ^ Identifier  local 28
   }
   return b
// ^^^^^^ Keyword 
//        ^ Identifier 
  }
  
  func generics() {
//^^^^ Keyword 
//     ^^^^^^^^ IdentifierFunction  local 11
   fmt.Println(Min[int](5, 10))       // 5
// ^^^ Identifier 
//     ^^^^^^^ IdentifierFunction 
//             ^^^ Identifier 
//                 ^^^ Identifier 
//                      ^ NumericLiteral 
//                         ^^ NumericLiteral 
//                                    ^^^^ Comment 
   fmt.Println(Min[string]("a", "b")) // "a"
// ^^^ Identifier 
//     ^^^^^^^ IdentifierFunction 
//             ^^^ Identifier 
//                 ^^^^^^ Identifier 
//                         ^^^ StringLiteral 
//                              ^^^ StringLiteral 
//                                    ^^^^^^ Comment 
  }

