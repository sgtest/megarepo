---
source: crates/sg-syntax/src/sg_treesitter.rs
expression: "dump_document(&document, &contents)"
---
  package foobar
//^^^^^^^ IdentifierKeyword 
//        ^^^^^^ Identifier 
  
  import scala.collection.immutable.List
//^^^^^^ IdentifierKeyword 
//       ^^^^^ Identifier 
//             ^^^^^^^^^^ Identifier 
//                        ^^^^^^^^^ Identifier 
//                                  ^^^^ IdentifierConstant 
  
  // Comment
//^^^^^^^^^^ Comment 
  case class Foo(x: Int, y: String) extends AnyVal
//^^^^ IdentifierKeyword 
//     ^^^^^ IdentifierKeyword 
//           ^^^ IdentifierType 
//               ^ Identifier 
//                  ^^^ IdentifierType 
//                       ^ Identifier 
//                          ^^^^^^ IdentifierType 
//                                  ^^^^^^^ IdentifierKeyword 
//                                          ^^^^^^ IdentifierType 
  /** Docstring */
//^^^^^^^^^^^^^^^^ Comment 
  object Foo {
//^^^^^^ IdentifierKeyword 
//       ^^^ IdentifierConstant 
    val x: Int = 42
//  ^^^ IdentifierKeyword 
//      ^ Identifier 
//         ^^^ IdentifierType 
//               ^^ NumericLiteral 
    val y: Double = 42.0
//  ^^^ IdentifierKeyword 
//      ^ Identifier 
//         ^^^^^^ IdentifierType 
//                  ^^^^ NumericLiteral 
    val z = s"hello $x" + "hello world"
//  ^^^ IdentifierKeyword 
//      ^ Identifier 
//          ^ Identifier 
//           ^^^^^^^^ StringLiteral 
//                   ^ Identifier 
//                    ^ StringLiteral 
//                      ^ Identifier 
//                        ^^^^^^^^^^^^^ StringLiteral 
    val a: Map[Int, Int] = Map.empty
//  ^^^ IdentifierKeyword 
//      ^ Identifier 
//         ^^^ IdentifierType 
//             ^^^ IdentifierType 
//                  ^^^ IdentifierType 
//                         ^^^ IdentifierConstant 
//                             ^^^^^ Identifier 
    val b: Foo = Foo(x = 42)
//  ^^^ IdentifierKeyword 
//      ^ Identifier 
//         ^^^ IdentifierType 
//               ^^^ IdentifierFunction 
//                   ^ Identifier 
//                       ^^ NumericLiteral 
    lazy val c = 'a'
//  ^^^^ IdentifierKeyword 
//       ^^^ IdentifierKeyword 
//           ^ Identifier 
//               ^^^ CharacterLiteral 
    var d = 1.4f
//  ^^^ IdentifierKeyword 
//      ^ Identifier 
//          ^^^^ NumericLiteral 
    val e = true
//  ^^^ IdentifierKeyword 
//      ^ Identifier 
//          ^^^^ BooleanLiteral 
    val f = null
//  ^^^ IdentifierKeyword 
//      ^ Identifier 
//          ^^^^ IdentifierNull 
    def main(args: Array[String]): Unit = {
//  ^^^ IdentifierKeyword 
//      ^^^^ IdentifierFunction 
//           ^^^^ Identifier 
//                 ^^^^^ IdentifierType 
//                       ^^^^^^ IdentifierType 
//                                 ^^^^ IdentifierType 
      println(args.toList)
//    ^^^^^^^ IdentifierFunction 
//            ^^^^ Identifier 
//                 ^^^^^^ Identifier 
      System.out.println(args.toList)
//    ^^^^^^ IdentifierConstant 
//           ^^^ Identifier 
//               ^^^^^^^ IdentifierFunction 
//                       ^^^^ Identifier 
//                            ^^^^^^ Identifier 
      args(1).indexOf("a")
//    ^^^^ IdentifierFunction 
//         ^ NumericLiteral 
//            ^^^^^^^ IdentifierFunction 
//                    ^^^ StringLiteral 
      args.toList match {
//    ^^^^ Identifier 
//         ^^^^^^ Identifier 
//                ^^^^^ IdentifierKeyword 
          case 1 :: 2 :: Nil =>
//        ^^^^ IdentifierKeyword 
//             ^ NumericLiteral 
//               ^^ Identifier 
//                  ^ NumericLiteral 
//                    ^^ Identifier 
//                       ^^^ IdentifierConstant 
          case a :: Nil =>
//        ^^^^ IdentifierKeyword 
//             ^ Identifier 
//               ^^ Identifier 
//                  ^^^ IdentifierConstant 
          case Some(x) =>
//        ^^^^ IdentifierKeyword 
//             ^^^^ Identifier 
//                  ^ Identifier 
      }
    }
    private def privateMethod = 42
//  ^^^^^^^ IdentifierKeyword 
//          ^^^ IdentifierKeyword 
//              ^^^^^^^^^^^^^ IdentifierFunction 
//                              ^^ NumericLiteral 
    protected def protectedMethod = 42
//  ^^^^^^^^^ IdentifierKeyword 
//            ^^^ IdentifierKeyword 
//                ^^^^^^^^^^^^^^^ IdentifierFunction 
//                                  ^^ NumericLiteral 
    private[this] def privateThisMethod = 42
//  ^^^^^^^ IdentifierKeyword 
//          ^^^^ IdentifierBuiltin 
//                ^^^ IdentifierKeyword 
//                    ^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                        ^^ NumericLiteral 
    private[foobar] def privatePackageMethod = 42
//  ^^^^^^^ IdentifierKeyword 
//          ^^^^^^ Identifier 
//                  ^^^ IdentifierKeyword 
//                      ^^^^^^^^^^^^^^^^^^^^ IdentifierFunction 
//                                             ^^ NumericLiteral 
    type MyMap[A, B] = Map[A, B]
//  ^^^^ IdentifierKeyword 
//       ^^^^^ IdentifierType 
//             ^ IdentifierType 
//                ^ IdentifierType 
//                     ^^^ IdentifierType 
//                         ^ IdentifierType 
//                            ^ IdentifierType 
    trait MyTrait[T] extends SuperTrait[T]
//  ^^^^^ IdentifierKeyword 
//        ^^^^^^^ IdentifierType 
//                ^ IdentifierType 
//                   ^^^^^^^ IdentifierKeyword 
//                           ^^^^^^^^^^ IdentifierType 
//                                      ^ IdentifierType 
    enum X { case A, B }
//  ^^^^ IdentifierKeyword 
//       ^ IdentifierConstant 
//           ^^^^ IdentifierKeyword 
//                ^ IdentifierConstant 
//                   ^ IdentifierConstant 
  }

