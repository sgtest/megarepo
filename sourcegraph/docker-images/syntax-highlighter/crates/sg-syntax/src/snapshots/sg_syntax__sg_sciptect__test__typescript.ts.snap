---
source: crates/sg-syntax/src/sg_sciptect.rs
assertion_line: 616
expression: "snapshot_sciptect_documents(&document, &contents)"
---
  export class MyClass {
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^^^ Keyword storage.type.class.ts
//             ^^^^^^^ IdentifierType entity.name.type.class.ts
//                     ^ PunctuationBracket punctuation.definition.block.ts
    public static myValue: string;
//  ^^^^^^ Keyword storage.modifier.ts
//         ^^^^^^ Keyword storage.modifier.ts
//                ^^^^^^^ Identifier variable.object.property.ts
//                       ^ IdentifierOperator keyword.operator.type.annotation.ts
//                         ^^^^^^ IdentifierType support.type.primitive.ts
//                               ^ PunctuationDelimiter punctuation.terminator.statement.ts
    constructor(init: string) {
//  ^^^^^^^^^^^ Keyword storage.type.ts
//             ^ PunctuationBracket punctuation.definition.parameters.begin.ts
//              ^^^^ Identifier variable.parameter.ts
//                  ^ IdentifierOperator keyword.operator.type.annotation.ts
//                    ^^^^^^ IdentifierType support.type.primitive.ts
//                          ^ PunctuationBracket punctuation.definition.parameters.end.ts
//                            ^ PunctuationBracket punctuation.definition.block.ts
      this.myValue = init;
//    ^^^^ IdentifierBuiltin variable.language.this.ts
//        ^ PunctuationBracket punctuation.accessor.ts
//         ^^^^^^^ Identifier variable.other.property.ts
//                 ^ IdentifierOperator keyword.operator.assignment.ts
//                   ^^^^ Identifier variable.other.readwrite.ts
//                       ^ PunctuationDelimiter punctuation.terminator.statement.ts
    }
//  ^ PunctuationBracket punctuation.definition.block.ts
  }
//^ PunctuationBracket punctuation.definition.block.ts
  export abstract class MyAbstractClass {}
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^^^^^^ Keyword storage.modifier.ts
//                ^^^^^ Keyword storage.type.class.ts
//                      ^^^^^^^^^^^^^^^ IdentifierType entity.name.type.class.ts
//                                      ^ PunctuationBracket punctuation.definition.block.ts
//                                       ^ PunctuationBracket punctuation.definition.block.ts
  import fs = require("fs");
//^^^^^^ Keyword keyword.control.import.ts
//       ^^ Identifier variable.other.readwrite.alias.ts
//          ^ IdentifierOperator keyword.operator.assignment.ts
//            ^^^^^^^ Keyword keyword.control.require.ts
//                   ^ PunctuationBracket meta.brace.round.ts
//                    ^^^^ StringLiteral string.quoted.double.ts
//                        ^ PunctuationBracket meta.brace.round.ts
//                         ^ PunctuationDelimiter punctuation.terminator.statement.ts
  declare module MyModule {
//^^^^^^^ Keyword storage.modifier.ts
//        ^^^^^^ Keyword storage.type.namespace.ts
//               ^^^^^^^^ IdentifierType entity.name.type.module.ts
//                        ^ PunctuationBracket punctuation.definition.block.ts
    export interface MyInterface extends Other {
//  ^^^^^^ Keyword keyword.control.export.ts
//         ^^^^^^^^^ Keyword storage.type.interface.ts
//                   ^^^^^^^^^^^ IdentifierType entity.name.type.interface.ts
//                               ^^^^^^^ Keyword storage.modifier.ts
//                                       ^^^^^ Identifier entity.other.inherited-class.ts
//                                             ^ PunctuationBracket punctuation.definition.block.ts
      myProperty: any;
//    ^^^^^^^^^^ Identifier variable.object.property.ts
//              ^ IdentifierOperator keyword.operator.type.annotation.ts
//                ^^^ IdentifierType support.type.primitive.ts
//                   ^ PunctuationDelimiter punctuation.terminator.statement.ts
      myKeyoff: keyof MyClass;
//    ^^^^^^^^ Identifier variable.object.property.ts
//            ^ IdentifierOperator keyword.operator.type.annotation.ts
//              ^^^^^ Keyword keyword.operator.expression.keyof.ts
//                    ^^^^^^^ IdentifierType entity.name.type.ts
//                           ^ PunctuationDelimiter punctuation.terminator.statement.ts
    }
//  ^ PunctuationBracket punctuation.definition.block.ts
  }
//^ PunctuationBracket punctuation.definition.block.ts
  declare magicNumber number;
//^^^^^^^ Keyword storage.modifier.ts
//        ^^^^^^^^^^^ Identifier variable.other.readwrite.ts
//                    ^^^^^^ Identifier variable.other.readwrite.ts
//                          ^ PunctuationDelimiter punctuation.terminator.statement.ts
  myArray.forEach(() => { }); // fat arrow syntax
//^^^^^^^ Identifier variable.other.object.ts
//       ^ PunctuationBracket punctuation.accessor.ts
//        ^^^^^^^ IdentifierFunction support.function.dom.ts
//               ^ PunctuationBracket meta.brace.round.ts
//                ^ PunctuationBracket punctuation.definition.parameters.begin.ts
//                 ^ PunctuationBracket punctuation.definition.parameters.end.ts
//                   ^^ IdentifierType storage.type.function.arrow.ts
//                      ^ PunctuationBracket punctuation.definition.block.ts
//                        ^ PunctuationBracket punctuation.definition.block.ts
//                         ^ PunctuationBracket meta.brace.round.ts
//                          ^ PunctuationDelimiter punctuation.terminator.statement.ts
//                            ^^ Comment comment.line.double-slash.ts
//                              ^^^^^^^^^^^^^^^^^ Comment comment.line.double-slash.ts
  const oneOf = (a:number): number => a + 1
//^^^^^ Keyword storage.type.ts
//      ^^^^^ IdentifierFunction entity.name.function.ts
//            ^ IdentifierOperator keyword.operator.assignment.ts
//              ^ PunctuationBracket punctuation.definition.parameters.begin.ts
//               ^ Identifier variable.parameter.ts
//                ^ IdentifierOperator keyword.operator.type.annotation.ts
//                 ^^^^^^ IdentifierType support.type.primitive.ts
//                       ^ PunctuationBracket punctuation.definition.parameters.end.ts
//                        ^ IdentifierOperator keyword.operator.type.annotation.ts
//                         ^ IdentifierType support.type.primitive.ts
//                          ^^^^^^ IdentifierType support.type.primitive.ts
//                                ^ IdentifierType meta.return.type.arrow.ts
//                                 ^^ IdentifierType storage.type.function.arrow.ts
//                                    ^ Identifier variable.other.readwrite.ts
//                                      ^ IdentifierOperator keyword.operator.arithmetic.ts
//                                        ^ NumericLiteral constant.numeric.decimal.ts
  export enum Day {
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^^ Keyword storage.type.enum.ts
//            ^^^ IdentifierType entity.name.type.enum.ts
//                ^ PunctuationBracket punctuation.definition.block.ts
      Weekday = 1,
//    ^^^^^^^ Identifier variable.other.enummember.ts
//            ^ IdentifierOperator keyword.operator.assignment.ts
//              ^ NumericLiteral constant.numeric.decimal.ts
//               ^ PunctuationBracket punctuation.separator.comma.ts
      Weekend = 2
//    ^^^^^^^ Identifier variable.other.enummember.ts
//            ^ IdentifierOperator keyword.operator.assignment.ts
//              ^ NumericLiteral constant.numeric.decimal.ts
  }
//^ PunctuationBracket punctuation.definition.block.ts
  export type MyNumber = number
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^^ Keyword storage.type.type.ts
//            ^^^^^^^^ IdentifierType entity.name.type.alias.ts
//                     ^ IdentifierOperator keyword.operator.assignment.ts
//                       ^^^^^^ IdentifierType support.type.primitive.ts
  export const a = 42
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^^^ Keyword storage.type.ts
//             ^ Identifier variable.other.constant.ts
//               ^ IdentifierOperator keyword.operator.assignment.ts
//                 ^^ NumericLiteral constant.numeric.decimal.ts
  const aa = 42
//^^^^^ Keyword storage.type.ts
//      ^^ Identifier variable.other.constant.ts
//         ^ IdentifierOperator keyword.operator.assignment.ts
//           ^^ NumericLiteral constant.numeric.decimal.ts
  export let b = 42
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^ Keyword storage.type.ts
//           ^ Identifier variable.other.readwrite.ts
//             ^ IdentifierOperator keyword.operator.assignment.ts
//               ^^ NumericLiteral constant.numeric.decimal.ts
  export var c = 42
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^ Keyword storage.type.ts
//           ^ Identifier variable.other.readwrite.ts
//             ^ IdentifierOperator keyword.operator.assignment.ts
//               ^^ NumericLiteral constant.numeric.decimal.ts
  export var d1 = {e2:41}
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^ Keyword storage.type.ts
//           ^^ Identifier variable.other.readwrite.ts
//              ^ IdentifierOperator keyword.operator.assignment.ts
//                ^ PunctuationBracket punctuation.definition.block.ts
//                 ^^ IdentifierAttribute meta.object-literal.key.ts
//                   ^ PunctuationBracket punctuation.separator.key-value.ts
//                    ^^ NumericLiteral constant.numeric.decimal.ts
//                      ^ PunctuationBracket punctuation.definition.block.ts
  export var d = {
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^ Keyword storage.type.ts
//           ^ Identifier variable.other.readwrite.ts
//             ^ IdentifierOperator keyword.operator.assignment.ts
//               ^ PunctuationBracket punctuation.definition.block.ts
      key1: 1,
//    ^^^^ IdentifierAttribute meta.object-literal.key.ts
//        ^ PunctuationBracket punctuation.separator.key-value.ts
//          ^ NumericLiteral constant.numeric.decimal.ts
//           ^ PunctuationBracket punctuation.separator.comma.ts
      key2: null,
//    ^^^^ IdentifierAttribute meta.object-literal.key.ts
//        ^ PunctuationBracket punctuation.separator.key-value.ts
//          ^^^^ IdentifierBuiltin constant.language.null.ts
//              ^ PunctuationBracket punctuation.separator.comma.ts
      key3: `abc${d1.e2}`,
//    ^^^^ IdentifierAttribute meta.object-literal.key.ts
//        ^ PunctuationBracket punctuation.separator.key-value.ts
//          ^ PunctuationBracket punctuation.definition.string.template.begin.ts
//           ^^^^^^^^^^^ StringLiteral punctuation.definition.string.template.end.ts
//              ^^ PunctuationBracket punctuation.definition.template-expression.begin.ts
//                ^^ Identifier variable.other.object.ts
//                  ^ PunctuationBracket punctuation.accessor.ts
//                   ^^ Identifier variable.other.property.ts
//                     ^ PunctuationBracket punctuation.definition.template-expression.end.ts
//                      ^ PunctuationBracket punctuation.definition.string.template.end.ts
//                       ^ PunctuationBracket punctuation.separator.comma.ts
  }
//^ PunctuationBracket punctuation.definition.block.ts
  export var e = Object.keys(d) as MyClass
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^ Keyword storage.type.ts
//           ^ Identifier variable.other.readwrite.ts
//             ^ IdentifierOperator keyword.operator.assignment.ts
//               ^^^^^^ IdentifierType support.class.builtin.ts
//                     ^ PunctuationBracket punctuation.accessor.ts
//                      ^^^^ IdentifierFunction support.function.dom.ts
//                          ^ PunctuationBracket meta.brace.round.ts
//                           ^ Identifier variable.other.readwrite.ts
//                            ^ PunctuationBracket meta.brace.round.ts
//                              ^^ Keyword keyword.control.as.ts
//                                 ^^^^^^^ IdentifierType entity.name.type.ts
  export function f() {}
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^^^^^^ Keyword storage.type.function.ts
//                ^ IdentifierFunction entity.name.function.ts
//                 ^ PunctuationBracket punctuation.definition.parameters.begin.ts
//                  ^ PunctuationBracket punctuation.definition.parameters.end.ts
//                    ^ PunctuationBracket punctuation.definition.block.ts
//                     ^ PunctuationBracket punctuation.definition.block.ts
  
  const negatedFilterToNegatableFilter: { [key: string]: MyClass } = null as any
//^^^^^ Keyword storage.type.ts
//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Identifier variable.other.constant.ts
//                                    ^ IdentifierOperator keyword.operator.type.annotation.ts
//                                      ^ PunctuationBracket punctuation.definition.block.ts
//                                        ^ PunctuationBracket meta.brace.square.ts
//                                         ^^^ Identifier variable.parameter.ts
//                                            ^ IdentifierOperator keyword.operator.type.annotation.ts
//                                              ^^^^^^ IdentifierType support.type.primitive.ts
//                                                    ^ PunctuationBracket meta.brace.square.ts
//                                                     ^ IdentifierOperator keyword.operator.type.annotation.ts
//                                                       ^^^^^^^ IdentifierType entity.name.type.ts
//                                                               ^ PunctuationBracket punctuation.definition.block.ts
//                                                                 ^ IdentifierOperator keyword.operator.assignment.ts
//                                                                   ^^^^ IdentifierBuiltin constant.language.null.ts
//                                                                        ^^ Keyword keyword.control.as.ts
//                                                                           ^^^ IdentifierType support.type.primitive.ts
  
  const scanToken = <T extends Term = Literal>(
//^^^^^ Keyword storage.type.ts
//      ^^^^^^^^^ IdentifierFunction entity.name.function.ts
//                ^ IdentifierOperator keyword.operator.assignment.ts
//                  ^ PunctuationBracket punctuation.definition.typeparameters.begin.ts
//                   ^ IdentifierType entity.name.type.ts
//                     ^^^^^^^ Keyword storage.modifier.ts
//                             ^^^^ IdentifierType entity.name.type.ts
//                                  ^ IdentifierOperator keyword.operator.assignment.ts
//                                    ^^^^^^^ IdentifierType entity.name.type.ts
//                                           ^ PunctuationBracket punctuation.definition.typeparameters.end.ts
//                                            ^ PunctuationBracket meta.brace.round.ts
      regexp: RegExp,
//    ^^^^^^ Identifier variable.parameter.ts
//          ^ IdentifierOperator keyword.operator.type.annotation.ts
//            ^^^^^^ IdentifierType entity.name.type.ts
//                  ^ PunctuationBracket punctuation.separator.parameter.ts
      output?: T | ((input: string, range: CharacterRange) => T),
//    ^^^^^^ Identifier variable.parameter.ts
//          ^ IdentifierOperator keyword.operator.optional.ts
//           ^ IdentifierOperator keyword.operator.type.annotation.ts
//             ^ IdentifierType entity.name.type.ts
//               ^ IdentifierOperator keyword.operator.type.ts
//                 ^ PunctuationBracket meta.brace.round.ts
//                  ^ PunctuationBracket punctuation.definition.parameters.begin.ts
//                   ^^^^^ Identifier variable.parameter.ts
//                        ^ IdentifierOperator keyword.operator.type.annotation.ts
//                          ^^^^^^ IdentifierType support.type.primitive.ts
//                                ^ PunctuationBracket punctuation.separator.parameter.ts
//                                  ^^^^^ Identifier variable.parameter.ts
//                                       ^ IdentifierOperator keyword.operator.type.annotation.ts
//                                         ^^^^^^^^^^^^^^ IdentifierType entity.name.type.ts
//                                                       ^ PunctuationBracket punctuation.definition.parameters.end.ts
//                                                         ^^ IdentifierType storage.type.function.arrow.ts
//                                                            ^ IdentifierType entity.name.type.ts
//                                                             ^ PunctuationBracket meta.brace.round.ts
//                                                              ^ PunctuationBracket punctuation.separator.parameter.ts
      expected?: string
//    ^^^^^^^^ Identifier variable.parameter.ts
//            ^ IdentifierOperator keyword.operator.optional.ts
//             ^ IdentifierOperator keyword.operator.type.annotation.ts
//               ^^^^^^ IdentifierType support.type.primitive.ts
  ): Parser<T> => {
//^ PunctuationBracket meta.brace.round.ts
// ^ IdentifierOperator keyword.operator.type.annotation.ts
//  ^ IdentifierType entity.name.type.ts
//   ^^^^^^ IdentifierType entity.name.type.ts
//         ^ PunctuationBracket punctuation.definition.typeparameters.begin.ts
//         ^^^^ IdentifierType meta.return.type.arrow.ts
//          ^ IdentifierType entity.name.type.ts
//           ^ PunctuationBracket punctuation.definition.typeparameters.end.ts
//             ^^ IdentifierType storage.type.function.arrow.ts
//                ^ PunctuationBracket punctuation.definition.block.ts
      if (!regexp.source.startsWith('^')) {
//    ^^ Keyword keyword.control.conditional.ts
//       ^ PunctuationBracket meta.brace.round.ts
//        ^ IdentifierOperator keyword.operator.logical.ts
//         ^^^^^^ Identifier variable.other.object.ts
//               ^ PunctuationBracket punctuation.accessor.ts
//                ^^^^^^ Identifier support.variable.property.dom.ts
//                      ^ PunctuationBracket punctuation.accessor.ts
//                       ^^^^^^^^^^ IdentifierFunction entity.name.function.ts
//                                 ^ PunctuationBracket meta.brace.round.ts
//                                  ^^^ StringLiteral string.quoted.single.ts
//                                     ^ PunctuationBracket meta.brace.round.ts
//                                      ^ PunctuationBracket meta.brace.round.ts
//                                        ^ PunctuationBracket punctuation.definition.block.ts
          regexp = new RegExp(`^${regexp.source}`, regexp.flags)
//        ^^^^^^ Identifier variable.other.readwrite.ts
//               ^ IdentifierOperator keyword.operator.assignment.ts
//                 ^^^ IdentifierOperator keyword.operator.new.ts
//                     ^^^^^^ IdentifierType entity.name.type.ts
//                           ^ PunctuationBracket meta.brace.round.ts
//                            ^ PunctuationBracket punctuation.definition.string.template.begin.ts
//                             ^^^^^^^^^^^^^^^^^ StringLiteral punctuation.definition.string.template.end.ts
//                              ^^ PunctuationBracket punctuation.definition.template-expression.begin.ts
//                                ^^^^^^ Identifier variable.other.object.ts
//                                      ^ PunctuationBracket punctuation.accessor.ts
//                                       ^^^^^^ Identifier support.variable.property.dom.ts
//                                             ^ PunctuationBracket punctuation.definition.template-expression.end.ts
//                                              ^ PunctuationBracket punctuation.definition.string.template.end.ts
//                                               ^ PunctuationBracket punctuation.separator.comma.ts
//                                                 ^^^^^^ Identifier variable.other.object.ts
//                                                       ^ PunctuationBracket punctuation.accessor.ts
//                                                        ^^^^^ Identifier variable.other.property.ts
//                                                             ^ PunctuationBracket meta.brace.round.ts
      }
//    ^ PunctuationBracket punctuation.definition.block.ts
  }
//^ PunctuationBracket punctuation.definition.block.ts
  
  export const URI: typeof URL
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^^^ Keyword storage.type.ts
//             ^^^ Identifier variable.other.constant.ts
//                ^ IdentifierOperator keyword.operator.type.annotation.ts
//                  ^^^^^^ Keyword keyword.operator.expression.typeof.ts
//                         ^^^ IdentifierType entity.name.type.ts
  
  export class SiteAdminUsageStatisticsPage extends React.Component<
//^^^^^^ Keyword keyword.control.export.ts
//       ^^^^^ Keyword storage.type.class.ts
//             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierType entity.name.type.class.ts
//                                          ^^^^^^^ Keyword storage.modifier.ts
//                                                  ^^^^^ IdentifierType entity.name.type.module.ts
//                                                       ^ PunctuationBracket punctuation.accessor.ts
//                                                        ^^^^^^^^^ Identifier entity.other.inherited-class.ts
//                                                                 ^ PunctuationBracket punctuation.definition.typeparameters.begin.ts
      SiteAdminUsageStatisticsPageProps,
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierType entity.name.type.ts
//                                     ^ PunctuationBracket punctuation.separator.comma.ts
      SiteAdminUsageStatisticsPageState
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierType entity.name.type.ts
  > {
//^ PunctuationBracket punctuation.definition.typeparameters.end.ts
//  ^ PunctuationBracket punctuation.definition.block.ts
      private loadLatestChartFromStorage(): keyof ChartOptions {
//    ^^^^^^^ Keyword storage.modifier.ts
//            ^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierFunction entity.name.function.ts
//                                      ^ PunctuationBracket punctuation.definition.parameters.begin.ts
//                                       ^ PunctuationBracket punctuation.definition.parameters.end.ts
//                                        ^ IdentifierOperator keyword.operator.type.annotation.ts
//                                         ^ IdentifierType keyword.operator.expression.keyof.ts
//                                          ^^^^^ Keyword keyword.operator.expression.keyof.ts
//                                               ^ IdentifierType entity.name.type.ts
//                                                ^^^^^^^^^^^^ IdentifierType entity.name.type.ts
//                                                            ^ IdentifierType meta.return.type.ts
//                                                             ^ PunctuationBracket punctuation.definition.block.ts
          const latest = localStorage.getItem(CHART_ID_KEY)
//        ^^^^^ Keyword storage.type.ts
//              ^^^^^^ Identifier variable.other.constant.ts
//                     ^ IdentifierOperator keyword.operator.assignment.ts
//                       ^^^^^^^^^^^^ Identifier variable.other.object.ts
//                                   ^ PunctuationBracket punctuation.accessor.ts
//                                    ^^^^^^^ IdentifierFunction support.function.dom.ts
//                                           ^ PunctuationBracket meta.brace.round.ts
//                                            ^^^^^^^^^^^^ Identifier variable.other.constant.ts
//                                                        ^ PunctuationBracket meta.brace.round.ts
          return latest && latest in chartGeneratorOptions ? (latest as keyof ChartOptions) : 'daus'
//        ^^^^^^ Keyword keyword.control.flow.ts
//               ^^^^^^ Identifier variable.other.readwrite.ts
//                      ^^ IdentifierOperator keyword.operator.logical.ts
//                         ^^^^^^ Identifier variable.other.readwrite.ts
//                                ^^ IdentifierOperator keyword.operator.expression.in.ts
//                                   ^^^^^^^^^^^^^^^^^^^^^ Identifier variable.other.readwrite.ts
//                                                         ^ IdentifierOperator keyword.operator.ternary.ts
//                                                           ^ PunctuationBracket meta.brace.round.ts
//                                                            ^^^^^^ Identifier variable.other.readwrite.ts
//                                                                   ^^ Keyword keyword.control.as.ts
//                                                                      ^^^^^ Keyword keyword.operator.expression.keyof.ts
//                                                                            ^^^^^^^^^^^^ IdentifierType entity.name.type.ts
//                                                                                        ^ PunctuationBracket meta.brace.round.ts
//                                                                                          ^ IdentifierOperator keyword.operator.ternary.ts
//                                                                                            ^^^^^^ StringLiteral string.quoted.single.ts
      }
//    ^ PunctuationBracket punctuation.definition.block.ts
  
  }
//^ PunctuationBracket punctuation.definition.block.ts

