---
source: crates/sg-syntax/src/sg_treesitter.rs
assertion_line: 419
expression: "snapshot_treesitter_syntax_and_symbols(&document, &contents)"
---
  #! /usr/bin/env perl
//^^^^^^^^^^^^^^^^^^^^ Comment 0:0..6:45
  # Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved.
  #
  # Licensed under the Apache License 2.0 (the "License").  You may not use
  # this file except in compliance with the License.  You can obtain a copy
  # in the file LICENSE in the source distribution or at
  # https://www.openssl.org/source/license.html
  
  ($#ARGV == 1) || die "usage: cmp.pl <file1> <file2>\n";
//           ^ NumericLiteral
//                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral
//                                                   ^^ StringLiteral
//                                                     ^ StringLiteral
  
  open(IN0,"<$ARGV[0]") || die "unable to open $ARGV[0]\n";
//^^^^ IdentifierFunction
//     ^^^ Keyword
//         ^^ StringLiteral
//           ^^^^^ Identifier
//                ^^^^ StringLiteral
//                             ^^^^^^^^^^^^^^^^ StringLiteral
//                                             ^^^^^ Identifier
//                                                  ^^^ StringLiteral
//                                                     ^^ StringLiteral
//                                                       ^ StringLiteral
  open(IN1,"<$ARGV[1]") || die "unable to open $ARGV[1]\n";
//^^^^ IdentifierFunction
//     ^^^ Keyword
//         ^^ StringLiteral
//           ^^^^^ Identifier
//                ^^^^ StringLiteral
//                             ^^^^^^^^^^^^^^^^ StringLiteral
//                                             ^^^^^ Identifier
//                                                  ^^^ StringLiteral
//                                                     ^^ StringLiteral
//                                                       ^ StringLiteral
  binmode IN0;
//        ^^^ Keyword
  binmode IN1;
//        ^^^ Keyword
  
  $tot=0;
//^^^^ Identifier definition local 1
//    ^ IdentifierOperator
//     ^ NumericLiteral
  $ret=1;
//^^^^ Identifier definition local 2
//    ^ IdentifierOperator
//     ^ NumericLiteral
  for (;;)
//^^^ Keyword
  {
      $n1=sysread(IN0,$b1,4096);
//    ^^^ Identifier
//       ^ IdentifierOperator
//        ^^^^^^^ IdentifierFunction
//                ^^^ Keyword
//                    ^^^ Identifier
//                        ^^^^ NumericLiteral
      $n2=sysread(IN1,$b2,4096);
//    ^^^ Identifier
//       ^ IdentifierOperator
//        ^^^^^^^ IdentifierFunction
//                ^^^ Keyword
//                    ^^^ Identifier
//                        ^^^^ NumericLiteral
  
      last if ($n1 != $n2);
//    ^^^^ Keyword
//         ^^ Keyword
//             ^^^ Identifier
//                    ^^^ Identifier
      last if ($b1 ne $b2);
//    ^^^^ Keyword
//         ^^ Keyword
//             ^^^ Identifier
//                 ^^ IdentifierOperator
//                    ^^^ Identifier
      last if ($n1 < 0);
//    ^^^^ Keyword
//         ^^ Keyword
//             ^^^ Identifier
//                   ^ NumericLiteral
      if ($n1 == 0)
//    ^^ Keyword
//        ^^^ Identifier
//               ^ NumericLiteral
      {
          $ret=0;
//        ^^^^ Identifier reference local 2
//            ^ IdentifierOperator
//             ^ NumericLiteral
          last;
//        ^^^^ Keyword
      }
      $tot+=$n1;
//    ^^^^ Identifier reference local 1
//          ^^^ Identifier
  }
  
  close(IN0);
//^^^^^ IdentifierBuiltin
//      ^^^ Keyword
  close(IN1);
//^^^^^ IdentifierBuiltin
//      ^^^ Keyword
  if ($ret)
//^^ Keyword
//    ^^^^ Identifier reference local 2
  {
      printf STDERR "$ARGV[0] and $ARGV[1] are different\n";
//                  ^ StringLiteral
//                   ^^^^^ Identifier
//                        ^^^^^^^^ StringLiteral
//                                ^^^^^ Identifier
//                                     ^^^^^^^^^^^^^^^^^ StringLiteral
//                                                      ^^ StringLiteral
//                                                        ^ StringLiteral
      @a1=unpack("C*",$b1);
//    ^^^ Identifier
//       ^ IdentifierOperator
//        ^^^^^^ IdentifierFunction
//               ^^^^ StringLiteral
//                    ^^^ Identifier
      @a2=unpack("C*",$b2);
//    ^^^ Identifier
//       ^ IdentifierOperator
//        ^^^^^^ IdentifierFunction
//               ^^^^ StringLiteral
//                    ^^^ Identifier
      for ($i=0; $i<=$#a1; $i++)
//    ^^^ Keyword
//         ^^ Identifier
//           ^ IdentifierOperator
//            ^ NumericLiteral
//               ^^ Identifier
//                         ^^ Identifier
      {
          if ($a1[$i] ne $a2[$i])
//        ^^ Keyword
//            ^^^ Identifier
//               ^ Identifier
//                ^^ Identifier
//                  ^ Identifier
//                    ^^ IdentifierOperator
//                       ^^^ Identifier
//                          ^ Identifier
//                           ^^ Identifier
//                             ^ Identifier
          {
              printf "%02X %02X <<\n",$a1[$i],$a2[$i];
//                   ^^^^^^^^^^^^^ StringLiteral
//                                ^^ StringLiteral
//                                  ^ StringLiteral
//                                    ^^^ Identifier
//                                       ^ Identifier
//                                        ^^ Identifier
//                                          ^ Identifier
//                                            ^^^ Identifier
//                                               ^ Identifier
//                                                ^^ Identifier
//                                                  ^ Identifier
              last;
//            ^^^^ Keyword
          }
      }
      $nm=$tot+$n1;
//    ^^^ Identifier
//       ^ IdentifierOperator
//        ^^^^ Identifier reference local 1
//             ^^^ Identifier
      $tot+=$i+1;
//    ^^^^ Identifier reference local 1
//          ^^ Identifier
//             ^ NumericLiteral
      printf STDERR "diff at char $tot of $nm\n";
//                  ^^^^^^^^^^^^^^ StringLiteral
//                                ^^^^ Identifier reference local 1
//                                    ^^^^ StringLiteral
//                                        ^^^ Identifier
//                                           ^^ StringLiteral
//                                             ^ StringLiteral
  }
  exit($ret);
//^^^^ IdentifierBuiltin
//     ^^^^ Identifier reference local 2

