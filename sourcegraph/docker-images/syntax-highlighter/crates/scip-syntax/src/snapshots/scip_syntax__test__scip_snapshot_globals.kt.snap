---
source: crates/scip-syntax/src/lib.rs
expression: dumped
---
  package org.example
//        ^^^^^^^^^^^ definition(Package) scip-ctags `org.example`/
  
  // Top level constant property
  const val PI = 3.14
//          ^^ definition(Constant) scip-ctags `org.example`/PI.
  
  // Top level property with getter
  val version: String
//    ^^^^^^^ definition(Property) scip-ctags `org.example`/version.
      get() = "1.0.0"
  
  // Top level function
  fun printHello() {
//    ^^^^^^^^^^ definition(Method) scip-ctags `org.example`/printHello().
      println("Hello, Kotlin!")
  }
  
  // Class with properties and methods
  class MyKotlinClass {
//      ^^^^^^^^^^^^^ definition(Class) scip-ctags `org.example`/MyKotlinClass#
      var prop: String = "property"
//        ^^^^ definition(Property) scip-ctags `org.example`/MyKotlinClass#prop.
  
      fun method() {
//        ^^^^^^ definition(Method) scip-ctags `org.example`/MyKotlinClass#method().
          println("This is a method")
      }
  }
  
  // Data class
  data class User(val name: String, val age: Int)
//           ^^^^ definition(Class) scip-ctags `org.example`/User#
//                    ^^^^ definition(Property) scip-ctags `org.example`/User#name.
//                                      ^^^ definition(Property) scip-ctags `org.example`/User#age.
  
  // Enum class
  enum class Days {
//           ^^^^ definition(Enum) scip-ctags `org.example`/Days#
      MONDAY,
//    ^^^^^^ definition(EnumMember) scip-ctags `org.example`/Days#MONDAY.
      TUESDAY,
//    ^^^^^^^ definition(EnumMember) scip-ctags `org.example`/Days#TUESDAY.
      WEDNESDAY,
//    ^^^^^^^^^ definition(EnumMember) scip-ctags `org.example`/Days#WEDNESDAY.
      THURSDAY,
//    ^^^^^^^^ definition(EnumMember) scip-ctags `org.example`/Days#THURSDAY.
      FRIDAY,
//    ^^^^^^ definition(EnumMember) scip-ctags `org.example`/Days#FRIDAY.
      SATURDAY,
//    ^^^^^^^^ definition(EnumMember) scip-ctags `org.example`/Days#SATURDAY.
      SUNDAY
//    ^^^^^^ definition(EnumMember) scip-ctags `org.example`/Days#SUNDAY.
  }
  
  // Object (singleton)
  object MyObject {
//       ^^^^^^^^ definition(Object) scip-ctags `org.example`/MyObject#
      val property = "Object property"
//        ^^^^^^^^ definition(Property) scip-ctags `org.example`/MyObject#property.
  }
  
  // Interface
  interface MyInterface {
//          ^^^^^^^^^^^ definition(Interface) scip-ctags `org.example`/MyInterface#
      fun interfaceMethod(): String
//        ^^^^^^^^^^^^^^^ definition(Method) scip-ctags `org.example`/MyInterface#interfaceMethod().
  }
  
  object SimpleSingleton {
//       ^^^^^^^^^^^^^^^ definition(Object) scip-ctags `org.example`/SimpleSingleton#
      val answer = 42;
//        ^^^^^^ definition(Property) scip-ctags `org.example`/SimpleSingleton#answer.
      fun greet(name: String) = "Hello, $name!"
//        ^^^^^ definition(Method) scip-ctags `org.example`/SimpleSingleton#greet().
  }
  
  // Type alias
  typealias UserList = List<User>
//          ^^^^^^^^ definition(TypeAlias) scip-ctags `org.example`/UserList#
  
  // Extension function
  fun String.print() {
//           ^^^^^ definition(Method) scip-ctags `org.example`/print().
      println(this)
  }
  
  // Sealed class
  sealed class Result {
//             ^^^^^^ definition(Class) scip-ctags `org.example`/Result#
      data class Success(val message: String) : Result()
//               ^^^^^^^ definition(Class) scip-ctags `org.example`/Result#Success#
//                           ^^^^^^^ definition(Property) scip-ctags `org.example`/Result#Success#message.
      data class Error(val error: Exception) : Result()
//               ^^^^^ definition(Class) scip-ctags `org.example`/Result#Error#
//                         ^^^^^ definition(Property) scip-ctags `org.example`/Result#Error#error.
  }
  
  // Inline class
  inline class Password(val value: String)
//             ^^^^^^^^ definition(Class) scip-ctags `org.example`/Password#
//                          ^^^^^ definition(Property) scip-ctags `org.example`/Password#value.
  
  // Companion object
  class MyClassWithCompanion {
//      ^^^^^^^^^^^^^^^^^^^^ definition(Class) scip-ctags `org.example`/MyClassWithCompanion#
      companion object ConstantCompanion {
//                     ^^^^^^^^^^^^^^^^^ definition(Object) scip-ctags `org.example`/MyClassWithCompanion#ConstantCompanion#
          const val CONSTANT = "Companion constant"
//                  ^^^^^^^^ definition(Constant) scip-ctags `org.example`/MyClassWithCompanion#ConstantCompanion#CONSTANT.
      }
  }
  
  fun `Escaped`() {}
//    ^^^^^^^^^ definition(Method) scip-ctags . . . `org.example`/``Escaped``().
  
  // Multi-variable declaration
  val (left, right) = directions()
//     ^^^^ definition(Property) scip-ctags `org.example`/left.
//           ^^^^^ definition(Property) scip-ctags `org.example`/right.
  
  // Anonymous function
  fun(x: Int, y: Int): Int = x + y

