---
source: crates/scip-syntax/src/lib.rs
expression: dumped
---
  // Top level constant property
  const val PI = 3.14
//          ^^ definition scip-ctags PI.
  
  // Top level property with getter
  val version: String
//    ^^^^^^^ definition scip-ctags version.
      get() = "1.0.0"
  
  // Top level function
  fun printHello() {
//    ^^^^^^^^^^ definition scip-ctags printHello().
      println("Hello, Kotlin!")
  }
  
  // Class with properties and methods
  class MyKotlinClass {
//      ^^^^^^^^^^^^^ definition scip-ctags MyKotlinClass#
      var prop: String = "property"
//        ^^^^ definition scip-ctags MyKotlinClass#prop.
  
      fun method() {
//        ^^^^^^ definition scip-ctags MyKotlinClass#method().
          println("This is a method")
      }
  }
  
  // Data class
  data class User(val name: String, val age: Int)
//           ^^^^ definition scip-ctags User#
//                    ^^^^ definition scip-ctags User#name.
//                                      ^^^ definition scip-ctags User#age.
  
  // Enum class
  enum class Days {
//           ^^^^ definition scip-ctags Days#
      MONDAY,
//    ^^^^^^ definition scip-ctags Days#MONDAY.
      TUESDAY,
//    ^^^^^^^ definition scip-ctags Days#TUESDAY.
      WEDNESDAY,
//    ^^^^^^^^^ definition scip-ctags Days#WEDNESDAY.
      THURSDAY,
//    ^^^^^^^^ definition scip-ctags Days#THURSDAY.
      FRIDAY,
//    ^^^^^^ definition scip-ctags Days#FRIDAY.
      SATURDAY,
//    ^^^^^^^^ definition scip-ctags Days#SATURDAY.
      SUNDAY
//    ^^^^^^ definition scip-ctags Days#SUNDAY.
  }
  
  // Object (singleton)
  object MyObject {
//       ^^^^^^^^ definition scip-ctags MyObject#
      val property = "Object property"
//        ^^^^^^^^ definition scip-ctags MyObject#property.
  }
  
  // Interface
  interface MyInterface {
//          ^^^^^^^^^^^ definition scip-ctags MyInterface#
      fun interfaceMethod(): String
  }
  
  // Type alias
  typealias UserList = List<User>
  
  // Extension function
  fun String.print() {
//           ^^^^^ definition scip-ctags print().
      println(this)
  }
  
  // Sealed class
  sealed class Result {
//             ^^^^^^ definition scip-ctags Result#
      data class Success(val message: String) : Result()
//               ^^^^^^^ definition scip-ctags Result#Success#
//                           ^^^^^^^ definition scip-ctags Result#Success#message.
      data class Error(val error: Exception) : Result()
//               ^^^^^ definition scip-ctags Result#Error#
//                         ^^^^^ definition scip-ctags Result#Error#error.
  }
  
  // Inline class
  inline class Password(val value: String)
//             ^^^^^^^^ definition scip-ctags Password#
//                          ^^^^^ definition scip-ctags Password#value.
  
  // Companion object
  class MyClassWithCompanion {
//      ^^^^^^^^^^^^^^^^^^^^ definition scip-ctags MyClassWithCompanion#
      companion object {
          const val CONSTANT = "Companion constant"
//                  ^^^^^^^^ definition scip-ctags MyClassWithCompanion#CONSTANT.
      }
  }
  
  fun `Escaped`() {}
//    ^^^^^^^^^ definition scip-ctags . . . ``Escaped``().
  
  val (left, right) = directions()
//     ^^^^ definition scip-ctags left.
//           ^^^^^ definition scip-ctags right.

