---
source: crates/scip-syntax/src/locals.rs
expression: scope_tree
---
scope global (0, 0)-(81, 0)
  hoisted_def myFunc (2, 9)-(2, 15)
  hoisted_def myNestedFunc (7, 9)-(7, 21)
  hoisted_def myPersistFunc (19, 9)-(19, 22)
  hoisted_def myScopeFunc (26, 9)-(26, 20)
  hoisted_def myFunction (36, 18)-(36, 28)
  hoisted_def MyClass (47, 23)-(47, 30)
  hoisted_def method1 (51, 26)-(51, 33)
  hoisted_def f (72, 9)-(72, 10)
  def a (0, 0)-(0, 1)
  ref a (0, 0)-(0, 1)
  scope function (2, 0)-(5, 3)
    ref myFunc (2, 9)-(2, 15)
    def e (3, 4)-(3, 5)
    ref e (3, 4)-(3, 5)
    def f (4, 4)-(4, 5)
    ref f (4, 4)-(4, 5)
  scope function (7, 0)-(13, 3)
    hoisted_def nestedChildFunc (10, 13)-(10, 28)
    ref myNestedFunc (7, 9)-(7, 21)
    def g (8, 4)-(8, 5)
    ref g (8, 4)-(8, 5)
    scope function (10, 4)-(12, 7)
      ref nestedChildFunc (10, 13)-(10, 28)
      def h (11, 8)-(11, 9)
      ref h (11, 8)-(11, 9)
  def i (15, 7)-(15, 8)
  def j (15, 9)-(15, 10)
  ref i (16, 0)-(16, 1)
  ref j (17, 0)-(17, 1)
  ref i (15, 7)-(15, 8)
  ref j (15, 9)-(15, 10)
  ref i (16, 0)-(16, 1)
  ref j (17, 0)-(17, 1)
  scope function (19, 0)-(24, 3)
    def k (20, 15)-(20, 16)
    ref k (22, 8)-(22, 9)
    ref myPersistFunc (19, 9)-(19, 22)
    ref k (20, 15)-(20, 16)
    ref isempty (21, 7)-(21, 14)
    ref k (21, 15)-(21, 16)
    ref k (22, 8)-(22, 9)
  scope function (26, 0)-(34, 3)
    def m (27, 4)-(27, 5)
    def n (29, 4)-(29, 5)
    ref n (30, 11)-(30, 12)
    def o (32, 4)-(32, 5)
    ref o (33, 15)-(33, 16)
    ref myScopeFunc (26, 9)-(26, 20)
    ref m (27, 4)-(27, 5)
    ref n (29, 4)-(29, 5)
    ref n (30, 11)-(30, 12)
    ref o (32, 4)-(32, 5)
    ref o (33, 15)-(33, 16)
  scope function (36, 0)-(39, 3)
    def a (36, 10)-(36, 11)
    def b (36, 13)-(36, 14)
    ref a (37, 4)-(37, 5)
    ref b (38, 4)-(38, 5)
    ref a (36, 10)-(36, 11)
    ref b (36, 13)-(36, 14)
    ref myFunction (36, 18)-(36, 28)
    ref a (37, 4)-(37, 5)
    ref b (38, 4)-(38, 5)
  scope scope (41, 0)-(55, 3)
    ref MyClass (41, 9)-(41, 16)
    ref Prop1 (43, 8)-(43, 13)
    scope function (47, 8)-(49, 11)
      def obj (47, 17)-(47, 20)
      ref obj (47, 17)-(47, 20)
      ref MyClass (47, 23)-(47, 30)
      def prop1 (47, 31)-(47, 36)
      ref prop1 (47, 31)-(47, 36)
      ref obj (48, 12)-(48, 15)
      ref Prop1 (48, 16)-(48, 21)
      ref prop1 (48, 24)-(48, 29)
    scope function (51, 8)-(53, 11)
      def result (51, 17)-(51, 23)
      def obj (51, 34)-(51, 37)
      ref result (52, 12)-(52, 18)
      ref result (51, 17)-(51, 23)
      ref method1 (51, 26)-(51, 33)
      ref obj (51, 34)-(51, 37)
      ref result (52, 12)-(52, 18)
      ref obj (52, 21)-(52, 24)
      ref Prop1 (52, 25)-(52, 30)
  def myObject (57, 0)-(57, 8)
  ref myObject (57, 0)-(57, 8)
  ref MyClass (57, 11)-(57, 18)
  def result (58, 0)-(58, 6)
  ref result (58, 0)-(58, 6)
  ref myObject (58, 9)-(58, 17)
  ref method1 (58, 18)-(58, 25)
  def addTwoNumbers (60, 0)-(60, 13)
  ref addTwoNumbers (60, 0)-(60, 13)
  scope scope (60, 16)-(60, 29)
    def x (60, 18)-(60, 19)
    ref x (60, 18)-(60, 19)
    def y (60, 21)-(60, 22)
    ref y (60, 21)-(60, 22)
    ref x (60, 24)-(60, 25)
    ref y (60, 28)-(60, 29)
  def slay (65, 0)-(65, 4)
  ref slay (67, 0)-(67, 4)
  def pog1 (69, 0)-(69, 4)
  ref pog1 (70, 0)-(70, 4)
  ref slay (65, 0)-(65, 4)
  ref slay (67, 0)-(67, 4)
  ref pog1 (69, 0)-(69, 4)
  ref pog1 (70, 0)-(70, 4)
  scope function (72, 0)-(80, 3)
    def pog2 (74, 4)-(74, 8)
    ref pog2 (77, 4)-(77, 8)
    ref f (72, 9)-(72, 10)
    ref pog2 (74, 4)-(74, 8)
    ref pog2 (77, 4)-(77, 8)
    ref disp (79, 2)-(79, 6)
    ref pog2 (79, 7)-(79, 11)

