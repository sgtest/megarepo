---
source: crates/scip-syntax/src/lib.rs
expression: dumped
---
  // Traditional variable declaration
  var traditionalVar = "Hello, I'm an old-style variable";
//    ^^^^^^^^^^^^^^ definition scip-ctags traditionalVar.
  
  // Let variable declaration
  let scopedLetVar = "Hello, I'm a block-scoped variable";
//    ^^^^^^^^^^^^ definition scip-ctags scopedLetVar.
  
  // Constant variable declaration
  const constantVar = "Hello, I'm a constant variable";
//      ^^^^^^^^^^^ definition scip-ctags constantVar.
  
  // Function declaration
  function functionDeclaration() {
//         ^^^^^^^^^^^^^^^^^^^ definition scip-ctags functionDeclaration().
    return "Hello, I'm a function declaration";
  }
  
  // Anonymous function declaration
  var anonymousFunction = function() {
//    ^^^^^^^^^^^^^^^^^ definition scip-ctags anonymousFunction.
    return "Hello, I'm an anonymous function";
  };
  
  // ES6 arrow function declaration
  const arrowFunction = () => {
//      ^^^^^^^^^^^^^ definition scip-ctags arrowFunction.
    return "Hello, I'm an arrow function";
  };
  
  // ES6 class declaration
  class ClassDeclaration {
//      ^^^^^^^^^^^^^^^^ definition scip-ctags ClassDeclaration#
    constructor() {
//  ^^^^^^^^^^^ definition scip-ctags ClassDeclaration#constructor().
      this.message = "Hello, I'm a class declaration";
    }
  }
  
  // Object declaration
  var objectDeclaration = {
//    ^^^^^^^^^^^^^^^^^ definition scip-ctags objectDeclaration.
    message: "Hello, I'm an object declaration"
//  ^^^^^^^ definition scip-ctags objectDeclaration.message.
  };
  
  // Object constructor declaration
  function ObjectConstructor() {
//         ^^^^^^^^^^^^^^^^^ definition scip-ctags ObjectConstructor().
    this.message = "Hello, I'm an object constructor";
  }
  var objectConstructed = new ObjectConstructor();
//    ^^^^^^^^^^^^^^^^^ definition scip-ctags objectConstructed.
  
  // ES6 method shorthand in object declaration
  var objectWithMethods = {
//    ^^^^^^^^^^^^^^^^^ definition scip-ctags objectWithMethods.
    method() {
      return "Hello, I'm a method in an object";
    }
  };
  
  // ES6 Generator Function declaration
  function* generatorFunction(){
//          ^^^^^^^^^^^^^^^^^ definition scip-ctags generatorFunction().
    yield "Hello, I'm a generator function";
  }
  
  // ES6 Async Function declaration
  async function asyncFunction() {
//               ^^^^^^^^^^^^^ definition scip-ctags asyncFunction().
    return "Hello, I'm an async function";
  }
  
  // Top level name through Object.defineProperty
  Object.defineProperty(window, 'definedProp', {
    value: "Hello, I'm a defined property",
    writable: false,
    enumerable: true,
    configurable: true
  });
  
  // ES6 class declaration
  class ExampleClass {
//      ^^^^^^^^^^^^ definition scip-ctags ExampleClass#
  
    // Private field declaration (ES2020)
    #privateField = "Hello, I'm a private field";
  
    // Private method declaration (ES2020)
    #privateMethod() {
//  ^^^^^^^^^^^^^^ definition scip-ctags ExampleClass#`#privateMethod`().
      return "Hello, I'm a private method";
    }
  
    // Class Constructor
    constructor(publicField, publicMethodParameter) {
//  ^^^^^^^^^^^ definition scip-ctags ExampleClass#constructor().
      this.publicField = publicField; // Public Field
      this.publicMethodParameter = publicMethodParameter;
    }
  
    // Instance method
    instanceMethod() {
//  ^^^^^^^^^^^^^^ definition scip-ctags ExampleClass#instanceMethod().
      return "Hello, I'm an instance method";
    }
  
    // Static method
    static staticMethod() {
//         ^^^^^^^^^^^^ definition scip-ctags ExampleClass#staticMethod().
      return "Hello, I'm a static method";
    }
  
    // Getter method
    get retrievedField() {
//      ^^^^^^^^^^^^^^ definition scip-ctags ExampleClass#retrievedField().
      return this.publicField;
    }
  
    // Setter method
    set updatedField(value) {
//      ^^^^^^^^^^^^ definition scip-ctags ExampleClass#updatedField().
      this.publicField = value;
    }
  
    // Public method using private field and private method
    publicMethod() {
//  ^^^^^^^^^^^^ definition scip-ctags ExampleClass#publicMethod().
      return this.#privateMethod() + " " + this.#privateField;
    }
  
    // Method using arguments
    methodWithArgs(arg1, arg2) {
//  ^^^^^^^^^^^^^^ definition scip-ctags ExampleClass#methodWithArgs().
      return "Hello, I received " + arg1 + " and " + arg2;
    }
  
    // Method using rest parameters
    methodWithRestArgs(...args) {
//  ^^^^^^^^^^^^^^^^^^ definition scip-ctags ExampleClass#methodWithRestArgs().
      return "Hello, I received " + args.join(", ");
    }
  }
  
  // Prototype methods
  function MyClass() {}
//         ^^^^^^^ definition scip-ctags MyClass().
  MyClass.prototype.myMethod = function() {};
  
  // Generator function
  function* myGeneratorFunction() {}
//          ^^^^^^^^^^^^^^^^^^^ definition scip-ctags myGeneratorFunction().
  
  // Async function
  async function myAsyncFunction() {}
//               ^^^^^^^^^^^^^^^ definition scip-ctags myAsyncFunction().

