// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	v1 "github.com/prometheus/client_golang/api/prometheus/v1"
	model "github.com/prometheus/common/model"
	"sync"
	"time"
)

// MockAPI is a mock implementation of the API interface (from the package
// github.com/prometheus/client_golang/api/prometheus/v1) used for unit
// testing.
type MockAPI struct {
	// AlertManagersFunc is an instance of a mock function object
	// controlling the behavior of the method AlertManagers.
	AlertManagersFunc *APIAlertManagersFunc
	// AlertsFunc is an instance of a mock function object controlling the
	// behavior of the method Alerts.
	AlertsFunc *APIAlertsFunc
	// CleanTombstonesFunc is an instance of a mock function object
	// controlling the behavior of the method CleanTombstones.
	CleanTombstonesFunc *APICleanTombstonesFunc
	// ConfigFunc is an instance of a mock function object controlling the
	// behavior of the method Config.
	ConfigFunc *APIConfigFunc
	// DeleteSeriesFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteSeries.
	DeleteSeriesFunc *APIDeleteSeriesFunc
	// FlagsFunc is an instance of a mock function object controlling the
	// behavior of the method Flags.
	FlagsFunc *APIFlagsFunc
	// LabelNamesFunc is an instance of a mock function object controlling
	// the behavior of the method LabelNames.
	LabelNamesFunc *APILabelNamesFunc
	// LabelValuesFunc is an instance of a mock function object controlling
	// the behavior of the method LabelValues.
	LabelValuesFunc *APILabelValuesFunc
	// MetadataFunc is an instance of a mock function object controlling the
	// behavior of the method Metadata.
	MetadataFunc *APIMetadataFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *APIQueryFunc
	// QueryRangeFunc is an instance of a mock function object controlling
	// the behavior of the method QueryRange.
	QueryRangeFunc *APIQueryRangeFunc
	// RulesFunc is an instance of a mock function object controlling the
	// behavior of the method Rules.
	RulesFunc *APIRulesFunc
	// RuntimeinfoFunc is an instance of a mock function object controlling
	// the behavior of the method Runtimeinfo.
	RuntimeinfoFunc *APIRuntimeinfoFunc
	// SeriesFunc is an instance of a mock function object controlling the
	// behavior of the method Series.
	SeriesFunc *APISeriesFunc
	// SnapshotFunc is an instance of a mock function object controlling the
	// behavior of the method Snapshot.
	SnapshotFunc *APISnapshotFunc
	// TSDBFunc is an instance of a mock function object controlling the
	// behavior of the method TSDB.
	TSDBFunc *APITSDBFunc
	// TargetsFunc is an instance of a mock function object controlling the
	// behavior of the method Targets.
	TargetsFunc *APITargetsFunc
	// TargetsMetadataFunc is an instance of a mock function object
	// controlling the behavior of the method TargetsMetadata.
	TargetsMetadataFunc *APITargetsMetadataFunc
}

// NewMockAPI creates a new mock of the API interface. All methods return
// zero values for all results, unless overwritten.
func NewMockAPI() *MockAPI {
	return &MockAPI{
		AlertManagersFunc: &APIAlertManagersFunc{
			defaultHook: func(context.Context) (v1.AlertManagersResult, error) {
				return v1.AlertManagersResult{}, nil
			},
		},
		AlertsFunc: &APIAlertsFunc{
			defaultHook: func(context.Context) (v1.AlertsResult, error) {
				return v1.AlertsResult{}, nil
			},
		},
		CleanTombstonesFunc: &APICleanTombstonesFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		ConfigFunc: &APIConfigFunc{
			defaultHook: func(context.Context) (v1.ConfigResult, error) {
				return v1.ConfigResult{}, nil
			},
		},
		DeleteSeriesFunc: &APIDeleteSeriesFunc{
			defaultHook: func(context.Context, []string, time.Time, time.Time) error {
				return nil
			},
		},
		FlagsFunc: &APIFlagsFunc{
			defaultHook: func(context.Context) (v1.FlagsResult, error) {
				return nil, nil
			},
		},
		LabelNamesFunc: &APILabelNamesFunc{
			defaultHook: func(context.Context, time.Time, time.Time) ([]string, v1.Warnings, error) {
				return nil, nil, nil
			},
		},
		LabelValuesFunc: &APILabelValuesFunc{
			defaultHook: func(context.Context, string, time.Time, time.Time) (model.LabelValues, v1.Warnings, error) {
				return nil, nil, nil
			},
		},
		MetadataFunc: &APIMetadataFunc{
			defaultHook: func(context.Context, string, string) (map[string][]v1.Metadata, error) {
				return nil, nil
			},
		},
		QueryFunc: &APIQueryFunc{
			defaultHook: func(context.Context, string, time.Time) (model.Value, v1.Warnings, error) {
				return nil, nil, nil
			},
		},
		QueryRangeFunc: &APIQueryRangeFunc{
			defaultHook: func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error) {
				return nil, nil, nil
			},
		},
		RulesFunc: &APIRulesFunc{
			defaultHook: func(context.Context) (v1.RulesResult, error) {
				return v1.RulesResult{}, nil
			},
		},
		RuntimeinfoFunc: &APIRuntimeinfoFunc{
			defaultHook: func(context.Context) (v1.RuntimeinfoResult, error) {
				return v1.RuntimeinfoResult{}, nil
			},
		},
		SeriesFunc: &APISeriesFunc{
			defaultHook: func(context.Context, []string, time.Time, time.Time) ([]model.LabelSet, v1.Warnings, error) {
				return nil, nil, nil
			},
		},
		SnapshotFunc: &APISnapshotFunc{
			defaultHook: func(context.Context, bool) (v1.SnapshotResult, error) {
				return v1.SnapshotResult{}, nil
			},
		},
		TSDBFunc: &APITSDBFunc{
			defaultHook: func(context.Context) (v1.TSDBResult, error) {
				return v1.TSDBResult{}, nil
			},
		},
		TargetsFunc: &APITargetsFunc{
			defaultHook: func(context.Context) (v1.TargetsResult, error) {
				return v1.TargetsResult{}, nil
			},
		},
		TargetsMetadataFunc: &APITargetsMetadataFunc{
			defaultHook: func(context.Context, string, string, string) ([]v1.MetricMetadata, error) {
				return nil, nil
			},
		},
	}
}

// NewMockAPIFrom creates a new mock of the MockAPI interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockAPIFrom(i v1.API) *MockAPI {
	return &MockAPI{
		AlertManagersFunc: &APIAlertManagersFunc{
			defaultHook: i.AlertManagers,
		},
		AlertsFunc: &APIAlertsFunc{
			defaultHook: i.Alerts,
		},
		CleanTombstonesFunc: &APICleanTombstonesFunc{
			defaultHook: i.CleanTombstones,
		},
		ConfigFunc: &APIConfigFunc{
			defaultHook: i.Config,
		},
		DeleteSeriesFunc: &APIDeleteSeriesFunc{
			defaultHook: i.DeleteSeries,
		},
		FlagsFunc: &APIFlagsFunc{
			defaultHook: i.Flags,
		},
		LabelNamesFunc: &APILabelNamesFunc{
			defaultHook: i.LabelNames,
		},
		LabelValuesFunc: &APILabelValuesFunc{
			defaultHook: i.LabelValues,
		},
		MetadataFunc: &APIMetadataFunc{
			defaultHook: i.Metadata,
		},
		QueryFunc: &APIQueryFunc{
			defaultHook: i.Query,
		},
		QueryRangeFunc: &APIQueryRangeFunc{
			defaultHook: i.QueryRange,
		},
		RulesFunc: &APIRulesFunc{
			defaultHook: i.Rules,
		},
		RuntimeinfoFunc: &APIRuntimeinfoFunc{
			defaultHook: i.Runtimeinfo,
		},
		SeriesFunc: &APISeriesFunc{
			defaultHook: i.Series,
		},
		SnapshotFunc: &APISnapshotFunc{
			defaultHook: i.Snapshot,
		},
		TSDBFunc: &APITSDBFunc{
			defaultHook: i.TSDB,
		},
		TargetsFunc: &APITargetsFunc{
			defaultHook: i.Targets,
		},
		TargetsMetadataFunc: &APITargetsMetadataFunc{
			defaultHook: i.TargetsMetadata,
		},
	}
}

// APIAlertManagersFunc describes the behavior when the AlertManagers method
// of the parent MockAPI instance is invoked.
type APIAlertManagersFunc struct {
	defaultHook func(context.Context) (v1.AlertManagersResult, error)
	hooks       []func(context.Context) (v1.AlertManagersResult, error)
	history     []APIAlertManagersFuncCall
	mutex       sync.Mutex
}

// AlertManagers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAPI) AlertManagers(v0 context.Context) (v1.AlertManagersResult, error) {
	r0, r1 := m.AlertManagersFunc.nextHook()(v0)
	m.AlertManagersFunc.appendCall(APIAlertManagersFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AlertManagers method
// of the parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIAlertManagersFunc) SetDefaultHook(hook func(context.Context) (v1.AlertManagersResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AlertManagers method of the parent MockAPI instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *APIAlertManagersFunc) PushHook(hook func(context.Context) (v1.AlertManagersResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIAlertManagersFunc) SetDefaultReturn(r0 v1.AlertManagersResult, r1 error) {
	f.SetDefaultHook(func(context.Context) (v1.AlertManagersResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIAlertManagersFunc) PushReturn(r0 v1.AlertManagersResult, r1 error) {
	f.PushHook(func(context.Context) (v1.AlertManagersResult, error) {
		return r0, r1
	})
}

func (f *APIAlertManagersFunc) nextHook() func(context.Context) (v1.AlertManagersResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIAlertManagersFunc) appendCall(r0 APIAlertManagersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIAlertManagersFuncCall objects describing
// the invocations of this function.
func (f *APIAlertManagersFunc) History() []APIAlertManagersFuncCall {
	f.mutex.Lock()
	history := make([]APIAlertManagersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIAlertManagersFuncCall is an object that describes an invocation of
// method AlertManagers on an instance of MockAPI.
type APIAlertManagersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.AlertManagersResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIAlertManagersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIAlertManagersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APIAlertsFunc describes the behavior when the Alerts method of the parent
// MockAPI instance is invoked.
type APIAlertsFunc struct {
	defaultHook func(context.Context) (v1.AlertsResult, error)
	hooks       []func(context.Context) (v1.AlertsResult, error)
	history     []APIAlertsFuncCall
	mutex       sync.Mutex
}

// Alerts delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) Alerts(v0 context.Context) (v1.AlertsResult, error) {
	r0, r1 := m.AlertsFunc.nextHook()(v0)
	m.AlertsFunc.appendCall(APIAlertsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Alerts method of the
// parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIAlertsFunc) SetDefaultHook(hook func(context.Context) (v1.AlertsResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Alerts method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APIAlertsFunc) PushHook(hook func(context.Context) (v1.AlertsResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIAlertsFunc) SetDefaultReturn(r0 v1.AlertsResult, r1 error) {
	f.SetDefaultHook(func(context.Context) (v1.AlertsResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIAlertsFunc) PushReturn(r0 v1.AlertsResult, r1 error) {
	f.PushHook(func(context.Context) (v1.AlertsResult, error) {
		return r0, r1
	})
}

func (f *APIAlertsFunc) nextHook() func(context.Context) (v1.AlertsResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIAlertsFunc) appendCall(r0 APIAlertsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIAlertsFuncCall objects describing the
// invocations of this function.
func (f *APIAlertsFunc) History() []APIAlertsFuncCall {
	f.mutex.Lock()
	history := make([]APIAlertsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIAlertsFuncCall is an object that describes an invocation of method
// Alerts on an instance of MockAPI.
type APIAlertsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.AlertsResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIAlertsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIAlertsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APICleanTombstonesFunc describes the behavior when the CleanTombstones
// method of the parent MockAPI instance is invoked.
type APICleanTombstonesFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []APICleanTombstonesFuncCall
	mutex       sync.Mutex
}

// CleanTombstones delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAPI) CleanTombstones(v0 context.Context) error {
	r0 := m.CleanTombstonesFunc.nextHook()(v0)
	m.CleanTombstonesFunc.appendCall(APICleanTombstonesFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CleanTombstones
// method of the parent MockAPI instance is invoked and the hook queue is
// empty.
func (f *APICleanTombstonesFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CleanTombstones method of the parent MockAPI instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *APICleanTombstonesFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APICleanTombstonesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APICleanTombstonesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *APICleanTombstonesFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APICleanTombstonesFunc) appendCall(r0 APICleanTombstonesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APICleanTombstonesFuncCall objects
// describing the invocations of this function.
func (f *APICleanTombstonesFunc) History() []APICleanTombstonesFuncCall {
	f.mutex.Lock()
	history := make([]APICleanTombstonesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APICleanTombstonesFuncCall is an object that describes an invocation of
// method CleanTombstones on an instance of MockAPI.
type APICleanTombstonesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APICleanTombstonesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APICleanTombstonesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// APIConfigFunc describes the behavior when the Config method of the parent
// MockAPI instance is invoked.
type APIConfigFunc struct {
	defaultHook func(context.Context) (v1.ConfigResult, error)
	hooks       []func(context.Context) (v1.ConfigResult, error)
	history     []APIConfigFuncCall
	mutex       sync.Mutex
}

// Config delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) Config(v0 context.Context) (v1.ConfigResult, error) {
	r0, r1 := m.ConfigFunc.nextHook()(v0)
	m.ConfigFunc.appendCall(APIConfigFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Config method of the
// parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIConfigFunc) SetDefaultHook(hook func(context.Context) (v1.ConfigResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Config method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APIConfigFunc) PushHook(hook func(context.Context) (v1.ConfigResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIConfigFunc) SetDefaultReturn(r0 v1.ConfigResult, r1 error) {
	f.SetDefaultHook(func(context.Context) (v1.ConfigResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIConfigFunc) PushReturn(r0 v1.ConfigResult, r1 error) {
	f.PushHook(func(context.Context) (v1.ConfigResult, error) {
		return r0, r1
	})
}

func (f *APIConfigFunc) nextHook() func(context.Context) (v1.ConfigResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIConfigFunc) appendCall(r0 APIConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIConfigFuncCall objects describing the
// invocations of this function.
func (f *APIConfigFunc) History() []APIConfigFuncCall {
	f.mutex.Lock()
	history := make([]APIConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIConfigFuncCall is an object that describes an invocation of method
// Config on an instance of MockAPI.
type APIConfigFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.ConfigResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIConfigFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APIDeleteSeriesFunc describes the behavior when the DeleteSeries method
// of the parent MockAPI instance is invoked.
type APIDeleteSeriesFunc struct {
	defaultHook func(context.Context, []string, time.Time, time.Time) error
	hooks       []func(context.Context, []string, time.Time, time.Time) error
	history     []APIDeleteSeriesFuncCall
	mutex       sync.Mutex
}

// DeleteSeries delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAPI) DeleteSeries(v0 context.Context, v1 []string, v2 time.Time, v3 time.Time) error {
	r0 := m.DeleteSeriesFunc.nextHook()(v0, v1, v2, v3)
	m.DeleteSeriesFunc.appendCall(APIDeleteSeriesFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteSeries method
// of the parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIDeleteSeriesFunc) SetDefaultHook(hook func(context.Context, []string, time.Time, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteSeries method of the parent MockAPI instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *APIDeleteSeriesFunc) PushHook(hook func(context.Context, []string, time.Time, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIDeleteSeriesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []string, time.Time, time.Time) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIDeleteSeriesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []string, time.Time, time.Time) error {
		return r0
	})
}

func (f *APIDeleteSeriesFunc) nextHook() func(context.Context, []string, time.Time, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIDeleteSeriesFunc) appendCall(r0 APIDeleteSeriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIDeleteSeriesFuncCall objects describing
// the invocations of this function.
func (f *APIDeleteSeriesFunc) History() []APIDeleteSeriesFuncCall {
	f.mutex.Lock()
	history := make([]APIDeleteSeriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIDeleteSeriesFuncCall is an object that describes an invocation of
// method DeleteSeries on an instance of MockAPI.
type APIDeleteSeriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIDeleteSeriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIDeleteSeriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// APIFlagsFunc describes the behavior when the Flags method of the parent
// MockAPI instance is invoked.
type APIFlagsFunc struct {
	defaultHook func(context.Context) (v1.FlagsResult, error)
	hooks       []func(context.Context) (v1.FlagsResult, error)
	history     []APIFlagsFuncCall
	mutex       sync.Mutex
}

// Flags delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) Flags(v0 context.Context) (v1.FlagsResult, error) {
	r0, r1 := m.FlagsFunc.nextHook()(v0)
	m.FlagsFunc.appendCall(APIFlagsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Flags method of the
// parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIFlagsFunc) SetDefaultHook(hook func(context.Context) (v1.FlagsResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Flags method of the parent MockAPI instance inovkes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *APIFlagsFunc) PushHook(hook func(context.Context) (v1.FlagsResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIFlagsFunc) SetDefaultReturn(r0 v1.FlagsResult, r1 error) {
	f.SetDefaultHook(func(context.Context) (v1.FlagsResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIFlagsFunc) PushReturn(r0 v1.FlagsResult, r1 error) {
	f.PushHook(func(context.Context) (v1.FlagsResult, error) {
		return r0, r1
	})
}

func (f *APIFlagsFunc) nextHook() func(context.Context) (v1.FlagsResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIFlagsFunc) appendCall(r0 APIFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIFlagsFuncCall objects describing the
// invocations of this function.
func (f *APIFlagsFunc) History() []APIFlagsFuncCall {
	f.mutex.Lock()
	history := make([]APIFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIFlagsFuncCall is an object that describes an invocation of method
// Flags on an instance of MockAPI.
type APIFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.FlagsResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APILabelNamesFunc describes the behavior when the LabelNames method of
// the parent MockAPI instance is invoked.
type APILabelNamesFunc struct {
	defaultHook func(context.Context, time.Time, time.Time) ([]string, v1.Warnings, error)
	hooks       []func(context.Context, time.Time, time.Time) ([]string, v1.Warnings, error)
	history     []APILabelNamesFuncCall
	mutex       sync.Mutex
}

// LabelNames delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAPI) LabelNames(v0 context.Context, v1 time.Time, v2 time.Time) ([]string, v1.Warnings, error) {
	r0, r1, r2 := m.LabelNamesFunc.nextHook()(v0, v1, v2)
	m.LabelNamesFunc.appendCall(APILabelNamesFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the LabelNames method of
// the parent MockAPI instance is invoked and the hook queue is empty.
func (f *APILabelNamesFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time) ([]string, v1.Warnings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LabelNames method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APILabelNamesFunc) PushHook(hook func(context.Context, time.Time, time.Time) ([]string, v1.Warnings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APILabelNamesFunc) SetDefaultReturn(r0 []string, r1 v1.Warnings, r2 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time) ([]string, v1.Warnings, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APILabelNamesFunc) PushReturn(r0 []string, r1 v1.Warnings, r2 error) {
	f.PushHook(func(context.Context, time.Time, time.Time) ([]string, v1.Warnings, error) {
		return r0, r1, r2
	})
}

func (f *APILabelNamesFunc) nextHook() func(context.Context, time.Time, time.Time) ([]string, v1.Warnings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APILabelNamesFunc) appendCall(r0 APILabelNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APILabelNamesFuncCall objects describing
// the invocations of this function.
func (f *APILabelNamesFunc) History() []APILabelNamesFuncCall {
	f.mutex.Lock()
	history := make([]APILabelNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APILabelNamesFuncCall is an object that describes an invocation of method
// LabelNames on an instance of MockAPI.
type APILabelNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 v1.Warnings
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APILabelNamesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APILabelNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// APILabelValuesFunc describes the behavior when the LabelValues method of
// the parent MockAPI instance is invoked.
type APILabelValuesFunc struct {
	defaultHook func(context.Context, string, time.Time, time.Time) (model.LabelValues, v1.Warnings, error)
	hooks       []func(context.Context, string, time.Time, time.Time) (model.LabelValues, v1.Warnings, error)
	history     []APILabelValuesFuncCall
	mutex       sync.Mutex
}

// LabelValues delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAPI) LabelValues(v0 context.Context, v1 string, v2 time.Time, v3 time.Time) (model.LabelValues, v1.Warnings, error) {
	r0, r1, r2 := m.LabelValuesFunc.nextHook()(v0, v1, v2, v3)
	m.LabelValuesFunc.appendCall(APILabelValuesFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the LabelValues method
// of the parent MockAPI instance is invoked and the hook queue is empty.
func (f *APILabelValuesFunc) SetDefaultHook(hook func(context.Context, string, time.Time, time.Time) (model.LabelValues, v1.Warnings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LabelValues method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APILabelValuesFunc) PushHook(hook func(context.Context, string, time.Time, time.Time) (model.LabelValues, v1.Warnings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APILabelValuesFunc) SetDefaultReturn(r0 model.LabelValues, r1 v1.Warnings, r2 error) {
	f.SetDefaultHook(func(context.Context, string, time.Time, time.Time) (model.LabelValues, v1.Warnings, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APILabelValuesFunc) PushReturn(r0 model.LabelValues, r1 v1.Warnings, r2 error) {
	f.PushHook(func(context.Context, string, time.Time, time.Time) (model.LabelValues, v1.Warnings, error) {
		return r0, r1, r2
	})
}

func (f *APILabelValuesFunc) nextHook() func(context.Context, string, time.Time, time.Time) (model.LabelValues, v1.Warnings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APILabelValuesFunc) appendCall(r0 APILabelValuesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APILabelValuesFuncCall objects describing
// the invocations of this function.
func (f *APILabelValuesFunc) History() []APILabelValuesFuncCall {
	f.mutex.Lock()
	history := make([]APILabelValuesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APILabelValuesFuncCall is an object that describes an invocation of
// method LabelValues on an instance of MockAPI.
type APILabelValuesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 model.LabelValues
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 v1.Warnings
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APILabelValuesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APILabelValuesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// APIMetadataFunc describes the behavior when the Metadata method of the
// parent MockAPI instance is invoked.
type APIMetadataFunc struct {
	defaultHook func(context.Context, string, string) (map[string][]v1.Metadata, error)
	hooks       []func(context.Context, string, string) (map[string][]v1.Metadata, error)
	history     []APIMetadataFuncCall
	mutex       sync.Mutex
}

// Metadata delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) Metadata(v0 context.Context, v1 string, v2 string) (map[string][]v1.Metadata, error) {
	r0, r1 := m.MetadataFunc.nextHook()(v0, v1, v2)
	m.MetadataFunc.appendCall(APIMetadataFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Metadata method of
// the parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIMetadataFunc) SetDefaultHook(hook func(context.Context, string, string) (map[string][]v1.Metadata, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Metadata method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APIMetadataFunc) PushHook(hook func(context.Context, string, string) (map[string][]v1.Metadata, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIMetadataFunc) SetDefaultReturn(r0 map[string][]v1.Metadata, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (map[string][]v1.Metadata, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIMetadataFunc) PushReturn(r0 map[string][]v1.Metadata, r1 error) {
	f.PushHook(func(context.Context, string, string) (map[string][]v1.Metadata, error) {
		return r0, r1
	})
}

func (f *APIMetadataFunc) nextHook() func(context.Context, string, string) (map[string][]v1.Metadata, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIMetadataFunc) appendCall(r0 APIMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIMetadataFuncCall objects describing the
// invocations of this function.
func (f *APIMetadataFunc) History() []APIMetadataFuncCall {
	f.mutex.Lock()
	history := make([]APIMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIMetadataFuncCall is an object that describes an invocation of method
// Metadata on an instance of MockAPI.
type APIMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][]v1.Metadata
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APIQueryFunc describes the behavior when the Query method of the parent
// MockAPI instance is invoked.
type APIQueryFunc struct {
	defaultHook func(context.Context, string, time.Time) (model.Value, v1.Warnings, error)
	hooks       []func(context.Context, string, time.Time) (model.Value, v1.Warnings, error)
	history     []APIQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) Query(v0 context.Context, v1 string, v2 time.Time) (model.Value, v1.Warnings, error) {
	r0, r1, r2 := m.QueryFunc.nextHook()(v0, v1, v2)
	m.QueryFunc.appendCall(APIQueryFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIQueryFunc) SetDefaultHook(hook func(context.Context, string, time.Time) (model.Value, v1.Warnings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockAPI instance inovkes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *APIQueryFunc) PushHook(hook func(context.Context, string, time.Time) (model.Value, v1.Warnings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIQueryFunc) SetDefaultReturn(r0 model.Value, r1 v1.Warnings, r2 error) {
	f.SetDefaultHook(func(context.Context, string, time.Time) (model.Value, v1.Warnings, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIQueryFunc) PushReturn(r0 model.Value, r1 v1.Warnings, r2 error) {
	f.PushHook(func(context.Context, string, time.Time) (model.Value, v1.Warnings, error) {
		return r0, r1, r2
	})
}

func (f *APIQueryFunc) nextHook() func(context.Context, string, time.Time) (model.Value, v1.Warnings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIQueryFunc) appendCall(r0 APIQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIQueryFuncCall objects describing the
// invocations of this function.
func (f *APIQueryFunc) History() []APIQueryFuncCall {
	f.mutex.Lock()
	history := make([]APIQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIQueryFuncCall is an object that describes an invocation of method
// Query on an instance of MockAPI.
type APIQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 model.Value
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 v1.Warnings
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// APIQueryRangeFunc describes the behavior when the QueryRange method of
// the parent MockAPI instance is invoked.
type APIQueryRangeFunc struct {
	defaultHook func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error)
	hooks       []func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error)
	history     []APIQueryRangeFuncCall
	mutex       sync.Mutex
}

// QueryRange delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAPI) QueryRange(v0 context.Context, v1 string, v2 v1.Range) (model.Value, v1.Warnings, error) {
	r0, r1, r2 := m.QueryRangeFunc.nextHook()(v0, v1, v2)
	m.QueryRangeFunc.appendCall(APIQueryRangeFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the QueryRange method of
// the parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIQueryRangeFunc) SetDefaultHook(hook func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRange method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APIQueryRangeFunc) PushHook(hook func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIQueryRangeFunc) SetDefaultReturn(r0 model.Value, r1 v1.Warnings, r2 error) {
	f.SetDefaultHook(func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIQueryRangeFunc) PushReturn(r0 model.Value, r1 v1.Warnings, r2 error) {
	f.PushHook(func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error) {
		return r0, r1, r2
	})
}

func (f *APIQueryRangeFunc) nextHook() func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIQueryRangeFunc) appendCall(r0 APIQueryRangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIQueryRangeFuncCall objects describing
// the invocations of this function.
func (f *APIQueryRangeFunc) History() []APIQueryRangeFuncCall {
	f.mutex.Lock()
	history := make([]APIQueryRangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIQueryRangeFuncCall is an object that describes an invocation of method
// QueryRange on an instance of MockAPI.
type APIQueryRangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 v1.Range
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 model.Value
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 v1.Warnings
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIQueryRangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIQueryRangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// APIRulesFunc describes the behavior when the Rules method of the parent
// MockAPI instance is invoked.
type APIRulesFunc struct {
	defaultHook func(context.Context) (v1.RulesResult, error)
	hooks       []func(context.Context) (v1.RulesResult, error)
	history     []APIRulesFuncCall
	mutex       sync.Mutex
}

// Rules delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) Rules(v0 context.Context) (v1.RulesResult, error) {
	r0, r1 := m.RulesFunc.nextHook()(v0)
	m.RulesFunc.appendCall(APIRulesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Rules method of the
// parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIRulesFunc) SetDefaultHook(hook func(context.Context) (v1.RulesResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Rules method of the parent MockAPI instance inovkes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *APIRulesFunc) PushHook(hook func(context.Context) (v1.RulesResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIRulesFunc) SetDefaultReturn(r0 v1.RulesResult, r1 error) {
	f.SetDefaultHook(func(context.Context) (v1.RulesResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIRulesFunc) PushReturn(r0 v1.RulesResult, r1 error) {
	f.PushHook(func(context.Context) (v1.RulesResult, error) {
		return r0, r1
	})
}

func (f *APIRulesFunc) nextHook() func(context.Context) (v1.RulesResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIRulesFunc) appendCall(r0 APIRulesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIRulesFuncCall objects describing the
// invocations of this function.
func (f *APIRulesFunc) History() []APIRulesFuncCall {
	f.mutex.Lock()
	history := make([]APIRulesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIRulesFuncCall is an object that describes an invocation of method
// Rules on an instance of MockAPI.
type APIRulesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.RulesResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIRulesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIRulesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APIRuntimeinfoFunc describes the behavior when the Runtimeinfo method of
// the parent MockAPI instance is invoked.
type APIRuntimeinfoFunc struct {
	defaultHook func(context.Context) (v1.RuntimeinfoResult, error)
	hooks       []func(context.Context) (v1.RuntimeinfoResult, error)
	history     []APIRuntimeinfoFuncCall
	mutex       sync.Mutex
}

// Runtimeinfo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAPI) Runtimeinfo(v0 context.Context) (v1.RuntimeinfoResult, error) {
	r0, r1 := m.RuntimeinfoFunc.nextHook()(v0)
	m.RuntimeinfoFunc.appendCall(APIRuntimeinfoFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Runtimeinfo method
// of the parent MockAPI instance is invoked and the hook queue is empty.
func (f *APIRuntimeinfoFunc) SetDefaultHook(hook func(context.Context) (v1.RuntimeinfoResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Runtimeinfo method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APIRuntimeinfoFunc) PushHook(hook func(context.Context) (v1.RuntimeinfoResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APIRuntimeinfoFunc) SetDefaultReturn(r0 v1.RuntimeinfoResult, r1 error) {
	f.SetDefaultHook(func(context.Context) (v1.RuntimeinfoResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APIRuntimeinfoFunc) PushReturn(r0 v1.RuntimeinfoResult, r1 error) {
	f.PushHook(func(context.Context) (v1.RuntimeinfoResult, error) {
		return r0, r1
	})
}

func (f *APIRuntimeinfoFunc) nextHook() func(context.Context) (v1.RuntimeinfoResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APIRuntimeinfoFunc) appendCall(r0 APIRuntimeinfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APIRuntimeinfoFuncCall objects describing
// the invocations of this function.
func (f *APIRuntimeinfoFunc) History() []APIRuntimeinfoFuncCall {
	f.mutex.Lock()
	history := make([]APIRuntimeinfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APIRuntimeinfoFuncCall is an object that describes an invocation of
// method Runtimeinfo on an instance of MockAPI.
type APIRuntimeinfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.RuntimeinfoResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APIRuntimeinfoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APIRuntimeinfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APISeriesFunc describes the behavior when the Series method of the parent
// MockAPI instance is invoked.
type APISeriesFunc struct {
	defaultHook func(context.Context, []string, time.Time, time.Time) ([]model.LabelSet, v1.Warnings, error)
	hooks       []func(context.Context, []string, time.Time, time.Time) ([]model.LabelSet, v1.Warnings, error)
	history     []APISeriesFuncCall
	mutex       sync.Mutex
}

// Series delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) Series(v0 context.Context, v1 []string, v2 time.Time, v3 time.Time) ([]model.LabelSet, v1.Warnings, error) {
	r0, r1, r2 := m.SeriesFunc.nextHook()(v0, v1, v2, v3)
	m.SeriesFunc.appendCall(APISeriesFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Series method of the
// parent MockAPI instance is invoked and the hook queue is empty.
func (f *APISeriesFunc) SetDefaultHook(hook func(context.Context, []string, time.Time, time.Time) ([]model.LabelSet, v1.Warnings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Series method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APISeriesFunc) PushHook(hook func(context.Context, []string, time.Time, time.Time) ([]model.LabelSet, v1.Warnings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APISeriesFunc) SetDefaultReturn(r0 []model.LabelSet, r1 v1.Warnings, r2 error) {
	f.SetDefaultHook(func(context.Context, []string, time.Time, time.Time) ([]model.LabelSet, v1.Warnings, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APISeriesFunc) PushReturn(r0 []model.LabelSet, r1 v1.Warnings, r2 error) {
	f.PushHook(func(context.Context, []string, time.Time, time.Time) ([]model.LabelSet, v1.Warnings, error) {
		return r0, r1, r2
	})
}

func (f *APISeriesFunc) nextHook() func(context.Context, []string, time.Time, time.Time) ([]model.LabelSet, v1.Warnings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APISeriesFunc) appendCall(r0 APISeriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APISeriesFuncCall objects describing the
// invocations of this function.
func (f *APISeriesFunc) History() []APISeriesFuncCall {
	f.mutex.Lock()
	history := make([]APISeriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APISeriesFuncCall is an object that describes an invocation of method
// Series on an instance of MockAPI.
type APISeriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []model.LabelSet
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 v1.Warnings
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APISeriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APISeriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// APISnapshotFunc describes the behavior when the Snapshot method of the
// parent MockAPI instance is invoked.
type APISnapshotFunc struct {
	defaultHook func(context.Context, bool) (v1.SnapshotResult, error)
	hooks       []func(context.Context, bool) (v1.SnapshotResult, error)
	history     []APISnapshotFuncCall
	mutex       sync.Mutex
}

// Snapshot delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) Snapshot(v0 context.Context, v1 bool) (v1.SnapshotResult, error) {
	r0, r1 := m.SnapshotFunc.nextHook()(v0, v1)
	m.SnapshotFunc.appendCall(APISnapshotFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Snapshot method of
// the parent MockAPI instance is invoked and the hook queue is empty.
func (f *APISnapshotFunc) SetDefaultHook(hook func(context.Context, bool) (v1.SnapshotResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Snapshot method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APISnapshotFunc) PushHook(hook func(context.Context, bool) (v1.SnapshotResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APISnapshotFunc) SetDefaultReturn(r0 v1.SnapshotResult, r1 error) {
	f.SetDefaultHook(func(context.Context, bool) (v1.SnapshotResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APISnapshotFunc) PushReturn(r0 v1.SnapshotResult, r1 error) {
	f.PushHook(func(context.Context, bool) (v1.SnapshotResult, error) {
		return r0, r1
	})
}

func (f *APISnapshotFunc) nextHook() func(context.Context, bool) (v1.SnapshotResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APISnapshotFunc) appendCall(r0 APISnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APISnapshotFuncCall objects describing the
// invocations of this function.
func (f *APISnapshotFunc) History() []APISnapshotFuncCall {
	f.mutex.Lock()
	history := make([]APISnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APISnapshotFuncCall is an object that describes an invocation of method
// Snapshot on an instance of MockAPI.
type APISnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.SnapshotResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APISnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APISnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APITSDBFunc describes the behavior when the TSDB method of the parent
// MockAPI instance is invoked.
type APITSDBFunc struct {
	defaultHook func(context.Context) (v1.TSDBResult, error)
	hooks       []func(context.Context) (v1.TSDBResult, error)
	history     []APITSDBFuncCall
	mutex       sync.Mutex
}

// TSDB delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) TSDB(v0 context.Context) (v1.TSDBResult, error) {
	r0, r1 := m.TSDBFunc.nextHook()(v0)
	m.TSDBFunc.appendCall(APITSDBFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TSDB method of the
// parent MockAPI instance is invoked and the hook queue is empty.
func (f *APITSDBFunc) SetDefaultHook(hook func(context.Context) (v1.TSDBResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TSDB method of the parent MockAPI instance inovkes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *APITSDBFunc) PushHook(hook func(context.Context) (v1.TSDBResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APITSDBFunc) SetDefaultReturn(r0 v1.TSDBResult, r1 error) {
	f.SetDefaultHook(func(context.Context) (v1.TSDBResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APITSDBFunc) PushReturn(r0 v1.TSDBResult, r1 error) {
	f.PushHook(func(context.Context) (v1.TSDBResult, error) {
		return r0, r1
	})
}

func (f *APITSDBFunc) nextHook() func(context.Context) (v1.TSDBResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APITSDBFunc) appendCall(r0 APITSDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APITSDBFuncCall objects describing the
// invocations of this function.
func (f *APITSDBFunc) History() []APITSDBFuncCall {
	f.mutex.Lock()
	history := make([]APITSDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APITSDBFuncCall is an object that describes an invocation of method TSDB
// on an instance of MockAPI.
type APITSDBFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.TSDBResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APITSDBFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APITSDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APITargetsFunc describes the behavior when the Targets method of the
// parent MockAPI instance is invoked.
type APITargetsFunc struct {
	defaultHook func(context.Context) (v1.TargetsResult, error)
	hooks       []func(context.Context) (v1.TargetsResult, error)
	history     []APITargetsFuncCall
	mutex       sync.Mutex
}

// Targets delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAPI) Targets(v0 context.Context) (v1.TargetsResult, error) {
	r0, r1 := m.TargetsFunc.nextHook()(v0)
	m.TargetsFunc.appendCall(APITargetsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Targets method of
// the parent MockAPI instance is invoked and the hook queue is empty.
func (f *APITargetsFunc) SetDefaultHook(hook func(context.Context) (v1.TargetsResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Targets method of the parent MockAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *APITargetsFunc) PushHook(hook func(context.Context) (v1.TargetsResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APITargetsFunc) SetDefaultReturn(r0 v1.TargetsResult, r1 error) {
	f.SetDefaultHook(func(context.Context) (v1.TargetsResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APITargetsFunc) PushReturn(r0 v1.TargetsResult, r1 error) {
	f.PushHook(func(context.Context) (v1.TargetsResult, error) {
		return r0, r1
	})
}

func (f *APITargetsFunc) nextHook() func(context.Context) (v1.TargetsResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APITargetsFunc) appendCall(r0 APITargetsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APITargetsFuncCall objects describing the
// invocations of this function.
func (f *APITargetsFunc) History() []APITargetsFuncCall {
	f.mutex.Lock()
	history := make([]APITargetsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APITargetsFuncCall is an object that describes an invocation of method
// Targets on an instance of MockAPI.
type APITargetsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.TargetsResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APITargetsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APITargetsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// APITargetsMetadataFunc describes the behavior when the TargetsMetadata
// method of the parent MockAPI instance is invoked.
type APITargetsMetadataFunc struct {
	defaultHook func(context.Context, string, string, string) ([]v1.MetricMetadata, error)
	hooks       []func(context.Context, string, string, string) ([]v1.MetricMetadata, error)
	history     []APITargetsMetadataFuncCall
	mutex       sync.Mutex
}

// TargetsMetadata delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAPI) TargetsMetadata(v0 context.Context, v1 string, v2 string, v3 string) ([]v1.MetricMetadata, error) {
	r0, r1 := m.TargetsMetadataFunc.nextHook()(v0, v1, v2, v3)
	m.TargetsMetadataFunc.appendCall(APITargetsMetadataFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TargetsMetadata
// method of the parent MockAPI instance is invoked and the hook queue is
// empty.
func (f *APITargetsMetadataFunc) SetDefaultHook(hook func(context.Context, string, string, string) ([]v1.MetricMetadata, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TargetsMetadata method of the parent MockAPI instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *APITargetsMetadataFunc) PushHook(hook func(context.Context, string, string, string) ([]v1.MetricMetadata, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *APITargetsMetadataFunc) SetDefaultReturn(r0 []v1.MetricMetadata, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string, string) ([]v1.MetricMetadata, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *APITargetsMetadataFunc) PushReturn(r0 []v1.MetricMetadata, r1 error) {
	f.PushHook(func(context.Context, string, string, string) ([]v1.MetricMetadata, error) {
		return r0, r1
	})
}

func (f *APITargetsMetadataFunc) nextHook() func(context.Context, string, string, string) ([]v1.MetricMetadata, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *APITargetsMetadataFunc) appendCall(r0 APITargetsMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of APITargetsMetadataFuncCall objects
// describing the invocations of this function.
func (f *APITargetsMetadataFunc) History() []APITargetsMetadataFuncCall {
	f.mutex.Lock()
	history := make([]APITargetsMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// APITargetsMetadataFuncCall is an object that describes an invocation of
// method TargetsMetadata on an instance of MockAPI.
type APITargetsMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []v1.MetricMetadata
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c APITargetsMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c APITargetsMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
