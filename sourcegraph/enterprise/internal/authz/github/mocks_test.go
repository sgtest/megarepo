// Code generated by go-mockgen 1.3.3; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package github

import (
	"context"
	"sync"

	github "github.com/sourcegraph/sourcegraph/internal/extsvc/github"
)

// MockClient is a mock implementation of the client interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/authz/github) used
// for unit testing.
type MockClient struct {
	// GetAuthenticatedOAuthScopesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetAuthenticatedOAuthScopes.
	GetAuthenticatedOAuthScopesFunc *ClientGetAuthenticatedOAuthScopesFunc
	// GetAuthenticatedUserOrgsDetailsAndMembershipFunc is an instance of a
	// mock function object controlling the behavior of the method
	// GetAuthenticatedUserOrgsDetailsAndMembership.
	GetAuthenticatedUserOrgsDetailsAndMembershipFunc *ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc
	// GetAuthenticatedUserTeamsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetAuthenticatedUserTeams.
	GetAuthenticatedUserTeamsFunc *ClientGetAuthenticatedUserTeamsFunc
	// GetOrganizationFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrganization.
	GetOrganizationFunc *ClientGetOrganizationFunc
	// GetRepositoryFunc is an instance of a mock function object
	// controlling the behavior of the method GetRepository.
	GetRepositoryFunc *ClientGetRepositoryFunc
	// ListAffiliatedRepositoriesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListAffiliatedRepositories.
	ListAffiliatedRepositoriesFunc *ClientListAffiliatedRepositoriesFunc
	// ListOrgRepositoriesFunc is an instance of a mock function object
	// controlling the behavior of the method ListOrgRepositories.
	ListOrgRepositoriesFunc *ClientListOrgRepositoriesFunc
	// ListOrganizationMembersFunc is an instance of a mock function object
	// controlling the behavior of the method ListOrganizationMembers.
	ListOrganizationMembersFunc *ClientListOrganizationMembersFunc
	// ListRepositoryCollaboratorsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListRepositoryCollaborators.
	ListRepositoryCollaboratorsFunc *ClientListRepositoryCollaboratorsFunc
	// ListRepositoryTeamsFunc is an instance of a mock function object
	// controlling the behavior of the method ListRepositoryTeams.
	ListRepositoryTeamsFunc *ClientListRepositoryTeamsFunc
	// ListTeamMembersFunc is an instance of a mock function object
	// controlling the behavior of the method ListTeamMembers.
	ListTeamMembersFunc *ClientListTeamMembersFunc
	// ListTeamRepositoriesFunc is an instance of a mock function object
	// controlling the behavior of the method ListTeamRepositories.
	ListTeamRepositoriesFunc *ClientListTeamRepositoriesFunc
	// WithTokenFunc is an instance of a mock function object controlling
	// the behavior of the method WithToken.
	WithTokenFunc *ClientWithTokenFunc
}

// NewMockClient creates a new mock of the client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		GetAuthenticatedOAuthScopesFunc: &ClientGetAuthenticatedOAuthScopesFunc{
			defaultHook: func(context.Context) (r0 []string, r1 error) {
				return
			},
		},
		GetAuthenticatedUserOrgsDetailsAndMembershipFunc: &ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc{
			defaultHook: func(context.Context, int) (r0 []github.OrgDetailsAndMembership, r1 bool, r2 int, r3 error) {
				return
			},
		},
		GetAuthenticatedUserTeamsFunc: &ClientGetAuthenticatedUserTeamsFunc{
			defaultHook: func(context.Context, int) (r0 []*github.Team, r1 bool, r2 int, r3 error) {
				return
			},
		},
		GetOrganizationFunc: &ClientGetOrganizationFunc{
			defaultHook: func(context.Context, string) (r0 *github.OrgDetails, r1 error) {
				return
			},
		},
		GetRepositoryFunc: &ClientGetRepositoryFunc{
			defaultHook: func(context.Context, string, string) (r0 *github.Repository, r1 error) {
				return
			},
		},
		ListAffiliatedRepositoriesFunc: &ClientListAffiliatedRepositoriesFunc{
			defaultHook: func(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) (r0 []*github.Repository, r1 bool, r2 int, r3 error) {
				return
			},
		},
		ListOrgRepositoriesFunc: &ClientListOrgRepositoriesFunc{
			defaultHook: func(context.Context, string, int, string) (r0 []*github.Repository, r1 bool, r2 int, r3 error) {
				return
			},
		},
		ListOrganizationMembersFunc: &ClientListOrganizationMembersFunc{
			defaultHook: func(context.Context, string, int, bool) (r0 []*github.Collaborator, r1 bool, r2 error) {
				return
			},
		},
		ListRepositoryCollaboratorsFunc: &ClientListRepositoryCollaboratorsFunc{
			defaultHook: func(context.Context, string, string, int, github.CollaboratorAffiliation) (r0 []*github.Collaborator, r1 bool, r2 error) {
				return
			},
		},
		ListRepositoryTeamsFunc: &ClientListRepositoryTeamsFunc{
			defaultHook: func(context.Context, string, string, int) (r0 []*github.Team, r1 bool, r2 error) {
				return
			},
		},
		ListTeamMembersFunc: &ClientListTeamMembersFunc{
			defaultHook: func(context.Context, string, string, int) (r0 []*github.Collaborator, r1 bool, r2 error) {
				return
			},
		},
		ListTeamRepositoriesFunc: &ClientListTeamRepositoriesFunc{
			defaultHook: func(context.Context, string, string, int) (r0 []*github.Repository, r1 bool, r2 int, r3 error) {
				return
			},
		},
		WithTokenFunc: &ClientWithTokenFunc{
			defaultHook: func(string) (r0 client) {
				return
			},
		},
	}
}

// NewStrictMockClient creates a new mock of the client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockClient() *MockClient {
	return &MockClient{
		GetAuthenticatedOAuthScopesFunc: &ClientGetAuthenticatedOAuthScopesFunc{
			defaultHook: func(context.Context) ([]string, error) {
				panic("unexpected invocation of MockClient.GetAuthenticatedOAuthScopes")
			},
		},
		GetAuthenticatedUserOrgsDetailsAndMembershipFunc: &ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc{
			defaultHook: func(context.Context, int) ([]github.OrgDetailsAndMembership, bool, int, error) {
				panic("unexpected invocation of MockClient.GetAuthenticatedUserOrgsDetailsAndMembership")
			},
		},
		GetAuthenticatedUserTeamsFunc: &ClientGetAuthenticatedUserTeamsFunc{
			defaultHook: func(context.Context, int) ([]*github.Team, bool, int, error) {
				panic("unexpected invocation of MockClient.GetAuthenticatedUserTeams")
			},
		},
		GetOrganizationFunc: &ClientGetOrganizationFunc{
			defaultHook: func(context.Context, string) (*github.OrgDetails, error) {
				panic("unexpected invocation of MockClient.GetOrganization")
			},
		},
		GetRepositoryFunc: &ClientGetRepositoryFunc{
			defaultHook: func(context.Context, string, string) (*github.Repository, error) {
				panic("unexpected invocation of MockClient.GetRepository")
			},
		},
		ListAffiliatedRepositoriesFunc: &ClientListAffiliatedRepositoriesFunc{
			defaultHook: func(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error) {
				panic("unexpected invocation of MockClient.ListAffiliatedRepositories")
			},
		},
		ListOrgRepositoriesFunc: &ClientListOrgRepositoriesFunc{
			defaultHook: func(context.Context, string, int, string) ([]*github.Repository, bool, int, error) {
				panic("unexpected invocation of MockClient.ListOrgRepositories")
			},
		},
		ListOrganizationMembersFunc: &ClientListOrganizationMembersFunc{
			defaultHook: func(context.Context, string, int, bool) ([]*github.Collaborator, bool, error) {
				panic("unexpected invocation of MockClient.ListOrganizationMembers")
			},
		},
		ListRepositoryCollaboratorsFunc: &ClientListRepositoryCollaboratorsFunc{
			defaultHook: func(context.Context, string, string, int, github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error) {
				panic("unexpected invocation of MockClient.ListRepositoryCollaborators")
			},
		},
		ListRepositoryTeamsFunc: &ClientListRepositoryTeamsFunc{
			defaultHook: func(context.Context, string, string, int) ([]*github.Team, bool, error) {
				panic("unexpected invocation of MockClient.ListRepositoryTeams")
			},
		},
		ListTeamMembersFunc: &ClientListTeamMembersFunc{
			defaultHook: func(context.Context, string, string, int) ([]*github.Collaborator, bool, error) {
				panic("unexpected invocation of MockClient.ListTeamMembers")
			},
		},
		ListTeamRepositoriesFunc: &ClientListTeamRepositoriesFunc{
			defaultHook: func(context.Context, string, string, int) ([]*github.Repository, bool, int, error) {
				panic("unexpected invocation of MockClient.ListTeamRepositories")
			},
		},
		WithTokenFunc: &ClientWithTokenFunc{
			defaultHook: func(string) client {
				panic("unexpected invocation of MockClient.WithToken")
			},
		},
	}
}

// surrogateMockClient is a copy of the client interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/authz/github). It
// is redefined here as it is unexported in the source package.
type surrogateMockClient interface {
	GetAuthenticatedOAuthScopes(context.Context) ([]string, error)
	GetAuthenticatedUserOrgsDetailsAndMembership(context.Context, int) ([]github.OrgDetailsAndMembership, bool, int, error)
	GetAuthenticatedUserTeams(context.Context, int) ([]*github.Team, bool, int, error)
	GetOrganization(context.Context, string) (*github.OrgDetails, error)
	GetRepository(context.Context, string, string) (*github.Repository, error)
	ListAffiliatedRepositories(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error)
	ListOrgRepositories(context.Context, string, int, string) ([]*github.Repository, bool, int, error)
	ListOrganizationMembers(context.Context, string, int, bool) ([]*github.Collaborator, bool, error)
	ListRepositoryCollaborators(context.Context, string, string, int, github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error)
	ListRepositoryTeams(context.Context, string, string, int) ([]*github.Team, bool, error)
	ListTeamMembers(context.Context, string, string, int) ([]*github.Collaborator, bool, error)
	ListTeamRepositories(context.Context, string, string, int) ([]*github.Repository, bool, int, error)
	WithToken(string) client
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i surrogateMockClient) *MockClient {
	return &MockClient{
		GetAuthenticatedOAuthScopesFunc: &ClientGetAuthenticatedOAuthScopesFunc{
			defaultHook: i.GetAuthenticatedOAuthScopes,
		},
		GetAuthenticatedUserOrgsDetailsAndMembershipFunc: &ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc{
			defaultHook: i.GetAuthenticatedUserOrgsDetailsAndMembership,
		},
		GetAuthenticatedUserTeamsFunc: &ClientGetAuthenticatedUserTeamsFunc{
			defaultHook: i.GetAuthenticatedUserTeams,
		},
		GetOrganizationFunc: &ClientGetOrganizationFunc{
			defaultHook: i.GetOrganization,
		},
		GetRepositoryFunc: &ClientGetRepositoryFunc{
			defaultHook: i.GetRepository,
		},
		ListAffiliatedRepositoriesFunc: &ClientListAffiliatedRepositoriesFunc{
			defaultHook: i.ListAffiliatedRepositories,
		},
		ListOrgRepositoriesFunc: &ClientListOrgRepositoriesFunc{
			defaultHook: i.ListOrgRepositories,
		},
		ListOrganizationMembersFunc: &ClientListOrganizationMembersFunc{
			defaultHook: i.ListOrganizationMembers,
		},
		ListRepositoryCollaboratorsFunc: &ClientListRepositoryCollaboratorsFunc{
			defaultHook: i.ListRepositoryCollaborators,
		},
		ListRepositoryTeamsFunc: &ClientListRepositoryTeamsFunc{
			defaultHook: i.ListRepositoryTeams,
		},
		ListTeamMembersFunc: &ClientListTeamMembersFunc{
			defaultHook: i.ListTeamMembers,
		},
		ListTeamRepositoriesFunc: &ClientListTeamRepositoriesFunc{
			defaultHook: i.ListTeamRepositories,
		},
		WithTokenFunc: &ClientWithTokenFunc{
			defaultHook: i.WithToken,
		},
	}
}

// ClientGetAuthenticatedOAuthScopesFunc describes the behavior when the
// GetAuthenticatedOAuthScopes method of the parent MockClient instance is
// invoked.
type ClientGetAuthenticatedOAuthScopesFunc struct {
	defaultHook func(context.Context) ([]string, error)
	hooks       []func(context.Context) ([]string, error)
	history     []ClientGetAuthenticatedOAuthScopesFuncCall
	mutex       sync.Mutex
}

// GetAuthenticatedOAuthScopes delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockClient) GetAuthenticatedOAuthScopes(v0 context.Context) ([]string, error) {
	r0, r1 := m.GetAuthenticatedOAuthScopesFunc.nextHook()(v0)
	m.GetAuthenticatedOAuthScopesFunc.appendCall(ClientGetAuthenticatedOAuthScopesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAuthenticatedOAuthScopes method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientGetAuthenticatedOAuthScopesFunc) SetDefaultHook(hook func(context.Context) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuthenticatedOAuthScopes method of the parent MockClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ClientGetAuthenticatedOAuthScopesFunc) PushHook(hook func(context.Context) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetAuthenticatedOAuthScopesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetAuthenticatedOAuthScopesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

func (f *ClientGetAuthenticatedOAuthScopesFunc) nextHook() func(context.Context) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetAuthenticatedOAuthScopesFunc) appendCall(r0 ClientGetAuthenticatedOAuthScopesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetAuthenticatedOAuthScopesFuncCall
// objects describing the invocations of this function.
func (f *ClientGetAuthenticatedOAuthScopesFunc) History() []ClientGetAuthenticatedOAuthScopesFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetAuthenticatedOAuthScopesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetAuthenticatedOAuthScopesFuncCall is an object that describes an
// invocation of method GetAuthenticatedOAuthScopes on an instance of
// MockClient.
type ClientGetAuthenticatedOAuthScopesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetAuthenticatedOAuthScopesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetAuthenticatedOAuthScopesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc describes the
// behavior when the GetAuthenticatedUserOrgsDetailsAndMembership method of
// the parent MockClient instance is invoked.
type ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc struct {
	defaultHook func(context.Context, int) ([]github.OrgDetailsAndMembership, bool, int, error)
	hooks       []func(context.Context, int) ([]github.OrgDetailsAndMembership, bool, int, error)
	history     []ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall
	mutex       sync.Mutex
}

// GetAuthenticatedUserOrgsDetailsAndMembership delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockClient) GetAuthenticatedUserOrgsDetailsAndMembership(v0 context.Context, v1 int) ([]github.OrgDetailsAndMembership, bool, int, error) {
	r0, r1, r2, r3 := m.GetAuthenticatedUserOrgsDetailsAndMembershipFunc.nextHook()(v0, v1)
	m.GetAuthenticatedUserOrgsDetailsAndMembershipFunc.appendCall(ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall{v0, v1, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// GetAuthenticatedUserOrgsDetailsAndMembership method of the parent
// MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc) SetDefaultHook(hook func(context.Context, int) ([]github.OrgDetailsAndMembership, bool, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuthenticatedUserOrgsDetailsAndMembership method of the parent
// MockClient instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc) PushHook(hook func(context.Context, int) ([]github.OrgDetailsAndMembership, bool, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc) SetDefaultReturn(r0 []github.OrgDetailsAndMembership, r1 bool, r2 int, r3 error) {
	f.SetDefaultHook(func(context.Context, int) ([]github.OrgDetailsAndMembership, bool, int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc) PushReturn(r0 []github.OrgDetailsAndMembership, r1 bool, r2 int, r3 error) {
	f.PushHook(func(context.Context, int) ([]github.OrgDetailsAndMembership, bool, int, error) {
		return r0, r1, r2, r3
	})
}

func (f *ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc) nextHook() func(context.Context, int) ([]github.OrgDetailsAndMembership, bool, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc) appendCall(r0 ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall objects
// describing the invocations of this function.
func (f *ClientGetAuthenticatedUserOrgsDetailsAndMembershipFunc) History() []ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall is an object
// that describes an invocation of method
// GetAuthenticatedUserOrgsDetailsAndMembership on an instance of
// MockClient.
type ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []github.OrgDetailsAndMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetAuthenticatedUserOrgsDetailsAndMembershipFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// ClientGetAuthenticatedUserTeamsFunc describes the behavior when the
// GetAuthenticatedUserTeams method of the parent MockClient instance is
// invoked.
type ClientGetAuthenticatedUserTeamsFunc struct {
	defaultHook func(context.Context, int) ([]*github.Team, bool, int, error)
	hooks       []func(context.Context, int) ([]*github.Team, bool, int, error)
	history     []ClientGetAuthenticatedUserTeamsFuncCall
	mutex       sync.Mutex
}

// GetAuthenticatedUserTeams delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockClient) GetAuthenticatedUserTeams(v0 context.Context, v1 int) ([]*github.Team, bool, int, error) {
	r0, r1, r2, r3 := m.GetAuthenticatedUserTeamsFunc.nextHook()(v0, v1)
	m.GetAuthenticatedUserTeamsFunc.appendCall(ClientGetAuthenticatedUserTeamsFuncCall{v0, v1, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// GetAuthenticatedUserTeams method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientGetAuthenticatedUserTeamsFunc) SetDefaultHook(hook func(context.Context, int) ([]*github.Team, bool, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuthenticatedUserTeams method of the parent MockClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ClientGetAuthenticatedUserTeamsFunc) PushHook(hook func(context.Context, int) ([]*github.Team, bool, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetAuthenticatedUserTeamsFunc) SetDefaultReturn(r0 []*github.Team, r1 bool, r2 int, r3 error) {
	f.SetDefaultHook(func(context.Context, int) ([]*github.Team, bool, int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetAuthenticatedUserTeamsFunc) PushReturn(r0 []*github.Team, r1 bool, r2 int, r3 error) {
	f.PushHook(func(context.Context, int) ([]*github.Team, bool, int, error) {
		return r0, r1, r2, r3
	})
}

func (f *ClientGetAuthenticatedUserTeamsFunc) nextHook() func(context.Context, int) ([]*github.Team, bool, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetAuthenticatedUserTeamsFunc) appendCall(r0 ClientGetAuthenticatedUserTeamsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetAuthenticatedUserTeamsFuncCall
// objects describing the invocations of this function.
func (f *ClientGetAuthenticatedUserTeamsFunc) History() []ClientGetAuthenticatedUserTeamsFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetAuthenticatedUserTeamsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetAuthenticatedUserTeamsFuncCall is an object that describes an
// invocation of method GetAuthenticatedUserTeams on an instance of
// MockClient.
type ClientGetAuthenticatedUserTeamsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*github.Team
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetAuthenticatedUserTeamsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetAuthenticatedUserTeamsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// ClientGetOrganizationFunc describes the behavior when the GetOrganization
// method of the parent MockClient instance is invoked.
type ClientGetOrganizationFunc struct {
	defaultHook func(context.Context, string) (*github.OrgDetails, error)
	hooks       []func(context.Context, string) (*github.OrgDetails, error)
	history     []ClientGetOrganizationFuncCall
	mutex       sync.Mutex
}

// GetOrganization delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetOrganization(v0 context.Context, v1 string) (*github.OrgDetails, error) {
	r0, r1 := m.GetOrganizationFunc.nextHook()(v0, v1)
	m.GetOrganizationFunc.appendCall(ClientGetOrganizationFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOrganization
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetOrganizationFunc) SetDefaultHook(hook func(context.Context, string) (*github.OrgDetails, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrganization method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetOrganizationFunc) PushHook(hook func(context.Context, string) (*github.OrgDetails, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetOrganizationFunc) SetDefaultReturn(r0 *github.OrgDetails, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*github.OrgDetails, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetOrganizationFunc) PushReturn(r0 *github.OrgDetails, r1 error) {
	f.PushHook(func(context.Context, string) (*github.OrgDetails, error) {
		return r0, r1
	})
}

func (f *ClientGetOrganizationFunc) nextHook() func(context.Context, string) (*github.OrgDetails, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetOrganizationFunc) appendCall(r0 ClientGetOrganizationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetOrganizationFuncCall objects
// describing the invocations of this function.
func (f *ClientGetOrganizationFunc) History() []ClientGetOrganizationFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetOrganizationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetOrganizationFuncCall is an object that describes an invocation
// of method GetOrganization on an instance of MockClient.
type ClientGetOrganizationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *github.OrgDetails
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetOrganizationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetOrganizationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetRepositoryFunc describes the behavior when the GetRepository
// method of the parent MockClient instance is invoked.
type ClientGetRepositoryFunc struct {
	defaultHook func(context.Context, string, string) (*github.Repository, error)
	hooks       []func(context.Context, string, string) (*github.Repository, error)
	history     []ClientGetRepositoryFuncCall
	mutex       sync.Mutex
}

// GetRepository delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) GetRepository(v0 context.Context, v1 string, v2 string) (*github.Repository, error) {
	r0, r1 := m.GetRepositoryFunc.nextHook()(v0, v1, v2)
	m.GetRepositoryFunc.appendCall(ClientGetRepositoryFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRepository method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetRepositoryFunc) SetDefaultHook(hook func(context.Context, string, string) (*github.Repository, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRepository method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetRepositoryFunc) PushHook(hook func(context.Context, string, string) (*github.Repository, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetRepositoryFunc) SetDefaultReturn(r0 *github.Repository, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (*github.Repository, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetRepositoryFunc) PushReturn(r0 *github.Repository, r1 error) {
	f.PushHook(func(context.Context, string, string) (*github.Repository, error) {
		return r0, r1
	})
}

func (f *ClientGetRepositoryFunc) nextHook() func(context.Context, string, string) (*github.Repository, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetRepositoryFunc) appendCall(r0 ClientGetRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetRepositoryFuncCall objects
// describing the invocations of this function.
func (f *ClientGetRepositoryFunc) History() []ClientGetRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetRepositoryFuncCall is an object that describes an invocation of
// method GetRepository on an instance of MockClient.
type ClientGetRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *github.Repository
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientListAffiliatedRepositoriesFunc describes the behavior when the
// ListAffiliatedRepositories method of the parent MockClient instance is
// invoked.
type ClientListAffiliatedRepositoriesFunc struct {
	defaultHook func(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error)
	hooks       []func(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error)
	history     []ClientListAffiliatedRepositoriesFuncCall
	mutex       sync.Mutex
}

// ListAffiliatedRepositories delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockClient) ListAffiliatedRepositories(v0 context.Context, v1 github.Visibility, v2 int, v3 ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error) {
	r0, r1, r2, r3 := m.ListAffiliatedRepositoriesFunc.nextHook()(v0, v1, v2, v3...)
	m.ListAffiliatedRepositoriesFunc.appendCall(ClientListAffiliatedRepositoriesFuncCall{v0, v1, v2, v3, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// ListAffiliatedRepositories method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientListAffiliatedRepositoriesFunc) SetDefaultHook(hook func(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAffiliatedRepositories method of the parent MockClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ClientListAffiliatedRepositoriesFunc) PushHook(hook func(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListAffiliatedRepositoriesFunc) SetDefaultReturn(r0 []*github.Repository, r1 bool, r2 int, r3 error) {
	f.SetDefaultHook(func(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListAffiliatedRepositoriesFunc) PushReturn(r0 []*github.Repository, r1 bool, r2 int, r3 error) {
	f.PushHook(func(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error) {
		return r0, r1, r2, r3
	})
}

func (f *ClientListAffiliatedRepositoriesFunc) nextHook() func(context.Context, github.Visibility, int, ...github.RepositoryAffiliation) ([]*github.Repository, bool, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListAffiliatedRepositoriesFunc) appendCall(r0 ClientListAffiliatedRepositoriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListAffiliatedRepositoriesFuncCall
// objects describing the invocations of this function.
func (f *ClientListAffiliatedRepositoriesFunc) History() []ClientListAffiliatedRepositoriesFuncCall {
	f.mutex.Lock()
	history := make([]ClientListAffiliatedRepositoriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListAffiliatedRepositoriesFuncCall is an object that describes an
// invocation of method ListAffiliatedRepositories on an instance of
// MockClient.
type ClientListAffiliatedRepositoriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 github.Visibility
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg3 []github.RepositoryAffiliation
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*github.Repository
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientListAffiliatedRepositoriesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg3 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1, c.Arg2}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListAffiliatedRepositoriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// ClientListOrgRepositoriesFunc describes the behavior when the
// ListOrgRepositories method of the parent MockClient instance is invoked.
type ClientListOrgRepositoriesFunc struct {
	defaultHook func(context.Context, string, int, string) ([]*github.Repository, bool, int, error)
	hooks       []func(context.Context, string, int, string) ([]*github.Repository, bool, int, error)
	history     []ClientListOrgRepositoriesFuncCall
	mutex       sync.Mutex
}

// ListOrgRepositories delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ListOrgRepositories(v0 context.Context, v1 string, v2 int, v3 string) ([]*github.Repository, bool, int, error) {
	r0, r1, r2, r3 := m.ListOrgRepositoriesFunc.nextHook()(v0, v1, v2, v3)
	m.ListOrgRepositoriesFunc.appendCall(ClientListOrgRepositoriesFuncCall{v0, v1, v2, v3, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the ListOrgRepositories
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientListOrgRepositoriesFunc) SetDefaultHook(hook func(context.Context, string, int, string) ([]*github.Repository, bool, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListOrgRepositories method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientListOrgRepositoriesFunc) PushHook(hook func(context.Context, string, int, string) ([]*github.Repository, bool, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListOrgRepositoriesFunc) SetDefaultReturn(r0 []*github.Repository, r1 bool, r2 int, r3 error) {
	f.SetDefaultHook(func(context.Context, string, int, string) ([]*github.Repository, bool, int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListOrgRepositoriesFunc) PushReturn(r0 []*github.Repository, r1 bool, r2 int, r3 error) {
	f.PushHook(func(context.Context, string, int, string) ([]*github.Repository, bool, int, error) {
		return r0, r1, r2, r3
	})
}

func (f *ClientListOrgRepositoriesFunc) nextHook() func(context.Context, string, int, string) ([]*github.Repository, bool, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListOrgRepositoriesFunc) appendCall(r0 ClientListOrgRepositoriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListOrgRepositoriesFuncCall objects
// describing the invocations of this function.
func (f *ClientListOrgRepositoriesFunc) History() []ClientListOrgRepositoriesFuncCall {
	f.mutex.Lock()
	history := make([]ClientListOrgRepositoriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListOrgRepositoriesFuncCall is an object that describes an
// invocation of method ListOrgRepositories on an instance of MockClient.
type ClientListOrgRepositoriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*github.Repository
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListOrgRepositoriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListOrgRepositoriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// ClientListOrganizationMembersFunc describes the behavior when the
// ListOrganizationMembers method of the parent MockClient instance is
// invoked.
type ClientListOrganizationMembersFunc struct {
	defaultHook func(context.Context, string, int, bool) ([]*github.Collaborator, bool, error)
	hooks       []func(context.Context, string, int, bool) ([]*github.Collaborator, bool, error)
	history     []ClientListOrganizationMembersFuncCall
	mutex       sync.Mutex
}

// ListOrganizationMembers delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) ListOrganizationMembers(v0 context.Context, v1 string, v2 int, v3 bool) ([]*github.Collaborator, bool, error) {
	r0, r1, r2 := m.ListOrganizationMembersFunc.nextHook()(v0, v1, v2, v3)
	m.ListOrganizationMembersFunc.appendCall(ClientListOrganizationMembersFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// ListOrganizationMembers method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientListOrganizationMembersFunc) SetDefaultHook(hook func(context.Context, string, int, bool) ([]*github.Collaborator, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListOrganizationMembers method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientListOrganizationMembersFunc) PushHook(hook func(context.Context, string, int, bool) ([]*github.Collaborator, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListOrganizationMembersFunc) SetDefaultReturn(r0 []*github.Collaborator, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, int, bool) ([]*github.Collaborator, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListOrganizationMembersFunc) PushReturn(r0 []*github.Collaborator, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, int, bool) ([]*github.Collaborator, bool, error) {
		return r0, r1, r2
	})
}

func (f *ClientListOrganizationMembersFunc) nextHook() func(context.Context, string, int, bool) ([]*github.Collaborator, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListOrganizationMembersFunc) appendCall(r0 ClientListOrganizationMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListOrganizationMembersFuncCall
// objects describing the invocations of this function.
func (f *ClientListOrganizationMembersFunc) History() []ClientListOrganizationMembersFuncCall {
	f.mutex.Lock()
	history := make([]ClientListOrganizationMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListOrganizationMembersFuncCall is an object that describes an
// invocation of method ListOrganizationMembers on an instance of
// MockClient.
type ClientListOrganizationMembersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*github.Collaborator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListOrganizationMembersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListOrganizationMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientListRepositoryCollaboratorsFunc describes the behavior when the
// ListRepositoryCollaborators method of the parent MockClient instance is
// invoked.
type ClientListRepositoryCollaboratorsFunc struct {
	defaultHook func(context.Context, string, string, int, github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error)
	hooks       []func(context.Context, string, string, int, github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error)
	history     []ClientListRepositoryCollaboratorsFuncCall
	mutex       sync.Mutex
}

// ListRepositoryCollaborators delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockClient) ListRepositoryCollaborators(v0 context.Context, v1 string, v2 string, v3 int, v4 github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error) {
	r0, r1, r2 := m.ListRepositoryCollaboratorsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ListRepositoryCollaboratorsFunc.appendCall(ClientListRepositoryCollaboratorsFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// ListRepositoryCollaborators method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientListRepositoryCollaboratorsFunc) SetDefaultHook(hook func(context.Context, string, string, int, github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRepositoryCollaborators method of the parent MockClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ClientListRepositoryCollaboratorsFunc) PushHook(hook func(context.Context, string, string, int, github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListRepositoryCollaboratorsFunc) SetDefaultReturn(r0 []*github.Collaborator, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, int, github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListRepositoryCollaboratorsFunc) PushReturn(r0 []*github.Collaborator, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, string, int, github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error) {
		return r0, r1, r2
	})
}

func (f *ClientListRepositoryCollaboratorsFunc) nextHook() func(context.Context, string, string, int, github.CollaboratorAffiliation) ([]*github.Collaborator, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListRepositoryCollaboratorsFunc) appendCall(r0 ClientListRepositoryCollaboratorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListRepositoryCollaboratorsFuncCall
// objects describing the invocations of this function.
func (f *ClientListRepositoryCollaboratorsFunc) History() []ClientListRepositoryCollaboratorsFuncCall {
	f.mutex.Lock()
	history := make([]ClientListRepositoryCollaboratorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListRepositoryCollaboratorsFuncCall is an object that describes an
// invocation of method ListRepositoryCollaborators on an instance of
// MockClient.
type ClientListRepositoryCollaboratorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 github.CollaboratorAffiliation
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*github.Collaborator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListRepositoryCollaboratorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListRepositoryCollaboratorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientListRepositoryTeamsFunc describes the behavior when the
// ListRepositoryTeams method of the parent MockClient instance is invoked.
type ClientListRepositoryTeamsFunc struct {
	defaultHook func(context.Context, string, string, int) ([]*github.Team, bool, error)
	hooks       []func(context.Context, string, string, int) ([]*github.Team, bool, error)
	history     []ClientListRepositoryTeamsFuncCall
	mutex       sync.Mutex
}

// ListRepositoryTeams delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ListRepositoryTeams(v0 context.Context, v1 string, v2 string, v3 int) ([]*github.Team, bool, error) {
	r0, r1, r2 := m.ListRepositoryTeamsFunc.nextHook()(v0, v1, v2, v3)
	m.ListRepositoryTeamsFunc.appendCall(ClientListRepositoryTeamsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ListRepositoryTeams
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientListRepositoryTeamsFunc) SetDefaultHook(hook func(context.Context, string, string, int) ([]*github.Team, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRepositoryTeams method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientListRepositoryTeamsFunc) PushHook(hook func(context.Context, string, string, int) ([]*github.Team, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListRepositoryTeamsFunc) SetDefaultReturn(r0 []*github.Team, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, int) ([]*github.Team, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListRepositoryTeamsFunc) PushReturn(r0 []*github.Team, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, string, int) ([]*github.Team, bool, error) {
		return r0, r1, r2
	})
}

func (f *ClientListRepositoryTeamsFunc) nextHook() func(context.Context, string, string, int) ([]*github.Team, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListRepositoryTeamsFunc) appendCall(r0 ClientListRepositoryTeamsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListRepositoryTeamsFuncCall objects
// describing the invocations of this function.
func (f *ClientListRepositoryTeamsFunc) History() []ClientListRepositoryTeamsFuncCall {
	f.mutex.Lock()
	history := make([]ClientListRepositoryTeamsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListRepositoryTeamsFuncCall is an object that describes an
// invocation of method ListRepositoryTeams on an instance of MockClient.
type ClientListRepositoryTeamsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*github.Team
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListRepositoryTeamsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListRepositoryTeamsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientListTeamMembersFunc describes the behavior when the ListTeamMembers
// method of the parent MockClient instance is invoked.
type ClientListTeamMembersFunc struct {
	defaultHook func(context.Context, string, string, int) ([]*github.Collaborator, bool, error)
	hooks       []func(context.Context, string, string, int) ([]*github.Collaborator, bool, error)
	history     []ClientListTeamMembersFuncCall
	mutex       sync.Mutex
}

// ListTeamMembers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ListTeamMembers(v0 context.Context, v1 string, v2 string, v3 int) ([]*github.Collaborator, bool, error) {
	r0, r1, r2 := m.ListTeamMembersFunc.nextHook()(v0, v1, v2, v3)
	m.ListTeamMembersFunc.appendCall(ClientListTeamMembersFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ListTeamMembers
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientListTeamMembersFunc) SetDefaultHook(hook func(context.Context, string, string, int) ([]*github.Collaborator, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListTeamMembers method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientListTeamMembersFunc) PushHook(hook func(context.Context, string, string, int) ([]*github.Collaborator, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListTeamMembersFunc) SetDefaultReturn(r0 []*github.Collaborator, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, int) ([]*github.Collaborator, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListTeamMembersFunc) PushReturn(r0 []*github.Collaborator, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, string, int) ([]*github.Collaborator, bool, error) {
		return r0, r1, r2
	})
}

func (f *ClientListTeamMembersFunc) nextHook() func(context.Context, string, string, int) ([]*github.Collaborator, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListTeamMembersFunc) appendCall(r0 ClientListTeamMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListTeamMembersFuncCall objects
// describing the invocations of this function.
func (f *ClientListTeamMembersFunc) History() []ClientListTeamMembersFuncCall {
	f.mutex.Lock()
	history := make([]ClientListTeamMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListTeamMembersFuncCall is an object that describes an invocation
// of method ListTeamMembers on an instance of MockClient.
type ClientListTeamMembersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*github.Collaborator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListTeamMembersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListTeamMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientListTeamRepositoriesFunc describes the behavior when the
// ListTeamRepositories method of the parent MockClient instance is invoked.
type ClientListTeamRepositoriesFunc struct {
	defaultHook func(context.Context, string, string, int) ([]*github.Repository, bool, int, error)
	hooks       []func(context.Context, string, string, int) ([]*github.Repository, bool, int, error)
	history     []ClientListTeamRepositoriesFuncCall
	mutex       sync.Mutex
}

// ListTeamRepositories delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ListTeamRepositories(v0 context.Context, v1 string, v2 string, v3 int) ([]*github.Repository, bool, int, error) {
	r0, r1, r2, r3 := m.ListTeamRepositoriesFunc.nextHook()(v0, v1, v2, v3)
	m.ListTeamRepositoriesFunc.appendCall(ClientListTeamRepositoriesFuncCall{v0, v1, v2, v3, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the ListTeamRepositories
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientListTeamRepositoriesFunc) SetDefaultHook(hook func(context.Context, string, string, int) ([]*github.Repository, bool, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListTeamRepositories method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientListTeamRepositoriesFunc) PushHook(hook func(context.Context, string, string, int) ([]*github.Repository, bool, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListTeamRepositoriesFunc) SetDefaultReturn(r0 []*github.Repository, r1 bool, r2 int, r3 error) {
	f.SetDefaultHook(func(context.Context, string, string, int) ([]*github.Repository, bool, int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListTeamRepositoriesFunc) PushReturn(r0 []*github.Repository, r1 bool, r2 int, r3 error) {
	f.PushHook(func(context.Context, string, string, int) ([]*github.Repository, bool, int, error) {
		return r0, r1, r2, r3
	})
}

func (f *ClientListTeamRepositoriesFunc) nextHook() func(context.Context, string, string, int) ([]*github.Repository, bool, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListTeamRepositoriesFunc) appendCall(r0 ClientListTeamRepositoriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListTeamRepositoriesFuncCall objects
// describing the invocations of this function.
func (f *ClientListTeamRepositoriesFunc) History() []ClientListTeamRepositoriesFuncCall {
	f.mutex.Lock()
	history := make([]ClientListTeamRepositoriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListTeamRepositoriesFuncCall is an object that describes an
// invocation of method ListTeamRepositories on an instance of MockClient.
type ClientListTeamRepositoriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*github.Repository
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListTeamRepositoriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListTeamRepositoriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// ClientWithTokenFunc describes the behavior when the WithToken method of
// the parent MockClient instance is invoked.
type ClientWithTokenFunc struct {
	defaultHook func(string) client
	hooks       []func(string) client
	history     []ClientWithTokenFuncCall
	mutex       sync.Mutex
}

// WithToken delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) WithToken(v0 string) client {
	r0 := m.WithTokenFunc.nextHook()(v0)
	m.WithTokenFunc.appendCall(ClientWithTokenFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithToken method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientWithTokenFunc) SetDefaultHook(hook func(string) client) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithToken method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientWithTokenFunc) PushHook(hook func(string) client) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientWithTokenFunc) SetDefaultReturn(r0 client) {
	f.SetDefaultHook(func(string) client {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientWithTokenFunc) PushReturn(r0 client) {
	f.PushHook(func(string) client {
		return r0
	})
}

func (f *ClientWithTokenFunc) nextHook() func(string) client {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientWithTokenFunc) appendCall(r0 ClientWithTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientWithTokenFuncCall objects describing
// the invocations of this function.
func (f *ClientWithTokenFunc) History() []ClientWithTokenFuncCall {
	f.mutex.Lock()
	history := make([]ClientWithTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientWithTokenFuncCall is an object that describes an invocation of
// method WithToken on an instance of MockClient.
type ClientWithTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 client
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientWithTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientWithTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
