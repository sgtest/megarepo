// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	types "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/types"
	store "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/store"
	"sync"
)

// MockReferencePager is a mock implementation of the ReferencePager
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/store)
// used for unit testing.
type MockReferencePager struct {
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *ReferencePagerDoneFunc
	// PageFromOffsetFunc is an instance of a mock function object
	// controlling the behavior of the method PageFromOffset.
	PageFromOffsetFunc *ReferencePagerPageFromOffsetFunc
}

// NewMockReferencePager creates a new mock of the ReferencePager interface.
// All methods return zero values for all results, unless overwritten.
func NewMockReferencePager() *MockReferencePager {
	return &MockReferencePager{
		DoneFunc: &ReferencePagerDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		PageFromOffsetFunc: &ReferencePagerPageFromOffsetFunc{
			defaultHook: func(context.Context, int) ([]types.PackageReference, error) {
				return nil, nil
			},
		},
	}
}

// NewMockReferencePagerFrom creates a new mock of the MockReferencePager
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockReferencePagerFrom(i store.ReferencePager) *MockReferencePager {
	return &MockReferencePager{
		DoneFunc: &ReferencePagerDoneFunc{
			defaultHook: i.Done,
		},
		PageFromOffsetFunc: &ReferencePagerPageFromOffsetFunc{
			defaultHook: i.PageFromOffset,
		},
	}
}

// ReferencePagerDoneFunc describes the behavior when the Done method of the
// parent MockReferencePager instance is invoked.
type ReferencePagerDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []ReferencePagerDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReferencePager) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(ReferencePagerDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockReferencePager instance is invoked and the hook queue is
// empty.
func (f *ReferencePagerDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockReferencePager instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReferencePagerDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReferencePagerDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReferencePagerDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *ReferencePagerDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReferencePagerDoneFunc) appendCall(r0 ReferencePagerDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReferencePagerDoneFuncCall objects
// describing the invocations of this function.
func (f *ReferencePagerDoneFunc) History() []ReferencePagerDoneFuncCall {
	f.mutex.Lock()
	history := make([]ReferencePagerDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReferencePagerDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockReferencePager.
type ReferencePagerDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReferencePagerDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReferencePagerDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ReferencePagerPageFromOffsetFunc describes the behavior when the
// PageFromOffset method of the parent MockReferencePager instance is
// invoked.
type ReferencePagerPageFromOffsetFunc struct {
	defaultHook func(context.Context, int) ([]types.PackageReference, error)
	hooks       []func(context.Context, int) ([]types.PackageReference, error)
	history     []ReferencePagerPageFromOffsetFuncCall
	mutex       sync.Mutex
}

// PageFromOffset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockReferencePager) PageFromOffset(v0 context.Context, v1 int) ([]types.PackageReference, error) {
	r0, r1 := m.PageFromOffsetFunc.nextHook()(v0, v1)
	m.PageFromOffsetFunc.appendCall(ReferencePagerPageFromOffsetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PageFromOffset
// method of the parent MockReferencePager instance is invoked and the hook
// queue is empty.
func (f *ReferencePagerPageFromOffsetFunc) SetDefaultHook(hook func(context.Context, int) ([]types.PackageReference, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PageFromOffset method of the parent MockReferencePager instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ReferencePagerPageFromOffsetFunc) PushHook(hook func(context.Context, int) ([]types.PackageReference, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReferencePagerPageFromOffsetFunc) SetDefaultReturn(r0 []types.PackageReference, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]types.PackageReference, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReferencePagerPageFromOffsetFunc) PushReturn(r0 []types.PackageReference, r1 error) {
	f.PushHook(func(context.Context, int) ([]types.PackageReference, error) {
		return r0, r1
	})
}

func (f *ReferencePagerPageFromOffsetFunc) nextHook() func(context.Context, int) ([]types.PackageReference, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReferencePagerPageFromOffsetFunc) appendCall(r0 ReferencePagerPageFromOffsetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReferencePagerPageFromOffsetFuncCall
// objects describing the invocations of this function.
func (f *ReferencePagerPageFromOffsetFunc) History() []ReferencePagerPageFromOffsetFuncCall {
	f.mutex.Lock()
	history := make([]ReferencePagerPageFromOffsetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReferencePagerPageFromOffsetFuncCall is an object that describes an
// invocation of method PageFromOffset on an instance of MockReferencePager.
type ReferencePagerPageFromOffsetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.PackageReference
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReferencePagerPageFromOffsetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReferencePagerPageFromOffsetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
