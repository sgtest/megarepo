&precise.DocumentationPageData{Tree: &precise.DocumentationNode{
	PathID: "/github.com/sourcegraph/lsif-go/internal/index",
	Documentation: protocol.Documentation{
		Identifier: "index",
		NewPage:    true,
		SearchKey:  "github.com/sourcegraph/lsif-go/internal/index",
		Tags: []protocol.Tag{
			protocol.Tag("private"),
			protocol.Tag("package"),
		},
	},
	Label: protocol.MarkupContent{
		Kind:  protocol.MarkupKind("plaintext"),
		Value: "Package index",
	},
	Detail: protocol.MarkupContent{
		Kind: protocol.MarkupKind("markdown"),
		Value: `Package index is used to generate an LSIF dump for a workspace.

`,
	},
	Children: []precise.DocumentationNodeChild{
		precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
			PathID: "/github.com/sourcegraph/lsif-go/internal/index#const",
			Documentation: protocol.Documentation{
				Identifier: "const",
				Tags: []protocol.Tag{
					protocol.Tag("private"),
				},
			},
			Label: protocol.MarkupContent{
				Kind:  protocol.MarkupKind("plaintext"),
				Value: "Constants",
			},
			Detail: protocol.MarkupContent{Kind: protocol.MarkupKind("plaintext")},
			Children: []precise.DocumentationNodeChild{precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
				PathID: "/github.com/sourcegraph/lsif-go/internal/index#LanguageGo",
				Documentation: protocol.Documentation{
					Identifier: "LanguageGo",
					SearchKey:  "index.LanguageGo",
					Tags: []protocol.Tag{
						protocol.Tag("constant"),
						protocol.Tag("string"),
					},
				},
				Label: protocol.MarkupContent{
					Kind:  protocol.MarkupKind("plaintext"),
					Value: "const LanguageGo",
				},
				Detail: protocol.MarkupContent{
					Kind:  protocol.MarkupKind("markdown"),
					Value: "```Go\nconst LanguageGo = \"go\"\n```\n\n",
				},
				Children: []precise.DocumentationNodeChild{},
			}}},
		}},
		precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
			PathID: "/github.com/sourcegraph/lsif-go/internal/index#type",
			Documentation: protocol.Documentation{
				Identifier: "type",
				Tags:       []protocol.Tag{protocol.Tag("private")},
			},
			Label: protocol.MarkupContent{
				Kind:  protocol.MarkupKind("plaintext"),
				Value: "Types",
			},
			Detail: protocol.MarkupContent{Kind: protocol.MarkupKind("plaintext")},
			Children: []precise.DocumentationNodeChild{
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#Indexer",
					Documentation: protocol.Documentation{
						Identifier: "Indexer",
						SearchKey:  "index.Indexer",
						Tags:       []protocol.Tag{protocol.Tag("interface")},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "type Indexer interface",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\ntype Indexer interface {\n\tIndex() (*Stats, error)\n}\n```\n\nIndexer reads source files and outputs LSIF data. \n\n",
					},
					Children: []precise.DocumentationNodeChild{precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
						PathID: "/github.com/sourcegraph/lsif-go/internal/index#NewIndexer",
						Documentation: protocol.Documentation{
							Identifier: "NewIndexer",
							SearchKey:  "index.NewIndexer",
							Tags: []protocol.Tag{
								protocol.Tag("function"),
							},
						},
						Label: protocol.MarkupContent{
							Kind:  protocol.MarkupKind("plaintext"),
							Value: "func NewIndexer(projectRoot string,...",
						},
						Detail: protocol.MarkupContent{
							Kind:  protocol.MarkupKind("markdown"),
							Value: "```Go\nfunc NewIndexer(\n\tprojectRoot string,\n\trepositoryRoot string,\n\tmoduleName string,\n\tmoduleVersion string,\n\tdependencies map[string]string,\n\taddContents bool,\n\ttoolInfo protocol.ToolInfo,\n\tw io.Writer,\n) Indexer\n```\n\nNewIndexer creates a new Indexer. \n\n",
						},
						Children: []precise.DocumentationNodeChild{},
					}}},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#Stats",
					Documentation: protocol.Documentation{
						Identifier: "Stats",
						SearchKey:  "index.Stats",
						Tags:       []protocol.Tag{protocol.Tag("struct")},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "type Stats struct",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\ntype Stats struct {\n\tNumPkgs     int\n\tNumFiles    int\n\tNumDefs     int\n\tNumElements int\n}\n```\n\nStats contains statistics of data processed during index. \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#defInfo",
					Documentation: protocol.Documentation{
						Identifier: "defInfo",
						SearchKey:  "index.defInfo",
						Tags: []protocol.Tag{
							protocol.Tag("struct"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "type defInfo struct",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\ntype defInfo struct {\n\t// The identifier of the containing document. This is necessary\n\t// to track when emitting item edges as we need to store the\n\t// document to which it belongs (not where it is referenced).\n\tdocID string\n\t// The vertex ID of the range that represents the definition.\n\trangeID string\n\t// The vertex ID of the resultSet that represents the definition.\n\tresultSetID string\n\t// The lazily initialized definition result ID upon first use found.\n\tdefResultID string\n}\n```\n\ndefInfo contains LSIF information of a definition. \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#fileInfo",
					Documentation: protocol.Documentation{
						Identifier: "fileInfo",
						SearchKey:  "index.fileInfo",
						Tags: []protocol.Tag{
							protocol.Tag("struct"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "type fileInfo struct",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\ntype fileInfo struct {\n\t// The vertex ID of the document that represents the file.\n\tdocID string\n\t// The vertices ID of ranges that represents the definition.\n\t// This information is collected to emit \"contains\" edge.\n\tdefRangeIDs []string\n\t// The vertices ID of ranges that represents the definition use cases.\n\t// This information is collected to emit \"contains\" edge.\n\tuseRangeIDs []string\n}\n```\n\nfileInfo contains LSIF information of a file. \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer",
					Documentation: protocol.Documentation{
						Identifier: "indexer",
						SearchKey:  "index.indexer",
						Tags: []protocol.Tag{
							protocol.Tag("struct"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "type indexer struct",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\ntype indexer struct {\n\tprojectRoot    string\n\trepositoryRoot string\n\ttoolInfo       protocol.ToolInfo\n\tw              *protocol.Writer\n\n\t// De-duplication\n\tdefsIndexed      map[string]bool\n\tusesIndexed      map[string]bool\n\tranges           map[string]map[int]string // filename -> offset -> rangeID\n\thoverResultCache map[string]string\n\n\t// Type correlation\n\tfiles   map[string]*fileInfo      // Keys: filename\n\timports map[token.Pos]*defInfo    // Keys: definition position\n\tfuncs   map[string]*defInfo       // Keys: full name (with receiver for methods)\n\tconsts  map[token.Pos]*defInfo    // Keys: definition position\n\tvars    map[token.Pos]*defInfo    // Keys: definition position\n\ttypes   map[string]*defInfo       // Keys: type name\n\tlabels  map[token.Pos]*defInfo    // Keys: definition position\n\trefs    map[string]*refResultInfo // Keys: definition range ID\n\n\t// Monikers\n\tmoduleName            string\n\tmoduleVersion         string\n\tdependencies          map[string]string\n\tpackageInformationIDs map[string]string\n}\n```\n\nindexer keeps track of all information needed to generate an LSIF dump. \n\n",
					},
					Children: []precise.DocumentationNodeChild{
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.Index",
							Documentation: protocol.Documentation{
								Identifier: "indexer.Index",
								SearchKey:  "index.indexer.Index",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) Index() (*Stats, error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) Index() (*Stats, error)\n```\n\nIndex generates an LSIF dump from a workspace by traversing through source files and writing the LSIF equivalent to the output source that implements io.Writer. It is caller's responsibility to close the output source if applicable. \n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.addImports",
							Documentation: protocol.Documentation{
								Identifier: "indexer.addImports",
								SearchKey:  "index.indexer.addImports",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) addImports(p *packages.Package, f *ast.File, fi *fileInfo) error",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) addImports(p *packages.Package, f *ast.File, fi *fileInfo) error\n```\n\naddImports constructs *ast.Ident and types.Object out of *ImportSpec and inserts them into packages defs map to be indexed within a unified process. \n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.addMonikers",
							Documentation: protocol.Documentation{
								Identifier: "indexer.addMonikers",
								SearchKey:  "index.indexer.addMonikers",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) addMonikers(kind string, identifier string, sourceID, packageID string) error",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) addMonikers(kind string, identifier string, sourceID, packageID string) error\n```\n\naddMonikers outputs a \"gomod\" moniker vertex, attaches the given package vertex identifier to it, and attaches the new moniker to the source moniker vertex. \n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.emitExportMoniker",
							Documentation: protocol.Documentation{
								Identifier: "indexer.emitExportMoniker",
								SearchKey:  "index.indexer.emitExportMoniker",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) emitExportMoniker(sourceID, identifier string) error",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) emitExportMoniker(sourceID, identifier string) error\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.emitImportMoniker",
							Documentation: protocol.Documentation{
								Identifier: "indexer.emitImportMoniker",
								SearchKey:  "index.indexer.emitImportMoniker",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) emitImportMoniker(sourceID, identifier string) error",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) emitImportMoniker(sourceID, identifier string) error\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.ensurePackageInformation",
							Documentation: protocol.Documentation{
								Identifier: "indexer.ensurePackageInformation",
								SearchKey:  "index.indexer.ensurePackageInformation",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) ensurePackageInformation(packageName, version string) (string, error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) ensurePackageInformation(packageName, version string) (string, error)\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.index",
							Documentation: protocol.Documentation{
								Identifier: "indexer.index",
								SearchKey:  "index.indexer.index",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) index(pkgs []*packages.Package) (*Stats, error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) index(pkgs []*packages.Package) (*Stats, error)\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.indexDefs",
							Documentation: protocol.Documentation{
								Identifier: "indexer.indexDefs",
								SearchKey:  "index.indexer.indexDefs",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) indexDefs(pkgs []*packages.Package, p *packages.Package, f *ast.File, fi *fileInfo, proID, filename string) error",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) indexDefs(pkgs []*packages.Package, p *packages.Package, f *ast.File, fi *fileInfo, proID, filename string) error\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.indexPkgDefs",
							Documentation: protocol.Documentation{
								Identifier: "indexer.indexPkgDefs",
								SearchKey:  "index.indexer.indexPkgDefs",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) indexPkgDefs(pkgs []*packages.Package, p *packages.Package, proID string) (err error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) indexPkgDefs(pkgs []*packages.Package, p *packages.Package, proID string) (err error)\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.indexPkgDocs",
							Documentation: protocol.Documentation{
								Identifier: "indexer.indexPkgDocs",
								SearchKey:  "index.indexer.indexPkgDocs",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) indexPkgDocs(p *packages.Package, proID string) (err error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) indexPkgDocs(p *packages.Package, proID string) (err error)\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.indexPkgUses",
							Documentation: protocol.Documentation{
								Identifier: "indexer.indexPkgUses",
								SearchKey:  "index.indexer.indexPkgUses",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) indexPkgUses(pkgs []*packages.Package, p *packages.Package, proID string) (err error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) indexPkgUses(pkgs []*packages.Package, p *packages.Package, proID string) (err error)\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.indexUses",
							Documentation: protocol.Documentation{
								Identifier: "indexer.indexUses",
								SearchKey:  "index.indexer.indexUses",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) indexUses(pkgs []*packages.Package, p *packages.Package, fi *fileInfo, filename string) error",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) indexUses(pkgs []*packages.Package, p *packages.Package, fi *fileInfo, filename string) error\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.makeCachedExternalHoverResult",
							Documentation: protocol.Documentation{
								Identifier: "indexer.makeCachedExternalHoverResult",
								SearchKey:  "index.indexer.makeCachedExternalHoverResult",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) makeCachedExternalHoverResult(pkgs []*packages.Package, p *packages.Package, obj types.Object, pkg *types.Package) (string, error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) makeCachedExternalHoverResult(pkgs []*packages.Package, p *packages.Package, obj types.Object, pkg *types.Package) (string, error)\n```\n\nmakeCachedExternalHoverResult creates a hover result vertex and returns its ID. This method should be called for objects defined externally with a resolvable package. This method will only make a new vertex if the path and object-position pair has not been seen before. Because some methods in an external package are likely to be used more than once in a project, this can save many copies of the same text. \n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.makeCachedHoverResult",
							Documentation: protocol.Documentation{
								Identifier: "indexer.makeCachedHoverResult",
								SearchKey:  "index.indexer.makeCachedHoverResult",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) makeCachedHoverResult(pkgs []*packages.Package, p *packages.Package, f *ast.File, obj types.Object) (string, error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) makeCachedHoverResult(pkgs []*packages.Package, p *packages.Package, f *ast.File, obj types.Object) (string, error)\n```\n\nmakeCachedHoverResult creates a hover result vertex and returns its iD. This method should be called for each definition in the set of indexed files. This method will not create a new vertex for a pkgName object that has been seen before. Because package text is likely to be large, and repeated at each import and each use in the file (over many multiple files), this can save many copies of the same text. \n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.makeHoverResult",
							Documentation: protocol.Documentation{
								Identifier: "indexer.makeHoverResult",
								SearchKey:  "index.indexer.makeHoverResult",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) makeHoverResult(pkgs []*packages.Package, p *packages.Package, f *ast.File, obj types.Object) (string, error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) makeHoverResult(pkgs []*packages.Package, p *packages.Package, f *ast.File, obj types.Object) (string, error)\n```\n\nmakeHoverResult create a hover result vertex and returns its ID. This method should be called for each definition in the set of indexed files. \n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
						precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
							PathID: "/github.com/sourcegraph/lsif-go/internal/index#indexer.packages",
							Documentation: protocol.Documentation{
								Identifier: "indexer.packages",
								SearchKey:  "index.indexer.packages",
								Tags: []protocol.Tag{
									protocol.Tag("method"),
									protocol.Tag("private"),
								},
							},
							Label: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("plaintext"),
								Value: "func (i *indexer) packages() ([]*packages.Package, error)",
							},
							Detail: protocol.MarkupContent{
								Kind:  protocol.MarkupKind("markdown"),
								Value: "```Go\nfunc (i *indexer) packages() ([]*packages.Package, error)\n```\n\n",
							},
							Children: []precise.DocumentationNodeChild{},
						}},
					},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#refResultInfo",
					Documentation: protocol.Documentation{
						Identifier: "refResultInfo",
						SearchKey:  "index.refResultInfo",
						Tags: []protocol.Tag{
							protocol.Tag("struct"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "type refResultInfo struct",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\ntype refResultInfo struct {\n\t// The vertex ID of the resultSet that represents the referenceResult.\n\tresultSetID string\n\t// The vertices ID of definition ranges that are referenced by the referenceResult.\n\t// This is a map from the document ID to the set of range IDs contained within it.\n\t// This information is collected to emit `{\"label\":\"item\", \"property\":\"definitions\"}` edge.\n\tdefRangeIDs map[string][]string\n\t// The vertices ID of reference ranges that are represented by the referenceResult.\n\t// This is a map from the document ID to the set of range IDs contained within it.\n\t// This information is collected to emit `{\"label\":\"item\", \"property\":\"references\"}` edge.\n\trefRangeIDs map[string][]string\n}\n```\n\nrefResultInfo contains LSIF information of a reference result. \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
			},
		}},
		precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
			PathID: "/github.com/sourcegraph/lsif-go/internal/index#func",
			Documentation: protocol.Documentation{
				Identifier: "func",
				Tags:       []protocol.Tag{protocol.Tag("private")},
			},
			Label: protocol.MarkupContent{
				Kind:  protocol.MarkupKind("plaintext"),
				Value: "Functions",
			},
			Detail: protocol.MarkupContent{Kind: protocol.MarkupKind("plaintext")},
			Children: []precise.DocumentationNodeChild{
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#constructMarkedString",
					Documentation: protocol.Documentation{
						Identifier: "constructMarkedString",
						SearchKey:  "index.constructMarkedString",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func constructMarkedString(s, comments, extra string) ([]protocol.MarkedString, error)",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc constructMarkedString(s, comments, extra string) ([]protocol.MarkedString, error)\n```\n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#externalHoverContents",
					Documentation: protocol.Documentation{
						Identifier: "externalHoverContents",
						SearchKey:  "index.externalHoverContents",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func externalHoverContents(pkgs []*packages.Package, p *packages.Package, obj types.Object, pkg *types.Package) ([]protocol.MarkedString, error)",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc externalHoverContents(pkgs []*packages.Package, p *packages.Package, obj types.Object, pkg *types.Package) ([]protocol.MarkedString, error)\n```\n\nexternalHoverContents returns contents used as hover info for objects that are not defined in any of the (directly) analyzed source files. This will attempt to find the definition in the AST of the dependency and pull the hover text from that. \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#findComments",
					Documentation: protocol.Documentation{
						Identifier: "findComments",
						SearchKey:  "index.findComments",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func findComments(pkgs []*packages.Package, p *packages.Package, f *ast.File, o types.Object) (string, error)",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc findComments(pkgs []*packages.Package, p *packages.Package, f *ast.File, o types.Object) (string, error)\n```\n\nfindComments traverses the paths found within enclosing interval of the object to collect comments. \n\nThis function is modified from [https://sourcegraph.com/github.com/sourcegraph/go-langserver](https://sourcegraph.com/github.com/sourcegraph/go-langserver)@02f4198/-/blob/langserver/hover.go#L106 \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#findContents",
					Documentation: protocol.Documentation{
						Identifier: "findContents",
						SearchKey:  "index.findContents",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func findContents(pkgs []*packages.Package, p *packages.Package, f *ast.File, obj types.Object) ([]protocol.MarkedString, error)",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc findContents(pkgs []*packages.Package, p *packages.Package, f *ast.File, obj types.Object) ([]protocol.MarkedString, error)\n```\n\nfindContents returns contents used as hover info for given object. \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#getPackageComment",
					Documentation: protocol.Documentation{
						Identifier: "getPackageComment",
						SearchKey:  "index.getPackageComment",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func getPackageComment(dependencyPackage *packages.Package, pkgPath string) string",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc getPackageComment(dependencyPackage *packages.Package, pkgPath string) string\n```\n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#joinCommentGroups",
					Documentation: protocol.Documentation{
						Identifier: "joinCommentGroups",
						SearchKey:  "index.joinCommentGroups",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func joinCommentGroups(a, b *ast.CommentGroup) string",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc joinCommentGroups(a, b *ast.CommentGroup) string\n```\n\njoinCommentGroups joins the resultant non-empty comment text from two CommentGroups with a newline. \n\nThis function is copied from [https://sourcegraph.com/github.com/sourcegraph/go-langserver](https://sourcegraph.com/github.com/sourcegraph/go-langserver)@02f4198/-/blob/langserver/hover.go#L190 \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#lspRange",
					Documentation: protocol.Documentation{
						Identifier: "lspRange",
						SearchKey:  "index.lspRange",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func lspRange(pos token.Position, name string, isQuotedPkgName bool) (start protocol.Pos, end protocol.Pos)",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc lspRange(pos token.Position, name string, isQuotedPkgName bool) (start protocol.Pos, end protocol.Pos)\n```\n\nlspRange transforms go/token.Position (1-based) to LSP start and end ranges (0-based) which takes in consideration of identifier's name length. If the token is a quoted package name, we'll create a range that covers only the string contents, not the quotes. \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#packagePrefixes",
					Documentation: protocol.Documentation{
						Identifier: "packagePrefixes",
						SearchKey:  "index.packagePrefixes",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func packagePrefixes(packageName string) []string",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc packagePrefixes(packageName string) []string\n```\n\npackagePrefixes returns all prefixes of the go package path. For example, the package `foo/bar/baz` will return \n\n```\n- `foo/bar/baz`\n- `foo/bar`\n- `foo`\n\n```\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#prettyPrintTypesString",
					Documentation: protocol.Documentation{
						Identifier: "prettyPrintTypesString",
						SearchKey:  "index.prettyPrintTypesString",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func prettyPrintTypesString(s string) string",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc prettyPrintTypesString(s string) string\n```\n\nprettyPrintTypesString is pretty printing specific to the output of types.*String. Instead of re-implementing the printer, we can just transform its output. \n\nThis function is copied from [https://sourcegraph.com/github.com/sourcegraph/go-langserver](https://sourcegraph.com/github.com/sourcegraph/go-langserver)@02f4198/-/blob/langserver/hover.go#L332 \n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
				precise.DocumentationNodeChild{Node: &precise.DocumentationNode{
					PathID: "/github.com/sourcegraph/lsif-go/internal/index#typeString",
					Documentation: protocol.Documentation{
						Identifier: "typeString",
						SearchKey:  "index.typeString",
						Tags: []protocol.Tag{
							protocol.Tag("function"),
							protocol.Tag("private"),
						},
					},
					Label: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("plaintext"),
						Value: "func typeString(obj types.Object) (string, string)",
					},
					Detail: protocol.MarkupContent{
						Kind:  protocol.MarkupKind("markdown"),
						Value: "```Go\nfunc typeString(obj types.Object) (string, string)\n```\n\n",
					},
					Children: []precise.DocumentationNodeChild{},
				}},
			},
		}},
	},
}}
