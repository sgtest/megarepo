// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package uploadstore

import (
	"context"
	s3 "github.com/aws/aws-sdk-go/service/s3"
	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	"sync"
)

// MockS3API is a mock implementation of the s3API interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore)
// used for unit testing.
type MockS3API struct {
	// AbortMultipartUploadFunc is an instance of a mock function object
	// controlling the behavior of the method AbortMultipartUpload.
	AbortMultipartUploadFunc *S3APIAbortMultipartUploadFunc
	// CompleteMultipartUploadFunc is an instance of a mock function object
	// controlling the behavior of the method CompleteMultipartUpload.
	CompleteMultipartUploadFunc *S3APICompleteMultipartUploadFunc
	// CreateBucketFunc is an instance of a mock function object controlling
	// the behavior of the method CreateBucket.
	CreateBucketFunc *S3APICreateBucketFunc
	// CreateMultipartUploadFunc is an instance of a mock function object
	// controlling the behavior of the method CreateMultipartUpload.
	CreateMultipartUploadFunc *S3APICreateMultipartUploadFunc
	// DeleteObjectFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteObject.
	DeleteObjectFunc *S3APIDeleteObjectFunc
	// GetObjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetObject.
	GetObjectFunc *S3APIGetObjectFunc
	// HeadObjectFunc is an instance of a mock function object controlling
	// the behavior of the method HeadObject.
	HeadObjectFunc *S3APIHeadObjectFunc
	// PutBucketLifecycleConfigurationFunc is an instance of a mock function
	// object controlling the behavior of the method
	// PutBucketLifecycleConfiguration.
	PutBucketLifecycleConfigurationFunc *S3APIPutBucketLifecycleConfigurationFunc
	// UploadPartCopyFunc is an instance of a mock function object
	// controlling the behavior of the method UploadPartCopy.
	UploadPartCopyFunc *S3APIUploadPartCopyFunc
}

// NewMockS3API creates a new mock of the s3API interface. All methods
// return zero values for all results, unless overwritten.
func NewMockS3API() *MockS3API {
	return &MockS3API{
		AbortMultipartUploadFunc: &S3APIAbortMultipartUploadFunc{
			defaultHook: func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
				return nil, nil
			},
		},
		CompleteMultipartUploadFunc: &S3APICompleteMultipartUploadFunc{
			defaultHook: func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
				return nil, nil
			},
		},
		CreateBucketFunc: &S3APICreateBucketFunc{
			defaultHook: func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
				return nil, nil
			},
		},
		CreateMultipartUploadFunc: &S3APICreateMultipartUploadFunc{
			defaultHook: func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
				return nil, nil
			},
		},
		DeleteObjectFunc: &S3APIDeleteObjectFunc{
			defaultHook: func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
				return nil, nil
			},
		},
		GetObjectFunc: &S3APIGetObjectFunc{
			defaultHook: func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
				return nil, nil
			},
		},
		HeadObjectFunc: &S3APIHeadObjectFunc{
			defaultHook: func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
				return nil, nil
			},
		},
		PutBucketLifecycleConfigurationFunc: &S3APIPutBucketLifecycleConfigurationFunc{
			defaultHook: func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
				return nil, nil
			},
		},
		UploadPartCopyFunc: &S3APIUploadPartCopyFunc{
			defaultHook: func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
				return nil, nil
			},
		},
	}
}

// surrogateMockS3API is a copy of the s3API interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore).
// It is redefined here as it is unexported in the source packge.
type surrogateMockS3API interface {
	AbortMultipartUpload(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)
	CompleteMultipartUpload(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)
	CreateBucket(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)
	CreateMultipartUpload(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)
	DeleteObject(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)
	GetObject(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)
	HeadObject(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)
	PutBucketLifecycleConfiguration(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)
	UploadPartCopy(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)
}

// NewMockS3APIFrom creates a new mock of the MockS3API interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockS3APIFrom(i surrogateMockS3API) *MockS3API {
	return &MockS3API{
		AbortMultipartUploadFunc: &S3APIAbortMultipartUploadFunc{
			defaultHook: i.AbortMultipartUpload,
		},
		CompleteMultipartUploadFunc: &S3APICompleteMultipartUploadFunc{
			defaultHook: i.CompleteMultipartUpload,
		},
		CreateBucketFunc: &S3APICreateBucketFunc{
			defaultHook: i.CreateBucket,
		},
		CreateMultipartUploadFunc: &S3APICreateMultipartUploadFunc{
			defaultHook: i.CreateMultipartUpload,
		},
		DeleteObjectFunc: &S3APIDeleteObjectFunc{
			defaultHook: i.DeleteObject,
		},
		GetObjectFunc: &S3APIGetObjectFunc{
			defaultHook: i.GetObject,
		},
		HeadObjectFunc: &S3APIHeadObjectFunc{
			defaultHook: i.HeadObject,
		},
		PutBucketLifecycleConfigurationFunc: &S3APIPutBucketLifecycleConfigurationFunc{
			defaultHook: i.PutBucketLifecycleConfiguration,
		},
		UploadPartCopyFunc: &S3APIUploadPartCopyFunc{
			defaultHook: i.UploadPartCopy,
		},
	}
}

// S3APIAbortMultipartUploadFunc describes the behavior when the
// AbortMultipartUpload method of the parent MockS3API instance is invoked.
type S3APIAbortMultipartUploadFunc struct {
	defaultHook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)
	hooks       []func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)
	history     []S3APIAbortMultipartUploadFuncCall
	mutex       sync.Mutex
}

// AbortMultipartUpload delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockS3API) AbortMultipartUpload(v0 context.Context, v1 *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
	r0, r1 := m.AbortMultipartUploadFunc.nextHook()(v0, v1)
	m.AbortMultipartUploadFunc.appendCall(S3APIAbortMultipartUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AbortMultipartUpload
// method of the parent MockS3API instance is invoked and the hook queue is
// empty.
func (f *S3APIAbortMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AbortMultipartUpload method of the parent MockS3API instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *S3APIAbortMultipartUploadFunc) PushHook(hook func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3APIAbortMultipartUploadFunc) SetDefaultReturn(r0 *s3.AbortMultipartUploadOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3APIAbortMultipartUploadFunc) PushReturn(r0 *s3.AbortMultipartUploadOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
		return r0, r1
	})
}

func (f *S3APIAbortMultipartUploadFunc) nextHook() func(context.Context, *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIAbortMultipartUploadFunc) appendCall(r0 S3APIAbortMultipartUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIAbortMultipartUploadFuncCall objects
// describing the invocations of this function.
func (f *S3APIAbortMultipartUploadFunc) History() []S3APIAbortMultipartUploadFuncCall {
	f.mutex.Lock()
	history := make([]S3APIAbortMultipartUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIAbortMultipartUploadFuncCall is an object that describes an
// invocation of method AbortMultipartUpload on an instance of MockS3API.
type S3APIAbortMultipartUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.AbortMultipartUploadInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.AbortMultipartUploadOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIAbortMultipartUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIAbortMultipartUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APICompleteMultipartUploadFunc describes the behavior when the
// CompleteMultipartUpload method of the parent MockS3API instance is
// invoked.
type S3APICompleteMultipartUploadFunc struct {
	defaultHook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)
	hooks       []func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)
	history     []S3APICompleteMultipartUploadFuncCall
	mutex       sync.Mutex
}

// CompleteMultipartUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockS3API) CompleteMultipartUpload(v0 context.Context, v1 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	r0, r1 := m.CompleteMultipartUploadFunc.nextHook()(v0, v1)
	m.CompleteMultipartUploadFunc.appendCall(S3APICompleteMultipartUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CompleteMultipartUpload method of the parent MockS3API instance is
// invoked and the hook queue is empty.
func (f *S3APICompleteMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CompleteMultipartUpload method of the parent MockS3API instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *S3APICompleteMultipartUploadFunc) PushHook(hook func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3APICompleteMultipartUploadFunc) SetDefaultReturn(r0 *s3.CompleteMultipartUploadOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3APICompleteMultipartUploadFunc) PushReturn(r0 *s3.CompleteMultipartUploadOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
		return r0, r1
	})
}

func (f *S3APICompleteMultipartUploadFunc) nextHook() func(context.Context, *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APICompleteMultipartUploadFunc) appendCall(r0 S3APICompleteMultipartUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APICompleteMultipartUploadFuncCall
// objects describing the invocations of this function.
func (f *S3APICompleteMultipartUploadFunc) History() []S3APICompleteMultipartUploadFuncCall {
	f.mutex.Lock()
	history := make([]S3APICompleteMultipartUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APICompleteMultipartUploadFuncCall is an object that describes an
// invocation of method CompleteMultipartUpload on an instance of MockS3API.
type S3APICompleteMultipartUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.CompleteMultipartUploadInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.CompleteMultipartUploadOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APICompleteMultipartUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APICompleteMultipartUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APICreateBucketFunc describes the behavior when the CreateBucket method
// of the parent MockS3API instance is invoked.
type S3APICreateBucketFunc struct {
	defaultHook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)
	hooks       []func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)
	history     []S3APICreateBucketFuncCall
	mutex       sync.Mutex
}

// CreateBucket delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockS3API) CreateBucket(v0 context.Context, v1 *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
	r0, r1 := m.CreateBucketFunc.nextHook()(v0, v1)
	m.CreateBucketFunc.appendCall(S3APICreateBucketFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateBucket method
// of the parent MockS3API instance is invoked and the hook queue is empty.
func (f *S3APICreateBucketFunc) SetDefaultHook(hook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateBucket method of the parent MockS3API instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3APICreateBucketFunc) PushHook(hook func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3APICreateBucketFunc) SetDefaultReturn(r0 *s3.CreateBucketOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3APICreateBucketFunc) PushReturn(r0 *s3.CreateBucketOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
		return r0, r1
	})
}

func (f *S3APICreateBucketFunc) nextHook() func(context.Context, *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APICreateBucketFunc) appendCall(r0 S3APICreateBucketFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APICreateBucketFuncCall objects
// describing the invocations of this function.
func (f *S3APICreateBucketFunc) History() []S3APICreateBucketFuncCall {
	f.mutex.Lock()
	history := make([]S3APICreateBucketFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APICreateBucketFuncCall is an object that describes an invocation of
// method CreateBucket on an instance of MockS3API.
type S3APICreateBucketFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.CreateBucketInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.CreateBucketOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APICreateBucketFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APICreateBucketFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APICreateMultipartUploadFunc describes the behavior when the
// CreateMultipartUpload method of the parent MockS3API instance is invoked.
type S3APICreateMultipartUploadFunc struct {
	defaultHook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)
	hooks       []func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)
	history     []S3APICreateMultipartUploadFuncCall
	mutex       sync.Mutex
}

// CreateMultipartUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockS3API) CreateMultipartUpload(v0 context.Context, v1 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	r0, r1 := m.CreateMultipartUploadFunc.nextHook()(v0, v1)
	m.CreateMultipartUploadFunc.appendCall(S3APICreateMultipartUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateMultipartUpload method of the parent MockS3API instance is invoked
// and the hook queue is empty.
func (f *S3APICreateMultipartUploadFunc) SetDefaultHook(hook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateMultipartUpload method of the parent MockS3API instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *S3APICreateMultipartUploadFunc) PushHook(hook func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3APICreateMultipartUploadFunc) SetDefaultReturn(r0 *s3.CreateMultipartUploadOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3APICreateMultipartUploadFunc) PushReturn(r0 *s3.CreateMultipartUploadOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
		return r0, r1
	})
}

func (f *S3APICreateMultipartUploadFunc) nextHook() func(context.Context, *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APICreateMultipartUploadFunc) appendCall(r0 S3APICreateMultipartUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APICreateMultipartUploadFuncCall objects
// describing the invocations of this function.
func (f *S3APICreateMultipartUploadFunc) History() []S3APICreateMultipartUploadFuncCall {
	f.mutex.Lock()
	history := make([]S3APICreateMultipartUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APICreateMultipartUploadFuncCall is an object that describes an
// invocation of method CreateMultipartUpload on an instance of MockS3API.
type S3APICreateMultipartUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.CreateMultipartUploadInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.CreateMultipartUploadOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APICreateMultipartUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APICreateMultipartUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIDeleteObjectFunc describes the behavior when the DeleteObject method
// of the parent MockS3API instance is invoked.
type S3APIDeleteObjectFunc struct {
	defaultHook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)
	hooks       []func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)
	history     []S3APIDeleteObjectFuncCall
	mutex       sync.Mutex
}

// DeleteObject delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockS3API) DeleteObject(v0 context.Context, v1 *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	r0, r1 := m.DeleteObjectFunc.nextHook()(v0, v1)
	m.DeleteObjectFunc.appendCall(S3APIDeleteObjectFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteObject method
// of the parent MockS3API instance is invoked and the hook queue is empty.
func (f *S3APIDeleteObjectFunc) SetDefaultHook(hook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteObject method of the parent MockS3API instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3APIDeleteObjectFunc) PushHook(hook func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3APIDeleteObjectFunc) SetDefaultReturn(r0 *s3.DeleteObjectOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3APIDeleteObjectFunc) PushReturn(r0 *s3.DeleteObjectOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
		return r0, r1
	})
}

func (f *S3APIDeleteObjectFunc) nextHook() func(context.Context, *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIDeleteObjectFunc) appendCall(r0 S3APIDeleteObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIDeleteObjectFuncCall objects
// describing the invocations of this function.
func (f *S3APIDeleteObjectFunc) History() []S3APIDeleteObjectFuncCall {
	f.mutex.Lock()
	history := make([]S3APIDeleteObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIDeleteObjectFuncCall is an object that describes an invocation of
// method DeleteObject on an instance of MockS3API.
type S3APIDeleteObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.DeleteObjectInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.DeleteObjectOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIDeleteObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIDeleteObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIGetObjectFunc describes the behavior when the GetObject method of
// the parent MockS3API instance is invoked.
type S3APIGetObjectFunc struct {
	defaultHook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)
	hooks       []func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)
	history     []S3APIGetObjectFuncCall
	mutex       sync.Mutex
}

// GetObject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockS3API) GetObject(v0 context.Context, v1 *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	r0, r1 := m.GetObjectFunc.nextHook()(v0, v1)
	m.GetObjectFunc.appendCall(S3APIGetObjectFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetObject method of
// the parent MockS3API instance is invoked and the hook queue is empty.
func (f *S3APIGetObjectFunc) SetDefaultHook(hook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetObject method of the parent MockS3API instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *S3APIGetObjectFunc) PushHook(hook func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3APIGetObjectFunc) SetDefaultReturn(r0 *s3.GetObjectOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3APIGetObjectFunc) PushReturn(r0 *s3.GetObjectOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
		return r0, r1
	})
}

func (f *S3APIGetObjectFunc) nextHook() func(context.Context, *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIGetObjectFunc) appendCall(r0 S3APIGetObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIGetObjectFuncCall objects describing
// the invocations of this function.
func (f *S3APIGetObjectFunc) History() []S3APIGetObjectFuncCall {
	f.mutex.Lock()
	history := make([]S3APIGetObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIGetObjectFuncCall is an object that describes an invocation of
// method GetObject on an instance of MockS3API.
type S3APIGetObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.GetObjectInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.GetObjectOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIGetObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIGetObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIHeadObjectFunc describes the behavior when the HeadObject method of
// the parent MockS3API instance is invoked.
type S3APIHeadObjectFunc struct {
	defaultHook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)
	hooks       []func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)
	history     []S3APIHeadObjectFuncCall
	mutex       sync.Mutex
}

// HeadObject delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockS3API) HeadObject(v0 context.Context, v1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	r0, r1 := m.HeadObjectFunc.nextHook()(v0, v1)
	m.HeadObjectFunc.appendCall(S3APIHeadObjectFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HeadObject method of
// the parent MockS3API instance is invoked and the hook queue is empty.
func (f *S3APIHeadObjectFunc) SetDefaultHook(hook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HeadObject method of the parent MockS3API instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3APIHeadObjectFunc) PushHook(hook func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3APIHeadObjectFunc) SetDefaultReturn(r0 *s3.HeadObjectOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3APIHeadObjectFunc) PushReturn(r0 *s3.HeadObjectOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
		return r0, r1
	})
}

func (f *S3APIHeadObjectFunc) nextHook() func(context.Context, *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIHeadObjectFunc) appendCall(r0 S3APIHeadObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIHeadObjectFuncCall objects describing
// the invocations of this function.
func (f *S3APIHeadObjectFunc) History() []S3APIHeadObjectFuncCall {
	f.mutex.Lock()
	history := make([]S3APIHeadObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIHeadObjectFuncCall is an object that describes an invocation of
// method HeadObject on an instance of MockS3API.
type S3APIHeadObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.HeadObjectInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.HeadObjectOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIHeadObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIHeadObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIPutBucketLifecycleConfigurationFunc describes the behavior when the
// PutBucketLifecycleConfiguration method of the parent MockS3API instance
// is invoked.
type S3APIPutBucketLifecycleConfigurationFunc struct {
	defaultHook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)
	hooks       []func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)
	history     []S3APIPutBucketLifecycleConfigurationFuncCall
	mutex       sync.Mutex
}

// PutBucketLifecycleConfiguration delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockS3API) PutBucketLifecycleConfiguration(v0 context.Context, v1 *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	r0, r1 := m.PutBucketLifecycleConfigurationFunc.nextHook()(v0, v1)
	m.PutBucketLifecycleConfigurationFunc.appendCall(S3APIPutBucketLifecycleConfigurationFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PutBucketLifecycleConfiguration method of the parent MockS3API instance
// is invoked and the hook queue is empty.
func (f *S3APIPutBucketLifecycleConfigurationFunc) SetDefaultHook(hook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PutBucketLifecycleConfiguration method of the parent MockS3API instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *S3APIPutBucketLifecycleConfigurationFunc) PushHook(hook func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3APIPutBucketLifecycleConfigurationFunc) SetDefaultReturn(r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3APIPutBucketLifecycleConfigurationFunc) PushReturn(r0 *s3.PutBucketLifecycleConfigurationOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
		return r0, r1
	})
}

func (f *S3APIPutBucketLifecycleConfigurationFunc) nextHook() func(context.Context, *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIPutBucketLifecycleConfigurationFunc) appendCall(r0 S3APIPutBucketLifecycleConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// S3APIPutBucketLifecycleConfigurationFuncCall objects describing the
// invocations of this function.
func (f *S3APIPutBucketLifecycleConfigurationFunc) History() []S3APIPutBucketLifecycleConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]S3APIPutBucketLifecycleConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIPutBucketLifecycleConfigurationFuncCall is an object that describes
// an invocation of method PutBucketLifecycleConfiguration on an instance of
// MockS3API.
type S3APIPutBucketLifecycleConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.PutBucketLifecycleConfigurationInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.PutBucketLifecycleConfigurationOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIPutBucketLifecycleConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIPutBucketLifecycleConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// S3APIUploadPartCopyFunc describes the behavior when the UploadPartCopy
// method of the parent MockS3API instance is invoked.
type S3APIUploadPartCopyFunc struct {
	defaultHook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)
	hooks       []func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)
	history     []S3APIUploadPartCopyFuncCall
	mutex       sync.Mutex
}

// UploadPartCopy delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockS3API) UploadPartCopy(v0 context.Context, v1 *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
	r0, r1 := m.UploadPartCopyFunc.nextHook()(v0, v1)
	m.UploadPartCopyFunc.appendCall(S3APIUploadPartCopyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UploadPartCopy
// method of the parent MockS3API instance is invoked and the hook queue is
// empty.
func (f *S3APIUploadPartCopyFunc) SetDefaultHook(hook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UploadPartCopy method of the parent MockS3API instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3APIUploadPartCopyFunc) PushHook(hook func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3APIUploadPartCopyFunc) SetDefaultReturn(r0 *s3.UploadPartCopyOutput, r1 error) {
	f.SetDefaultHook(func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3APIUploadPartCopyFunc) PushReturn(r0 *s3.UploadPartCopyOutput, r1 error) {
	f.PushHook(func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
		return r0, r1
	})
}

func (f *S3APIUploadPartCopyFunc) nextHook() func(context.Context, *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3APIUploadPartCopyFunc) appendCall(r0 S3APIUploadPartCopyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3APIUploadPartCopyFuncCall objects
// describing the invocations of this function.
func (f *S3APIUploadPartCopyFunc) History() []S3APIUploadPartCopyFuncCall {
	f.mutex.Lock()
	history := make([]S3APIUploadPartCopyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3APIUploadPartCopyFuncCall is an object that describes an invocation of
// method UploadPartCopy on an instance of MockS3API.
type S3APIUploadPartCopyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3.UploadPartCopyInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *s3.UploadPartCopyOutput
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3APIUploadPartCopyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3APIUploadPartCopyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockS3Uploader is a mock implementation of the s3Uploader interface (from
// the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore)
// used for unit testing.
type MockS3Uploader struct {
	// UploadFunc is an instance of a mock function object controlling the
	// behavior of the method Upload.
	UploadFunc *S3UploaderUploadFunc
}

// NewMockS3Uploader creates a new mock of the s3Uploader interface. All
// methods return zero values for all results, unless overwritten.
func NewMockS3Uploader() *MockS3Uploader {
	return &MockS3Uploader{
		UploadFunc: &S3UploaderUploadFunc{
			defaultHook: func(context.Context, *s3manager.UploadInput) error {
				return nil
			},
		},
	}
}

// surrogateMockS3Uploader is a copy of the s3Uploader interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/uploadstore).
// It is redefined here as it is unexported in the source packge.
type surrogateMockS3Uploader interface {
	Upload(context.Context, *s3manager.UploadInput) error
}

// NewMockS3UploaderFrom creates a new mock of the MockS3Uploader interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockS3UploaderFrom(i surrogateMockS3Uploader) *MockS3Uploader {
	return &MockS3Uploader{
		UploadFunc: &S3UploaderUploadFunc{
			defaultHook: i.Upload,
		},
	}
}

// S3UploaderUploadFunc describes the behavior when the Upload method of the
// parent MockS3Uploader instance is invoked.
type S3UploaderUploadFunc struct {
	defaultHook func(context.Context, *s3manager.UploadInput) error
	hooks       []func(context.Context, *s3manager.UploadInput) error
	history     []S3UploaderUploadFuncCall
	mutex       sync.Mutex
}

// Upload delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockS3Uploader) Upload(v0 context.Context, v1 *s3manager.UploadInput) error {
	r0 := m.UploadFunc.nextHook()(v0, v1)
	m.UploadFunc.appendCall(S3UploaderUploadFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Upload method of the
// parent MockS3Uploader instance is invoked and the hook queue is empty.
func (f *S3UploaderUploadFunc) SetDefaultHook(hook func(context.Context, *s3manager.UploadInput) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Upload method of the parent MockS3Uploader instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *S3UploaderUploadFunc) PushHook(hook func(context.Context, *s3manager.UploadInput) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *S3UploaderUploadFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *s3manager.UploadInput) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *S3UploaderUploadFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *s3manager.UploadInput) error {
		return r0
	})
}

func (f *S3UploaderUploadFunc) nextHook() func(context.Context, *s3manager.UploadInput) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *S3UploaderUploadFunc) appendCall(r0 S3UploaderUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of S3UploaderUploadFuncCall objects describing
// the invocations of this function.
func (f *S3UploaderUploadFunc) History() []S3UploaderUploadFuncCall {
	f.mutex.Lock()
	history := make([]S3UploaderUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// S3UploaderUploadFuncCall is an object that describes an invocation of
// method Upload on an instance of MockS3Uploader.
type S3UploaderUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *s3manager.UploadInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c S3UploaderUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c S3UploaderUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
