// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package ranking

import (
	"context"
	"sync"
	"time"

	store "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/ranking/internal/store"
	shared1 "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/ranking/shared"
	shared "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/shared"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	conftypes "github.com/sourcegraph/sourcegraph/internal/conf/conftypes"
	schema "github.com/sourcegraph/sourcegraph/schema"
)

// MockStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/ranking/internal/store)
// used for unit testing.
type MockStore struct {
	// GetDocumentRanksFunc is an instance of a mock function object
	// controlling the behavior of the method GetDocumentRanks.
	GetDocumentRanksFunc *StoreGetDocumentRanksFunc
	// GetReferenceCountStatisticsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetReferenceCountStatistics.
	GetReferenceCountStatisticsFunc *StoreGetReferenceCountStatisticsFunc
	// GetStarRankFunc is an instance of a mock function object controlling
	// the behavior of the method GetStarRank.
	GetStarRankFunc *StoreGetStarRankFunc
	// GetUploadsForRankingFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsForRanking.
	GetUploadsForRankingFunc *StoreGetUploadsForRankingFunc
	// InsertDefinitionsForRankingFunc is an instance of a mock function
	// object controlling the behavior of the method
	// InsertDefinitionsForRanking.
	InsertDefinitionsForRankingFunc *StoreInsertDefinitionsForRankingFunc
	// InsertInitialPathCountsFunc is an instance of a mock function object
	// controlling the behavior of the method InsertInitialPathCounts.
	InsertInitialPathCountsFunc *StoreInsertInitialPathCountsFunc
	// InsertInitialPathRanksFunc is an instance of a mock function object
	// controlling the behavior of the method InsertInitialPathRanks.
	InsertInitialPathRanksFunc *StoreInsertInitialPathRanksFunc
	// InsertPathCountInputsFunc is an instance of a mock function object
	// controlling the behavior of the method InsertPathCountInputs.
	InsertPathCountInputsFunc *StoreInsertPathCountInputsFunc
	// InsertPathRanksFunc is an instance of a mock function object
	// controlling the behavior of the method InsertPathRanks.
	InsertPathRanksFunc *StoreInsertPathRanksFunc
	// InsertReferencesForRankingFunc is an instance of a mock function
	// object controlling the behavior of the method
	// InsertReferencesForRanking.
	InsertReferencesForRankingFunc *StoreInsertReferencesForRankingFunc
	// LastUpdatedAtFunc is an instance of a mock function object
	// controlling the behavior of the method LastUpdatedAt.
	LastUpdatedAtFunc *StoreLastUpdatedAtFunc
	// ProcessStaleExportedUploadsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ProcessStaleExportedUploads.
	ProcessStaleExportedUploadsFunc *StoreProcessStaleExportedUploadsFunc
	// VacuumAbandonedDefinitionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// VacuumAbandonedDefinitions.
	VacuumAbandonedDefinitionsFunc *StoreVacuumAbandonedDefinitionsFunc
	// VacuumAbandonedInitialPathCountsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// VacuumAbandonedInitialPathCounts.
	VacuumAbandonedInitialPathCountsFunc *StoreVacuumAbandonedInitialPathCountsFunc
	// VacuumAbandonedReferencesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// VacuumAbandonedReferences.
	VacuumAbandonedReferencesFunc *StoreVacuumAbandonedReferencesFunc
	// VacuumStaleDefinitionsFunc is an instance of a mock function object
	// controlling the behavior of the method VacuumStaleDefinitions.
	VacuumStaleDefinitionsFunc *StoreVacuumStaleDefinitionsFunc
	// VacuumStaleGraphsFunc is an instance of a mock function object
	// controlling the behavior of the method VacuumStaleGraphs.
	VacuumStaleGraphsFunc *StoreVacuumStaleGraphsFunc
	// VacuumStaleInitialPathsFunc is an instance of a mock function object
	// controlling the behavior of the method VacuumStaleInitialPaths.
	VacuumStaleInitialPathsFunc *StoreVacuumStaleInitialPathsFunc
	// VacuumStaleRanksFunc is an instance of a mock function object
	// controlling the behavior of the method VacuumStaleRanks.
	VacuumStaleRanksFunc *StoreVacuumStaleRanksFunc
	// VacuumStaleReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method VacuumStaleReferences.
	VacuumStaleReferencesFunc *StoreVacuumStaleReferencesFunc
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore() *MockStore {
	return &MockStore{
		GetDocumentRanksFunc: &StoreGetDocumentRanksFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 map[string]float64, r1 bool, r2 error) {
				return
			},
		},
		GetReferenceCountStatisticsFunc: &StoreGetReferenceCountStatisticsFunc{
			defaultHook: func(context.Context) (r0 float64, r1 error) {
				return
			},
		},
		GetStarRankFunc: &StoreGetStarRankFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 float64, r1 error) {
				return
			},
		},
		GetUploadsForRankingFunc: &StoreGetUploadsForRankingFunc{
			defaultHook: func(context.Context, string, string, int) (r0 []shared.ExportedUpload, r1 error) {
				return
			},
		},
		InsertDefinitionsForRankingFunc: &StoreInsertDefinitionsForRankingFunc{
			defaultHook: func(context.Context, string, chan shared1.RankingDefinitions) (r0 error) {
				return
			},
		},
		InsertInitialPathCountsFunc: &StoreInsertInitialPathCountsFunc{
			defaultHook: func(context.Context, string, int) (r0 int, r1 int, r2 error) {
				return
			},
		},
		InsertInitialPathRanksFunc: &StoreInsertInitialPathRanksFunc{
			defaultHook: func(context.Context, int, chan string, int, string) (r0 error) {
				return
			},
		},
		InsertPathCountInputsFunc: &StoreInsertPathCountInputsFunc{
			defaultHook: func(context.Context, string, int) (r0 int, r1 int, r2 error) {
				return
			},
		},
		InsertPathRanksFunc: &StoreInsertPathRanksFunc{
			defaultHook: func(context.Context, string, int) (r0 int, r1 int, r2 error) {
				return
			},
		},
		InsertReferencesForRankingFunc: &StoreInsertReferencesForRankingFunc{
			defaultHook: func(context.Context, string, int, int, chan string) (r0 error) {
				return
			},
		},
		LastUpdatedAtFunc: &StoreLastUpdatedAtFunc{
			defaultHook: func(context.Context, []api.RepoID) (r0 map[api.RepoID]time.Time, r1 error) {
				return
			},
		},
		ProcessStaleExportedUploadsFunc: &StoreProcessStaleExportedUploadsFunc{
			defaultHook: func(context.Context, string, int, func(ctx context.Context, objectPrefix string) error) (r0 int, r1 error) {
				return
			},
		},
		VacuumAbandonedDefinitionsFunc: &StoreVacuumAbandonedDefinitionsFunc{
			defaultHook: func(context.Context, string, int) (r0 int, r1 error) {
				return
			},
		},
		VacuumAbandonedInitialPathCountsFunc: &StoreVacuumAbandonedInitialPathCountsFunc{
			defaultHook: func(context.Context, string, int) (r0 int, r1 error) {
				return
			},
		},
		VacuumAbandonedReferencesFunc: &StoreVacuumAbandonedReferencesFunc{
			defaultHook: func(context.Context, string, int) (r0 int, r1 error) {
				return
			},
		},
		VacuumStaleDefinitionsFunc: &StoreVacuumStaleDefinitionsFunc{
			defaultHook: func(context.Context, string) (r0 int, r1 int, r2 error) {
				return
			},
		},
		VacuumStaleGraphsFunc: &StoreVacuumStaleGraphsFunc{
			defaultHook: func(context.Context, string, int) (r0 int, r1 error) {
				return
			},
		},
		VacuumStaleInitialPathsFunc: &StoreVacuumStaleInitialPathsFunc{
			defaultHook: func(context.Context, string) (r0 int, r1 int, r2 error) {
				return
			},
		},
		VacuumStaleRanksFunc: &StoreVacuumStaleRanksFunc{
			defaultHook: func(context.Context, string) (r0 int, r1 int, r2 error) {
				return
			},
		},
		VacuumStaleReferencesFunc: &StoreVacuumStaleReferencesFunc{
			defaultHook: func(context.Context, string) (r0 int, r1 int, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockStore creates a new mock of the Store interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockStore() *MockStore {
	return &MockStore{
		GetDocumentRanksFunc: &StoreGetDocumentRanksFunc{
			defaultHook: func(context.Context, api.RepoName) (map[string]float64, bool, error) {
				panic("unexpected invocation of MockStore.GetDocumentRanks")
			},
		},
		GetReferenceCountStatisticsFunc: &StoreGetReferenceCountStatisticsFunc{
			defaultHook: func(context.Context) (float64, error) {
				panic("unexpected invocation of MockStore.GetReferenceCountStatistics")
			},
		},
		GetStarRankFunc: &StoreGetStarRankFunc{
			defaultHook: func(context.Context, api.RepoName) (float64, error) {
				panic("unexpected invocation of MockStore.GetStarRank")
			},
		},
		GetUploadsForRankingFunc: &StoreGetUploadsForRankingFunc{
			defaultHook: func(context.Context, string, string, int) ([]shared.ExportedUpload, error) {
				panic("unexpected invocation of MockStore.GetUploadsForRanking")
			},
		},
		InsertDefinitionsForRankingFunc: &StoreInsertDefinitionsForRankingFunc{
			defaultHook: func(context.Context, string, chan shared1.RankingDefinitions) error {
				panic("unexpected invocation of MockStore.InsertDefinitionsForRanking")
			},
		},
		InsertInitialPathCountsFunc: &StoreInsertInitialPathCountsFunc{
			defaultHook: func(context.Context, string, int) (int, int, error) {
				panic("unexpected invocation of MockStore.InsertInitialPathCounts")
			},
		},
		InsertInitialPathRanksFunc: &StoreInsertInitialPathRanksFunc{
			defaultHook: func(context.Context, int, chan string, int, string) error {
				panic("unexpected invocation of MockStore.InsertInitialPathRanks")
			},
		},
		InsertPathCountInputsFunc: &StoreInsertPathCountInputsFunc{
			defaultHook: func(context.Context, string, int) (int, int, error) {
				panic("unexpected invocation of MockStore.InsertPathCountInputs")
			},
		},
		InsertPathRanksFunc: &StoreInsertPathRanksFunc{
			defaultHook: func(context.Context, string, int) (int, int, error) {
				panic("unexpected invocation of MockStore.InsertPathRanks")
			},
		},
		InsertReferencesForRankingFunc: &StoreInsertReferencesForRankingFunc{
			defaultHook: func(context.Context, string, int, int, chan string) error {
				panic("unexpected invocation of MockStore.InsertReferencesForRanking")
			},
		},
		LastUpdatedAtFunc: &StoreLastUpdatedAtFunc{
			defaultHook: func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error) {
				panic("unexpected invocation of MockStore.LastUpdatedAt")
			},
		},
		ProcessStaleExportedUploadsFunc: &StoreProcessStaleExportedUploadsFunc{
			defaultHook: func(context.Context, string, int, func(ctx context.Context, objectPrefix string) error) (int, error) {
				panic("unexpected invocation of MockStore.ProcessStaleExportedUploads")
			},
		},
		VacuumAbandonedDefinitionsFunc: &StoreVacuumAbandonedDefinitionsFunc{
			defaultHook: func(context.Context, string, int) (int, error) {
				panic("unexpected invocation of MockStore.VacuumAbandonedDefinitions")
			},
		},
		VacuumAbandonedInitialPathCountsFunc: &StoreVacuumAbandonedInitialPathCountsFunc{
			defaultHook: func(context.Context, string, int) (int, error) {
				panic("unexpected invocation of MockStore.VacuumAbandonedInitialPathCounts")
			},
		},
		VacuumAbandonedReferencesFunc: &StoreVacuumAbandonedReferencesFunc{
			defaultHook: func(context.Context, string, int) (int, error) {
				panic("unexpected invocation of MockStore.VacuumAbandonedReferences")
			},
		},
		VacuumStaleDefinitionsFunc: &StoreVacuumStaleDefinitionsFunc{
			defaultHook: func(context.Context, string) (int, int, error) {
				panic("unexpected invocation of MockStore.VacuumStaleDefinitions")
			},
		},
		VacuumStaleGraphsFunc: &StoreVacuumStaleGraphsFunc{
			defaultHook: func(context.Context, string, int) (int, error) {
				panic("unexpected invocation of MockStore.VacuumStaleGraphs")
			},
		},
		VacuumStaleInitialPathsFunc: &StoreVacuumStaleInitialPathsFunc{
			defaultHook: func(context.Context, string) (int, int, error) {
				panic("unexpected invocation of MockStore.VacuumStaleInitialPaths")
			},
		},
		VacuumStaleRanksFunc: &StoreVacuumStaleRanksFunc{
			defaultHook: func(context.Context, string) (int, int, error) {
				panic("unexpected invocation of MockStore.VacuumStaleRanks")
			},
		},
		VacuumStaleReferencesFunc: &StoreVacuumStaleReferencesFunc{
			defaultHook: func(context.Context, string) (int, int, error) {
				panic("unexpected invocation of MockStore.VacuumStaleReferences")
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom(i store.Store) *MockStore {
	return &MockStore{
		GetDocumentRanksFunc: &StoreGetDocumentRanksFunc{
			defaultHook: i.GetDocumentRanks,
		},
		GetReferenceCountStatisticsFunc: &StoreGetReferenceCountStatisticsFunc{
			defaultHook: i.GetReferenceCountStatistics,
		},
		GetStarRankFunc: &StoreGetStarRankFunc{
			defaultHook: i.GetStarRank,
		},
		GetUploadsForRankingFunc: &StoreGetUploadsForRankingFunc{
			defaultHook: i.GetUploadsForRanking,
		},
		InsertDefinitionsForRankingFunc: &StoreInsertDefinitionsForRankingFunc{
			defaultHook: i.InsertDefinitionsForRanking,
		},
		InsertInitialPathCountsFunc: &StoreInsertInitialPathCountsFunc{
			defaultHook: i.InsertInitialPathCounts,
		},
		InsertInitialPathRanksFunc: &StoreInsertInitialPathRanksFunc{
			defaultHook: i.InsertInitialPathRanks,
		},
		InsertPathCountInputsFunc: &StoreInsertPathCountInputsFunc{
			defaultHook: i.InsertPathCountInputs,
		},
		InsertPathRanksFunc: &StoreInsertPathRanksFunc{
			defaultHook: i.InsertPathRanks,
		},
		InsertReferencesForRankingFunc: &StoreInsertReferencesForRankingFunc{
			defaultHook: i.InsertReferencesForRanking,
		},
		LastUpdatedAtFunc: &StoreLastUpdatedAtFunc{
			defaultHook: i.LastUpdatedAt,
		},
		ProcessStaleExportedUploadsFunc: &StoreProcessStaleExportedUploadsFunc{
			defaultHook: i.ProcessStaleExportedUploads,
		},
		VacuumAbandonedDefinitionsFunc: &StoreVacuumAbandonedDefinitionsFunc{
			defaultHook: i.VacuumAbandonedDefinitions,
		},
		VacuumAbandonedInitialPathCountsFunc: &StoreVacuumAbandonedInitialPathCountsFunc{
			defaultHook: i.VacuumAbandonedInitialPathCounts,
		},
		VacuumAbandonedReferencesFunc: &StoreVacuumAbandonedReferencesFunc{
			defaultHook: i.VacuumAbandonedReferences,
		},
		VacuumStaleDefinitionsFunc: &StoreVacuumStaleDefinitionsFunc{
			defaultHook: i.VacuumStaleDefinitions,
		},
		VacuumStaleGraphsFunc: &StoreVacuumStaleGraphsFunc{
			defaultHook: i.VacuumStaleGraphs,
		},
		VacuumStaleInitialPathsFunc: &StoreVacuumStaleInitialPathsFunc{
			defaultHook: i.VacuumStaleInitialPaths,
		},
		VacuumStaleRanksFunc: &StoreVacuumStaleRanksFunc{
			defaultHook: i.VacuumStaleRanks,
		},
		VacuumStaleReferencesFunc: &StoreVacuumStaleReferencesFunc{
			defaultHook: i.VacuumStaleReferences,
		},
	}
}

// StoreGetDocumentRanksFunc describes the behavior when the
// GetDocumentRanks method of the parent MockStore instance is invoked.
type StoreGetDocumentRanksFunc struct {
	defaultHook func(context.Context, api.RepoName) (map[string]float64, bool, error)
	hooks       []func(context.Context, api.RepoName) (map[string]float64, bool, error)
	history     []StoreGetDocumentRanksFuncCall
	mutex       sync.Mutex
}

// GetDocumentRanks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) GetDocumentRanks(v0 context.Context, v1 api.RepoName) (map[string]float64, bool, error) {
	r0, r1, r2 := m.GetDocumentRanksFunc.nextHook()(v0, v1)
	m.GetDocumentRanksFunc.appendCall(StoreGetDocumentRanksFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDocumentRanks
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreGetDocumentRanksFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (map[string]float64, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDocumentRanks method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetDocumentRanksFunc) PushHook(hook func(context.Context, api.RepoName) (map[string]float64, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetDocumentRanksFunc) SetDefaultReturn(r0 map[string]float64, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (map[string]float64, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetDocumentRanksFunc) PushReturn(r0 map[string]float64, r1 bool, r2 error) {
	f.PushHook(func(context.Context, api.RepoName) (map[string]float64, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetDocumentRanksFunc) nextHook() func(context.Context, api.RepoName) (map[string]float64, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetDocumentRanksFunc) appendCall(r0 StoreGetDocumentRanksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetDocumentRanksFuncCall objects
// describing the invocations of this function.
func (f *StoreGetDocumentRanksFunc) History() []StoreGetDocumentRanksFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetDocumentRanksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetDocumentRanksFuncCall is an object that describes an invocation
// of method GetDocumentRanks on an instance of MockStore.
type StoreGetDocumentRanksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]float64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetDocumentRanksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetDocumentRanksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetReferenceCountStatisticsFunc describes the behavior when the
// GetReferenceCountStatistics method of the parent MockStore instance is
// invoked.
type StoreGetReferenceCountStatisticsFunc struct {
	defaultHook func(context.Context) (float64, error)
	hooks       []func(context.Context) (float64, error)
	history     []StoreGetReferenceCountStatisticsFuncCall
	mutex       sync.Mutex
}

// GetReferenceCountStatistics delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) GetReferenceCountStatistics(v0 context.Context) (float64, error) {
	r0, r1 := m.GetReferenceCountStatisticsFunc.nextHook()(v0)
	m.GetReferenceCountStatisticsFunc.appendCall(StoreGetReferenceCountStatisticsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetReferenceCountStatistics method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetReferenceCountStatisticsFunc) SetDefaultHook(hook func(context.Context) (float64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReferenceCountStatistics method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreGetReferenceCountStatisticsFunc) PushHook(hook func(context.Context) (float64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetReferenceCountStatisticsFunc) SetDefaultReturn(r0 float64, r1 error) {
	f.SetDefaultHook(func(context.Context) (float64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetReferenceCountStatisticsFunc) PushReturn(r0 float64, r1 error) {
	f.PushHook(func(context.Context) (float64, error) {
		return r0, r1
	})
}

func (f *StoreGetReferenceCountStatisticsFunc) nextHook() func(context.Context) (float64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetReferenceCountStatisticsFunc) appendCall(r0 StoreGetReferenceCountStatisticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetReferenceCountStatisticsFuncCall
// objects describing the invocations of this function.
func (f *StoreGetReferenceCountStatisticsFunc) History() []StoreGetReferenceCountStatisticsFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetReferenceCountStatisticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetReferenceCountStatisticsFuncCall is an object that describes an
// invocation of method GetReferenceCountStatistics on an instance of
// MockStore.
type StoreGetReferenceCountStatisticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 float64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetReferenceCountStatisticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetReferenceCountStatisticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetStarRankFunc describes the behavior when the GetStarRank method
// of the parent MockStore instance is invoked.
type StoreGetStarRankFunc struct {
	defaultHook func(context.Context, api.RepoName) (float64, error)
	hooks       []func(context.Context, api.RepoName) (float64, error)
	history     []StoreGetStarRankFuncCall
	mutex       sync.Mutex
}

// GetStarRank delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetStarRank(v0 context.Context, v1 api.RepoName) (float64, error) {
	r0, r1 := m.GetStarRankFunc.nextHook()(v0, v1)
	m.GetStarRankFunc.appendCall(StoreGetStarRankFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStarRank method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetStarRankFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (float64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStarRank method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetStarRankFunc) PushHook(hook func(context.Context, api.RepoName) (float64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetStarRankFunc) SetDefaultReturn(r0 float64, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (float64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetStarRankFunc) PushReturn(r0 float64, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (float64, error) {
		return r0, r1
	})
}

func (f *StoreGetStarRankFunc) nextHook() func(context.Context, api.RepoName) (float64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetStarRankFunc) appendCall(r0 StoreGetStarRankFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetStarRankFuncCall objects describing
// the invocations of this function.
func (f *StoreGetStarRankFunc) History() []StoreGetStarRankFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetStarRankFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetStarRankFuncCall is an object that describes an invocation of
// method GetStarRank on an instance of MockStore.
type StoreGetStarRankFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 float64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetStarRankFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetStarRankFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetUploadsForRankingFunc describes the behavior when the
// GetUploadsForRanking method of the parent MockStore instance is invoked.
type StoreGetUploadsForRankingFunc struct {
	defaultHook func(context.Context, string, string, int) ([]shared.ExportedUpload, error)
	hooks       []func(context.Context, string, string, int) ([]shared.ExportedUpload, error)
	history     []StoreGetUploadsForRankingFuncCall
	mutex       sync.Mutex
}

// GetUploadsForRanking delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) GetUploadsForRanking(v0 context.Context, v1 string, v2 string, v3 int) ([]shared.ExportedUpload, error) {
	r0, r1 := m.GetUploadsForRankingFunc.nextHook()(v0, v1, v2, v3)
	m.GetUploadsForRankingFunc.appendCall(StoreGetUploadsForRankingFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsForRanking
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreGetUploadsForRankingFunc) SetDefaultHook(hook func(context.Context, string, string, int) ([]shared.ExportedUpload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsForRanking method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreGetUploadsForRankingFunc) PushHook(hook func(context.Context, string, string, int) ([]shared.ExportedUpload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetUploadsForRankingFunc) SetDefaultReturn(r0 []shared.ExportedUpload, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string, int) ([]shared.ExportedUpload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetUploadsForRankingFunc) PushReturn(r0 []shared.ExportedUpload, r1 error) {
	f.PushHook(func(context.Context, string, string, int) ([]shared.ExportedUpload, error) {
		return r0, r1
	})
}

func (f *StoreGetUploadsForRankingFunc) nextHook() func(context.Context, string, string, int) ([]shared.ExportedUpload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetUploadsForRankingFunc) appendCall(r0 StoreGetUploadsForRankingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetUploadsForRankingFuncCall objects
// describing the invocations of this function.
func (f *StoreGetUploadsForRankingFunc) History() []StoreGetUploadsForRankingFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetUploadsForRankingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetUploadsForRankingFuncCall is an object that describes an
// invocation of method GetUploadsForRanking on an instance of MockStore.
type StoreGetUploadsForRankingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.ExportedUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetUploadsForRankingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetUploadsForRankingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreInsertDefinitionsForRankingFunc describes the behavior when the
// InsertDefinitionsForRanking method of the parent MockStore instance is
// invoked.
type StoreInsertDefinitionsForRankingFunc struct {
	defaultHook func(context.Context, string, chan shared1.RankingDefinitions) error
	hooks       []func(context.Context, string, chan shared1.RankingDefinitions) error
	history     []StoreInsertDefinitionsForRankingFuncCall
	mutex       sync.Mutex
}

// InsertDefinitionsForRanking delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) InsertDefinitionsForRanking(v0 context.Context, v1 string, v2 chan shared1.RankingDefinitions) error {
	r0 := m.InsertDefinitionsForRankingFunc.nextHook()(v0, v1, v2)
	m.InsertDefinitionsForRankingFunc.appendCall(StoreInsertDefinitionsForRankingFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// InsertDefinitionsForRanking method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreInsertDefinitionsForRankingFunc) SetDefaultHook(hook func(context.Context, string, chan shared1.RankingDefinitions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertDefinitionsForRanking method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreInsertDefinitionsForRankingFunc) PushHook(hook func(context.Context, string, chan shared1.RankingDefinitions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreInsertDefinitionsForRankingFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, chan shared1.RankingDefinitions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreInsertDefinitionsForRankingFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, chan shared1.RankingDefinitions) error {
		return r0
	})
}

func (f *StoreInsertDefinitionsForRankingFunc) nextHook() func(context.Context, string, chan shared1.RankingDefinitions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreInsertDefinitionsForRankingFunc) appendCall(r0 StoreInsertDefinitionsForRankingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreInsertDefinitionsForRankingFuncCall
// objects describing the invocations of this function.
func (f *StoreInsertDefinitionsForRankingFunc) History() []StoreInsertDefinitionsForRankingFuncCall {
	f.mutex.Lock()
	history := make([]StoreInsertDefinitionsForRankingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreInsertDefinitionsForRankingFuncCall is an object that describes an
// invocation of method InsertDefinitionsForRanking on an instance of
// MockStore.
type StoreInsertDefinitionsForRankingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 chan shared1.RankingDefinitions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreInsertDefinitionsForRankingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreInsertDefinitionsForRankingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreInsertInitialPathCountsFunc describes the behavior when the
// InsertInitialPathCounts method of the parent MockStore instance is
// invoked.
type StoreInsertInitialPathCountsFunc struct {
	defaultHook func(context.Context, string, int) (int, int, error)
	hooks       []func(context.Context, string, int) (int, int, error)
	history     []StoreInsertInitialPathCountsFuncCall
	mutex       sync.Mutex
}

// InsertInitialPathCounts delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) InsertInitialPathCounts(v0 context.Context, v1 string, v2 int) (int, int, error) {
	r0, r1, r2 := m.InsertInitialPathCountsFunc.nextHook()(v0, v1, v2)
	m.InsertInitialPathCountsFunc.appendCall(StoreInsertInitialPathCountsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// InsertInitialPathCounts method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreInsertInitialPathCountsFunc) SetDefaultHook(hook func(context.Context, string, int) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertInitialPathCounts method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreInsertInitialPathCountsFunc) PushHook(hook func(context.Context, string, int) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreInsertInitialPathCountsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string, int) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreInsertInitialPathCountsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, string, int) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreInsertInitialPathCountsFunc) nextHook() func(context.Context, string, int) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreInsertInitialPathCountsFunc) appendCall(r0 StoreInsertInitialPathCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreInsertInitialPathCountsFuncCall
// objects describing the invocations of this function.
func (f *StoreInsertInitialPathCountsFunc) History() []StoreInsertInitialPathCountsFuncCall {
	f.mutex.Lock()
	history := make([]StoreInsertInitialPathCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreInsertInitialPathCountsFuncCall is an object that describes an
// invocation of method InsertInitialPathCounts on an instance of MockStore.
type StoreInsertInitialPathCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreInsertInitialPathCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreInsertInitialPathCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreInsertInitialPathRanksFunc describes the behavior when the
// InsertInitialPathRanks method of the parent MockStore instance is
// invoked.
type StoreInsertInitialPathRanksFunc struct {
	defaultHook func(context.Context, int, chan string, int, string) error
	hooks       []func(context.Context, int, chan string, int, string) error
	history     []StoreInsertInitialPathRanksFuncCall
	mutex       sync.Mutex
}

// InsertInitialPathRanks delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) InsertInitialPathRanks(v0 context.Context, v1 int, v2 chan string, v3 int, v4 string) error {
	r0 := m.InsertInitialPathRanksFunc.nextHook()(v0, v1, v2, v3, v4)
	m.InsertInitialPathRanksFunc.appendCall(StoreInsertInitialPathRanksFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// InsertInitialPathRanks method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreInsertInitialPathRanksFunc) SetDefaultHook(hook func(context.Context, int, chan string, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertInitialPathRanks method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreInsertInitialPathRanksFunc) PushHook(hook func(context.Context, int, chan string, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreInsertInitialPathRanksFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, chan string, int, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreInsertInitialPathRanksFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, chan string, int, string) error {
		return r0
	})
}

func (f *StoreInsertInitialPathRanksFunc) nextHook() func(context.Context, int, chan string, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreInsertInitialPathRanksFunc) appendCall(r0 StoreInsertInitialPathRanksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreInsertInitialPathRanksFuncCall objects
// describing the invocations of this function.
func (f *StoreInsertInitialPathRanksFunc) History() []StoreInsertInitialPathRanksFuncCall {
	f.mutex.Lock()
	history := make([]StoreInsertInitialPathRanksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreInsertInitialPathRanksFuncCall is an object that describes an
// invocation of method InsertInitialPathRanks on an instance of MockStore.
type StoreInsertInitialPathRanksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 chan string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreInsertInitialPathRanksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreInsertInitialPathRanksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreInsertPathCountInputsFunc describes the behavior when the
// InsertPathCountInputs method of the parent MockStore instance is invoked.
type StoreInsertPathCountInputsFunc struct {
	defaultHook func(context.Context, string, int) (int, int, error)
	hooks       []func(context.Context, string, int) (int, int, error)
	history     []StoreInsertPathCountInputsFuncCall
	mutex       sync.Mutex
}

// InsertPathCountInputs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) InsertPathCountInputs(v0 context.Context, v1 string, v2 int) (int, int, error) {
	r0, r1, r2 := m.InsertPathCountInputsFunc.nextHook()(v0, v1, v2)
	m.InsertPathCountInputsFunc.appendCall(StoreInsertPathCountInputsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// InsertPathCountInputs method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreInsertPathCountInputsFunc) SetDefaultHook(hook func(context.Context, string, int) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertPathCountInputs method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreInsertPathCountInputsFunc) PushHook(hook func(context.Context, string, int) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreInsertPathCountInputsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string, int) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreInsertPathCountInputsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, string, int) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreInsertPathCountInputsFunc) nextHook() func(context.Context, string, int) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreInsertPathCountInputsFunc) appendCall(r0 StoreInsertPathCountInputsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreInsertPathCountInputsFuncCall objects
// describing the invocations of this function.
func (f *StoreInsertPathCountInputsFunc) History() []StoreInsertPathCountInputsFuncCall {
	f.mutex.Lock()
	history := make([]StoreInsertPathCountInputsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreInsertPathCountInputsFuncCall is an object that describes an
// invocation of method InsertPathCountInputs on an instance of MockStore.
type StoreInsertPathCountInputsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreInsertPathCountInputsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreInsertPathCountInputsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreInsertPathRanksFunc describes the behavior when the InsertPathRanks
// method of the parent MockStore instance is invoked.
type StoreInsertPathRanksFunc struct {
	defaultHook func(context.Context, string, int) (int, int, error)
	hooks       []func(context.Context, string, int) (int, int, error)
	history     []StoreInsertPathRanksFuncCall
	mutex       sync.Mutex
}

// InsertPathRanks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) InsertPathRanks(v0 context.Context, v1 string, v2 int) (int, int, error) {
	r0, r1, r2 := m.InsertPathRanksFunc.nextHook()(v0, v1, v2)
	m.InsertPathRanksFunc.appendCall(StoreInsertPathRanksFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the InsertPathRanks
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreInsertPathRanksFunc) SetDefaultHook(hook func(context.Context, string, int) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertPathRanks method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreInsertPathRanksFunc) PushHook(hook func(context.Context, string, int) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreInsertPathRanksFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string, int) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreInsertPathRanksFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, string, int) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreInsertPathRanksFunc) nextHook() func(context.Context, string, int) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreInsertPathRanksFunc) appendCall(r0 StoreInsertPathRanksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreInsertPathRanksFuncCall objects
// describing the invocations of this function.
func (f *StoreInsertPathRanksFunc) History() []StoreInsertPathRanksFuncCall {
	f.mutex.Lock()
	history := make([]StoreInsertPathRanksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreInsertPathRanksFuncCall is an object that describes an invocation of
// method InsertPathRanks on an instance of MockStore.
type StoreInsertPathRanksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreInsertPathRanksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreInsertPathRanksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreInsertReferencesForRankingFunc describes the behavior when the
// InsertReferencesForRanking method of the parent MockStore instance is
// invoked.
type StoreInsertReferencesForRankingFunc struct {
	defaultHook func(context.Context, string, int, int, chan string) error
	hooks       []func(context.Context, string, int, int, chan string) error
	history     []StoreInsertReferencesForRankingFuncCall
	mutex       sync.Mutex
}

// InsertReferencesForRanking delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) InsertReferencesForRanking(v0 context.Context, v1 string, v2 int, v3 int, v4 chan string) error {
	r0 := m.InsertReferencesForRankingFunc.nextHook()(v0, v1, v2, v3, v4)
	m.InsertReferencesForRankingFunc.appendCall(StoreInsertReferencesForRankingFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// InsertReferencesForRanking method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreInsertReferencesForRankingFunc) SetDefaultHook(hook func(context.Context, string, int, int, chan string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertReferencesForRanking method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreInsertReferencesForRankingFunc) PushHook(hook func(context.Context, string, int, int, chan string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreInsertReferencesForRankingFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, int, int, chan string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreInsertReferencesForRankingFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, int, int, chan string) error {
		return r0
	})
}

func (f *StoreInsertReferencesForRankingFunc) nextHook() func(context.Context, string, int, int, chan string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreInsertReferencesForRankingFunc) appendCall(r0 StoreInsertReferencesForRankingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreInsertReferencesForRankingFuncCall
// objects describing the invocations of this function.
func (f *StoreInsertReferencesForRankingFunc) History() []StoreInsertReferencesForRankingFuncCall {
	f.mutex.Lock()
	history := make([]StoreInsertReferencesForRankingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreInsertReferencesForRankingFuncCall is an object that describes an
// invocation of method InsertReferencesForRanking on an instance of
// MockStore.
type StoreInsertReferencesForRankingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 chan string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreInsertReferencesForRankingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreInsertReferencesForRankingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreLastUpdatedAtFunc describes the behavior when the LastUpdatedAt
// method of the parent MockStore instance is invoked.
type StoreLastUpdatedAtFunc struct {
	defaultHook func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error)
	hooks       []func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error)
	history     []StoreLastUpdatedAtFuncCall
	mutex       sync.Mutex
}

// LastUpdatedAt delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) LastUpdatedAt(v0 context.Context, v1 []api.RepoID) (map[api.RepoID]time.Time, error) {
	r0, r1 := m.LastUpdatedAtFunc.nextHook()(v0, v1)
	m.LastUpdatedAtFunc.appendCall(StoreLastUpdatedAtFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LastUpdatedAt method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreLastUpdatedAtFunc) SetDefaultHook(hook func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LastUpdatedAt method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreLastUpdatedAtFunc) PushHook(hook func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreLastUpdatedAtFunc) SetDefaultReturn(r0 map[api.RepoID]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreLastUpdatedAtFunc) PushReturn(r0 map[api.RepoID]time.Time, r1 error) {
	f.PushHook(func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error) {
		return r0, r1
	})
}

func (f *StoreLastUpdatedAtFunc) nextHook() func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreLastUpdatedAtFunc) appendCall(r0 StoreLastUpdatedAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreLastUpdatedAtFuncCall objects
// describing the invocations of this function.
func (f *StoreLastUpdatedAtFunc) History() []StoreLastUpdatedAtFuncCall {
	f.mutex.Lock()
	history := make([]StoreLastUpdatedAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreLastUpdatedAtFuncCall is an object that describes an invocation of
// method LastUpdatedAt on an instance of MockStore.
type StoreLastUpdatedAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreLastUpdatedAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreLastUpdatedAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreProcessStaleExportedUploadsFunc describes the behavior when the
// ProcessStaleExportedUploads method of the parent MockStore instance is
// invoked.
type StoreProcessStaleExportedUploadsFunc struct {
	defaultHook func(context.Context, string, int, func(ctx context.Context, objectPrefix string) error) (int, error)
	hooks       []func(context.Context, string, int, func(ctx context.Context, objectPrefix string) error) (int, error)
	history     []StoreProcessStaleExportedUploadsFuncCall
	mutex       sync.Mutex
}

// ProcessStaleExportedUploads delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) ProcessStaleExportedUploads(v0 context.Context, v1 string, v2 int, v3 func(ctx context.Context, objectPrefix string) error) (int, error) {
	r0, r1 := m.ProcessStaleExportedUploadsFunc.nextHook()(v0, v1, v2, v3)
	m.ProcessStaleExportedUploadsFunc.appendCall(StoreProcessStaleExportedUploadsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ProcessStaleExportedUploads method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreProcessStaleExportedUploadsFunc) SetDefaultHook(hook func(context.Context, string, int, func(ctx context.Context, objectPrefix string) error) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ProcessStaleExportedUploads method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreProcessStaleExportedUploadsFunc) PushHook(hook func(context.Context, string, int, func(ctx context.Context, objectPrefix string) error) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreProcessStaleExportedUploadsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int, func(ctx context.Context, objectPrefix string) error) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreProcessStaleExportedUploadsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, int, func(ctx context.Context, objectPrefix string) error) (int, error) {
		return r0, r1
	})
}

func (f *StoreProcessStaleExportedUploadsFunc) nextHook() func(context.Context, string, int, func(ctx context.Context, objectPrefix string) error) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreProcessStaleExportedUploadsFunc) appendCall(r0 StoreProcessStaleExportedUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreProcessStaleExportedUploadsFuncCall
// objects describing the invocations of this function.
func (f *StoreProcessStaleExportedUploadsFunc) History() []StoreProcessStaleExportedUploadsFuncCall {
	f.mutex.Lock()
	history := make([]StoreProcessStaleExportedUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreProcessStaleExportedUploadsFuncCall is an object that describes an
// invocation of method ProcessStaleExportedUploads on an instance of
// MockStore.
type StoreProcessStaleExportedUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 func(ctx context.Context, objectPrefix string) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreProcessStaleExportedUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreProcessStaleExportedUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreVacuumAbandonedDefinitionsFunc describes the behavior when the
// VacuumAbandonedDefinitions method of the parent MockStore instance is
// invoked.
type StoreVacuumAbandonedDefinitionsFunc struct {
	defaultHook func(context.Context, string, int) (int, error)
	hooks       []func(context.Context, string, int) (int, error)
	history     []StoreVacuumAbandonedDefinitionsFuncCall
	mutex       sync.Mutex
}

// VacuumAbandonedDefinitions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) VacuumAbandonedDefinitions(v0 context.Context, v1 string, v2 int) (int, error) {
	r0, r1 := m.VacuumAbandonedDefinitionsFunc.nextHook()(v0, v1, v2)
	m.VacuumAbandonedDefinitionsFunc.appendCall(StoreVacuumAbandonedDefinitionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// VacuumAbandonedDefinitions method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreVacuumAbandonedDefinitionsFunc) SetDefaultHook(hook func(context.Context, string, int) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VacuumAbandonedDefinitions method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreVacuumAbandonedDefinitionsFunc) PushHook(hook func(context.Context, string, int) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreVacuumAbandonedDefinitionsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreVacuumAbandonedDefinitionsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, int) (int, error) {
		return r0, r1
	})
}

func (f *StoreVacuumAbandonedDefinitionsFunc) nextHook() func(context.Context, string, int) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreVacuumAbandonedDefinitionsFunc) appendCall(r0 StoreVacuumAbandonedDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreVacuumAbandonedDefinitionsFuncCall
// objects describing the invocations of this function.
func (f *StoreVacuumAbandonedDefinitionsFunc) History() []StoreVacuumAbandonedDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]StoreVacuumAbandonedDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreVacuumAbandonedDefinitionsFuncCall is an object that describes an
// invocation of method VacuumAbandonedDefinitions on an instance of
// MockStore.
type StoreVacuumAbandonedDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreVacuumAbandonedDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreVacuumAbandonedDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreVacuumAbandonedInitialPathCountsFunc describes the behavior when the
// VacuumAbandonedInitialPathCounts method of the parent MockStore instance
// is invoked.
type StoreVacuumAbandonedInitialPathCountsFunc struct {
	defaultHook func(context.Context, string, int) (int, error)
	hooks       []func(context.Context, string, int) (int, error)
	history     []StoreVacuumAbandonedInitialPathCountsFuncCall
	mutex       sync.Mutex
}

// VacuumAbandonedInitialPathCounts delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStore) VacuumAbandonedInitialPathCounts(v0 context.Context, v1 string, v2 int) (int, error) {
	r0, r1 := m.VacuumAbandonedInitialPathCountsFunc.nextHook()(v0, v1, v2)
	m.VacuumAbandonedInitialPathCountsFunc.appendCall(StoreVacuumAbandonedInitialPathCountsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// VacuumAbandonedInitialPathCounts method of the parent MockStore instance
// is invoked and the hook queue is empty.
func (f *StoreVacuumAbandonedInitialPathCountsFunc) SetDefaultHook(hook func(context.Context, string, int) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VacuumAbandonedInitialPathCounts method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreVacuumAbandonedInitialPathCountsFunc) PushHook(hook func(context.Context, string, int) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreVacuumAbandonedInitialPathCountsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreVacuumAbandonedInitialPathCountsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, int) (int, error) {
		return r0, r1
	})
}

func (f *StoreVacuumAbandonedInitialPathCountsFunc) nextHook() func(context.Context, string, int) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreVacuumAbandonedInitialPathCountsFunc) appendCall(r0 StoreVacuumAbandonedInitialPathCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreVacuumAbandonedInitialPathCountsFuncCall objects describing the
// invocations of this function.
func (f *StoreVacuumAbandonedInitialPathCountsFunc) History() []StoreVacuumAbandonedInitialPathCountsFuncCall {
	f.mutex.Lock()
	history := make([]StoreVacuumAbandonedInitialPathCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreVacuumAbandonedInitialPathCountsFuncCall is an object that describes
// an invocation of method VacuumAbandonedInitialPathCounts on an instance
// of MockStore.
type StoreVacuumAbandonedInitialPathCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreVacuumAbandonedInitialPathCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreVacuumAbandonedInitialPathCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreVacuumAbandonedReferencesFunc describes the behavior when the
// VacuumAbandonedReferences method of the parent MockStore instance is
// invoked.
type StoreVacuumAbandonedReferencesFunc struct {
	defaultHook func(context.Context, string, int) (int, error)
	hooks       []func(context.Context, string, int) (int, error)
	history     []StoreVacuumAbandonedReferencesFuncCall
	mutex       sync.Mutex
}

// VacuumAbandonedReferences delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) VacuumAbandonedReferences(v0 context.Context, v1 string, v2 int) (int, error) {
	r0, r1 := m.VacuumAbandonedReferencesFunc.nextHook()(v0, v1, v2)
	m.VacuumAbandonedReferencesFunc.appendCall(StoreVacuumAbandonedReferencesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// VacuumAbandonedReferences method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreVacuumAbandonedReferencesFunc) SetDefaultHook(hook func(context.Context, string, int) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VacuumAbandonedReferences method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreVacuumAbandonedReferencesFunc) PushHook(hook func(context.Context, string, int) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreVacuumAbandonedReferencesFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreVacuumAbandonedReferencesFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, int) (int, error) {
		return r0, r1
	})
}

func (f *StoreVacuumAbandonedReferencesFunc) nextHook() func(context.Context, string, int) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreVacuumAbandonedReferencesFunc) appendCall(r0 StoreVacuumAbandonedReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreVacuumAbandonedReferencesFuncCall
// objects describing the invocations of this function.
func (f *StoreVacuumAbandonedReferencesFunc) History() []StoreVacuumAbandonedReferencesFuncCall {
	f.mutex.Lock()
	history := make([]StoreVacuumAbandonedReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreVacuumAbandonedReferencesFuncCall is an object that describes an
// invocation of method VacuumAbandonedReferences on an instance of
// MockStore.
type StoreVacuumAbandonedReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreVacuumAbandonedReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreVacuumAbandonedReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreVacuumStaleDefinitionsFunc describes the behavior when the
// VacuumStaleDefinitions method of the parent MockStore instance is
// invoked.
type StoreVacuumStaleDefinitionsFunc struct {
	defaultHook func(context.Context, string) (int, int, error)
	hooks       []func(context.Context, string) (int, int, error)
	history     []StoreVacuumStaleDefinitionsFuncCall
	mutex       sync.Mutex
}

// VacuumStaleDefinitions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) VacuumStaleDefinitions(v0 context.Context, v1 string) (int, int, error) {
	r0, r1, r2 := m.VacuumStaleDefinitionsFunc.nextHook()(v0, v1)
	m.VacuumStaleDefinitionsFunc.appendCall(StoreVacuumStaleDefinitionsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// VacuumStaleDefinitions method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreVacuumStaleDefinitionsFunc) SetDefaultHook(hook func(context.Context, string) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VacuumStaleDefinitions method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreVacuumStaleDefinitionsFunc) PushHook(hook func(context.Context, string) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreVacuumStaleDefinitionsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreVacuumStaleDefinitionsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, string) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreVacuumStaleDefinitionsFunc) nextHook() func(context.Context, string) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreVacuumStaleDefinitionsFunc) appendCall(r0 StoreVacuumStaleDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreVacuumStaleDefinitionsFuncCall objects
// describing the invocations of this function.
func (f *StoreVacuumStaleDefinitionsFunc) History() []StoreVacuumStaleDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]StoreVacuumStaleDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreVacuumStaleDefinitionsFuncCall is an object that describes an
// invocation of method VacuumStaleDefinitions on an instance of MockStore.
type StoreVacuumStaleDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreVacuumStaleDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreVacuumStaleDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreVacuumStaleGraphsFunc describes the behavior when the
// VacuumStaleGraphs method of the parent MockStore instance is invoked.
type StoreVacuumStaleGraphsFunc struct {
	defaultHook func(context.Context, string, int) (int, error)
	hooks       []func(context.Context, string, int) (int, error)
	history     []StoreVacuumStaleGraphsFuncCall
	mutex       sync.Mutex
}

// VacuumStaleGraphs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) VacuumStaleGraphs(v0 context.Context, v1 string, v2 int) (int, error) {
	r0, r1 := m.VacuumStaleGraphsFunc.nextHook()(v0, v1, v2)
	m.VacuumStaleGraphsFunc.appendCall(StoreVacuumStaleGraphsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the VacuumStaleGraphs
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreVacuumStaleGraphsFunc) SetDefaultHook(hook func(context.Context, string, int) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VacuumStaleGraphs method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreVacuumStaleGraphsFunc) PushHook(hook func(context.Context, string, int) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreVacuumStaleGraphsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreVacuumStaleGraphsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, int) (int, error) {
		return r0, r1
	})
}

func (f *StoreVacuumStaleGraphsFunc) nextHook() func(context.Context, string, int) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreVacuumStaleGraphsFunc) appendCall(r0 StoreVacuumStaleGraphsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreVacuumStaleGraphsFuncCall objects
// describing the invocations of this function.
func (f *StoreVacuumStaleGraphsFunc) History() []StoreVacuumStaleGraphsFuncCall {
	f.mutex.Lock()
	history := make([]StoreVacuumStaleGraphsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreVacuumStaleGraphsFuncCall is an object that describes an invocation
// of method VacuumStaleGraphs on an instance of MockStore.
type StoreVacuumStaleGraphsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreVacuumStaleGraphsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreVacuumStaleGraphsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreVacuumStaleInitialPathsFunc describes the behavior when the
// VacuumStaleInitialPaths method of the parent MockStore instance is
// invoked.
type StoreVacuumStaleInitialPathsFunc struct {
	defaultHook func(context.Context, string) (int, int, error)
	hooks       []func(context.Context, string) (int, int, error)
	history     []StoreVacuumStaleInitialPathsFuncCall
	mutex       sync.Mutex
}

// VacuumStaleInitialPaths delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) VacuumStaleInitialPaths(v0 context.Context, v1 string) (int, int, error) {
	r0, r1, r2 := m.VacuumStaleInitialPathsFunc.nextHook()(v0, v1)
	m.VacuumStaleInitialPathsFunc.appendCall(StoreVacuumStaleInitialPathsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// VacuumStaleInitialPaths method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreVacuumStaleInitialPathsFunc) SetDefaultHook(hook func(context.Context, string) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VacuumStaleInitialPaths method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreVacuumStaleInitialPathsFunc) PushHook(hook func(context.Context, string) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreVacuumStaleInitialPathsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreVacuumStaleInitialPathsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, string) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreVacuumStaleInitialPathsFunc) nextHook() func(context.Context, string) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreVacuumStaleInitialPathsFunc) appendCall(r0 StoreVacuumStaleInitialPathsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreVacuumStaleInitialPathsFuncCall
// objects describing the invocations of this function.
func (f *StoreVacuumStaleInitialPathsFunc) History() []StoreVacuumStaleInitialPathsFuncCall {
	f.mutex.Lock()
	history := make([]StoreVacuumStaleInitialPathsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreVacuumStaleInitialPathsFuncCall is an object that describes an
// invocation of method VacuumStaleInitialPaths on an instance of MockStore.
type StoreVacuumStaleInitialPathsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreVacuumStaleInitialPathsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreVacuumStaleInitialPathsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreVacuumStaleRanksFunc describes the behavior when the
// VacuumStaleRanks method of the parent MockStore instance is invoked.
type StoreVacuumStaleRanksFunc struct {
	defaultHook func(context.Context, string) (int, int, error)
	hooks       []func(context.Context, string) (int, int, error)
	history     []StoreVacuumStaleRanksFuncCall
	mutex       sync.Mutex
}

// VacuumStaleRanks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) VacuumStaleRanks(v0 context.Context, v1 string) (int, int, error) {
	r0, r1, r2 := m.VacuumStaleRanksFunc.nextHook()(v0, v1)
	m.VacuumStaleRanksFunc.appendCall(StoreVacuumStaleRanksFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the VacuumStaleRanks
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreVacuumStaleRanksFunc) SetDefaultHook(hook func(context.Context, string) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VacuumStaleRanks method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreVacuumStaleRanksFunc) PushHook(hook func(context.Context, string) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreVacuumStaleRanksFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreVacuumStaleRanksFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, string) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreVacuumStaleRanksFunc) nextHook() func(context.Context, string) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreVacuumStaleRanksFunc) appendCall(r0 StoreVacuumStaleRanksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreVacuumStaleRanksFuncCall objects
// describing the invocations of this function.
func (f *StoreVacuumStaleRanksFunc) History() []StoreVacuumStaleRanksFuncCall {
	f.mutex.Lock()
	history := make([]StoreVacuumStaleRanksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreVacuumStaleRanksFuncCall is an object that describes an invocation
// of method VacuumStaleRanks on an instance of MockStore.
type StoreVacuumStaleRanksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreVacuumStaleRanksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreVacuumStaleRanksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreVacuumStaleReferencesFunc describes the behavior when the
// VacuumStaleReferences method of the parent MockStore instance is invoked.
type StoreVacuumStaleReferencesFunc struct {
	defaultHook func(context.Context, string) (int, int, error)
	hooks       []func(context.Context, string) (int, int, error)
	history     []StoreVacuumStaleReferencesFuncCall
	mutex       sync.Mutex
}

// VacuumStaleReferences delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) VacuumStaleReferences(v0 context.Context, v1 string) (int, int, error) {
	r0, r1, r2 := m.VacuumStaleReferencesFunc.nextHook()(v0, v1)
	m.VacuumStaleReferencesFunc.appendCall(StoreVacuumStaleReferencesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// VacuumStaleReferences method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreVacuumStaleReferencesFunc) SetDefaultHook(hook func(context.Context, string) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VacuumStaleReferences method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreVacuumStaleReferencesFunc) PushHook(hook func(context.Context, string) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreVacuumStaleReferencesFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreVacuumStaleReferencesFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, string) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreVacuumStaleReferencesFunc) nextHook() func(context.Context, string) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreVacuumStaleReferencesFunc) appendCall(r0 StoreVacuumStaleReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreVacuumStaleReferencesFuncCall objects
// describing the invocations of this function.
func (f *StoreVacuumStaleReferencesFunc) History() []StoreVacuumStaleReferencesFuncCall {
	f.mutex.Lock()
	history := make([]StoreVacuumStaleReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreVacuumStaleReferencesFuncCall is an object that describes an
// invocation of method VacuumStaleReferences on an instance of MockStore.
type StoreVacuumStaleReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreVacuumStaleReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreVacuumStaleReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// MockSiteConfigQuerier is a mock implementation of the SiteConfigQuerier
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/conf/conftypes) used for unit
// testing.
type MockSiteConfigQuerier struct {
	// SiteConfigFunc is an instance of a mock function object controlling
	// the behavior of the method SiteConfig.
	SiteConfigFunc *SiteConfigQuerierSiteConfigFunc
}

// NewMockSiteConfigQuerier creates a new mock of the SiteConfigQuerier
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSiteConfigQuerier() *MockSiteConfigQuerier {
	return &MockSiteConfigQuerier{
		SiteConfigFunc: &SiteConfigQuerierSiteConfigFunc{
			defaultHook: func() (r0 schema.SiteConfiguration) {
				return
			},
		},
	}
}

// NewStrictMockSiteConfigQuerier creates a new mock of the
// SiteConfigQuerier interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSiteConfigQuerier() *MockSiteConfigQuerier {
	return &MockSiteConfigQuerier{
		SiteConfigFunc: &SiteConfigQuerierSiteConfigFunc{
			defaultHook: func() schema.SiteConfiguration {
				panic("unexpected invocation of MockSiteConfigQuerier.SiteConfig")
			},
		},
	}
}

// NewMockSiteConfigQuerierFrom creates a new mock of the
// MockSiteConfigQuerier interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSiteConfigQuerierFrom(i conftypes.SiteConfigQuerier) *MockSiteConfigQuerier {
	return &MockSiteConfigQuerier{
		SiteConfigFunc: &SiteConfigQuerierSiteConfigFunc{
			defaultHook: i.SiteConfig,
		},
	}
}

// SiteConfigQuerierSiteConfigFunc describes the behavior when the
// SiteConfig method of the parent MockSiteConfigQuerier instance is
// invoked.
type SiteConfigQuerierSiteConfigFunc struct {
	defaultHook func() schema.SiteConfiguration
	hooks       []func() schema.SiteConfiguration
	history     []SiteConfigQuerierSiteConfigFuncCall
	mutex       sync.Mutex
}

// SiteConfig delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSiteConfigQuerier) SiteConfig() schema.SiteConfiguration {
	r0 := m.SiteConfigFunc.nextHook()()
	m.SiteConfigFunc.appendCall(SiteConfigQuerierSiteConfigFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SiteConfig method of
// the parent MockSiteConfigQuerier instance is invoked and the hook queue
// is empty.
func (f *SiteConfigQuerierSiteConfigFunc) SetDefaultHook(hook func() schema.SiteConfiguration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteConfig method of the parent MockSiteConfigQuerier instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SiteConfigQuerierSiteConfigFunc) PushHook(hook func() schema.SiteConfiguration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SiteConfigQuerierSiteConfigFunc) SetDefaultReturn(r0 schema.SiteConfiguration) {
	f.SetDefaultHook(func() schema.SiteConfiguration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SiteConfigQuerierSiteConfigFunc) PushReturn(r0 schema.SiteConfiguration) {
	f.PushHook(func() schema.SiteConfiguration {
		return r0
	})
}

func (f *SiteConfigQuerierSiteConfigFunc) nextHook() func() schema.SiteConfiguration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SiteConfigQuerierSiteConfigFunc) appendCall(r0 SiteConfigQuerierSiteConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SiteConfigQuerierSiteConfigFuncCall objects
// describing the invocations of this function.
func (f *SiteConfigQuerierSiteConfigFunc) History() []SiteConfigQuerierSiteConfigFuncCall {
	f.mutex.Lock()
	history := make([]SiteConfigQuerierSiteConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SiteConfigQuerierSiteConfigFuncCall is an object that describes an
// invocation of method SiteConfig on an instance of MockSiteConfigQuerier.
type SiteConfigQuerierSiteConfigFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 schema.SiteConfiguration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SiteConfigQuerierSiteConfigFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SiteConfigQuerierSiteConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
