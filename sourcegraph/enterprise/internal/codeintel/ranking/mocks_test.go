// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package ranking

import (
	"context"
	"io"
	"sync"
	"time"

	regexp "github.com/grafana/regexp"
	store "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/ranking/internal/store"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	authz "github.com/sourcegraph/sourcegraph/internal/authz"
	conftypes "github.com/sourcegraph/sourcegraph/internal/conf/conftypes"
	gitserver "github.com/sourcegraph/sourcegraph/internal/gitserver"
	search "github.com/sourcegraph/sourcegraph/internal/search"
	result "github.com/sourcegraph/sourcegraph/internal/search/result"
	schema "github.com/sourcegraph/sourcegraph/schema"
)

// MockStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/ranking/internal/store)
// used for unit testing.
type MockStore struct {
	// BulkSetDocumentRanksFunc is an instance of a mock function object
	// controlling the behavior of the method BulkSetDocumentRanks.
	BulkSetDocumentRanksFunc *StoreBulkSetDocumentRanksFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *StoreDoneFunc
	// ExportRankPayloadForFunc is an instance of a mock function object
	// controlling the behavior of the method ExportRankPayloadFor.
	ExportRankPayloadForFunc *StoreExportRankPayloadForFunc
	// GetDocumentRanksFunc is an instance of a mock function object
	// controlling the behavior of the method GetDocumentRanks.
	GetDocumentRanksFunc *StoreGetDocumentRanksFunc
	// GetReposFunc is an instance of a mock function object controlling the
	// behavior of the method GetRepos.
	GetReposFunc *StoreGetReposFunc
	// GetStarRankFunc is an instance of a mock function object controlling
	// the behavior of the method GetStarRank.
	GetStarRankFunc *StoreGetStarRankFunc
	// HasInputFilenameFunc is an instance of a mock function object
	// controlling the behavior of the method HasInputFilename.
	HasInputFilenameFunc *StoreHasInputFilenameFunc
	// LastUpdatedAtFunc is an instance of a mock function object
	// controlling the behavior of the method LastUpdatedAt.
	LastUpdatedAtFunc *StoreLastUpdatedAtFunc
	// MergeDocumentRanksFunc is an instance of a mock function object
	// controlling the behavior of the method MergeDocumentRanks.
	MergeDocumentRanksFunc *StoreMergeDocumentRanksFunc
	// SetDocumentRanksFunc is an instance of a mock function object
	// controlling the behavior of the method SetDocumentRanks.
	SetDocumentRanksFunc *StoreSetDocumentRanksFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *StoreTransactFunc
	// UpdatedAfterFunc is an instance of a mock function object controlling
	// the behavior of the method UpdatedAfter.
	UpdatedAfterFunc *StoreUpdatedAfterFunc
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore() *MockStore {
	return &MockStore{
		BulkSetDocumentRanksFunc: &StoreBulkSetDocumentRanksFunc{
			defaultHook: func(context.Context, string, string, float64, map[api.RepoName]map[string]float64) (r0 error) {
				return
			},
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		ExportRankPayloadForFunc: &StoreExportRankPayloadForFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 time.Time, r1 []byte, r2 error) {
				return
			},
		},
		GetDocumentRanksFunc: &StoreGetDocumentRanksFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 map[string][2]float64, r1 bool, r2 error) {
				return
			},
		},
		GetReposFunc: &StoreGetReposFunc{
			defaultHook: func(context.Context) (r0 []api.RepoName, r1 error) {
				return
			},
		},
		GetStarRankFunc: &StoreGetStarRankFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 float64, r1 error) {
				return
			},
		},
		HasInputFilenameFunc: &StoreHasInputFilenameFunc{
			defaultHook: func(context.Context, string, []string) (r0 []string, r1 error) {
				return
			},
		},
		LastUpdatedAtFunc: &StoreLastUpdatedAtFunc{
			defaultHook: func(context.Context, []api.RepoID) (r0 map[api.RepoID]time.Time, r1 error) {
				return
			},
		},
		MergeDocumentRanksFunc: &StoreMergeDocumentRanksFunc{
			defaultHook: func(context.Context, string, int) (r0 int, r1 int, r2 error) {
				return
			},
		},
		SetDocumentRanksFunc: &StoreSetDocumentRanksFunc{
			defaultHook: func(context.Context, api.RepoName, float64, map[string]float64) (r0 error) {
				return
			},
		},
		TransactFunc: &StoreTransactFunc{
			defaultHook: func(context.Context) (r0 store.Store, r1 error) {
				return
			},
		},
		UpdatedAfterFunc: &StoreUpdatedAfterFunc{
			defaultHook: func(context.Context, time.Time) (r0 []api.RepoName, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockStore creates a new mock of the Store interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockStore() *MockStore {
	return &MockStore{
		BulkSetDocumentRanksFunc: &StoreBulkSetDocumentRanksFunc{
			defaultHook: func(context.Context, string, string, float64, map[api.RepoName]map[string]float64) error {
				panic("unexpected invocation of MockStore.BulkSetDocumentRanks")
			},
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockStore.Done")
			},
		},
		ExportRankPayloadForFunc: &StoreExportRankPayloadForFunc{
			defaultHook: func(context.Context, api.RepoName) (time.Time, []byte, error) {
				panic("unexpected invocation of MockStore.ExportRankPayloadFor")
			},
		},
		GetDocumentRanksFunc: &StoreGetDocumentRanksFunc{
			defaultHook: func(context.Context, api.RepoName) (map[string][2]float64, bool, error) {
				panic("unexpected invocation of MockStore.GetDocumentRanks")
			},
		},
		GetReposFunc: &StoreGetReposFunc{
			defaultHook: func(context.Context) ([]api.RepoName, error) {
				panic("unexpected invocation of MockStore.GetRepos")
			},
		},
		GetStarRankFunc: &StoreGetStarRankFunc{
			defaultHook: func(context.Context, api.RepoName) (float64, error) {
				panic("unexpected invocation of MockStore.GetStarRank")
			},
		},
		HasInputFilenameFunc: &StoreHasInputFilenameFunc{
			defaultHook: func(context.Context, string, []string) ([]string, error) {
				panic("unexpected invocation of MockStore.HasInputFilename")
			},
		},
		LastUpdatedAtFunc: &StoreLastUpdatedAtFunc{
			defaultHook: func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error) {
				panic("unexpected invocation of MockStore.LastUpdatedAt")
			},
		},
		MergeDocumentRanksFunc: &StoreMergeDocumentRanksFunc{
			defaultHook: func(context.Context, string, int) (int, int, error) {
				panic("unexpected invocation of MockStore.MergeDocumentRanks")
			},
		},
		SetDocumentRanksFunc: &StoreSetDocumentRanksFunc{
			defaultHook: func(context.Context, api.RepoName, float64, map[string]float64) error {
				panic("unexpected invocation of MockStore.SetDocumentRanks")
			},
		},
		TransactFunc: &StoreTransactFunc{
			defaultHook: func(context.Context) (store.Store, error) {
				panic("unexpected invocation of MockStore.Transact")
			},
		},
		UpdatedAfterFunc: &StoreUpdatedAfterFunc{
			defaultHook: func(context.Context, time.Time) ([]api.RepoName, error) {
				panic("unexpected invocation of MockStore.UpdatedAfter")
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom(i store.Store) *MockStore {
	return &MockStore{
		BulkSetDocumentRanksFunc: &StoreBulkSetDocumentRanksFunc{
			defaultHook: i.BulkSetDocumentRanks,
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: i.Done,
		},
		ExportRankPayloadForFunc: &StoreExportRankPayloadForFunc{
			defaultHook: i.ExportRankPayloadFor,
		},
		GetDocumentRanksFunc: &StoreGetDocumentRanksFunc{
			defaultHook: i.GetDocumentRanks,
		},
		GetReposFunc: &StoreGetReposFunc{
			defaultHook: i.GetRepos,
		},
		GetStarRankFunc: &StoreGetStarRankFunc{
			defaultHook: i.GetStarRank,
		},
		HasInputFilenameFunc: &StoreHasInputFilenameFunc{
			defaultHook: i.HasInputFilename,
		},
		LastUpdatedAtFunc: &StoreLastUpdatedAtFunc{
			defaultHook: i.LastUpdatedAt,
		},
		MergeDocumentRanksFunc: &StoreMergeDocumentRanksFunc{
			defaultHook: i.MergeDocumentRanks,
		},
		SetDocumentRanksFunc: &StoreSetDocumentRanksFunc{
			defaultHook: i.SetDocumentRanks,
		},
		TransactFunc: &StoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdatedAfterFunc: &StoreUpdatedAfterFunc{
			defaultHook: i.UpdatedAfter,
		},
	}
}

// StoreBulkSetDocumentRanksFunc describes the behavior when the
// BulkSetDocumentRanks method of the parent MockStore instance is invoked.
type StoreBulkSetDocumentRanksFunc struct {
	defaultHook func(context.Context, string, string, float64, map[api.RepoName]map[string]float64) error
	hooks       []func(context.Context, string, string, float64, map[api.RepoName]map[string]float64) error
	history     []StoreBulkSetDocumentRanksFuncCall
	mutex       sync.Mutex
}

// BulkSetDocumentRanks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) BulkSetDocumentRanks(v0 context.Context, v1 string, v2 string, v3 float64, v4 map[api.RepoName]map[string]float64) error {
	r0 := m.BulkSetDocumentRanksFunc.nextHook()(v0, v1, v2, v3, v4)
	m.BulkSetDocumentRanksFunc.appendCall(StoreBulkSetDocumentRanksFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BulkSetDocumentRanks
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreBulkSetDocumentRanksFunc) SetDefaultHook(hook func(context.Context, string, string, float64, map[api.RepoName]map[string]float64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkSetDocumentRanks method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreBulkSetDocumentRanksFunc) PushHook(hook func(context.Context, string, string, float64, map[api.RepoName]map[string]float64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreBulkSetDocumentRanksFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, string, float64, map[api.RepoName]map[string]float64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreBulkSetDocumentRanksFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, string, float64, map[api.RepoName]map[string]float64) error {
		return r0
	})
}

func (f *StoreBulkSetDocumentRanksFunc) nextHook() func(context.Context, string, string, float64, map[api.RepoName]map[string]float64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreBulkSetDocumentRanksFunc) appendCall(r0 StoreBulkSetDocumentRanksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreBulkSetDocumentRanksFuncCall objects
// describing the invocations of this function.
func (f *StoreBulkSetDocumentRanksFunc) History() []StoreBulkSetDocumentRanksFuncCall {
	f.mutex.Lock()
	history := make([]StoreBulkSetDocumentRanksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreBulkSetDocumentRanksFuncCall is an object that describes an
// invocation of method BulkSetDocumentRanks on an instance of MockStore.
type StoreBulkSetDocumentRanksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 float64
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 map[api.RepoName]map[string]float64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreBulkSetDocumentRanksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreBulkSetDocumentRanksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreDoneFunc describes the behavior when the Done method of the parent
// MockStore instance is invoked.
type StoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []StoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(StoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *StoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDoneFunc) appendCall(r0 StoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDoneFuncCall objects describing the
// invocations of this function.
func (f *StoreDoneFunc) History() []StoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]StoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockStore.
type StoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreExportRankPayloadForFunc describes the behavior when the
// ExportRankPayloadFor method of the parent MockStore instance is invoked.
type StoreExportRankPayloadForFunc struct {
	defaultHook func(context.Context, api.RepoName) (time.Time, []byte, error)
	hooks       []func(context.Context, api.RepoName) (time.Time, []byte, error)
	history     []StoreExportRankPayloadForFuncCall
	mutex       sync.Mutex
}

// ExportRankPayloadFor delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ExportRankPayloadFor(v0 context.Context, v1 api.RepoName) (time.Time, []byte, error) {
	r0, r1, r2 := m.ExportRankPayloadForFunc.nextHook()(v0, v1)
	m.ExportRankPayloadForFunc.appendCall(StoreExportRankPayloadForFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ExportRankPayloadFor
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreExportRankPayloadForFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (time.Time, []byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExportRankPayloadFor method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreExportRankPayloadForFunc) PushHook(hook func(context.Context, api.RepoName) (time.Time, []byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreExportRankPayloadForFunc) SetDefaultReturn(r0 time.Time, r1 []byte, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (time.Time, []byte, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreExportRankPayloadForFunc) PushReturn(r0 time.Time, r1 []byte, r2 error) {
	f.PushHook(func(context.Context, api.RepoName) (time.Time, []byte, error) {
		return r0, r1, r2
	})
}

func (f *StoreExportRankPayloadForFunc) nextHook() func(context.Context, api.RepoName) (time.Time, []byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreExportRankPayloadForFunc) appendCall(r0 StoreExportRankPayloadForFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreExportRankPayloadForFuncCall objects
// describing the invocations of this function.
func (f *StoreExportRankPayloadForFunc) History() []StoreExportRankPayloadForFuncCall {
	f.mutex.Lock()
	history := make([]StoreExportRankPayloadForFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreExportRankPayloadForFuncCall is an object that describes an
// invocation of method ExportRankPayloadFor on an instance of MockStore.
type StoreExportRankPayloadForFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []byte
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreExportRankPayloadForFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreExportRankPayloadForFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetDocumentRanksFunc describes the behavior when the
// GetDocumentRanks method of the parent MockStore instance is invoked.
type StoreGetDocumentRanksFunc struct {
	defaultHook func(context.Context, api.RepoName) (map[string][2]float64, bool, error)
	hooks       []func(context.Context, api.RepoName) (map[string][2]float64, bool, error)
	history     []StoreGetDocumentRanksFuncCall
	mutex       sync.Mutex
}

// GetDocumentRanks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) GetDocumentRanks(v0 context.Context, v1 api.RepoName) (map[string][2]float64, bool, error) {
	r0, r1, r2 := m.GetDocumentRanksFunc.nextHook()(v0, v1)
	m.GetDocumentRanksFunc.appendCall(StoreGetDocumentRanksFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDocumentRanks
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreGetDocumentRanksFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (map[string][2]float64, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDocumentRanks method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetDocumentRanksFunc) PushHook(hook func(context.Context, api.RepoName) (map[string][2]float64, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetDocumentRanksFunc) SetDefaultReturn(r0 map[string][2]float64, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (map[string][2]float64, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetDocumentRanksFunc) PushReturn(r0 map[string][2]float64, r1 bool, r2 error) {
	f.PushHook(func(context.Context, api.RepoName) (map[string][2]float64, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetDocumentRanksFunc) nextHook() func(context.Context, api.RepoName) (map[string][2]float64, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetDocumentRanksFunc) appendCall(r0 StoreGetDocumentRanksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetDocumentRanksFuncCall objects
// describing the invocations of this function.
func (f *StoreGetDocumentRanksFunc) History() []StoreGetDocumentRanksFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetDocumentRanksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetDocumentRanksFuncCall is an object that describes an invocation
// of method GetDocumentRanks on an instance of MockStore.
type StoreGetDocumentRanksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][2]float64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetDocumentRanksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetDocumentRanksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetReposFunc describes the behavior when the GetRepos method of the
// parent MockStore instance is invoked.
type StoreGetReposFunc struct {
	defaultHook func(context.Context) ([]api.RepoName, error)
	hooks       []func(context.Context) ([]api.RepoName, error)
	history     []StoreGetReposFuncCall
	mutex       sync.Mutex
}

// GetRepos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) GetRepos(v0 context.Context) ([]api.RepoName, error) {
	r0, r1 := m.GetReposFunc.nextHook()(v0)
	m.GetReposFunc.appendCall(StoreGetReposFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRepos method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetReposFunc) SetDefaultHook(hook func(context.Context) ([]api.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRepos method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreGetReposFunc) PushHook(hook func(context.Context) ([]api.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetReposFunc) SetDefaultReturn(r0 []api.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]api.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetReposFunc) PushReturn(r0 []api.RepoName, r1 error) {
	f.PushHook(func(context.Context) ([]api.RepoName, error) {
		return r0, r1
	})
}

func (f *StoreGetReposFunc) nextHook() func(context.Context) ([]api.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetReposFunc) appendCall(r0 StoreGetReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetReposFuncCall objects describing
// the invocations of this function.
func (f *StoreGetReposFunc) History() []StoreGetReposFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetReposFuncCall is an object that describes an invocation of method
// GetRepos on an instance of MockStore.
type StoreGetReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetStarRankFunc describes the behavior when the GetStarRank method
// of the parent MockStore instance is invoked.
type StoreGetStarRankFunc struct {
	defaultHook func(context.Context, api.RepoName) (float64, error)
	hooks       []func(context.Context, api.RepoName) (float64, error)
	history     []StoreGetStarRankFuncCall
	mutex       sync.Mutex
}

// GetStarRank delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetStarRank(v0 context.Context, v1 api.RepoName) (float64, error) {
	r0, r1 := m.GetStarRankFunc.nextHook()(v0, v1)
	m.GetStarRankFunc.appendCall(StoreGetStarRankFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStarRank method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetStarRankFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (float64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStarRank method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetStarRankFunc) PushHook(hook func(context.Context, api.RepoName) (float64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetStarRankFunc) SetDefaultReturn(r0 float64, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (float64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetStarRankFunc) PushReturn(r0 float64, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (float64, error) {
		return r0, r1
	})
}

func (f *StoreGetStarRankFunc) nextHook() func(context.Context, api.RepoName) (float64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetStarRankFunc) appendCall(r0 StoreGetStarRankFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetStarRankFuncCall objects describing
// the invocations of this function.
func (f *StoreGetStarRankFunc) History() []StoreGetStarRankFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetStarRankFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetStarRankFuncCall is an object that describes an invocation of
// method GetStarRank on an instance of MockStore.
type StoreGetStarRankFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 float64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetStarRankFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetStarRankFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreHasInputFilenameFunc describes the behavior when the
// HasInputFilename method of the parent MockStore instance is invoked.
type StoreHasInputFilenameFunc struct {
	defaultHook func(context.Context, string, []string) ([]string, error)
	hooks       []func(context.Context, string, []string) ([]string, error)
	history     []StoreHasInputFilenameFuncCall
	mutex       sync.Mutex
}

// HasInputFilename delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) HasInputFilename(v0 context.Context, v1 string, v2 []string) ([]string, error) {
	r0, r1 := m.HasInputFilenameFunc.nextHook()(v0, v1, v2)
	m.HasInputFilenameFunc.appendCall(StoreHasInputFilenameFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasInputFilename
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreHasInputFilenameFunc) SetDefaultHook(hook func(context.Context, string, []string) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasInputFilename method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreHasInputFilenameFunc) PushHook(hook func(context.Context, string, []string) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreHasInputFilenameFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, string, []string) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreHasInputFilenameFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, string, []string) ([]string, error) {
		return r0, r1
	})
}

func (f *StoreHasInputFilenameFunc) nextHook() func(context.Context, string, []string) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreHasInputFilenameFunc) appendCall(r0 StoreHasInputFilenameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreHasInputFilenameFuncCall objects
// describing the invocations of this function.
func (f *StoreHasInputFilenameFunc) History() []StoreHasInputFilenameFuncCall {
	f.mutex.Lock()
	history := make([]StoreHasInputFilenameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreHasInputFilenameFuncCall is an object that describes an invocation
// of method HasInputFilename on an instance of MockStore.
type StoreHasInputFilenameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreHasInputFilenameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreHasInputFilenameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreLastUpdatedAtFunc describes the behavior when the LastUpdatedAt
// method of the parent MockStore instance is invoked.
type StoreLastUpdatedAtFunc struct {
	defaultHook func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error)
	hooks       []func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error)
	history     []StoreLastUpdatedAtFuncCall
	mutex       sync.Mutex
}

// LastUpdatedAt delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) LastUpdatedAt(v0 context.Context, v1 []api.RepoID) (map[api.RepoID]time.Time, error) {
	r0, r1 := m.LastUpdatedAtFunc.nextHook()(v0, v1)
	m.LastUpdatedAtFunc.appendCall(StoreLastUpdatedAtFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LastUpdatedAt method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreLastUpdatedAtFunc) SetDefaultHook(hook func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LastUpdatedAt method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreLastUpdatedAtFunc) PushHook(hook func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreLastUpdatedAtFunc) SetDefaultReturn(r0 map[api.RepoID]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreLastUpdatedAtFunc) PushReturn(r0 map[api.RepoID]time.Time, r1 error) {
	f.PushHook(func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error) {
		return r0, r1
	})
}

func (f *StoreLastUpdatedAtFunc) nextHook() func(context.Context, []api.RepoID) (map[api.RepoID]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreLastUpdatedAtFunc) appendCall(r0 StoreLastUpdatedAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreLastUpdatedAtFuncCall objects
// describing the invocations of this function.
func (f *StoreLastUpdatedAtFunc) History() []StoreLastUpdatedAtFuncCall {
	f.mutex.Lock()
	history := make([]StoreLastUpdatedAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreLastUpdatedAtFuncCall is an object that describes an invocation of
// method LastUpdatedAt on an instance of MockStore.
type StoreLastUpdatedAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreLastUpdatedAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreLastUpdatedAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreMergeDocumentRanksFunc describes the behavior when the
// MergeDocumentRanks method of the parent MockStore instance is invoked.
type StoreMergeDocumentRanksFunc struct {
	defaultHook func(context.Context, string, int) (int, int, error)
	hooks       []func(context.Context, string, int) (int, int, error)
	history     []StoreMergeDocumentRanksFuncCall
	mutex       sync.Mutex
}

// MergeDocumentRanks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) MergeDocumentRanks(v0 context.Context, v1 string, v2 int) (int, int, error) {
	r0, r1, r2 := m.MergeDocumentRanksFunc.nextHook()(v0, v1, v2)
	m.MergeDocumentRanksFunc.appendCall(StoreMergeDocumentRanksFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the MergeDocumentRanks
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreMergeDocumentRanksFunc) SetDefaultHook(hook func(context.Context, string, int) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeDocumentRanks method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreMergeDocumentRanksFunc) PushHook(hook func(context.Context, string, int) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMergeDocumentRanksFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string, int) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMergeDocumentRanksFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, string, int) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreMergeDocumentRanksFunc) nextHook() func(context.Context, string, int) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMergeDocumentRanksFunc) appendCall(r0 StoreMergeDocumentRanksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMergeDocumentRanksFuncCall objects
// describing the invocations of this function.
func (f *StoreMergeDocumentRanksFunc) History() []StoreMergeDocumentRanksFuncCall {
	f.mutex.Lock()
	history := make([]StoreMergeDocumentRanksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMergeDocumentRanksFuncCall is an object that describes an invocation
// of method MergeDocumentRanks on an instance of MockStore.
type StoreMergeDocumentRanksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMergeDocumentRanksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMergeDocumentRanksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreSetDocumentRanksFunc describes the behavior when the
// SetDocumentRanks method of the parent MockStore instance is invoked.
type StoreSetDocumentRanksFunc struct {
	defaultHook func(context.Context, api.RepoName, float64, map[string]float64) error
	hooks       []func(context.Context, api.RepoName, float64, map[string]float64) error
	history     []StoreSetDocumentRanksFuncCall
	mutex       sync.Mutex
}

// SetDocumentRanks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) SetDocumentRanks(v0 context.Context, v1 api.RepoName, v2 float64, v3 map[string]float64) error {
	r0 := m.SetDocumentRanksFunc.nextHook()(v0, v1, v2, v3)
	m.SetDocumentRanksFunc.appendCall(StoreSetDocumentRanksFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetDocumentRanks
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreSetDocumentRanksFunc) SetDefaultHook(hook func(context.Context, api.RepoName, float64, map[string]float64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetDocumentRanks method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreSetDocumentRanksFunc) PushHook(hook func(context.Context, api.RepoName, float64, map[string]float64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSetDocumentRanksFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, float64, map[string]float64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSetDocumentRanksFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, float64, map[string]float64) error {
		return r0
	})
}

func (f *StoreSetDocumentRanksFunc) nextHook() func(context.Context, api.RepoName, float64, map[string]float64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSetDocumentRanksFunc) appendCall(r0 StoreSetDocumentRanksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreSetDocumentRanksFuncCall objects
// describing the invocations of this function.
func (f *StoreSetDocumentRanksFunc) History() []StoreSetDocumentRanksFuncCall {
	f.mutex.Lock()
	history := make([]StoreSetDocumentRanksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSetDocumentRanksFuncCall is an object that describes an invocation
// of method SetDocumentRanks on an instance of MockStore.
type StoreSetDocumentRanksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 float64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 map[string]float64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSetDocumentRanksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSetDocumentRanksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreTransactFunc describes the behavior when the Transact method of the
// parent MockStore instance is invoked.
type StoreTransactFunc struct {
	defaultHook func(context.Context) (store.Store, error)
	hooks       []func(context.Context) (store.Store, error)
	history     []StoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Transact(v0 context.Context) (store.Store, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(StoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreTransactFunc) SetDefaultHook(hook func(context.Context) (store.Store, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreTransactFunc) PushHook(hook func(context.Context) (store.Store, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreTransactFunc) SetDefaultReturn(r0 store.Store, r1 error) {
	f.SetDefaultHook(func(context.Context) (store.Store, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreTransactFunc) PushReturn(r0 store.Store, r1 error) {
	f.PushHook(func(context.Context) (store.Store, error) {
		return r0, r1
	})
}

func (f *StoreTransactFunc) nextHook() func(context.Context) (store.Store, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreTransactFunc) appendCall(r0 StoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreTransactFuncCall objects describing
// the invocations of this function.
func (f *StoreTransactFunc) History() []StoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]StoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreTransactFuncCall is an object that describes an invocation of method
// Transact on an instance of MockStore.
type StoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 store.Store
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreUpdatedAfterFunc describes the behavior when the UpdatedAfter method
// of the parent MockStore instance is invoked.
type StoreUpdatedAfterFunc struct {
	defaultHook func(context.Context, time.Time) ([]api.RepoName, error)
	hooks       []func(context.Context, time.Time) ([]api.RepoName, error)
	history     []StoreUpdatedAfterFuncCall
	mutex       sync.Mutex
}

// UpdatedAfter delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) UpdatedAfter(v0 context.Context, v1 time.Time) ([]api.RepoName, error) {
	r0, r1 := m.UpdatedAfterFunc.nextHook()(v0, v1)
	m.UpdatedAfterFunc.appendCall(StoreUpdatedAfterFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdatedAfter method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreUpdatedAfterFunc) SetDefaultHook(hook func(context.Context, time.Time) ([]api.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatedAfter method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreUpdatedAfterFunc) PushHook(hook func(context.Context, time.Time) ([]api.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdatedAfterFunc) SetDefaultReturn(r0 []api.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time) ([]api.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdatedAfterFunc) PushReturn(r0 []api.RepoName, r1 error) {
	f.PushHook(func(context.Context, time.Time) ([]api.RepoName, error) {
		return r0, r1
	})
}

func (f *StoreUpdatedAfterFunc) nextHook() func(context.Context, time.Time) ([]api.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdatedAfterFunc) appendCall(r0 StoreUpdatedAfterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdatedAfterFuncCall objects
// describing the invocations of this function.
func (f *StoreUpdatedAfterFunc) History() []StoreUpdatedAfterFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdatedAfterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdatedAfterFuncCall is an object that describes an invocation of
// method UpdatedAfter on an instance of MockStore.
type StoreUpdatedAfterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdatedAfterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdatedAfterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGitserverClient is a mock implementation of the GitserverClient
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/ranking)
// used for unit testing.
type MockGitserverClient struct {
	// ArchiveReaderFunc is an instance of a mock function object
	// controlling the behavior of the method ArchiveReader.
	ArchiveReaderFunc *GitserverClientArchiveReaderFunc
	// HeadFromNameFunc is an instance of a mock function object controlling
	// the behavior of the method HeadFromName.
	HeadFromNameFunc *GitserverClientHeadFromNameFunc
	// ListFilesForRepoFunc is an instance of a mock function object
	// controlling the behavior of the method ListFilesForRepo.
	ListFilesForRepoFunc *GitserverClientListFilesForRepoFunc
}

// NewMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		ArchiveReaderFunc: &GitserverClientArchiveReaderFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, gitserver.ArchiveOptions) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		HeadFromNameFunc: &GitserverClientHeadFromNameFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		ListFilesForRepoFunc: &GitserverClientListFilesForRepoFunc{
			defaultHook: func(context.Context, api.RepoName, string, *regexp.Regexp) (r0 []string, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		ArchiveReaderFunc: &GitserverClientArchiveReaderFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
				panic("unexpected invocation of MockGitserverClient.ArchiveReader")
			},
		},
		HeadFromNameFunc: &GitserverClientHeadFromNameFunc{
			defaultHook: func(context.Context, api.RepoName) (string, bool, error) {
				panic("unexpected invocation of MockGitserverClient.HeadFromName")
			},
		},
		ListFilesForRepoFunc: &GitserverClientListFilesForRepoFunc{
			defaultHook: func(context.Context, api.RepoName, string, *regexp.Regexp) ([]string, error) {
				panic("unexpected invocation of MockGitserverClient.ListFilesForRepo")
			},
		},
	}
}

// NewMockGitserverClientFrom creates a new mock of the MockGitserverClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient {
	return &MockGitserverClient{
		ArchiveReaderFunc: &GitserverClientArchiveReaderFunc{
			defaultHook: i.ArchiveReader,
		},
		HeadFromNameFunc: &GitserverClientHeadFromNameFunc{
			defaultHook: i.HeadFromName,
		},
		ListFilesForRepoFunc: &GitserverClientListFilesForRepoFunc{
			defaultHook: i.ListFilesForRepo,
		},
	}
}

// GitserverClientArchiveReaderFunc describes the behavior when the
// ArchiveReader method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientArchiveReaderFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)
	history     []GitserverClientArchiveReaderFuncCall
	mutex       sync.Mutex
}

// ArchiveReader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) ArchiveReader(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 gitserver.ArchiveOptions) (io.ReadCloser, error) {
	r0, r1 := m.ArchiveReaderFunc.nextHook()(v0, v1, v2, v3)
	m.ArchiveReaderFunc.appendCall(GitserverClientArchiveReaderFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ArchiveReader method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientArchiveReaderFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ArchiveReader method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientArchiveReaderFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientArchiveReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientArchiveReaderFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *GitserverClientArchiveReaderFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientArchiveReaderFunc) appendCall(r0 GitserverClientArchiveReaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientArchiveReaderFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientArchiveReaderFunc) History() []GitserverClientArchiveReaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientArchiveReaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientArchiveReaderFuncCall is an object that describes an
// invocation of method ArchiveReader on an instance of MockGitserverClient.
type GitserverClientArchiveReaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 gitserver.ArchiveOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientArchiveReaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientArchiveReaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientHeadFromNameFunc describes the behavior when the
// HeadFromName method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientHeadFromNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (string, bool, error)
	hooks       []func(context.Context, api.RepoName) (string, bool, error)
	history     []GitserverClientHeadFromNameFuncCall
	mutex       sync.Mutex
}

// HeadFromName delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) HeadFromName(v0 context.Context, v1 api.RepoName) (string, bool, error) {
	r0, r1, r2 := m.HeadFromNameFunc.nextHook()(v0, v1)
	m.HeadFromNameFunc.appendCall(GitserverClientHeadFromNameFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the HeadFromName method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientHeadFromNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HeadFromName method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientHeadFromNameFunc) PushHook(hook func(context.Context, api.RepoName) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientHeadFromNameFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientHeadFromNameFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, api.RepoName) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *GitserverClientHeadFromNameFunc) nextHook() func(context.Context, api.RepoName) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientHeadFromNameFunc) appendCall(r0 GitserverClientHeadFromNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientHeadFromNameFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientHeadFromNameFunc) History() []GitserverClientHeadFromNameFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientHeadFromNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientHeadFromNameFuncCall is an object that describes an
// invocation of method HeadFromName on an instance of MockGitserverClient.
type GitserverClientHeadFromNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientHeadFromNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientHeadFromNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GitserverClientListFilesForRepoFunc describes the behavior when the
// ListFilesForRepo method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientListFilesForRepoFunc struct {
	defaultHook func(context.Context, api.RepoName, string, *regexp.Regexp) ([]string, error)
	hooks       []func(context.Context, api.RepoName, string, *regexp.Regexp) ([]string, error)
	history     []GitserverClientListFilesForRepoFuncCall
	mutex       sync.Mutex
}

// ListFilesForRepo delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) ListFilesForRepo(v0 context.Context, v1 api.RepoName, v2 string, v3 *regexp.Regexp) ([]string, error) {
	r0, r1 := m.ListFilesForRepoFunc.nextHook()(v0, v1, v2, v3)
	m.ListFilesForRepoFunc.appendCall(GitserverClientListFilesForRepoFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListFilesForRepo
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientListFilesForRepoFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, *regexp.Regexp) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListFilesForRepo method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientListFilesForRepoFunc) PushHook(hook func(context.Context, api.RepoName, string, *regexp.Regexp) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientListFilesForRepoFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, *regexp.Regexp) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientListFilesForRepoFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, *regexp.Regexp) ([]string, error) {
		return r0, r1
	})
}

func (f *GitserverClientListFilesForRepoFunc) nextHook() func(context.Context, api.RepoName, string, *regexp.Regexp) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientListFilesForRepoFunc) appendCall(r0 GitserverClientListFilesForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientListFilesForRepoFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientListFilesForRepoFunc) History() []GitserverClientListFilesForRepoFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientListFilesForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientListFilesForRepoFuncCall is an object that describes an
// invocation of method ListFilesForRepo on an instance of
// MockGitserverClient.
type GitserverClientListFilesForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *regexp.Regexp
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientListFilesForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientListFilesForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSymbolsClient is a mock implementation of the SymbolsClient interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/ranking)
// used for unit testing.
type MockSymbolsClient struct {
	// SearchFunc is an instance of a mock function object controlling the
	// behavior of the method Search.
	SearchFunc *SymbolsClientSearchFunc
}

// NewMockSymbolsClient creates a new mock of the SymbolsClient interface.
// All methods return zero values for all results, unless overwritten.
func NewMockSymbolsClient() *MockSymbolsClient {
	return &MockSymbolsClient{
		SearchFunc: &SymbolsClientSearchFunc{
			defaultHook: func(context.Context, search.SymbolsParameters) (r0 []result.Symbol, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockSymbolsClient creates a new mock of the SymbolsClient
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSymbolsClient() *MockSymbolsClient {
	return &MockSymbolsClient{
		SearchFunc: &SymbolsClientSearchFunc{
			defaultHook: func(context.Context, search.SymbolsParameters) ([]result.Symbol, error) {
				panic("unexpected invocation of MockSymbolsClient.Search")
			},
		},
	}
}

// NewMockSymbolsClientFrom creates a new mock of the MockSymbolsClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockSymbolsClientFrom(i SymbolsClient) *MockSymbolsClient {
	return &MockSymbolsClient{
		SearchFunc: &SymbolsClientSearchFunc{
			defaultHook: i.Search,
		},
	}
}

// SymbolsClientSearchFunc describes the behavior when the Search method of
// the parent MockSymbolsClient instance is invoked.
type SymbolsClientSearchFunc struct {
	defaultHook func(context.Context, search.SymbolsParameters) ([]result.Symbol, error)
	hooks       []func(context.Context, search.SymbolsParameters) ([]result.Symbol, error)
	history     []SymbolsClientSearchFuncCall
	mutex       sync.Mutex
}

// Search delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSymbolsClient) Search(v0 context.Context, v1 search.SymbolsParameters) ([]result.Symbol, error) {
	r0, r1 := m.SearchFunc.nextHook()(v0, v1)
	m.SearchFunc.appendCall(SymbolsClientSearchFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Search method of the
// parent MockSymbolsClient instance is invoked and the hook queue is empty.
func (f *SymbolsClientSearchFunc) SetDefaultHook(hook func(context.Context, search.SymbolsParameters) ([]result.Symbol, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Search method of the parent MockSymbolsClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SymbolsClientSearchFunc) PushHook(hook func(context.Context, search.SymbolsParameters) ([]result.Symbol, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SymbolsClientSearchFunc) SetDefaultReturn(r0 []result.Symbol, r1 error) {
	f.SetDefaultHook(func(context.Context, search.SymbolsParameters) ([]result.Symbol, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SymbolsClientSearchFunc) PushReturn(r0 []result.Symbol, r1 error) {
	f.PushHook(func(context.Context, search.SymbolsParameters) ([]result.Symbol, error) {
		return r0, r1
	})
}

func (f *SymbolsClientSearchFunc) nextHook() func(context.Context, search.SymbolsParameters) ([]result.Symbol, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SymbolsClientSearchFunc) appendCall(r0 SymbolsClientSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SymbolsClientSearchFuncCall objects
// describing the invocations of this function.
func (f *SymbolsClientSearchFunc) History() []SymbolsClientSearchFuncCall {
	f.mutex.Lock()
	history := make([]SymbolsClientSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SymbolsClientSearchFuncCall is an object that describes an invocation of
// method Search on an instance of MockSymbolsClient.
type SymbolsClientSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 search.SymbolsParameters
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []result.Symbol
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SymbolsClientSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SymbolsClientSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSiteConfigQuerier is a mock implementation of the SiteConfigQuerier
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/conf/conftypes) used for unit
// testing.
type MockSiteConfigQuerier struct {
	// SiteConfigFunc is an instance of a mock function object controlling
	// the behavior of the method SiteConfig.
	SiteConfigFunc *SiteConfigQuerierSiteConfigFunc
}

// NewMockSiteConfigQuerier creates a new mock of the SiteConfigQuerier
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSiteConfigQuerier() *MockSiteConfigQuerier {
	return &MockSiteConfigQuerier{
		SiteConfigFunc: &SiteConfigQuerierSiteConfigFunc{
			defaultHook: func() (r0 schema.SiteConfiguration) {
				return
			},
		},
	}
}

// NewStrictMockSiteConfigQuerier creates a new mock of the
// SiteConfigQuerier interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSiteConfigQuerier() *MockSiteConfigQuerier {
	return &MockSiteConfigQuerier{
		SiteConfigFunc: &SiteConfigQuerierSiteConfigFunc{
			defaultHook: func() schema.SiteConfiguration {
				panic("unexpected invocation of MockSiteConfigQuerier.SiteConfig")
			},
		},
	}
}

// NewMockSiteConfigQuerierFrom creates a new mock of the
// MockSiteConfigQuerier interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSiteConfigQuerierFrom(i conftypes.SiteConfigQuerier) *MockSiteConfigQuerier {
	return &MockSiteConfigQuerier{
		SiteConfigFunc: &SiteConfigQuerierSiteConfigFunc{
			defaultHook: i.SiteConfig,
		},
	}
}

// SiteConfigQuerierSiteConfigFunc describes the behavior when the
// SiteConfig method of the parent MockSiteConfigQuerier instance is
// invoked.
type SiteConfigQuerierSiteConfigFunc struct {
	defaultHook func() schema.SiteConfiguration
	hooks       []func() schema.SiteConfiguration
	history     []SiteConfigQuerierSiteConfigFuncCall
	mutex       sync.Mutex
}

// SiteConfig delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSiteConfigQuerier) SiteConfig() schema.SiteConfiguration {
	r0 := m.SiteConfigFunc.nextHook()()
	m.SiteConfigFunc.appendCall(SiteConfigQuerierSiteConfigFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SiteConfig method of
// the parent MockSiteConfigQuerier instance is invoked and the hook queue
// is empty.
func (f *SiteConfigQuerierSiteConfigFunc) SetDefaultHook(hook func() schema.SiteConfiguration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteConfig method of the parent MockSiteConfigQuerier instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SiteConfigQuerierSiteConfigFunc) PushHook(hook func() schema.SiteConfiguration) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SiteConfigQuerierSiteConfigFunc) SetDefaultReturn(r0 schema.SiteConfiguration) {
	f.SetDefaultHook(func() schema.SiteConfiguration {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SiteConfigQuerierSiteConfigFunc) PushReturn(r0 schema.SiteConfiguration) {
	f.PushHook(func() schema.SiteConfiguration {
		return r0
	})
}

func (f *SiteConfigQuerierSiteConfigFunc) nextHook() func() schema.SiteConfiguration {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SiteConfigQuerierSiteConfigFunc) appendCall(r0 SiteConfigQuerierSiteConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SiteConfigQuerierSiteConfigFuncCall objects
// describing the invocations of this function.
func (f *SiteConfigQuerierSiteConfigFunc) History() []SiteConfigQuerierSiteConfigFuncCall {
	f.mutex.Lock()
	history := make([]SiteConfigQuerierSiteConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SiteConfigQuerierSiteConfigFuncCall is an object that describes an
// invocation of method SiteConfig on an instance of MockSiteConfigQuerier.
type SiteConfigQuerierSiteConfigFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 schema.SiteConfiguration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SiteConfigQuerierSiteConfigFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SiteConfigQuerierSiteConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
