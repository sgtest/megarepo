// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package uploadstore

import (
	storage "cloud.google.com/go/storage"
	"context"
	"io"
	"sync"
)

// MockGcsAPI is a mock implementation of the gcsAPI interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/upload_store)
// used for unit testing.
type MockGcsAPI struct {
	// BucketFunc is an instance of a mock function object controlling the
	// behavior of the method Bucket.
	BucketFunc *GcsAPIBucketFunc
}

// NewMockGcsAPI creates a new mock of the gcsAPI interface. All methods
// return zero values for all results, unless overwritten.
func NewMockGcsAPI() *MockGcsAPI {
	return &MockGcsAPI{
		BucketFunc: &GcsAPIBucketFunc{
			defaultHook: func(string) gcsBucketHandle {
				return nil
			},
		},
	}
}

// surrogateMockGcsAPI is a copy of the gcsAPI interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/upload_store).
// It is redefined here as it is unexported in the source packge.
type surrogateMockGcsAPI interface {
	Bucket(string) gcsBucketHandle
}

// NewMockGcsAPIFrom creates a new mock of the MockGcsAPI interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockGcsAPIFrom(i surrogateMockGcsAPI) *MockGcsAPI {
	return &MockGcsAPI{
		BucketFunc: &GcsAPIBucketFunc{
			defaultHook: i.Bucket,
		},
	}
}

// GcsAPIBucketFunc describes the behavior when the Bucket method of the
// parent MockGcsAPI instance is invoked.
type GcsAPIBucketFunc struct {
	defaultHook func(string) gcsBucketHandle
	hooks       []func(string) gcsBucketHandle
	history     []GcsAPIBucketFuncCall
	mutex       sync.Mutex
}

// Bucket delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsAPI) Bucket(v0 string) gcsBucketHandle {
	r0 := m.BucketFunc.nextHook()(v0)
	m.BucketFunc.appendCall(GcsAPIBucketFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Bucket method of the
// parent MockGcsAPI instance is invoked and the hook queue is empty.
func (f *GcsAPIBucketFunc) SetDefaultHook(hook func(string) gcsBucketHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Bucket method of the parent MockGcsAPI instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *GcsAPIBucketFunc) PushHook(hook func(string) gcsBucketHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsAPIBucketFunc) SetDefaultReturn(r0 gcsBucketHandle) {
	f.SetDefaultHook(func(string) gcsBucketHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsAPIBucketFunc) PushReturn(r0 gcsBucketHandle) {
	f.PushHook(func(string) gcsBucketHandle {
		return r0
	})
}

func (f *GcsAPIBucketFunc) nextHook() func(string) gcsBucketHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsAPIBucketFunc) appendCall(r0 GcsAPIBucketFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsAPIBucketFuncCall objects describing the
// invocations of this function.
func (f *GcsAPIBucketFunc) History() []GcsAPIBucketFuncCall {
	f.mutex.Lock()
	history := make([]GcsAPIBucketFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsAPIBucketFuncCall is an object that describes an invocation of method
// Bucket on an instance of MockGcsAPI.
type GcsAPIBucketFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gcsBucketHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsAPIBucketFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsAPIBucketFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGcsBucketHandle is a mock implementation of the gcsBucketHandle
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/upload_store)
// used for unit testing.
type MockGcsBucketHandle struct {
	// AttrsFunc is an instance of a mock function object controlling the
	// behavior of the method Attrs.
	AttrsFunc *GcsBucketHandleAttrsFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *GcsBucketHandleCreateFunc
	// ObjectFunc is an instance of a mock function object controlling the
	// behavior of the method Object.
	ObjectFunc *GcsBucketHandleObjectFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *GcsBucketHandleUpdateFunc
}

// NewMockGcsBucketHandle creates a new mock of the gcsBucketHandle
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGcsBucketHandle() *MockGcsBucketHandle {
	return &MockGcsBucketHandle{
		AttrsFunc: &GcsBucketHandleAttrsFunc{
			defaultHook: func(context.Context) (*storage.BucketAttrs, error) {
				return nil, nil
			},
		},
		CreateFunc: &GcsBucketHandleCreateFunc{
			defaultHook: func(context.Context, string, *storage.BucketAttrs) error {
				return nil
			},
		},
		ObjectFunc: &GcsBucketHandleObjectFunc{
			defaultHook: func(string) gcsObjectHandle {
				return nil
			},
		},
		UpdateFunc: &GcsBucketHandleUpdateFunc{
			defaultHook: func(context.Context, storage.BucketAttrsToUpdate) error {
				return nil
			},
		},
	}
}

// surrogateMockGcsBucketHandle is a copy of the gcsBucketHandle interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/upload_store).
// It is redefined here as it is unexported in the source packge.
type surrogateMockGcsBucketHandle interface {
	Attrs(context.Context) (*storage.BucketAttrs, error)
	Create(context.Context, string, *storage.BucketAttrs) error
	Object(string) gcsObjectHandle
	Update(context.Context, storage.BucketAttrsToUpdate) error
}

// NewMockGcsBucketHandleFrom creates a new mock of the MockGcsBucketHandle
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGcsBucketHandleFrom(i surrogateMockGcsBucketHandle) *MockGcsBucketHandle {
	return &MockGcsBucketHandle{
		AttrsFunc: &GcsBucketHandleAttrsFunc{
			defaultHook: i.Attrs,
		},
		CreateFunc: &GcsBucketHandleCreateFunc{
			defaultHook: i.Create,
		},
		ObjectFunc: &GcsBucketHandleObjectFunc{
			defaultHook: i.Object,
		},
		UpdateFunc: &GcsBucketHandleUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// GcsBucketHandleAttrsFunc describes the behavior when the Attrs method of
// the parent MockGcsBucketHandle instance is invoked.
type GcsBucketHandleAttrsFunc struct {
	defaultHook func(context.Context) (*storage.BucketAttrs, error)
	hooks       []func(context.Context) (*storage.BucketAttrs, error)
	history     []GcsBucketHandleAttrsFuncCall
	mutex       sync.Mutex
}

// Attrs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsBucketHandle) Attrs(v0 context.Context) (*storage.BucketAttrs, error) {
	r0, r1 := m.AttrsFunc.nextHook()(v0)
	m.AttrsFunc.appendCall(GcsBucketHandleAttrsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Attrs method of the
// parent MockGcsBucketHandle instance is invoked and the hook queue is
// empty.
func (f *GcsBucketHandleAttrsFunc) SetDefaultHook(hook func(context.Context) (*storage.BucketAttrs, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Attrs method of the parent MockGcsBucketHandle instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsBucketHandleAttrsFunc) PushHook(hook func(context.Context) (*storage.BucketAttrs, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsBucketHandleAttrsFunc) SetDefaultReturn(r0 *storage.BucketAttrs, r1 error) {
	f.SetDefaultHook(func(context.Context) (*storage.BucketAttrs, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsBucketHandleAttrsFunc) PushReturn(r0 *storage.BucketAttrs, r1 error) {
	f.PushHook(func(context.Context) (*storage.BucketAttrs, error) {
		return r0, r1
	})
}

func (f *GcsBucketHandleAttrsFunc) nextHook() func(context.Context) (*storage.BucketAttrs, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsBucketHandleAttrsFunc) appendCall(r0 GcsBucketHandleAttrsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsBucketHandleAttrsFuncCall objects
// describing the invocations of this function.
func (f *GcsBucketHandleAttrsFunc) History() []GcsBucketHandleAttrsFuncCall {
	f.mutex.Lock()
	history := make([]GcsBucketHandleAttrsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsBucketHandleAttrsFuncCall is an object that describes an invocation of
// method Attrs on an instance of MockGcsBucketHandle.
type GcsBucketHandleAttrsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *storage.BucketAttrs
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsBucketHandleAttrsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsBucketHandleAttrsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GcsBucketHandleCreateFunc describes the behavior when the Create method
// of the parent MockGcsBucketHandle instance is invoked.
type GcsBucketHandleCreateFunc struct {
	defaultHook func(context.Context, string, *storage.BucketAttrs) error
	hooks       []func(context.Context, string, *storage.BucketAttrs) error
	history     []GcsBucketHandleCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsBucketHandle) Create(v0 context.Context, v1 string, v2 *storage.BucketAttrs) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(GcsBucketHandleCreateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockGcsBucketHandle instance is invoked and the hook queue is
// empty.
func (f *GcsBucketHandleCreateFunc) SetDefaultHook(hook func(context.Context, string, *storage.BucketAttrs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockGcsBucketHandle instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsBucketHandleCreateFunc) PushHook(hook func(context.Context, string, *storage.BucketAttrs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsBucketHandleCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, *storage.BucketAttrs) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsBucketHandleCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, *storage.BucketAttrs) error {
		return r0
	})
}

func (f *GcsBucketHandleCreateFunc) nextHook() func(context.Context, string, *storage.BucketAttrs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsBucketHandleCreateFunc) appendCall(r0 GcsBucketHandleCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsBucketHandleCreateFuncCall objects
// describing the invocations of this function.
func (f *GcsBucketHandleCreateFunc) History() []GcsBucketHandleCreateFuncCall {
	f.mutex.Lock()
	history := make([]GcsBucketHandleCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsBucketHandleCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockGcsBucketHandle.
type GcsBucketHandleCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *storage.BucketAttrs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsBucketHandleCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsBucketHandleCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GcsBucketHandleObjectFunc describes the behavior when the Object method
// of the parent MockGcsBucketHandle instance is invoked.
type GcsBucketHandleObjectFunc struct {
	defaultHook func(string) gcsObjectHandle
	hooks       []func(string) gcsObjectHandle
	history     []GcsBucketHandleObjectFuncCall
	mutex       sync.Mutex
}

// Object delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsBucketHandle) Object(v0 string) gcsObjectHandle {
	r0 := m.ObjectFunc.nextHook()(v0)
	m.ObjectFunc.appendCall(GcsBucketHandleObjectFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Object method of the
// parent MockGcsBucketHandle instance is invoked and the hook queue is
// empty.
func (f *GcsBucketHandleObjectFunc) SetDefaultHook(hook func(string) gcsObjectHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Object method of the parent MockGcsBucketHandle instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsBucketHandleObjectFunc) PushHook(hook func(string) gcsObjectHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsBucketHandleObjectFunc) SetDefaultReturn(r0 gcsObjectHandle) {
	f.SetDefaultHook(func(string) gcsObjectHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsBucketHandleObjectFunc) PushReturn(r0 gcsObjectHandle) {
	f.PushHook(func(string) gcsObjectHandle {
		return r0
	})
}

func (f *GcsBucketHandleObjectFunc) nextHook() func(string) gcsObjectHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsBucketHandleObjectFunc) appendCall(r0 GcsBucketHandleObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsBucketHandleObjectFuncCall objects
// describing the invocations of this function.
func (f *GcsBucketHandleObjectFunc) History() []GcsBucketHandleObjectFuncCall {
	f.mutex.Lock()
	history := make([]GcsBucketHandleObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsBucketHandleObjectFuncCall is an object that describes an invocation
// of method Object on an instance of MockGcsBucketHandle.
type GcsBucketHandleObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gcsObjectHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsBucketHandleObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsBucketHandleObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GcsBucketHandleUpdateFunc describes the behavior when the Update method
// of the parent MockGcsBucketHandle instance is invoked.
type GcsBucketHandleUpdateFunc struct {
	defaultHook func(context.Context, storage.BucketAttrsToUpdate) error
	hooks       []func(context.Context, storage.BucketAttrsToUpdate) error
	history     []GcsBucketHandleUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsBucketHandle) Update(v0 context.Context, v1 storage.BucketAttrsToUpdate) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(GcsBucketHandleUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockGcsBucketHandle instance is invoked and the hook queue is
// empty.
func (f *GcsBucketHandleUpdateFunc) SetDefaultHook(hook func(context.Context, storage.BucketAttrsToUpdate) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockGcsBucketHandle instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsBucketHandleUpdateFunc) PushHook(hook func(context.Context, storage.BucketAttrsToUpdate) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsBucketHandleUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, storage.BucketAttrsToUpdate) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsBucketHandleUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, storage.BucketAttrsToUpdate) error {
		return r0
	})
}

func (f *GcsBucketHandleUpdateFunc) nextHook() func(context.Context, storage.BucketAttrsToUpdate) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsBucketHandleUpdateFunc) appendCall(r0 GcsBucketHandleUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsBucketHandleUpdateFuncCall objects
// describing the invocations of this function.
func (f *GcsBucketHandleUpdateFunc) History() []GcsBucketHandleUpdateFuncCall {
	f.mutex.Lock()
	history := make([]GcsBucketHandleUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsBucketHandleUpdateFuncCall is an object that describes an invocation
// of method Update on an instance of MockGcsBucketHandle.
type GcsBucketHandleUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 storage.BucketAttrsToUpdate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsBucketHandleUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsBucketHandleUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGcsComposer is a mock implementation of the gcsComposer interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/upload_store)
// used for unit testing.
type MockGcsComposer struct {
	// RunFunc is an instance of a mock function object controlling the
	// behavior of the method Run.
	RunFunc *GcsComposerRunFunc
}

// NewMockGcsComposer creates a new mock of the gcsComposer interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGcsComposer() *MockGcsComposer {
	return &MockGcsComposer{
		RunFunc: &GcsComposerRunFunc{
			defaultHook: func(context.Context) (*storage.ObjectAttrs, error) {
				return nil, nil
			},
		},
	}
}

// surrogateMockGcsComposer is a copy of the gcsComposer interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/upload_store).
// It is redefined here as it is unexported in the source packge.
type surrogateMockGcsComposer interface {
	Run(context.Context) (*storage.ObjectAttrs, error)
}

// NewMockGcsComposerFrom creates a new mock of the MockGcsComposer
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGcsComposerFrom(i surrogateMockGcsComposer) *MockGcsComposer {
	return &MockGcsComposer{
		RunFunc: &GcsComposerRunFunc{
			defaultHook: i.Run,
		},
	}
}

// GcsComposerRunFunc describes the behavior when the Run method of the
// parent MockGcsComposer instance is invoked.
type GcsComposerRunFunc struct {
	defaultHook func(context.Context) (*storage.ObjectAttrs, error)
	hooks       []func(context.Context) (*storage.ObjectAttrs, error)
	history     []GcsComposerRunFuncCall
	mutex       sync.Mutex
}

// Run delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsComposer) Run(v0 context.Context) (*storage.ObjectAttrs, error) {
	r0, r1 := m.RunFunc.nextHook()(v0)
	m.RunFunc.appendCall(GcsComposerRunFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Run method of the
// parent MockGcsComposer instance is invoked and the hook queue is empty.
func (f *GcsComposerRunFunc) SetDefaultHook(hook func(context.Context) (*storage.ObjectAttrs, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Run method of the parent MockGcsComposer instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *GcsComposerRunFunc) PushHook(hook func(context.Context) (*storage.ObjectAttrs, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsComposerRunFunc) SetDefaultReturn(r0 *storage.ObjectAttrs, r1 error) {
	f.SetDefaultHook(func(context.Context) (*storage.ObjectAttrs, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsComposerRunFunc) PushReturn(r0 *storage.ObjectAttrs, r1 error) {
	f.PushHook(func(context.Context) (*storage.ObjectAttrs, error) {
		return r0, r1
	})
}

func (f *GcsComposerRunFunc) nextHook() func(context.Context) (*storage.ObjectAttrs, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsComposerRunFunc) appendCall(r0 GcsComposerRunFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsComposerRunFuncCall objects describing
// the invocations of this function.
func (f *GcsComposerRunFunc) History() []GcsComposerRunFuncCall {
	f.mutex.Lock()
	history := make([]GcsComposerRunFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsComposerRunFuncCall is an object that describes an invocation of
// method Run on an instance of MockGcsComposer.
type GcsComposerRunFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *storage.ObjectAttrs
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsComposerRunFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsComposerRunFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGcsObjectHandle is a mock implementation of the gcsObjectHandle
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/upload_store)
// used for unit testing.
type MockGcsObjectHandle struct {
	// ComposerFromFunc is an instance of a mock function object controlling
	// the behavior of the method ComposerFrom.
	ComposerFromFunc *GcsObjectHandleComposerFromFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *GcsObjectHandleDeleteFunc
	// NewRangeReaderFunc is an instance of a mock function object
	// controlling the behavior of the method NewRangeReader.
	NewRangeReaderFunc *GcsObjectHandleNewRangeReaderFunc
	// NewWriterFunc is an instance of a mock function object controlling
	// the behavior of the method NewWriter.
	NewWriterFunc *GcsObjectHandleNewWriterFunc
}

// NewMockGcsObjectHandle creates a new mock of the gcsObjectHandle
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGcsObjectHandle() *MockGcsObjectHandle {
	return &MockGcsObjectHandle{
		ComposerFromFunc: &GcsObjectHandleComposerFromFunc{
			defaultHook: func(...gcsObjectHandle) gcsComposer {
				return nil
			},
		},
		DeleteFunc: &GcsObjectHandleDeleteFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		NewRangeReaderFunc: &GcsObjectHandleNewRangeReaderFunc{
			defaultHook: func(context.Context, int64, int64) (io.ReadCloser, error) {
				return nil, nil
			},
		},
		NewWriterFunc: &GcsObjectHandleNewWriterFunc{
			defaultHook: func(context.Context) io.WriteCloser {
				return nil
			},
		},
	}
}

// surrogateMockGcsObjectHandle is a copy of the gcsObjectHandle interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/upload_store).
// It is redefined here as it is unexported in the source packge.
type surrogateMockGcsObjectHandle interface {
	ComposerFrom(...gcsObjectHandle) gcsComposer
	Delete(context.Context) error
	NewRangeReader(context.Context, int64, int64) (io.ReadCloser, error)
	NewWriter(context.Context) io.WriteCloser
}

// NewMockGcsObjectHandleFrom creates a new mock of the MockGcsObjectHandle
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGcsObjectHandleFrom(i surrogateMockGcsObjectHandle) *MockGcsObjectHandle {
	return &MockGcsObjectHandle{
		ComposerFromFunc: &GcsObjectHandleComposerFromFunc{
			defaultHook: i.ComposerFrom,
		},
		DeleteFunc: &GcsObjectHandleDeleteFunc{
			defaultHook: i.Delete,
		},
		NewRangeReaderFunc: &GcsObjectHandleNewRangeReaderFunc{
			defaultHook: i.NewRangeReader,
		},
		NewWriterFunc: &GcsObjectHandleNewWriterFunc{
			defaultHook: i.NewWriter,
		},
	}
}

// GcsObjectHandleComposerFromFunc describes the behavior when the
// ComposerFrom method of the parent MockGcsObjectHandle instance is
// invoked.
type GcsObjectHandleComposerFromFunc struct {
	defaultHook func(...gcsObjectHandle) gcsComposer
	hooks       []func(...gcsObjectHandle) gcsComposer
	history     []GcsObjectHandleComposerFromFuncCall
	mutex       sync.Mutex
}

// ComposerFrom delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGcsObjectHandle) ComposerFrom(v0 ...gcsObjectHandle) gcsComposer {
	r0 := m.ComposerFromFunc.nextHook()(v0...)
	m.ComposerFromFunc.appendCall(GcsObjectHandleComposerFromFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ComposerFrom method
// of the parent MockGcsObjectHandle instance is invoked and the hook queue
// is empty.
func (f *GcsObjectHandleComposerFromFunc) SetDefaultHook(hook func(...gcsObjectHandle) gcsComposer) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ComposerFrom method of the parent MockGcsObjectHandle instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GcsObjectHandleComposerFromFunc) PushHook(hook func(...gcsObjectHandle) gcsComposer) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsObjectHandleComposerFromFunc) SetDefaultReturn(r0 gcsComposer) {
	f.SetDefaultHook(func(...gcsObjectHandle) gcsComposer {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsObjectHandleComposerFromFunc) PushReturn(r0 gcsComposer) {
	f.PushHook(func(...gcsObjectHandle) gcsComposer {
		return r0
	})
}

func (f *GcsObjectHandleComposerFromFunc) nextHook() func(...gcsObjectHandle) gcsComposer {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsObjectHandleComposerFromFunc) appendCall(r0 GcsObjectHandleComposerFromFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsObjectHandleComposerFromFuncCall objects
// describing the invocations of this function.
func (f *GcsObjectHandleComposerFromFunc) History() []GcsObjectHandleComposerFromFuncCall {
	f.mutex.Lock()
	history := make([]GcsObjectHandleComposerFromFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsObjectHandleComposerFromFuncCall is an object that describes an
// invocation of method ComposerFrom on an instance of MockGcsObjectHandle.
type GcsObjectHandleComposerFromFuncCall struct {
	// Arg0 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg0 []gcsObjectHandle
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 gcsComposer
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GcsObjectHandleComposerFromFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg0 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsObjectHandleComposerFromFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GcsObjectHandleDeleteFunc describes the behavior when the Delete method
// of the parent MockGcsObjectHandle instance is invoked.
type GcsObjectHandleDeleteFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []GcsObjectHandleDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsObjectHandle) Delete(v0 context.Context) error {
	r0 := m.DeleteFunc.nextHook()(v0)
	m.DeleteFunc.appendCall(GcsObjectHandleDeleteFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockGcsObjectHandle instance is invoked and the hook queue is
// empty.
func (f *GcsObjectHandleDeleteFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockGcsObjectHandle instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GcsObjectHandleDeleteFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsObjectHandleDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsObjectHandleDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *GcsObjectHandleDeleteFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsObjectHandleDeleteFunc) appendCall(r0 GcsObjectHandleDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsObjectHandleDeleteFuncCall objects
// describing the invocations of this function.
func (f *GcsObjectHandleDeleteFunc) History() []GcsObjectHandleDeleteFuncCall {
	f.mutex.Lock()
	history := make([]GcsObjectHandleDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsObjectHandleDeleteFuncCall is an object that describes an invocation
// of method Delete on an instance of MockGcsObjectHandle.
type GcsObjectHandleDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsObjectHandleDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsObjectHandleDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GcsObjectHandleNewRangeReaderFunc describes the behavior when the
// NewRangeReader method of the parent MockGcsObjectHandle instance is
// invoked.
type GcsObjectHandleNewRangeReaderFunc struct {
	defaultHook func(context.Context, int64, int64) (io.ReadCloser, error)
	hooks       []func(context.Context, int64, int64) (io.ReadCloser, error)
	history     []GcsObjectHandleNewRangeReaderFuncCall
	mutex       sync.Mutex
}

// NewRangeReader delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGcsObjectHandle) NewRangeReader(v0 context.Context, v1 int64, v2 int64) (io.ReadCloser, error) {
	r0, r1 := m.NewRangeReaderFunc.nextHook()(v0, v1, v2)
	m.NewRangeReaderFunc.appendCall(GcsObjectHandleNewRangeReaderFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NewRangeReader
// method of the parent MockGcsObjectHandle instance is invoked and the hook
// queue is empty.
func (f *GcsObjectHandleNewRangeReaderFunc) SetDefaultHook(hook func(context.Context, int64, int64) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewRangeReader method of the parent MockGcsObjectHandle instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GcsObjectHandleNewRangeReaderFunc) PushHook(hook func(context.Context, int64, int64) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsObjectHandleNewRangeReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, int64) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsObjectHandleNewRangeReaderFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, int64, int64) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *GcsObjectHandleNewRangeReaderFunc) nextHook() func(context.Context, int64, int64) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsObjectHandleNewRangeReaderFunc) appendCall(r0 GcsObjectHandleNewRangeReaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsObjectHandleNewRangeReaderFuncCall
// objects describing the invocations of this function.
func (f *GcsObjectHandleNewRangeReaderFunc) History() []GcsObjectHandleNewRangeReaderFuncCall {
	f.mutex.Lock()
	history := make([]GcsObjectHandleNewRangeReaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsObjectHandleNewRangeReaderFuncCall is an object that describes an
// invocation of method NewRangeReader on an instance of
// MockGcsObjectHandle.
type GcsObjectHandleNewRangeReaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsObjectHandleNewRangeReaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsObjectHandleNewRangeReaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GcsObjectHandleNewWriterFunc describes the behavior when the NewWriter
// method of the parent MockGcsObjectHandle instance is invoked.
type GcsObjectHandleNewWriterFunc struct {
	defaultHook func(context.Context) io.WriteCloser
	hooks       []func(context.Context) io.WriteCloser
	history     []GcsObjectHandleNewWriterFuncCall
	mutex       sync.Mutex
}

// NewWriter delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGcsObjectHandle) NewWriter(v0 context.Context) io.WriteCloser {
	r0 := m.NewWriterFunc.nextHook()(v0)
	m.NewWriterFunc.appendCall(GcsObjectHandleNewWriterFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the NewWriter method of
// the parent MockGcsObjectHandle instance is invoked and the hook queue is
// empty.
func (f *GcsObjectHandleNewWriterFunc) SetDefaultHook(hook func(context.Context) io.WriteCloser) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewWriter method of the parent MockGcsObjectHandle instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GcsObjectHandleNewWriterFunc) PushHook(hook func(context.Context) io.WriteCloser) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GcsObjectHandleNewWriterFunc) SetDefaultReturn(r0 io.WriteCloser) {
	f.SetDefaultHook(func(context.Context) io.WriteCloser {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GcsObjectHandleNewWriterFunc) PushReturn(r0 io.WriteCloser) {
	f.PushHook(func(context.Context) io.WriteCloser {
		return r0
	})
}

func (f *GcsObjectHandleNewWriterFunc) nextHook() func(context.Context) io.WriteCloser {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GcsObjectHandleNewWriterFunc) appendCall(r0 GcsObjectHandleNewWriterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GcsObjectHandleNewWriterFuncCall objects
// describing the invocations of this function.
func (f *GcsObjectHandleNewWriterFunc) History() []GcsObjectHandleNewWriterFuncCall {
	f.mutex.Lock()
	history := make([]GcsObjectHandleNewWriterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GcsObjectHandleNewWriterFuncCall is an object that describes an
// invocation of method NewWriter on an instance of MockGcsObjectHandle.
type GcsObjectHandleNewWriterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.WriteCloser
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GcsObjectHandleNewWriterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GcsObjectHandleNewWriterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
