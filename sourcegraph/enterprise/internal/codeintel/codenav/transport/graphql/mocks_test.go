// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package graphql

import (
	"context"
	"sync"

	codenav "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav"
	shared1 "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/shared"
	shared "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/shared"
)

// MockAutoIndexingService is a mock implementation of the
// AutoIndexingService interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockAutoIndexingService struct {
	// QueueRepoRevFunc is an instance of a mock function object controlling
	// the behavior of the method QueueRepoRev.
	QueueRepoRevFunc *AutoIndexingServiceQueueRepoRevFunc
}

// NewMockAutoIndexingService creates a new mock of the AutoIndexingService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: func(context.Context, int, string) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockAutoIndexingService creates a new mock of the
// AutoIndexingService interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: func(context.Context, int, string) error {
				panic("unexpected invocation of MockAutoIndexingService.QueueRepoRev")
			},
		},
	}
}

// NewMockAutoIndexingServiceFrom creates a new mock of the
// MockAutoIndexingService interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAutoIndexingServiceFrom(i AutoIndexingService) *MockAutoIndexingService {
	return &MockAutoIndexingService{
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: i.QueueRepoRev,
		},
	}
}

// AutoIndexingServiceQueueRepoRevFunc describes the behavior when the
// QueueRepoRev method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceQueueRepoRevFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []AutoIndexingServiceQueueRepoRevFuncCall
	mutex       sync.Mutex
}

// QueueRepoRev delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) QueueRepoRev(v0 context.Context, v1 int, v2 string) error {
	r0 := m.QueueRepoRevFunc.nextHook()(v0, v1, v2)
	m.QueueRepoRevFunc.appendCall(AutoIndexingServiceQueueRepoRevFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueueRepoRev method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceQueueRepoRevFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueRepoRev method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceQueueRepoRevFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceQueueRepoRevFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceQueueRepoRevFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *AutoIndexingServiceQueueRepoRevFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceQueueRepoRevFunc) appendCall(r0 AutoIndexingServiceQueueRepoRevFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceQueueRepoRevFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceQueueRepoRevFunc) History() []AutoIndexingServiceQueueRepoRevFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceQueueRepoRevFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceQueueRepoRevFuncCall is an object that describes an
// invocation of method QueueRepoRev on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceQueueRepoRevFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceQueueRepoRevFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceQueueRepoRevFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockCodeNavService is a mock implementation of the CodeNavService
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockCodeNavService struct {
	// GetClosestDumpsForBlobFunc is an instance of a mock function object
	// controlling the behavior of the method GetClosestDumpsForBlob.
	GetClosestDumpsForBlobFunc *CodeNavServiceGetClosestDumpsForBlobFunc
	// GetDefinitionsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefinitions.
	GetDefinitionsFunc *CodeNavServiceGetDefinitionsFunc
	// GetDiagnosticsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDiagnostics.
	GetDiagnosticsFunc *CodeNavServiceGetDiagnosticsFunc
	// GetHoverFunc is an instance of a mock function object controlling the
	// behavior of the method GetHover.
	GetHoverFunc *CodeNavServiceGetHoverFunc
	// GetImplementationsFunc is an instance of a mock function object
	// controlling the behavior of the method GetImplementations.
	GetImplementationsFunc *CodeNavServiceGetImplementationsFunc
	// GetRangesFunc is an instance of a mock function object controlling
	// the behavior of the method GetRanges.
	GetRangesFunc *CodeNavServiceGetRangesFunc
	// GetReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method GetReferences.
	GetReferencesFunc *CodeNavServiceGetReferencesFunc
	// GetStencilFunc is an instance of a mock function object controlling
	// the behavior of the method GetStencil.
	GetStencilFunc *CodeNavServiceGetStencilFunc
}

// NewMockCodeNavService creates a new mock of the CodeNavService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockCodeNavService() *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) (r0 []shared.Dump, r1 error) {
				return
			},
		},
		GetDefinitionsFunc: &CodeNavServiceGetDefinitionsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (r0 []shared1.UploadLocation, r1 error) {
				return
			},
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (r0 []codenav.DiagnosticAtUpload, r1 int, r2 error) {
				return
			},
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (r0 string, r1 shared1.Range, r2 bool, r3 error) {
				return
			},
		},
		GetImplementationsFunc: &CodeNavServiceGetImplementationsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) (r0 []shared1.UploadLocation, r1 codenav.ImplementationsCursor, r2 error) {
				return
			},
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) (r0 []codenav.AdjustedCodeIntelligenceRange, r1 error) {
				return
			},
		},
		GetReferencesFunc: &CodeNavServiceGetReferencesFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) (r0 []shared1.UploadLocation, r1 codenav.ReferencesCursor, r2 error) {
				return
			},
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (r0 []shared1.Range, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockCodeNavService creates a new mock of the CodeNavService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockCodeNavService() *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
				panic("unexpected invocation of MockCodeNavService.GetClosestDumpsForBlob")
			},
		},
		GetDefinitionsFunc: &CodeNavServiceGetDefinitionsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
				panic("unexpected invocation of MockCodeNavService.GetDefinitions")
			},
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
				panic("unexpected invocation of MockCodeNavService.GetDiagnostics")
			},
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
				panic("unexpected invocation of MockCodeNavService.GetHover")
			},
		},
		GetImplementationsFunc: &CodeNavServiceGetImplementationsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
				panic("unexpected invocation of MockCodeNavService.GetImplementations")
			},
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
				panic("unexpected invocation of MockCodeNavService.GetRanges")
			},
		},
		GetReferencesFunc: &CodeNavServiceGetReferencesFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
				panic("unexpected invocation of MockCodeNavService.GetReferences")
			},
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error) {
				panic("unexpected invocation of MockCodeNavService.GetStencil")
			},
		},
	}
}

// NewMockCodeNavServiceFrom creates a new mock of the MockCodeNavService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockCodeNavServiceFrom(i CodeNavService) *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: i.GetClosestDumpsForBlob,
		},
		GetDefinitionsFunc: &CodeNavServiceGetDefinitionsFunc{
			defaultHook: i.GetDefinitions,
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: i.GetDiagnostics,
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: i.GetHover,
		},
		GetImplementationsFunc: &CodeNavServiceGetImplementationsFunc{
			defaultHook: i.GetImplementations,
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: i.GetRanges,
		},
		GetReferencesFunc: &CodeNavServiceGetReferencesFunc{
			defaultHook: i.GetReferences,
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: i.GetStencil,
		},
	}
}

// CodeNavServiceGetClosestDumpsForBlobFunc describes the behavior when the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// is invoked.
type CodeNavServiceGetClosestDumpsForBlobFunc struct {
	defaultHook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)
	hooks       []func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)
	history     []CodeNavServiceGetClosestDumpsForBlobFuncCall
	mutex       sync.Mutex
}

// GetClosestDumpsForBlob delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetClosestDumpsForBlob(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string) ([]shared.Dump, error) {
	r0, r1 := m.GetClosestDumpsForBlobFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.GetClosestDumpsForBlobFunc.appendCall(CodeNavServiceGetClosestDumpsForBlobFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// is invoked and the hook queue is empty.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) PushHook(hook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetClosestDumpsForBlobFunc) nextHook() func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetClosestDumpsForBlobFunc) appendCall(r0 CodeNavServiceGetClosestDumpsForBlobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeNavServiceGetClosestDumpsForBlobFuncCall objects describing the
// invocations of this function.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) History() []CodeNavServiceGetClosestDumpsForBlobFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetClosestDumpsForBlobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetClosestDumpsForBlobFuncCall is an object that describes
// an invocation of method GetClosestDumpsForBlob on an instance of
// MockCodeNavService.
type CodeNavServiceGetClosestDumpsForBlobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetClosestDumpsForBlobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetClosestDumpsForBlobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetDefinitionsFunc describes the behavior when the
// GetDefinitions method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetDefinitionsFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)
	history     []CodeNavServiceGetDefinitionsFuncCall
	mutex       sync.Mutex
}

// GetDefinitions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetDefinitions(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState) ([]shared1.UploadLocation, error) {
	r0, r1 := m.GetDefinitionsFunc.nextHook()(v0, v1, v2)
	m.GetDefinitionsFunc.appendCall(CodeNavServiceGetDefinitionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDefinitions
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetDefinitionsFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefinitions method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetDefinitionsFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetDefinitionsFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetDefinitionsFunc) PushReturn(r0 []shared1.UploadLocation, r1 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetDefinitionsFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetDefinitionsFunc) appendCall(r0 CodeNavServiceGetDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetDefinitionsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetDefinitionsFunc) History() []CodeNavServiceGetDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetDefinitionsFuncCall is an object that describes an
// invocation of method GetDefinitions on an instance of MockCodeNavService.
type CodeNavServiceGetDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetDiagnosticsFunc describes the behavior when the
// GetDiagnostics method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetDiagnosticsFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)
	history     []CodeNavServiceGetDiagnosticsFuncCall
	mutex       sync.Mutex
}

// GetDiagnostics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetDiagnostics(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
	r0, r1, r2 := m.GetDiagnosticsFunc.nextHook()(v0, v1, v2)
	m.GetDiagnosticsFunc.appendCall(CodeNavServiceGetDiagnosticsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDiagnostics
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetDiagnosticsFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDiagnostics method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetDiagnosticsFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetDiagnosticsFunc) SetDefaultReturn(r0 []codenav.DiagnosticAtUpload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetDiagnosticsFunc) PushReturn(r0 []codenav.DiagnosticAtUpload, r1 int, r2 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetDiagnosticsFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetDiagnosticsFunc) appendCall(r0 CodeNavServiceGetDiagnosticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetDiagnosticsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetDiagnosticsFunc) History() []CodeNavServiceGetDiagnosticsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetDiagnosticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetDiagnosticsFuncCall is an object that describes an
// invocation of method GetDiagnostics on an instance of MockCodeNavService.
type CodeNavServiceGetDiagnosticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []codenav.DiagnosticAtUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetDiagnosticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetDiagnosticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetHoverFunc describes the behavior when the GetHover
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetHoverFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)
	history     []CodeNavServiceGetHoverFuncCall
	mutex       sync.Mutex
}

// GetHover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeNavService) GetHover(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState) (string, shared1.Range, bool, error) {
	r0, r1, r2, r3 := m.GetHoverFunc.nextHook()(v0, v1, v2)
	m.GetHoverFunc.appendCall(CodeNavServiceGetHoverFuncCall{v0, v1, v2, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the GetHover method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetHoverFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetHover method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetHoverFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetHoverFunc) SetDefaultReturn(r0 string, r1 shared1.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetHoverFunc) PushReturn(r0 string, r1 shared1.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *CodeNavServiceGetHoverFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetHoverFunc) appendCall(r0 CodeNavServiceGetHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetHoverFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetHoverFunc) History() []CodeNavServiceGetHoverFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetHoverFuncCall is an object that describes an invocation
// of method GetHover on an instance of MockCodeNavService.
type CodeNavServiceGetHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared1.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// CodeNavServiceGetImplementationsFunc describes the behavior when the
// GetImplementations method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetImplementationsFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error)
	history     []CodeNavServiceGetImplementationsFuncCall
	mutex       sync.Mutex
}

// GetImplementations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetImplementations(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState, v3 codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
	r0, r1, r2 := m.GetImplementationsFunc.nextHook()(v0, v1, v2, v3)
	m.GetImplementationsFunc.appendCall(CodeNavServiceGetImplementationsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetImplementations
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetImplementationsFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetImplementations method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceGetImplementationsFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetImplementationsFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 codenav.ImplementationsCursor, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetImplementationsFunc) PushReturn(r0 []shared1.UploadLocation, r1 codenav.ImplementationsCursor, r2 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetImplementationsFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetImplementationsFunc) appendCall(r0 CodeNavServiceGetImplementationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetImplementationsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetImplementationsFunc) History() []CodeNavServiceGetImplementationsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetImplementationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetImplementationsFuncCall is an object that describes an
// invocation of method GetImplementations on an instance of
// MockCodeNavService.
type CodeNavServiceGetImplementationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 codenav.ImplementationsCursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 codenav.ImplementationsCursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetImplementationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetImplementationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetRangesFunc describes the behavior when the GetRanges
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetRangesFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)
	history     []CodeNavServiceGetRangesFuncCall
	mutex       sync.Mutex
}

// GetRanges delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeNavService) GetRanges(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState, v3 int, v4 int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
	r0, r1 := m.GetRangesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetRangesFunc.appendCall(CodeNavServiceGetRangesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRanges method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetRangesFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRanges method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetRangesFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetRangesFunc) SetDefaultReturn(r0 []codenav.AdjustedCodeIntelligenceRange, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetRangesFunc) PushReturn(r0 []codenav.AdjustedCodeIntelligenceRange, r1 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetRangesFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetRangesFunc) appendCall(r0 CodeNavServiceGetRangesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetRangesFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetRangesFunc) History() []CodeNavServiceGetRangesFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetRangesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetRangesFuncCall is an object that describes an invocation
// of method GetRanges on an instance of MockCodeNavService.
type CodeNavServiceGetRangesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []codenav.AdjustedCodeIntelligenceRange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetRangesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetRangesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetReferencesFunc describes the behavior when the
// GetReferences method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetReferencesFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error)
	history     []CodeNavServiceGetReferencesFuncCall
	mutex       sync.Mutex
}

// GetReferences delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeNavService) GetReferences(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState, v3 codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
	r0, r1, r2 := m.GetReferencesFunc.nextHook()(v0, v1, v2, v3)
	m.GetReferencesFunc.appendCall(CodeNavServiceGetReferencesFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetReferences method
// of the parent MockCodeNavService instance is invoked and the hook queue
// is empty.
func (f *CodeNavServiceGetReferencesFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReferences method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetReferencesFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetReferencesFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 codenav.ReferencesCursor, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetReferencesFunc) PushReturn(r0 []shared1.UploadLocation, r1 codenav.ReferencesCursor, r2 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetReferencesFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetReferencesFunc) appendCall(r0 CodeNavServiceGetReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetReferencesFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetReferencesFunc) History() []CodeNavServiceGetReferencesFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetReferencesFuncCall is an object that describes an
// invocation of method GetReferences on an instance of MockCodeNavService.
type CodeNavServiceGetReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 codenav.ReferencesCursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 codenav.ReferencesCursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetStencilFunc describes the behavior when the GetStencil
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetStencilFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error)
	history     []CodeNavServiceGetStencilFuncCall
	mutex       sync.Mutex
}

// GetStencil delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeNavService) GetStencil(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState) ([]shared1.Range, error) {
	r0, r1 := m.GetStencilFunc.nextHook()(v0, v1, v2)
	m.GetStencilFunc.appendCall(CodeNavServiceGetStencilFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStencil method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetStencilFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStencil method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetStencilFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetStencilFunc) SetDefaultReturn(r0 []shared1.Range, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetStencilFunc) PushReturn(r0 []shared1.Range, r1 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetStencilFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetStencilFunc) appendCall(r0 CodeNavServiceGetStencilFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetStencilFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetStencilFunc) History() []CodeNavServiceGetStencilFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetStencilFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetStencilFuncCall is an object that describes an
// invocation of method GetStencil on an instance of MockCodeNavService.
type CodeNavServiceGetStencilFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.Range
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetStencilFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetStencilFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockUploadsService is a mock implementation of the UploadsService
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockUploadsService struct {
	// GetIndexesByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetIndexesByIDs.
	GetIndexesByIDsFunc *UploadsServiceGetIndexesByIDsFunc
	// GetUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByIDs.
	GetUploadsByIDsFunc *UploadsServiceGetUploadsByIDsFunc
}

// NewMockUploadsService creates a new mock of the UploadsService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		GetIndexesByIDsFunc: &UploadsServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Index, r1 error) {
				return
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Upload, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUploadsService creates a new mock of the UploadsService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		GetIndexesByIDsFunc: &UploadsServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Index, error) {
				panic("unexpected invocation of MockUploadsService.GetIndexesByIDs")
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Upload, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadsByIDs")
			},
		},
	}
}

// NewMockUploadsServiceFrom creates a new mock of the MockUploadsService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUploadsServiceFrom(i UploadsService) *MockUploadsService {
	return &MockUploadsService{
		GetIndexesByIDsFunc: &UploadsServiceGetIndexesByIDsFunc{
			defaultHook: i.GetIndexesByIDs,
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: i.GetUploadsByIDs,
		},
	}
}

// UploadsServiceGetIndexesByIDsFunc describes the behavior when the
// GetIndexesByIDs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetIndexesByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Index, error)
	hooks       []func(context.Context, ...int) ([]shared.Index, error)
	history     []UploadsServiceGetIndexesByIDsFuncCall
	mutex       sync.Mutex
}

// GetIndexesByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]shared.Index, error) {
	r0, r1 := m.GetIndexesByIDsFunc.nextHook()(v0, v1...)
	m.GetIndexesByIDsFunc.appendCall(UploadsServiceGetIndexesByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexesByIDs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexesByIDs method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetIndexesByIDsFunc) SetDefaultReturn(r0 []shared.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetIndexesByIDsFunc) PushReturn(r0 []shared.Index, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Index, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetIndexesByIDsFunc) appendCall(r0 UploadsServiceGetIndexesByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetIndexesByIDsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetIndexesByIDsFunc) History() []UploadsServiceGetIndexesByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetIndexesByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetIndexesByIDsFuncCall is an object that describes an
// invocation of method GetIndexesByIDs on an instance of
// MockUploadsService.
type UploadsServiceGetIndexesByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetIndexesByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetIndexesByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetUploadsByIDsFunc describes the behavior when the
// GetUploadsByIDs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Upload, error)
	hooks       []func(context.Context, ...int) ([]shared.Upload, error)
	history     []UploadsServiceGetUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]shared.Upload, error) {
	r0, r1 := m.GetUploadsByIDsFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsFunc.appendCall(UploadsServiceGetUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsByIDs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDs method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultReturn(r0 []shared.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsByIDsFunc) PushReturn(r0 []shared.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsByIDsFunc) appendCall(r0 UploadsServiceGetUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsByIDsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetUploadsByIDsFunc) History() []UploadsServiceGetUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsByIDsFuncCall is an object that describes an
// invocation of method GetUploadsByIDs on an instance of
// MockUploadsService.
type UploadsServiceGetUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
