// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package graphql

import (
	"context"
	"sync"
	"time"

	diff "github.com/sourcegraph/go-diff/diff"
	shared "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/autoindexing/shared"
	codenav "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav"
	shared1 "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/shared"
	gitserver "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/shared/gitserver"
	types "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/shared/types"
	shared2 "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/shared"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	authz "github.com/sourcegraph/sourcegraph/internal/authz"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
)

// MockAutoIndexingService is a mock implementation of the
// AutoIndexingService interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockAutoIndexingService struct {
	// GetIndexByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexByID.
	GetIndexByIDFunc *AutoIndexingServiceGetIndexByIDFunc
	// GetIndexesFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexes.
	GetIndexesFunc *AutoIndexingServiceGetIndexesFunc
	// GetIndexesByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetIndexesByIDs.
	GetIndexesByIDsFunc *AutoIndexingServiceGetIndexesByIDsFunc
	// GetListTagsFunc is an instance of a mock function object controlling
	// the behavior of the method GetListTags.
	GetListTagsFunc *AutoIndexingServiceGetListTagsFunc
	// GetUnsafeDBFunc is an instance of a mock function object controlling
	// the behavior of the method GetUnsafeDB.
	GetUnsafeDBFunc *AutoIndexingServiceGetUnsafeDBFunc
	// NumRepositoriesWithCodeIntelligenceFunc is an instance of a mock
	// function object controlling the behavior of the method
	// NumRepositoriesWithCodeIntelligence.
	NumRepositoriesWithCodeIntelligenceFunc *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc
	// QueueRepoRevFunc is an instance of a mock function object controlling
	// the behavior of the method QueueRepoRev.
	QueueRepoRevFunc *AutoIndexingServiceQueueRepoRevFunc
	// RepositoryIDsWithConfigurationFunc is an instance of a mock function
	// object controlling the behavior of the method
	// RepositoryIDsWithConfiguration.
	RepositoryIDsWithConfigurationFunc *AutoIndexingServiceRepositoryIDsWithConfigurationFunc
	// RepositoryIDsWithErrorsFunc is an instance of a mock function object
	// controlling the behavior of the method RepositoryIDsWithErrors.
	RepositoryIDsWithErrorsFunc *AutoIndexingServiceRepositoryIDsWithErrorsFunc
}

// NewMockAutoIndexingService creates a new mock of the AutoIndexingService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		GetIndexByIDFunc: &AutoIndexingServiceGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 types.Index, r1 bool, r2 error) {
				return
			},
		},
		GetIndexesFunc: &AutoIndexingServiceGetIndexesFunc{
			defaultHook: func(context.Context, shared.GetIndexesOptions) (r0 []types.Index, r1 int, r2 error) {
				return
			},
		},
		GetIndexesByIDsFunc: &AutoIndexingServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []types.Index, r1 error) {
				return
			},
		},
		GetListTagsFunc: &AutoIndexingServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (r0 []*gitdomain.Tag, r1 error) {
				return
			},
		},
		GetUnsafeDBFunc: &AutoIndexingServiceGetUnsafeDBFunc{
			defaultHook: func() (r0 database.DB) {
				return
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: func(context.Context, int, string) (r0 error) {
				return
			},
		},
		RepositoryIDsWithConfigurationFunc: &AutoIndexingServiceRepositoryIDsWithConfigurationFunc{
			defaultHook: func(context.Context, int, int) (r0 []shared.RepositoryWithAvailableIndexers, r1 int, r2 error) {
				return
			},
		},
		RepositoryIDsWithErrorsFunc: &AutoIndexingServiceRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) (r0 []shared.RepositoryWithCount, r1 int, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockAutoIndexingService creates a new mock of the
// AutoIndexingService interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		GetIndexByIDFunc: &AutoIndexingServiceGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (types.Index, bool, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetIndexByID")
			},
		},
		GetIndexesFunc: &AutoIndexingServiceGetIndexesFunc{
			defaultHook: func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetIndexes")
			},
		},
		GetIndexesByIDsFunc: &AutoIndexingServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]types.Index, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetIndexesByIDs")
			},
		},
		GetListTagsFunc: &AutoIndexingServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetListTags")
			},
		},
		GetUnsafeDBFunc: &AutoIndexingServiceGetUnsafeDBFunc{
			defaultHook: func() database.DB {
				panic("unexpected invocation of MockAutoIndexingService.GetUnsafeDB")
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockAutoIndexingService.NumRepositoriesWithCodeIntelligence")
			},
		},
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: func(context.Context, int, string) error {
				panic("unexpected invocation of MockAutoIndexingService.QueueRepoRev")
			},
		},
		RepositoryIDsWithConfigurationFunc: &AutoIndexingServiceRepositoryIDsWithConfigurationFunc{
			defaultHook: func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
				panic("unexpected invocation of MockAutoIndexingService.RepositoryIDsWithConfiguration")
			},
		},
		RepositoryIDsWithErrorsFunc: &AutoIndexingServiceRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
				panic("unexpected invocation of MockAutoIndexingService.RepositoryIDsWithErrors")
			},
		},
	}
}

// NewMockAutoIndexingServiceFrom creates a new mock of the
// MockAutoIndexingService interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAutoIndexingServiceFrom(i AutoIndexingService) *MockAutoIndexingService {
	return &MockAutoIndexingService{
		GetIndexByIDFunc: &AutoIndexingServiceGetIndexByIDFunc{
			defaultHook: i.GetIndexByID,
		},
		GetIndexesFunc: &AutoIndexingServiceGetIndexesFunc{
			defaultHook: i.GetIndexes,
		},
		GetIndexesByIDsFunc: &AutoIndexingServiceGetIndexesByIDsFunc{
			defaultHook: i.GetIndexesByIDs,
		},
		GetListTagsFunc: &AutoIndexingServiceGetListTagsFunc{
			defaultHook: i.GetListTags,
		},
		GetUnsafeDBFunc: &AutoIndexingServiceGetUnsafeDBFunc{
			defaultHook: i.GetUnsafeDB,
		},
		NumRepositoriesWithCodeIntelligenceFunc: &AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: i.NumRepositoriesWithCodeIntelligence,
		},
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: i.QueueRepoRev,
		},
		RepositoryIDsWithConfigurationFunc: &AutoIndexingServiceRepositoryIDsWithConfigurationFunc{
			defaultHook: i.RepositoryIDsWithConfiguration,
		},
		RepositoryIDsWithErrorsFunc: &AutoIndexingServiceRepositoryIDsWithErrorsFunc{
			defaultHook: i.RepositoryIDsWithErrors,
		},
	}
}

// AutoIndexingServiceGetIndexByIDFunc describes the behavior when the
// GetIndexByID method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetIndexByIDFunc struct {
	defaultHook func(context.Context, int) (types.Index, bool, error)
	hooks       []func(context.Context, int) (types.Index, bool, error)
	history     []AutoIndexingServiceGetIndexByIDFuncCall
	mutex       sync.Mutex
}

// GetIndexByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetIndexByID(v0 context.Context, v1 int) (types.Index, bool, error) {
	r0, r1, r2 := m.GetIndexByIDFunc.nextHook()(v0, v1)
	m.GetIndexByIDFunc.appendCall(AutoIndexingServiceGetIndexByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexByID method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (types.Index, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexByID method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceGetIndexByIDFunc) PushHook(hook func(context.Context, int) (types.Index, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetIndexByIDFunc) SetDefaultReturn(r0 types.Index, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (types.Index, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetIndexByIDFunc) PushReturn(r0 types.Index, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (types.Index, bool, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceGetIndexByIDFunc) nextHook() func(context.Context, int) (types.Index, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetIndexByIDFunc) appendCall(r0 AutoIndexingServiceGetIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetIndexByIDFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetIndexByIDFunc) History() []AutoIndexingServiceGetIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetIndexByIDFuncCall is an object that describes an
// invocation of method GetIndexByID on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceGetIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AutoIndexingServiceGetIndexesFunc describes the behavior when the
// GetIndexes method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetIndexesFunc struct {
	defaultHook func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error)
	hooks       []func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error)
	history     []AutoIndexingServiceGetIndexesFuncCall
	mutex       sync.Mutex
}

// GetIndexes delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetIndexes(v0 context.Context, v1 shared.GetIndexesOptions) ([]types.Index, int, error) {
	r0, r1, r2 := m.GetIndexesFunc.nextHook()(v0, v1)
	m.GetIndexesFunc.appendCall(AutoIndexingServiceGetIndexesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexes method of
// the parent MockAutoIndexingService instance is invoked and the hook queue
// is empty.
func (f *AutoIndexingServiceGetIndexesFunc) SetDefaultHook(hook func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexes method of the parent MockAutoIndexingService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AutoIndexingServiceGetIndexesFunc) PushHook(hook func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetIndexesFunc) SetDefaultReturn(r0 []types.Index, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetIndexesFunc) PushReturn(r0 []types.Index, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceGetIndexesFunc) nextHook() func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetIndexesFunc) appendCall(r0 AutoIndexingServiceGetIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetIndexesFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetIndexesFunc) History() []AutoIndexingServiceGetIndexesFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetIndexesFuncCall is an object that describes an
// invocation of method GetIndexes on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceGetIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AutoIndexingServiceGetIndexesByIDsFunc describes the behavior when the
// GetIndexesByIDs method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetIndexesByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]types.Index, error)
	hooks       []func(context.Context, ...int) ([]types.Index, error)
	history     []AutoIndexingServiceGetIndexesByIDsFuncCall
	mutex       sync.Mutex
}

// GetIndexesByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]types.Index, error) {
	r0, r1 := m.GetIndexesByIDsFunc.nextHook()(v0, v1...)
	m.GetIndexesByIDsFunc.appendCall(AutoIndexingServiceGetIndexesByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexesByIDs
// method of the parent MockAutoIndexingService instance is invoked and the
// hook queue is empty.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]types.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexesByIDs method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]types.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) SetDefaultReturn(r0 []types.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]types.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) PushReturn(r0 []types.Index, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]types.Index, error) {
		return r0, r1
	})
}

func (f *AutoIndexingServiceGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]types.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetIndexesByIDsFunc) appendCall(r0 AutoIndexingServiceGetIndexesByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetIndexesByIDsFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) History() []AutoIndexingServiceGetIndexesByIDsFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetIndexesByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetIndexesByIDsFuncCall is an object that describes an
// invocation of method GetIndexesByIDs on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetIndexesByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c AutoIndexingServiceGetIndexesByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetIndexesByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AutoIndexingServiceGetListTagsFunc describes the behavior when the
// GetListTags method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetListTagsFunc struct {
	defaultHook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	hooks       []func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	history     []AutoIndexingServiceGetListTagsFuncCall
	mutex       sync.Mutex
}

// GetListTags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetListTags(v0 context.Context, v1 api.RepoName, v2 ...string) ([]*gitdomain.Tag, error) {
	r0, r1 := m.GetListTagsFunc.nextHook()(v0, v1, v2...)
	m.GetListTagsFunc.appendCall(AutoIndexingServiceGetListTagsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetListTags method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceGetListTagsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetListTags method of the parent MockAutoIndexingService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AutoIndexingServiceGetListTagsFunc) PushHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetListTagsFunc) SetDefaultReturn(r0 []*gitdomain.Tag, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetListTagsFunc) PushReturn(r0 []*gitdomain.Tag, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

func (f *AutoIndexingServiceGetListTagsFunc) nextHook() func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetListTagsFunc) appendCall(r0 AutoIndexingServiceGetListTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetListTagsFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetListTagsFunc) History() []AutoIndexingServiceGetListTagsFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetListTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetListTagsFuncCall is an object that describes an
// invocation of method GetListTags on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetListTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Tag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c AutoIndexingServiceGetListTagsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetListTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AutoIndexingServiceGetUnsafeDBFunc describes the behavior when the
// GetUnsafeDB method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetUnsafeDBFunc struct {
	defaultHook func() database.DB
	hooks       []func() database.DB
	history     []AutoIndexingServiceGetUnsafeDBFuncCall
	mutex       sync.Mutex
}

// GetUnsafeDB delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetUnsafeDB() database.DB {
	r0 := m.GetUnsafeDBFunc.nextHook()()
	m.GetUnsafeDBFunc.appendCall(AutoIndexingServiceGetUnsafeDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetUnsafeDB method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceGetUnsafeDBFunc) SetDefaultHook(hook func() database.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUnsafeDB method of the parent MockAutoIndexingService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AutoIndexingServiceGetUnsafeDBFunc) PushHook(hook func() database.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetUnsafeDBFunc) SetDefaultReturn(r0 database.DB) {
	f.SetDefaultHook(func() database.DB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetUnsafeDBFunc) PushReturn(r0 database.DB) {
	f.PushHook(func() database.DB {
		return r0
	})
}

func (f *AutoIndexingServiceGetUnsafeDBFunc) nextHook() func() database.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetUnsafeDBFunc) appendCall(r0 AutoIndexingServiceGetUnsafeDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetUnsafeDBFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetUnsafeDBFunc) History() []AutoIndexingServiceGetUnsafeDBFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetUnsafeDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetUnsafeDBFuncCall is an object that describes an
// invocation of method GetUnsafeDB on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetUnsafeDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceGetUnsafeDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetUnsafeDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc describes the
// behavior when the NumRepositoriesWithCodeIntelligence method of the
// parent MockAutoIndexingService instance is invoked.
type AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall
	mutex       sync.Mutex
}

// NumRepositoriesWithCodeIntelligence delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockAutoIndexingService) NumRepositoriesWithCodeIntelligence(v0 context.Context) (int, error) {
	r0, r1 := m.NumRepositoriesWithCodeIntelligenceFunc.nextHook()(v0)
	m.NumRepositoriesWithCodeIntelligenceFunc.appendCall(AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// NumRepositoriesWithCodeIntelligence method of the parent
// MockAutoIndexingService instance is invoked and the hook queue is empty.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NumRepositoriesWithCodeIntelligence method of the parent
// MockAutoIndexingService instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) appendCall(r0 AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall objects
// describing the invocations of this function.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) History() []AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall is an
// object that describes an invocation of method
// NumRepositoriesWithCodeIntelligence on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AutoIndexingServiceQueueRepoRevFunc describes the behavior when the
// QueueRepoRev method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceQueueRepoRevFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []AutoIndexingServiceQueueRepoRevFuncCall
	mutex       sync.Mutex
}

// QueueRepoRev delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) QueueRepoRev(v0 context.Context, v1 int, v2 string) error {
	r0 := m.QueueRepoRevFunc.nextHook()(v0, v1, v2)
	m.QueueRepoRevFunc.appendCall(AutoIndexingServiceQueueRepoRevFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueueRepoRev method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceQueueRepoRevFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueRepoRev method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceQueueRepoRevFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceQueueRepoRevFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceQueueRepoRevFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *AutoIndexingServiceQueueRepoRevFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceQueueRepoRevFunc) appendCall(r0 AutoIndexingServiceQueueRepoRevFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceQueueRepoRevFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceQueueRepoRevFunc) History() []AutoIndexingServiceQueueRepoRevFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceQueueRepoRevFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceQueueRepoRevFuncCall is an object that describes an
// invocation of method QueueRepoRev on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceQueueRepoRevFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceQueueRepoRevFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceQueueRepoRevFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AutoIndexingServiceRepositoryIDsWithConfigurationFunc describes the
// behavior when the RepositoryIDsWithConfiguration method of the parent
// MockAutoIndexingService instance is invoked.
type AutoIndexingServiceRepositoryIDsWithConfigurationFunc struct {
	defaultHook func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error)
	hooks       []func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error)
	history     []AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall
	mutex       sync.Mutex
}

// RepositoryIDsWithConfiguration delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockAutoIndexingService) RepositoryIDsWithConfiguration(v0 context.Context, v1 int, v2 int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
	r0, r1, r2 := m.RepositoryIDsWithConfigurationFunc.nextHook()(v0, v1, v2)
	m.RepositoryIDsWithConfigurationFunc.appendCall(AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// RepositoryIDsWithConfiguration method of the parent
// MockAutoIndexingService instance is invoked and the hook queue is empty.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) SetDefaultHook(hook func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepositoryIDsWithConfiguration method of the parent
// MockAutoIndexingService instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) PushHook(hook func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) SetDefaultReturn(r0 []shared.RepositoryWithAvailableIndexers, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) PushReturn(r0 []shared.RepositoryWithAvailableIndexers, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) nextHook() func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) appendCall(r0 AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall objects
// describing the invocations of this function.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) History() []AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall is an object
// that describes an invocation of method RepositoryIDsWithConfiguration on
// an instance of MockAutoIndexingService.
type AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.RepositoryWithAvailableIndexers
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AutoIndexingServiceRepositoryIDsWithErrorsFunc describes the behavior
// when the RepositoryIDsWithErrors method of the parent
// MockAutoIndexingService instance is invoked.
type AutoIndexingServiceRepositoryIDsWithErrorsFunc struct {
	defaultHook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	hooks       []func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	history     []AutoIndexingServiceRepositoryIDsWithErrorsFuncCall
	mutex       sync.Mutex
}

// RepositoryIDsWithErrors delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAutoIndexingService) RepositoryIDsWithErrors(v0 context.Context, v1 int, v2 int) ([]shared.RepositoryWithCount, int, error) {
	r0, r1, r2 := m.RepositoryIDsWithErrorsFunc.nextHook()(v0, v1, v2)
	m.RepositoryIDsWithErrorsFunc.appendCall(AutoIndexingServiceRepositoryIDsWithErrorsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// RepositoryIDsWithErrors method of the parent MockAutoIndexingService
// instance is invoked and the hook queue is empty.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepositoryIDsWithErrors method of the parent MockAutoIndexingService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) PushHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) SetDefaultReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) PushReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) nextHook() func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) appendCall(r0 AutoIndexingServiceRepositoryIDsWithErrorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AutoIndexingServiceRepositoryIDsWithErrorsFuncCall objects describing the
// invocations of this function.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) History() []AutoIndexingServiceRepositoryIDsWithErrorsFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceRepositoryIDsWithErrorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceRepositoryIDsWithErrorsFuncCall is an object that
// describes an invocation of method RepositoryIDsWithErrors on an instance
// of MockAutoIndexingService.
type AutoIndexingServiceRepositoryIDsWithErrorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.RepositoryWithCount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceRepositoryIDsWithErrorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceRepositoryIDsWithErrorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// MockCodeNavService is a mock implementation of the CodeNavService
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockCodeNavService struct {
	// GetClosestDumpsForBlobFunc is an instance of a mock function object
	// controlling the behavior of the method GetClosestDumpsForBlob.
	GetClosestDumpsForBlobFunc *CodeNavServiceGetClosestDumpsForBlobFunc
	// GetDefinitionsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefinitions.
	GetDefinitionsFunc *CodeNavServiceGetDefinitionsFunc
	// GetDiagnosticsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDiagnostics.
	GetDiagnosticsFunc *CodeNavServiceGetDiagnosticsFunc
	// GetDumpsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDumpsByIDs.
	GetDumpsByIDsFunc *CodeNavServiceGetDumpsByIDsFunc
	// GetHoverFunc is an instance of a mock function object controlling the
	// behavior of the method GetHover.
	GetHoverFunc *CodeNavServiceGetHoverFunc
	// GetImplementationsFunc is an instance of a mock function object
	// controlling the behavior of the method GetImplementations.
	GetImplementationsFunc *CodeNavServiceGetImplementationsFunc
	// GetRangesFunc is an instance of a mock function object controlling
	// the behavior of the method GetRanges.
	GetRangesFunc *CodeNavServiceGetRangesFunc
	// GetReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method GetReferences.
	GetReferencesFunc *CodeNavServiceGetReferencesFunc
	// GetStencilFunc is an instance of a mock function object controlling
	// the behavior of the method GetStencil.
	GetStencilFunc *CodeNavServiceGetStencilFunc
	// GetUnsafeDBFunc is an instance of a mock function object controlling
	// the behavior of the method GetUnsafeDB.
	GetUnsafeDBFunc *CodeNavServiceGetUnsafeDBFunc
}

// NewMockCodeNavService creates a new mock of the CodeNavService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockCodeNavService() *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) (r0 []types.Dump, r1 error) {
				return
			},
		},
		GetDefinitionsFunc: &CodeNavServiceGetDefinitionsFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState) (r0 []types.UploadLocation, r1 error) {
				return
			},
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState) (r0 []shared1.DiagnosticAtUpload, r1 int, r2 error) {
				return
			},
		},
		GetDumpsByIDsFunc: &CodeNavServiceGetDumpsByIDsFunc{
			defaultHook: func(context.Context, []int) (r0 []types.Dump, r1 error) {
				return
			},
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState) (r0 string, r1 types.Range, r2 bool, r3 error) {
				return
			},
		},
		GetImplementationsFunc: &CodeNavServiceGetImplementationsFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ImplementationsCursor) (r0 []types.UploadLocation, r1 shared1.ImplementationsCursor, r2 error) {
				return
			},
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState, int, int) (r0 []shared1.AdjustedCodeIntelligenceRange, r1 error) {
				return
			},
		},
		GetReferencesFunc: &CodeNavServiceGetReferencesFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ReferencesCursor) (r0 []types.UploadLocation, r1 shared1.ReferencesCursor, r2 error) {
				return
			},
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState) (r0 []types.Range, r1 error) {
				return
			},
		},
		GetUnsafeDBFunc: &CodeNavServiceGetUnsafeDBFunc{
			defaultHook: func() (r0 database.DB) {
				return
			},
		},
	}
}

// NewStrictMockCodeNavService creates a new mock of the CodeNavService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockCodeNavService() *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) ([]types.Dump, error) {
				panic("unexpected invocation of MockCodeNavService.GetClosestDumpsForBlob")
			},
		},
		GetDefinitionsFunc: &CodeNavServiceGetDefinitionsFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.UploadLocation, error) {
				panic("unexpected invocation of MockCodeNavService.GetDefinitions")
			},
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]shared1.DiagnosticAtUpload, int, error) {
				panic("unexpected invocation of MockCodeNavService.GetDiagnostics")
			},
		},
		GetDumpsByIDsFunc: &CodeNavServiceGetDumpsByIDsFunc{
			defaultHook: func(context.Context, []int) ([]types.Dump, error) {
				panic("unexpected invocation of MockCodeNavService.GetDumpsByIDs")
			},
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState) (string, types.Range, bool, error) {
				panic("unexpected invocation of MockCodeNavService.GetHover")
			},
		},
		GetImplementationsFunc: &CodeNavServiceGetImplementationsFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ImplementationsCursor) ([]types.UploadLocation, shared1.ImplementationsCursor, error) {
				panic("unexpected invocation of MockCodeNavService.GetImplementations")
			},
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState, int, int) ([]shared1.AdjustedCodeIntelligenceRange, error) {
				panic("unexpected invocation of MockCodeNavService.GetRanges")
			},
		},
		GetReferencesFunc: &CodeNavServiceGetReferencesFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ReferencesCursor) ([]types.UploadLocation, shared1.ReferencesCursor, error) {
				panic("unexpected invocation of MockCodeNavService.GetReferences")
			},
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.Range, error) {
				panic("unexpected invocation of MockCodeNavService.GetStencil")
			},
		},
		GetUnsafeDBFunc: &CodeNavServiceGetUnsafeDBFunc{
			defaultHook: func() database.DB {
				panic("unexpected invocation of MockCodeNavService.GetUnsafeDB")
			},
		},
	}
}

// NewMockCodeNavServiceFrom creates a new mock of the MockCodeNavService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockCodeNavServiceFrom(i CodeNavService) *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: i.GetClosestDumpsForBlob,
		},
		GetDefinitionsFunc: &CodeNavServiceGetDefinitionsFunc{
			defaultHook: i.GetDefinitions,
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: i.GetDiagnostics,
		},
		GetDumpsByIDsFunc: &CodeNavServiceGetDumpsByIDsFunc{
			defaultHook: i.GetDumpsByIDs,
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: i.GetHover,
		},
		GetImplementationsFunc: &CodeNavServiceGetImplementationsFunc{
			defaultHook: i.GetImplementations,
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: i.GetRanges,
		},
		GetReferencesFunc: &CodeNavServiceGetReferencesFunc{
			defaultHook: i.GetReferences,
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: i.GetStencil,
		},
		GetUnsafeDBFunc: &CodeNavServiceGetUnsafeDBFunc{
			defaultHook: i.GetUnsafeDB,
		},
	}
}

// CodeNavServiceGetClosestDumpsForBlobFunc describes the behavior when the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// is invoked.
type CodeNavServiceGetClosestDumpsForBlobFunc struct {
	defaultHook func(context.Context, int, string, string, bool, string) ([]types.Dump, error)
	hooks       []func(context.Context, int, string, string, bool, string) ([]types.Dump, error)
	history     []CodeNavServiceGetClosestDumpsForBlobFuncCall
	mutex       sync.Mutex
}

// GetClosestDumpsForBlob delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetClosestDumpsForBlob(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string) ([]types.Dump, error) {
	r0, r1 := m.GetClosestDumpsForBlobFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.GetClosestDumpsForBlobFunc.appendCall(CodeNavServiceGetClosestDumpsForBlobFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// is invoked and the hook queue is empty.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string) ([]types.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) PushHook(hook func(context.Context, int, string, string, bool, string) ([]types.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) SetDefaultReturn(r0 []types.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool, string) ([]types.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) PushReturn(r0 []types.Dump, r1 error) {
	f.PushHook(func(context.Context, int, string, string, bool, string) ([]types.Dump, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetClosestDumpsForBlobFunc) nextHook() func(context.Context, int, string, string, bool, string) ([]types.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetClosestDumpsForBlobFunc) appendCall(r0 CodeNavServiceGetClosestDumpsForBlobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeNavServiceGetClosestDumpsForBlobFuncCall objects describing the
// invocations of this function.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) History() []CodeNavServiceGetClosestDumpsForBlobFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetClosestDumpsForBlobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetClosestDumpsForBlobFuncCall is an object that describes
// an invocation of method GetClosestDumpsForBlob on an instance of
// MockCodeNavService.
type CodeNavServiceGetClosestDumpsForBlobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetClosestDumpsForBlobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetClosestDumpsForBlobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetDefinitionsFunc describes the behavior when the
// GetDefinitions method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetDefinitionsFunc struct {
	defaultHook func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.UploadLocation, error)
	hooks       []func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.UploadLocation, error)
	history     []CodeNavServiceGetDefinitionsFuncCall
	mutex       sync.Mutex
}

// GetDefinitions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetDefinitions(v0 context.Context, v1 shared1.RequestArgs, v2 codenav.RequestState) ([]types.UploadLocation, error) {
	r0, r1 := m.GetDefinitionsFunc.nextHook()(v0, v1, v2)
	m.GetDefinitionsFunc.appendCall(CodeNavServiceGetDefinitionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDefinitions
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetDefinitionsFunc) SetDefaultHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.UploadLocation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefinitions method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetDefinitionsFunc) PushHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.UploadLocation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetDefinitionsFunc) SetDefaultReturn(r0 []types.UploadLocation, r1 error) {
	f.SetDefaultHook(func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.UploadLocation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetDefinitionsFunc) PushReturn(r0 []types.UploadLocation, r1 error) {
	f.PushHook(func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.UploadLocation, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetDefinitionsFunc) nextHook() func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.UploadLocation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetDefinitionsFunc) appendCall(r0 CodeNavServiceGetDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetDefinitionsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetDefinitionsFunc) History() []CodeNavServiceGetDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetDefinitionsFuncCall is an object that describes an
// invocation of method GetDefinitions on an instance of MockCodeNavService.
type CodeNavServiceGetDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared1.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetDiagnosticsFunc describes the behavior when the
// GetDiagnostics method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetDiagnosticsFunc struct {
	defaultHook func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]shared1.DiagnosticAtUpload, int, error)
	hooks       []func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]shared1.DiagnosticAtUpload, int, error)
	history     []CodeNavServiceGetDiagnosticsFuncCall
	mutex       sync.Mutex
}

// GetDiagnostics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetDiagnostics(v0 context.Context, v1 shared1.RequestArgs, v2 codenav.RequestState) ([]shared1.DiagnosticAtUpload, int, error) {
	r0, r1, r2 := m.GetDiagnosticsFunc.nextHook()(v0, v1, v2)
	m.GetDiagnosticsFunc.appendCall(CodeNavServiceGetDiagnosticsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDiagnostics
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetDiagnosticsFunc) SetDefaultHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]shared1.DiagnosticAtUpload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDiagnostics method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetDiagnosticsFunc) PushHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]shared1.DiagnosticAtUpload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetDiagnosticsFunc) SetDefaultReturn(r0 []shared1.DiagnosticAtUpload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]shared1.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetDiagnosticsFunc) PushReturn(r0 []shared1.DiagnosticAtUpload, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]shared1.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetDiagnosticsFunc) nextHook() func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]shared1.DiagnosticAtUpload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetDiagnosticsFunc) appendCall(r0 CodeNavServiceGetDiagnosticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetDiagnosticsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetDiagnosticsFunc) History() []CodeNavServiceGetDiagnosticsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetDiagnosticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetDiagnosticsFuncCall is an object that describes an
// invocation of method GetDiagnostics on an instance of MockCodeNavService.
type CodeNavServiceGetDiagnosticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared1.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.DiagnosticAtUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetDiagnosticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetDiagnosticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetDumpsByIDsFunc describes the behavior when the
// GetDumpsByIDs method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetDumpsByIDsFunc struct {
	defaultHook func(context.Context, []int) ([]types.Dump, error)
	hooks       []func(context.Context, []int) ([]types.Dump, error)
	history     []CodeNavServiceGetDumpsByIDsFuncCall
	mutex       sync.Mutex
}

// GetDumpsByIDs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeNavService) GetDumpsByIDs(v0 context.Context, v1 []int) ([]types.Dump, error) {
	r0, r1 := m.GetDumpsByIDsFunc.nextHook()(v0, v1)
	m.GetDumpsByIDsFunc.appendCall(CodeNavServiceGetDumpsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDumpsByIDs method
// of the parent MockCodeNavService instance is invoked and the hook queue
// is empty.
func (f *CodeNavServiceGetDumpsByIDsFunc) SetDefaultHook(hook func(context.Context, []int) ([]types.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDumpsByIDs method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetDumpsByIDsFunc) PushHook(hook func(context.Context, []int) ([]types.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetDumpsByIDsFunc) SetDefaultReturn(r0 []types.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, []int) ([]types.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetDumpsByIDsFunc) PushReturn(r0 []types.Dump, r1 error) {
	f.PushHook(func(context.Context, []int) ([]types.Dump, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetDumpsByIDsFunc) nextHook() func(context.Context, []int) ([]types.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetDumpsByIDsFunc) appendCall(r0 CodeNavServiceGetDumpsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetDumpsByIDsFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetDumpsByIDsFunc) History() []CodeNavServiceGetDumpsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetDumpsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetDumpsByIDsFuncCall is an object that describes an
// invocation of method GetDumpsByIDs on an instance of MockCodeNavService.
type CodeNavServiceGetDumpsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetDumpsByIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetDumpsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetHoverFunc describes the behavior when the GetHover
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetHoverFunc struct {
	defaultHook func(context.Context, shared1.RequestArgs, codenav.RequestState) (string, types.Range, bool, error)
	hooks       []func(context.Context, shared1.RequestArgs, codenav.RequestState) (string, types.Range, bool, error)
	history     []CodeNavServiceGetHoverFuncCall
	mutex       sync.Mutex
}

// GetHover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeNavService) GetHover(v0 context.Context, v1 shared1.RequestArgs, v2 codenav.RequestState) (string, types.Range, bool, error) {
	r0, r1, r2, r3 := m.GetHoverFunc.nextHook()(v0, v1, v2)
	m.GetHoverFunc.appendCall(CodeNavServiceGetHoverFuncCall{v0, v1, v2, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the GetHover method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetHoverFunc) SetDefaultHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState) (string, types.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetHover method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetHoverFunc) PushHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState) (string, types.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetHoverFunc) SetDefaultReturn(r0 string, r1 types.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, shared1.RequestArgs, codenav.RequestState) (string, types.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetHoverFunc) PushReturn(r0 string, r1 types.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, shared1.RequestArgs, codenav.RequestState) (string, types.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *CodeNavServiceGetHoverFunc) nextHook() func(context.Context, shared1.RequestArgs, codenav.RequestState) (string, types.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetHoverFunc) appendCall(r0 CodeNavServiceGetHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetHoverFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetHoverFunc) History() []CodeNavServiceGetHoverFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetHoverFuncCall is an object that describes an invocation
// of method GetHover on an instance of MockCodeNavService.
type CodeNavServiceGetHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared1.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 types.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// CodeNavServiceGetImplementationsFunc describes the behavior when the
// GetImplementations method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetImplementationsFunc struct {
	defaultHook func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ImplementationsCursor) ([]types.UploadLocation, shared1.ImplementationsCursor, error)
	hooks       []func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ImplementationsCursor) ([]types.UploadLocation, shared1.ImplementationsCursor, error)
	history     []CodeNavServiceGetImplementationsFuncCall
	mutex       sync.Mutex
}

// GetImplementations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetImplementations(v0 context.Context, v1 shared1.RequestArgs, v2 codenav.RequestState, v3 shared1.ImplementationsCursor) ([]types.UploadLocation, shared1.ImplementationsCursor, error) {
	r0, r1, r2 := m.GetImplementationsFunc.nextHook()(v0, v1, v2, v3)
	m.GetImplementationsFunc.appendCall(CodeNavServiceGetImplementationsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetImplementations
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetImplementationsFunc) SetDefaultHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ImplementationsCursor) ([]types.UploadLocation, shared1.ImplementationsCursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetImplementations method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceGetImplementationsFunc) PushHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ImplementationsCursor) ([]types.UploadLocation, shared1.ImplementationsCursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetImplementationsFunc) SetDefaultReturn(r0 []types.UploadLocation, r1 shared1.ImplementationsCursor, r2 error) {
	f.SetDefaultHook(func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ImplementationsCursor) ([]types.UploadLocation, shared1.ImplementationsCursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetImplementationsFunc) PushReturn(r0 []types.UploadLocation, r1 shared1.ImplementationsCursor, r2 error) {
	f.PushHook(func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ImplementationsCursor) ([]types.UploadLocation, shared1.ImplementationsCursor, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetImplementationsFunc) nextHook() func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ImplementationsCursor) ([]types.UploadLocation, shared1.ImplementationsCursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetImplementationsFunc) appendCall(r0 CodeNavServiceGetImplementationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetImplementationsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetImplementationsFunc) History() []CodeNavServiceGetImplementationsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetImplementationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetImplementationsFuncCall is an object that describes an
// invocation of method GetImplementations on an instance of
// MockCodeNavService.
type CodeNavServiceGetImplementationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared1.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 shared1.ImplementationsCursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared1.ImplementationsCursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetImplementationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetImplementationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetRangesFunc describes the behavior when the GetRanges
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetRangesFunc struct {
	defaultHook func(context.Context, shared1.RequestArgs, codenav.RequestState, int, int) ([]shared1.AdjustedCodeIntelligenceRange, error)
	hooks       []func(context.Context, shared1.RequestArgs, codenav.RequestState, int, int) ([]shared1.AdjustedCodeIntelligenceRange, error)
	history     []CodeNavServiceGetRangesFuncCall
	mutex       sync.Mutex
}

// GetRanges delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeNavService) GetRanges(v0 context.Context, v1 shared1.RequestArgs, v2 codenav.RequestState, v3 int, v4 int) ([]shared1.AdjustedCodeIntelligenceRange, error) {
	r0, r1 := m.GetRangesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetRangesFunc.appendCall(CodeNavServiceGetRangesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRanges method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetRangesFunc) SetDefaultHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState, int, int) ([]shared1.AdjustedCodeIntelligenceRange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRanges method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetRangesFunc) PushHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState, int, int) ([]shared1.AdjustedCodeIntelligenceRange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetRangesFunc) SetDefaultReturn(r0 []shared1.AdjustedCodeIntelligenceRange, r1 error) {
	f.SetDefaultHook(func(context.Context, shared1.RequestArgs, codenav.RequestState, int, int) ([]shared1.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetRangesFunc) PushReturn(r0 []shared1.AdjustedCodeIntelligenceRange, r1 error) {
	f.PushHook(func(context.Context, shared1.RequestArgs, codenav.RequestState, int, int) ([]shared1.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetRangesFunc) nextHook() func(context.Context, shared1.RequestArgs, codenav.RequestState, int, int) ([]shared1.AdjustedCodeIntelligenceRange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetRangesFunc) appendCall(r0 CodeNavServiceGetRangesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetRangesFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetRangesFunc) History() []CodeNavServiceGetRangesFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetRangesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetRangesFuncCall is an object that describes an invocation
// of method GetRanges on an instance of MockCodeNavService.
type CodeNavServiceGetRangesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared1.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.AdjustedCodeIntelligenceRange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetRangesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetRangesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetReferencesFunc describes the behavior when the
// GetReferences method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetReferencesFunc struct {
	defaultHook func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ReferencesCursor) ([]types.UploadLocation, shared1.ReferencesCursor, error)
	hooks       []func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ReferencesCursor) ([]types.UploadLocation, shared1.ReferencesCursor, error)
	history     []CodeNavServiceGetReferencesFuncCall
	mutex       sync.Mutex
}

// GetReferences delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeNavService) GetReferences(v0 context.Context, v1 shared1.RequestArgs, v2 codenav.RequestState, v3 shared1.ReferencesCursor) ([]types.UploadLocation, shared1.ReferencesCursor, error) {
	r0, r1, r2 := m.GetReferencesFunc.nextHook()(v0, v1, v2, v3)
	m.GetReferencesFunc.appendCall(CodeNavServiceGetReferencesFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetReferences method
// of the parent MockCodeNavService instance is invoked and the hook queue
// is empty.
func (f *CodeNavServiceGetReferencesFunc) SetDefaultHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ReferencesCursor) ([]types.UploadLocation, shared1.ReferencesCursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReferences method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetReferencesFunc) PushHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ReferencesCursor) ([]types.UploadLocation, shared1.ReferencesCursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetReferencesFunc) SetDefaultReturn(r0 []types.UploadLocation, r1 shared1.ReferencesCursor, r2 error) {
	f.SetDefaultHook(func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ReferencesCursor) ([]types.UploadLocation, shared1.ReferencesCursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetReferencesFunc) PushReturn(r0 []types.UploadLocation, r1 shared1.ReferencesCursor, r2 error) {
	f.PushHook(func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ReferencesCursor) ([]types.UploadLocation, shared1.ReferencesCursor, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetReferencesFunc) nextHook() func(context.Context, shared1.RequestArgs, codenav.RequestState, shared1.ReferencesCursor) ([]types.UploadLocation, shared1.ReferencesCursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetReferencesFunc) appendCall(r0 CodeNavServiceGetReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetReferencesFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetReferencesFunc) History() []CodeNavServiceGetReferencesFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetReferencesFuncCall is an object that describes an
// invocation of method GetReferences on an instance of MockCodeNavService.
type CodeNavServiceGetReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared1.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 shared1.ReferencesCursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared1.ReferencesCursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetStencilFunc describes the behavior when the GetStencil
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetStencilFunc struct {
	defaultHook func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.Range, error)
	hooks       []func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.Range, error)
	history     []CodeNavServiceGetStencilFuncCall
	mutex       sync.Mutex
}

// GetStencil delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeNavService) GetStencil(v0 context.Context, v1 shared1.RequestArgs, v2 codenav.RequestState) ([]types.Range, error) {
	r0, r1 := m.GetStencilFunc.nextHook()(v0, v1, v2)
	m.GetStencilFunc.appendCall(CodeNavServiceGetStencilFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStencil method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetStencilFunc) SetDefaultHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.Range, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStencil method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetStencilFunc) PushHook(hook func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.Range, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetStencilFunc) SetDefaultReturn(r0 []types.Range, r1 error) {
	f.SetDefaultHook(func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.Range, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetStencilFunc) PushReturn(r0 []types.Range, r1 error) {
	f.PushHook(func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.Range, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetStencilFunc) nextHook() func(context.Context, shared1.RequestArgs, codenav.RequestState) ([]types.Range, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetStencilFunc) appendCall(r0 CodeNavServiceGetStencilFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetStencilFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetStencilFunc) History() []CodeNavServiceGetStencilFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetStencilFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetStencilFuncCall is an object that describes an
// invocation of method GetStencil on an instance of MockCodeNavService.
type CodeNavServiceGetStencilFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared1.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Range
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetStencilFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetStencilFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetUnsafeDBFunc describes the behavior when the GetUnsafeDB
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetUnsafeDBFunc struct {
	defaultHook func() database.DB
	hooks       []func() database.DB
	history     []CodeNavServiceGetUnsafeDBFuncCall
	mutex       sync.Mutex
}

// GetUnsafeDB delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeNavService) GetUnsafeDB() database.DB {
	r0 := m.GetUnsafeDBFunc.nextHook()()
	m.GetUnsafeDBFunc.appendCall(CodeNavServiceGetUnsafeDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetUnsafeDB method
// of the parent MockCodeNavService instance is invoked and the hook queue
// is empty.
func (f *CodeNavServiceGetUnsafeDBFunc) SetDefaultHook(hook func() database.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUnsafeDB method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetUnsafeDBFunc) PushHook(hook func() database.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetUnsafeDBFunc) SetDefaultReturn(r0 database.DB) {
	f.SetDefaultHook(func() database.DB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetUnsafeDBFunc) PushReturn(r0 database.DB) {
	f.PushHook(func() database.DB {
		return r0
	})
}

func (f *CodeNavServiceGetUnsafeDBFunc) nextHook() func() database.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetUnsafeDBFunc) appendCall(r0 CodeNavServiceGetUnsafeDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetUnsafeDBFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetUnsafeDBFunc) History() []CodeNavServiceGetUnsafeDBFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetUnsafeDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetUnsafeDBFuncCall is an object that describes an
// invocation of method GetUnsafeDB on an instance of MockCodeNavService.
type CodeNavServiceGetUnsafeDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetUnsafeDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetUnsafeDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverClient is a mock implementation of the GitserverClient
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockGitserverClient struct {
	// CommitsExistFunc is an instance of a mock function object controlling
	// the behavior of the method CommitsExist.
	CommitsExistFunc *GitserverClientCommitsExistFunc
	// DiffPathFunc is an instance of a mock function object controlling the
	// behavior of the method DiffPath.
	DiffPathFunc *GitserverClientDiffPathFunc
}

// NewMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: func(context.Context, []gitserver.RepositoryCommit) (r0 []bool, r1 error) {
				return
			},
		},
		DiffPathFunc: &GitserverClientDiffPathFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) (r0 []*diff.Hunk, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
				panic("unexpected invocation of MockGitserverClient.CommitsExist")
			},
		},
		DiffPathFunc: &GitserverClientDiffPathFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
				panic("unexpected invocation of MockGitserverClient.DiffPath")
			},
		},
	}
}

// NewMockGitserverClientFrom creates a new mock of the MockGitserverClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient {
	return &MockGitserverClient{
		CommitsExistFunc: &GitserverClientCommitsExistFunc{
			defaultHook: i.CommitsExist,
		},
		DiffPathFunc: &GitserverClientDiffPathFunc{
			defaultHook: i.DiffPath,
		},
	}
}

// GitserverClientCommitsExistFunc describes the behavior when the
// CommitsExist method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientCommitsExistFunc struct {
	defaultHook func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)
	hooks       []func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)
	history     []GitserverClientCommitsExistFuncCall
	mutex       sync.Mutex
}

// CommitsExist delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitsExist(v0 context.Context, v1 []gitserver.RepositoryCommit) ([]bool, error) {
	r0, r1 := m.CommitsExistFunc.nextHook()(v0, v1)
	m.CommitsExistFunc.appendCall(GitserverClientCommitsExistFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitsExist method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientCommitsExistFunc) SetDefaultHook(hook func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitsExist method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientCommitsExistFunc) PushHook(hook func(context.Context, []gitserver.RepositoryCommit) ([]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitsExistFunc) SetDefaultReturn(r0 []bool, r1 error) {
	f.SetDefaultHook(func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitsExistFunc) PushReturn(r0 []bool, r1 error) {
	f.PushHook(func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitsExistFunc) nextHook() func(context.Context, []gitserver.RepositoryCommit) ([]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitsExistFunc) appendCall(r0 GitserverClientCommitsExistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitsExistFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitsExistFunc) History() []GitserverClientCommitsExistFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitsExistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitsExistFuncCall is an object that describes an
// invocation of method CommitsExist on an instance of MockGitserverClient.
type GitserverClientCommitsExistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []gitserver.RepositoryCommit
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitsExistFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitsExistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientDiffPathFunc describes the behavior when the DiffPath
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientDiffPathFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)
	history     []GitserverClientDiffPathFuncCall
	mutex       sync.Mutex
}

// DiffPath delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverClient) DiffPath(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 string, v4 string, v5 string) ([]*diff.Hunk, error) {
	r0, r1 := m.DiffPathFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.DiffPathFunc.appendCall(GitserverClientDiffPathFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DiffPath method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientDiffPathFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DiffPath method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientDiffPathFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientDiffPathFunc) SetDefaultReturn(r0 []*diff.Hunk, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientDiffPathFunc) PushReturn(r0 []*diff.Hunk, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
		return r0, r1
	})
}

func (f *GitserverClientDiffPathFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientDiffPathFunc) appendCall(r0 GitserverClientDiffPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientDiffPathFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientDiffPathFunc) History() []GitserverClientDiffPathFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientDiffPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientDiffPathFuncCall is an object that describes an invocation
// of method DiffPath on an instance of MockGitserverClient.
type GitserverClientDiffPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*diff.Hunk
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientDiffPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientDiffPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockPolicyService is a mock implementation of the PolicyService interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockPolicyService struct {
	// GetRetentionPolicyOverviewFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetRetentionPolicyOverview.
	GetRetentionPolicyOverviewFunc *PolicyServiceGetRetentionPolicyOverviewFunc
}

// NewMockPolicyService creates a new mock of the PolicyService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockPolicyService() *MockPolicyService {
	return &MockPolicyService{
		GetRetentionPolicyOverviewFunc: &PolicyServiceGetRetentionPolicyOverviewFunc{
			defaultHook: func(context.Context, types.Upload, bool, int, int64, string, time.Time) (r0 []types.RetentionPolicyMatchCandidate, r1 int, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockPolicyService creates a new mock of the PolicyService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockPolicyService() *MockPolicyService {
	return &MockPolicyService{
		GetRetentionPolicyOverviewFunc: &PolicyServiceGetRetentionPolicyOverviewFunc{
			defaultHook: func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
				panic("unexpected invocation of MockPolicyService.GetRetentionPolicyOverview")
			},
		},
	}
}

// NewMockPolicyServiceFrom creates a new mock of the MockPolicyService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockPolicyServiceFrom(i PolicyService) *MockPolicyService {
	return &MockPolicyService{
		GetRetentionPolicyOverviewFunc: &PolicyServiceGetRetentionPolicyOverviewFunc{
			defaultHook: i.GetRetentionPolicyOverview,
		},
	}
}

// PolicyServiceGetRetentionPolicyOverviewFunc describes the behavior when
// the GetRetentionPolicyOverview method of the parent MockPolicyService
// instance is invoked.
type PolicyServiceGetRetentionPolicyOverviewFunc struct {
	defaultHook func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error)
	hooks       []func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error)
	history     []PolicyServiceGetRetentionPolicyOverviewFuncCall
	mutex       sync.Mutex
}

// GetRetentionPolicyOverview delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPolicyService) GetRetentionPolicyOverview(v0 context.Context, v1 types.Upload, v2 bool, v3 int, v4 int64, v5 string, v6 time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
	r0, r1, r2 := m.GetRetentionPolicyOverviewFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetRetentionPolicyOverviewFunc.appendCall(PolicyServiceGetRetentionPolicyOverviewFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetRetentionPolicyOverview method of the parent MockPolicyService
// instance is invoked and the hook queue is empty.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) SetDefaultHook(hook func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRetentionPolicyOverview method of the parent MockPolicyService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) PushHook(hook func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) SetDefaultReturn(r0 []types.RetentionPolicyMatchCandidate, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) PushReturn(r0 []types.RetentionPolicyMatchCandidate, r1 int, r2 error) {
	f.PushHook(func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
		return r0, r1, r2
	})
}

func (f *PolicyServiceGetRetentionPolicyOverviewFunc) nextHook() func(context.Context, types.Upload, bool, int, int64, string, time.Time) ([]types.RetentionPolicyMatchCandidate, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PolicyServiceGetRetentionPolicyOverviewFunc) appendCall(r0 PolicyServiceGetRetentionPolicyOverviewFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PolicyServiceGetRetentionPolicyOverviewFuncCall objects describing the
// invocations of this function.
func (f *PolicyServiceGetRetentionPolicyOverviewFunc) History() []PolicyServiceGetRetentionPolicyOverviewFuncCall {
	f.mutex.Lock()
	history := make([]PolicyServiceGetRetentionPolicyOverviewFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PolicyServiceGetRetentionPolicyOverviewFuncCall is an object that
// describes an invocation of method GetRetentionPolicyOverview on an
// instance of MockPolicyService.
type PolicyServiceGetRetentionPolicyOverviewFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.Upload
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int64
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.RetentionPolicyMatchCandidate
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PolicyServiceGetRetentionPolicyOverviewFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PolicyServiceGetRetentionPolicyOverviewFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// MockUploadsService is a mock implementation of the UploadsService
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockUploadsService struct {
	// GetAuditLogsForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method GetAuditLogsForUpload.
	GetAuditLogsForUploadFunc *UploadsServiceGetAuditLogsForUploadFunc
	// GetListTagsFunc is an instance of a mock function object controlling
	// the behavior of the method GetListTags.
	GetListTagsFunc *UploadsServiceGetListTagsFunc
	// GetUploadDocumentsForPathFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadDocumentsForPath.
	GetUploadDocumentsForPathFunc *UploadsServiceGetUploadDocumentsForPathFunc
	// GetUploadsFunc is an instance of a mock function object controlling
	// the behavior of the method GetUploads.
	GetUploadsFunc *UploadsServiceGetUploadsFunc
	// GetUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByIDs.
	GetUploadsByIDsFunc *UploadsServiceGetUploadsByIDsFunc
}

// NewMockUploadsService creates a new mock of the UploadsService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) (r0 []types.UploadLog, r1 error) {
				return
			},
		},
		GetListTagsFunc: &UploadsServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (r0 []*gitdomain.Tag, r1 error) {
				return
			},
		},
		GetUploadDocumentsForPathFunc: &UploadsServiceGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) (r0 []string, r1 int, r2 error) {
				return
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, shared2.GetUploadsOptions) (r0 []types.Upload, r1 int, r2 error) {
				return
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []types.Upload, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUploadsService creates a new mock of the UploadsService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) ([]types.UploadLog, error) {
				panic("unexpected invocation of MockUploadsService.GetAuditLogsForUpload")
			},
		},
		GetListTagsFunc: &UploadsServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
				panic("unexpected invocation of MockUploadsService.GetListTags")
			},
		},
		GetUploadDocumentsForPathFunc: &UploadsServiceGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) ([]string, int, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadDocumentsForPath")
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, shared2.GetUploadsOptions) ([]types.Upload, int, error) {
				panic("unexpected invocation of MockUploadsService.GetUploads")
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]types.Upload, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadsByIDs")
			},
		},
	}
}

// NewMockUploadsServiceFrom creates a new mock of the MockUploadsService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUploadsServiceFrom(i UploadsService) *MockUploadsService {
	return &MockUploadsService{
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: i.GetAuditLogsForUpload,
		},
		GetListTagsFunc: &UploadsServiceGetListTagsFunc{
			defaultHook: i.GetListTags,
		},
		GetUploadDocumentsForPathFunc: &UploadsServiceGetUploadDocumentsForPathFunc{
			defaultHook: i.GetUploadDocumentsForPath,
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: i.GetUploads,
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: i.GetUploadsByIDs,
		},
	}
}

// UploadsServiceGetAuditLogsForUploadFunc describes the behavior when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetAuditLogsForUploadFunc struct {
	defaultHook func(context.Context, int) ([]types.UploadLog, error)
	hooks       []func(context.Context, int) ([]types.UploadLog, error)
	history     []UploadsServiceGetAuditLogsForUploadFuncCall
	mutex       sync.Mutex
}

// GetAuditLogsForUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetAuditLogsForUpload(v0 context.Context, v1 int) ([]types.UploadLog, error) {
	r0, r1 := m.GetAuditLogsForUploadFunc.nextHook()(v0, v1)
	m.GetAuditLogsForUploadFunc.appendCall(UploadsServiceGetAuditLogsForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked and the hook queue is empty.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultHook(hook func(context.Context, int) ([]types.UploadLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuditLogsForUpload method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushHook(hook func(context.Context, int) ([]types.UploadLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultReturn(r0 []types.UploadLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]types.UploadLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushReturn(r0 []types.UploadLog, r1 error) {
	f.PushHook(func(context.Context, int) ([]types.UploadLog, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) nextHook() func(context.Context, int) ([]types.UploadLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) appendCall(r0 UploadsServiceGetAuditLogsForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetAuditLogsForUploadFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetAuditLogsForUploadFunc) History() []UploadsServiceGetAuditLogsForUploadFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetAuditLogsForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetAuditLogsForUploadFuncCall is an object that describes
// an invocation of method GetAuditLogsForUpload on an instance of
// MockUploadsService.
type UploadsServiceGetAuditLogsForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UploadLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetListTagsFunc describes the behavior when the GetListTags
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetListTagsFunc struct {
	defaultHook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	hooks       []func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	history     []UploadsServiceGetListTagsFuncCall
	mutex       sync.Mutex
}

// GetListTags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetListTags(v0 context.Context, v1 api.RepoName, v2 ...string) ([]*gitdomain.Tag, error) {
	r0, r1 := m.GetListTagsFunc.nextHook()(v0, v1, v2...)
	m.GetListTagsFunc.appendCall(UploadsServiceGetListTagsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetListTags method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceGetListTagsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetListTags method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetListTagsFunc) PushHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetListTagsFunc) SetDefaultReturn(r0 []*gitdomain.Tag, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetListTagsFunc) PushReturn(r0 []*gitdomain.Tag, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetListTagsFunc) nextHook() func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetListTagsFunc) appendCall(r0 UploadsServiceGetListTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetListTagsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetListTagsFunc) History() []UploadsServiceGetListTagsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetListTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetListTagsFuncCall is an object that describes an
// invocation of method GetListTags on an instance of MockUploadsService.
type UploadsServiceGetListTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Tag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetListTagsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetListTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetUploadDocumentsForPathFunc describes the behavior when
// the GetUploadDocumentsForPath method of the parent MockUploadsService
// instance is invoked.
type UploadsServiceGetUploadDocumentsForPathFunc struct {
	defaultHook func(context.Context, int, string) ([]string, int, error)
	hooks       []func(context.Context, int, string) ([]string, int, error)
	history     []UploadsServiceGetUploadDocumentsForPathFuncCall
	mutex       sync.Mutex
}

// GetUploadDocumentsForPath delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadDocumentsForPath(v0 context.Context, v1 int, v2 string) ([]string, int, error) {
	r0, r1, r2 := m.GetUploadDocumentsForPathFunc.nextHook()(v0, v1, v2)
	m.GetUploadDocumentsForPathFunc.appendCall(UploadsServiceGetUploadDocumentsForPathFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetUploadDocumentsForPath method of the parent MockUploadsService
// instance is invoked and the hook queue is empty.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) SetDefaultHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadDocumentsForPath method of the parent MockUploadsService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) PushHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) SetDefaultReturn(r0 []string, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) PushReturn(r0 []string, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadDocumentsForPathFunc) nextHook() func(context.Context, int, string) ([]string, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadDocumentsForPathFunc) appendCall(r0 UploadsServiceGetUploadDocumentsForPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetUploadDocumentsForPathFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) History() []UploadsServiceGetUploadDocumentsForPathFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadDocumentsForPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadDocumentsForPathFuncCall is an object that
// describes an invocation of method GetUploadDocumentsForPath on an
// instance of MockUploadsService.
type UploadsServiceGetUploadDocumentsForPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadDocumentsForPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadDocumentsForPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsFunc describes the behavior when the GetUploads
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetUploadsFunc struct {
	defaultHook func(context.Context, shared2.GetUploadsOptions) ([]types.Upload, int, error)
	hooks       []func(context.Context, shared2.GetUploadsOptions) ([]types.Upload, int, error)
	history     []UploadsServiceGetUploadsFuncCall
	mutex       sync.Mutex
}

// GetUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploads(v0 context.Context, v1 shared2.GetUploadsOptions) ([]types.Upload, int, error) {
	r0, r1, r2 := m.GetUploadsFunc.nextHook()(v0, v1)
	m.GetUploadsFunc.appendCall(UploadsServiceGetUploadsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploads method of
// the parent MockUploadsService instance is invoked and the hook queue is
// empty.
func (f *UploadsServiceGetUploadsFunc) SetDefaultHook(hook func(context.Context, shared2.GetUploadsOptions) ([]types.Upload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploads method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsFunc) PushHook(hook func(context.Context, shared2.GetUploadsOptions) ([]types.Upload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsFunc) SetDefaultReturn(r0 []types.Upload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared2.GetUploadsOptions) ([]types.Upload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsFunc) PushReturn(r0 []types.Upload, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared2.GetUploadsOptions) ([]types.Upload, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadsFunc) nextHook() func(context.Context, shared2.GetUploadsOptions) ([]types.Upload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsFunc) appendCall(r0 UploadsServiceGetUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetUploadsFunc) History() []UploadsServiceGetUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsFuncCall is an object that describes an
// invocation of method GetUploads on an instance of MockUploadsService.
type UploadsServiceGetUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared2.GetUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsByIDsFunc describes the behavior when the
// GetUploadsByIDs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]types.Upload, error)
	hooks       []func(context.Context, ...int) ([]types.Upload, error)
	history     []UploadsServiceGetUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]types.Upload, error) {
	r0, r1 := m.GetUploadsByIDsFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsFunc.appendCall(UploadsServiceGetUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsByIDs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]types.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDs method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]types.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultReturn(r0 []types.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]types.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsByIDsFunc) PushReturn(r0 []types.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]types.Upload, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]types.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsByIDsFunc) appendCall(r0 UploadsServiceGetUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsByIDsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetUploadsByIDsFunc) History() []UploadsServiceGetUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsByIDsFuncCall is an object that describes an
// invocation of method GetUploadsByIDs on an instance of
// MockUploadsService.
type UploadsServiceGetUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
