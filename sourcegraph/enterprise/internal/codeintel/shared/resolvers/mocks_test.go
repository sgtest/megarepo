// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package sharedresolvers

import (
	"context"
	"sync"

	shared "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/autoindexing/shared"
	types "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/shared/types"
	shared1 "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/shared"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
)

// MockAutoIndexingService is a mock implementation of the
// AutoIndexingService interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/shared/resolvers)
// used for unit testing.
type MockAutoIndexingService struct {
	// GetIndexByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexByID.
	GetIndexByIDFunc *AutoIndexingServiceGetIndexByIDFunc
	// GetIndexesFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexes.
	GetIndexesFunc *AutoIndexingServiceGetIndexesFunc
	// GetIndexesByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetIndexesByIDs.
	GetIndexesByIDsFunc *AutoIndexingServiceGetIndexesByIDsFunc
	// GetListTagsFunc is an instance of a mock function object controlling
	// the behavior of the method GetListTags.
	GetListTagsFunc *AutoIndexingServiceGetListTagsFunc
	// GetUnsafeDBFunc is an instance of a mock function object controlling
	// the behavior of the method GetUnsafeDB.
	GetUnsafeDBFunc *AutoIndexingServiceGetUnsafeDBFunc
	// NumRepositoriesWithCodeIntelligenceFunc is an instance of a mock
	// function object controlling the behavior of the method
	// NumRepositoriesWithCodeIntelligence.
	NumRepositoriesWithCodeIntelligenceFunc *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc
	// RepositoryIDsWithConfigurationFunc is an instance of a mock function
	// object controlling the behavior of the method
	// RepositoryIDsWithConfiguration.
	RepositoryIDsWithConfigurationFunc *AutoIndexingServiceRepositoryIDsWithConfigurationFunc
	// RepositoryIDsWithErrorsFunc is an instance of a mock function object
	// controlling the behavior of the method RepositoryIDsWithErrors.
	RepositoryIDsWithErrorsFunc *AutoIndexingServiceRepositoryIDsWithErrorsFunc
}

// NewMockAutoIndexingService creates a new mock of the AutoIndexingService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		GetIndexByIDFunc: &AutoIndexingServiceGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 types.Index, r1 bool, r2 error) {
				return
			},
		},
		GetIndexesFunc: &AutoIndexingServiceGetIndexesFunc{
			defaultHook: func(context.Context, shared.GetIndexesOptions) (r0 []types.Index, r1 int, r2 error) {
				return
			},
		},
		GetIndexesByIDsFunc: &AutoIndexingServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []types.Index, r1 error) {
				return
			},
		},
		GetListTagsFunc: &AutoIndexingServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (r0 []*gitdomain.Tag, r1 error) {
				return
			},
		},
		GetUnsafeDBFunc: &AutoIndexingServiceGetUnsafeDBFunc{
			defaultHook: func() (r0 database.DB) {
				return
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		RepositoryIDsWithConfigurationFunc: &AutoIndexingServiceRepositoryIDsWithConfigurationFunc{
			defaultHook: func(context.Context, int, int) (r0 []shared.RepositoryWithAvailableIndexers, r1 int, r2 error) {
				return
			},
		},
		RepositoryIDsWithErrorsFunc: &AutoIndexingServiceRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) (r0 []shared.RepositoryWithCount, r1 int, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockAutoIndexingService creates a new mock of the
// AutoIndexingService interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		GetIndexByIDFunc: &AutoIndexingServiceGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (types.Index, bool, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetIndexByID")
			},
		},
		GetIndexesFunc: &AutoIndexingServiceGetIndexesFunc{
			defaultHook: func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetIndexes")
			},
		},
		GetIndexesByIDsFunc: &AutoIndexingServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]types.Index, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetIndexesByIDs")
			},
		},
		GetListTagsFunc: &AutoIndexingServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
				panic("unexpected invocation of MockAutoIndexingService.GetListTags")
			},
		},
		GetUnsafeDBFunc: &AutoIndexingServiceGetUnsafeDBFunc{
			defaultHook: func() database.DB {
				panic("unexpected invocation of MockAutoIndexingService.GetUnsafeDB")
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockAutoIndexingService.NumRepositoriesWithCodeIntelligence")
			},
		},
		RepositoryIDsWithConfigurationFunc: &AutoIndexingServiceRepositoryIDsWithConfigurationFunc{
			defaultHook: func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
				panic("unexpected invocation of MockAutoIndexingService.RepositoryIDsWithConfiguration")
			},
		},
		RepositoryIDsWithErrorsFunc: &AutoIndexingServiceRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
				panic("unexpected invocation of MockAutoIndexingService.RepositoryIDsWithErrors")
			},
		},
	}
}

// NewMockAutoIndexingServiceFrom creates a new mock of the
// MockAutoIndexingService interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAutoIndexingServiceFrom(i AutoIndexingService) *MockAutoIndexingService {
	return &MockAutoIndexingService{
		GetIndexByIDFunc: &AutoIndexingServiceGetIndexByIDFunc{
			defaultHook: i.GetIndexByID,
		},
		GetIndexesFunc: &AutoIndexingServiceGetIndexesFunc{
			defaultHook: i.GetIndexes,
		},
		GetIndexesByIDsFunc: &AutoIndexingServiceGetIndexesByIDsFunc{
			defaultHook: i.GetIndexesByIDs,
		},
		GetListTagsFunc: &AutoIndexingServiceGetListTagsFunc{
			defaultHook: i.GetListTags,
		},
		GetUnsafeDBFunc: &AutoIndexingServiceGetUnsafeDBFunc{
			defaultHook: i.GetUnsafeDB,
		},
		NumRepositoriesWithCodeIntelligenceFunc: &AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: i.NumRepositoriesWithCodeIntelligence,
		},
		RepositoryIDsWithConfigurationFunc: &AutoIndexingServiceRepositoryIDsWithConfigurationFunc{
			defaultHook: i.RepositoryIDsWithConfiguration,
		},
		RepositoryIDsWithErrorsFunc: &AutoIndexingServiceRepositoryIDsWithErrorsFunc{
			defaultHook: i.RepositoryIDsWithErrors,
		},
	}
}

// AutoIndexingServiceGetIndexByIDFunc describes the behavior when the
// GetIndexByID method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetIndexByIDFunc struct {
	defaultHook func(context.Context, int) (types.Index, bool, error)
	hooks       []func(context.Context, int) (types.Index, bool, error)
	history     []AutoIndexingServiceGetIndexByIDFuncCall
	mutex       sync.Mutex
}

// GetIndexByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetIndexByID(v0 context.Context, v1 int) (types.Index, bool, error) {
	r0, r1, r2 := m.GetIndexByIDFunc.nextHook()(v0, v1)
	m.GetIndexByIDFunc.appendCall(AutoIndexingServiceGetIndexByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexByID method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (types.Index, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexByID method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceGetIndexByIDFunc) PushHook(hook func(context.Context, int) (types.Index, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetIndexByIDFunc) SetDefaultReturn(r0 types.Index, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (types.Index, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetIndexByIDFunc) PushReturn(r0 types.Index, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (types.Index, bool, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceGetIndexByIDFunc) nextHook() func(context.Context, int) (types.Index, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetIndexByIDFunc) appendCall(r0 AutoIndexingServiceGetIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetIndexByIDFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetIndexByIDFunc) History() []AutoIndexingServiceGetIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetIndexByIDFuncCall is an object that describes an
// invocation of method GetIndexByID on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceGetIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AutoIndexingServiceGetIndexesFunc describes the behavior when the
// GetIndexes method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetIndexesFunc struct {
	defaultHook func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error)
	hooks       []func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error)
	history     []AutoIndexingServiceGetIndexesFuncCall
	mutex       sync.Mutex
}

// GetIndexes delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetIndexes(v0 context.Context, v1 shared.GetIndexesOptions) ([]types.Index, int, error) {
	r0, r1, r2 := m.GetIndexesFunc.nextHook()(v0, v1)
	m.GetIndexesFunc.appendCall(AutoIndexingServiceGetIndexesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexes method of
// the parent MockAutoIndexingService instance is invoked and the hook queue
// is empty.
func (f *AutoIndexingServiceGetIndexesFunc) SetDefaultHook(hook func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexes method of the parent MockAutoIndexingService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AutoIndexingServiceGetIndexesFunc) PushHook(hook func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetIndexesFunc) SetDefaultReturn(r0 []types.Index, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetIndexesFunc) PushReturn(r0 []types.Index, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceGetIndexesFunc) nextHook() func(context.Context, shared.GetIndexesOptions) ([]types.Index, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetIndexesFunc) appendCall(r0 AutoIndexingServiceGetIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetIndexesFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetIndexesFunc) History() []AutoIndexingServiceGetIndexesFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetIndexesFuncCall is an object that describes an
// invocation of method GetIndexes on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceGetIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AutoIndexingServiceGetIndexesByIDsFunc describes the behavior when the
// GetIndexesByIDs method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetIndexesByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]types.Index, error)
	hooks       []func(context.Context, ...int) ([]types.Index, error)
	history     []AutoIndexingServiceGetIndexesByIDsFuncCall
	mutex       sync.Mutex
}

// GetIndexesByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]types.Index, error) {
	r0, r1 := m.GetIndexesByIDsFunc.nextHook()(v0, v1...)
	m.GetIndexesByIDsFunc.appendCall(AutoIndexingServiceGetIndexesByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexesByIDs
// method of the parent MockAutoIndexingService instance is invoked and the
// hook queue is empty.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]types.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexesByIDs method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]types.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) SetDefaultReturn(r0 []types.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]types.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) PushReturn(r0 []types.Index, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]types.Index, error) {
		return r0, r1
	})
}

func (f *AutoIndexingServiceGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]types.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetIndexesByIDsFunc) appendCall(r0 AutoIndexingServiceGetIndexesByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetIndexesByIDsFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetIndexesByIDsFunc) History() []AutoIndexingServiceGetIndexesByIDsFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetIndexesByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetIndexesByIDsFuncCall is an object that describes an
// invocation of method GetIndexesByIDs on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetIndexesByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c AutoIndexingServiceGetIndexesByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetIndexesByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AutoIndexingServiceGetListTagsFunc describes the behavior when the
// GetListTags method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetListTagsFunc struct {
	defaultHook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	hooks       []func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	history     []AutoIndexingServiceGetListTagsFuncCall
	mutex       sync.Mutex
}

// GetListTags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetListTags(v0 context.Context, v1 api.RepoName, v2 ...string) ([]*gitdomain.Tag, error) {
	r0, r1 := m.GetListTagsFunc.nextHook()(v0, v1, v2...)
	m.GetListTagsFunc.appendCall(AutoIndexingServiceGetListTagsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetListTags method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceGetListTagsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetListTags method of the parent MockAutoIndexingService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AutoIndexingServiceGetListTagsFunc) PushHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetListTagsFunc) SetDefaultReturn(r0 []*gitdomain.Tag, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetListTagsFunc) PushReturn(r0 []*gitdomain.Tag, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

func (f *AutoIndexingServiceGetListTagsFunc) nextHook() func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetListTagsFunc) appendCall(r0 AutoIndexingServiceGetListTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetListTagsFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetListTagsFunc) History() []AutoIndexingServiceGetListTagsFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetListTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetListTagsFuncCall is an object that describes an
// invocation of method GetListTags on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetListTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Tag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c AutoIndexingServiceGetListTagsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetListTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AutoIndexingServiceGetUnsafeDBFunc describes the behavior when the
// GetUnsafeDB method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceGetUnsafeDBFunc struct {
	defaultHook func() database.DB
	hooks       []func() database.DB
	history     []AutoIndexingServiceGetUnsafeDBFuncCall
	mutex       sync.Mutex
}

// GetUnsafeDB delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) GetUnsafeDB() database.DB {
	r0 := m.GetUnsafeDBFunc.nextHook()()
	m.GetUnsafeDBFunc.appendCall(AutoIndexingServiceGetUnsafeDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetUnsafeDB method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceGetUnsafeDBFunc) SetDefaultHook(hook func() database.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUnsafeDB method of the parent MockAutoIndexingService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AutoIndexingServiceGetUnsafeDBFunc) PushHook(hook func() database.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceGetUnsafeDBFunc) SetDefaultReturn(r0 database.DB) {
	f.SetDefaultHook(func() database.DB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceGetUnsafeDBFunc) PushReturn(r0 database.DB) {
	f.PushHook(func() database.DB {
		return r0
	})
}

func (f *AutoIndexingServiceGetUnsafeDBFunc) nextHook() func() database.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceGetUnsafeDBFunc) appendCall(r0 AutoIndexingServiceGetUnsafeDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceGetUnsafeDBFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceGetUnsafeDBFunc) History() []AutoIndexingServiceGetUnsafeDBFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceGetUnsafeDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceGetUnsafeDBFuncCall is an object that describes an
// invocation of method GetUnsafeDB on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceGetUnsafeDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceGetUnsafeDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceGetUnsafeDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc describes the
// behavior when the NumRepositoriesWithCodeIntelligence method of the
// parent MockAutoIndexingService instance is invoked.
type AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall
	mutex       sync.Mutex
}

// NumRepositoriesWithCodeIntelligence delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockAutoIndexingService) NumRepositoriesWithCodeIntelligence(v0 context.Context) (int, error) {
	r0, r1 := m.NumRepositoriesWithCodeIntelligenceFunc.nextHook()(v0)
	m.NumRepositoriesWithCodeIntelligenceFunc.appendCall(AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// NumRepositoriesWithCodeIntelligence method of the parent
// MockAutoIndexingService instance is invoked and the hook queue is empty.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NumRepositoriesWithCodeIntelligence method of the parent
// MockAutoIndexingService instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) appendCall(r0 AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall objects
// describing the invocations of this function.
func (f *AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFunc) History() []AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall is an
// object that describes an invocation of method
// NumRepositoriesWithCodeIntelligence on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceNumRepositoriesWithCodeIntelligenceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AutoIndexingServiceRepositoryIDsWithConfigurationFunc describes the
// behavior when the RepositoryIDsWithConfiguration method of the parent
// MockAutoIndexingService instance is invoked.
type AutoIndexingServiceRepositoryIDsWithConfigurationFunc struct {
	defaultHook func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error)
	hooks       []func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error)
	history     []AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall
	mutex       sync.Mutex
}

// RepositoryIDsWithConfiguration delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockAutoIndexingService) RepositoryIDsWithConfiguration(v0 context.Context, v1 int, v2 int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
	r0, r1, r2 := m.RepositoryIDsWithConfigurationFunc.nextHook()(v0, v1, v2)
	m.RepositoryIDsWithConfigurationFunc.appendCall(AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// RepositoryIDsWithConfiguration method of the parent
// MockAutoIndexingService instance is invoked and the hook queue is empty.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) SetDefaultHook(hook func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepositoryIDsWithConfiguration method of the parent
// MockAutoIndexingService instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) PushHook(hook func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) SetDefaultReturn(r0 []shared.RepositoryWithAvailableIndexers, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) PushReturn(r0 []shared.RepositoryWithAvailableIndexers, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) nextHook() func(context.Context, int, int) ([]shared.RepositoryWithAvailableIndexers, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) appendCall(r0 AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall objects
// describing the invocations of this function.
func (f *AutoIndexingServiceRepositoryIDsWithConfigurationFunc) History() []AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall is an object
// that describes an invocation of method RepositoryIDsWithConfiguration on
// an instance of MockAutoIndexingService.
type AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.RepositoryWithAvailableIndexers
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceRepositoryIDsWithConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AutoIndexingServiceRepositoryIDsWithErrorsFunc describes the behavior
// when the RepositoryIDsWithErrors method of the parent
// MockAutoIndexingService instance is invoked.
type AutoIndexingServiceRepositoryIDsWithErrorsFunc struct {
	defaultHook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	hooks       []func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	history     []AutoIndexingServiceRepositoryIDsWithErrorsFuncCall
	mutex       sync.Mutex
}

// RepositoryIDsWithErrors delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAutoIndexingService) RepositoryIDsWithErrors(v0 context.Context, v1 int, v2 int) ([]shared.RepositoryWithCount, int, error) {
	r0, r1, r2 := m.RepositoryIDsWithErrorsFunc.nextHook()(v0, v1, v2)
	m.RepositoryIDsWithErrorsFunc.appendCall(AutoIndexingServiceRepositoryIDsWithErrorsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// RepositoryIDsWithErrors method of the parent MockAutoIndexingService
// instance is invoked and the hook queue is empty.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepositoryIDsWithErrors method of the parent MockAutoIndexingService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) PushHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) SetDefaultReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) PushReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) nextHook() func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) appendCall(r0 AutoIndexingServiceRepositoryIDsWithErrorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AutoIndexingServiceRepositoryIDsWithErrorsFuncCall objects describing the
// invocations of this function.
func (f *AutoIndexingServiceRepositoryIDsWithErrorsFunc) History() []AutoIndexingServiceRepositoryIDsWithErrorsFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceRepositoryIDsWithErrorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceRepositoryIDsWithErrorsFuncCall is an object that
// describes an invocation of method RepositoryIDsWithErrors on an instance
// of MockAutoIndexingService.
type AutoIndexingServiceRepositoryIDsWithErrorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.RepositoryWithCount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceRepositoryIDsWithErrorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceRepositoryIDsWithErrorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// MockUploadsService is a mock implementation of the UploadsService
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/shared/resolvers)
// used for unit testing.
type MockUploadsService struct {
	// GetAuditLogsForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method GetAuditLogsForUpload.
	GetAuditLogsForUploadFunc *UploadsServiceGetAuditLogsForUploadFunc
	// GetListTagsFunc is an instance of a mock function object controlling
	// the behavior of the method GetListTags.
	GetListTagsFunc *UploadsServiceGetListTagsFunc
	// GetUploadDocumentsForPathFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadDocumentsForPath.
	GetUploadDocumentsForPathFunc *UploadsServiceGetUploadDocumentsForPathFunc
	// GetUploadsFunc is an instance of a mock function object controlling
	// the behavior of the method GetUploads.
	GetUploadsFunc *UploadsServiceGetUploadsFunc
	// GetUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByIDs.
	GetUploadsByIDsFunc *UploadsServiceGetUploadsByIDsFunc
}

// NewMockUploadsService creates a new mock of the UploadsService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) (r0 []types.UploadLog, r1 error) {
				return
			},
		},
		GetListTagsFunc: &UploadsServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (r0 []*gitdomain.Tag, r1 error) {
				return
			},
		},
		GetUploadDocumentsForPathFunc: &UploadsServiceGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) (r0 []string, r1 int, r2 error) {
				return
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, shared1.GetUploadsOptions) (r0 []types.Upload, r1 int, r2 error) {
				return
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []types.Upload, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUploadsService creates a new mock of the UploadsService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) ([]types.UploadLog, error) {
				panic("unexpected invocation of MockUploadsService.GetAuditLogsForUpload")
			},
		},
		GetListTagsFunc: &UploadsServiceGetListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
				panic("unexpected invocation of MockUploadsService.GetListTags")
			},
		},
		GetUploadDocumentsForPathFunc: &UploadsServiceGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) ([]string, int, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadDocumentsForPath")
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, shared1.GetUploadsOptions) ([]types.Upload, int, error) {
				panic("unexpected invocation of MockUploadsService.GetUploads")
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]types.Upload, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadsByIDs")
			},
		},
	}
}

// NewMockUploadsServiceFrom creates a new mock of the MockUploadsService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUploadsServiceFrom(i UploadsService) *MockUploadsService {
	return &MockUploadsService{
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: i.GetAuditLogsForUpload,
		},
		GetListTagsFunc: &UploadsServiceGetListTagsFunc{
			defaultHook: i.GetListTags,
		},
		GetUploadDocumentsForPathFunc: &UploadsServiceGetUploadDocumentsForPathFunc{
			defaultHook: i.GetUploadDocumentsForPath,
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: i.GetUploads,
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: i.GetUploadsByIDs,
		},
	}
}

// UploadsServiceGetAuditLogsForUploadFunc describes the behavior when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetAuditLogsForUploadFunc struct {
	defaultHook func(context.Context, int) ([]types.UploadLog, error)
	hooks       []func(context.Context, int) ([]types.UploadLog, error)
	history     []UploadsServiceGetAuditLogsForUploadFuncCall
	mutex       sync.Mutex
}

// GetAuditLogsForUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetAuditLogsForUpload(v0 context.Context, v1 int) ([]types.UploadLog, error) {
	r0, r1 := m.GetAuditLogsForUploadFunc.nextHook()(v0, v1)
	m.GetAuditLogsForUploadFunc.appendCall(UploadsServiceGetAuditLogsForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked and the hook queue is empty.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultHook(hook func(context.Context, int) ([]types.UploadLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuditLogsForUpload method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushHook(hook func(context.Context, int) ([]types.UploadLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultReturn(r0 []types.UploadLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]types.UploadLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushReturn(r0 []types.UploadLog, r1 error) {
	f.PushHook(func(context.Context, int) ([]types.UploadLog, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) nextHook() func(context.Context, int) ([]types.UploadLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) appendCall(r0 UploadsServiceGetAuditLogsForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetAuditLogsForUploadFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetAuditLogsForUploadFunc) History() []UploadsServiceGetAuditLogsForUploadFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetAuditLogsForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetAuditLogsForUploadFuncCall is an object that describes
// an invocation of method GetAuditLogsForUpload on an instance of
// MockUploadsService.
type UploadsServiceGetAuditLogsForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UploadLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetListTagsFunc describes the behavior when the GetListTags
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetListTagsFunc struct {
	defaultHook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	hooks       []func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	history     []UploadsServiceGetListTagsFuncCall
	mutex       sync.Mutex
}

// GetListTags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetListTags(v0 context.Context, v1 api.RepoName, v2 ...string) ([]*gitdomain.Tag, error) {
	r0, r1 := m.GetListTagsFunc.nextHook()(v0, v1, v2...)
	m.GetListTagsFunc.appendCall(UploadsServiceGetListTagsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetListTags method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceGetListTagsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetListTags method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetListTagsFunc) PushHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetListTagsFunc) SetDefaultReturn(r0 []*gitdomain.Tag, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetListTagsFunc) PushReturn(r0 []*gitdomain.Tag, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetListTagsFunc) nextHook() func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetListTagsFunc) appendCall(r0 UploadsServiceGetListTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetListTagsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetListTagsFunc) History() []UploadsServiceGetListTagsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetListTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetListTagsFuncCall is an object that describes an
// invocation of method GetListTags on an instance of MockUploadsService.
type UploadsServiceGetListTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Tag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetListTagsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetListTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetUploadDocumentsForPathFunc describes the behavior when
// the GetUploadDocumentsForPath method of the parent MockUploadsService
// instance is invoked.
type UploadsServiceGetUploadDocumentsForPathFunc struct {
	defaultHook func(context.Context, int, string) ([]string, int, error)
	hooks       []func(context.Context, int, string) ([]string, int, error)
	history     []UploadsServiceGetUploadDocumentsForPathFuncCall
	mutex       sync.Mutex
}

// GetUploadDocumentsForPath delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadDocumentsForPath(v0 context.Context, v1 int, v2 string) ([]string, int, error) {
	r0, r1, r2 := m.GetUploadDocumentsForPathFunc.nextHook()(v0, v1, v2)
	m.GetUploadDocumentsForPathFunc.appendCall(UploadsServiceGetUploadDocumentsForPathFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetUploadDocumentsForPath method of the parent MockUploadsService
// instance is invoked and the hook queue is empty.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) SetDefaultHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadDocumentsForPath method of the parent MockUploadsService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) PushHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) SetDefaultReturn(r0 []string, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) PushReturn(r0 []string, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadDocumentsForPathFunc) nextHook() func(context.Context, int, string) ([]string, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadDocumentsForPathFunc) appendCall(r0 UploadsServiceGetUploadDocumentsForPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetUploadDocumentsForPathFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceGetUploadDocumentsForPathFunc) History() []UploadsServiceGetUploadDocumentsForPathFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadDocumentsForPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadDocumentsForPathFuncCall is an object that
// describes an invocation of method GetUploadDocumentsForPath on an
// instance of MockUploadsService.
type UploadsServiceGetUploadDocumentsForPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadDocumentsForPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadDocumentsForPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsFunc describes the behavior when the GetUploads
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetUploadsFunc struct {
	defaultHook func(context.Context, shared1.GetUploadsOptions) ([]types.Upload, int, error)
	hooks       []func(context.Context, shared1.GetUploadsOptions) ([]types.Upload, int, error)
	history     []UploadsServiceGetUploadsFuncCall
	mutex       sync.Mutex
}

// GetUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploads(v0 context.Context, v1 shared1.GetUploadsOptions) ([]types.Upload, int, error) {
	r0, r1, r2 := m.GetUploadsFunc.nextHook()(v0, v1)
	m.GetUploadsFunc.appendCall(UploadsServiceGetUploadsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploads method of
// the parent MockUploadsService instance is invoked and the hook queue is
// empty.
func (f *UploadsServiceGetUploadsFunc) SetDefaultHook(hook func(context.Context, shared1.GetUploadsOptions) ([]types.Upload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploads method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsFunc) PushHook(hook func(context.Context, shared1.GetUploadsOptions) ([]types.Upload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsFunc) SetDefaultReturn(r0 []types.Upload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared1.GetUploadsOptions) ([]types.Upload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsFunc) PushReturn(r0 []types.Upload, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared1.GetUploadsOptions) ([]types.Upload, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadsFunc) nextHook() func(context.Context, shared1.GetUploadsOptions) ([]types.Upload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsFunc) appendCall(r0 UploadsServiceGetUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetUploadsFunc) History() []UploadsServiceGetUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsFuncCall is an object that describes an
// invocation of method GetUploads on an instance of MockUploadsService.
type UploadsServiceGetUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared1.GetUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsByIDsFunc describes the behavior when the
// GetUploadsByIDs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]types.Upload, error)
	hooks       []func(context.Context, ...int) ([]types.Upload, error)
	history     []UploadsServiceGetUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]types.Upload, error) {
	r0, r1 := m.GetUploadsByIDsFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsFunc.appendCall(UploadsServiceGetUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsByIDs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]types.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDs method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]types.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultReturn(r0 []types.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]types.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsByIDsFunc) PushReturn(r0 []types.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]types.Upload, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]types.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsByIDsFunc) appendCall(r0 UploadsServiceGetUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsByIDsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetUploadsByIDsFunc) History() []UploadsServiceGetUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsByIDsFuncCall is an object that describes an
// invocation of method GetUploadsByIDs on an instance of
// MockUploadsService.
type UploadsServiceGetUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
