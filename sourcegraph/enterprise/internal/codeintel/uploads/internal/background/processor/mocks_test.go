// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package processor

import (
	"context"
	"sync"
	"time"

	sqlf "github.com/keegancsmith/sqlf"
	scip "github.com/sourcegraph/scip/bindings/go/scip"
	lsifstore "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/internal/lsifstore"
	store "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/internal/store"
	shared "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/shared"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	executor "github.com/sourcegraph/sourcegraph/internal/executor"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
	observation "github.com/sourcegraph/sourcegraph/internal/observation"
	types "github.com/sourcegraph/sourcegraph/internal/types"
	workerutil "github.com/sourcegraph/sourcegraph/internal/workerutil"
	store1 "github.com/sourcegraph/sourcegraph/internal/workerutil/dbworker/store"
	precise "github.com/sourcegraph/sourcegraph/lib/codeintel/precise"
)

// MockRepoStore is a mock implementation of the RepoStore interface (from
// the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/internal/background/processor)
// used for unit testing.
type MockRepoStore struct {
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *RepoStoreGetFunc
}

// NewMockRepoStore creates a new mock of the RepoStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockRepoStore() *MockRepoStore {
	return &MockRepoStore{
		GetFunc: &RepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *types.Repo, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockRepoStore creates a new mock of the RepoStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockRepoStore() *MockRepoStore {
	return &MockRepoStore{
		GetFunc: &RepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.Get")
			},
		},
	}
}

// NewMockRepoStoreFrom creates a new mock of the MockRepoStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockRepoStoreFrom(i RepoStore) *MockRepoStore {
	return &MockRepoStore{
		GetFunc: &RepoStoreGetFunc{
			defaultHook: i.Get,
		},
	}
}

// RepoStoreGetFunc describes the behavior when the Get method of the parent
// MockRepoStore instance is invoked.
type RepoStoreGetFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoID) (*types.Repo, error)
	history     []RepoStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Get(v0 context.Context, v1 api.RepoID) (*types.Repo, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(RepoStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreGetFunc) PushHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetFunc) nextHook() func(context.Context, api.RepoID) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetFunc) appendCall(r0 RepoStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetFuncCall objects describing the
// invocations of this function.
func (f *RepoStoreGetFunc) History() []RepoStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockRepoStore.
type RepoStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/internal/store)
// used for unit testing.
type MockStore struct {
	// AddUploadPartFunc is an instance of a mock function object
	// controlling the behavior of the method AddUploadPart.
	AddUploadPartFunc *StoreAddUploadPartFunc
	// DeleteIndexByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteIndexByID.
	DeleteIndexByIDFunc *StoreDeleteIndexByIDFunc
	// DeleteIndexesFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteIndexes.
	DeleteIndexesFunc *StoreDeleteIndexesFunc
	// DeleteIndexesWithoutRepositoryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteIndexesWithoutRepository.
	DeleteIndexesWithoutRepositoryFunc *StoreDeleteIndexesWithoutRepositoryFunc
	// DeleteOldAuditLogsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOldAuditLogs.
	DeleteOldAuditLogsFunc *StoreDeleteOldAuditLogsFunc
	// DeleteOverlappingDumpsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOverlappingDumps.
	DeleteOverlappingDumpsFunc *StoreDeleteOverlappingDumpsFunc
	// DeleteUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploadByID.
	DeleteUploadByIDFunc *StoreDeleteUploadByIDFunc
	// DeleteUploadsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploads.
	DeleteUploadsFunc *StoreDeleteUploadsFunc
	// DeleteUploadsStuckUploadingFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteUploadsStuckUploading.
	DeleteUploadsStuckUploadingFunc *StoreDeleteUploadsStuckUploadingFunc
	// DeleteUploadsWithoutRepositoryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteUploadsWithoutRepository.
	DeleteUploadsWithoutRepositoryFunc *StoreDeleteUploadsWithoutRepositoryFunc
	// ExpireFailedRecordsFunc is an instance of a mock function object
	// controlling the behavior of the method ExpireFailedRecords.
	ExpireFailedRecordsFunc *StoreExpireFailedRecordsFunc
	// FindClosestDumpsFunc is an instance of a mock function object
	// controlling the behavior of the method FindClosestDumps.
	FindClosestDumpsFunc *StoreFindClosestDumpsFunc
	// FindClosestDumpsFromGraphFragmentFunc is an instance of a mock
	// function object controlling the behavior of the method
	// FindClosestDumpsFromGraphFragment.
	FindClosestDumpsFromGraphFragmentFunc *StoreFindClosestDumpsFromGraphFragmentFunc
	// GetAuditLogsForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method GetAuditLogsForUpload.
	GetAuditLogsForUploadFunc *StoreGetAuditLogsForUploadFunc
	// GetCommitGraphMetadataFunc is an instance of a mock function object
	// controlling the behavior of the method GetCommitGraphMetadata.
	GetCommitGraphMetadataFunc *StoreGetCommitGraphMetadataFunc
	// GetCommitsVisibleToUploadFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetCommitsVisibleToUpload.
	GetCommitsVisibleToUploadFunc *StoreGetCommitsVisibleToUploadFunc
	// GetDirtyRepositoriesFunc is an instance of a mock function object
	// controlling the behavior of the method GetDirtyRepositories.
	GetDirtyRepositoriesFunc *StoreGetDirtyRepositoriesFunc
	// GetDumpsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDumpsByIDs.
	GetDumpsByIDsFunc *StoreGetDumpsByIDsFunc
	// GetDumpsWithDefinitionsForMonikersFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetDumpsWithDefinitionsForMonikers.
	GetDumpsWithDefinitionsForMonikersFunc *StoreGetDumpsWithDefinitionsForMonikersFunc
	// GetIndexByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexByID.
	GetIndexByIDFunc *StoreGetIndexByIDFunc
	// GetIndexersFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexers.
	GetIndexersFunc *StoreGetIndexersFunc
	// GetIndexesFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexes.
	GetIndexesFunc *StoreGetIndexesFunc
	// GetIndexesByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetIndexesByIDs.
	GetIndexesByIDsFunc *StoreGetIndexesByIDsFunc
	// GetLastUploadRetentionScanForRepositoryFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetLastUploadRetentionScanForRepository.
	GetLastUploadRetentionScanForRepositoryFunc *StoreGetLastUploadRetentionScanForRepositoryFunc
	// GetOldestCommitDateFunc is an instance of a mock function object
	// controlling the behavior of the method GetOldestCommitDate.
	GetOldestCommitDateFunc *StoreGetOldestCommitDateFunc
	// GetRecentIndexesSummaryFunc is an instance of a mock function object
	// controlling the behavior of the method GetRecentIndexesSummary.
	GetRecentIndexesSummaryFunc *StoreGetRecentIndexesSummaryFunc
	// GetRecentUploadsSummaryFunc is an instance of a mock function object
	// controlling the behavior of the method GetRecentUploadsSummary.
	GetRecentUploadsSummaryFunc *StoreGetRecentUploadsSummaryFunc
	// GetRepositoriesMaxStaleAgeFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetRepositoriesMaxStaleAge.
	GetRepositoriesMaxStaleAgeFunc *StoreGetRepositoriesMaxStaleAgeFunc
	// GetUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadByID.
	GetUploadByIDFunc *StoreGetUploadByIDFunc
	// GetUploadIDsWithReferencesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadIDsWithReferences.
	GetUploadIDsWithReferencesFunc *StoreGetUploadIDsWithReferencesFunc
	// GetUploadsFunc is an instance of a mock function object controlling
	// the behavior of the method GetUploads.
	GetUploadsFunc *StoreGetUploadsFunc
	// GetUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByIDs.
	GetUploadsByIDsFunc *StoreGetUploadsByIDsFunc
	// GetUploadsByIDsAllowDeletedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadsByIDsAllowDeleted.
	GetUploadsByIDsAllowDeletedFunc *StoreGetUploadsByIDsAllowDeletedFunc
	// GetVisibleUploadsMatchingMonikersFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetVisibleUploadsMatchingMonikers.
	GetVisibleUploadsMatchingMonikersFunc *StoreGetVisibleUploadsMatchingMonikersFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *StoreHandleFunc
	// HardDeleteUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method HardDeleteUploadsByIDs.
	HardDeleteUploadsByIDsFunc *StoreHardDeleteUploadsByIDsFunc
	// HasCommitFunc is an instance of a mock function object controlling
	// the behavior of the method HasCommit.
	HasCommitFunc *StoreHasCommitFunc
	// HasRepositoryFunc is an instance of a mock function object
	// controlling the behavior of the method HasRepository.
	HasRepositoryFunc *StoreHasRepositoryFunc
	// InsertDependencySyncingJobFunc is an instance of a mock function
	// object controlling the behavior of the method
	// InsertDependencySyncingJob.
	InsertDependencySyncingJobFunc *StoreInsertDependencySyncingJobFunc
	// InsertUploadFunc is an instance of a mock function object controlling
	// the behavior of the method InsertUpload.
	InsertUploadFunc *StoreInsertUploadFunc
	// MarkFailedFunc is an instance of a mock function object controlling
	// the behavior of the method MarkFailed.
	MarkFailedFunc *StoreMarkFailedFunc
	// MarkQueuedFunc is an instance of a mock function object controlling
	// the behavior of the method MarkQueued.
	MarkQueuedFunc *StoreMarkQueuedFunc
	// NumRepositoriesWithCodeIntelligenceFunc is an instance of a mock
	// function object controlling the behavior of the method
	// NumRepositoriesWithCodeIntelligence.
	NumRepositoriesWithCodeIntelligenceFunc *StoreNumRepositoriesWithCodeIntelligenceFunc
	// ProcessSourcedCommitsFunc is an instance of a mock function object
	// controlling the behavior of the method ProcessSourcedCommits.
	ProcessSourcedCommitsFunc *StoreProcessSourcedCommitsFunc
	// ProcessStaleSourcedCommitsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ProcessStaleSourcedCommits.
	ProcessStaleSourcedCommitsFunc *StoreProcessStaleSourcedCommitsFunc
	// ReconcileCandidatesFunc is an instance of a mock function object
	// controlling the behavior of the method ReconcileCandidates.
	ReconcileCandidatesFunc *StoreReconcileCandidatesFunc
	// ReferencesForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method ReferencesForUpload.
	ReferencesForUploadFunc *StoreReferencesForUploadFunc
	// ReindexIndexByIDFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexIndexByID.
	ReindexIndexByIDFunc *StoreReindexIndexByIDFunc
	// ReindexIndexesFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexIndexes.
	ReindexIndexesFunc *StoreReindexIndexesFunc
	// ReindexUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexUploadByID.
	ReindexUploadByIDFunc *StoreReindexUploadByIDFunc
	// ReindexUploadsFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexUploads.
	ReindexUploadsFunc *StoreReindexUploadsFunc
	// RepositoryIDsWithErrorsFunc is an instance of a mock function object
	// controlling the behavior of the method RepositoryIDsWithErrors.
	RepositoryIDsWithErrorsFunc *StoreRepositoryIDsWithErrorsFunc
	// SetRepositoriesForRetentionScanFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetRepositoriesForRetentionScan.
	SetRepositoriesForRetentionScanFunc *StoreSetRepositoriesForRetentionScanFunc
	// SetRepositoryAsDirtyFunc is an instance of a mock function object
	// controlling the behavior of the method SetRepositoryAsDirty.
	SetRepositoryAsDirtyFunc *StoreSetRepositoryAsDirtyFunc
	// SoftDeleteExpiredUploadsFunc is an instance of a mock function object
	// controlling the behavior of the method SoftDeleteExpiredUploads.
	SoftDeleteExpiredUploadsFunc *StoreSoftDeleteExpiredUploadsFunc
	// SoftDeleteExpiredUploadsViaTraversalFunc is an instance of a mock
	// function object controlling the behavior of the method
	// SoftDeleteExpiredUploadsViaTraversal.
	SoftDeleteExpiredUploadsViaTraversalFunc *StoreSoftDeleteExpiredUploadsViaTraversalFunc
	// SourcedCommitsWithoutCommittedAtFunc is an instance of a mock
	// function object controlling the behavior of the method
	// SourcedCommitsWithoutCommittedAt.
	SourcedCommitsWithoutCommittedAtFunc *StoreSourcedCommitsWithoutCommittedAtFunc
	// UpdateCommittedAtFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateCommittedAt.
	UpdateCommittedAtFunc *StoreUpdateCommittedAtFunc
	// UpdatePackageReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePackageReferences.
	UpdatePackageReferencesFunc *StoreUpdatePackageReferencesFunc
	// UpdatePackagesFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePackages.
	UpdatePackagesFunc *StoreUpdatePackagesFunc
	// UpdateUploadRetentionFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateUploadRetention.
	UpdateUploadRetentionFunc *StoreUpdateUploadRetentionFunc
	// UpdateUploadsVisibleToCommitsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateUploadsVisibleToCommits.
	UpdateUploadsVisibleToCommitsFunc *StoreUpdateUploadsVisibleToCommitsFunc
	// WithTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method WithTransaction.
	WithTransactionFunc *StoreWithTransactionFunc
	// WorkerutilStoreFunc is an instance of a mock function object
	// controlling the behavior of the method WorkerutilStore.
	WorkerutilStoreFunc *StoreWorkerutilStoreFunc
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore() *MockStore {
	return &MockStore{
		AddUploadPartFunc: &StoreAddUploadPartFunc{
			defaultHook: func(context.Context, int, int) (r0 error) {
				return
			},
		},
		DeleteIndexByIDFunc: &StoreDeleteIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 error) {
				return
			},
		},
		DeleteIndexesFunc: &StoreDeleteIndexesFunc{
			defaultHook: func(context.Context, shared.DeleteIndexesOptions) (r0 error) {
				return
			},
		},
		DeleteIndexesWithoutRepositoryFunc: &StoreDeleteIndexesWithoutRepositoryFunc{
			defaultHook: func(context.Context, time.Time) (r0 int, r1 int, r2 error) {
				return
			},
		},
		DeleteOldAuditLogsFunc: &StoreDeleteOldAuditLogsFunc{
			defaultHook: func(context.Context, time.Duration, time.Time) (r0 int, r1 int, r2 error) {
				return
			},
		},
		DeleteOverlappingDumpsFunc: &StoreDeleteOverlappingDumpsFunc{
			defaultHook: func(context.Context, int, string, string, string) (r0 error) {
				return
			},
		},
		DeleteUploadByIDFunc: &StoreDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 error) {
				return
			},
		},
		DeleteUploadsFunc: &StoreDeleteUploadsFunc{
			defaultHook: func(context.Context, shared.DeleteUploadsOptions) (r0 error) {
				return
			},
		},
		DeleteUploadsStuckUploadingFunc: &StoreDeleteUploadsStuckUploadingFunc{
			defaultHook: func(context.Context, time.Time) (r0 int, r1 int, r2 error) {
				return
			},
		},
		DeleteUploadsWithoutRepositoryFunc: &StoreDeleteUploadsWithoutRepositoryFunc{
			defaultHook: func(context.Context, time.Time) (r0 int, r1 int, r2 error) {
				return
			},
		},
		ExpireFailedRecordsFunc: &StoreExpireFailedRecordsFunc{
			defaultHook: func(context.Context, int, time.Duration, time.Time) (r0 int, r1 int, r2 error) {
				return
			},
		},
		FindClosestDumpsFunc: &StoreFindClosestDumpsFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) (r0 []shared.Dump, r1 error) {
				return
			},
		},
		FindClosestDumpsFromGraphFragmentFunc: &StoreFindClosestDumpsFromGraphFragmentFunc{
			defaultHook: func(context.Context, int, string, string, bool, string, *gitdomain.CommitGraph) (r0 []shared.Dump, r1 error) {
				return
			},
		},
		GetAuditLogsForUploadFunc: &StoreGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) (r0 []shared.UploadLog, r1 error) {
				return
			},
		},
		GetCommitGraphMetadataFunc: &StoreGetCommitGraphMetadataFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 *time.Time, r2 error) {
				return
			},
		},
		GetCommitsVisibleToUploadFunc: &StoreGetCommitsVisibleToUploadFunc{
			defaultHook: func(context.Context, int, int, *string) (r0 []string, r1 *string, r2 error) {
				return
			},
		},
		GetDirtyRepositoriesFunc: &StoreGetDirtyRepositoriesFunc{
			defaultHook: func(context.Context) (r0 []shared.DirtyRepository, r1 error) {
				return
			},
		},
		GetDumpsByIDsFunc: &StoreGetDumpsByIDsFunc{
			defaultHook: func(context.Context, []int) (r0 []shared.Dump, r1 error) {
				return
			},
		},
		GetDumpsWithDefinitionsForMonikersFunc: &StoreGetDumpsWithDefinitionsForMonikersFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData) (r0 []shared.Dump, r1 error) {
				return
			},
		},
		GetIndexByIDFunc: &StoreGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 shared.Index, r1 bool, r2 error) {
				return
			},
		},
		GetIndexersFunc: &StoreGetIndexersFunc{
			defaultHook: func(context.Context, shared.GetIndexersOptions) (r0 []string, r1 error) {
				return
			},
		},
		GetIndexesFunc: &StoreGetIndexesFunc{
			defaultHook: func(context.Context, shared.GetIndexesOptions) (r0 []shared.Index, r1 int, r2 error) {
				return
			},
		},
		GetIndexesByIDsFunc: &StoreGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Index, r1 error) {
				return
			},
		},
		GetLastUploadRetentionScanForRepositoryFunc: &StoreGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (r0 *time.Time, r1 error) {
				return
			},
		},
		GetOldestCommitDateFunc: &StoreGetOldestCommitDateFunc{
			defaultHook: func(context.Context, int) (r0 time.Time, r1 bool, r2 error) {
				return
			},
		},
		GetRecentIndexesSummaryFunc: &StoreGetRecentIndexesSummaryFunc{
			defaultHook: func(context.Context, int) (r0 []shared.IndexesWithRepositoryNamespace, r1 error) {
				return
			},
		},
		GetRecentUploadsSummaryFunc: &StoreGetRecentUploadsSummaryFunc{
			defaultHook: func(context.Context, int) (r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
				return
			},
		},
		GetRepositoriesMaxStaleAgeFunc: &StoreGetRepositoriesMaxStaleAgeFunc{
			defaultHook: func(context.Context) (r0 time.Duration, r1 error) {
				return
			},
		},
		GetUploadByIDFunc: &StoreGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 shared.Upload, r1 bool, r2 error) {
				return
			},
		},
		GetUploadIDsWithReferencesFunc: &StoreGetUploadIDsWithReferencesFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int, observation.TraceLogger) (r0 []int, r1 int, r2 int, r3 error) {
				return
			},
		},
		GetUploadsFunc: &StoreGetUploadsFunc{
			defaultHook: func(context.Context, shared.GetUploadsOptions) (r0 []shared.Upload, r1 int, r2 error) {
				return
			},
		},
		GetUploadsByIDsFunc: &StoreGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Upload, r1 error) {
				return
			},
		},
		GetUploadsByIDsAllowDeletedFunc: &StoreGetUploadsByIDsAllowDeletedFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Upload, r1 error) {
				return
			},
		},
		GetVisibleUploadsMatchingMonikersFunc: &StoreGetVisibleUploadsMatchingMonikersFunc{
			defaultHook: func(context.Context, int, string, []precise.QualifiedMonikerData, int, int) (r0 shared.PackageReferenceScanner, r1 int, r2 error) {
				return
			},
		},
		HandleFunc: &StoreHandleFunc{
			defaultHook: func() (r0 *basestore.Store) {
				return
			},
		},
		HardDeleteUploadsByIDsFunc: &StoreHardDeleteUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 error) {
				return
			},
		},
		HasCommitFunc: &StoreHasCommitFunc{
			defaultHook: func(context.Context, int, string) (r0 bool, r1 error) {
				return
			},
		},
		HasRepositoryFunc: &StoreHasRepositoryFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 error) {
				return
			},
		},
		InsertDependencySyncingJobFunc: &StoreInsertDependencySyncingJobFunc{
			defaultHook: func(context.Context, int) (r0 int, r1 error) {
				return
			},
		},
		InsertUploadFunc: &StoreInsertUploadFunc{
			defaultHook: func(context.Context, shared.Upload) (r0 int, r1 error) {
				return
			},
		},
		MarkFailedFunc: &StoreMarkFailedFunc{
			defaultHook: func(context.Context, int, string) (r0 error) {
				return
			},
		},
		MarkQueuedFunc: &StoreMarkQueuedFunc{
			defaultHook: func(context.Context, int, *int64) (r0 error) {
				return
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &StoreNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		ProcessSourcedCommitsFunc: &StoreProcessSourcedCommitsFunc{
			defaultHook: func(context.Context, time.Duration, time.Duration, int, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), time.Time) (r0 int, r1 int, r2 error) {
				return
			},
		},
		ProcessStaleSourcedCommitsFunc: &StoreProcessStaleSourcedCommitsFunc{
			defaultHook: func(context.Context, time.Duration, int, time.Duration, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (r0 int, r1 int, r2 error) {
				return
			},
		},
		ReconcileCandidatesFunc: &StoreReconcileCandidatesFunc{
			defaultHook: func(context.Context, int) (r0 []int, r1 error) {
				return
			},
		},
		ReferencesForUploadFunc: &StoreReferencesForUploadFunc{
			defaultHook: func(context.Context, int) (r0 shared.PackageReferenceScanner, r1 error) {
				return
			},
		},
		ReindexIndexByIDFunc: &StoreReindexIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		ReindexIndexesFunc: &StoreReindexIndexesFunc{
			defaultHook: func(context.Context, shared.ReindexIndexesOptions) (r0 error) {
				return
			},
		},
		ReindexUploadByIDFunc: &StoreReindexUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		ReindexUploadsFunc: &StoreReindexUploadsFunc{
			defaultHook: func(context.Context, shared.ReindexUploadsOptions) (r0 error) {
				return
			},
		},
		RepositoryIDsWithErrorsFunc: &StoreRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) (r0 []shared.RepositoryWithCount, r1 int, r2 error) {
				return
			},
		},
		SetRepositoriesForRetentionScanFunc: &StoreSetRepositoriesForRetentionScanFunc{
			defaultHook: func(context.Context, time.Duration, int) (r0 []int, r1 error) {
				return
			},
		},
		SetRepositoryAsDirtyFunc: &StoreSetRepositoryAsDirtyFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		SoftDeleteExpiredUploadsFunc: &StoreSoftDeleteExpiredUploadsFunc{
			defaultHook: func(context.Context, int) (r0 int, r1 int, r2 error) {
				return
			},
		},
		SoftDeleteExpiredUploadsViaTraversalFunc: &StoreSoftDeleteExpiredUploadsViaTraversalFunc{
			defaultHook: func(context.Context, int) (r0 int, r1 int, r2 error) {
				return
			},
		},
		SourcedCommitsWithoutCommittedAtFunc: &StoreSourcedCommitsWithoutCommittedAtFunc{
			defaultHook: func(context.Context, int) (r0 []store.SourcedCommits, r1 error) {
				return
			},
		},
		UpdateCommittedAtFunc: &StoreUpdateCommittedAtFunc{
			defaultHook: func(context.Context, int, string, string) (r0 error) {
				return
			},
		},
		UpdatePackageReferencesFunc: &StoreUpdatePackageReferencesFunc{
			defaultHook: func(context.Context, int, []precise.PackageReference) (r0 error) {
				return
			},
		},
		UpdatePackagesFunc: &StoreUpdatePackagesFunc{
			defaultHook: func(context.Context, int, []precise.Package) (r0 error) {
				return
			},
		},
		UpdateUploadRetentionFunc: &StoreUpdateUploadRetentionFunc{
			defaultHook: func(context.Context, []int, []int) (r0 error) {
				return
			},
		},
		UpdateUploadsVisibleToCommitsFunc: &StoreUpdateUploadsVisibleToCommitsFunc{
			defaultHook: func(context.Context, int, *gitdomain.CommitGraph, map[string][]gitdomain.RefDescription, time.Duration, time.Duration, int, time.Time) (r0 error) {
				return
			},
		},
		WithTransactionFunc: &StoreWithTransactionFunc{
			defaultHook: func(context.Context, func(s store.Store) error) (r0 error) {
				return
			},
		},
		WorkerutilStoreFunc: &StoreWorkerutilStoreFunc{
			defaultHook: func(*observation.Context) (r0 store1.Store[shared.Upload]) {
				return
			},
		},
	}
}

// NewStrictMockStore creates a new mock of the Store interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockStore() *MockStore {
	return &MockStore{
		AddUploadPartFunc: &StoreAddUploadPartFunc{
			defaultHook: func(context.Context, int, int) error {
				panic("unexpected invocation of MockStore.AddUploadPart")
			},
		},
		DeleteIndexByIDFunc: &StoreDeleteIndexByIDFunc{
			defaultHook: func(context.Context, int) (bool, error) {
				panic("unexpected invocation of MockStore.DeleteIndexByID")
			},
		},
		DeleteIndexesFunc: &StoreDeleteIndexesFunc{
			defaultHook: func(context.Context, shared.DeleteIndexesOptions) error {
				panic("unexpected invocation of MockStore.DeleteIndexes")
			},
		},
		DeleteIndexesWithoutRepositoryFunc: &StoreDeleteIndexesWithoutRepositoryFunc{
			defaultHook: func(context.Context, time.Time) (int, int, error) {
				panic("unexpected invocation of MockStore.DeleteIndexesWithoutRepository")
			},
		},
		DeleteOldAuditLogsFunc: &StoreDeleteOldAuditLogsFunc{
			defaultHook: func(context.Context, time.Duration, time.Time) (int, int, error) {
				panic("unexpected invocation of MockStore.DeleteOldAuditLogs")
			},
		},
		DeleteOverlappingDumpsFunc: &StoreDeleteOverlappingDumpsFunc{
			defaultHook: func(context.Context, int, string, string, string) error {
				panic("unexpected invocation of MockStore.DeleteOverlappingDumps")
			},
		},
		DeleteUploadByIDFunc: &StoreDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) (bool, error) {
				panic("unexpected invocation of MockStore.DeleteUploadByID")
			},
		},
		DeleteUploadsFunc: &StoreDeleteUploadsFunc{
			defaultHook: func(context.Context, shared.DeleteUploadsOptions) error {
				panic("unexpected invocation of MockStore.DeleteUploads")
			},
		},
		DeleteUploadsStuckUploadingFunc: &StoreDeleteUploadsStuckUploadingFunc{
			defaultHook: func(context.Context, time.Time) (int, int, error) {
				panic("unexpected invocation of MockStore.DeleteUploadsStuckUploading")
			},
		},
		DeleteUploadsWithoutRepositoryFunc: &StoreDeleteUploadsWithoutRepositoryFunc{
			defaultHook: func(context.Context, time.Time) (int, int, error) {
				panic("unexpected invocation of MockStore.DeleteUploadsWithoutRepository")
			},
		},
		ExpireFailedRecordsFunc: &StoreExpireFailedRecordsFunc{
			defaultHook: func(context.Context, int, time.Duration, time.Time) (int, int, error) {
				panic("unexpected invocation of MockStore.ExpireFailedRecords")
			},
		},
		FindClosestDumpsFunc: &StoreFindClosestDumpsFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
				panic("unexpected invocation of MockStore.FindClosestDumps")
			},
		},
		FindClosestDumpsFromGraphFragmentFunc: &StoreFindClosestDumpsFromGraphFragmentFunc{
			defaultHook: func(context.Context, int, string, string, bool, string, *gitdomain.CommitGraph) ([]shared.Dump, error) {
				panic("unexpected invocation of MockStore.FindClosestDumpsFromGraphFragment")
			},
		},
		GetAuditLogsForUploadFunc: &StoreGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) ([]shared.UploadLog, error) {
				panic("unexpected invocation of MockStore.GetAuditLogsForUpload")
			},
		},
		GetCommitGraphMetadataFunc: &StoreGetCommitGraphMetadataFunc{
			defaultHook: func(context.Context, int) (bool, *time.Time, error) {
				panic("unexpected invocation of MockStore.GetCommitGraphMetadata")
			},
		},
		GetCommitsVisibleToUploadFunc: &StoreGetCommitsVisibleToUploadFunc{
			defaultHook: func(context.Context, int, int, *string) ([]string, *string, error) {
				panic("unexpected invocation of MockStore.GetCommitsVisibleToUpload")
			},
		},
		GetDirtyRepositoriesFunc: &StoreGetDirtyRepositoriesFunc{
			defaultHook: func(context.Context) ([]shared.DirtyRepository, error) {
				panic("unexpected invocation of MockStore.GetDirtyRepositories")
			},
		},
		GetDumpsByIDsFunc: &StoreGetDumpsByIDsFunc{
			defaultHook: func(context.Context, []int) ([]shared.Dump, error) {
				panic("unexpected invocation of MockStore.GetDumpsByIDs")
			},
		},
		GetDumpsWithDefinitionsForMonikersFunc: &StoreGetDumpsWithDefinitionsForMonikersFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error) {
				panic("unexpected invocation of MockStore.GetDumpsWithDefinitionsForMonikers")
			},
		},
		GetIndexByIDFunc: &StoreGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (shared.Index, bool, error) {
				panic("unexpected invocation of MockStore.GetIndexByID")
			},
		},
		GetIndexersFunc: &StoreGetIndexersFunc{
			defaultHook: func(context.Context, shared.GetIndexersOptions) ([]string, error) {
				panic("unexpected invocation of MockStore.GetIndexers")
			},
		},
		GetIndexesFunc: &StoreGetIndexesFunc{
			defaultHook: func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error) {
				panic("unexpected invocation of MockStore.GetIndexes")
			},
		},
		GetIndexesByIDsFunc: &StoreGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Index, error) {
				panic("unexpected invocation of MockStore.GetIndexesByIDs")
			},
		},
		GetLastUploadRetentionScanForRepositoryFunc: &StoreGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (*time.Time, error) {
				panic("unexpected invocation of MockStore.GetLastUploadRetentionScanForRepository")
			},
		},
		GetOldestCommitDateFunc: &StoreGetOldestCommitDateFunc{
			defaultHook: func(context.Context, int) (time.Time, bool, error) {
				panic("unexpected invocation of MockStore.GetOldestCommitDate")
			},
		},
		GetRecentIndexesSummaryFunc: &StoreGetRecentIndexesSummaryFunc{
			defaultHook: func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
				panic("unexpected invocation of MockStore.GetRecentIndexesSummary")
			},
		},
		GetRecentUploadsSummaryFunc: &StoreGetRecentUploadsSummaryFunc{
			defaultHook: func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
				panic("unexpected invocation of MockStore.GetRecentUploadsSummary")
			},
		},
		GetRepositoriesMaxStaleAgeFunc: &StoreGetRepositoriesMaxStaleAgeFunc{
			defaultHook: func(context.Context) (time.Duration, error) {
				panic("unexpected invocation of MockStore.GetRepositoriesMaxStaleAge")
			},
		},
		GetUploadByIDFunc: &StoreGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (shared.Upload, bool, error) {
				panic("unexpected invocation of MockStore.GetUploadByID")
			},
		},
		GetUploadIDsWithReferencesFunc: &StoreGetUploadIDsWithReferencesFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int, observation.TraceLogger) ([]int, int, int, error) {
				panic("unexpected invocation of MockStore.GetUploadIDsWithReferences")
			},
		},
		GetUploadsFunc: &StoreGetUploadsFunc{
			defaultHook: func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
				panic("unexpected invocation of MockStore.GetUploads")
			},
		},
		GetUploadsByIDsFunc: &StoreGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Upload, error) {
				panic("unexpected invocation of MockStore.GetUploadsByIDs")
			},
		},
		GetUploadsByIDsAllowDeletedFunc: &StoreGetUploadsByIDsAllowDeletedFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Upload, error) {
				panic("unexpected invocation of MockStore.GetUploadsByIDsAllowDeleted")
			},
		},
		GetVisibleUploadsMatchingMonikersFunc: &StoreGetVisibleUploadsMatchingMonikersFunc{
			defaultHook: func(context.Context, int, string, []precise.QualifiedMonikerData, int, int) (shared.PackageReferenceScanner, int, error) {
				panic("unexpected invocation of MockStore.GetVisibleUploadsMatchingMonikers")
			},
		},
		HandleFunc: &StoreHandleFunc{
			defaultHook: func() *basestore.Store {
				panic("unexpected invocation of MockStore.Handle")
			},
		},
		HardDeleteUploadsByIDsFunc: &StoreHardDeleteUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) error {
				panic("unexpected invocation of MockStore.HardDeleteUploadsByIDs")
			},
		},
		HasCommitFunc: &StoreHasCommitFunc{
			defaultHook: func(context.Context, int, string) (bool, error) {
				panic("unexpected invocation of MockStore.HasCommit")
			},
		},
		HasRepositoryFunc: &StoreHasRepositoryFunc{
			defaultHook: func(context.Context, int) (bool, error) {
				panic("unexpected invocation of MockStore.HasRepository")
			},
		},
		InsertDependencySyncingJobFunc: &StoreInsertDependencySyncingJobFunc{
			defaultHook: func(context.Context, int) (int, error) {
				panic("unexpected invocation of MockStore.InsertDependencySyncingJob")
			},
		},
		InsertUploadFunc: &StoreInsertUploadFunc{
			defaultHook: func(context.Context, shared.Upload) (int, error) {
				panic("unexpected invocation of MockStore.InsertUpload")
			},
		},
		MarkFailedFunc: &StoreMarkFailedFunc{
			defaultHook: func(context.Context, int, string) error {
				panic("unexpected invocation of MockStore.MarkFailed")
			},
		},
		MarkQueuedFunc: &StoreMarkQueuedFunc{
			defaultHook: func(context.Context, int, *int64) error {
				panic("unexpected invocation of MockStore.MarkQueued")
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &StoreNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockStore.NumRepositoriesWithCodeIntelligence")
			},
		},
		ProcessSourcedCommitsFunc: &StoreProcessSourcedCommitsFunc{
			defaultHook: func(context.Context, time.Duration, time.Duration, int, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), time.Time) (int, int, error) {
				panic("unexpected invocation of MockStore.ProcessSourcedCommits")
			},
		},
		ProcessStaleSourcedCommitsFunc: &StoreProcessStaleSourcedCommitsFunc{
			defaultHook: func(context.Context, time.Duration, int, time.Duration, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (int, int, error) {
				panic("unexpected invocation of MockStore.ProcessStaleSourcedCommits")
			},
		},
		ReconcileCandidatesFunc: &StoreReconcileCandidatesFunc{
			defaultHook: func(context.Context, int) ([]int, error) {
				panic("unexpected invocation of MockStore.ReconcileCandidates")
			},
		},
		ReferencesForUploadFunc: &StoreReferencesForUploadFunc{
			defaultHook: func(context.Context, int) (shared.PackageReferenceScanner, error) {
				panic("unexpected invocation of MockStore.ReferencesForUpload")
			},
		},
		ReindexIndexByIDFunc: &StoreReindexIndexByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockStore.ReindexIndexByID")
			},
		},
		ReindexIndexesFunc: &StoreReindexIndexesFunc{
			defaultHook: func(context.Context, shared.ReindexIndexesOptions) error {
				panic("unexpected invocation of MockStore.ReindexIndexes")
			},
		},
		ReindexUploadByIDFunc: &StoreReindexUploadByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockStore.ReindexUploadByID")
			},
		},
		ReindexUploadsFunc: &StoreReindexUploadsFunc{
			defaultHook: func(context.Context, shared.ReindexUploadsOptions) error {
				panic("unexpected invocation of MockStore.ReindexUploads")
			},
		},
		RepositoryIDsWithErrorsFunc: &StoreRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
				panic("unexpected invocation of MockStore.RepositoryIDsWithErrors")
			},
		},
		SetRepositoriesForRetentionScanFunc: &StoreSetRepositoriesForRetentionScanFunc{
			defaultHook: func(context.Context, time.Duration, int) ([]int, error) {
				panic("unexpected invocation of MockStore.SetRepositoriesForRetentionScan")
			},
		},
		SetRepositoryAsDirtyFunc: &StoreSetRepositoryAsDirtyFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockStore.SetRepositoryAsDirty")
			},
		},
		SoftDeleteExpiredUploadsFunc: &StoreSoftDeleteExpiredUploadsFunc{
			defaultHook: func(context.Context, int) (int, int, error) {
				panic("unexpected invocation of MockStore.SoftDeleteExpiredUploads")
			},
		},
		SoftDeleteExpiredUploadsViaTraversalFunc: &StoreSoftDeleteExpiredUploadsViaTraversalFunc{
			defaultHook: func(context.Context, int) (int, int, error) {
				panic("unexpected invocation of MockStore.SoftDeleteExpiredUploadsViaTraversal")
			},
		},
		SourcedCommitsWithoutCommittedAtFunc: &StoreSourcedCommitsWithoutCommittedAtFunc{
			defaultHook: func(context.Context, int) ([]store.SourcedCommits, error) {
				panic("unexpected invocation of MockStore.SourcedCommitsWithoutCommittedAt")
			},
		},
		UpdateCommittedAtFunc: &StoreUpdateCommittedAtFunc{
			defaultHook: func(context.Context, int, string, string) error {
				panic("unexpected invocation of MockStore.UpdateCommittedAt")
			},
		},
		UpdatePackageReferencesFunc: &StoreUpdatePackageReferencesFunc{
			defaultHook: func(context.Context, int, []precise.PackageReference) error {
				panic("unexpected invocation of MockStore.UpdatePackageReferences")
			},
		},
		UpdatePackagesFunc: &StoreUpdatePackagesFunc{
			defaultHook: func(context.Context, int, []precise.Package) error {
				panic("unexpected invocation of MockStore.UpdatePackages")
			},
		},
		UpdateUploadRetentionFunc: &StoreUpdateUploadRetentionFunc{
			defaultHook: func(context.Context, []int, []int) error {
				panic("unexpected invocation of MockStore.UpdateUploadRetention")
			},
		},
		UpdateUploadsVisibleToCommitsFunc: &StoreUpdateUploadsVisibleToCommitsFunc{
			defaultHook: func(context.Context, int, *gitdomain.CommitGraph, map[string][]gitdomain.RefDescription, time.Duration, time.Duration, int, time.Time) error {
				panic("unexpected invocation of MockStore.UpdateUploadsVisibleToCommits")
			},
		},
		WithTransactionFunc: &StoreWithTransactionFunc{
			defaultHook: func(context.Context, func(s store.Store) error) error {
				panic("unexpected invocation of MockStore.WithTransaction")
			},
		},
		WorkerutilStoreFunc: &StoreWorkerutilStoreFunc{
			defaultHook: func(*observation.Context) store1.Store[shared.Upload] {
				panic("unexpected invocation of MockStore.WorkerutilStore")
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom(i store.Store) *MockStore {
	return &MockStore{
		AddUploadPartFunc: &StoreAddUploadPartFunc{
			defaultHook: i.AddUploadPart,
		},
		DeleteIndexByIDFunc: &StoreDeleteIndexByIDFunc{
			defaultHook: i.DeleteIndexByID,
		},
		DeleteIndexesFunc: &StoreDeleteIndexesFunc{
			defaultHook: i.DeleteIndexes,
		},
		DeleteIndexesWithoutRepositoryFunc: &StoreDeleteIndexesWithoutRepositoryFunc{
			defaultHook: i.DeleteIndexesWithoutRepository,
		},
		DeleteOldAuditLogsFunc: &StoreDeleteOldAuditLogsFunc{
			defaultHook: i.DeleteOldAuditLogs,
		},
		DeleteOverlappingDumpsFunc: &StoreDeleteOverlappingDumpsFunc{
			defaultHook: i.DeleteOverlappingDumps,
		},
		DeleteUploadByIDFunc: &StoreDeleteUploadByIDFunc{
			defaultHook: i.DeleteUploadByID,
		},
		DeleteUploadsFunc: &StoreDeleteUploadsFunc{
			defaultHook: i.DeleteUploads,
		},
		DeleteUploadsStuckUploadingFunc: &StoreDeleteUploadsStuckUploadingFunc{
			defaultHook: i.DeleteUploadsStuckUploading,
		},
		DeleteUploadsWithoutRepositoryFunc: &StoreDeleteUploadsWithoutRepositoryFunc{
			defaultHook: i.DeleteUploadsWithoutRepository,
		},
		ExpireFailedRecordsFunc: &StoreExpireFailedRecordsFunc{
			defaultHook: i.ExpireFailedRecords,
		},
		FindClosestDumpsFunc: &StoreFindClosestDumpsFunc{
			defaultHook: i.FindClosestDumps,
		},
		FindClosestDumpsFromGraphFragmentFunc: &StoreFindClosestDumpsFromGraphFragmentFunc{
			defaultHook: i.FindClosestDumpsFromGraphFragment,
		},
		GetAuditLogsForUploadFunc: &StoreGetAuditLogsForUploadFunc{
			defaultHook: i.GetAuditLogsForUpload,
		},
		GetCommitGraphMetadataFunc: &StoreGetCommitGraphMetadataFunc{
			defaultHook: i.GetCommitGraphMetadata,
		},
		GetCommitsVisibleToUploadFunc: &StoreGetCommitsVisibleToUploadFunc{
			defaultHook: i.GetCommitsVisibleToUpload,
		},
		GetDirtyRepositoriesFunc: &StoreGetDirtyRepositoriesFunc{
			defaultHook: i.GetDirtyRepositories,
		},
		GetDumpsByIDsFunc: &StoreGetDumpsByIDsFunc{
			defaultHook: i.GetDumpsByIDs,
		},
		GetDumpsWithDefinitionsForMonikersFunc: &StoreGetDumpsWithDefinitionsForMonikersFunc{
			defaultHook: i.GetDumpsWithDefinitionsForMonikers,
		},
		GetIndexByIDFunc: &StoreGetIndexByIDFunc{
			defaultHook: i.GetIndexByID,
		},
		GetIndexersFunc: &StoreGetIndexersFunc{
			defaultHook: i.GetIndexers,
		},
		GetIndexesFunc: &StoreGetIndexesFunc{
			defaultHook: i.GetIndexes,
		},
		GetIndexesByIDsFunc: &StoreGetIndexesByIDsFunc{
			defaultHook: i.GetIndexesByIDs,
		},
		GetLastUploadRetentionScanForRepositoryFunc: &StoreGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: i.GetLastUploadRetentionScanForRepository,
		},
		GetOldestCommitDateFunc: &StoreGetOldestCommitDateFunc{
			defaultHook: i.GetOldestCommitDate,
		},
		GetRecentIndexesSummaryFunc: &StoreGetRecentIndexesSummaryFunc{
			defaultHook: i.GetRecentIndexesSummary,
		},
		GetRecentUploadsSummaryFunc: &StoreGetRecentUploadsSummaryFunc{
			defaultHook: i.GetRecentUploadsSummary,
		},
		GetRepositoriesMaxStaleAgeFunc: &StoreGetRepositoriesMaxStaleAgeFunc{
			defaultHook: i.GetRepositoriesMaxStaleAge,
		},
		GetUploadByIDFunc: &StoreGetUploadByIDFunc{
			defaultHook: i.GetUploadByID,
		},
		GetUploadIDsWithReferencesFunc: &StoreGetUploadIDsWithReferencesFunc{
			defaultHook: i.GetUploadIDsWithReferences,
		},
		GetUploadsFunc: &StoreGetUploadsFunc{
			defaultHook: i.GetUploads,
		},
		GetUploadsByIDsFunc: &StoreGetUploadsByIDsFunc{
			defaultHook: i.GetUploadsByIDs,
		},
		GetUploadsByIDsAllowDeletedFunc: &StoreGetUploadsByIDsAllowDeletedFunc{
			defaultHook: i.GetUploadsByIDsAllowDeleted,
		},
		GetVisibleUploadsMatchingMonikersFunc: &StoreGetVisibleUploadsMatchingMonikersFunc{
			defaultHook: i.GetVisibleUploadsMatchingMonikers,
		},
		HandleFunc: &StoreHandleFunc{
			defaultHook: i.Handle,
		},
		HardDeleteUploadsByIDsFunc: &StoreHardDeleteUploadsByIDsFunc{
			defaultHook: i.HardDeleteUploadsByIDs,
		},
		HasCommitFunc: &StoreHasCommitFunc{
			defaultHook: i.HasCommit,
		},
		HasRepositoryFunc: &StoreHasRepositoryFunc{
			defaultHook: i.HasRepository,
		},
		InsertDependencySyncingJobFunc: &StoreInsertDependencySyncingJobFunc{
			defaultHook: i.InsertDependencySyncingJob,
		},
		InsertUploadFunc: &StoreInsertUploadFunc{
			defaultHook: i.InsertUpload,
		},
		MarkFailedFunc: &StoreMarkFailedFunc{
			defaultHook: i.MarkFailed,
		},
		MarkQueuedFunc: &StoreMarkQueuedFunc{
			defaultHook: i.MarkQueued,
		},
		NumRepositoriesWithCodeIntelligenceFunc: &StoreNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: i.NumRepositoriesWithCodeIntelligence,
		},
		ProcessSourcedCommitsFunc: &StoreProcessSourcedCommitsFunc{
			defaultHook: i.ProcessSourcedCommits,
		},
		ProcessStaleSourcedCommitsFunc: &StoreProcessStaleSourcedCommitsFunc{
			defaultHook: i.ProcessStaleSourcedCommits,
		},
		ReconcileCandidatesFunc: &StoreReconcileCandidatesFunc{
			defaultHook: i.ReconcileCandidates,
		},
		ReferencesForUploadFunc: &StoreReferencesForUploadFunc{
			defaultHook: i.ReferencesForUpload,
		},
		ReindexIndexByIDFunc: &StoreReindexIndexByIDFunc{
			defaultHook: i.ReindexIndexByID,
		},
		ReindexIndexesFunc: &StoreReindexIndexesFunc{
			defaultHook: i.ReindexIndexes,
		},
		ReindexUploadByIDFunc: &StoreReindexUploadByIDFunc{
			defaultHook: i.ReindexUploadByID,
		},
		ReindexUploadsFunc: &StoreReindexUploadsFunc{
			defaultHook: i.ReindexUploads,
		},
		RepositoryIDsWithErrorsFunc: &StoreRepositoryIDsWithErrorsFunc{
			defaultHook: i.RepositoryIDsWithErrors,
		},
		SetRepositoriesForRetentionScanFunc: &StoreSetRepositoriesForRetentionScanFunc{
			defaultHook: i.SetRepositoriesForRetentionScan,
		},
		SetRepositoryAsDirtyFunc: &StoreSetRepositoryAsDirtyFunc{
			defaultHook: i.SetRepositoryAsDirty,
		},
		SoftDeleteExpiredUploadsFunc: &StoreSoftDeleteExpiredUploadsFunc{
			defaultHook: i.SoftDeleteExpiredUploads,
		},
		SoftDeleteExpiredUploadsViaTraversalFunc: &StoreSoftDeleteExpiredUploadsViaTraversalFunc{
			defaultHook: i.SoftDeleteExpiredUploadsViaTraversal,
		},
		SourcedCommitsWithoutCommittedAtFunc: &StoreSourcedCommitsWithoutCommittedAtFunc{
			defaultHook: i.SourcedCommitsWithoutCommittedAt,
		},
		UpdateCommittedAtFunc: &StoreUpdateCommittedAtFunc{
			defaultHook: i.UpdateCommittedAt,
		},
		UpdatePackageReferencesFunc: &StoreUpdatePackageReferencesFunc{
			defaultHook: i.UpdatePackageReferences,
		},
		UpdatePackagesFunc: &StoreUpdatePackagesFunc{
			defaultHook: i.UpdatePackages,
		},
		UpdateUploadRetentionFunc: &StoreUpdateUploadRetentionFunc{
			defaultHook: i.UpdateUploadRetention,
		},
		UpdateUploadsVisibleToCommitsFunc: &StoreUpdateUploadsVisibleToCommitsFunc{
			defaultHook: i.UpdateUploadsVisibleToCommits,
		},
		WithTransactionFunc: &StoreWithTransactionFunc{
			defaultHook: i.WithTransaction,
		},
		WorkerutilStoreFunc: &StoreWorkerutilStoreFunc{
			defaultHook: i.WorkerutilStore,
		},
	}
}

// StoreAddUploadPartFunc describes the behavior when the AddUploadPart
// method of the parent MockStore instance is invoked.
type StoreAddUploadPartFunc struct {
	defaultHook func(context.Context, int, int) error
	hooks       []func(context.Context, int, int) error
	history     []StoreAddUploadPartFuncCall
	mutex       sync.Mutex
}

// AddUploadPart delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) AddUploadPart(v0 context.Context, v1 int, v2 int) error {
	r0 := m.AddUploadPartFunc.nextHook()(v0, v1, v2)
	m.AddUploadPartFunc.appendCall(StoreAddUploadPartFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddUploadPart method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreAddUploadPartFunc) SetDefaultHook(hook func(context.Context, int, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddUploadPart method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreAddUploadPartFunc) PushHook(hook func(context.Context, int, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreAddUploadPartFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreAddUploadPartFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, int) error {
		return r0
	})
}

func (f *StoreAddUploadPartFunc) nextHook() func(context.Context, int, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreAddUploadPartFunc) appendCall(r0 StoreAddUploadPartFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreAddUploadPartFuncCall objects
// describing the invocations of this function.
func (f *StoreAddUploadPartFunc) History() []StoreAddUploadPartFuncCall {
	f.mutex.Lock()
	history := make([]StoreAddUploadPartFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreAddUploadPartFuncCall is an object that describes an invocation of
// method AddUploadPart on an instance of MockStore.
type StoreAddUploadPartFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreAddUploadPartFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreAddUploadPartFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreDeleteIndexByIDFunc describes the behavior when the DeleteIndexByID
// method of the parent MockStore instance is invoked.
type StoreDeleteIndexByIDFunc struct {
	defaultHook func(context.Context, int) (bool, error)
	hooks       []func(context.Context, int) (bool, error)
	history     []StoreDeleteIndexByIDFuncCall
	mutex       sync.Mutex
}

// DeleteIndexByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) DeleteIndexByID(v0 context.Context, v1 int) (bool, error) {
	r0, r1 := m.DeleteIndexByIDFunc.nextHook()(v0, v1)
	m.DeleteIndexByIDFunc.appendCall(StoreDeleteIndexByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteIndexByID
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreDeleteIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteIndexByID method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreDeleteIndexByIDFunc) PushHook(hook func(context.Context, int) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteIndexByIDFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteIndexByIDFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

func (f *StoreDeleteIndexByIDFunc) nextHook() func(context.Context, int) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteIndexByIDFunc) appendCall(r0 StoreDeleteIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteIndexByIDFuncCall objects
// describing the invocations of this function.
func (f *StoreDeleteIndexByIDFunc) History() []StoreDeleteIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteIndexByIDFuncCall is an object that describes an invocation of
// method DeleteIndexByID on an instance of MockStore.
type StoreDeleteIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreDeleteIndexesFunc describes the behavior when the DeleteIndexes
// method of the parent MockStore instance is invoked.
type StoreDeleteIndexesFunc struct {
	defaultHook func(context.Context, shared.DeleteIndexesOptions) error
	hooks       []func(context.Context, shared.DeleteIndexesOptions) error
	history     []StoreDeleteIndexesFuncCall
	mutex       sync.Mutex
}

// DeleteIndexes delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) DeleteIndexes(v0 context.Context, v1 shared.DeleteIndexesOptions) error {
	r0 := m.DeleteIndexesFunc.nextHook()(v0, v1)
	m.DeleteIndexesFunc.appendCall(StoreDeleteIndexesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteIndexes method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreDeleteIndexesFunc) SetDefaultHook(hook func(context.Context, shared.DeleteIndexesOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteIndexes method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreDeleteIndexesFunc) PushHook(hook func(context.Context, shared.DeleteIndexesOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteIndexesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.DeleteIndexesOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteIndexesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.DeleteIndexesOptions) error {
		return r0
	})
}

func (f *StoreDeleteIndexesFunc) nextHook() func(context.Context, shared.DeleteIndexesOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteIndexesFunc) appendCall(r0 StoreDeleteIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteIndexesFuncCall objects
// describing the invocations of this function.
func (f *StoreDeleteIndexesFunc) History() []StoreDeleteIndexesFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteIndexesFuncCall is an object that describes an invocation of
// method DeleteIndexes on an instance of MockStore.
type StoreDeleteIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.DeleteIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreDeleteIndexesWithoutRepositoryFunc describes the behavior when the
// DeleteIndexesWithoutRepository method of the parent MockStore instance is
// invoked.
type StoreDeleteIndexesWithoutRepositoryFunc struct {
	defaultHook func(context.Context, time.Time) (int, int, error)
	hooks       []func(context.Context, time.Time) (int, int, error)
	history     []StoreDeleteIndexesWithoutRepositoryFuncCall
	mutex       sync.Mutex
}

// DeleteIndexesWithoutRepository delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) DeleteIndexesWithoutRepository(v0 context.Context, v1 time.Time) (int, int, error) {
	r0, r1, r2 := m.DeleteIndexesWithoutRepositoryFunc.nextHook()(v0, v1)
	m.DeleteIndexesWithoutRepositoryFunc.appendCall(StoreDeleteIndexesWithoutRepositoryFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// DeleteIndexesWithoutRepository method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreDeleteIndexesWithoutRepositoryFunc) SetDefaultHook(hook func(context.Context, time.Time) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteIndexesWithoutRepository method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreDeleteIndexesWithoutRepositoryFunc) PushHook(hook func(context.Context, time.Time) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteIndexesWithoutRepositoryFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteIndexesWithoutRepositoryFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreDeleteIndexesWithoutRepositoryFunc) nextHook() func(context.Context, time.Time) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteIndexesWithoutRepositoryFunc) appendCall(r0 StoreDeleteIndexesWithoutRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteIndexesWithoutRepositoryFuncCall
// objects describing the invocations of this function.
func (f *StoreDeleteIndexesWithoutRepositoryFunc) History() []StoreDeleteIndexesWithoutRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteIndexesWithoutRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteIndexesWithoutRepositoryFuncCall is an object that describes
// an invocation of method DeleteIndexesWithoutRepository on an instance of
// MockStore.
type StoreDeleteIndexesWithoutRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteIndexesWithoutRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteIndexesWithoutRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreDeleteOldAuditLogsFunc describes the behavior when the
// DeleteOldAuditLogs method of the parent MockStore instance is invoked.
type StoreDeleteOldAuditLogsFunc struct {
	defaultHook func(context.Context, time.Duration, time.Time) (int, int, error)
	hooks       []func(context.Context, time.Duration, time.Time) (int, int, error)
	history     []StoreDeleteOldAuditLogsFuncCall
	mutex       sync.Mutex
}

// DeleteOldAuditLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) DeleteOldAuditLogs(v0 context.Context, v1 time.Duration, v2 time.Time) (int, int, error) {
	r0, r1, r2 := m.DeleteOldAuditLogsFunc.nextHook()(v0, v1, v2)
	m.DeleteOldAuditLogsFunc.appendCall(StoreDeleteOldAuditLogsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the DeleteOldAuditLogs
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreDeleteOldAuditLogsFunc) SetDefaultHook(hook func(context.Context, time.Duration, time.Time) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOldAuditLogs method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreDeleteOldAuditLogsFunc) PushHook(hook func(context.Context, time.Duration, time.Time) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteOldAuditLogsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, time.Duration, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteOldAuditLogsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, time.Duration, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreDeleteOldAuditLogsFunc) nextHook() func(context.Context, time.Duration, time.Time) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteOldAuditLogsFunc) appendCall(r0 StoreDeleteOldAuditLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteOldAuditLogsFuncCall objects
// describing the invocations of this function.
func (f *StoreDeleteOldAuditLogsFunc) History() []StoreDeleteOldAuditLogsFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteOldAuditLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteOldAuditLogsFuncCall is an object that describes an invocation
// of method DeleteOldAuditLogs on an instance of MockStore.
type StoreDeleteOldAuditLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteOldAuditLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteOldAuditLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreDeleteOverlappingDumpsFunc describes the behavior when the
// DeleteOverlappingDumps method of the parent MockStore instance is
// invoked.
type StoreDeleteOverlappingDumpsFunc struct {
	defaultHook func(context.Context, int, string, string, string) error
	hooks       []func(context.Context, int, string, string, string) error
	history     []StoreDeleteOverlappingDumpsFuncCall
	mutex       sync.Mutex
}

// DeleteOverlappingDumps delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) DeleteOverlappingDumps(v0 context.Context, v1 int, v2 string, v3 string, v4 string) error {
	r0 := m.DeleteOverlappingDumpsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.DeleteOverlappingDumpsFunc.appendCall(StoreDeleteOverlappingDumpsFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteOverlappingDumps method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreDeleteOverlappingDumpsFunc) SetDefaultHook(hook func(context.Context, int, string, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOverlappingDumps method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreDeleteOverlappingDumpsFunc) PushHook(hook func(context.Context, int, string, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteOverlappingDumpsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteOverlappingDumpsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string, string, string) error {
		return r0
	})
}

func (f *StoreDeleteOverlappingDumpsFunc) nextHook() func(context.Context, int, string, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteOverlappingDumpsFunc) appendCall(r0 StoreDeleteOverlappingDumpsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteOverlappingDumpsFuncCall objects
// describing the invocations of this function.
func (f *StoreDeleteOverlappingDumpsFunc) History() []StoreDeleteOverlappingDumpsFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteOverlappingDumpsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteOverlappingDumpsFuncCall is an object that describes an
// invocation of method DeleteOverlappingDumps on an instance of MockStore.
type StoreDeleteOverlappingDumpsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteOverlappingDumpsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteOverlappingDumpsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreDeleteUploadByIDFunc describes the behavior when the
// DeleteUploadByID method of the parent MockStore instance is invoked.
type StoreDeleteUploadByIDFunc struct {
	defaultHook func(context.Context, int) (bool, error)
	hooks       []func(context.Context, int) (bool, error)
	history     []StoreDeleteUploadByIDFuncCall
	mutex       sync.Mutex
}

// DeleteUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) DeleteUploadByID(v0 context.Context, v1 int) (bool, error) {
	r0, r1 := m.DeleteUploadByIDFunc.nextHook()(v0, v1)
	m.DeleteUploadByIDFunc.appendCall(StoreDeleteUploadByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteUploadByID
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploadByID method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreDeleteUploadByIDFunc) PushHook(hook func(context.Context, int) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteUploadByIDFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteUploadByIDFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

func (f *StoreDeleteUploadByIDFunc) nextHook() func(context.Context, int) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteUploadByIDFunc) appendCall(r0 StoreDeleteUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *StoreDeleteUploadByIDFunc) History() []StoreDeleteUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteUploadByIDFuncCall is an object that describes an invocation
// of method DeleteUploadByID on an instance of MockStore.
type StoreDeleteUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreDeleteUploadsFunc describes the behavior when the DeleteUploads
// method of the parent MockStore instance is invoked.
type StoreDeleteUploadsFunc struct {
	defaultHook func(context.Context, shared.DeleteUploadsOptions) error
	hooks       []func(context.Context, shared.DeleteUploadsOptions) error
	history     []StoreDeleteUploadsFuncCall
	mutex       sync.Mutex
}

// DeleteUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) DeleteUploads(v0 context.Context, v1 shared.DeleteUploadsOptions) error {
	r0 := m.DeleteUploadsFunc.nextHook()(v0, v1)
	m.DeleteUploadsFunc.appendCall(StoreDeleteUploadsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteUploads method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreDeleteUploadsFunc) SetDefaultHook(hook func(context.Context, shared.DeleteUploadsOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploads method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreDeleteUploadsFunc) PushHook(hook func(context.Context, shared.DeleteUploadsOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteUploadsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.DeleteUploadsOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteUploadsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.DeleteUploadsOptions) error {
		return r0
	})
}

func (f *StoreDeleteUploadsFunc) nextHook() func(context.Context, shared.DeleteUploadsOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteUploadsFunc) appendCall(r0 StoreDeleteUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteUploadsFuncCall objects
// describing the invocations of this function.
func (f *StoreDeleteUploadsFunc) History() []StoreDeleteUploadsFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteUploadsFuncCall is an object that describes an invocation of
// method DeleteUploads on an instance of MockStore.
type StoreDeleteUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.DeleteUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreDeleteUploadsStuckUploadingFunc describes the behavior when the
// DeleteUploadsStuckUploading method of the parent MockStore instance is
// invoked.
type StoreDeleteUploadsStuckUploadingFunc struct {
	defaultHook func(context.Context, time.Time) (int, int, error)
	hooks       []func(context.Context, time.Time) (int, int, error)
	history     []StoreDeleteUploadsStuckUploadingFuncCall
	mutex       sync.Mutex
}

// DeleteUploadsStuckUploading delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) DeleteUploadsStuckUploading(v0 context.Context, v1 time.Time) (int, int, error) {
	r0, r1, r2 := m.DeleteUploadsStuckUploadingFunc.nextHook()(v0, v1)
	m.DeleteUploadsStuckUploadingFunc.appendCall(StoreDeleteUploadsStuckUploadingFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// DeleteUploadsStuckUploading method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreDeleteUploadsStuckUploadingFunc) SetDefaultHook(hook func(context.Context, time.Time) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploadsStuckUploading method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreDeleteUploadsStuckUploadingFunc) PushHook(hook func(context.Context, time.Time) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteUploadsStuckUploadingFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteUploadsStuckUploadingFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreDeleteUploadsStuckUploadingFunc) nextHook() func(context.Context, time.Time) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteUploadsStuckUploadingFunc) appendCall(r0 StoreDeleteUploadsStuckUploadingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteUploadsStuckUploadingFuncCall
// objects describing the invocations of this function.
func (f *StoreDeleteUploadsStuckUploadingFunc) History() []StoreDeleteUploadsStuckUploadingFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteUploadsStuckUploadingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteUploadsStuckUploadingFuncCall is an object that describes an
// invocation of method DeleteUploadsStuckUploading on an instance of
// MockStore.
type StoreDeleteUploadsStuckUploadingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteUploadsStuckUploadingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteUploadsStuckUploadingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreDeleteUploadsWithoutRepositoryFunc describes the behavior when the
// DeleteUploadsWithoutRepository method of the parent MockStore instance is
// invoked.
type StoreDeleteUploadsWithoutRepositoryFunc struct {
	defaultHook func(context.Context, time.Time) (int, int, error)
	hooks       []func(context.Context, time.Time) (int, int, error)
	history     []StoreDeleteUploadsWithoutRepositoryFuncCall
	mutex       sync.Mutex
}

// DeleteUploadsWithoutRepository delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) DeleteUploadsWithoutRepository(v0 context.Context, v1 time.Time) (int, int, error) {
	r0, r1, r2 := m.DeleteUploadsWithoutRepositoryFunc.nextHook()(v0, v1)
	m.DeleteUploadsWithoutRepositoryFunc.appendCall(StoreDeleteUploadsWithoutRepositoryFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// DeleteUploadsWithoutRepository method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreDeleteUploadsWithoutRepositoryFunc) SetDefaultHook(hook func(context.Context, time.Time) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploadsWithoutRepository method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreDeleteUploadsWithoutRepositoryFunc) PushHook(hook func(context.Context, time.Time) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteUploadsWithoutRepositoryFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteUploadsWithoutRepositoryFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreDeleteUploadsWithoutRepositoryFunc) nextHook() func(context.Context, time.Time) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteUploadsWithoutRepositoryFunc) appendCall(r0 StoreDeleteUploadsWithoutRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteUploadsWithoutRepositoryFuncCall
// objects describing the invocations of this function.
func (f *StoreDeleteUploadsWithoutRepositoryFunc) History() []StoreDeleteUploadsWithoutRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteUploadsWithoutRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteUploadsWithoutRepositoryFuncCall is an object that describes
// an invocation of method DeleteUploadsWithoutRepository on an instance of
// MockStore.
type StoreDeleteUploadsWithoutRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteUploadsWithoutRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteUploadsWithoutRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreExpireFailedRecordsFunc describes the behavior when the
// ExpireFailedRecords method of the parent MockStore instance is invoked.
type StoreExpireFailedRecordsFunc struct {
	defaultHook func(context.Context, int, time.Duration, time.Time) (int, int, error)
	hooks       []func(context.Context, int, time.Duration, time.Time) (int, int, error)
	history     []StoreExpireFailedRecordsFuncCall
	mutex       sync.Mutex
}

// ExpireFailedRecords delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ExpireFailedRecords(v0 context.Context, v1 int, v2 time.Duration, v3 time.Time) (int, int, error) {
	r0, r1, r2 := m.ExpireFailedRecordsFunc.nextHook()(v0, v1, v2, v3)
	m.ExpireFailedRecordsFunc.appendCall(StoreExpireFailedRecordsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ExpireFailedRecords
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreExpireFailedRecordsFunc) SetDefaultHook(hook func(context.Context, int, time.Duration, time.Time) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExpireFailedRecords method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreExpireFailedRecordsFunc) PushHook(hook func(context.Context, int, time.Duration, time.Time) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreExpireFailedRecordsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, time.Duration, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreExpireFailedRecordsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, time.Duration, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreExpireFailedRecordsFunc) nextHook() func(context.Context, int, time.Duration, time.Time) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreExpireFailedRecordsFunc) appendCall(r0 StoreExpireFailedRecordsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreExpireFailedRecordsFuncCall objects
// describing the invocations of this function.
func (f *StoreExpireFailedRecordsFunc) History() []StoreExpireFailedRecordsFuncCall {
	f.mutex.Lock()
	history := make([]StoreExpireFailedRecordsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreExpireFailedRecordsFuncCall is an object that describes an
// invocation of method ExpireFailedRecords on an instance of MockStore.
type StoreExpireFailedRecordsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreExpireFailedRecordsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreExpireFailedRecordsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreFindClosestDumpsFunc describes the behavior when the
// FindClosestDumps method of the parent MockStore instance is invoked.
type StoreFindClosestDumpsFunc struct {
	defaultHook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)
	hooks       []func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)
	history     []StoreFindClosestDumpsFuncCall
	mutex       sync.Mutex
}

// FindClosestDumps delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) FindClosestDumps(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string) ([]shared.Dump, error) {
	r0, r1 := m.FindClosestDumpsFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.FindClosestDumpsFunc.appendCall(StoreFindClosestDumpsFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FindClosestDumps
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreFindClosestDumpsFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FindClosestDumps method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreFindClosestDumpsFunc) PushHook(hook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreFindClosestDumpsFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreFindClosestDumpsFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *StoreFindClosestDumpsFunc) nextHook() func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreFindClosestDumpsFunc) appendCall(r0 StoreFindClosestDumpsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreFindClosestDumpsFuncCall objects
// describing the invocations of this function.
func (f *StoreFindClosestDumpsFunc) History() []StoreFindClosestDumpsFuncCall {
	f.mutex.Lock()
	history := make([]StoreFindClosestDumpsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreFindClosestDumpsFuncCall is an object that describes an invocation
// of method FindClosestDumps on an instance of MockStore.
type StoreFindClosestDumpsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreFindClosestDumpsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreFindClosestDumpsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreFindClosestDumpsFromGraphFragmentFunc describes the behavior when
// the FindClosestDumpsFromGraphFragment method of the parent MockStore
// instance is invoked.
type StoreFindClosestDumpsFromGraphFragmentFunc struct {
	defaultHook func(context.Context, int, string, string, bool, string, *gitdomain.CommitGraph) ([]shared.Dump, error)
	hooks       []func(context.Context, int, string, string, bool, string, *gitdomain.CommitGraph) ([]shared.Dump, error)
	history     []StoreFindClosestDumpsFromGraphFragmentFuncCall
	mutex       sync.Mutex
}

// FindClosestDumpsFromGraphFragment delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStore) FindClosestDumpsFromGraphFragment(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string, v6 *gitdomain.CommitGraph) ([]shared.Dump, error) {
	r0, r1 := m.FindClosestDumpsFromGraphFragmentFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.FindClosestDumpsFromGraphFragmentFunc.appendCall(StoreFindClosestDumpsFromGraphFragmentFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FindClosestDumpsFromGraphFragment method of the parent MockStore instance
// is invoked and the hook queue is empty.
func (f *StoreFindClosestDumpsFromGraphFragmentFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string, *gitdomain.CommitGraph) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FindClosestDumpsFromGraphFragment method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreFindClosestDumpsFromGraphFragmentFunc) PushHook(hook func(context.Context, int, string, string, bool, string, *gitdomain.CommitGraph) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreFindClosestDumpsFromGraphFragmentFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool, string, *gitdomain.CommitGraph) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreFindClosestDumpsFromGraphFragmentFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, int, string, string, bool, string, *gitdomain.CommitGraph) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *StoreFindClosestDumpsFromGraphFragmentFunc) nextHook() func(context.Context, int, string, string, bool, string, *gitdomain.CommitGraph) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreFindClosestDumpsFromGraphFragmentFunc) appendCall(r0 StoreFindClosestDumpsFromGraphFragmentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreFindClosestDumpsFromGraphFragmentFuncCall objects describing the
// invocations of this function.
func (f *StoreFindClosestDumpsFromGraphFragmentFunc) History() []StoreFindClosestDumpsFromGraphFragmentFuncCall {
	f.mutex.Lock()
	history := make([]StoreFindClosestDumpsFromGraphFragmentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreFindClosestDumpsFromGraphFragmentFuncCall is an object that
// describes an invocation of method FindClosestDumpsFromGraphFragment on an
// instance of MockStore.
type StoreFindClosestDumpsFromGraphFragmentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 *gitdomain.CommitGraph
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreFindClosestDumpsFromGraphFragmentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreFindClosestDumpsFromGraphFragmentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetAuditLogsForUploadFunc describes the behavior when the
// GetAuditLogsForUpload method of the parent MockStore instance is invoked.
type StoreGetAuditLogsForUploadFunc struct {
	defaultHook func(context.Context, int) ([]shared.UploadLog, error)
	hooks       []func(context.Context, int) ([]shared.UploadLog, error)
	history     []StoreGetAuditLogsForUploadFuncCall
	mutex       sync.Mutex
}

// GetAuditLogsForUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) GetAuditLogsForUpload(v0 context.Context, v1 int) ([]shared.UploadLog, error) {
	r0, r1 := m.GetAuditLogsForUploadFunc.nextHook()(v0, v1)
	m.GetAuditLogsForUploadFunc.appendCall(StoreGetAuditLogsForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAuditLogsForUpload method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreGetAuditLogsForUploadFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.UploadLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuditLogsForUpload method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreGetAuditLogsForUploadFunc) PushHook(hook func(context.Context, int) ([]shared.UploadLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetAuditLogsForUploadFunc) SetDefaultReturn(r0 []shared.UploadLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.UploadLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetAuditLogsForUploadFunc) PushReturn(r0 []shared.UploadLog, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.UploadLog, error) {
		return r0, r1
	})
}

func (f *StoreGetAuditLogsForUploadFunc) nextHook() func(context.Context, int) ([]shared.UploadLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetAuditLogsForUploadFunc) appendCall(r0 StoreGetAuditLogsForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetAuditLogsForUploadFuncCall objects
// describing the invocations of this function.
func (f *StoreGetAuditLogsForUploadFunc) History() []StoreGetAuditLogsForUploadFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetAuditLogsForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetAuditLogsForUploadFuncCall is an object that describes an
// invocation of method GetAuditLogsForUpload on an instance of MockStore.
type StoreGetAuditLogsForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetAuditLogsForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetAuditLogsForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetCommitGraphMetadataFunc describes the behavior when the
// GetCommitGraphMetadata method of the parent MockStore instance is
// invoked.
type StoreGetCommitGraphMetadataFunc struct {
	defaultHook func(context.Context, int) (bool, *time.Time, error)
	hooks       []func(context.Context, int) (bool, *time.Time, error)
	history     []StoreGetCommitGraphMetadataFuncCall
	mutex       sync.Mutex
}

// GetCommitGraphMetadata delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) GetCommitGraphMetadata(v0 context.Context, v1 int) (bool, *time.Time, error) {
	r0, r1, r2 := m.GetCommitGraphMetadataFunc.nextHook()(v0, v1)
	m.GetCommitGraphMetadataFunc.appendCall(StoreGetCommitGraphMetadataFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetCommitGraphMetadata method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreGetCommitGraphMetadataFunc) SetDefaultHook(hook func(context.Context, int) (bool, *time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommitGraphMetadata method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreGetCommitGraphMetadataFunc) PushHook(hook func(context.Context, int) (bool, *time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetCommitGraphMetadataFunc) SetDefaultReturn(r0 bool, r1 *time.Time, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, *time.Time, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetCommitGraphMetadataFunc) PushReturn(r0 bool, r1 *time.Time, r2 error) {
	f.PushHook(func(context.Context, int) (bool, *time.Time, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetCommitGraphMetadataFunc) nextHook() func(context.Context, int) (bool, *time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetCommitGraphMetadataFunc) appendCall(r0 StoreGetCommitGraphMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetCommitGraphMetadataFuncCall objects
// describing the invocations of this function.
func (f *StoreGetCommitGraphMetadataFunc) History() []StoreGetCommitGraphMetadataFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetCommitGraphMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetCommitGraphMetadataFuncCall is an object that describes an
// invocation of method GetCommitGraphMetadata on an instance of MockStore.
type StoreGetCommitGraphMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *time.Time
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetCommitGraphMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetCommitGraphMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetCommitsVisibleToUploadFunc describes the behavior when the
// GetCommitsVisibleToUpload method of the parent MockStore instance is
// invoked.
type StoreGetCommitsVisibleToUploadFunc struct {
	defaultHook func(context.Context, int, int, *string) ([]string, *string, error)
	hooks       []func(context.Context, int, int, *string) ([]string, *string, error)
	history     []StoreGetCommitsVisibleToUploadFuncCall
	mutex       sync.Mutex
}

// GetCommitsVisibleToUpload delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) GetCommitsVisibleToUpload(v0 context.Context, v1 int, v2 int, v3 *string) ([]string, *string, error) {
	r0, r1, r2 := m.GetCommitsVisibleToUploadFunc.nextHook()(v0, v1, v2, v3)
	m.GetCommitsVisibleToUploadFunc.appendCall(StoreGetCommitsVisibleToUploadFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetCommitsVisibleToUpload method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetCommitsVisibleToUploadFunc) SetDefaultHook(hook func(context.Context, int, int, *string) ([]string, *string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommitsVisibleToUpload method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreGetCommitsVisibleToUploadFunc) PushHook(hook func(context.Context, int, int, *string) ([]string, *string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetCommitsVisibleToUploadFunc) SetDefaultReturn(r0 []string, r1 *string, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int, *string) ([]string, *string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetCommitsVisibleToUploadFunc) PushReturn(r0 []string, r1 *string, r2 error) {
	f.PushHook(func(context.Context, int, int, *string) ([]string, *string, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetCommitsVisibleToUploadFunc) nextHook() func(context.Context, int, int, *string) ([]string, *string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetCommitsVisibleToUploadFunc) appendCall(r0 StoreGetCommitsVisibleToUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetCommitsVisibleToUploadFuncCall
// objects describing the invocations of this function.
func (f *StoreGetCommitsVisibleToUploadFunc) History() []StoreGetCommitsVisibleToUploadFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetCommitsVisibleToUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetCommitsVisibleToUploadFuncCall is an object that describes an
// invocation of method GetCommitsVisibleToUpload on an instance of
// MockStore.
type StoreGetCommitsVisibleToUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetCommitsVisibleToUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetCommitsVisibleToUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetDirtyRepositoriesFunc describes the behavior when the
// GetDirtyRepositories method of the parent MockStore instance is invoked.
type StoreGetDirtyRepositoriesFunc struct {
	defaultHook func(context.Context) ([]shared.DirtyRepository, error)
	hooks       []func(context.Context) ([]shared.DirtyRepository, error)
	history     []StoreGetDirtyRepositoriesFuncCall
	mutex       sync.Mutex
}

// GetDirtyRepositories delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) GetDirtyRepositories(v0 context.Context) ([]shared.DirtyRepository, error) {
	r0, r1 := m.GetDirtyRepositoriesFunc.nextHook()(v0)
	m.GetDirtyRepositoriesFunc.appendCall(StoreGetDirtyRepositoriesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDirtyRepositories
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreGetDirtyRepositoriesFunc) SetDefaultHook(hook func(context.Context) ([]shared.DirtyRepository, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDirtyRepositories method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreGetDirtyRepositoriesFunc) PushHook(hook func(context.Context) ([]shared.DirtyRepository, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetDirtyRepositoriesFunc) SetDefaultReturn(r0 []shared.DirtyRepository, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]shared.DirtyRepository, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetDirtyRepositoriesFunc) PushReturn(r0 []shared.DirtyRepository, r1 error) {
	f.PushHook(func(context.Context) ([]shared.DirtyRepository, error) {
		return r0, r1
	})
}

func (f *StoreGetDirtyRepositoriesFunc) nextHook() func(context.Context) ([]shared.DirtyRepository, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetDirtyRepositoriesFunc) appendCall(r0 StoreGetDirtyRepositoriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetDirtyRepositoriesFuncCall objects
// describing the invocations of this function.
func (f *StoreGetDirtyRepositoriesFunc) History() []StoreGetDirtyRepositoriesFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetDirtyRepositoriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetDirtyRepositoriesFuncCall is an object that describes an
// invocation of method GetDirtyRepositories on an instance of MockStore.
type StoreGetDirtyRepositoriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.DirtyRepository
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetDirtyRepositoriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetDirtyRepositoriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetDumpsByIDsFunc describes the behavior when the GetDumpsByIDs
// method of the parent MockStore instance is invoked.
type StoreGetDumpsByIDsFunc struct {
	defaultHook func(context.Context, []int) ([]shared.Dump, error)
	hooks       []func(context.Context, []int) ([]shared.Dump, error)
	history     []StoreGetDumpsByIDsFuncCall
	mutex       sync.Mutex
}

// GetDumpsByIDs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetDumpsByIDs(v0 context.Context, v1 []int) ([]shared.Dump, error) {
	r0, r1 := m.GetDumpsByIDsFunc.nextHook()(v0, v1)
	m.GetDumpsByIDsFunc.appendCall(StoreGetDumpsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDumpsByIDs method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetDumpsByIDsFunc) SetDefaultHook(hook func(context.Context, []int) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDumpsByIDs method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetDumpsByIDsFunc) PushHook(hook func(context.Context, []int) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetDumpsByIDsFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, []int) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetDumpsByIDsFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, []int) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *StoreGetDumpsByIDsFunc) nextHook() func(context.Context, []int) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetDumpsByIDsFunc) appendCall(r0 StoreGetDumpsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetDumpsByIDsFuncCall objects
// describing the invocations of this function.
func (f *StoreGetDumpsByIDsFunc) History() []StoreGetDumpsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetDumpsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetDumpsByIDsFuncCall is an object that describes an invocation of
// method GetDumpsByIDs on an instance of MockStore.
type StoreGetDumpsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetDumpsByIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetDumpsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetDumpsWithDefinitionsForMonikersFunc describes the behavior when
// the GetDumpsWithDefinitionsForMonikers method of the parent MockStore
// instance is invoked.
type StoreGetDumpsWithDefinitionsForMonikersFunc struct {
	defaultHook func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error)
	hooks       []func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error)
	history     []StoreGetDumpsWithDefinitionsForMonikersFuncCall
	mutex       sync.Mutex
}

// GetDumpsWithDefinitionsForMonikers delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStore) GetDumpsWithDefinitionsForMonikers(v0 context.Context, v1 []precise.QualifiedMonikerData) ([]shared.Dump, error) {
	r0, r1 := m.GetDumpsWithDefinitionsForMonikersFunc.nextHook()(v0, v1)
	m.GetDumpsWithDefinitionsForMonikersFunc.appendCall(StoreGetDumpsWithDefinitionsForMonikersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetDumpsWithDefinitionsForMonikers method of the parent MockStore
// instance is invoked and the hook queue is empty.
func (f *StoreGetDumpsWithDefinitionsForMonikersFunc) SetDefaultHook(hook func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDumpsWithDefinitionsForMonikers method of the parent MockStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreGetDumpsWithDefinitionsForMonikersFunc) PushHook(hook func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetDumpsWithDefinitionsForMonikersFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetDumpsWithDefinitionsForMonikersFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *StoreGetDumpsWithDefinitionsForMonikersFunc) nextHook() func(context.Context, []precise.QualifiedMonikerData) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetDumpsWithDefinitionsForMonikersFunc) appendCall(r0 StoreGetDumpsWithDefinitionsForMonikersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreGetDumpsWithDefinitionsForMonikersFuncCall objects describing the
// invocations of this function.
func (f *StoreGetDumpsWithDefinitionsForMonikersFunc) History() []StoreGetDumpsWithDefinitionsForMonikersFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetDumpsWithDefinitionsForMonikersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetDumpsWithDefinitionsForMonikersFuncCall is an object that
// describes an invocation of method GetDumpsWithDefinitionsForMonikers on
// an instance of MockStore.
type StoreGetDumpsWithDefinitionsForMonikersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []precise.QualifiedMonikerData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetDumpsWithDefinitionsForMonikersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetDumpsWithDefinitionsForMonikersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetIndexByIDFunc describes the behavior when the GetIndexByID method
// of the parent MockStore instance is invoked.
type StoreGetIndexByIDFunc struct {
	defaultHook func(context.Context, int) (shared.Index, bool, error)
	hooks       []func(context.Context, int) (shared.Index, bool, error)
	history     []StoreGetIndexByIDFuncCall
	mutex       sync.Mutex
}

// GetIndexByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetIndexByID(v0 context.Context, v1 int) (shared.Index, bool, error) {
	r0, r1, r2 := m.GetIndexByIDFunc.nextHook()(v0, v1)
	m.GetIndexByIDFunc.appendCall(StoreGetIndexByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexByID method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (shared.Index, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexByID method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetIndexByIDFunc) PushHook(hook func(context.Context, int) (shared.Index, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetIndexByIDFunc) SetDefaultReturn(r0 shared.Index, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (shared.Index, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetIndexByIDFunc) PushReturn(r0 shared.Index, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (shared.Index, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetIndexByIDFunc) nextHook() func(context.Context, int) (shared.Index, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetIndexByIDFunc) appendCall(r0 StoreGetIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetIndexByIDFuncCall objects
// describing the invocations of this function.
func (f *StoreGetIndexByIDFunc) History() []StoreGetIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetIndexByIDFuncCall is an object that describes an invocation of
// method GetIndexByID on an instance of MockStore.
type StoreGetIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetIndexersFunc describes the behavior when the GetIndexers method
// of the parent MockStore instance is invoked.
type StoreGetIndexersFunc struct {
	defaultHook func(context.Context, shared.GetIndexersOptions) ([]string, error)
	hooks       []func(context.Context, shared.GetIndexersOptions) ([]string, error)
	history     []StoreGetIndexersFuncCall
	mutex       sync.Mutex
}

// GetIndexers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetIndexers(v0 context.Context, v1 shared.GetIndexersOptions) ([]string, error) {
	r0, r1 := m.GetIndexersFunc.nextHook()(v0, v1)
	m.GetIndexersFunc.appendCall(StoreGetIndexersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexers method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetIndexersFunc) SetDefaultHook(hook func(context.Context, shared.GetIndexersOptions) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexers method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetIndexersFunc) PushHook(hook func(context.Context, shared.GetIndexersOptions) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetIndexersFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, shared.GetIndexersOptions) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetIndexersFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, shared.GetIndexersOptions) ([]string, error) {
		return r0, r1
	})
}

func (f *StoreGetIndexersFunc) nextHook() func(context.Context, shared.GetIndexersOptions) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetIndexersFunc) appendCall(r0 StoreGetIndexersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetIndexersFuncCall objects describing
// the invocations of this function.
func (f *StoreGetIndexersFunc) History() []StoreGetIndexersFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetIndexersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetIndexersFuncCall is an object that describes an invocation of
// method GetIndexers on an instance of MockStore.
type StoreGetIndexersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetIndexersOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetIndexersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetIndexersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetIndexesFunc describes the behavior when the GetIndexes method of
// the parent MockStore instance is invoked.
type StoreGetIndexesFunc struct {
	defaultHook func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error)
	hooks       []func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error)
	history     []StoreGetIndexesFuncCall
	mutex       sync.Mutex
}

// GetIndexes delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetIndexes(v0 context.Context, v1 shared.GetIndexesOptions) ([]shared.Index, int, error) {
	r0, r1, r2 := m.GetIndexesFunc.nextHook()(v0, v1)
	m.GetIndexesFunc.appendCall(StoreGetIndexesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexes method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetIndexesFunc) SetDefaultHook(hook func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexes method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetIndexesFunc) PushHook(hook func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetIndexesFunc) SetDefaultReturn(r0 []shared.Index, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetIndexesFunc) PushReturn(r0 []shared.Index, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetIndexesFunc) nextHook() func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetIndexesFunc) appendCall(r0 StoreGetIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetIndexesFuncCall objects describing
// the invocations of this function.
func (f *StoreGetIndexesFunc) History() []StoreGetIndexesFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetIndexesFuncCall is an object that describes an invocation of
// method GetIndexes on an instance of MockStore.
type StoreGetIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetIndexesByIDsFunc describes the behavior when the GetIndexesByIDs
// method of the parent MockStore instance is invoked.
type StoreGetIndexesByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Index, error)
	hooks       []func(context.Context, ...int) ([]shared.Index, error)
	history     []StoreGetIndexesByIDsFuncCall
	mutex       sync.Mutex
}

// GetIndexesByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]shared.Index, error) {
	r0, r1 := m.GetIndexesByIDsFunc.nextHook()(v0, v1...)
	m.GetIndexesByIDsFunc.appendCall(StoreGetIndexesByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexesByIDs
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexesByIDs method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetIndexesByIDsFunc) SetDefaultReturn(r0 []shared.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetIndexesByIDsFunc) PushReturn(r0 []shared.Index, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Index, error) {
		return r0, r1
	})
}

func (f *StoreGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetIndexesByIDsFunc) appendCall(r0 StoreGetIndexesByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetIndexesByIDsFuncCall objects
// describing the invocations of this function.
func (f *StoreGetIndexesByIDsFunc) History() []StoreGetIndexesByIDsFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetIndexesByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetIndexesByIDsFuncCall is an object that describes an invocation of
// method GetIndexesByIDs on an instance of MockStore.
type StoreGetIndexesByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c StoreGetIndexesByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetIndexesByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetLastUploadRetentionScanForRepositoryFunc describes the behavior
// when the GetLastUploadRetentionScanForRepository method of the parent
// MockStore instance is invoked.
type StoreGetLastUploadRetentionScanForRepositoryFunc struct {
	defaultHook func(context.Context, int) (*time.Time, error)
	hooks       []func(context.Context, int) (*time.Time, error)
	history     []StoreGetLastUploadRetentionScanForRepositoryFuncCall
	mutex       sync.Mutex
}

// GetLastUploadRetentionScanForRepository delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockStore) GetLastUploadRetentionScanForRepository(v0 context.Context, v1 int) (*time.Time, error) {
	r0, r1 := m.GetLastUploadRetentionScanForRepositoryFunc.nextHook()(v0, v1)
	m.GetLastUploadRetentionScanForRepositoryFunc.appendCall(StoreGetLastUploadRetentionScanForRepositoryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLastUploadRetentionScanForRepository method of the parent MockStore
// instance is invoked and the hook queue is empty.
func (f *StoreGetLastUploadRetentionScanForRepositoryFunc) SetDefaultHook(hook func(context.Context, int) (*time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastUploadRetentionScanForRepository method of the parent MockStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreGetLastUploadRetentionScanForRepositoryFunc) PushHook(hook func(context.Context, int) (*time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetLastUploadRetentionScanForRepositoryFunc) SetDefaultReturn(r0 *time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetLastUploadRetentionScanForRepositoryFunc) PushReturn(r0 *time.Time, r1 error) {
	f.PushHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

func (f *StoreGetLastUploadRetentionScanForRepositoryFunc) nextHook() func(context.Context, int) (*time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetLastUploadRetentionScanForRepositoryFunc) appendCall(r0 StoreGetLastUploadRetentionScanForRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreGetLastUploadRetentionScanForRepositoryFuncCall objects describing
// the invocations of this function.
func (f *StoreGetLastUploadRetentionScanForRepositoryFunc) History() []StoreGetLastUploadRetentionScanForRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetLastUploadRetentionScanForRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetLastUploadRetentionScanForRepositoryFuncCall is an object that
// describes an invocation of method GetLastUploadRetentionScanForRepository
// on an instance of MockStore.
type StoreGetLastUploadRetentionScanForRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetLastUploadRetentionScanForRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetLastUploadRetentionScanForRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetOldestCommitDateFunc describes the behavior when the
// GetOldestCommitDate method of the parent MockStore instance is invoked.
type StoreGetOldestCommitDateFunc struct {
	defaultHook func(context.Context, int) (time.Time, bool, error)
	hooks       []func(context.Context, int) (time.Time, bool, error)
	history     []StoreGetOldestCommitDateFuncCall
	mutex       sync.Mutex
}

// GetOldestCommitDate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) GetOldestCommitDate(v0 context.Context, v1 int) (time.Time, bool, error) {
	r0, r1, r2 := m.GetOldestCommitDateFunc.nextHook()(v0, v1)
	m.GetOldestCommitDateFunc.appendCall(StoreGetOldestCommitDateFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetOldestCommitDate
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreGetOldestCommitDateFunc) SetDefaultHook(hook func(context.Context, int) (time.Time, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOldestCommitDate method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreGetOldestCommitDateFunc) PushHook(hook func(context.Context, int) (time.Time, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetOldestCommitDateFunc) SetDefaultReturn(r0 time.Time, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (time.Time, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetOldestCommitDateFunc) PushReturn(r0 time.Time, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (time.Time, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetOldestCommitDateFunc) nextHook() func(context.Context, int) (time.Time, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetOldestCommitDateFunc) appendCall(r0 StoreGetOldestCommitDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetOldestCommitDateFuncCall objects
// describing the invocations of this function.
func (f *StoreGetOldestCommitDateFunc) History() []StoreGetOldestCommitDateFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetOldestCommitDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetOldestCommitDateFuncCall is an object that describes an
// invocation of method GetOldestCommitDate on an instance of MockStore.
type StoreGetOldestCommitDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetOldestCommitDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetOldestCommitDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetRecentIndexesSummaryFunc describes the behavior when the
// GetRecentIndexesSummary method of the parent MockStore instance is
// invoked.
type StoreGetRecentIndexesSummaryFunc struct {
	defaultHook func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)
	hooks       []func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)
	history     []StoreGetRecentIndexesSummaryFuncCall
	mutex       sync.Mutex
}

// GetRecentIndexesSummary delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) GetRecentIndexesSummary(v0 context.Context, v1 int) ([]shared.IndexesWithRepositoryNamespace, error) {
	r0, r1 := m.GetRecentIndexesSummaryFunc.nextHook()(v0, v1)
	m.GetRecentIndexesSummaryFunc.appendCall(StoreGetRecentIndexesSummaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRecentIndexesSummary method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetRecentIndexesSummaryFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRecentIndexesSummary method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreGetRecentIndexesSummaryFunc) PushHook(hook func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetRecentIndexesSummaryFunc) SetDefaultReturn(r0 []shared.IndexesWithRepositoryNamespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetRecentIndexesSummaryFunc) PushReturn(r0 []shared.IndexesWithRepositoryNamespace, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
		return r0, r1
	})
}

func (f *StoreGetRecentIndexesSummaryFunc) nextHook() func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetRecentIndexesSummaryFunc) appendCall(r0 StoreGetRecentIndexesSummaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetRecentIndexesSummaryFuncCall
// objects describing the invocations of this function.
func (f *StoreGetRecentIndexesSummaryFunc) History() []StoreGetRecentIndexesSummaryFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetRecentIndexesSummaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetRecentIndexesSummaryFuncCall is an object that describes an
// invocation of method GetRecentIndexesSummary on an instance of MockStore.
type StoreGetRecentIndexesSummaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.IndexesWithRepositoryNamespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetRecentIndexesSummaryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetRecentIndexesSummaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetRecentUploadsSummaryFunc describes the behavior when the
// GetRecentUploadsSummary method of the parent MockStore instance is
// invoked.
type StoreGetRecentUploadsSummaryFunc struct {
	defaultHook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)
	hooks       []func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)
	history     []StoreGetRecentUploadsSummaryFuncCall
	mutex       sync.Mutex
}

// GetRecentUploadsSummary delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) GetRecentUploadsSummary(v0 context.Context, v1 int) ([]shared.UploadsWithRepositoryNamespace, error) {
	r0, r1 := m.GetRecentUploadsSummaryFunc.nextHook()(v0, v1)
	m.GetRecentUploadsSummaryFunc.appendCall(StoreGetRecentUploadsSummaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRecentUploadsSummary method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetRecentUploadsSummaryFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRecentUploadsSummary method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreGetRecentUploadsSummaryFunc) PushHook(hook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetRecentUploadsSummaryFunc) SetDefaultReturn(r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetRecentUploadsSummaryFunc) PushReturn(r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
		return r0, r1
	})
}

func (f *StoreGetRecentUploadsSummaryFunc) nextHook() func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetRecentUploadsSummaryFunc) appendCall(r0 StoreGetRecentUploadsSummaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetRecentUploadsSummaryFuncCall
// objects describing the invocations of this function.
func (f *StoreGetRecentUploadsSummaryFunc) History() []StoreGetRecentUploadsSummaryFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetRecentUploadsSummaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetRecentUploadsSummaryFuncCall is an object that describes an
// invocation of method GetRecentUploadsSummary on an instance of MockStore.
type StoreGetRecentUploadsSummaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadsWithRepositoryNamespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetRecentUploadsSummaryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetRecentUploadsSummaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetRepositoriesMaxStaleAgeFunc describes the behavior when the
// GetRepositoriesMaxStaleAge method of the parent MockStore instance is
// invoked.
type StoreGetRepositoriesMaxStaleAgeFunc struct {
	defaultHook func(context.Context) (time.Duration, error)
	hooks       []func(context.Context) (time.Duration, error)
	history     []StoreGetRepositoriesMaxStaleAgeFuncCall
	mutex       sync.Mutex
}

// GetRepositoriesMaxStaleAge delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) GetRepositoriesMaxStaleAge(v0 context.Context) (time.Duration, error) {
	r0, r1 := m.GetRepositoriesMaxStaleAgeFunc.nextHook()(v0)
	m.GetRepositoriesMaxStaleAgeFunc.appendCall(StoreGetRepositoriesMaxStaleAgeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRepositoriesMaxStaleAge method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetRepositoriesMaxStaleAgeFunc) SetDefaultHook(hook func(context.Context) (time.Duration, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRepositoriesMaxStaleAge method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreGetRepositoriesMaxStaleAgeFunc) PushHook(hook func(context.Context) (time.Duration, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetRepositoriesMaxStaleAgeFunc) SetDefaultReturn(r0 time.Duration, r1 error) {
	f.SetDefaultHook(func(context.Context) (time.Duration, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetRepositoriesMaxStaleAgeFunc) PushReturn(r0 time.Duration, r1 error) {
	f.PushHook(func(context.Context) (time.Duration, error) {
		return r0, r1
	})
}

func (f *StoreGetRepositoriesMaxStaleAgeFunc) nextHook() func(context.Context) (time.Duration, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetRepositoriesMaxStaleAgeFunc) appendCall(r0 StoreGetRepositoriesMaxStaleAgeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetRepositoriesMaxStaleAgeFuncCall
// objects describing the invocations of this function.
func (f *StoreGetRepositoriesMaxStaleAgeFunc) History() []StoreGetRepositoriesMaxStaleAgeFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetRepositoriesMaxStaleAgeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetRepositoriesMaxStaleAgeFuncCall is an object that describes an
// invocation of method GetRepositoriesMaxStaleAge on an instance of
// MockStore.
type StoreGetRepositoriesMaxStaleAgeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetRepositoriesMaxStaleAgeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetRepositoriesMaxStaleAgeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetUploadByIDFunc describes the behavior when the GetUploadByID
// method of the parent MockStore instance is invoked.
type StoreGetUploadByIDFunc struct {
	defaultHook func(context.Context, int) (shared.Upload, bool, error)
	hooks       []func(context.Context, int) (shared.Upload, bool, error)
	history     []StoreGetUploadByIDFuncCall
	mutex       sync.Mutex
}

// GetUploadByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetUploadByID(v0 context.Context, v1 int) (shared.Upload, bool, error) {
	r0, r1, r2 := m.GetUploadByIDFunc.nextHook()(v0, v1)
	m.GetUploadByIDFunc.appendCall(StoreGetUploadByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploadByID method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (shared.Upload, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadByID method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetUploadByIDFunc) PushHook(hook func(context.Context, int) (shared.Upload, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetUploadByIDFunc) SetDefaultReturn(r0 shared.Upload, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (shared.Upload, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetUploadByIDFunc) PushReturn(r0 shared.Upload, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (shared.Upload, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetUploadByIDFunc) nextHook() func(context.Context, int) (shared.Upload, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetUploadByIDFunc) appendCall(r0 StoreGetUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *StoreGetUploadByIDFunc) History() []StoreGetUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetUploadByIDFuncCall is an object that describes an invocation of
// method GetUploadByID on an instance of MockStore.
type StoreGetUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetUploadIDsWithReferencesFunc describes the behavior when the
// GetUploadIDsWithReferences method of the parent MockStore instance is
// invoked.
type StoreGetUploadIDsWithReferencesFunc struct {
	defaultHook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int, observation.TraceLogger) ([]int, int, int, error)
	hooks       []func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int, observation.TraceLogger) ([]int, int, int, error)
	history     []StoreGetUploadIDsWithReferencesFuncCall
	mutex       sync.Mutex
}

// GetUploadIDsWithReferences delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) GetUploadIDsWithReferences(v0 context.Context, v1 []precise.QualifiedMonikerData, v2 []int, v3 int, v4 string, v5 int, v6 int, v7 observation.TraceLogger) ([]int, int, int, error) {
	r0, r1, r2, r3 := m.GetUploadIDsWithReferencesFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6, v7)
	m.GetUploadIDsWithReferencesFunc.appendCall(StoreGetUploadIDsWithReferencesFuncCall{v0, v1, v2, v3, v4, v5, v6, v7, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// GetUploadIDsWithReferences method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetUploadIDsWithReferencesFunc) SetDefaultHook(hook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int, observation.TraceLogger) ([]int, int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadIDsWithReferences method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreGetUploadIDsWithReferencesFunc) PushHook(hook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int, observation.TraceLogger) ([]int, int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetUploadIDsWithReferencesFunc) SetDefaultReturn(r0 []int, r1 int, r2 int, r3 error) {
	f.SetDefaultHook(func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int, observation.TraceLogger) ([]int, int, int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetUploadIDsWithReferencesFunc) PushReturn(r0 []int, r1 int, r2 int, r3 error) {
	f.PushHook(func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int, observation.TraceLogger) ([]int, int, int, error) {
		return r0, r1, r2, r3
	})
}

func (f *StoreGetUploadIDsWithReferencesFunc) nextHook() func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int, observation.TraceLogger) ([]int, int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetUploadIDsWithReferencesFunc) appendCall(r0 StoreGetUploadIDsWithReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetUploadIDsWithReferencesFuncCall
// objects describing the invocations of this function.
func (f *StoreGetUploadIDsWithReferencesFunc) History() []StoreGetUploadIDsWithReferencesFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetUploadIDsWithReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetUploadIDsWithReferencesFuncCall is an object that describes an
// invocation of method GetUploadIDsWithReferences on an instance of
// MockStore.
type StoreGetUploadIDsWithReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []precise.QualifiedMonikerData
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Arg7 is the value of the 8th argument passed to this method
	// invocation.
	Arg7 observation.TraceLogger
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetUploadIDsWithReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6, c.Arg7}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetUploadIDsWithReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// StoreGetUploadsFunc describes the behavior when the GetUploads method of
// the parent MockStore instance is invoked.
type StoreGetUploadsFunc struct {
	defaultHook func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)
	hooks       []func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)
	history     []StoreGetUploadsFuncCall
	mutex       sync.Mutex
}

// GetUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetUploads(v0 context.Context, v1 shared.GetUploadsOptions) ([]shared.Upload, int, error) {
	r0, r1, r2 := m.GetUploadsFunc.nextHook()(v0, v1)
	m.GetUploadsFunc.appendCall(StoreGetUploadsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploads method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetUploadsFunc) SetDefaultHook(hook func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploads method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetUploadsFunc) PushHook(hook func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetUploadsFunc) SetDefaultReturn(r0 []shared.Upload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetUploadsFunc) PushReturn(r0 []shared.Upload, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetUploadsFunc) nextHook() func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetUploadsFunc) appendCall(r0 StoreGetUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetUploadsFuncCall objects describing
// the invocations of this function.
func (f *StoreGetUploadsFunc) History() []StoreGetUploadsFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetUploadsFuncCall is an object that describes an invocation of
// method GetUploads on an instance of MockStore.
type StoreGetUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetUploadsByIDsFunc describes the behavior when the GetUploadsByIDs
// method of the parent MockStore instance is invoked.
type StoreGetUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Upload, error)
	hooks       []func(context.Context, ...int) ([]shared.Upload, error)
	history     []StoreGetUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]shared.Upload, error) {
	r0, r1 := m.GetUploadsByIDsFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsFunc.appendCall(StoreGetUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsByIDs
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDs method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetUploadsByIDsFunc) SetDefaultReturn(r0 []shared.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetUploadsByIDsFunc) PushReturn(r0 []shared.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

func (f *StoreGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetUploadsByIDsFunc) appendCall(r0 StoreGetUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetUploadsByIDsFuncCall objects
// describing the invocations of this function.
func (f *StoreGetUploadsByIDsFunc) History() []StoreGetUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetUploadsByIDsFuncCall is an object that describes an invocation of
// method GetUploadsByIDs on an instance of MockStore.
type StoreGetUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c StoreGetUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetUploadsByIDsAllowDeletedFunc describes the behavior when the
// GetUploadsByIDsAllowDeleted method of the parent MockStore instance is
// invoked.
type StoreGetUploadsByIDsAllowDeletedFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Upload, error)
	hooks       []func(context.Context, ...int) ([]shared.Upload, error)
	history     []StoreGetUploadsByIDsAllowDeletedFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDsAllowDeleted delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) GetUploadsByIDsAllowDeleted(v0 context.Context, v1 ...int) ([]shared.Upload, error) {
	r0, r1 := m.GetUploadsByIDsAllowDeletedFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsAllowDeletedFunc.appendCall(StoreGetUploadsByIDsAllowDeletedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetUploadsByIDsAllowDeleted method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetUploadsByIDsAllowDeletedFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDsAllowDeleted method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreGetUploadsByIDsAllowDeletedFunc) PushHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetUploadsByIDsAllowDeletedFunc) SetDefaultReturn(r0 []shared.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetUploadsByIDsAllowDeletedFunc) PushReturn(r0 []shared.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

func (f *StoreGetUploadsByIDsAllowDeletedFunc) nextHook() func(context.Context, ...int) ([]shared.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetUploadsByIDsAllowDeletedFunc) appendCall(r0 StoreGetUploadsByIDsAllowDeletedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetUploadsByIDsAllowDeletedFuncCall
// objects describing the invocations of this function.
func (f *StoreGetUploadsByIDsAllowDeletedFunc) History() []StoreGetUploadsByIDsAllowDeletedFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetUploadsByIDsAllowDeletedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetUploadsByIDsAllowDeletedFuncCall is an object that describes an
// invocation of method GetUploadsByIDsAllowDeleted on an instance of
// MockStore.
type StoreGetUploadsByIDsAllowDeletedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c StoreGetUploadsByIDsAllowDeletedFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetUploadsByIDsAllowDeletedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreGetVisibleUploadsMatchingMonikersFunc describes the behavior when
// the GetVisibleUploadsMatchingMonikers method of the parent MockStore
// instance is invoked.
type StoreGetVisibleUploadsMatchingMonikersFunc struct {
	defaultHook func(context.Context, int, string, []precise.QualifiedMonikerData, int, int) (shared.PackageReferenceScanner, int, error)
	hooks       []func(context.Context, int, string, []precise.QualifiedMonikerData, int, int) (shared.PackageReferenceScanner, int, error)
	history     []StoreGetVisibleUploadsMatchingMonikersFuncCall
	mutex       sync.Mutex
}

// GetVisibleUploadsMatchingMonikers delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStore) GetVisibleUploadsMatchingMonikers(v0 context.Context, v1 int, v2 string, v3 []precise.QualifiedMonikerData, v4 int, v5 int) (shared.PackageReferenceScanner, int, error) {
	r0, r1, r2 := m.GetVisibleUploadsMatchingMonikersFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.GetVisibleUploadsMatchingMonikersFunc.appendCall(StoreGetVisibleUploadsMatchingMonikersFuncCall{v0, v1, v2, v3, v4, v5, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetVisibleUploadsMatchingMonikers method of the parent MockStore instance
// is invoked and the hook queue is empty.
func (f *StoreGetVisibleUploadsMatchingMonikersFunc) SetDefaultHook(hook func(context.Context, int, string, []precise.QualifiedMonikerData, int, int) (shared.PackageReferenceScanner, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetVisibleUploadsMatchingMonikers method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreGetVisibleUploadsMatchingMonikersFunc) PushHook(hook func(context.Context, int, string, []precise.QualifiedMonikerData, int, int) (shared.PackageReferenceScanner, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetVisibleUploadsMatchingMonikersFunc) SetDefaultReturn(r0 shared.PackageReferenceScanner, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, []precise.QualifiedMonikerData, int, int) (shared.PackageReferenceScanner, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetVisibleUploadsMatchingMonikersFunc) PushReturn(r0 shared.PackageReferenceScanner, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, []precise.QualifiedMonikerData, int, int) (shared.PackageReferenceScanner, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetVisibleUploadsMatchingMonikersFunc) nextHook() func(context.Context, int, string, []precise.QualifiedMonikerData, int, int) (shared.PackageReferenceScanner, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetVisibleUploadsMatchingMonikersFunc) appendCall(r0 StoreGetVisibleUploadsMatchingMonikersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreGetVisibleUploadsMatchingMonikersFuncCall objects describing the
// invocations of this function.
func (f *StoreGetVisibleUploadsMatchingMonikersFunc) History() []StoreGetVisibleUploadsMatchingMonikersFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetVisibleUploadsMatchingMonikersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetVisibleUploadsMatchingMonikersFuncCall is an object that
// describes an invocation of method GetVisibleUploadsMatchingMonikers on an
// instance of MockStore.
type StoreGetVisibleUploadsMatchingMonikersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []precise.QualifiedMonikerData
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.PackageReferenceScanner
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetVisibleUploadsMatchingMonikersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetVisibleUploadsMatchingMonikersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreHandleFunc describes the behavior when the Handle method of the
// parent MockStore instance is invoked.
type StoreHandleFunc struct {
	defaultHook func() *basestore.Store
	hooks       []func() *basestore.Store
	history     []StoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Handle() *basestore.Store {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(StoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreHandleFunc) SetDefaultHook(hook func() *basestore.Store) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreHandleFunc) PushHook(hook func() *basestore.Store) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreHandleFunc) SetDefaultReturn(r0 *basestore.Store) {
	f.SetDefaultHook(func() *basestore.Store {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreHandleFunc) PushReturn(r0 *basestore.Store) {
	f.PushHook(func() *basestore.Store {
		return r0
	})
}

func (f *StoreHandleFunc) nextHook() func() *basestore.Store {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreHandleFunc) appendCall(r0 StoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreHandleFuncCall objects describing the
// invocations of this function.
func (f *StoreHandleFunc) History() []StoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]StoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreHandleFuncCall is an object that describes an invocation of method
// Handle on an instance of MockStore.
type StoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.Store
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreHardDeleteUploadsByIDsFunc describes the behavior when the
// HardDeleteUploadsByIDs method of the parent MockStore instance is
// invoked.
type StoreHardDeleteUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) error
	hooks       []func(context.Context, ...int) error
	history     []StoreHardDeleteUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// HardDeleteUploadsByIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) HardDeleteUploadsByIDs(v0 context.Context, v1 ...int) error {
	r0 := m.HardDeleteUploadsByIDsFunc.nextHook()(v0, v1...)
	m.HardDeleteUploadsByIDsFunc.appendCall(StoreHardDeleteUploadsByIDsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// HardDeleteUploadsByIDs method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreHardDeleteUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDeleteUploadsByIDs method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreHardDeleteUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreHardDeleteUploadsByIDsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreHardDeleteUploadsByIDsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...int) error {
		return r0
	})
}

func (f *StoreHardDeleteUploadsByIDsFunc) nextHook() func(context.Context, ...int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreHardDeleteUploadsByIDsFunc) appendCall(r0 StoreHardDeleteUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreHardDeleteUploadsByIDsFuncCall objects
// describing the invocations of this function.
func (f *StoreHardDeleteUploadsByIDsFunc) History() []StoreHardDeleteUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]StoreHardDeleteUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreHardDeleteUploadsByIDsFuncCall is an object that describes an
// invocation of method HardDeleteUploadsByIDs on an instance of MockStore.
type StoreHardDeleteUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c StoreHardDeleteUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreHardDeleteUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreHasCommitFunc describes the behavior when the HasCommit method of
// the parent MockStore instance is invoked.
type StoreHasCommitFunc struct {
	defaultHook func(context.Context, int, string) (bool, error)
	hooks       []func(context.Context, int, string) (bool, error)
	history     []StoreHasCommitFuncCall
	mutex       sync.Mutex
}

// HasCommit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) HasCommit(v0 context.Context, v1 int, v2 string) (bool, error) {
	r0, r1 := m.HasCommitFunc.nextHook()(v0, v1, v2)
	m.HasCommitFunc.appendCall(StoreHasCommitFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasCommit method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreHasCommitFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasCommit method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreHasCommitFunc) PushHook(hook func(context.Context, int, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreHasCommitFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreHasCommitFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string) (bool, error) {
		return r0, r1
	})
}

func (f *StoreHasCommitFunc) nextHook() func(context.Context, int, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreHasCommitFunc) appendCall(r0 StoreHasCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreHasCommitFuncCall objects describing
// the invocations of this function.
func (f *StoreHasCommitFunc) History() []StoreHasCommitFuncCall {
	f.mutex.Lock()
	history := make([]StoreHasCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreHasCommitFuncCall is an object that describes an invocation of
// method HasCommit on an instance of MockStore.
type StoreHasCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreHasCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreHasCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreHasRepositoryFunc describes the behavior when the HasRepository
// method of the parent MockStore instance is invoked.
type StoreHasRepositoryFunc struct {
	defaultHook func(context.Context, int) (bool, error)
	hooks       []func(context.Context, int) (bool, error)
	history     []StoreHasRepositoryFuncCall
	mutex       sync.Mutex
}

// HasRepository delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) HasRepository(v0 context.Context, v1 int) (bool, error) {
	r0, r1 := m.HasRepositoryFunc.nextHook()(v0, v1)
	m.HasRepositoryFunc.appendCall(StoreHasRepositoryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasRepository method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreHasRepositoryFunc) SetDefaultHook(hook func(context.Context, int) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasRepository method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreHasRepositoryFunc) PushHook(hook func(context.Context, int) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreHasRepositoryFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreHasRepositoryFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

func (f *StoreHasRepositoryFunc) nextHook() func(context.Context, int) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreHasRepositoryFunc) appendCall(r0 StoreHasRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreHasRepositoryFuncCall objects
// describing the invocations of this function.
func (f *StoreHasRepositoryFunc) History() []StoreHasRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]StoreHasRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreHasRepositoryFuncCall is an object that describes an invocation of
// method HasRepository on an instance of MockStore.
type StoreHasRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreHasRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreHasRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreInsertDependencySyncingJobFunc describes the behavior when the
// InsertDependencySyncingJob method of the parent MockStore instance is
// invoked.
type StoreInsertDependencySyncingJobFunc struct {
	defaultHook func(context.Context, int) (int, error)
	hooks       []func(context.Context, int) (int, error)
	history     []StoreInsertDependencySyncingJobFuncCall
	mutex       sync.Mutex
}

// InsertDependencySyncingJob delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) InsertDependencySyncingJob(v0 context.Context, v1 int) (int, error) {
	r0, r1 := m.InsertDependencySyncingJobFunc.nextHook()(v0, v1)
	m.InsertDependencySyncingJobFunc.appendCall(StoreInsertDependencySyncingJobFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// InsertDependencySyncingJob method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreInsertDependencySyncingJobFunc) SetDefaultHook(hook func(context.Context, int) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertDependencySyncingJob method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreInsertDependencySyncingJobFunc) PushHook(hook func(context.Context, int) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreInsertDependencySyncingJobFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreInsertDependencySyncingJobFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int) (int, error) {
		return r0, r1
	})
}

func (f *StoreInsertDependencySyncingJobFunc) nextHook() func(context.Context, int) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreInsertDependencySyncingJobFunc) appendCall(r0 StoreInsertDependencySyncingJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreInsertDependencySyncingJobFuncCall
// objects describing the invocations of this function.
func (f *StoreInsertDependencySyncingJobFunc) History() []StoreInsertDependencySyncingJobFuncCall {
	f.mutex.Lock()
	history := make([]StoreInsertDependencySyncingJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreInsertDependencySyncingJobFuncCall is an object that describes an
// invocation of method InsertDependencySyncingJob on an instance of
// MockStore.
type StoreInsertDependencySyncingJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreInsertDependencySyncingJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreInsertDependencySyncingJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreInsertUploadFunc describes the behavior when the InsertUpload method
// of the parent MockStore instance is invoked.
type StoreInsertUploadFunc struct {
	defaultHook func(context.Context, shared.Upload) (int, error)
	hooks       []func(context.Context, shared.Upload) (int, error)
	history     []StoreInsertUploadFuncCall
	mutex       sync.Mutex
}

// InsertUpload delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) InsertUpload(v0 context.Context, v1 shared.Upload) (int, error) {
	r0, r1 := m.InsertUploadFunc.nextHook()(v0, v1)
	m.InsertUploadFunc.appendCall(StoreInsertUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the InsertUpload method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreInsertUploadFunc) SetDefaultHook(hook func(context.Context, shared.Upload) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertUpload method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreInsertUploadFunc) PushHook(hook func(context.Context, shared.Upload) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreInsertUploadFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, shared.Upload) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreInsertUploadFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, shared.Upload) (int, error) {
		return r0, r1
	})
}

func (f *StoreInsertUploadFunc) nextHook() func(context.Context, shared.Upload) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreInsertUploadFunc) appendCall(r0 StoreInsertUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreInsertUploadFuncCall objects
// describing the invocations of this function.
func (f *StoreInsertUploadFunc) History() []StoreInsertUploadFuncCall {
	f.mutex.Lock()
	history := make([]StoreInsertUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreInsertUploadFuncCall is an object that describes an invocation of
// method InsertUpload on an instance of MockStore.
type StoreInsertUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.Upload
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreInsertUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreInsertUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreMarkFailedFunc describes the behavior when the MarkFailed method of
// the parent MockStore instance is invoked.
type StoreMarkFailedFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []StoreMarkFailedFuncCall
	mutex       sync.Mutex
}

// MarkFailed delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) MarkFailed(v0 context.Context, v1 int, v2 string) error {
	r0 := m.MarkFailedFunc.nextHook()(v0, v1, v2)
	m.MarkFailedFunc.appendCall(StoreMarkFailedFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkFailed method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreMarkFailedFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkFailed method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreMarkFailedFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMarkFailedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMarkFailedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *StoreMarkFailedFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMarkFailedFunc) appendCall(r0 StoreMarkFailedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMarkFailedFuncCall objects describing
// the invocations of this function.
func (f *StoreMarkFailedFunc) History() []StoreMarkFailedFuncCall {
	f.mutex.Lock()
	history := make([]StoreMarkFailedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMarkFailedFuncCall is an object that describes an invocation of
// method MarkFailed on an instance of MockStore.
type StoreMarkFailedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMarkFailedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMarkFailedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreMarkQueuedFunc describes the behavior when the MarkQueued method of
// the parent MockStore instance is invoked.
type StoreMarkQueuedFunc struct {
	defaultHook func(context.Context, int, *int64) error
	hooks       []func(context.Context, int, *int64) error
	history     []StoreMarkQueuedFuncCall
	mutex       sync.Mutex
}

// MarkQueued delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) MarkQueued(v0 context.Context, v1 int, v2 *int64) error {
	r0 := m.MarkQueuedFunc.nextHook()(v0, v1, v2)
	m.MarkQueuedFunc.appendCall(StoreMarkQueuedFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkQueued method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreMarkQueuedFunc) SetDefaultHook(hook func(context.Context, int, *int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkQueued method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreMarkQueuedFunc) PushHook(hook func(context.Context, int, *int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMarkQueuedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, *int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMarkQueuedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, *int64) error {
		return r0
	})
}

func (f *StoreMarkQueuedFunc) nextHook() func(context.Context, int, *int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMarkQueuedFunc) appendCall(r0 StoreMarkQueuedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMarkQueuedFuncCall objects describing
// the invocations of this function.
func (f *StoreMarkQueuedFunc) History() []StoreMarkQueuedFuncCall {
	f.mutex.Lock()
	history := make([]StoreMarkQueuedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMarkQueuedFuncCall is an object that describes an invocation of
// method MarkQueued on an instance of MockStore.
type StoreMarkQueuedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMarkQueuedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMarkQueuedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreNumRepositoriesWithCodeIntelligenceFunc describes the behavior when
// the NumRepositoriesWithCodeIntelligence method of the parent MockStore
// instance is invoked.
type StoreNumRepositoriesWithCodeIntelligenceFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []StoreNumRepositoriesWithCodeIntelligenceFuncCall
	mutex       sync.Mutex
}

// NumRepositoriesWithCodeIntelligence delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockStore) NumRepositoriesWithCodeIntelligence(v0 context.Context) (int, error) {
	r0, r1 := m.NumRepositoriesWithCodeIntelligenceFunc.nextHook()(v0)
	m.NumRepositoriesWithCodeIntelligenceFunc.appendCall(StoreNumRepositoriesWithCodeIntelligenceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// NumRepositoriesWithCodeIntelligence method of the parent MockStore
// instance is invoked and the hook queue is empty.
func (f *StoreNumRepositoriesWithCodeIntelligenceFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NumRepositoriesWithCodeIntelligence method of the parent MockStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreNumRepositoriesWithCodeIntelligenceFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreNumRepositoriesWithCodeIntelligenceFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreNumRepositoriesWithCodeIntelligenceFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *StoreNumRepositoriesWithCodeIntelligenceFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreNumRepositoriesWithCodeIntelligenceFunc) appendCall(r0 StoreNumRepositoriesWithCodeIntelligenceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreNumRepositoriesWithCodeIntelligenceFuncCall objects describing the
// invocations of this function.
func (f *StoreNumRepositoriesWithCodeIntelligenceFunc) History() []StoreNumRepositoriesWithCodeIntelligenceFuncCall {
	f.mutex.Lock()
	history := make([]StoreNumRepositoriesWithCodeIntelligenceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreNumRepositoriesWithCodeIntelligenceFuncCall is an object that
// describes an invocation of method NumRepositoriesWithCodeIntelligence on
// an instance of MockStore.
type StoreNumRepositoriesWithCodeIntelligenceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreNumRepositoriesWithCodeIntelligenceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreNumRepositoriesWithCodeIntelligenceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreProcessSourcedCommitsFunc describes the behavior when the
// ProcessSourcedCommits method of the parent MockStore instance is invoked.
type StoreProcessSourcedCommitsFunc struct {
	defaultHook func(context.Context, time.Duration, time.Duration, int, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), time.Time) (int, int, error)
	hooks       []func(context.Context, time.Duration, time.Duration, int, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), time.Time) (int, int, error)
	history     []StoreProcessSourcedCommitsFuncCall
	mutex       sync.Mutex
}

// ProcessSourcedCommits delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) ProcessSourcedCommits(v0 context.Context, v1 time.Duration, v2 time.Duration, v3 int, v4 func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), v5 time.Time) (int, int, error) {
	r0, r1, r2 := m.ProcessSourcedCommitsFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.ProcessSourcedCommitsFunc.appendCall(StoreProcessSourcedCommitsFuncCall{v0, v1, v2, v3, v4, v5, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// ProcessSourcedCommits method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreProcessSourcedCommitsFunc) SetDefaultHook(hook func(context.Context, time.Duration, time.Duration, int, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), time.Time) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ProcessSourcedCommits method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreProcessSourcedCommitsFunc) PushHook(hook func(context.Context, time.Duration, time.Duration, int, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), time.Time) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreProcessSourcedCommitsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, time.Duration, time.Duration, int, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreProcessSourcedCommitsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, time.Duration, time.Duration, int, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreProcessSourcedCommitsFunc) nextHook() func(context.Context, time.Duration, time.Duration, int, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error), time.Time) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreProcessSourcedCommitsFunc) appendCall(r0 StoreProcessSourcedCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreProcessSourcedCommitsFuncCall objects
// describing the invocations of this function.
func (f *StoreProcessSourcedCommitsFunc) History() []StoreProcessSourcedCommitsFuncCall {
	f.mutex.Lock()
	history := make([]StoreProcessSourcedCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreProcessSourcedCommitsFuncCall is an object that describes an
// invocation of method ProcessSourcedCommits on an instance of MockStore.
type StoreProcessSourcedCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreProcessSourcedCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreProcessSourcedCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreProcessStaleSourcedCommitsFunc describes the behavior when the
// ProcessStaleSourcedCommits method of the parent MockStore instance is
// invoked.
type StoreProcessStaleSourcedCommitsFunc struct {
	defaultHook func(context.Context, time.Duration, int, time.Duration, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (int, int, error)
	hooks       []func(context.Context, time.Duration, int, time.Duration, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (int, int, error)
	history     []StoreProcessStaleSourcedCommitsFuncCall
	mutex       sync.Mutex
}

// ProcessStaleSourcedCommits delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) ProcessStaleSourcedCommits(v0 context.Context, v1 time.Duration, v2 int, v3 time.Duration, v4 func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (int, int, error) {
	r0, r1, r2 := m.ProcessStaleSourcedCommitsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ProcessStaleSourcedCommitsFunc.appendCall(StoreProcessStaleSourcedCommitsFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// ProcessStaleSourcedCommits method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreProcessStaleSourcedCommitsFunc) SetDefaultHook(hook func(context.Context, time.Duration, int, time.Duration, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ProcessStaleSourcedCommits method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreProcessStaleSourcedCommitsFunc) PushHook(hook func(context.Context, time.Duration, int, time.Duration, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreProcessStaleSourcedCommitsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, time.Duration, int, time.Duration, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreProcessStaleSourcedCommitsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, time.Duration, int, time.Duration, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreProcessStaleSourcedCommitsFunc) nextHook() func(context.Context, time.Duration, int, time.Duration, func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreProcessStaleSourcedCommitsFunc) appendCall(r0 StoreProcessStaleSourcedCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreProcessStaleSourcedCommitsFuncCall
// objects describing the invocations of this function.
func (f *StoreProcessStaleSourcedCommitsFunc) History() []StoreProcessStaleSourcedCommitsFuncCall {
	f.mutex.Lock()
	history := make([]StoreProcessStaleSourcedCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreProcessStaleSourcedCommitsFuncCall is an object that describes an
// invocation of method ProcessStaleSourcedCommits on an instance of
// MockStore.
type StoreProcessStaleSourcedCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Duration
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 func(ctx context.Context, repositoryID int, repositoryName string, commit string) (bool, error)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreProcessStaleSourcedCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreProcessStaleSourcedCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreReconcileCandidatesFunc describes the behavior when the
// ReconcileCandidates method of the parent MockStore instance is invoked.
type StoreReconcileCandidatesFunc struct {
	defaultHook func(context.Context, int) ([]int, error)
	hooks       []func(context.Context, int) ([]int, error)
	history     []StoreReconcileCandidatesFuncCall
	mutex       sync.Mutex
}

// ReconcileCandidates delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ReconcileCandidates(v0 context.Context, v1 int) ([]int, error) {
	r0, r1 := m.ReconcileCandidatesFunc.nextHook()(v0, v1)
	m.ReconcileCandidatesFunc.appendCall(StoreReconcileCandidatesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReconcileCandidates
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreReconcileCandidatesFunc) SetDefaultHook(hook func(context.Context, int) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReconcileCandidates method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreReconcileCandidatesFunc) PushHook(hook func(context.Context, int) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreReconcileCandidatesFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreReconcileCandidatesFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, int) ([]int, error) {
		return r0, r1
	})
}

func (f *StoreReconcileCandidatesFunc) nextHook() func(context.Context, int) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReconcileCandidatesFunc) appendCall(r0 StoreReconcileCandidatesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReconcileCandidatesFuncCall objects
// describing the invocations of this function.
func (f *StoreReconcileCandidatesFunc) History() []StoreReconcileCandidatesFuncCall {
	f.mutex.Lock()
	history := make([]StoreReconcileCandidatesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReconcileCandidatesFuncCall is an object that describes an
// invocation of method ReconcileCandidates on an instance of MockStore.
type StoreReconcileCandidatesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReconcileCandidatesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReconcileCandidatesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreReferencesForUploadFunc describes the behavior when the
// ReferencesForUpload method of the parent MockStore instance is invoked.
type StoreReferencesForUploadFunc struct {
	defaultHook func(context.Context, int) (shared.PackageReferenceScanner, error)
	hooks       []func(context.Context, int) (shared.PackageReferenceScanner, error)
	history     []StoreReferencesForUploadFuncCall
	mutex       sync.Mutex
}

// ReferencesForUpload delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ReferencesForUpload(v0 context.Context, v1 int) (shared.PackageReferenceScanner, error) {
	r0, r1 := m.ReferencesForUploadFunc.nextHook()(v0, v1)
	m.ReferencesForUploadFunc.appendCall(StoreReferencesForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReferencesForUpload
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreReferencesForUploadFunc) SetDefaultHook(hook func(context.Context, int) (shared.PackageReferenceScanner, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReferencesForUpload method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreReferencesForUploadFunc) PushHook(hook func(context.Context, int) (shared.PackageReferenceScanner, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreReferencesForUploadFunc) SetDefaultReturn(r0 shared.PackageReferenceScanner, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (shared.PackageReferenceScanner, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreReferencesForUploadFunc) PushReturn(r0 shared.PackageReferenceScanner, r1 error) {
	f.PushHook(func(context.Context, int) (shared.PackageReferenceScanner, error) {
		return r0, r1
	})
}

func (f *StoreReferencesForUploadFunc) nextHook() func(context.Context, int) (shared.PackageReferenceScanner, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReferencesForUploadFunc) appendCall(r0 StoreReferencesForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReferencesForUploadFuncCall objects
// describing the invocations of this function.
func (f *StoreReferencesForUploadFunc) History() []StoreReferencesForUploadFuncCall {
	f.mutex.Lock()
	history := make([]StoreReferencesForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReferencesForUploadFuncCall is an object that describes an
// invocation of method ReferencesForUpload on an instance of MockStore.
type StoreReferencesForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.PackageReferenceScanner
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReferencesForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReferencesForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreReindexIndexByIDFunc describes the behavior when the
// ReindexIndexByID method of the parent MockStore instance is invoked.
type StoreReindexIndexByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []StoreReindexIndexByIDFuncCall
	mutex       sync.Mutex
}

// ReindexIndexByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ReindexIndexByID(v0 context.Context, v1 int) error {
	r0 := m.ReindexIndexByIDFunc.nextHook()(v0, v1)
	m.ReindexIndexByIDFunc.appendCall(StoreReindexIndexByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexIndexByID
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreReindexIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexIndexByID method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreReindexIndexByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreReindexIndexByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreReindexIndexByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *StoreReindexIndexByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReindexIndexByIDFunc) appendCall(r0 StoreReindexIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReindexIndexByIDFuncCall objects
// describing the invocations of this function.
func (f *StoreReindexIndexByIDFunc) History() []StoreReindexIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreReindexIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReindexIndexByIDFuncCall is an object that describes an invocation
// of method ReindexIndexByID on an instance of MockStore.
type StoreReindexIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReindexIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReindexIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreReindexIndexesFunc describes the behavior when the ReindexIndexes
// method of the parent MockStore instance is invoked.
type StoreReindexIndexesFunc struct {
	defaultHook func(context.Context, shared.ReindexIndexesOptions) error
	hooks       []func(context.Context, shared.ReindexIndexesOptions) error
	history     []StoreReindexIndexesFuncCall
	mutex       sync.Mutex
}

// ReindexIndexes delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ReindexIndexes(v0 context.Context, v1 shared.ReindexIndexesOptions) error {
	r0 := m.ReindexIndexesFunc.nextHook()(v0, v1)
	m.ReindexIndexesFunc.appendCall(StoreReindexIndexesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexIndexes
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreReindexIndexesFunc) SetDefaultHook(hook func(context.Context, shared.ReindexIndexesOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexIndexes method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreReindexIndexesFunc) PushHook(hook func(context.Context, shared.ReindexIndexesOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreReindexIndexesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.ReindexIndexesOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreReindexIndexesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.ReindexIndexesOptions) error {
		return r0
	})
}

func (f *StoreReindexIndexesFunc) nextHook() func(context.Context, shared.ReindexIndexesOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReindexIndexesFunc) appendCall(r0 StoreReindexIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReindexIndexesFuncCall objects
// describing the invocations of this function.
func (f *StoreReindexIndexesFunc) History() []StoreReindexIndexesFuncCall {
	f.mutex.Lock()
	history := make([]StoreReindexIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReindexIndexesFuncCall is an object that describes an invocation of
// method ReindexIndexes on an instance of MockStore.
type StoreReindexIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.ReindexIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReindexIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReindexIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreReindexUploadByIDFunc describes the behavior when the
// ReindexUploadByID method of the parent MockStore instance is invoked.
type StoreReindexUploadByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []StoreReindexUploadByIDFuncCall
	mutex       sync.Mutex
}

// ReindexUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ReindexUploadByID(v0 context.Context, v1 int) error {
	r0 := m.ReindexUploadByIDFunc.nextHook()(v0, v1)
	m.ReindexUploadByIDFunc.appendCall(StoreReindexUploadByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexUploadByID
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreReindexUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexUploadByID method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreReindexUploadByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreReindexUploadByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreReindexUploadByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *StoreReindexUploadByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReindexUploadByIDFunc) appendCall(r0 StoreReindexUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReindexUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *StoreReindexUploadByIDFunc) History() []StoreReindexUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreReindexUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReindexUploadByIDFuncCall is an object that describes an invocation
// of method ReindexUploadByID on an instance of MockStore.
type StoreReindexUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReindexUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReindexUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreReindexUploadsFunc describes the behavior when the ReindexUploads
// method of the parent MockStore instance is invoked.
type StoreReindexUploadsFunc struct {
	defaultHook func(context.Context, shared.ReindexUploadsOptions) error
	hooks       []func(context.Context, shared.ReindexUploadsOptions) error
	history     []StoreReindexUploadsFuncCall
	mutex       sync.Mutex
}

// ReindexUploads delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ReindexUploads(v0 context.Context, v1 shared.ReindexUploadsOptions) error {
	r0 := m.ReindexUploadsFunc.nextHook()(v0, v1)
	m.ReindexUploadsFunc.appendCall(StoreReindexUploadsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexUploads
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreReindexUploadsFunc) SetDefaultHook(hook func(context.Context, shared.ReindexUploadsOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexUploads method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreReindexUploadsFunc) PushHook(hook func(context.Context, shared.ReindexUploadsOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreReindexUploadsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.ReindexUploadsOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreReindexUploadsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.ReindexUploadsOptions) error {
		return r0
	})
}

func (f *StoreReindexUploadsFunc) nextHook() func(context.Context, shared.ReindexUploadsOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReindexUploadsFunc) appendCall(r0 StoreReindexUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReindexUploadsFuncCall objects
// describing the invocations of this function.
func (f *StoreReindexUploadsFunc) History() []StoreReindexUploadsFuncCall {
	f.mutex.Lock()
	history := make([]StoreReindexUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReindexUploadsFuncCall is an object that describes an invocation of
// method ReindexUploads on an instance of MockStore.
type StoreReindexUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.ReindexUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReindexUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReindexUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreRepositoryIDsWithErrorsFunc describes the behavior when the
// RepositoryIDsWithErrors method of the parent MockStore instance is
// invoked.
type StoreRepositoryIDsWithErrorsFunc struct {
	defaultHook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	hooks       []func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	history     []StoreRepositoryIDsWithErrorsFuncCall
	mutex       sync.Mutex
}

// RepositoryIDsWithErrors delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) RepositoryIDsWithErrors(v0 context.Context, v1 int, v2 int) ([]shared.RepositoryWithCount, int, error) {
	r0, r1, r2 := m.RepositoryIDsWithErrorsFunc.nextHook()(v0, v1, v2)
	m.RepositoryIDsWithErrorsFunc.appendCall(StoreRepositoryIDsWithErrorsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// RepositoryIDsWithErrors method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreRepositoryIDsWithErrorsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepositoryIDsWithErrors method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreRepositoryIDsWithErrorsFunc) PushHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreRepositoryIDsWithErrorsFunc) SetDefaultReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreRepositoryIDsWithErrorsFunc) PushReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreRepositoryIDsWithErrorsFunc) nextHook() func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreRepositoryIDsWithErrorsFunc) appendCall(r0 StoreRepositoryIDsWithErrorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreRepositoryIDsWithErrorsFuncCall
// objects describing the invocations of this function.
func (f *StoreRepositoryIDsWithErrorsFunc) History() []StoreRepositoryIDsWithErrorsFuncCall {
	f.mutex.Lock()
	history := make([]StoreRepositoryIDsWithErrorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreRepositoryIDsWithErrorsFuncCall is an object that describes an
// invocation of method RepositoryIDsWithErrors on an instance of MockStore.
type StoreRepositoryIDsWithErrorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.RepositoryWithCount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreRepositoryIDsWithErrorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreRepositoryIDsWithErrorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreSetRepositoriesForRetentionScanFunc describes the behavior when the
// SetRepositoriesForRetentionScan method of the parent MockStore instance
// is invoked.
type StoreSetRepositoriesForRetentionScanFunc struct {
	defaultHook func(context.Context, time.Duration, int) ([]int, error)
	hooks       []func(context.Context, time.Duration, int) ([]int, error)
	history     []StoreSetRepositoriesForRetentionScanFuncCall
	mutex       sync.Mutex
}

// SetRepositoriesForRetentionScan delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStore) SetRepositoriesForRetentionScan(v0 context.Context, v1 time.Duration, v2 int) ([]int, error) {
	r0, r1 := m.SetRepositoriesForRetentionScanFunc.nextHook()(v0, v1, v2)
	m.SetRepositoriesForRetentionScanFunc.appendCall(StoreSetRepositoriesForRetentionScanFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SetRepositoriesForRetentionScan method of the parent MockStore instance
// is invoked and the hook queue is empty.
func (f *StoreSetRepositoriesForRetentionScanFunc) SetDefaultHook(hook func(context.Context, time.Duration, int) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepositoriesForRetentionScan method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreSetRepositoriesForRetentionScanFunc) PushHook(hook func(context.Context, time.Duration, int) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSetRepositoriesForRetentionScanFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Duration, int) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSetRepositoriesForRetentionScanFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, time.Duration, int) ([]int, error) {
		return r0, r1
	})
}

func (f *StoreSetRepositoriesForRetentionScanFunc) nextHook() func(context.Context, time.Duration, int) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSetRepositoriesForRetentionScanFunc) appendCall(r0 StoreSetRepositoriesForRetentionScanFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreSetRepositoriesForRetentionScanFuncCall objects describing the
// invocations of this function.
func (f *StoreSetRepositoriesForRetentionScanFunc) History() []StoreSetRepositoriesForRetentionScanFuncCall {
	f.mutex.Lock()
	history := make([]StoreSetRepositoriesForRetentionScanFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSetRepositoriesForRetentionScanFuncCall is an object that describes
// an invocation of method SetRepositoriesForRetentionScan on an instance of
// MockStore.
type StoreSetRepositoriesForRetentionScanFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSetRepositoriesForRetentionScanFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSetRepositoriesForRetentionScanFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreSetRepositoryAsDirtyFunc describes the behavior when the
// SetRepositoryAsDirty method of the parent MockStore instance is invoked.
type StoreSetRepositoryAsDirtyFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []StoreSetRepositoryAsDirtyFuncCall
	mutex       sync.Mutex
}

// SetRepositoryAsDirty delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) SetRepositoryAsDirty(v0 context.Context, v1 int) error {
	r0 := m.SetRepositoryAsDirtyFunc.nextHook()(v0, v1)
	m.SetRepositoryAsDirtyFunc.appendCall(StoreSetRepositoryAsDirtyFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetRepositoryAsDirty
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreSetRepositoryAsDirtyFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepositoryAsDirty method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreSetRepositoryAsDirtyFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSetRepositoryAsDirtyFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSetRepositoryAsDirtyFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *StoreSetRepositoryAsDirtyFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSetRepositoryAsDirtyFunc) appendCall(r0 StoreSetRepositoryAsDirtyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreSetRepositoryAsDirtyFuncCall objects
// describing the invocations of this function.
func (f *StoreSetRepositoryAsDirtyFunc) History() []StoreSetRepositoryAsDirtyFuncCall {
	f.mutex.Lock()
	history := make([]StoreSetRepositoryAsDirtyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSetRepositoryAsDirtyFuncCall is an object that describes an
// invocation of method SetRepositoryAsDirty on an instance of MockStore.
type StoreSetRepositoryAsDirtyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSetRepositoryAsDirtyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSetRepositoryAsDirtyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreSoftDeleteExpiredUploadsFunc describes the behavior when the
// SoftDeleteExpiredUploads method of the parent MockStore instance is
// invoked.
type StoreSoftDeleteExpiredUploadsFunc struct {
	defaultHook func(context.Context, int) (int, int, error)
	hooks       []func(context.Context, int) (int, int, error)
	history     []StoreSoftDeleteExpiredUploadsFuncCall
	mutex       sync.Mutex
}

// SoftDeleteExpiredUploads delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) SoftDeleteExpiredUploads(v0 context.Context, v1 int) (int, int, error) {
	r0, r1, r2 := m.SoftDeleteExpiredUploadsFunc.nextHook()(v0, v1)
	m.SoftDeleteExpiredUploadsFunc.appendCall(StoreSoftDeleteExpiredUploadsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// SoftDeleteExpiredUploads method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreSoftDeleteExpiredUploadsFunc) SetDefaultHook(hook func(context.Context, int) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SoftDeleteExpiredUploads method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreSoftDeleteExpiredUploadsFunc) PushHook(hook func(context.Context, int) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSoftDeleteExpiredUploadsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSoftDeleteExpiredUploadsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, int) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreSoftDeleteExpiredUploadsFunc) nextHook() func(context.Context, int) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSoftDeleteExpiredUploadsFunc) appendCall(r0 StoreSoftDeleteExpiredUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreSoftDeleteExpiredUploadsFuncCall
// objects describing the invocations of this function.
func (f *StoreSoftDeleteExpiredUploadsFunc) History() []StoreSoftDeleteExpiredUploadsFuncCall {
	f.mutex.Lock()
	history := make([]StoreSoftDeleteExpiredUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSoftDeleteExpiredUploadsFuncCall is an object that describes an
// invocation of method SoftDeleteExpiredUploads on an instance of
// MockStore.
type StoreSoftDeleteExpiredUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSoftDeleteExpiredUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSoftDeleteExpiredUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreSoftDeleteExpiredUploadsViaTraversalFunc describes the behavior when
// the SoftDeleteExpiredUploadsViaTraversal method of the parent MockStore
// instance is invoked.
type StoreSoftDeleteExpiredUploadsViaTraversalFunc struct {
	defaultHook func(context.Context, int) (int, int, error)
	hooks       []func(context.Context, int) (int, int, error)
	history     []StoreSoftDeleteExpiredUploadsViaTraversalFuncCall
	mutex       sync.Mutex
}

// SoftDeleteExpiredUploadsViaTraversal delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockStore) SoftDeleteExpiredUploadsViaTraversal(v0 context.Context, v1 int) (int, int, error) {
	r0, r1, r2 := m.SoftDeleteExpiredUploadsViaTraversalFunc.nextHook()(v0, v1)
	m.SoftDeleteExpiredUploadsViaTraversalFunc.appendCall(StoreSoftDeleteExpiredUploadsViaTraversalFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// SoftDeleteExpiredUploadsViaTraversal method of the parent MockStore
// instance is invoked and the hook queue is empty.
func (f *StoreSoftDeleteExpiredUploadsViaTraversalFunc) SetDefaultHook(hook func(context.Context, int) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SoftDeleteExpiredUploadsViaTraversal method of the parent MockStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreSoftDeleteExpiredUploadsViaTraversalFunc) PushHook(hook func(context.Context, int) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSoftDeleteExpiredUploadsViaTraversalFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSoftDeleteExpiredUploadsViaTraversalFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, int) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreSoftDeleteExpiredUploadsViaTraversalFunc) nextHook() func(context.Context, int) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSoftDeleteExpiredUploadsViaTraversalFunc) appendCall(r0 StoreSoftDeleteExpiredUploadsViaTraversalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreSoftDeleteExpiredUploadsViaTraversalFuncCall objects describing the
// invocations of this function.
func (f *StoreSoftDeleteExpiredUploadsViaTraversalFunc) History() []StoreSoftDeleteExpiredUploadsViaTraversalFuncCall {
	f.mutex.Lock()
	history := make([]StoreSoftDeleteExpiredUploadsViaTraversalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSoftDeleteExpiredUploadsViaTraversalFuncCall is an object that
// describes an invocation of method SoftDeleteExpiredUploadsViaTraversal on
// an instance of MockStore.
type StoreSoftDeleteExpiredUploadsViaTraversalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSoftDeleteExpiredUploadsViaTraversalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSoftDeleteExpiredUploadsViaTraversalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreSourcedCommitsWithoutCommittedAtFunc describes the behavior when the
// SourcedCommitsWithoutCommittedAt method of the parent MockStore instance
// is invoked.
type StoreSourcedCommitsWithoutCommittedAtFunc struct {
	defaultHook func(context.Context, int) ([]store.SourcedCommits, error)
	hooks       []func(context.Context, int) ([]store.SourcedCommits, error)
	history     []StoreSourcedCommitsWithoutCommittedAtFuncCall
	mutex       sync.Mutex
}

// SourcedCommitsWithoutCommittedAt delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStore) SourcedCommitsWithoutCommittedAt(v0 context.Context, v1 int) ([]store.SourcedCommits, error) {
	r0, r1 := m.SourcedCommitsWithoutCommittedAtFunc.nextHook()(v0, v1)
	m.SourcedCommitsWithoutCommittedAtFunc.appendCall(StoreSourcedCommitsWithoutCommittedAtFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SourcedCommitsWithoutCommittedAt method of the parent MockStore instance
// is invoked and the hook queue is empty.
func (f *StoreSourcedCommitsWithoutCommittedAtFunc) SetDefaultHook(hook func(context.Context, int) ([]store.SourcedCommits, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SourcedCommitsWithoutCommittedAt method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreSourcedCommitsWithoutCommittedAtFunc) PushHook(hook func(context.Context, int) ([]store.SourcedCommits, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSourcedCommitsWithoutCommittedAtFunc) SetDefaultReturn(r0 []store.SourcedCommits, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]store.SourcedCommits, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSourcedCommitsWithoutCommittedAtFunc) PushReturn(r0 []store.SourcedCommits, r1 error) {
	f.PushHook(func(context.Context, int) ([]store.SourcedCommits, error) {
		return r0, r1
	})
}

func (f *StoreSourcedCommitsWithoutCommittedAtFunc) nextHook() func(context.Context, int) ([]store.SourcedCommits, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSourcedCommitsWithoutCommittedAtFunc) appendCall(r0 StoreSourcedCommitsWithoutCommittedAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreSourcedCommitsWithoutCommittedAtFuncCall objects describing the
// invocations of this function.
func (f *StoreSourcedCommitsWithoutCommittedAtFunc) History() []StoreSourcedCommitsWithoutCommittedAtFuncCall {
	f.mutex.Lock()
	history := make([]StoreSourcedCommitsWithoutCommittedAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSourcedCommitsWithoutCommittedAtFuncCall is an object that describes
// an invocation of method SourcedCommitsWithoutCommittedAt on an instance
// of MockStore.
type StoreSourcedCommitsWithoutCommittedAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []store.SourcedCommits
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSourcedCommitsWithoutCommittedAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSourcedCommitsWithoutCommittedAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreUpdateCommittedAtFunc describes the behavior when the
// UpdateCommittedAt method of the parent MockStore instance is invoked.
type StoreUpdateCommittedAtFunc struct {
	defaultHook func(context.Context, int, string, string) error
	hooks       []func(context.Context, int, string, string) error
	history     []StoreUpdateCommittedAtFuncCall
	mutex       sync.Mutex
}

// UpdateCommittedAt delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) UpdateCommittedAt(v0 context.Context, v1 int, v2 string, v3 string) error {
	r0 := m.UpdateCommittedAtFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateCommittedAtFunc.appendCall(StoreUpdateCommittedAtFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateCommittedAt
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreUpdateCommittedAtFunc) SetDefaultHook(hook func(context.Context, int, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateCommittedAt method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreUpdateCommittedAtFunc) PushHook(hook func(context.Context, int, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdateCommittedAtFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdateCommittedAtFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string, string) error {
		return r0
	})
}

func (f *StoreUpdateCommittedAtFunc) nextHook() func(context.Context, int, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdateCommittedAtFunc) appendCall(r0 StoreUpdateCommittedAtFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdateCommittedAtFuncCall objects
// describing the invocations of this function.
func (f *StoreUpdateCommittedAtFunc) History() []StoreUpdateCommittedAtFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdateCommittedAtFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdateCommittedAtFuncCall is an object that describes an invocation
// of method UpdateCommittedAt on an instance of MockStore.
type StoreUpdateCommittedAtFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdateCommittedAtFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdateCommittedAtFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreUpdatePackageReferencesFunc describes the behavior when the
// UpdatePackageReferences method of the parent MockStore instance is
// invoked.
type StoreUpdatePackageReferencesFunc struct {
	defaultHook func(context.Context, int, []precise.PackageReference) error
	hooks       []func(context.Context, int, []precise.PackageReference) error
	history     []StoreUpdatePackageReferencesFuncCall
	mutex       sync.Mutex
}

// UpdatePackageReferences delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) UpdatePackageReferences(v0 context.Context, v1 int, v2 []precise.PackageReference) error {
	r0 := m.UpdatePackageReferencesFunc.nextHook()(v0, v1, v2)
	m.UpdatePackageReferencesFunc.appendCall(StoreUpdatePackageReferencesFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdatePackageReferences method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreUpdatePackageReferencesFunc) SetDefaultHook(hook func(context.Context, int, []precise.PackageReference) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePackageReferences method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreUpdatePackageReferencesFunc) PushHook(hook func(context.Context, int, []precise.PackageReference) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdatePackageReferencesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, []precise.PackageReference) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdatePackageReferencesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, []precise.PackageReference) error {
		return r0
	})
}

func (f *StoreUpdatePackageReferencesFunc) nextHook() func(context.Context, int, []precise.PackageReference) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdatePackageReferencesFunc) appendCall(r0 StoreUpdatePackageReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdatePackageReferencesFuncCall
// objects describing the invocations of this function.
func (f *StoreUpdatePackageReferencesFunc) History() []StoreUpdatePackageReferencesFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdatePackageReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdatePackageReferencesFuncCall is an object that describes an
// invocation of method UpdatePackageReferences on an instance of MockStore.
type StoreUpdatePackageReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []precise.PackageReference
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdatePackageReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdatePackageReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreUpdatePackagesFunc describes the behavior when the UpdatePackages
// method of the parent MockStore instance is invoked.
type StoreUpdatePackagesFunc struct {
	defaultHook func(context.Context, int, []precise.Package) error
	hooks       []func(context.Context, int, []precise.Package) error
	history     []StoreUpdatePackagesFuncCall
	mutex       sync.Mutex
}

// UpdatePackages delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) UpdatePackages(v0 context.Context, v1 int, v2 []precise.Package) error {
	r0 := m.UpdatePackagesFunc.nextHook()(v0, v1, v2)
	m.UpdatePackagesFunc.appendCall(StoreUpdatePackagesFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdatePackages
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreUpdatePackagesFunc) SetDefaultHook(hook func(context.Context, int, []precise.Package) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePackages method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreUpdatePackagesFunc) PushHook(hook func(context.Context, int, []precise.Package) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdatePackagesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, []precise.Package) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdatePackagesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, []precise.Package) error {
		return r0
	})
}

func (f *StoreUpdatePackagesFunc) nextHook() func(context.Context, int, []precise.Package) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdatePackagesFunc) appendCall(r0 StoreUpdatePackagesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdatePackagesFuncCall objects
// describing the invocations of this function.
func (f *StoreUpdatePackagesFunc) History() []StoreUpdatePackagesFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdatePackagesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdatePackagesFuncCall is an object that describes an invocation of
// method UpdatePackages on an instance of MockStore.
type StoreUpdatePackagesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []precise.Package
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdatePackagesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdatePackagesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreUpdateUploadRetentionFunc describes the behavior when the
// UpdateUploadRetention method of the parent MockStore instance is invoked.
type StoreUpdateUploadRetentionFunc struct {
	defaultHook func(context.Context, []int, []int) error
	hooks       []func(context.Context, []int, []int) error
	history     []StoreUpdateUploadRetentionFuncCall
	mutex       sync.Mutex
}

// UpdateUploadRetention delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) UpdateUploadRetention(v0 context.Context, v1 []int, v2 []int) error {
	r0 := m.UpdateUploadRetentionFunc.nextHook()(v0, v1, v2)
	m.UpdateUploadRetentionFunc.appendCall(StoreUpdateUploadRetentionFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateUploadRetention method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreUpdateUploadRetentionFunc) SetDefaultHook(hook func(context.Context, []int, []int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateUploadRetention method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreUpdateUploadRetentionFunc) PushHook(hook func(context.Context, []int, []int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdateUploadRetentionFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int, []int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdateUploadRetentionFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int, []int) error {
		return r0
	})
}

func (f *StoreUpdateUploadRetentionFunc) nextHook() func(context.Context, []int, []int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdateUploadRetentionFunc) appendCall(r0 StoreUpdateUploadRetentionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdateUploadRetentionFuncCall objects
// describing the invocations of this function.
func (f *StoreUpdateUploadRetentionFunc) History() []StoreUpdateUploadRetentionFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdateUploadRetentionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdateUploadRetentionFuncCall is an object that describes an
// invocation of method UpdateUploadRetention on an instance of MockStore.
type StoreUpdateUploadRetentionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdateUploadRetentionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdateUploadRetentionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreUpdateUploadsVisibleToCommitsFunc describes the behavior when the
// UpdateUploadsVisibleToCommits method of the parent MockStore instance is
// invoked.
type StoreUpdateUploadsVisibleToCommitsFunc struct {
	defaultHook func(context.Context, int, *gitdomain.CommitGraph, map[string][]gitdomain.RefDescription, time.Duration, time.Duration, int, time.Time) error
	hooks       []func(context.Context, int, *gitdomain.CommitGraph, map[string][]gitdomain.RefDescription, time.Duration, time.Duration, int, time.Time) error
	history     []StoreUpdateUploadsVisibleToCommitsFuncCall
	mutex       sync.Mutex
}

// UpdateUploadsVisibleToCommits delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) UpdateUploadsVisibleToCommits(v0 context.Context, v1 int, v2 *gitdomain.CommitGraph, v3 map[string][]gitdomain.RefDescription, v4 time.Duration, v5 time.Duration, v6 int, v7 time.Time) error {
	r0 := m.UpdateUploadsVisibleToCommitsFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6, v7)
	m.UpdateUploadsVisibleToCommitsFunc.appendCall(StoreUpdateUploadsVisibleToCommitsFuncCall{v0, v1, v2, v3, v4, v5, v6, v7, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateUploadsVisibleToCommits method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreUpdateUploadsVisibleToCommitsFunc) SetDefaultHook(hook func(context.Context, int, *gitdomain.CommitGraph, map[string][]gitdomain.RefDescription, time.Duration, time.Duration, int, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateUploadsVisibleToCommits method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreUpdateUploadsVisibleToCommitsFunc) PushHook(hook func(context.Context, int, *gitdomain.CommitGraph, map[string][]gitdomain.RefDescription, time.Duration, time.Duration, int, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdateUploadsVisibleToCommitsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, *gitdomain.CommitGraph, map[string][]gitdomain.RefDescription, time.Duration, time.Duration, int, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdateUploadsVisibleToCommitsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, *gitdomain.CommitGraph, map[string][]gitdomain.RefDescription, time.Duration, time.Duration, int, time.Time) error {
		return r0
	})
}

func (f *StoreUpdateUploadsVisibleToCommitsFunc) nextHook() func(context.Context, int, *gitdomain.CommitGraph, map[string][]gitdomain.RefDescription, time.Duration, time.Duration, int, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdateUploadsVisibleToCommitsFunc) appendCall(r0 StoreUpdateUploadsVisibleToCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdateUploadsVisibleToCommitsFuncCall
// objects describing the invocations of this function.
func (f *StoreUpdateUploadsVisibleToCommitsFunc) History() []StoreUpdateUploadsVisibleToCommitsFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdateUploadsVisibleToCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdateUploadsVisibleToCommitsFuncCall is an object that describes an
// invocation of method UpdateUploadsVisibleToCommits on an instance of
// MockStore.
type StoreUpdateUploadsVisibleToCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *gitdomain.CommitGraph
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 map[string][]gitdomain.RefDescription
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 time.Duration
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 time.Duration
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Arg7 is the value of the 8th argument passed to this method
	// invocation.
	Arg7 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdateUploadsVisibleToCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6, c.Arg7}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdateUploadsVisibleToCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreWithTransactionFunc describes the behavior when the WithTransaction
// method of the parent MockStore instance is invoked.
type StoreWithTransactionFunc struct {
	defaultHook func(context.Context, func(s store.Store) error) error
	hooks       []func(context.Context, func(s store.Store) error) error
	history     []StoreWithTransactionFuncCall
	mutex       sync.Mutex
}

// WithTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) WithTransaction(v0 context.Context, v1 func(s store.Store) error) error {
	r0 := m.WithTransactionFunc.nextHook()(v0, v1)
	m.WithTransactionFunc.appendCall(StoreWithTransactionFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransaction
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreWithTransactionFunc) SetDefaultHook(hook func(context.Context, func(s store.Store) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransaction method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreWithTransactionFunc) PushHook(hook func(context.Context, func(s store.Store) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreWithTransactionFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(s store.Store) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreWithTransactionFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(s store.Store) error) error {
		return r0
	})
}

func (f *StoreWithTransactionFunc) nextHook() func(context.Context, func(s store.Store) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWithTransactionFunc) appendCall(r0 StoreWithTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWithTransactionFuncCall objects
// describing the invocations of this function.
func (f *StoreWithTransactionFunc) History() []StoreWithTransactionFuncCall {
	f.mutex.Lock()
	history := make([]StoreWithTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWithTransactionFuncCall is an object that describes an invocation of
// method WithTransaction on an instance of MockStore.
type StoreWithTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(s store.Store) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWithTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWithTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreWorkerutilStoreFunc describes the behavior when the WorkerutilStore
// method of the parent MockStore instance is invoked.
type StoreWorkerutilStoreFunc struct {
	defaultHook func(*observation.Context) store1.Store[shared.Upload]
	hooks       []func(*observation.Context) store1.Store[shared.Upload]
	history     []StoreWorkerutilStoreFuncCall
	mutex       sync.Mutex
}

// WorkerutilStore delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) WorkerutilStore(v0 *observation.Context) store1.Store[shared.Upload] {
	r0 := m.WorkerutilStoreFunc.nextHook()(v0)
	m.WorkerutilStoreFunc.appendCall(StoreWorkerutilStoreFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WorkerutilStore
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreWorkerutilStoreFunc) SetDefaultHook(hook func(*observation.Context) store1.Store[shared.Upload]) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WorkerutilStore method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreWorkerutilStoreFunc) PushHook(hook func(*observation.Context) store1.Store[shared.Upload]) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreWorkerutilStoreFunc) SetDefaultReturn(r0 store1.Store[shared.Upload]) {
	f.SetDefaultHook(func(*observation.Context) store1.Store[shared.Upload] {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreWorkerutilStoreFunc) PushReturn(r0 store1.Store[shared.Upload]) {
	f.PushHook(func(*observation.Context) store1.Store[shared.Upload] {
		return r0
	})
}

func (f *StoreWorkerutilStoreFunc) nextHook() func(*observation.Context) store1.Store[shared.Upload] {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWorkerutilStoreFunc) appendCall(r0 StoreWorkerutilStoreFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWorkerutilStoreFuncCall objects
// describing the invocations of this function.
func (f *StoreWorkerutilStoreFunc) History() []StoreWorkerutilStoreFuncCall {
	f.mutex.Lock()
	history := make([]StoreWorkerutilStoreFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWorkerutilStoreFuncCall is an object that describes an invocation of
// method WorkerutilStore on an instance of MockStore.
type StoreWorkerutilStoreFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *observation.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 store1.Store[shared.Upload]
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWorkerutilStoreFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWorkerutilStoreFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockLSIFSCIPWriter is a mock implementation of the SCIPWriter interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/internal/lsifstore)
// used for unit testing.
type MockLSIFSCIPWriter struct {
	// FlushFunc is an instance of a mock function object controlling the
	// behavior of the method Flush.
	FlushFunc *LSIFSCIPWriterFlushFunc
	// InsertDocumentFunc is an instance of a mock function object
	// controlling the behavior of the method InsertDocument.
	InsertDocumentFunc *LSIFSCIPWriterInsertDocumentFunc
}

// NewMockLSIFSCIPWriter creates a new mock of the SCIPWriter interface. All
// methods return zero values for all results, unless overwritten.
func NewMockLSIFSCIPWriter() *MockLSIFSCIPWriter {
	return &MockLSIFSCIPWriter{
		FlushFunc: &LSIFSCIPWriterFlushFunc{
			defaultHook: func(context.Context) (r0 uint32, r1 error) {
				return
			},
		},
		InsertDocumentFunc: &LSIFSCIPWriterInsertDocumentFunc{
			defaultHook: func(context.Context, string, *scip.Document) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockLSIFSCIPWriter creates a new mock of the SCIPWriter
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockLSIFSCIPWriter() *MockLSIFSCIPWriter {
	return &MockLSIFSCIPWriter{
		FlushFunc: &LSIFSCIPWriterFlushFunc{
			defaultHook: func(context.Context) (uint32, error) {
				panic("unexpected invocation of MockLSIFSCIPWriter.Flush")
			},
		},
		InsertDocumentFunc: &LSIFSCIPWriterInsertDocumentFunc{
			defaultHook: func(context.Context, string, *scip.Document) error {
				panic("unexpected invocation of MockLSIFSCIPWriter.InsertDocument")
			},
		},
	}
}

// NewMockLSIFSCIPWriterFrom creates a new mock of the MockLSIFSCIPWriter
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockLSIFSCIPWriterFrom(i lsifstore.SCIPWriter) *MockLSIFSCIPWriter {
	return &MockLSIFSCIPWriter{
		FlushFunc: &LSIFSCIPWriterFlushFunc{
			defaultHook: i.Flush,
		},
		InsertDocumentFunc: &LSIFSCIPWriterInsertDocumentFunc{
			defaultHook: i.InsertDocument,
		},
	}
}

// LSIFSCIPWriterFlushFunc describes the behavior when the Flush method of
// the parent MockLSIFSCIPWriter instance is invoked.
type LSIFSCIPWriterFlushFunc struct {
	defaultHook func(context.Context) (uint32, error)
	hooks       []func(context.Context) (uint32, error)
	history     []LSIFSCIPWriterFlushFuncCall
	mutex       sync.Mutex
}

// Flush delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLSIFSCIPWriter) Flush(v0 context.Context) (uint32, error) {
	r0, r1 := m.FlushFunc.nextHook()(v0)
	m.FlushFunc.appendCall(LSIFSCIPWriterFlushFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Flush method of the
// parent MockLSIFSCIPWriter instance is invoked and the hook queue is
// empty.
func (f *LSIFSCIPWriterFlushFunc) SetDefaultHook(hook func(context.Context) (uint32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Flush method of the parent MockLSIFSCIPWriter instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LSIFSCIPWriterFlushFunc) PushHook(hook func(context.Context) (uint32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFSCIPWriterFlushFunc) SetDefaultReturn(r0 uint32, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFSCIPWriterFlushFunc) PushReturn(r0 uint32, r1 error) {
	f.PushHook(func(context.Context) (uint32, error) {
		return r0, r1
	})
}

func (f *LSIFSCIPWriterFlushFunc) nextHook() func(context.Context) (uint32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFSCIPWriterFlushFunc) appendCall(r0 LSIFSCIPWriterFlushFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LSIFSCIPWriterFlushFuncCall objects
// describing the invocations of this function.
func (f *LSIFSCIPWriterFlushFunc) History() []LSIFSCIPWriterFlushFuncCall {
	f.mutex.Lock()
	history := make([]LSIFSCIPWriterFlushFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFSCIPWriterFlushFuncCall is an object that describes an invocation of
// method Flush on an instance of MockLSIFSCIPWriter.
type LSIFSCIPWriterFlushFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFSCIPWriterFlushFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFSCIPWriterFlushFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LSIFSCIPWriterInsertDocumentFunc describes the behavior when the
// InsertDocument method of the parent MockLSIFSCIPWriter instance is
// invoked.
type LSIFSCIPWriterInsertDocumentFunc struct {
	defaultHook func(context.Context, string, *scip.Document) error
	hooks       []func(context.Context, string, *scip.Document) error
	history     []LSIFSCIPWriterInsertDocumentFuncCall
	mutex       sync.Mutex
}

// InsertDocument delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLSIFSCIPWriter) InsertDocument(v0 context.Context, v1 string, v2 *scip.Document) error {
	r0 := m.InsertDocumentFunc.nextHook()(v0, v1, v2)
	m.InsertDocumentFunc.appendCall(LSIFSCIPWriterInsertDocumentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the InsertDocument
// method of the parent MockLSIFSCIPWriter instance is invoked and the hook
// queue is empty.
func (f *LSIFSCIPWriterInsertDocumentFunc) SetDefaultHook(hook func(context.Context, string, *scip.Document) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertDocument method of the parent MockLSIFSCIPWriter instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LSIFSCIPWriterInsertDocumentFunc) PushHook(hook func(context.Context, string, *scip.Document) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFSCIPWriterInsertDocumentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, *scip.Document) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFSCIPWriterInsertDocumentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, *scip.Document) error {
		return r0
	})
}

func (f *LSIFSCIPWriterInsertDocumentFunc) nextHook() func(context.Context, string, *scip.Document) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFSCIPWriterInsertDocumentFunc) appendCall(r0 LSIFSCIPWriterInsertDocumentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LSIFSCIPWriterInsertDocumentFuncCall
// objects describing the invocations of this function.
func (f *LSIFSCIPWriterInsertDocumentFunc) History() []LSIFSCIPWriterInsertDocumentFuncCall {
	f.mutex.Lock()
	history := make([]LSIFSCIPWriterInsertDocumentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFSCIPWriterInsertDocumentFuncCall is an object that describes an
// invocation of method InsertDocument on an instance of MockLSIFSCIPWriter.
type LSIFSCIPWriterInsertDocumentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *scip.Document
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFSCIPWriterInsertDocumentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFSCIPWriterInsertDocumentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockLSIFStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/internal/lsifstore)
// used for unit testing.
type MockLSIFStore struct {
	// DeleteLsifDataByUploadIdsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteLsifDataByUploadIds.
	DeleteLsifDataByUploadIdsFunc *LSIFStoreDeleteLsifDataByUploadIdsFunc
	// DeleteUnreferencedDocumentsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteUnreferencedDocuments.
	DeleteUnreferencedDocumentsFunc *LSIFStoreDeleteUnreferencedDocumentsFunc
	// IDsWithMetaFunc is an instance of a mock function object controlling
	// the behavior of the method IDsWithMeta.
	IDsWithMetaFunc *LSIFStoreIDsWithMetaFunc
	// InsertDefinitionsAndReferencesForDocumentFunc is an instance of a
	// mock function object controlling the behavior of the method
	// InsertDefinitionsAndReferencesForDocument.
	InsertDefinitionsAndReferencesForDocumentFunc *LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc
	// InsertMetadataFunc is an instance of a mock function object
	// controlling the behavior of the method InsertMetadata.
	InsertMetadataFunc *LSIFStoreInsertMetadataFunc
	// NewSCIPWriterFunc is an instance of a mock function object
	// controlling the behavior of the method NewSCIPWriter.
	NewSCIPWriterFunc *LSIFStoreNewSCIPWriterFunc
	// ReconcileCandidatesFunc is an instance of a mock function object
	// controlling the behavior of the method ReconcileCandidates.
	ReconcileCandidatesFunc *LSIFStoreReconcileCandidatesFunc
	// ReconcileCandidatesWithTimeFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ReconcileCandidatesWithTime.
	ReconcileCandidatesWithTimeFunc *LSIFStoreReconcileCandidatesWithTimeFunc
	// WithTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method WithTransaction.
	WithTransactionFunc *LSIFStoreWithTransactionFunc
}

// NewMockLSIFStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockLSIFStore() *MockLSIFStore {
	return &MockLSIFStore{
		DeleteLsifDataByUploadIdsFunc: &LSIFStoreDeleteLsifDataByUploadIdsFunc{
			defaultHook: func(context.Context, ...int) (r0 error) {
				return
			},
		},
		DeleteUnreferencedDocumentsFunc: &LSIFStoreDeleteUnreferencedDocumentsFunc{
			defaultHook: func(context.Context, int, time.Duration, time.Time) (r0 int, r1 int, r2 error) {
				return
			},
		},
		IDsWithMetaFunc: &LSIFStoreIDsWithMetaFunc{
			defaultHook: func(context.Context, []int) (r0 []int, r1 error) {
				return
			},
		},
		InsertDefinitionsAndReferencesForDocumentFunc: &LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc{
			defaultHook: func(context.Context, shared.ExportedUpload, string, int, func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) (r0 error) {
				return
			},
		},
		InsertMetadataFunc: &LSIFStoreInsertMetadataFunc{
			defaultHook: func(context.Context, int, lsifstore.ProcessedMetadata) (r0 error) {
				return
			},
		},
		NewSCIPWriterFunc: &LSIFStoreNewSCIPWriterFunc{
			defaultHook: func(context.Context, int) (r0 lsifstore.SCIPWriter, r1 error) {
				return
			},
		},
		ReconcileCandidatesFunc: &LSIFStoreReconcileCandidatesFunc{
			defaultHook: func(context.Context, int) (r0 []int, r1 error) {
				return
			},
		},
		ReconcileCandidatesWithTimeFunc: &LSIFStoreReconcileCandidatesWithTimeFunc{
			defaultHook: func(context.Context, int, time.Time) (r0 []int, r1 error) {
				return
			},
		},
		WithTransactionFunc: &LSIFStoreWithTransactionFunc{
			defaultHook: func(context.Context, func(s lsifstore.Store) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockLSIFStore creates a new mock of the Store interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockLSIFStore() *MockLSIFStore {
	return &MockLSIFStore{
		DeleteLsifDataByUploadIdsFunc: &LSIFStoreDeleteLsifDataByUploadIdsFunc{
			defaultHook: func(context.Context, ...int) error {
				panic("unexpected invocation of MockLSIFStore.DeleteLsifDataByUploadIds")
			},
		},
		DeleteUnreferencedDocumentsFunc: &LSIFStoreDeleteUnreferencedDocumentsFunc{
			defaultHook: func(context.Context, int, time.Duration, time.Time) (int, int, error) {
				panic("unexpected invocation of MockLSIFStore.DeleteUnreferencedDocuments")
			},
		},
		IDsWithMetaFunc: &LSIFStoreIDsWithMetaFunc{
			defaultHook: func(context.Context, []int) ([]int, error) {
				panic("unexpected invocation of MockLSIFStore.IDsWithMeta")
			},
		},
		InsertDefinitionsAndReferencesForDocumentFunc: &LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc{
			defaultHook: func(context.Context, shared.ExportedUpload, string, int, func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) error {
				panic("unexpected invocation of MockLSIFStore.InsertDefinitionsAndReferencesForDocument")
			},
		},
		InsertMetadataFunc: &LSIFStoreInsertMetadataFunc{
			defaultHook: func(context.Context, int, lsifstore.ProcessedMetadata) error {
				panic("unexpected invocation of MockLSIFStore.InsertMetadata")
			},
		},
		NewSCIPWriterFunc: &LSIFStoreNewSCIPWriterFunc{
			defaultHook: func(context.Context, int) (lsifstore.SCIPWriter, error) {
				panic("unexpected invocation of MockLSIFStore.NewSCIPWriter")
			},
		},
		ReconcileCandidatesFunc: &LSIFStoreReconcileCandidatesFunc{
			defaultHook: func(context.Context, int) ([]int, error) {
				panic("unexpected invocation of MockLSIFStore.ReconcileCandidates")
			},
		},
		ReconcileCandidatesWithTimeFunc: &LSIFStoreReconcileCandidatesWithTimeFunc{
			defaultHook: func(context.Context, int, time.Time) ([]int, error) {
				panic("unexpected invocation of MockLSIFStore.ReconcileCandidatesWithTime")
			},
		},
		WithTransactionFunc: &LSIFStoreWithTransactionFunc{
			defaultHook: func(context.Context, func(s lsifstore.Store) error) error {
				panic("unexpected invocation of MockLSIFStore.WithTransaction")
			},
		},
	}
}

// NewMockLSIFStoreFrom creates a new mock of the MockLSIFStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockLSIFStoreFrom(i lsifstore.Store) *MockLSIFStore {
	return &MockLSIFStore{
		DeleteLsifDataByUploadIdsFunc: &LSIFStoreDeleteLsifDataByUploadIdsFunc{
			defaultHook: i.DeleteLsifDataByUploadIds,
		},
		DeleteUnreferencedDocumentsFunc: &LSIFStoreDeleteUnreferencedDocumentsFunc{
			defaultHook: i.DeleteUnreferencedDocuments,
		},
		IDsWithMetaFunc: &LSIFStoreIDsWithMetaFunc{
			defaultHook: i.IDsWithMeta,
		},
		InsertDefinitionsAndReferencesForDocumentFunc: &LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc{
			defaultHook: i.InsertDefinitionsAndReferencesForDocument,
		},
		InsertMetadataFunc: &LSIFStoreInsertMetadataFunc{
			defaultHook: i.InsertMetadata,
		},
		NewSCIPWriterFunc: &LSIFStoreNewSCIPWriterFunc{
			defaultHook: i.NewSCIPWriter,
		},
		ReconcileCandidatesFunc: &LSIFStoreReconcileCandidatesFunc{
			defaultHook: i.ReconcileCandidates,
		},
		ReconcileCandidatesWithTimeFunc: &LSIFStoreReconcileCandidatesWithTimeFunc{
			defaultHook: i.ReconcileCandidatesWithTime,
		},
		WithTransactionFunc: &LSIFStoreWithTransactionFunc{
			defaultHook: i.WithTransaction,
		},
	}
}

// LSIFStoreDeleteLsifDataByUploadIdsFunc describes the behavior when the
// DeleteLsifDataByUploadIds method of the parent MockLSIFStore instance is
// invoked.
type LSIFStoreDeleteLsifDataByUploadIdsFunc struct {
	defaultHook func(context.Context, ...int) error
	hooks       []func(context.Context, ...int) error
	history     []LSIFStoreDeleteLsifDataByUploadIdsFuncCall
	mutex       sync.Mutex
}

// DeleteLsifDataByUploadIds delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockLSIFStore) DeleteLsifDataByUploadIds(v0 context.Context, v1 ...int) error {
	r0 := m.DeleteLsifDataByUploadIdsFunc.nextHook()(v0, v1...)
	m.DeleteLsifDataByUploadIdsFunc.appendCall(LSIFStoreDeleteLsifDataByUploadIdsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteLsifDataByUploadIds method of the parent MockLSIFStore instance is
// invoked and the hook queue is empty.
func (f *LSIFStoreDeleteLsifDataByUploadIdsFunc) SetDefaultHook(hook func(context.Context, ...int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteLsifDataByUploadIds method of the parent MockLSIFStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *LSIFStoreDeleteLsifDataByUploadIdsFunc) PushHook(hook func(context.Context, ...int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFStoreDeleteLsifDataByUploadIdsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFStoreDeleteLsifDataByUploadIdsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...int) error {
		return r0
	})
}

func (f *LSIFStoreDeleteLsifDataByUploadIdsFunc) nextHook() func(context.Context, ...int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFStoreDeleteLsifDataByUploadIdsFunc) appendCall(r0 LSIFStoreDeleteLsifDataByUploadIdsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LSIFStoreDeleteLsifDataByUploadIdsFuncCall
// objects describing the invocations of this function.
func (f *LSIFStoreDeleteLsifDataByUploadIdsFunc) History() []LSIFStoreDeleteLsifDataByUploadIdsFuncCall {
	f.mutex.Lock()
	history := make([]LSIFStoreDeleteLsifDataByUploadIdsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFStoreDeleteLsifDataByUploadIdsFuncCall is an object that describes an
// invocation of method DeleteLsifDataByUploadIds on an instance of
// MockLSIFStore.
type LSIFStoreDeleteLsifDataByUploadIdsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LSIFStoreDeleteLsifDataByUploadIdsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFStoreDeleteLsifDataByUploadIdsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// LSIFStoreDeleteUnreferencedDocumentsFunc describes the behavior when the
// DeleteUnreferencedDocuments method of the parent MockLSIFStore instance
// is invoked.
type LSIFStoreDeleteUnreferencedDocumentsFunc struct {
	defaultHook func(context.Context, int, time.Duration, time.Time) (int, int, error)
	hooks       []func(context.Context, int, time.Duration, time.Time) (int, int, error)
	history     []LSIFStoreDeleteUnreferencedDocumentsFuncCall
	mutex       sync.Mutex
}

// DeleteUnreferencedDocuments delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockLSIFStore) DeleteUnreferencedDocuments(v0 context.Context, v1 int, v2 time.Duration, v3 time.Time) (int, int, error) {
	r0, r1, r2 := m.DeleteUnreferencedDocumentsFunc.nextHook()(v0, v1, v2, v3)
	m.DeleteUnreferencedDocumentsFunc.appendCall(LSIFStoreDeleteUnreferencedDocumentsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// DeleteUnreferencedDocuments method of the parent MockLSIFStore instance
// is invoked and the hook queue is empty.
func (f *LSIFStoreDeleteUnreferencedDocumentsFunc) SetDefaultHook(hook func(context.Context, int, time.Duration, time.Time) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUnreferencedDocuments method of the parent MockLSIFStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *LSIFStoreDeleteUnreferencedDocumentsFunc) PushHook(hook func(context.Context, int, time.Duration, time.Time) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFStoreDeleteUnreferencedDocumentsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, time.Duration, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFStoreDeleteUnreferencedDocumentsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, time.Duration, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *LSIFStoreDeleteUnreferencedDocumentsFunc) nextHook() func(context.Context, int, time.Duration, time.Time) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFStoreDeleteUnreferencedDocumentsFunc) appendCall(r0 LSIFStoreDeleteUnreferencedDocumentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// LSIFStoreDeleteUnreferencedDocumentsFuncCall objects describing the
// invocations of this function.
func (f *LSIFStoreDeleteUnreferencedDocumentsFunc) History() []LSIFStoreDeleteUnreferencedDocumentsFuncCall {
	f.mutex.Lock()
	history := make([]LSIFStoreDeleteUnreferencedDocumentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFStoreDeleteUnreferencedDocumentsFuncCall is an object that describes
// an invocation of method DeleteUnreferencedDocuments on an instance of
// MockLSIFStore.
type LSIFStoreDeleteUnreferencedDocumentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFStoreDeleteUnreferencedDocumentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFStoreDeleteUnreferencedDocumentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LSIFStoreIDsWithMetaFunc describes the behavior when the IDsWithMeta
// method of the parent MockLSIFStore instance is invoked.
type LSIFStoreIDsWithMetaFunc struct {
	defaultHook func(context.Context, []int) ([]int, error)
	hooks       []func(context.Context, []int) ([]int, error)
	history     []LSIFStoreIDsWithMetaFuncCall
	mutex       sync.Mutex
}

// IDsWithMeta delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLSIFStore) IDsWithMeta(v0 context.Context, v1 []int) ([]int, error) {
	r0, r1 := m.IDsWithMetaFunc.nextHook()(v0, v1)
	m.IDsWithMetaFunc.appendCall(LSIFStoreIDsWithMetaFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IDsWithMeta method
// of the parent MockLSIFStore instance is invoked and the hook queue is
// empty.
func (f *LSIFStoreIDsWithMetaFunc) SetDefaultHook(hook func(context.Context, []int) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IDsWithMeta method of the parent MockLSIFStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LSIFStoreIDsWithMetaFunc) PushHook(hook func(context.Context, []int) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFStoreIDsWithMetaFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, []int) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFStoreIDsWithMetaFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, []int) ([]int, error) {
		return r0, r1
	})
}

func (f *LSIFStoreIDsWithMetaFunc) nextHook() func(context.Context, []int) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFStoreIDsWithMetaFunc) appendCall(r0 LSIFStoreIDsWithMetaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LSIFStoreIDsWithMetaFuncCall objects
// describing the invocations of this function.
func (f *LSIFStoreIDsWithMetaFunc) History() []LSIFStoreIDsWithMetaFuncCall {
	f.mutex.Lock()
	history := make([]LSIFStoreIDsWithMetaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFStoreIDsWithMetaFuncCall is an object that describes an invocation of
// method IDsWithMeta on an instance of MockLSIFStore.
type LSIFStoreIDsWithMetaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFStoreIDsWithMetaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFStoreIDsWithMetaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc describes the
// behavior when the InsertDefinitionsAndReferencesForDocument method of the
// parent MockLSIFStore instance is invoked.
type LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc struct {
	defaultHook func(context.Context, shared.ExportedUpload, string, int, func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) error
	hooks       []func(context.Context, shared.ExportedUpload, string, int, func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) error
	history     []LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall
	mutex       sync.Mutex
}

// InsertDefinitionsAndReferencesForDocument delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockLSIFStore) InsertDefinitionsAndReferencesForDocument(v0 context.Context, v1 shared.ExportedUpload, v2 string, v3 int, v4 func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) error {
	r0 := m.InsertDefinitionsAndReferencesForDocumentFunc.nextHook()(v0, v1, v2, v3, v4)
	m.InsertDefinitionsAndReferencesForDocumentFunc.appendCall(LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// InsertDefinitionsAndReferencesForDocument method of the parent
// MockLSIFStore instance is invoked and the hook queue is empty.
func (f *LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc) SetDefaultHook(hook func(context.Context, shared.ExportedUpload, string, int, func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertDefinitionsAndReferencesForDocument method of the parent
// MockLSIFStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc) PushHook(hook func(context.Context, shared.ExportedUpload, string, int, func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.ExportedUpload, string, int, func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.ExportedUpload, string, int, func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) error {
		return r0
	})
}

func (f *LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc) nextHook() func(context.Context, shared.ExportedUpload, string, int, func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc) appendCall(r0 LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall objects
// describing the invocations of this function.
func (f *LSIFStoreInsertDefinitionsAndReferencesForDocumentFunc) History() []LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall {
	f.mutex.Lock()
	history := make([]LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall is an object
// that describes an invocation of method
// InsertDefinitionsAndReferencesForDocument on an instance of
// MockLSIFStore.
type LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.ExportedUpload
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 func(ctx context.Context, upload shared.ExportedUpload, rankingBatchSize int, rankingGraphKey string, path string, document *scip.Document) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFStoreInsertDefinitionsAndReferencesForDocumentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// LSIFStoreInsertMetadataFunc describes the behavior when the
// InsertMetadata method of the parent MockLSIFStore instance is invoked.
type LSIFStoreInsertMetadataFunc struct {
	defaultHook func(context.Context, int, lsifstore.ProcessedMetadata) error
	hooks       []func(context.Context, int, lsifstore.ProcessedMetadata) error
	history     []LSIFStoreInsertMetadataFuncCall
	mutex       sync.Mutex
}

// InsertMetadata delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLSIFStore) InsertMetadata(v0 context.Context, v1 int, v2 lsifstore.ProcessedMetadata) error {
	r0 := m.InsertMetadataFunc.nextHook()(v0, v1, v2)
	m.InsertMetadataFunc.appendCall(LSIFStoreInsertMetadataFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the InsertMetadata
// method of the parent MockLSIFStore instance is invoked and the hook queue
// is empty.
func (f *LSIFStoreInsertMetadataFunc) SetDefaultHook(hook func(context.Context, int, lsifstore.ProcessedMetadata) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertMetadata method of the parent MockLSIFStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LSIFStoreInsertMetadataFunc) PushHook(hook func(context.Context, int, lsifstore.ProcessedMetadata) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFStoreInsertMetadataFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, lsifstore.ProcessedMetadata) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFStoreInsertMetadataFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, lsifstore.ProcessedMetadata) error {
		return r0
	})
}

func (f *LSIFStoreInsertMetadataFunc) nextHook() func(context.Context, int, lsifstore.ProcessedMetadata) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFStoreInsertMetadataFunc) appendCall(r0 LSIFStoreInsertMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LSIFStoreInsertMetadataFuncCall objects
// describing the invocations of this function.
func (f *LSIFStoreInsertMetadataFunc) History() []LSIFStoreInsertMetadataFuncCall {
	f.mutex.Lock()
	history := make([]LSIFStoreInsertMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFStoreInsertMetadataFuncCall is an object that describes an invocation
// of method InsertMetadata on an instance of MockLSIFStore.
type LSIFStoreInsertMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 lsifstore.ProcessedMetadata
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFStoreInsertMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFStoreInsertMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// LSIFStoreNewSCIPWriterFunc describes the behavior when the NewSCIPWriter
// method of the parent MockLSIFStore instance is invoked.
type LSIFStoreNewSCIPWriterFunc struct {
	defaultHook func(context.Context, int) (lsifstore.SCIPWriter, error)
	hooks       []func(context.Context, int) (lsifstore.SCIPWriter, error)
	history     []LSIFStoreNewSCIPWriterFuncCall
	mutex       sync.Mutex
}

// NewSCIPWriter delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLSIFStore) NewSCIPWriter(v0 context.Context, v1 int) (lsifstore.SCIPWriter, error) {
	r0, r1 := m.NewSCIPWriterFunc.nextHook()(v0, v1)
	m.NewSCIPWriterFunc.appendCall(LSIFStoreNewSCIPWriterFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NewSCIPWriter method
// of the parent MockLSIFStore instance is invoked and the hook queue is
// empty.
func (f *LSIFStoreNewSCIPWriterFunc) SetDefaultHook(hook func(context.Context, int) (lsifstore.SCIPWriter, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewSCIPWriter method of the parent MockLSIFStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LSIFStoreNewSCIPWriterFunc) PushHook(hook func(context.Context, int) (lsifstore.SCIPWriter, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFStoreNewSCIPWriterFunc) SetDefaultReturn(r0 lsifstore.SCIPWriter, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (lsifstore.SCIPWriter, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFStoreNewSCIPWriterFunc) PushReturn(r0 lsifstore.SCIPWriter, r1 error) {
	f.PushHook(func(context.Context, int) (lsifstore.SCIPWriter, error) {
		return r0, r1
	})
}

func (f *LSIFStoreNewSCIPWriterFunc) nextHook() func(context.Context, int) (lsifstore.SCIPWriter, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFStoreNewSCIPWriterFunc) appendCall(r0 LSIFStoreNewSCIPWriterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LSIFStoreNewSCIPWriterFuncCall objects
// describing the invocations of this function.
func (f *LSIFStoreNewSCIPWriterFunc) History() []LSIFStoreNewSCIPWriterFuncCall {
	f.mutex.Lock()
	history := make([]LSIFStoreNewSCIPWriterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFStoreNewSCIPWriterFuncCall is an object that describes an invocation
// of method NewSCIPWriter on an instance of MockLSIFStore.
type LSIFStoreNewSCIPWriterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 lsifstore.SCIPWriter
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFStoreNewSCIPWriterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFStoreNewSCIPWriterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LSIFStoreReconcileCandidatesFunc describes the behavior when the
// ReconcileCandidates method of the parent MockLSIFStore instance is
// invoked.
type LSIFStoreReconcileCandidatesFunc struct {
	defaultHook func(context.Context, int) ([]int, error)
	hooks       []func(context.Context, int) ([]int, error)
	history     []LSIFStoreReconcileCandidatesFuncCall
	mutex       sync.Mutex
}

// ReconcileCandidates delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLSIFStore) ReconcileCandidates(v0 context.Context, v1 int) ([]int, error) {
	r0, r1 := m.ReconcileCandidatesFunc.nextHook()(v0, v1)
	m.ReconcileCandidatesFunc.appendCall(LSIFStoreReconcileCandidatesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReconcileCandidates
// method of the parent MockLSIFStore instance is invoked and the hook queue
// is empty.
func (f *LSIFStoreReconcileCandidatesFunc) SetDefaultHook(hook func(context.Context, int) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReconcileCandidates method of the parent MockLSIFStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LSIFStoreReconcileCandidatesFunc) PushHook(hook func(context.Context, int) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFStoreReconcileCandidatesFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFStoreReconcileCandidatesFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, int) ([]int, error) {
		return r0, r1
	})
}

func (f *LSIFStoreReconcileCandidatesFunc) nextHook() func(context.Context, int) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFStoreReconcileCandidatesFunc) appendCall(r0 LSIFStoreReconcileCandidatesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LSIFStoreReconcileCandidatesFuncCall
// objects describing the invocations of this function.
func (f *LSIFStoreReconcileCandidatesFunc) History() []LSIFStoreReconcileCandidatesFuncCall {
	f.mutex.Lock()
	history := make([]LSIFStoreReconcileCandidatesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFStoreReconcileCandidatesFuncCall is an object that describes an
// invocation of method ReconcileCandidates on an instance of MockLSIFStore.
type LSIFStoreReconcileCandidatesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFStoreReconcileCandidatesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFStoreReconcileCandidatesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LSIFStoreReconcileCandidatesWithTimeFunc describes the behavior when the
// ReconcileCandidatesWithTime method of the parent MockLSIFStore instance
// is invoked.
type LSIFStoreReconcileCandidatesWithTimeFunc struct {
	defaultHook func(context.Context, int, time.Time) ([]int, error)
	hooks       []func(context.Context, int, time.Time) ([]int, error)
	history     []LSIFStoreReconcileCandidatesWithTimeFuncCall
	mutex       sync.Mutex
}

// ReconcileCandidatesWithTime delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockLSIFStore) ReconcileCandidatesWithTime(v0 context.Context, v1 int, v2 time.Time) ([]int, error) {
	r0, r1 := m.ReconcileCandidatesWithTimeFunc.nextHook()(v0, v1, v2)
	m.ReconcileCandidatesWithTimeFunc.appendCall(LSIFStoreReconcileCandidatesWithTimeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ReconcileCandidatesWithTime method of the parent MockLSIFStore instance
// is invoked and the hook queue is empty.
func (f *LSIFStoreReconcileCandidatesWithTimeFunc) SetDefaultHook(hook func(context.Context, int, time.Time) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReconcileCandidatesWithTime method of the parent MockLSIFStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *LSIFStoreReconcileCandidatesWithTimeFunc) PushHook(hook func(context.Context, int, time.Time) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFStoreReconcileCandidatesWithTimeFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, int, time.Time) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFStoreReconcileCandidatesWithTimeFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, int, time.Time) ([]int, error) {
		return r0, r1
	})
}

func (f *LSIFStoreReconcileCandidatesWithTimeFunc) nextHook() func(context.Context, int, time.Time) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFStoreReconcileCandidatesWithTimeFunc) appendCall(r0 LSIFStoreReconcileCandidatesWithTimeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// LSIFStoreReconcileCandidatesWithTimeFuncCall objects describing the
// invocations of this function.
func (f *LSIFStoreReconcileCandidatesWithTimeFunc) History() []LSIFStoreReconcileCandidatesWithTimeFuncCall {
	f.mutex.Lock()
	history := make([]LSIFStoreReconcileCandidatesWithTimeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFStoreReconcileCandidatesWithTimeFuncCall is an object that describes
// an invocation of method ReconcileCandidatesWithTime on an instance of
// MockLSIFStore.
type LSIFStoreReconcileCandidatesWithTimeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFStoreReconcileCandidatesWithTimeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFStoreReconcileCandidatesWithTimeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LSIFStoreWithTransactionFunc describes the behavior when the
// WithTransaction method of the parent MockLSIFStore instance is invoked.
type LSIFStoreWithTransactionFunc struct {
	defaultHook func(context.Context, func(s lsifstore.Store) error) error
	hooks       []func(context.Context, func(s lsifstore.Store) error) error
	history     []LSIFStoreWithTransactionFuncCall
	mutex       sync.Mutex
}

// WithTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLSIFStore) WithTransaction(v0 context.Context, v1 func(s lsifstore.Store) error) error {
	r0 := m.WithTransactionFunc.nextHook()(v0, v1)
	m.WithTransactionFunc.appendCall(LSIFStoreWithTransactionFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransaction
// method of the parent MockLSIFStore instance is invoked and the hook queue
// is empty.
func (f *LSIFStoreWithTransactionFunc) SetDefaultHook(hook func(context.Context, func(s lsifstore.Store) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransaction method of the parent MockLSIFStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LSIFStoreWithTransactionFunc) PushHook(hook func(context.Context, func(s lsifstore.Store) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LSIFStoreWithTransactionFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(s lsifstore.Store) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LSIFStoreWithTransactionFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(s lsifstore.Store) error) error {
		return r0
	})
}

func (f *LSIFStoreWithTransactionFunc) nextHook() func(context.Context, func(s lsifstore.Store) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LSIFStoreWithTransactionFunc) appendCall(r0 LSIFStoreWithTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LSIFStoreWithTransactionFuncCall objects
// describing the invocations of this function.
func (f *LSIFStoreWithTransactionFunc) History() []LSIFStoreWithTransactionFuncCall {
	f.mutex.Lock()
	history := make([]LSIFStoreWithTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LSIFStoreWithTransactionFuncCall is an object that describes an
// invocation of method WithTransaction on an instance of MockLSIFStore.
type LSIFStoreWithTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(s lsifstore.Store) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LSIFStoreWithTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LSIFStoreWithTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockWorkerStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/workerutil/dbworker/store)
// used for unit testing.
type MockWorkerStore[T workerutil.Record] struct {
	// AddExecutionLogEntryFunc is an instance of a mock function object
	// controlling the behavior of the method AddExecutionLogEntry.
	AddExecutionLogEntryFunc *WorkerStoreAddExecutionLogEntryFunc[T]
	// DequeueFunc is an instance of a mock function object controlling the
	// behavior of the method Dequeue.
	DequeueFunc *WorkerStoreDequeueFunc[T]
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *WorkerStoreHandleFunc[T]
	// HeartbeatFunc is an instance of a mock function object controlling
	// the behavior of the method Heartbeat.
	HeartbeatFunc *WorkerStoreHeartbeatFunc[T]
	// MarkCompleteFunc is an instance of a mock function object controlling
	// the behavior of the method MarkComplete.
	MarkCompleteFunc *WorkerStoreMarkCompleteFunc[T]
	// MarkErroredFunc is an instance of a mock function object controlling
	// the behavior of the method MarkErrored.
	MarkErroredFunc *WorkerStoreMarkErroredFunc[T]
	// MarkFailedFunc is an instance of a mock function object controlling
	// the behavior of the method MarkFailed.
	MarkFailedFunc *WorkerStoreMarkFailedFunc[T]
	// MaxDurationInQueueFunc is an instance of a mock function object
	// controlling the behavior of the method MaxDurationInQueue.
	MaxDurationInQueueFunc *WorkerStoreMaxDurationInQueueFunc[T]
	// QueuedCountFunc is an instance of a mock function object controlling
	// the behavior of the method QueuedCount.
	QueuedCountFunc *WorkerStoreQueuedCountFunc[T]
	// RequeueFunc is an instance of a mock function object controlling the
	// behavior of the method Requeue.
	RequeueFunc *WorkerStoreRequeueFunc[T]
	// ResetStalledFunc is an instance of a mock function object controlling
	// the behavior of the method ResetStalled.
	ResetStalledFunc *WorkerStoreResetStalledFunc[T]
	// UpdateExecutionLogEntryFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateExecutionLogEntry.
	UpdateExecutionLogEntryFunc *WorkerStoreUpdateExecutionLogEntryFunc[T]
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *WorkerStoreWithFunc[T]
}

// NewMockWorkerStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockWorkerStore[T workerutil.Record]() *MockWorkerStore[T] {
	return &MockWorkerStore[T]{
		AddExecutionLogEntryFunc: &WorkerStoreAddExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (r0 int, r1 error) {
				return
			},
		},
		DequeueFunc: &WorkerStoreDequeueFunc[T]{
			defaultHook: func(context.Context, string, []*sqlf.Query) (r0 T, r1 bool, r2 error) {
				return
			},
		},
		HandleFunc: &WorkerStoreHandleFunc[T]{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		HeartbeatFunc: &WorkerStoreHeartbeatFunc[T]{
			defaultHook: func(context.Context, []string, store1.HeartbeatOptions) (r0 []string, r1 []string, r2 error) {
				return
			},
		},
		MarkCompleteFunc: &WorkerStoreMarkCompleteFunc[T]{
			defaultHook: func(context.Context, int, store1.MarkFinalOptions) (r0 bool, r1 error) {
				return
			},
		},
		MarkErroredFunc: &WorkerStoreMarkErroredFunc[T]{
			defaultHook: func(context.Context, int, string, store1.MarkFinalOptions) (r0 bool, r1 error) {
				return
			},
		},
		MarkFailedFunc: &WorkerStoreMarkFailedFunc[T]{
			defaultHook: func(context.Context, int, string, store1.MarkFinalOptions) (r0 bool, r1 error) {
				return
			},
		},
		MaxDurationInQueueFunc: &WorkerStoreMaxDurationInQueueFunc[T]{
			defaultHook: func(context.Context) (r0 time.Duration, r1 error) {
				return
			},
		},
		QueuedCountFunc: &WorkerStoreQueuedCountFunc[T]{
			defaultHook: func(context.Context, bool) (r0 int, r1 error) {
				return
			},
		},
		RequeueFunc: &WorkerStoreRequeueFunc[T]{
			defaultHook: func(context.Context, int, time.Time) (r0 error) {
				return
			},
		},
		ResetStalledFunc: &WorkerStoreResetStalledFunc[T]{
			defaultHook: func(context.Context) (r0 map[int]time.Duration, r1 map[int]time.Duration, r2 error) {
				return
			},
		},
		UpdateExecutionLogEntryFunc: &WorkerStoreUpdateExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (r0 error) {
				return
			},
		},
		WithFunc: &WorkerStoreWithFunc[T]{
			defaultHook: func(basestore.ShareableStore) (r0 store1.Store[T]) {
				return
			},
		},
	}
}

// NewStrictMockWorkerStore creates a new mock of the Store interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockWorkerStore[T workerutil.Record]() *MockWorkerStore[T] {
	return &MockWorkerStore[T]{
		AddExecutionLogEntryFunc: &WorkerStoreAddExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (int, error) {
				panic("unexpected invocation of MockWorkerStore.AddExecutionLogEntry")
			},
		},
		DequeueFunc: &WorkerStoreDequeueFunc[T]{
			defaultHook: func(context.Context, string, []*sqlf.Query) (T, bool, error) {
				panic("unexpected invocation of MockWorkerStore.Dequeue")
			},
		},
		HandleFunc: &WorkerStoreHandleFunc[T]{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockWorkerStore.Handle")
			},
		},
		HeartbeatFunc: &WorkerStoreHeartbeatFunc[T]{
			defaultHook: func(context.Context, []string, store1.HeartbeatOptions) ([]string, []string, error) {
				panic("unexpected invocation of MockWorkerStore.Heartbeat")
			},
		},
		MarkCompleteFunc: &WorkerStoreMarkCompleteFunc[T]{
			defaultHook: func(context.Context, int, store1.MarkFinalOptions) (bool, error) {
				panic("unexpected invocation of MockWorkerStore.MarkComplete")
			},
		},
		MarkErroredFunc: &WorkerStoreMarkErroredFunc[T]{
			defaultHook: func(context.Context, int, string, store1.MarkFinalOptions) (bool, error) {
				panic("unexpected invocation of MockWorkerStore.MarkErrored")
			},
		},
		MarkFailedFunc: &WorkerStoreMarkFailedFunc[T]{
			defaultHook: func(context.Context, int, string, store1.MarkFinalOptions) (bool, error) {
				panic("unexpected invocation of MockWorkerStore.MarkFailed")
			},
		},
		MaxDurationInQueueFunc: &WorkerStoreMaxDurationInQueueFunc[T]{
			defaultHook: func(context.Context) (time.Duration, error) {
				panic("unexpected invocation of MockWorkerStore.MaxDurationInQueue")
			},
		},
		QueuedCountFunc: &WorkerStoreQueuedCountFunc[T]{
			defaultHook: func(context.Context, bool) (int, error) {
				panic("unexpected invocation of MockWorkerStore.QueuedCount")
			},
		},
		RequeueFunc: &WorkerStoreRequeueFunc[T]{
			defaultHook: func(context.Context, int, time.Time) error {
				panic("unexpected invocation of MockWorkerStore.Requeue")
			},
		},
		ResetStalledFunc: &WorkerStoreResetStalledFunc[T]{
			defaultHook: func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
				panic("unexpected invocation of MockWorkerStore.ResetStalled")
			},
		},
		UpdateExecutionLogEntryFunc: &WorkerStoreUpdateExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) error {
				panic("unexpected invocation of MockWorkerStore.UpdateExecutionLogEntry")
			},
		},
		WithFunc: &WorkerStoreWithFunc[T]{
			defaultHook: func(basestore.ShareableStore) store1.Store[T] {
				panic("unexpected invocation of MockWorkerStore.With")
			},
		},
	}
}

// NewMockWorkerStoreFrom creates a new mock of the MockWorkerStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockWorkerStoreFrom[T workerutil.Record](i store1.Store[T]) *MockWorkerStore[T] {
	return &MockWorkerStore[T]{
		AddExecutionLogEntryFunc: &WorkerStoreAddExecutionLogEntryFunc[T]{
			defaultHook: i.AddExecutionLogEntry,
		},
		DequeueFunc: &WorkerStoreDequeueFunc[T]{
			defaultHook: i.Dequeue,
		},
		HandleFunc: &WorkerStoreHandleFunc[T]{
			defaultHook: i.Handle,
		},
		HeartbeatFunc: &WorkerStoreHeartbeatFunc[T]{
			defaultHook: i.Heartbeat,
		},
		MarkCompleteFunc: &WorkerStoreMarkCompleteFunc[T]{
			defaultHook: i.MarkComplete,
		},
		MarkErroredFunc: &WorkerStoreMarkErroredFunc[T]{
			defaultHook: i.MarkErrored,
		},
		MarkFailedFunc: &WorkerStoreMarkFailedFunc[T]{
			defaultHook: i.MarkFailed,
		},
		MaxDurationInQueueFunc: &WorkerStoreMaxDurationInQueueFunc[T]{
			defaultHook: i.MaxDurationInQueue,
		},
		QueuedCountFunc: &WorkerStoreQueuedCountFunc[T]{
			defaultHook: i.QueuedCount,
		},
		RequeueFunc: &WorkerStoreRequeueFunc[T]{
			defaultHook: i.Requeue,
		},
		ResetStalledFunc: &WorkerStoreResetStalledFunc[T]{
			defaultHook: i.ResetStalled,
		},
		UpdateExecutionLogEntryFunc: &WorkerStoreUpdateExecutionLogEntryFunc[T]{
			defaultHook: i.UpdateExecutionLogEntry,
		},
		WithFunc: &WorkerStoreWithFunc[T]{
			defaultHook: i.With,
		},
	}
}

// WorkerStoreAddExecutionLogEntryFunc describes the behavior when the
// AddExecutionLogEntry method of the parent MockWorkerStore instance is
// invoked.
type WorkerStoreAddExecutionLogEntryFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (int, error)
	hooks       []func(context.Context, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (int, error)
	history     []WorkerStoreAddExecutionLogEntryFuncCall[T]
	mutex       sync.Mutex
}

// AddExecutionLogEntry delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) AddExecutionLogEntry(v0 context.Context, v1 int, v2 executor.ExecutionLogEntry, v3 store1.ExecutionLogEntryOptions) (int, error) {
	r0, r1 := m.AddExecutionLogEntryFunc.nextHook()(v0, v1, v2, v3)
	m.AddExecutionLogEntryFunc.appendCall(WorkerStoreAddExecutionLogEntryFuncCall[T]{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddExecutionLogEntry
// method of the parent MockWorkerStore instance is invoked and the hook
// queue is empty.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) SetDefaultHook(hook func(context.Context, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddExecutionLogEntry method of the parent MockWorkerStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) PushHook(hook func(context.Context, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (int, error) {
		return r0, r1
	})
}

func (f *WorkerStoreAddExecutionLogEntryFunc[T]) nextHook() func(context.Context, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreAddExecutionLogEntryFunc[T]) appendCall(r0 WorkerStoreAddExecutionLogEntryFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreAddExecutionLogEntryFuncCall
// objects describing the invocations of this function.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) History() []WorkerStoreAddExecutionLogEntryFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreAddExecutionLogEntryFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreAddExecutionLogEntryFuncCall is an object that describes an
// invocation of method AddExecutionLogEntry on an instance of
// MockWorkerStore.
type WorkerStoreAddExecutionLogEntryFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 executor.ExecutionLogEntry
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 store1.ExecutionLogEntryOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreAddExecutionLogEntryFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreAddExecutionLogEntryFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreDequeueFunc describes the behavior when the Dequeue method of
// the parent MockWorkerStore instance is invoked.
type WorkerStoreDequeueFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, string, []*sqlf.Query) (T, bool, error)
	hooks       []func(context.Context, string, []*sqlf.Query) (T, bool, error)
	history     []WorkerStoreDequeueFuncCall[T]
	mutex       sync.Mutex
}

// Dequeue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) Dequeue(v0 context.Context, v1 string, v2 []*sqlf.Query) (T, bool, error) {
	r0, r1, r2 := m.DequeueFunc.nextHook()(v0, v1, v2)
	m.DequeueFunc.appendCall(WorkerStoreDequeueFuncCall[T]{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Dequeue method of
// the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreDequeueFunc[T]) SetDefaultHook(hook func(context.Context, string, []*sqlf.Query) (T, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Dequeue method of the parent MockWorkerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreDequeueFunc[T]) PushHook(hook func(context.Context, string, []*sqlf.Query) (T, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreDequeueFunc[T]) SetDefaultReturn(r0 T, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, []*sqlf.Query) (T, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreDequeueFunc[T]) PushReturn(r0 T, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, []*sqlf.Query) (T, bool, error) {
		return r0, r1, r2
	})
}

func (f *WorkerStoreDequeueFunc[T]) nextHook() func(context.Context, string, []*sqlf.Query) (T, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreDequeueFunc[T]) appendCall(r0 WorkerStoreDequeueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreDequeueFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreDequeueFunc[T]) History() []WorkerStoreDequeueFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreDequeueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreDequeueFuncCall is an object that describes an invocation of
// method Dequeue on an instance of MockWorkerStore.
type WorkerStoreDequeueFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 T
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreDequeueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreDequeueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// WorkerStoreHandleFunc describes the behavior when the Handle method of
// the parent MockWorkerStore instance is invoked.
type WorkerStoreHandleFunc[T workerutil.Record] struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []WorkerStoreHandleFuncCall[T]
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(WorkerStoreHandleFuncCall[T]{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockWorkerStore instance is invoked and the hook queue is empty.
func (f *WorkerStoreHandleFunc[T]) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockWorkerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreHandleFunc[T]) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreHandleFunc[T]) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreHandleFunc[T]) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *WorkerStoreHandleFunc[T]) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreHandleFunc[T]) appendCall(r0 WorkerStoreHandleFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreHandleFunc[T]) History() []WorkerStoreHandleFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreHandleFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockWorkerStore.
type WorkerStoreHandleFuncCall[T workerutil.Record] struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreHandleFuncCall[T]) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreHandleFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WorkerStoreHeartbeatFunc describes the behavior when the Heartbeat method
// of the parent MockWorkerStore instance is invoked.
type WorkerStoreHeartbeatFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, []string, store1.HeartbeatOptions) ([]string, []string, error)
	hooks       []func(context.Context, []string, store1.HeartbeatOptions) ([]string, []string, error)
	history     []WorkerStoreHeartbeatFuncCall[T]
	mutex       sync.Mutex
}

// Heartbeat delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) Heartbeat(v0 context.Context, v1 []string, v2 store1.HeartbeatOptions) ([]string, []string, error) {
	r0, r1, r2 := m.HeartbeatFunc.nextHook()(v0, v1, v2)
	m.HeartbeatFunc.appendCall(WorkerStoreHeartbeatFuncCall[T]{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Heartbeat method of
// the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreHeartbeatFunc[T]) SetDefaultHook(hook func(context.Context, []string, store1.HeartbeatOptions) ([]string, []string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Heartbeat method of the parent MockWorkerStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreHeartbeatFunc[T]) PushHook(hook func(context.Context, []string, store1.HeartbeatOptions) ([]string, []string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreHeartbeatFunc[T]) SetDefaultReturn(r0 []string, r1 []string, r2 error) {
	f.SetDefaultHook(func(context.Context, []string, store1.HeartbeatOptions) ([]string, []string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreHeartbeatFunc[T]) PushReturn(r0 []string, r1 []string, r2 error) {
	f.PushHook(func(context.Context, []string, store1.HeartbeatOptions) ([]string, []string, error) {
		return r0, r1, r2
	})
}

func (f *WorkerStoreHeartbeatFunc[T]) nextHook() func(context.Context, []string, store1.HeartbeatOptions) ([]string, []string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreHeartbeatFunc[T]) appendCall(r0 WorkerStoreHeartbeatFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreHeartbeatFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreHeartbeatFunc[T]) History() []WorkerStoreHeartbeatFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreHeartbeatFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreHeartbeatFuncCall is an object that describes an invocation of
// method Heartbeat on an instance of MockWorkerStore.
type WorkerStoreHeartbeatFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 store1.HeartbeatOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreHeartbeatFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreHeartbeatFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// WorkerStoreMarkCompleteFunc describes the behavior when the MarkComplete
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreMarkCompleteFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, store1.MarkFinalOptions) (bool, error)
	hooks       []func(context.Context, int, store1.MarkFinalOptions) (bool, error)
	history     []WorkerStoreMarkCompleteFuncCall[T]
	mutex       sync.Mutex
}

// MarkComplete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) MarkComplete(v0 context.Context, v1 int, v2 store1.MarkFinalOptions) (bool, error) {
	r0, r1 := m.MarkCompleteFunc.nextHook()(v0, v1, v2)
	m.MarkCompleteFunc.appendCall(WorkerStoreMarkCompleteFuncCall[T]{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkComplete method
// of the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreMarkCompleteFunc[T]) SetDefaultHook(hook func(context.Context, int, store1.MarkFinalOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkComplete method of the parent MockWorkerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerStoreMarkCompleteFunc[T]) PushHook(hook func(context.Context, int, store1.MarkFinalOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreMarkCompleteFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, store1.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreMarkCompleteFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, store1.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

func (f *WorkerStoreMarkCompleteFunc[T]) nextHook() func(context.Context, int, store1.MarkFinalOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreMarkCompleteFunc[T]) appendCall(r0 WorkerStoreMarkCompleteFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreMarkCompleteFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreMarkCompleteFunc[T]) History() []WorkerStoreMarkCompleteFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreMarkCompleteFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreMarkCompleteFuncCall is an object that describes an invocation
// of method MarkComplete on an instance of MockWorkerStore.
type WorkerStoreMarkCompleteFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 store1.MarkFinalOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreMarkCompleteFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreMarkCompleteFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreMarkErroredFunc describes the behavior when the MarkErrored
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreMarkErroredFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, string, store1.MarkFinalOptions) (bool, error)
	hooks       []func(context.Context, int, string, store1.MarkFinalOptions) (bool, error)
	history     []WorkerStoreMarkErroredFuncCall[T]
	mutex       sync.Mutex
}

// MarkErrored delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) MarkErrored(v0 context.Context, v1 int, v2 string, v3 store1.MarkFinalOptions) (bool, error) {
	r0, r1 := m.MarkErroredFunc.nextHook()(v0, v1, v2, v3)
	m.MarkErroredFunc.appendCall(WorkerStoreMarkErroredFuncCall[T]{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkErrored method
// of the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreMarkErroredFunc[T]) SetDefaultHook(hook func(context.Context, int, string, store1.MarkFinalOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkErrored method of the parent MockWorkerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerStoreMarkErroredFunc[T]) PushHook(hook func(context.Context, int, string, store1.MarkFinalOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreMarkErroredFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, store1.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreMarkErroredFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string, store1.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

func (f *WorkerStoreMarkErroredFunc[T]) nextHook() func(context.Context, int, string, store1.MarkFinalOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreMarkErroredFunc[T]) appendCall(r0 WorkerStoreMarkErroredFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreMarkErroredFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreMarkErroredFunc[T]) History() []WorkerStoreMarkErroredFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreMarkErroredFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreMarkErroredFuncCall is an object that describes an invocation
// of method MarkErrored on an instance of MockWorkerStore.
type WorkerStoreMarkErroredFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 store1.MarkFinalOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreMarkErroredFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreMarkErroredFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreMarkFailedFunc describes the behavior when the MarkFailed
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreMarkFailedFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, string, store1.MarkFinalOptions) (bool, error)
	hooks       []func(context.Context, int, string, store1.MarkFinalOptions) (bool, error)
	history     []WorkerStoreMarkFailedFuncCall[T]
	mutex       sync.Mutex
}

// MarkFailed delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) MarkFailed(v0 context.Context, v1 int, v2 string, v3 store1.MarkFinalOptions) (bool, error) {
	r0, r1 := m.MarkFailedFunc.nextHook()(v0, v1, v2, v3)
	m.MarkFailedFunc.appendCall(WorkerStoreMarkFailedFuncCall[T]{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkFailed method of
// the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreMarkFailedFunc[T]) SetDefaultHook(hook func(context.Context, int, string, store1.MarkFinalOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkFailed method of the parent MockWorkerStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreMarkFailedFunc[T]) PushHook(hook func(context.Context, int, string, store1.MarkFinalOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreMarkFailedFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, store1.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreMarkFailedFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string, store1.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

func (f *WorkerStoreMarkFailedFunc[T]) nextHook() func(context.Context, int, string, store1.MarkFinalOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreMarkFailedFunc[T]) appendCall(r0 WorkerStoreMarkFailedFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreMarkFailedFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreMarkFailedFunc[T]) History() []WorkerStoreMarkFailedFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreMarkFailedFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreMarkFailedFuncCall is an object that describes an invocation
// of method MarkFailed on an instance of MockWorkerStore.
type WorkerStoreMarkFailedFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 store1.MarkFinalOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreMarkFailedFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreMarkFailedFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreMaxDurationInQueueFunc describes the behavior when the
// MaxDurationInQueue method of the parent MockWorkerStore instance is
// invoked.
type WorkerStoreMaxDurationInQueueFunc[T workerutil.Record] struct {
	defaultHook func(context.Context) (time.Duration, error)
	hooks       []func(context.Context) (time.Duration, error)
	history     []WorkerStoreMaxDurationInQueueFuncCall[T]
	mutex       sync.Mutex
}

// MaxDurationInQueue delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) MaxDurationInQueue(v0 context.Context) (time.Duration, error) {
	r0, r1 := m.MaxDurationInQueueFunc.nextHook()(v0)
	m.MaxDurationInQueueFunc.appendCall(WorkerStoreMaxDurationInQueueFuncCall[T]{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MaxDurationInQueue
// method of the parent MockWorkerStore instance is invoked and the hook
// queue is empty.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) SetDefaultHook(hook func(context.Context) (time.Duration, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MaxDurationInQueue method of the parent MockWorkerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) PushHook(hook func(context.Context) (time.Duration, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) SetDefaultReturn(r0 time.Duration, r1 error) {
	f.SetDefaultHook(func(context.Context) (time.Duration, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) PushReturn(r0 time.Duration, r1 error) {
	f.PushHook(func(context.Context) (time.Duration, error) {
		return r0, r1
	})
}

func (f *WorkerStoreMaxDurationInQueueFunc[T]) nextHook() func(context.Context) (time.Duration, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreMaxDurationInQueueFunc[T]) appendCall(r0 WorkerStoreMaxDurationInQueueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreMaxDurationInQueueFuncCall
// objects describing the invocations of this function.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) History() []WorkerStoreMaxDurationInQueueFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreMaxDurationInQueueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreMaxDurationInQueueFuncCall is an object that describes an
// invocation of method MaxDurationInQueue on an instance of
// MockWorkerStore.
type WorkerStoreMaxDurationInQueueFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreMaxDurationInQueueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreMaxDurationInQueueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreQueuedCountFunc describes the behavior when the QueuedCount
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreQueuedCountFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, bool) (int, error)
	hooks       []func(context.Context, bool) (int, error)
	history     []WorkerStoreQueuedCountFuncCall[T]
	mutex       sync.Mutex
}

// QueuedCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) QueuedCount(v0 context.Context, v1 bool) (int, error) {
	r0, r1 := m.QueuedCountFunc.nextHook()(v0, v1)
	m.QueuedCountFunc.appendCall(WorkerStoreQueuedCountFuncCall[T]{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueuedCount method
// of the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreQueuedCountFunc[T]) SetDefaultHook(hook func(context.Context, bool) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueuedCount method of the parent MockWorkerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerStoreQueuedCountFunc[T]) PushHook(hook func(context.Context, bool) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreQueuedCountFunc[T]) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, bool) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreQueuedCountFunc[T]) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, bool) (int, error) {
		return r0, r1
	})
}

func (f *WorkerStoreQueuedCountFunc[T]) nextHook() func(context.Context, bool) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreQueuedCountFunc[T]) appendCall(r0 WorkerStoreQueuedCountFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreQueuedCountFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreQueuedCountFunc[T]) History() []WorkerStoreQueuedCountFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreQueuedCountFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreQueuedCountFuncCall is an object that describes an invocation
// of method QueuedCount on an instance of MockWorkerStore.
type WorkerStoreQueuedCountFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreQueuedCountFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreQueuedCountFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreRequeueFunc describes the behavior when the Requeue method of
// the parent MockWorkerStore instance is invoked.
type WorkerStoreRequeueFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, time.Time) error
	hooks       []func(context.Context, int, time.Time) error
	history     []WorkerStoreRequeueFuncCall[T]
	mutex       sync.Mutex
}

// Requeue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) Requeue(v0 context.Context, v1 int, v2 time.Time) error {
	r0 := m.RequeueFunc.nextHook()(v0, v1, v2)
	m.RequeueFunc.appendCall(WorkerStoreRequeueFuncCall[T]{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Requeue method of
// the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreRequeueFunc[T]) SetDefaultHook(hook func(context.Context, int, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Requeue method of the parent MockWorkerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreRequeueFunc[T]) PushHook(hook func(context.Context, int, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreRequeueFunc[T]) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreRequeueFunc[T]) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, time.Time) error {
		return r0
	})
}

func (f *WorkerStoreRequeueFunc[T]) nextHook() func(context.Context, int, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreRequeueFunc[T]) appendCall(r0 WorkerStoreRequeueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreRequeueFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreRequeueFunc[T]) History() []WorkerStoreRequeueFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreRequeueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreRequeueFuncCall is an object that describes an invocation of
// method Requeue on an instance of MockWorkerStore.
type WorkerStoreRequeueFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreRequeueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreRequeueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WorkerStoreResetStalledFunc describes the behavior when the ResetStalled
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreResetStalledFunc[T workerutil.Record] struct {
	defaultHook func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)
	hooks       []func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)
	history     []WorkerStoreResetStalledFuncCall[T]
	mutex       sync.Mutex
}

// ResetStalled delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) ResetStalled(v0 context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
	r0, r1, r2 := m.ResetStalledFunc.nextHook()(v0)
	m.ResetStalledFunc.appendCall(WorkerStoreResetStalledFuncCall[T]{v0, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ResetStalled method
// of the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreResetStalledFunc[T]) SetDefaultHook(hook func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResetStalled method of the parent MockWorkerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerStoreResetStalledFunc[T]) PushHook(hook func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreResetStalledFunc[T]) SetDefaultReturn(r0 map[int]time.Duration, r1 map[int]time.Duration, r2 error) {
	f.SetDefaultHook(func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreResetStalledFunc[T]) PushReturn(r0 map[int]time.Duration, r1 map[int]time.Duration, r2 error) {
	f.PushHook(func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
		return r0, r1, r2
	})
}

func (f *WorkerStoreResetStalledFunc[T]) nextHook() func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreResetStalledFunc[T]) appendCall(r0 WorkerStoreResetStalledFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreResetStalledFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreResetStalledFunc[T]) History() []WorkerStoreResetStalledFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreResetStalledFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreResetStalledFuncCall is an object that describes an invocation
// of method ResetStalled on an instance of MockWorkerStore.
type WorkerStoreResetStalledFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int]time.Duration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 map[int]time.Duration
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreResetStalledFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreResetStalledFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// WorkerStoreUpdateExecutionLogEntryFunc describes the behavior when the
// UpdateExecutionLogEntry method of the parent MockWorkerStore instance is
// invoked.
type WorkerStoreUpdateExecutionLogEntryFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) error
	hooks       []func(context.Context, int, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) error
	history     []WorkerStoreUpdateExecutionLogEntryFuncCall[T]
	mutex       sync.Mutex
}

// UpdateExecutionLogEntry delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) UpdateExecutionLogEntry(v0 context.Context, v1 int, v2 int, v3 executor.ExecutionLogEntry, v4 store1.ExecutionLogEntryOptions) error {
	r0 := m.UpdateExecutionLogEntryFunc.nextHook()(v0, v1, v2, v3, v4)
	m.UpdateExecutionLogEntryFunc.appendCall(WorkerStoreUpdateExecutionLogEntryFuncCall[T]{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateExecutionLogEntry method of the parent MockWorkerStore instance is
// invoked and the hook queue is empty.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) SetDefaultHook(hook func(context.Context, int, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateExecutionLogEntry method of the parent MockWorkerStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) PushHook(hook func(context.Context, int, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) error {
		return r0
	})
}

func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) nextHook() func(context.Context, int, int, executor.ExecutionLogEntry, store1.ExecutionLogEntryOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) appendCall(r0 WorkerStoreUpdateExecutionLogEntryFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreUpdateExecutionLogEntryFuncCall
// objects describing the invocations of this function.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) History() []WorkerStoreUpdateExecutionLogEntryFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreUpdateExecutionLogEntryFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreUpdateExecutionLogEntryFuncCall is an object that describes an
// invocation of method UpdateExecutionLogEntry on an instance of
// MockWorkerStore.
type WorkerStoreUpdateExecutionLogEntryFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 executor.ExecutionLogEntry
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 store1.ExecutionLogEntryOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreUpdateExecutionLogEntryFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreUpdateExecutionLogEntryFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WorkerStoreWithFunc describes the behavior when the With method of the
// parent MockWorkerStore instance is invoked.
type WorkerStoreWithFunc[T workerutil.Record] struct {
	defaultHook func(basestore.ShareableStore) store1.Store[T]
	hooks       []func(basestore.ShareableStore) store1.Store[T]
	history     []WorkerStoreWithFuncCall[T]
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) With(v0 basestore.ShareableStore) store1.Store[T] {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(WorkerStoreWithFuncCall[T]{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockWorkerStore instance is invoked and the hook queue is empty.
func (f *WorkerStoreWithFunc[T]) SetDefaultHook(hook func(basestore.ShareableStore) store1.Store[T]) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockWorkerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreWithFunc[T]) PushHook(hook func(basestore.ShareableStore) store1.Store[T]) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreWithFunc[T]) SetDefaultReturn(r0 store1.Store[T]) {
	f.SetDefaultHook(func(basestore.ShareableStore) store1.Store[T] {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreWithFunc[T]) PushReturn(r0 store1.Store[T]) {
	f.PushHook(func(basestore.ShareableStore) store1.Store[T] {
		return r0
	})
}

func (f *WorkerStoreWithFunc[T]) nextHook() func(basestore.ShareableStore) store1.Store[T] {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreWithFunc[T]) appendCall(r0 WorkerStoreWithFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreWithFuncCall objects describing
// the invocations of this function.
func (f *WorkerStoreWithFunc[T]) History() []WorkerStoreWithFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreWithFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockWorkerStore.
type WorkerStoreWithFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 store1.Store[T]
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreWithFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreWithFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}
