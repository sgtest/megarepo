// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package inference

import (
	"context"
	"sync"
)

// MockGitserverClientWrapper is a mock implementation of the
// GitserverClientWrapper interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/autoindex/inference)
// used for unit testing.
type MockGitserverClientWrapper struct {
	// FileExistsFunc is an instance of a mock function object controlling
	// the behavior of the method FileExists.
	FileExistsFunc *GitserverClientWrapperFileExistsFunc
	// RawContentsFunc is an instance of a mock function object controlling
	// the behavior of the method RawContents.
	RawContentsFunc *GitserverClientWrapperRawContentsFunc
}

// NewMockGitserverClientWrapper creates a new mock of the
// GitserverClientWrapper interface. All methods return zero values for all
// results, unless overwritten.
func NewMockGitserverClientWrapper() *MockGitserverClientWrapper {
	return &MockGitserverClientWrapper{
		FileExistsFunc: &GitserverClientWrapperFileExistsFunc{
			defaultHook: func(context.Context, string) (bool, error) {
				return false, nil
			},
		},
		RawContentsFunc: &GitserverClientWrapperRawContentsFunc{
			defaultHook: func(context.Context, string) ([]byte, error) {
				return nil, nil
			},
		},
	}
}

// NewMockGitserverClientWrapperFrom creates a new mock of the
// MockGitserverClientWrapper interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitserverClientWrapperFrom(i GitserverClientWrapper) *MockGitserverClientWrapper {
	return &MockGitserverClientWrapper{
		FileExistsFunc: &GitserverClientWrapperFileExistsFunc{
			defaultHook: i.FileExists,
		},
		RawContentsFunc: &GitserverClientWrapperRawContentsFunc{
			defaultHook: i.RawContents,
		},
	}
}

// GitserverClientWrapperFileExistsFunc describes the behavior when the
// FileExists method of the parent MockGitserverClientWrapper instance is
// invoked.
type GitserverClientWrapperFileExistsFunc struct {
	defaultHook func(context.Context, string) (bool, error)
	hooks       []func(context.Context, string) (bool, error)
	history     []GitserverClientWrapperFileExistsFuncCall
	mutex       sync.Mutex
}

// FileExists delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClientWrapper) FileExists(v0 context.Context, v1 string) (bool, error) {
	r0, r1 := m.FileExistsFunc.nextHook()(v0, v1)
	m.FileExistsFunc.appendCall(GitserverClientWrapperFileExistsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FileExists method of
// the parent MockGitserverClientWrapper instance is invoked and the hook
// queue is empty.
func (f *GitserverClientWrapperFileExistsFunc) SetDefaultHook(hook func(context.Context, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FileExists method of the parent MockGitserverClientWrapper instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientWrapperFileExistsFunc) PushHook(hook func(context.Context, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GitserverClientWrapperFileExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GitserverClientWrapperFileExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, string) (bool, error) {
		return r0, r1
	})
}

func (f *GitserverClientWrapperFileExistsFunc) nextHook() func(context.Context, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientWrapperFileExistsFunc) appendCall(r0 GitserverClientWrapperFileExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientWrapperFileExistsFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientWrapperFileExistsFunc) History() []GitserverClientWrapperFileExistsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientWrapperFileExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientWrapperFileExistsFuncCall is an object that describes an
// invocation of method FileExists on an instance of
// MockGitserverClientWrapper.
type GitserverClientWrapperFileExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientWrapperFileExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientWrapperFileExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientWrapperRawContentsFunc describes the behavior when the
// RawContents method of the parent MockGitserverClientWrapper instance is
// invoked.
type GitserverClientWrapperRawContentsFunc struct {
	defaultHook func(context.Context, string) ([]byte, error)
	hooks       []func(context.Context, string) ([]byte, error)
	history     []GitserverClientWrapperRawContentsFuncCall
	mutex       sync.Mutex
}

// RawContents delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClientWrapper) RawContents(v0 context.Context, v1 string) ([]byte, error) {
	r0, r1 := m.RawContentsFunc.nextHook()(v0, v1)
	m.RawContentsFunc.appendCall(GitserverClientWrapperRawContentsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RawContents method
// of the parent MockGitserverClientWrapper instance is invoked and the hook
// queue is empty.
func (f *GitserverClientWrapperRawContentsFunc) SetDefaultHook(hook func(context.Context, string) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RawContents method of the parent MockGitserverClientWrapper instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientWrapperRawContentsFunc) PushHook(hook func(context.Context, string) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GitserverClientWrapperRawContentsFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GitserverClientWrapperRawContentsFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, string) ([]byte, error) {
		return r0, r1
	})
}

func (f *GitserverClientWrapperRawContentsFunc) nextHook() func(context.Context, string) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientWrapperRawContentsFunc) appendCall(r0 GitserverClientWrapperRawContentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientWrapperRawContentsFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientWrapperRawContentsFunc) History() []GitserverClientWrapperRawContentsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientWrapperRawContentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientWrapperRawContentsFuncCall is an object that describes an
// invocation of method RawContents on an instance of
// MockGitserverClientWrapper.
type GitserverClientWrapperRawContentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientWrapperRawContentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientWrapperRawContentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
