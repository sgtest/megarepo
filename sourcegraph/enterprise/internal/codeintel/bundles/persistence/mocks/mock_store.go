// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	persistence "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/persistence"
	types "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/types"
	"sync"
)

// MockStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/persistence)
// used for unit testing.
type MockStore struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *StoreCloseFunc
	// CreateTablesFunc is an instance of a mock function object controlling
	// the behavior of the method CreateTables.
	CreateTablesFunc *StoreCreateTablesFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *StoreDoneFunc
	// PathsWithPrefixFunc is an instance of a mock function object
	// controlling the behavior of the method PathsWithPrefix.
	PathsWithPrefixFunc *StorePathsWithPrefixFunc
	// ReadDefinitionsFunc is an instance of a mock function object
	// controlling the behavior of the method ReadDefinitions.
	ReadDefinitionsFunc *StoreReadDefinitionsFunc
	// ReadDocumentFunc is an instance of a mock function object controlling
	// the behavior of the method ReadDocument.
	ReadDocumentFunc *StoreReadDocumentFunc
	// ReadMetaFunc is an instance of a mock function object controlling the
	// behavior of the method ReadMeta.
	ReadMetaFunc *StoreReadMetaFunc
	// ReadReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method ReadReferences.
	ReadReferencesFunc *StoreReadReferencesFunc
	// ReadResultChunkFunc is an instance of a mock function object
	// controlling the behavior of the method ReadResultChunk.
	ReadResultChunkFunc *StoreReadResultChunkFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *StoreTransactFunc
	// WriteDefinitionsFunc is an instance of a mock function object
	// controlling the behavior of the method WriteDefinitions.
	WriteDefinitionsFunc *StoreWriteDefinitionsFunc
	// WriteDocumentsFunc is an instance of a mock function object
	// controlling the behavior of the method WriteDocuments.
	WriteDocumentsFunc *StoreWriteDocumentsFunc
	// WriteMetaFunc is an instance of a mock function object controlling
	// the behavior of the method WriteMeta.
	WriteMetaFunc *StoreWriteMetaFunc
	// WriteReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method WriteReferences.
	WriteReferencesFunc *StoreWriteReferencesFunc
	// WriteResultChunksFunc is an instance of a mock function object
	// controlling the behavior of the method WriteResultChunks.
	WriteResultChunksFunc *StoreWriteResultChunksFunc
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore() *MockStore {
	return &MockStore{
		CloseFunc: &StoreCloseFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		CreateTablesFunc: &StoreCreateTablesFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		PathsWithPrefixFunc: &StorePathsWithPrefixFunc{
			defaultHook: func(context.Context, string) ([]string, error) {
				return nil, nil
			},
		},
		ReadDefinitionsFunc: &StoreReadDefinitionsFunc{
			defaultHook: func(context.Context, string, string, int, int) ([]types.Location, int, error) {
				return nil, 0, nil
			},
		},
		ReadDocumentFunc: &StoreReadDocumentFunc{
			defaultHook: func(context.Context, string) (types.DocumentData, bool, error) {
				return types.DocumentData{}, false, nil
			},
		},
		ReadMetaFunc: &StoreReadMetaFunc{
			defaultHook: func(context.Context) (types.MetaData, error) {
				return types.MetaData{}, nil
			},
		},
		ReadReferencesFunc: &StoreReadReferencesFunc{
			defaultHook: func(context.Context, string, string, int, int) ([]types.Location, int, error) {
				return nil, 0, nil
			},
		},
		ReadResultChunkFunc: &StoreReadResultChunkFunc{
			defaultHook: func(context.Context, int) (types.ResultChunkData, bool, error) {
				return types.ResultChunkData{}, false, nil
			},
		},
		TransactFunc: &StoreTransactFunc{
			defaultHook: func(context.Context) (persistence.Store, error) {
				return nil, nil
			},
		},
		WriteDefinitionsFunc: &StoreWriteDefinitionsFunc{
			defaultHook: func(context.Context, chan types.MonikerLocations) error {
				return nil
			},
		},
		WriteDocumentsFunc: &StoreWriteDocumentsFunc{
			defaultHook: func(context.Context, chan persistence.KeyedDocumentData) error {
				return nil
			},
		},
		WriteMetaFunc: &StoreWriteMetaFunc{
			defaultHook: func(context.Context, types.MetaData) error {
				return nil
			},
		},
		WriteReferencesFunc: &StoreWriteReferencesFunc{
			defaultHook: func(context.Context, chan types.MonikerLocations) error {
				return nil
			},
		},
		WriteResultChunksFunc: &StoreWriteResultChunksFunc{
			defaultHook: func(context.Context, chan persistence.IndexedResultChunkData) error {
				return nil
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom(i persistence.Store) *MockStore {
	return &MockStore{
		CloseFunc: &StoreCloseFunc{
			defaultHook: i.Close,
		},
		CreateTablesFunc: &StoreCreateTablesFunc{
			defaultHook: i.CreateTables,
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: i.Done,
		},
		PathsWithPrefixFunc: &StorePathsWithPrefixFunc{
			defaultHook: i.PathsWithPrefix,
		},
		ReadDefinitionsFunc: &StoreReadDefinitionsFunc{
			defaultHook: i.ReadDefinitions,
		},
		ReadDocumentFunc: &StoreReadDocumentFunc{
			defaultHook: i.ReadDocument,
		},
		ReadMetaFunc: &StoreReadMetaFunc{
			defaultHook: i.ReadMeta,
		},
		ReadReferencesFunc: &StoreReadReferencesFunc{
			defaultHook: i.ReadReferences,
		},
		ReadResultChunkFunc: &StoreReadResultChunkFunc{
			defaultHook: i.ReadResultChunk,
		},
		TransactFunc: &StoreTransactFunc{
			defaultHook: i.Transact,
		},
		WriteDefinitionsFunc: &StoreWriteDefinitionsFunc{
			defaultHook: i.WriteDefinitions,
		},
		WriteDocumentsFunc: &StoreWriteDocumentsFunc{
			defaultHook: i.WriteDocuments,
		},
		WriteMetaFunc: &StoreWriteMetaFunc{
			defaultHook: i.WriteMeta,
		},
		WriteReferencesFunc: &StoreWriteReferencesFunc{
			defaultHook: i.WriteReferences,
		},
		WriteResultChunksFunc: &StoreWriteResultChunksFunc{
			defaultHook: i.WriteResultChunks,
		},
	}
}

// StoreCloseFunc describes the behavior when the Close method of the parent
// MockStore instance is invoked.
type StoreCloseFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []StoreCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Close(v0 error) error {
	r0 := m.CloseFunc.nextHook()(v0)
	m.CloseFunc.appendCall(StoreCloseFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreCloseFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockStore instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreCloseFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreCloseFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreCloseFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *StoreCloseFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreCloseFunc) appendCall(r0 StoreCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreCloseFuncCall objects describing the
// invocations of this function.
func (f *StoreCloseFunc) History() []StoreCloseFuncCall {
	f.mutex.Lock()
	history := make([]StoreCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockStore.
type StoreCloseFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreCloseFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreCloseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreCreateTablesFunc describes the behavior when the CreateTables method
// of the parent MockStore instance is invoked.
type StoreCreateTablesFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []StoreCreateTablesFuncCall
	mutex       sync.Mutex
}

// CreateTables delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) CreateTables(v0 context.Context) error {
	r0 := m.CreateTablesFunc.nextHook()(v0)
	m.CreateTablesFunc.appendCall(StoreCreateTablesFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateTables method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreCreateTablesFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateTables method of the parent MockStore instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreCreateTablesFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreCreateTablesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreCreateTablesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *StoreCreateTablesFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreCreateTablesFunc) appendCall(r0 StoreCreateTablesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreCreateTablesFuncCall objects
// describing the invocations of this function.
func (f *StoreCreateTablesFunc) History() []StoreCreateTablesFuncCall {
	f.mutex.Lock()
	history := make([]StoreCreateTablesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreCreateTablesFuncCall is an object that describes an invocation of
// method CreateTables on an instance of MockStore.
type StoreCreateTablesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreCreateTablesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreCreateTablesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreDoneFunc describes the behavior when the Done method of the parent
// MockStore instance is invoked.
type StoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []StoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(StoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockStore instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *StoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDoneFunc) appendCall(r0 StoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDoneFuncCall objects describing the
// invocations of this function.
func (f *StoreDoneFunc) History() []StoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]StoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockStore.
type StoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorePathsWithPrefixFunc describes the behavior when the PathsWithPrefix
// method of the parent MockStore instance is invoked.
type StorePathsWithPrefixFunc struct {
	defaultHook func(context.Context, string) ([]string, error)
	hooks       []func(context.Context, string) ([]string, error)
	history     []StorePathsWithPrefixFuncCall
	mutex       sync.Mutex
}

// PathsWithPrefix delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) PathsWithPrefix(v0 context.Context, v1 string) ([]string, error) {
	r0, r1 := m.PathsWithPrefixFunc.nextHook()(v0, v1)
	m.PathsWithPrefixFunc.appendCall(StorePathsWithPrefixFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PathsWithPrefix
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StorePathsWithPrefixFunc) SetDefaultHook(hook func(context.Context, string) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PathsWithPrefix method of the parent MockStore instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StorePathsWithPrefixFunc) PushHook(hook func(context.Context, string) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StorePathsWithPrefixFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StorePathsWithPrefixFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, string) ([]string, error) {
		return r0, r1
	})
}

func (f *StorePathsWithPrefixFunc) nextHook() func(context.Context, string) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorePathsWithPrefixFunc) appendCall(r0 StorePathsWithPrefixFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorePathsWithPrefixFuncCall objects
// describing the invocations of this function.
func (f *StorePathsWithPrefixFunc) History() []StorePathsWithPrefixFuncCall {
	f.mutex.Lock()
	history := make([]StorePathsWithPrefixFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorePathsWithPrefixFuncCall is an object that describes an invocation of
// method PathsWithPrefix on an instance of MockStore.
type StorePathsWithPrefixFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorePathsWithPrefixFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorePathsWithPrefixFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreReadDefinitionsFunc describes the behavior when the ReadDefinitions
// method of the parent MockStore instance is invoked.
type StoreReadDefinitionsFunc struct {
	defaultHook func(context.Context, string, string, int, int) ([]types.Location, int, error)
	hooks       []func(context.Context, string, string, int, int) ([]types.Location, int, error)
	history     []StoreReadDefinitionsFuncCall
	mutex       sync.Mutex
}

// ReadDefinitions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ReadDefinitions(v0 context.Context, v1 string, v2 string, v3 int, v4 int) ([]types.Location, int, error) {
	r0, r1, r2 := m.ReadDefinitionsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ReadDefinitionsFunc.appendCall(StoreReadDefinitionsFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ReadDefinitions
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreReadDefinitionsFunc) SetDefaultHook(hook func(context.Context, string, string, int, int) ([]types.Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadDefinitions method of the parent MockStore instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreReadDefinitionsFunc) PushHook(hook func(context.Context, string, string, int, int) ([]types.Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreReadDefinitionsFunc) SetDefaultReturn(r0 []types.Location, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, int, int) ([]types.Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreReadDefinitionsFunc) PushReturn(r0 []types.Location, r1 int, r2 error) {
	f.PushHook(func(context.Context, string, string, int, int) ([]types.Location, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreReadDefinitionsFunc) nextHook() func(context.Context, string, string, int, int) ([]types.Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReadDefinitionsFunc) appendCall(r0 StoreReadDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReadDefinitionsFuncCall objects
// describing the invocations of this function.
func (f *StoreReadDefinitionsFunc) History() []StoreReadDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]StoreReadDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReadDefinitionsFuncCall is an object that describes an invocation of
// method ReadDefinitions on an instance of MockStore.
type StoreReadDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReadDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReadDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreReadDocumentFunc describes the behavior when the ReadDocument method
// of the parent MockStore instance is invoked.
type StoreReadDocumentFunc struct {
	defaultHook func(context.Context, string) (types.DocumentData, bool, error)
	hooks       []func(context.Context, string) (types.DocumentData, bool, error)
	history     []StoreReadDocumentFuncCall
	mutex       sync.Mutex
}

// ReadDocument delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) ReadDocument(v0 context.Context, v1 string) (types.DocumentData, bool, error) {
	r0, r1, r2 := m.ReadDocumentFunc.nextHook()(v0, v1)
	m.ReadDocumentFunc.appendCall(StoreReadDocumentFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ReadDocument method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreReadDocumentFunc) SetDefaultHook(hook func(context.Context, string) (types.DocumentData, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadDocument method of the parent MockStore instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreReadDocumentFunc) PushHook(hook func(context.Context, string) (types.DocumentData, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreReadDocumentFunc) SetDefaultReturn(r0 types.DocumentData, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string) (types.DocumentData, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreReadDocumentFunc) PushReturn(r0 types.DocumentData, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string) (types.DocumentData, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreReadDocumentFunc) nextHook() func(context.Context, string) (types.DocumentData, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReadDocumentFunc) appendCall(r0 StoreReadDocumentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReadDocumentFuncCall objects
// describing the invocations of this function.
func (f *StoreReadDocumentFunc) History() []StoreReadDocumentFuncCall {
	f.mutex.Lock()
	history := make([]StoreReadDocumentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReadDocumentFuncCall is an object that describes an invocation of
// method ReadDocument on an instance of MockStore.
type StoreReadDocumentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.DocumentData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReadDocumentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReadDocumentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreReadMetaFunc describes the behavior when the ReadMeta method of the
// parent MockStore instance is invoked.
type StoreReadMetaFunc struct {
	defaultHook func(context.Context) (types.MetaData, error)
	hooks       []func(context.Context) (types.MetaData, error)
	history     []StoreReadMetaFuncCall
	mutex       sync.Mutex
}

// ReadMeta delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) ReadMeta(v0 context.Context) (types.MetaData, error) {
	r0, r1 := m.ReadMetaFunc.nextHook()(v0)
	m.ReadMetaFunc.appendCall(StoreReadMetaFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReadMeta method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreReadMetaFunc) SetDefaultHook(hook func(context.Context) (types.MetaData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadMeta method of the parent MockStore instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreReadMetaFunc) PushHook(hook func(context.Context) (types.MetaData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreReadMetaFunc) SetDefaultReturn(r0 types.MetaData, r1 error) {
	f.SetDefaultHook(func(context.Context) (types.MetaData, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreReadMetaFunc) PushReturn(r0 types.MetaData, r1 error) {
	f.PushHook(func(context.Context) (types.MetaData, error) {
		return r0, r1
	})
}

func (f *StoreReadMetaFunc) nextHook() func(context.Context) (types.MetaData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReadMetaFunc) appendCall(r0 StoreReadMetaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReadMetaFuncCall objects describing
// the invocations of this function.
func (f *StoreReadMetaFunc) History() []StoreReadMetaFuncCall {
	f.mutex.Lock()
	history := make([]StoreReadMetaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReadMetaFuncCall is an object that describes an invocation of method
// ReadMeta on an instance of MockStore.
type StoreReadMetaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.MetaData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReadMetaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReadMetaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreReadReferencesFunc describes the behavior when the ReadReferences
// method of the parent MockStore instance is invoked.
type StoreReadReferencesFunc struct {
	defaultHook func(context.Context, string, string, int, int) ([]types.Location, int, error)
	hooks       []func(context.Context, string, string, int, int) ([]types.Location, int, error)
	history     []StoreReadReferencesFuncCall
	mutex       sync.Mutex
}

// ReadReferences delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ReadReferences(v0 context.Context, v1 string, v2 string, v3 int, v4 int) ([]types.Location, int, error) {
	r0, r1, r2 := m.ReadReferencesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ReadReferencesFunc.appendCall(StoreReadReferencesFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ReadReferences
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreReadReferencesFunc) SetDefaultHook(hook func(context.Context, string, string, int, int) ([]types.Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadReferences method of the parent MockStore instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreReadReferencesFunc) PushHook(hook func(context.Context, string, string, int, int) ([]types.Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreReadReferencesFunc) SetDefaultReturn(r0 []types.Location, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, int, int) ([]types.Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreReadReferencesFunc) PushReturn(r0 []types.Location, r1 int, r2 error) {
	f.PushHook(func(context.Context, string, string, int, int) ([]types.Location, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreReadReferencesFunc) nextHook() func(context.Context, string, string, int, int) ([]types.Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReadReferencesFunc) appendCall(r0 StoreReadReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReadReferencesFuncCall objects
// describing the invocations of this function.
func (f *StoreReadReferencesFunc) History() []StoreReadReferencesFuncCall {
	f.mutex.Lock()
	history := make([]StoreReadReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReadReferencesFuncCall is an object that describes an invocation of
// method ReadReferences on an instance of MockStore.
type StoreReadReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReadReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReadReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreReadResultChunkFunc describes the behavior when the ReadResultChunk
// method of the parent MockStore instance is invoked.
type StoreReadResultChunkFunc struct {
	defaultHook func(context.Context, int) (types.ResultChunkData, bool, error)
	hooks       []func(context.Context, int) (types.ResultChunkData, bool, error)
	history     []StoreReadResultChunkFuncCall
	mutex       sync.Mutex
}

// ReadResultChunk delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ReadResultChunk(v0 context.Context, v1 int) (types.ResultChunkData, bool, error) {
	r0, r1, r2 := m.ReadResultChunkFunc.nextHook()(v0, v1)
	m.ReadResultChunkFunc.appendCall(StoreReadResultChunkFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ReadResultChunk
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreReadResultChunkFunc) SetDefaultHook(hook func(context.Context, int) (types.ResultChunkData, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadResultChunk method of the parent MockStore instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreReadResultChunkFunc) PushHook(hook func(context.Context, int) (types.ResultChunkData, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreReadResultChunkFunc) SetDefaultReturn(r0 types.ResultChunkData, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (types.ResultChunkData, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreReadResultChunkFunc) PushReturn(r0 types.ResultChunkData, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (types.ResultChunkData, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreReadResultChunkFunc) nextHook() func(context.Context, int) (types.ResultChunkData, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreReadResultChunkFunc) appendCall(r0 StoreReadResultChunkFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreReadResultChunkFuncCall objects
// describing the invocations of this function.
func (f *StoreReadResultChunkFunc) History() []StoreReadResultChunkFuncCall {
	f.mutex.Lock()
	history := make([]StoreReadResultChunkFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreReadResultChunkFuncCall is an object that describes an invocation of
// method ReadResultChunk on an instance of MockStore.
type StoreReadResultChunkFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.ResultChunkData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreReadResultChunkFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreReadResultChunkFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreTransactFunc describes the behavior when the Transact method of the
// parent MockStore instance is invoked.
type StoreTransactFunc struct {
	defaultHook func(context.Context) (persistence.Store, error)
	hooks       []func(context.Context) (persistence.Store, error)
	history     []StoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Transact(v0 context.Context) (persistence.Store, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(StoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreTransactFunc) SetDefaultHook(hook func(context.Context) (persistence.Store, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockStore instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreTransactFunc) PushHook(hook func(context.Context) (persistence.Store, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreTransactFunc) SetDefaultReturn(r0 persistence.Store, r1 error) {
	f.SetDefaultHook(func(context.Context) (persistence.Store, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreTransactFunc) PushReturn(r0 persistence.Store, r1 error) {
	f.PushHook(func(context.Context) (persistence.Store, error) {
		return r0, r1
	})
}

func (f *StoreTransactFunc) nextHook() func(context.Context) (persistence.Store, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreTransactFunc) appendCall(r0 StoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreTransactFuncCall objects describing
// the invocations of this function.
func (f *StoreTransactFunc) History() []StoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]StoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreTransactFuncCall is an object that describes an invocation of method
// Transact on an instance of MockStore.
type StoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 persistence.Store
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreWriteDefinitionsFunc describes the behavior when the
// WriteDefinitions method of the parent MockStore instance is invoked.
type StoreWriteDefinitionsFunc struct {
	defaultHook func(context.Context, chan types.MonikerLocations) error
	hooks       []func(context.Context, chan types.MonikerLocations) error
	history     []StoreWriteDefinitionsFuncCall
	mutex       sync.Mutex
}

// WriteDefinitions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) WriteDefinitions(v0 context.Context, v1 chan types.MonikerLocations) error {
	r0 := m.WriteDefinitionsFunc.nextHook()(v0, v1)
	m.WriteDefinitionsFunc.appendCall(StoreWriteDefinitionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WriteDefinitions
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreWriteDefinitionsFunc) SetDefaultHook(hook func(context.Context, chan types.MonikerLocations) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WriteDefinitions method of the parent MockStore instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreWriteDefinitionsFunc) PushHook(hook func(context.Context, chan types.MonikerLocations) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreWriteDefinitionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, chan types.MonikerLocations) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreWriteDefinitionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, chan types.MonikerLocations) error {
		return r0
	})
}

func (f *StoreWriteDefinitionsFunc) nextHook() func(context.Context, chan types.MonikerLocations) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWriteDefinitionsFunc) appendCall(r0 StoreWriteDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWriteDefinitionsFuncCall objects
// describing the invocations of this function.
func (f *StoreWriteDefinitionsFunc) History() []StoreWriteDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]StoreWriteDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWriteDefinitionsFuncCall is an object that describes an invocation
// of method WriteDefinitions on an instance of MockStore.
type StoreWriteDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan types.MonikerLocations
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWriteDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWriteDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreWriteDocumentsFunc describes the behavior when the WriteDocuments
// method of the parent MockStore instance is invoked.
type StoreWriteDocumentsFunc struct {
	defaultHook func(context.Context, chan persistence.KeyedDocumentData) error
	hooks       []func(context.Context, chan persistence.KeyedDocumentData) error
	history     []StoreWriteDocumentsFuncCall
	mutex       sync.Mutex
}

// WriteDocuments delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) WriteDocuments(v0 context.Context, v1 chan persistence.KeyedDocumentData) error {
	r0 := m.WriteDocumentsFunc.nextHook()(v0, v1)
	m.WriteDocumentsFunc.appendCall(StoreWriteDocumentsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WriteDocuments
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreWriteDocumentsFunc) SetDefaultHook(hook func(context.Context, chan persistence.KeyedDocumentData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WriteDocuments method of the parent MockStore instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreWriteDocumentsFunc) PushHook(hook func(context.Context, chan persistence.KeyedDocumentData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreWriteDocumentsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, chan persistence.KeyedDocumentData) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreWriteDocumentsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, chan persistence.KeyedDocumentData) error {
		return r0
	})
}

func (f *StoreWriteDocumentsFunc) nextHook() func(context.Context, chan persistence.KeyedDocumentData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWriteDocumentsFunc) appendCall(r0 StoreWriteDocumentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWriteDocumentsFuncCall objects
// describing the invocations of this function.
func (f *StoreWriteDocumentsFunc) History() []StoreWriteDocumentsFuncCall {
	f.mutex.Lock()
	history := make([]StoreWriteDocumentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWriteDocumentsFuncCall is an object that describes an invocation of
// method WriteDocuments on an instance of MockStore.
type StoreWriteDocumentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan persistence.KeyedDocumentData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWriteDocumentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWriteDocumentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreWriteMetaFunc describes the behavior when the WriteMeta method of
// the parent MockStore instance is invoked.
type StoreWriteMetaFunc struct {
	defaultHook func(context.Context, types.MetaData) error
	hooks       []func(context.Context, types.MetaData) error
	history     []StoreWriteMetaFuncCall
	mutex       sync.Mutex
}

// WriteMeta delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) WriteMeta(v0 context.Context, v1 types.MetaData) error {
	r0 := m.WriteMetaFunc.nextHook()(v0, v1)
	m.WriteMetaFunc.appendCall(StoreWriteMetaFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WriteMeta method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreWriteMetaFunc) SetDefaultHook(hook func(context.Context, types.MetaData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WriteMeta method of the parent MockStore instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreWriteMetaFunc) PushHook(hook func(context.Context, types.MetaData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreWriteMetaFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, types.MetaData) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreWriteMetaFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, types.MetaData) error {
		return r0
	})
}

func (f *StoreWriteMetaFunc) nextHook() func(context.Context, types.MetaData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWriteMetaFunc) appendCall(r0 StoreWriteMetaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWriteMetaFuncCall objects describing
// the invocations of this function.
func (f *StoreWriteMetaFunc) History() []StoreWriteMetaFuncCall {
	f.mutex.Lock()
	history := make([]StoreWriteMetaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWriteMetaFuncCall is an object that describes an invocation of
// method WriteMeta on an instance of MockStore.
type StoreWriteMetaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.MetaData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWriteMetaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWriteMetaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreWriteReferencesFunc describes the behavior when the WriteReferences
// method of the parent MockStore instance is invoked.
type StoreWriteReferencesFunc struct {
	defaultHook func(context.Context, chan types.MonikerLocations) error
	hooks       []func(context.Context, chan types.MonikerLocations) error
	history     []StoreWriteReferencesFuncCall
	mutex       sync.Mutex
}

// WriteReferences delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) WriteReferences(v0 context.Context, v1 chan types.MonikerLocations) error {
	r0 := m.WriteReferencesFunc.nextHook()(v0, v1)
	m.WriteReferencesFunc.appendCall(StoreWriteReferencesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WriteReferences
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreWriteReferencesFunc) SetDefaultHook(hook func(context.Context, chan types.MonikerLocations) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WriteReferences method of the parent MockStore instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreWriteReferencesFunc) PushHook(hook func(context.Context, chan types.MonikerLocations) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreWriteReferencesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, chan types.MonikerLocations) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreWriteReferencesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, chan types.MonikerLocations) error {
		return r0
	})
}

func (f *StoreWriteReferencesFunc) nextHook() func(context.Context, chan types.MonikerLocations) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWriteReferencesFunc) appendCall(r0 StoreWriteReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWriteReferencesFuncCall objects
// describing the invocations of this function.
func (f *StoreWriteReferencesFunc) History() []StoreWriteReferencesFuncCall {
	f.mutex.Lock()
	history := make([]StoreWriteReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWriteReferencesFuncCall is an object that describes an invocation of
// method WriteReferences on an instance of MockStore.
type StoreWriteReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan types.MonikerLocations
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWriteReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWriteReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreWriteResultChunksFunc describes the behavior when the
// WriteResultChunks method of the parent MockStore instance is invoked.
type StoreWriteResultChunksFunc struct {
	defaultHook func(context.Context, chan persistence.IndexedResultChunkData) error
	hooks       []func(context.Context, chan persistence.IndexedResultChunkData) error
	history     []StoreWriteResultChunksFuncCall
	mutex       sync.Mutex
}

// WriteResultChunks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) WriteResultChunks(v0 context.Context, v1 chan persistence.IndexedResultChunkData) error {
	r0 := m.WriteResultChunksFunc.nextHook()(v0, v1)
	m.WriteResultChunksFunc.appendCall(StoreWriteResultChunksFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WriteResultChunks
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreWriteResultChunksFunc) SetDefaultHook(hook func(context.Context, chan persistence.IndexedResultChunkData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WriteResultChunks method of the parent MockStore instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreWriteResultChunksFunc) PushHook(hook func(context.Context, chan persistence.IndexedResultChunkData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoreWriteResultChunksFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, chan persistence.IndexedResultChunkData) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoreWriteResultChunksFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, chan persistence.IndexedResultChunkData) error {
		return r0
	})
}

func (f *StoreWriteResultChunksFunc) nextHook() func(context.Context, chan persistence.IndexedResultChunkData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWriteResultChunksFunc) appendCall(r0 StoreWriteResultChunksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWriteResultChunksFuncCall objects
// describing the invocations of this function.
func (f *StoreWriteResultChunksFunc) History() []StoreWriteResultChunksFuncCall {
	f.mutex.Lock()
	history := make([]StoreWriteResultChunksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWriteResultChunksFuncCall is an object that describes an invocation
// of method WriteResultChunks on an instance of MockStore.
type StoreWriteResultChunksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 chan persistence.IndexedResultChunkData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWriteResultChunksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWriteResultChunksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
