// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	client "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/client"
	clienttypes "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/client_types"
	"sync"
)

// MockBundleManagerClient is a mock implementation of the
// BundleManagerClient interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/client)
// used for unit testing.
type MockBundleManagerClient struct {
	// DefinitionsFunc is an instance of a mock function object controlling
	// the behavior of the method Definitions.
	DefinitionsFunc *BundleManagerClientDefinitionsFunc
	// DiagnosticsFunc is an instance of a mock function object controlling
	// the behavior of the method Diagnostics.
	DiagnosticsFunc *BundleManagerClientDiagnosticsFunc
	// ExistsFunc is an instance of a mock function object controlling the
	// behavior of the method Exists.
	ExistsFunc *BundleManagerClientExistsFunc
	// HoverFunc is an instance of a mock function object controlling the
	// behavior of the method Hover.
	HoverFunc *BundleManagerClientHoverFunc
	// MonikerResultsFunc is an instance of a mock function object
	// controlling the behavior of the method MonikerResults.
	MonikerResultsFunc *BundleManagerClientMonikerResultsFunc
	// MonikersByPositionFunc is an instance of a mock function object
	// controlling the behavior of the method MonikersByPosition.
	MonikersByPositionFunc *BundleManagerClientMonikersByPositionFunc
	// PackageInformationFunc is an instance of a mock function object
	// controlling the behavior of the method PackageInformation.
	PackageInformationFunc *BundleManagerClientPackageInformationFunc
	// RangesFunc is an instance of a mock function object controlling the
	// behavior of the method Ranges.
	RangesFunc *BundleManagerClientRangesFunc
	// ReferencesFunc is an instance of a mock function object controlling
	// the behavior of the method References.
	ReferencesFunc *BundleManagerClientReferencesFunc
}

// NewMockBundleManagerClient creates a new mock of the BundleManagerClient
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockBundleManagerClient() *MockBundleManagerClient {
	return &MockBundleManagerClient{
		DefinitionsFunc: &BundleManagerClientDefinitionsFunc{
			defaultHook: func(context.Context, int, string, int, int) ([]clienttypes.Location, error) {
				return nil, nil
			},
		},
		DiagnosticsFunc: &BundleManagerClientDiagnosticsFunc{
			defaultHook: func(context.Context, int, string, int, int) ([]clienttypes.Diagnostic, int, error) {
				return nil, 0, nil
			},
		},
		ExistsFunc: &BundleManagerClientExistsFunc{
			defaultHook: func(context.Context, int, string) (bool, error) {
				return false, nil
			},
		},
		HoverFunc: &BundleManagerClientHoverFunc{
			defaultHook: func(context.Context, int, string, int, int) (string, clienttypes.Range, bool, error) {
				return "", clienttypes.Range{}, false, nil
			},
		},
		MonikerResultsFunc: &BundleManagerClientMonikerResultsFunc{
			defaultHook: func(context.Context, int, string, string, string, int, int) ([]clienttypes.Location, int, error) {
				return nil, 0, nil
			},
		},
		MonikersByPositionFunc: &BundleManagerClientMonikersByPositionFunc{
			defaultHook: func(context.Context, int, string, int, int) ([][]clienttypes.MonikerData, error) {
				return nil, nil
			},
		},
		PackageInformationFunc: &BundleManagerClientPackageInformationFunc{
			defaultHook: func(context.Context, int, string, string) (clienttypes.PackageInformationData, error) {
				return clienttypes.PackageInformationData{}, nil
			},
		},
		RangesFunc: &BundleManagerClientRangesFunc{
			defaultHook: func(context.Context, int, string, int, int) ([]clienttypes.CodeIntelligenceRange, error) {
				return nil, nil
			},
		},
		ReferencesFunc: &BundleManagerClientReferencesFunc{
			defaultHook: func(context.Context, int, string, int, int) ([]clienttypes.Location, error) {
				return nil, nil
			},
		},
	}
}

// NewMockBundleManagerClientFrom creates a new mock of the
// MockBundleManagerClient interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockBundleManagerClientFrom(i client.BundleManagerClient) *MockBundleManagerClient {
	return &MockBundleManagerClient{
		DefinitionsFunc: &BundleManagerClientDefinitionsFunc{
			defaultHook: i.Definitions,
		},
		DiagnosticsFunc: &BundleManagerClientDiagnosticsFunc{
			defaultHook: i.Diagnostics,
		},
		ExistsFunc: &BundleManagerClientExistsFunc{
			defaultHook: i.Exists,
		},
		HoverFunc: &BundleManagerClientHoverFunc{
			defaultHook: i.Hover,
		},
		MonikerResultsFunc: &BundleManagerClientMonikerResultsFunc{
			defaultHook: i.MonikerResults,
		},
		MonikersByPositionFunc: &BundleManagerClientMonikersByPositionFunc{
			defaultHook: i.MonikersByPosition,
		},
		PackageInformationFunc: &BundleManagerClientPackageInformationFunc{
			defaultHook: i.PackageInformation,
		},
		RangesFunc: &BundleManagerClientRangesFunc{
			defaultHook: i.Ranges,
		},
		ReferencesFunc: &BundleManagerClientReferencesFunc{
			defaultHook: i.References,
		},
	}
}

// BundleManagerClientDefinitionsFunc describes the behavior when the
// Definitions method of the parent MockBundleManagerClient instance is
// invoked.
type BundleManagerClientDefinitionsFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([]clienttypes.Location, error)
	hooks       []func(context.Context, int, string, int, int) ([]clienttypes.Location, error)
	history     []BundleManagerClientDefinitionsFuncCall
	mutex       sync.Mutex
}

// Definitions delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBundleManagerClient) Definitions(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]clienttypes.Location, error) {
	r0, r1 := m.DefinitionsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.DefinitionsFunc.appendCall(BundleManagerClientDefinitionsFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Definitions method
// of the parent MockBundleManagerClient instance is invoked and the hook
// queue is empty.
func (f *BundleManagerClientDefinitionsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]clienttypes.Location, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Definitions method of the parent MockBundleManagerClient instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BundleManagerClientDefinitionsFunc) PushHook(hook func(context.Context, int, string, int, int) ([]clienttypes.Location, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BundleManagerClientDefinitionsFunc) SetDefaultReturn(r0 []clienttypes.Location, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([]clienttypes.Location, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BundleManagerClientDefinitionsFunc) PushReturn(r0 []clienttypes.Location, r1 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([]clienttypes.Location, error) {
		return r0, r1
	})
}

func (f *BundleManagerClientDefinitionsFunc) nextHook() func(context.Context, int, string, int, int) ([]clienttypes.Location, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BundleManagerClientDefinitionsFunc) appendCall(r0 BundleManagerClientDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BundleManagerClientDefinitionsFuncCall
// objects describing the invocations of this function.
func (f *BundleManagerClientDefinitionsFunc) History() []BundleManagerClientDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]BundleManagerClientDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BundleManagerClientDefinitionsFuncCall is an object that describes an
// invocation of method Definitions on an instance of
// MockBundleManagerClient.
type BundleManagerClientDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []clienttypes.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BundleManagerClientDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BundleManagerClientDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BundleManagerClientDiagnosticsFunc describes the behavior when the
// Diagnostics method of the parent MockBundleManagerClient instance is
// invoked.
type BundleManagerClientDiagnosticsFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([]clienttypes.Diagnostic, int, error)
	hooks       []func(context.Context, int, string, int, int) ([]clienttypes.Diagnostic, int, error)
	history     []BundleManagerClientDiagnosticsFuncCall
	mutex       sync.Mutex
}

// Diagnostics delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBundleManagerClient) Diagnostics(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]clienttypes.Diagnostic, int, error) {
	r0, r1, r2 := m.DiagnosticsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.DiagnosticsFunc.appendCall(BundleManagerClientDiagnosticsFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Diagnostics method
// of the parent MockBundleManagerClient instance is invoked and the hook
// queue is empty.
func (f *BundleManagerClientDiagnosticsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]clienttypes.Diagnostic, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Diagnostics method of the parent MockBundleManagerClient instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BundleManagerClientDiagnosticsFunc) PushHook(hook func(context.Context, int, string, int, int) ([]clienttypes.Diagnostic, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BundleManagerClientDiagnosticsFunc) SetDefaultReturn(r0 []clienttypes.Diagnostic, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([]clienttypes.Diagnostic, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BundleManagerClientDiagnosticsFunc) PushReturn(r0 []clienttypes.Diagnostic, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([]clienttypes.Diagnostic, int, error) {
		return r0, r1, r2
	})
}

func (f *BundleManagerClientDiagnosticsFunc) nextHook() func(context.Context, int, string, int, int) ([]clienttypes.Diagnostic, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BundleManagerClientDiagnosticsFunc) appendCall(r0 BundleManagerClientDiagnosticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BundleManagerClientDiagnosticsFuncCall
// objects describing the invocations of this function.
func (f *BundleManagerClientDiagnosticsFunc) History() []BundleManagerClientDiagnosticsFuncCall {
	f.mutex.Lock()
	history := make([]BundleManagerClientDiagnosticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BundleManagerClientDiagnosticsFuncCall is an object that describes an
// invocation of method Diagnostics on an instance of
// MockBundleManagerClient.
type BundleManagerClientDiagnosticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []clienttypes.Diagnostic
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BundleManagerClientDiagnosticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BundleManagerClientDiagnosticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// BundleManagerClientExistsFunc describes the behavior when the Exists
// method of the parent MockBundleManagerClient instance is invoked.
type BundleManagerClientExistsFunc struct {
	defaultHook func(context.Context, int, string) (bool, error)
	hooks       []func(context.Context, int, string) (bool, error)
	history     []BundleManagerClientExistsFuncCall
	mutex       sync.Mutex
}

// Exists delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBundleManagerClient) Exists(v0 context.Context, v1 int, v2 string) (bool, error) {
	r0, r1 := m.ExistsFunc.nextHook()(v0, v1, v2)
	m.ExistsFunc.appendCall(BundleManagerClientExistsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Exists method of the
// parent MockBundleManagerClient instance is invoked and the hook queue is
// empty.
func (f *BundleManagerClientExistsFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exists method of the parent MockBundleManagerClient instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BundleManagerClientExistsFunc) PushHook(hook func(context.Context, int, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BundleManagerClientExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BundleManagerClientExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string) (bool, error) {
		return r0, r1
	})
}

func (f *BundleManagerClientExistsFunc) nextHook() func(context.Context, int, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BundleManagerClientExistsFunc) appendCall(r0 BundleManagerClientExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BundleManagerClientExistsFuncCall objects
// describing the invocations of this function.
func (f *BundleManagerClientExistsFunc) History() []BundleManagerClientExistsFuncCall {
	f.mutex.Lock()
	history := make([]BundleManagerClientExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BundleManagerClientExistsFuncCall is an object that describes an
// invocation of method Exists on an instance of MockBundleManagerClient.
type BundleManagerClientExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BundleManagerClientExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BundleManagerClientExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BundleManagerClientHoverFunc describes the behavior when the Hover method
// of the parent MockBundleManagerClient instance is invoked.
type BundleManagerClientHoverFunc struct {
	defaultHook func(context.Context, int, string, int, int) (string, clienttypes.Range, bool, error)
	hooks       []func(context.Context, int, string, int, int) (string, clienttypes.Range, bool, error)
	history     []BundleManagerClientHoverFuncCall
	mutex       sync.Mutex
}

// Hover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBundleManagerClient) Hover(v0 context.Context, v1 int, v2 string, v3 int, v4 int) (string, clienttypes.Range, bool, error) {
	r0, r1, r2, r3 := m.HoverFunc.nextHook()(v0, v1, v2, v3, v4)
	m.HoverFunc.appendCall(BundleManagerClientHoverFuncCall{v0, v1, v2, v3, v4, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the Hover method of the
// parent MockBundleManagerClient instance is invoked and the hook queue is
// empty.
func (f *BundleManagerClientHoverFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) (string, clienttypes.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Hover method of the parent MockBundleManagerClient instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BundleManagerClientHoverFunc) PushHook(hook func(context.Context, int, string, int, int) (string, clienttypes.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BundleManagerClientHoverFunc) SetDefaultReturn(r0 string, r1 clienttypes.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) (string, clienttypes.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BundleManagerClientHoverFunc) PushReturn(r0 string, r1 clienttypes.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, int, string, int, int) (string, clienttypes.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *BundleManagerClientHoverFunc) nextHook() func(context.Context, int, string, int, int) (string, clienttypes.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BundleManagerClientHoverFunc) appendCall(r0 BundleManagerClientHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BundleManagerClientHoverFuncCall objects
// describing the invocations of this function.
func (f *BundleManagerClientHoverFunc) History() []BundleManagerClientHoverFuncCall {
	f.mutex.Lock()
	history := make([]BundleManagerClientHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BundleManagerClientHoverFuncCall is an object that describes an
// invocation of method Hover on an instance of MockBundleManagerClient.
type BundleManagerClientHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 clienttypes.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BundleManagerClientHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BundleManagerClientHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// BundleManagerClientMonikerResultsFunc describes the behavior when the
// MonikerResults method of the parent MockBundleManagerClient instance is
// invoked.
type BundleManagerClientMonikerResultsFunc struct {
	defaultHook func(context.Context, int, string, string, string, int, int) ([]clienttypes.Location, int, error)
	hooks       []func(context.Context, int, string, string, string, int, int) ([]clienttypes.Location, int, error)
	history     []BundleManagerClientMonikerResultsFuncCall
	mutex       sync.Mutex
}

// MonikerResults delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBundleManagerClient) MonikerResults(v0 context.Context, v1 int, v2 string, v3 string, v4 string, v5 int, v6 int) ([]clienttypes.Location, int, error) {
	r0, r1, r2 := m.MonikerResultsFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.MonikerResultsFunc.appendCall(BundleManagerClientMonikerResultsFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the MonikerResults
// method of the parent MockBundleManagerClient instance is invoked and the
// hook queue is empty.
func (f *BundleManagerClientMonikerResultsFunc) SetDefaultHook(hook func(context.Context, int, string, string, string, int, int) ([]clienttypes.Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MonikerResults method of the parent MockBundleManagerClient instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BundleManagerClientMonikerResultsFunc) PushHook(hook func(context.Context, int, string, string, string, int, int) ([]clienttypes.Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BundleManagerClientMonikerResultsFunc) SetDefaultReturn(r0 []clienttypes.Location, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, string, int, int) ([]clienttypes.Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BundleManagerClientMonikerResultsFunc) PushReturn(r0 []clienttypes.Location, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, string, string, int, int) ([]clienttypes.Location, int, error) {
		return r0, r1, r2
	})
}

func (f *BundleManagerClientMonikerResultsFunc) nextHook() func(context.Context, int, string, string, string, int, int) ([]clienttypes.Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BundleManagerClientMonikerResultsFunc) appendCall(r0 BundleManagerClientMonikerResultsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BundleManagerClientMonikerResultsFuncCall
// objects describing the invocations of this function.
func (f *BundleManagerClientMonikerResultsFunc) History() []BundleManagerClientMonikerResultsFuncCall {
	f.mutex.Lock()
	history := make([]BundleManagerClientMonikerResultsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BundleManagerClientMonikerResultsFuncCall is an object that describes an
// invocation of method MonikerResults on an instance of
// MockBundleManagerClient.
type BundleManagerClientMonikerResultsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []clienttypes.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BundleManagerClientMonikerResultsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BundleManagerClientMonikerResultsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// BundleManagerClientMonikersByPositionFunc describes the behavior when the
// MonikersByPosition method of the parent MockBundleManagerClient instance
// is invoked.
type BundleManagerClientMonikersByPositionFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([][]clienttypes.MonikerData, error)
	hooks       []func(context.Context, int, string, int, int) ([][]clienttypes.MonikerData, error)
	history     []BundleManagerClientMonikersByPositionFuncCall
	mutex       sync.Mutex
}

// MonikersByPosition delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBundleManagerClient) MonikersByPosition(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([][]clienttypes.MonikerData, error) {
	r0, r1 := m.MonikersByPositionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.MonikersByPositionFunc.appendCall(BundleManagerClientMonikersByPositionFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MonikersByPosition
// method of the parent MockBundleManagerClient instance is invoked and the
// hook queue is empty.
func (f *BundleManagerClientMonikersByPositionFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([][]clienttypes.MonikerData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MonikersByPosition method of the parent MockBundleManagerClient instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BundleManagerClientMonikersByPositionFunc) PushHook(hook func(context.Context, int, string, int, int) ([][]clienttypes.MonikerData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BundleManagerClientMonikersByPositionFunc) SetDefaultReturn(r0 [][]clienttypes.MonikerData, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([][]clienttypes.MonikerData, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BundleManagerClientMonikersByPositionFunc) PushReturn(r0 [][]clienttypes.MonikerData, r1 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([][]clienttypes.MonikerData, error) {
		return r0, r1
	})
}

func (f *BundleManagerClientMonikersByPositionFunc) nextHook() func(context.Context, int, string, int, int) ([][]clienttypes.MonikerData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BundleManagerClientMonikersByPositionFunc) appendCall(r0 BundleManagerClientMonikersByPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BundleManagerClientMonikersByPositionFuncCall objects describing the
// invocations of this function.
func (f *BundleManagerClientMonikersByPositionFunc) History() []BundleManagerClientMonikersByPositionFuncCall {
	f.mutex.Lock()
	history := make([]BundleManagerClientMonikersByPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BundleManagerClientMonikersByPositionFuncCall is an object that describes
// an invocation of method MonikersByPosition on an instance of
// MockBundleManagerClient.
type BundleManagerClientMonikersByPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 [][]clienttypes.MonikerData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BundleManagerClientMonikersByPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BundleManagerClientMonikersByPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BundleManagerClientPackageInformationFunc describes the behavior when the
// PackageInformation method of the parent MockBundleManagerClient instance
// is invoked.
type BundleManagerClientPackageInformationFunc struct {
	defaultHook func(context.Context, int, string, string) (clienttypes.PackageInformationData, error)
	hooks       []func(context.Context, int, string, string) (clienttypes.PackageInformationData, error)
	history     []BundleManagerClientPackageInformationFuncCall
	mutex       sync.Mutex
}

// PackageInformation delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBundleManagerClient) PackageInformation(v0 context.Context, v1 int, v2 string, v3 string) (clienttypes.PackageInformationData, error) {
	r0, r1 := m.PackageInformationFunc.nextHook()(v0, v1, v2, v3)
	m.PackageInformationFunc.appendCall(BundleManagerClientPackageInformationFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PackageInformation
// method of the parent MockBundleManagerClient instance is invoked and the
// hook queue is empty.
func (f *BundleManagerClientPackageInformationFunc) SetDefaultHook(hook func(context.Context, int, string, string) (clienttypes.PackageInformationData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PackageInformation method of the parent MockBundleManagerClient instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BundleManagerClientPackageInformationFunc) PushHook(hook func(context.Context, int, string, string) (clienttypes.PackageInformationData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BundleManagerClientPackageInformationFunc) SetDefaultReturn(r0 clienttypes.PackageInformationData, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) (clienttypes.PackageInformationData, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BundleManagerClientPackageInformationFunc) PushReturn(r0 clienttypes.PackageInformationData, r1 error) {
	f.PushHook(func(context.Context, int, string, string) (clienttypes.PackageInformationData, error) {
		return r0, r1
	})
}

func (f *BundleManagerClientPackageInformationFunc) nextHook() func(context.Context, int, string, string) (clienttypes.PackageInformationData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BundleManagerClientPackageInformationFunc) appendCall(r0 BundleManagerClientPackageInformationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BundleManagerClientPackageInformationFuncCall objects describing the
// invocations of this function.
func (f *BundleManagerClientPackageInformationFunc) History() []BundleManagerClientPackageInformationFuncCall {
	f.mutex.Lock()
	history := make([]BundleManagerClientPackageInformationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BundleManagerClientPackageInformationFuncCall is an object that describes
// an invocation of method PackageInformation on an instance of
// MockBundleManagerClient.
type BundleManagerClientPackageInformationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 clienttypes.PackageInformationData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BundleManagerClientPackageInformationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BundleManagerClientPackageInformationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BundleManagerClientRangesFunc describes the behavior when the Ranges
// method of the parent MockBundleManagerClient instance is invoked.
type BundleManagerClientRangesFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([]clienttypes.CodeIntelligenceRange, error)
	hooks       []func(context.Context, int, string, int, int) ([]clienttypes.CodeIntelligenceRange, error)
	history     []BundleManagerClientRangesFuncCall
	mutex       sync.Mutex
}

// Ranges delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBundleManagerClient) Ranges(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]clienttypes.CodeIntelligenceRange, error) {
	r0, r1 := m.RangesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.RangesFunc.appendCall(BundleManagerClientRangesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Ranges method of the
// parent MockBundleManagerClient instance is invoked and the hook queue is
// empty.
func (f *BundleManagerClientRangesFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]clienttypes.CodeIntelligenceRange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Ranges method of the parent MockBundleManagerClient instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BundleManagerClientRangesFunc) PushHook(hook func(context.Context, int, string, int, int) ([]clienttypes.CodeIntelligenceRange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BundleManagerClientRangesFunc) SetDefaultReturn(r0 []clienttypes.CodeIntelligenceRange, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([]clienttypes.CodeIntelligenceRange, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BundleManagerClientRangesFunc) PushReturn(r0 []clienttypes.CodeIntelligenceRange, r1 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([]clienttypes.CodeIntelligenceRange, error) {
		return r0, r1
	})
}

func (f *BundleManagerClientRangesFunc) nextHook() func(context.Context, int, string, int, int) ([]clienttypes.CodeIntelligenceRange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BundleManagerClientRangesFunc) appendCall(r0 BundleManagerClientRangesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BundleManagerClientRangesFuncCall objects
// describing the invocations of this function.
func (f *BundleManagerClientRangesFunc) History() []BundleManagerClientRangesFuncCall {
	f.mutex.Lock()
	history := make([]BundleManagerClientRangesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BundleManagerClientRangesFuncCall is an object that describes an
// invocation of method Ranges on an instance of MockBundleManagerClient.
type BundleManagerClientRangesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []clienttypes.CodeIntelligenceRange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BundleManagerClientRangesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BundleManagerClientRangesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BundleManagerClientReferencesFunc describes the behavior when the
// References method of the parent MockBundleManagerClient instance is
// invoked.
type BundleManagerClientReferencesFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([]clienttypes.Location, error)
	hooks       []func(context.Context, int, string, int, int) ([]clienttypes.Location, error)
	history     []BundleManagerClientReferencesFuncCall
	mutex       sync.Mutex
}

// References delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBundleManagerClient) References(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]clienttypes.Location, error) {
	r0, r1 := m.ReferencesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ReferencesFunc.appendCall(BundleManagerClientReferencesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the References method of
// the parent MockBundleManagerClient instance is invoked and the hook queue
// is empty.
func (f *BundleManagerClientReferencesFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]clienttypes.Location, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// References method of the parent MockBundleManagerClient instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *BundleManagerClientReferencesFunc) PushHook(hook func(context.Context, int, string, int, int) ([]clienttypes.Location, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BundleManagerClientReferencesFunc) SetDefaultReturn(r0 []clienttypes.Location, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([]clienttypes.Location, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BundleManagerClientReferencesFunc) PushReturn(r0 []clienttypes.Location, r1 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([]clienttypes.Location, error) {
		return r0, r1
	})
}

func (f *BundleManagerClientReferencesFunc) nextHook() func(context.Context, int, string, int, int) ([]clienttypes.Location, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BundleManagerClientReferencesFunc) appendCall(r0 BundleManagerClientReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BundleManagerClientReferencesFuncCall
// objects describing the invocations of this function.
func (f *BundleManagerClientReferencesFunc) History() []BundleManagerClientReferencesFuncCall {
	f.mutex.Lock()
	history := make([]BundleManagerClientReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BundleManagerClientReferencesFuncCall is an object that describes an
// invocation of method References on an instance of
// MockBundleManagerClient.
type BundleManagerClientReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []clienttypes.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BundleManagerClientReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BundleManagerClientReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
