// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package policies

import (
	"context"
	"sync"
	"time"

	store "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/policies/internal/store"
	shared "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/policies/shared"
	types "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/shared/types"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
)

// MockStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/policies/internal/store)
// used for unit testing.
type MockStore struct {
	// CreateConfigurationPolicyFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CreateConfigurationPolicy.
	CreateConfigurationPolicyFunc *StoreCreateConfigurationPolicyFunc
	// DeleteConfigurationPolicyByIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteConfigurationPolicyByID.
	DeleteConfigurationPolicyByIDFunc *StoreDeleteConfigurationPolicyByIDFunc
	// GetConfigurationPoliciesFunc is an instance of a mock function object
	// controlling the behavior of the method GetConfigurationPolicies.
	GetConfigurationPoliciesFunc *StoreGetConfigurationPoliciesFunc
	// GetConfigurationPolicyByIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetConfigurationPolicyByID.
	GetConfigurationPolicyByIDFunc *StoreGetConfigurationPolicyByIDFunc
	// GetRepoIDsByGlobPatternsFunc is an instance of a mock function object
	// controlling the behavior of the method GetRepoIDsByGlobPatterns.
	GetRepoIDsByGlobPatternsFunc *StoreGetRepoIDsByGlobPatternsFunc
	// GetUnsafeDBFunc is an instance of a mock function object controlling
	// the behavior of the method GetUnsafeDB.
	GetUnsafeDBFunc *StoreGetUnsafeDBFunc
	// RepoCountFunc is an instance of a mock function object controlling
	// the behavior of the method RepoCount.
	RepoCountFunc *StoreRepoCountFunc
	// SelectPoliciesForRepositoryMembershipUpdateFunc is an instance of a
	// mock function object controlling the behavior of the method
	// SelectPoliciesForRepositoryMembershipUpdate.
	SelectPoliciesForRepositoryMembershipUpdateFunc *StoreSelectPoliciesForRepositoryMembershipUpdateFunc
	// UpdateConfigurationPolicyFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateConfigurationPolicy.
	UpdateConfigurationPolicyFunc *StoreUpdateConfigurationPolicyFunc
	// UpdateReposMatchingPatternsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateReposMatchingPatterns.
	UpdateReposMatchingPatternsFunc *StoreUpdateReposMatchingPatternsFunc
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore() *MockStore {
	return &MockStore{
		CreateConfigurationPolicyFunc: &StoreCreateConfigurationPolicyFunc{
			defaultHook: func(context.Context, types.ConfigurationPolicy) (r0 types.ConfigurationPolicy, r1 error) {
				return
			},
		},
		DeleteConfigurationPolicyByIDFunc: &StoreDeleteConfigurationPolicyByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		GetConfigurationPoliciesFunc: &StoreGetConfigurationPoliciesFunc{
			defaultHook: func(context.Context, shared.GetConfigurationPoliciesOptions) (r0 []types.ConfigurationPolicy, r1 int, r2 error) {
				return
			},
		},
		GetConfigurationPolicyByIDFunc: &StoreGetConfigurationPolicyByIDFunc{
			defaultHook: func(context.Context, int) (r0 types.ConfigurationPolicy, r1 bool, r2 error) {
				return
			},
		},
		GetRepoIDsByGlobPatternsFunc: &StoreGetRepoIDsByGlobPatternsFunc{
			defaultHook: func(context.Context, []string, int, int) (r0 []int, r1 int, r2 error) {
				return
			},
		},
		GetUnsafeDBFunc: &StoreGetUnsafeDBFunc{
			defaultHook: func() (r0 database.DB) {
				return
			},
		},
		RepoCountFunc: &StoreRepoCountFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		SelectPoliciesForRepositoryMembershipUpdateFunc: &StoreSelectPoliciesForRepositoryMembershipUpdateFunc{
			defaultHook: func(context.Context, int) (r0 []types.ConfigurationPolicy, r1 error) {
				return
			},
		},
		UpdateConfigurationPolicyFunc: &StoreUpdateConfigurationPolicyFunc{
			defaultHook: func(context.Context, types.ConfigurationPolicy) (r0 error) {
				return
			},
		},
		UpdateReposMatchingPatternsFunc: &StoreUpdateReposMatchingPatternsFunc{
			defaultHook: func(context.Context, []string, int, *int) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockStore creates a new mock of the Store interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockStore() *MockStore {
	return &MockStore{
		CreateConfigurationPolicyFunc: &StoreCreateConfigurationPolicyFunc{
			defaultHook: func(context.Context, types.ConfigurationPolicy) (types.ConfigurationPolicy, error) {
				panic("unexpected invocation of MockStore.CreateConfigurationPolicy")
			},
		},
		DeleteConfigurationPolicyByIDFunc: &StoreDeleteConfigurationPolicyByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockStore.DeleteConfigurationPolicyByID")
			},
		},
		GetConfigurationPoliciesFunc: &StoreGetConfigurationPoliciesFunc{
			defaultHook: func(context.Context, shared.GetConfigurationPoliciesOptions) ([]types.ConfigurationPolicy, int, error) {
				panic("unexpected invocation of MockStore.GetConfigurationPolicies")
			},
		},
		GetConfigurationPolicyByIDFunc: &StoreGetConfigurationPolicyByIDFunc{
			defaultHook: func(context.Context, int) (types.ConfigurationPolicy, bool, error) {
				panic("unexpected invocation of MockStore.GetConfigurationPolicyByID")
			},
		},
		GetRepoIDsByGlobPatternsFunc: &StoreGetRepoIDsByGlobPatternsFunc{
			defaultHook: func(context.Context, []string, int, int) ([]int, int, error) {
				panic("unexpected invocation of MockStore.GetRepoIDsByGlobPatterns")
			},
		},
		GetUnsafeDBFunc: &StoreGetUnsafeDBFunc{
			defaultHook: func() database.DB {
				panic("unexpected invocation of MockStore.GetUnsafeDB")
			},
		},
		RepoCountFunc: &StoreRepoCountFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockStore.RepoCount")
			},
		},
		SelectPoliciesForRepositoryMembershipUpdateFunc: &StoreSelectPoliciesForRepositoryMembershipUpdateFunc{
			defaultHook: func(context.Context, int) ([]types.ConfigurationPolicy, error) {
				panic("unexpected invocation of MockStore.SelectPoliciesForRepositoryMembershipUpdate")
			},
		},
		UpdateConfigurationPolicyFunc: &StoreUpdateConfigurationPolicyFunc{
			defaultHook: func(context.Context, types.ConfigurationPolicy) error {
				panic("unexpected invocation of MockStore.UpdateConfigurationPolicy")
			},
		},
		UpdateReposMatchingPatternsFunc: &StoreUpdateReposMatchingPatternsFunc{
			defaultHook: func(context.Context, []string, int, *int) error {
				panic("unexpected invocation of MockStore.UpdateReposMatchingPatterns")
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom(i store.Store) *MockStore {
	return &MockStore{
		CreateConfigurationPolicyFunc: &StoreCreateConfigurationPolicyFunc{
			defaultHook: i.CreateConfigurationPolicy,
		},
		DeleteConfigurationPolicyByIDFunc: &StoreDeleteConfigurationPolicyByIDFunc{
			defaultHook: i.DeleteConfigurationPolicyByID,
		},
		GetConfigurationPoliciesFunc: &StoreGetConfigurationPoliciesFunc{
			defaultHook: i.GetConfigurationPolicies,
		},
		GetConfigurationPolicyByIDFunc: &StoreGetConfigurationPolicyByIDFunc{
			defaultHook: i.GetConfigurationPolicyByID,
		},
		GetRepoIDsByGlobPatternsFunc: &StoreGetRepoIDsByGlobPatternsFunc{
			defaultHook: i.GetRepoIDsByGlobPatterns,
		},
		GetUnsafeDBFunc: &StoreGetUnsafeDBFunc{
			defaultHook: i.GetUnsafeDB,
		},
		RepoCountFunc: &StoreRepoCountFunc{
			defaultHook: i.RepoCount,
		},
		SelectPoliciesForRepositoryMembershipUpdateFunc: &StoreSelectPoliciesForRepositoryMembershipUpdateFunc{
			defaultHook: i.SelectPoliciesForRepositoryMembershipUpdate,
		},
		UpdateConfigurationPolicyFunc: &StoreUpdateConfigurationPolicyFunc{
			defaultHook: i.UpdateConfigurationPolicy,
		},
		UpdateReposMatchingPatternsFunc: &StoreUpdateReposMatchingPatternsFunc{
			defaultHook: i.UpdateReposMatchingPatterns,
		},
	}
}

// StoreCreateConfigurationPolicyFunc describes the behavior when the
// CreateConfigurationPolicy method of the parent MockStore instance is
// invoked.
type StoreCreateConfigurationPolicyFunc struct {
	defaultHook func(context.Context, types.ConfigurationPolicy) (types.ConfigurationPolicy, error)
	hooks       []func(context.Context, types.ConfigurationPolicy) (types.ConfigurationPolicy, error)
	history     []StoreCreateConfigurationPolicyFuncCall
	mutex       sync.Mutex
}

// CreateConfigurationPolicy delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) CreateConfigurationPolicy(v0 context.Context, v1 types.ConfigurationPolicy) (types.ConfigurationPolicy, error) {
	r0, r1 := m.CreateConfigurationPolicyFunc.nextHook()(v0, v1)
	m.CreateConfigurationPolicyFunc.appendCall(StoreCreateConfigurationPolicyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateConfigurationPolicy method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreCreateConfigurationPolicyFunc) SetDefaultHook(hook func(context.Context, types.ConfigurationPolicy) (types.ConfigurationPolicy, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateConfigurationPolicy method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreCreateConfigurationPolicyFunc) PushHook(hook func(context.Context, types.ConfigurationPolicy) (types.ConfigurationPolicy, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreCreateConfigurationPolicyFunc) SetDefaultReturn(r0 types.ConfigurationPolicy, r1 error) {
	f.SetDefaultHook(func(context.Context, types.ConfigurationPolicy) (types.ConfigurationPolicy, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreCreateConfigurationPolicyFunc) PushReturn(r0 types.ConfigurationPolicy, r1 error) {
	f.PushHook(func(context.Context, types.ConfigurationPolicy) (types.ConfigurationPolicy, error) {
		return r0, r1
	})
}

func (f *StoreCreateConfigurationPolicyFunc) nextHook() func(context.Context, types.ConfigurationPolicy) (types.ConfigurationPolicy, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreCreateConfigurationPolicyFunc) appendCall(r0 StoreCreateConfigurationPolicyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreCreateConfigurationPolicyFuncCall
// objects describing the invocations of this function.
func (f *StoreCreateConfigurationPolicyFunc) History() []StoreCreateConfigurationPolicyFuncCall {
	f.mutex.Lock()
	history := make([]StoreCreateConfigurationPolicyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreCreateConfigurationPolicyFuncCall is an object that describes an
// invocation of method CreateConfigurationPolicy on an instance of
// MockStore.
type StoreCreateConfigurationPolicyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.ConfigurationPolicy
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.ConfigurationPolicy
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreCreateConfigurationPolicyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreCreateConfigurationPolicyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreDeleteConfigurationPolicyByIDFunc describes the behavior when the
// DeleteConfigurationPolicyByID method of the parent MockStore instance is
// invoked.
type StoreDeleteConfigurationPolicyByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []StoreDeleteConfigurationPolicyByIDFuncCall
	mutex       sync.Mutex
}

// DeleteConfigurationPolicyByID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) DeleteConfigurationPolicyByID(v0 context.Context, v1 int) error {
	r0 := m.DeleteConfigurationPolicyByIDFunc.nextHook()(v0, v1)
	m.DeleteConfigurationPolicyByIDFunc.appendCall(StoreDeleteConfigurationPolicyByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteConfigurationPolicyByID method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreDeleteConfigurationPolicyByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteConfigurationPolicyByID method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreDeleteConfigurationPolicyByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteConfigurationPolicyByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteConfigurationPolicyByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *StoreDeleteConfigurationPolicyByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteConfigurationPolicyByIDFunc) appendCall(r0 StoreDeleteConfigurationPolicyByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteConfigurationPolicyByIDFuncCall
// objects describing the invocations of this function.
func (f *StoreDeleteConfigurationPolicyByIDFunc) History() []StoreDeleteConfigurationPolicyByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteConfigurationPolicyByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteConfigurationPolicyByIDFuncCall is an object that describes an
// invocation of method DeleteConfigurationPolicyByID on an instance of
// MockStore.
type StoreDeleteConfigurationPolicyByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteConfigurationPolicyByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteConfigurationPolicyByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreGetConfigurationPoliciesFunc describes the behavior when the
// GetConfigurationPolicies method of the parent MockStore instance is
// invoked.
type StoreGetConfigurationPoliciesFunc struct {
	defaultHook func(context.Context, shared.GetConfigurationPoliciesOptions) ([]types.ConfigurationPolicy, int, error)
	hooks       []func(context.Context, shared.GetConfigurationPoliciesOptions) ([]types.ConfigurationPolicy, int, error)
	history     []StoreGetConfigurationPoliciesFuncCall
	mutex       sync.Mutex
}

// GetConfigurationPolicies delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) GetConfigurationPolicies(v0 context.Context, v1 shared.GetConfigurationPoliciesOptions) ([]types.ConfigurationPolicy, int, error) {
	r0, r1, r2 := m.GetConfigurationPoliciesFunc.nextHook()(v0, v1)
	m.GetConfigurationPoliciesFunc.appendCall(StoreGetConfigurationPoliciesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetConfigurationPolicies method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetConfigurationPoliciesFunc) SetDefaultHook(hook func(context.Context, shared.GetConfigurationPoliciesOptions) ([]types.ConfigurationPolicy, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetConfigurationPolicies method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreGetConfigurationPoliciesFunc) PushHook(hook func(context.Context, shared.GetConfigurationPoliciesOptions) ([]types.ConfigurationPolicy, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetConfigurationPoliciesFunc) SetDefaultReturn(r0 []types.ConfigurationPolicy, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.GetConfigurationPoliciesOptions) ([]types.ConfigurationPolicy, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetConfigurationPoliciesFunc) PushReturn(r0 []types.ConfigurationPolicy, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared.GetConfigurationPoliciesOptions) ([]types.ConfigurationPolicy, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetConfigurationPoliciesFunc) nextHook() func(context.Context, shared.GetConfigurationPoliciesOptions) ([]types.ConfigurationPolicy, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetConfigurationPoliciesFunc) appendCall(r0 StoreGetConfigurationPoliciesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetConfigurationPoliciesFuncCall
// objects describing the invocations of this function.
func (f *StoreGetConfigurationPoliciesFunc) History() []StoreGetConfigurationPoliciesFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetConfigurationPoliciesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetConfigurationPoliciesFuncCall is an object that describes an
// invocation of method GetConfigurationPolicies on an instance of
// MockStore.
type StoreGetConfigurationPoliciesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetConfigurationPoliciesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.ConfigurationPolicy
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetConfigurationPoliciesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetConfigurationPoliciesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetConfigurationPolicyByIDFunc describes the behavior when the
// GetConfigurationPolicyByID method of the parent MockStore instance is
// invoked.
type StoreGetConfigurationPolicyByIDFunc struct {
	defaultHook func(context.Context, int) (types.ConfigurationPolicy, bool, error)
	hooks       []func(context.Context, int) (types.ConfigurationPolicy, bool, error)
	history     []StoreGetConfigurationPolicyByIDFuncCall
	mutex       sync.Mutex
}

// GetConfigurationPolicyByID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) GetConfigurationPolicyByID(v0 context.Context, v1 int) (types.ConfigurationPolicy, bool, error) {
	r0, r1, r2 := m.GetConfigurationPolicyByIDFunc.nextHook()(v0, v1)
	m.GetConfigurationPolicyByIDFunc.appendCall(StoreGetConfigurationPolicyByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetConfigurationPolicyByID method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetConfigurationPolicyByIDFunc) SetDefaultHook(hook func(context.Context, int) (types.ConfigurationPolicy, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetConfigurationPolicyByID method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreGetConfigurationPolicyByIDFunc) PushHook(hook func(context.Context, int) (types.ConfigurationPolicy, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetConfigurationPolicyByIDFunc) SetDefaultReturn(r0 types.ConfigurationPolicy, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (types.ConfigurationPolicy, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetConfigurationPolicyByIDFunc) PushReturn(r0 types.ConfigurationPolicy, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (types.ConfigurationPolicy, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetConfigurationPolicyByIDFunc) nextHook() func(context.Context, int) (types.ConfigurationPolicy, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetConfigurationPolicyByIDFunc) appendCall(r0 StoreGetConfigurationPolicyByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetConfigurationPolicyByIDFuncCall
// objects describing the invocations of this function.
func (f *StoreGetConfigurationPolicyByIDFunc) History() []StoreGetConfigurationPolicyByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetConfigurationPolicyByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetConfigurationPolicyByIDFuncCall is an object that describes an
// invocation of method GetConfigurationPolicyByID on an instance of
// MockStore.
type StoreGetConfigurationPolicyByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.ConfigurationPolicy
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetConfigurationPolicyByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetConfigurationPolicyByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetRepoIDsByGlobPatternsFunc describes the behavior when the
// GetRepoIDsByGlobPatterns method of the parent MockStore instance is
// invoked.
type StoreGetRepoIDsByGlobPatternsFunc struct {
	defaultHook func(context.Context, []string, int, int) ([]int, int, error)
	hooks       []func(context.Context, []string, int, int) ([]int, int, error)
	history     []StoreGetRepoIDsByGlobPatternsFuncCall
	mutex       sync.Mutex
}

// GetRepoIDsByGlobPatterns delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) GetRepoIDsByGlobPatterns(v0 context.Context, v1 []string, v2 int, v3 int) ([]int, int, error) {
	r0, r1, r2 := m.GetRepoIDsByGlobPatternsFunc.nextHook()(v0, v1, v2, v3)
	m.GetRepoIDsByGlobPatternsFunc.appendCall(StoreGetRepoIDsByGlobPatternsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetRepoIDsByGlobPatterns method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreGetRepoIDsByGlobPatternsFunc) SetDefaultHook(hook func(context.Context, []string, int, int) ([]int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRepoIDsByGlobPatterns method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreGetRepoIDsByGlobPatternsFunc) PushHook(hook func(context.Context, []string, int, int) ([]int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetRepoIDsByGlobPatternsFunc) SetDefaultReturn(r0 []int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, []string, int, int) ([]int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetRepoIDsByGlobPatternsFunc) PushReturn(r0 []int, r1 int, r2 error) {
	f.PushHook(func(context.Context, []string, int, int) ([]int, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreGetRepoIDsByGlobPatternsFunc) nextHook() func(context.Context, []string, int, int) ([]int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetRepoIDsByGlobPatternsFunc) appendCall(r0 StoreGetRepoIDsByGlobPatternsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetRepoIDsByGlobPatternsFuncCall
// objects describing the invocations of this function.
func (f *StoreGetRepoIDsByGlobPatternsFunc) History() []StoreGetRepoIDsByGlobPatternsFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetRepoIDsByGlobPatternsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetRepoIDsByGlobPatternsFuncCall is an object that describes an
// invocation of method GetRepoIDsByGlobPatterns on an instance of
// MockStore.
type StoreGetRepoIDsByGlobPatternsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetRepoIDsByGlobPatternsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetRepoIDsByGlobPatternsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreGetUnsafeDBFunc describes the behavior when the GetUnsafeDB method
// of the parent MockStore instance is invoked.
type StoreGetUnsafeDBFunc struct {
	defaultHook func() database.DB
	hooks       []func() database.DB
	history     []StoreGetUnsafeDBFuncCall
	mutex       sync.Mutex
}

// GetUnsafeDB delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) GetUnsafeDB() database.DB {
	r0 := m.GetUnsafeDBFunc.nextHook()()
	m.GetUnsafeDBFunc.appendCall(StoreGetUnsafeDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetUnsafeDB method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreGetUnsafeDBFunc) SetDefaultHook(hook func() database.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUnsafeDB method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreGetUnsafeDBFunc) PushHook(hook func() database.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGetUnsafeDBFunc) SetDefaultReturn(r0 database.DB) {
	f.SetDefaultHook(func() database.DB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGetUnsafeDBFunc) PushReturn(r0 database.DB) {
	f.PushHook(func() database.DB {
		return r0
	})
}

func (f *StoreGetUnsafeDBFunc) nextHook() func() database.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGetUnsafeDBFunc) appendCall(r0 StoreGetUnsafeDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGetUnsafeDBFuncCall objects describing
// the invocations of this function.
func (f *StoreGetUnsafeDBFunc) History() []StoreGetUnsafeDBFuncCall {
	f.mutex.Lock()
	history := make([]StoreGetUnsafeDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGetUnsafeDBFuncCall is an object that describes an invocation of
// method GetUnsafeDB on an instance of MockStore.
type StoreGetUnsafeDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGetUnsafeDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGetUnsafeDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreRepoCountFunc describes the behavior when the RepoCount method of
// the parent MockStore instance is invoked.
type StoreRepoCountFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []StoreRepoCountFuncCall
	mutex       sync.Mutex
}

// RepoCount delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) RepoCount(v0 context.Context) (int, error) {
	r0, r1 := m.RepoCountFunc.nextHook()(v0)
	m.RepoCountFunc.appendCall(StoreRepoCountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCount method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreRepoCountFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCount method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreRepoCountFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreRepoCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreRepoCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *StoreRepoCountFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreRepoCountFunc) appendCall(r0 StoreRepoCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreRepoCountFuncCall objects describing
// the invocations of this function.
func (f *StoreRepoCountFunc) History() []StoreRepoCountFuncCall {
	f.mutex.Lock()
	history := make([]StoreRepoCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreRepoCountFuncCall is an object that describes an invocation of
// method RepoCount on an instance of MockStore.
type StoreRepoCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreRepoCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreRepoCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreSelectPoliciesForRepositoryMembershipUpdateFunc describes the
// behavior when the SelectPoliciesForRepositoryMembershipUpdate method of
// the parent MockStore instance is invoked.
type StoreSelectPoliciesForRepositoryMembershipUpdateFunc struct {
	defaultHook func(context.Context, int) ([]types.ConfigurationPolicy, error)
	hooks       []func(context.Context, int) ([]types.ConfigurationPolicy, error)
	history     []StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall
	mutex       sync.Mutex
}

// SelectPoliciesForRepositoryMembershipUpdate delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockStore) SelectPoliciesForRepositoryMembershipUpdate(v0 context.Context, v1 int) ([]types.ConfigurationPolicy, error) {
	r0, r1 := m.SelectPoliciesForRepositoryMembershipUpdateFunc.nextHook()(v0, v1)
	m.SelectPoliciesForRepositoryMembershipUpdateFunc.appendCall(StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SelectPoliciesForRepositoryMembershipUpdate method of the parent
// MockStore instance is invoked and the hook queue is empty.
func (f *StoreSelectPoliciesForRepositoryMembershipUpdateFunc) SetDefaultHook(hook func(context.Context, int) ([]types.ConfigurationPolicy, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SelectPoliciesForRepositoryMembershipUpdate method of the parent
// MockStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *StoreSelectPoliciesForRepositoryMembershipUpdateFunc) PushHook(hook func(context.Context, int) ([]types.ConfigurationPolicy, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSelectPoliciesForRepositoryMembershipUpdateFunc) SetDefaultReturn(r0 []types.ConfigurationPolicy, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]types.ConfigurationPolicy, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSelectPoliciesForRepositoryMembershipUpdateFunc) PushReturn(r0 []types.ConfigurationPolicy, r1 error) {
	f.PushHook(func(context.Context, int) ([]types.ConfigurationPolicy, error) {
		return r0, r1
	})
}

func (f *StoreSelectPoliciesForRepositoryMembershipUpdateFunc) nextHook() func(context.Context, int) ([]types.ConfigurationPolicy, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSelectPoliciesForRepositoryMembershipUpdateFunc) appendCall(r0 StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall objects
// describing the invocations of this function.
func (f *StoreSelectPoliciesForRepositoryMembershipUpdateFunc) History() []StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall {
	f.mutex.Lock()
	history := make([]StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall is an object
// that describes an invocation of method
// SelectPoliciesForRepositoryMembershipUpdate on an instance of MockStore.
type StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.ConfigurationPolicy
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSelectPoliciesForRepositoryMembershipUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreUpdateConfigurationPolicyFunc describes the behavior when the
// UpdateConfigurationPolicy method of the parent MockStore instance is
// invoked.
type StoreUpdateConfigurationPolicyFunc struct {
	defaultHook func(context.Context, types.ConfigurationPolicy) error
	hooks       []func(context.Context, types.ConfigurationPolicy) error
	history     []StoreUpdateConfigurationPolicyFuncCall
	mutex       sync.Mutex
}

// UpdateConfigurationPolicy delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) UpdateConfigurationPolicy(v0 context.Context, v1 types.ConfigurationPolicy) error {
	r0 := m.UpdateConfigurationPolicyFunc.nextHook()(v0, v1)
	m.UpdateConfigurationPolicyFunc.appendCall(StoreUpdateConfigurationPolicyFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateConfigurationPolicy method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreUpdateConfigurationPolicyFunc) SetDefaultHook(hook func(context.Context, types.ConfigurationPolicy) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateConfigurationPolicy method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreUpdateConfigurationPolicyFunc) PushHook(hook func(context.Context, types.ConfigurationPolicy) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdateConfigurationPolicyFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, types.ConfigurationPolicy) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdateConfigurationPolicyFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, types.ConfigurationPolicy) error {
		return r0
	})
}

func (f *StoreUpdateConfigurationPolicyFunc) nextHook() func(context.Context, types.ConfigurationPolicy) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdateConfigurationPolicyFunc) appendCall(r0 StoreUpdateConfigurationPolicyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdateConfigurationPolicyFuncCall
// objects describing the invocations of this function.
func (f *StoreUpdateConfigurationPolicyFunc) History() []StoreUpdateConfigurationPolicyFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdateConfigurationPolicyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdateConfigurationPolicyFuncCall is an object that describes an
// invocation of method UpdateConfigurationPolicy on an instance of
// MockStore.
type StoreUpdateConfigurationPolicyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.ConfigurationPolicy
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdateConfigurationPolicyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdateConfigurationPolicyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreUpdateReposMatchingPatternsFunc describes the behavior when the
// UpdateReposMatchingPatterns method of the parent MockStore instance is
// invoked.
type StoreUpdateReposMatchingPatternsFunc struct {
	defaultHook func(context.Context, []string, int, *int) error
	hooks       []func(context.Context, []string, int, *int) error
	history     []StoreUpdateReposMatchingPatternsFuncCall
	mutex       sync.Mutex
}

// UpdateReposMatchingPatterns delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) UpdateReposMatchingPatterns(v0 context.Context, v1 []string, v2 int, v3 *int) error {
	r0 := m.UpdateReposMatchingPatternsFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateReposMatchingPatternsFunc.appendCall(StoreUpdateReposMatchingPatternsFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateReposMatchingPatterns method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreUpdateReposMatchingPatternsFunc) SetDefaultHook(hook func(context.Context, []string, int, *int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateReposMatchingPatterns method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreUpdateReposMatchingPatternsFunc) PushHook(hook func(context.Context, []string, int, *int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdateReposMatchingPatternsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []string, int, *int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdateReposMatchingPatternsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []string, int, *int) error {
		return r0
	})
}

func (f *StoreUpdateReposMatchingPatternsFunc) nextHook() func(context.Context, []string, int, *int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdateReposMatchingPatternsFunc) appendCall(r0 StoreUpdateReposMatchingPatternsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdateReposMatchingPatternsFuncCall
// objects describing the invocations of this function.
func (f *StoreUpdateReposMatchingPatternsFunc) History() []StoreUpdateReposMatchingPatternsFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdateReposMatchingPatternsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdateReposMatchingPatternsFuncCall is an object that describes an
// invocation of method UpdateReposMatchingPatterns on an instance of
// MockStore.
type StoreUpdateReposMatchingPatternsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdateReposMatchingPatternsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdateReposMatchingPatternsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverClient is a mock implementation of the GitserverClient
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/policies)
// used for unit testing.
type MockGitserverClient struct {
	// CommitDateFunc is an instance of a mock function object controlling
	// the behavior of the method CommitDate.
	CommitDateFunc *GitserverClientCommitDateFunc
	// CommitsUniqueToBranchFunc is an instance of a mock function object
	// controlling the behavior of the method CommitsUniqueToBranch.
	CommitsUniqueToBranchFunc *GitserverClientCommitsUniqueToBranchFunc
	// RefDescriptionsFunc is an instance of a mock function object
	// controlling the behavior of the method RefDescriptions.
	RefDescriptionsFunc *GitserverClientRefDescriptionsFunc
}

// NewMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		CommitDateFunc: &GitserverClientCommitDateFunc{
			defaultHook: func(context.Context, int, string) (r0 string, r1 time.Time, r2 bool, r3 error) {
				return
			},
		},
		CommitsUniqueToBranchFunc: &GitserverClientCommitsUniqueToBranchFunc{
			defaultHook: func(context.Context, int, string, bool, *time.Time) (r0 map[string]time.Time, r1 error) {
				return
			},
		},
		RefDescriptionsFunc: &GitserverClientRefDescriptionsFunc{
			defaultHook: func(context.Context, int, ...string) (r0 map[string][]gitdomain.RefDescription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		CommitDateFunc: &GitserverClientCommitDateFunc{
			defaultHook: func(context.Context, int, string) (string, time.Time, bool, error) {
				panic("unexpected invocation of MockGitserverClient.CommitDate")
			},
		},
		CommitsUniqueToBranchFunc: &GitserverClientCommitsUniqueToBranchFunc{
			defaultHook: func(context.Context, int, string, bool, *time.Time) (map[string]time.Time, error) {
				panic("unexpected invocation of MockGitserverClient.CommitsUniqueToBranch")
			},
		},
		RefDescriptionsFunc: &GitserverClientRefDescriptionsFunc{
			defaultHook: func(context.Context, int, ...string) (map[string][]gitdomain.RefDescription, error) {
				panic("unexpected invocation of MockGitserverClient.RefDescriptions")
			},
		},
	}
}

// NewMockGitserverClientFrom creates a new mock of the MockGitserverClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient {
	return &MockGitserverClient{
		CommitDateFunc: &GitserverClientCommitDateFunc{
			defaultHook: i.CommitDate,
		},
		CommitsUniqueToBranchFunc: &GitserverClientCommitsUniqueToBranchFunc{
			defaultHook: i.CommitsUniqueToBranch,
		},
		RefDescriptionsFunc: &GitserverClientRefDescriptionsFunc{
			defaultHook: i.RefDescriptions,
		},
	}
}

// GitserverClientCommitDateFunc describes the behavior when the CommitDate
// method of the parent MockGitserverClient instance is invoked.
type GitserverClientCommitDateFunc struct {
	defaultHook func(context.Context, int, string) (string, time.Time, bool, error)
	hooks       []func(context.Context, int, string) (string, time.Time, bool, error)
	history     []GitserverClientCommitDateFuncCall
	mutex       sync.Mutex
}

// CommitDate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitDate(v0 context.Context, v1 int, v2 string) (string, time.Time, bool, error) {
	r0, r1, r2, r3 := m.CommitDateFunc.nextHook()(v0, v1, v2)
	m.CommitDateFunc.appendCall(GitserverClientCommitDateFuncCall{v0, v1, v2, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the CommitDate method of
// the parent MockGitserverClient instance is invoked and the hook queue is
// empty.
func (f *GitserverClientCommitDateFunc) SetDefaultHook(hook func(context.Context, int, string) (string, time.Time, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitDate method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientCommitDateFunc) PushHook(hook func(context.Context, int, string) (string, time.Time, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitDateFunc) SetDefaultReturn(r0 string, r1 time.Time, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, int, string) (string, time.Time, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitDateFunc) PushReturn(r0 string, r1 time.Time, r2 bool, r3 error) {
	f.PushHook(func(context.Context, int, string) (string, time.Time, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *GitserverClientCommitDateFunc) nextHook() func(context.Context, int, string) (string, time.Time, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitDateFunc) appendCall(r0 GitserverClientCommitDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientCommitDateFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientCommitDateFunc) History() []GitserverClientCommitDateFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitDateFuncCall is an object that describes an
// invocation of method CommitDate on an instance of MockGitserverClient.
type GitserverClientCommitDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 time.Time
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// GitserverClientCommitsUniqueToBranchFunc describes the behavior when the
// CommitsUniqueToBranch method of the parent MockGitserverClient instance
// is invoked.
type GitserverClientCommitsUniqueToBranchFunc struct {
	defaultHook func(context.Context, int, string, bool, *time.Time) (map[string]time.Time, error)
	hooks       []func(context.Context, int, string, bool, *time.Time) (map[string]time.Time, error)
	history     []GitserverClientCommitsUniqueToBranchFuncCall
	mutex       sync.Mutex
}

// CommitsUniqueToBranch delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverClient) CommitsUniqueToBranch(v0 context.Context, v1 int, v2 string, v3 bool, v4 *time.Time) (map[string]time.Time, error) {
	r0, r1 := m.CommitsUniqueToBranchFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CommitsUniqueToBranchFunc.appendCall(GitserverClientCommitsUniqueToBranchFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CommitsUniqueToBranch method of the parent MockGitserverClient instance
// is invoked and the hook queue is empty.
func (f *GitserverClientCommitsUniqueToBranchFunc) SetDefaultHook(hook func(context.Context, int, string, bool, *time.Time) (map[string]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitsUniqueToBranch method of the parent MockGitserverClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverClientCommitsUniqueToBranchFunc) PushHook(hook func(context.Context, int, string, bool, *time.Time) (map[string]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientCommitsUniqueToBranchFunc) SetDefaultReturn(r0 map[string]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, bool, *time.Time) (map[string]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientCommitsUniqueToBranchFunc) PushReturn(r0 map[string]time.Time, r1 error) {
	f.PushHook(func(context.Context, int, string, bool, *time.Time) (map[string]time.Time, error) {
		return r0, r1
	})
}

func (f *GitserverClientCommitsUniqueToBranchFunc) nextHook() func(context.Context, int, string, bool, *time.Time) (map[string]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientCommitsUniqueToBranchFunc) appendCall(r0 GitserverClientCommitsUniqueToBranchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverClientCommitsUniqueToBranchFuncCall objects describing the
// invocations of this function.
func (f *GitserverClientCommitsUniqueToBranchFunc) History() []GitserverClientCommitsUniqueToBranchFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientCommitsUniqueToBranchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientCommitsUniqueToBranchFuncCall is an object that describes
// an invocation of method CommitsUniqueToBranch on an instance of
// MockGitserverClient.
type GitserverClientCommitsUniqueToBranchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientCommitsUniqueToBranchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientCommitsUniqueToBranchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverClientRefDescriptionsFunc describes the behavior when the
// RefDescriptions method of the parent MockGitserverClient instance is
// invoked.
type GitserverClientRefDescriptionsFunc struct {
	defaultHook func(context.Context, int, ...string) (map[string][]gitdomain.RefDescription, error)
	hooks       []func(context.Context, int, ...string) (map[string][]gitdomain.RefDescription, error)
	history     []GitserverClientRefDescriptionsFuncCall
	mutex       sync.Mutex
}

// RefDescriptions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverClient) RefDescriptions(v0 context.Context, v1 int, v2 ...string) (map[string][]gitdomain.RefDescription, error) {
	r0, r1 := m.RefDescriptionsFunc.nextHook()(v0, v1, v2...)
	m.RefDescriptionsFunc.appendCall(GitserverClientRefDescriptionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RefDescriptions
// method of the parent MockGitserverClient instance is invoked and the hook
// queue is empty.
func (f *GitserverClientRefDescriptionsFunc) SetDefaultHook(hook func(context.Context, int, ...string) (map[string][]gitdomain.RefDescription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RefDescriptions method of the parent MockGitserverClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverClientRefDescriptionsFunc) PushHook(hook func(context.Context, int, ...string) (map[string][]gitdomain.RefDescription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientRefDescriptionsFunc) SetDefaultReturn(r0 map[string][]gitdomain.RefDescription, r1 error) {
	f.SetDefaultHook(func(context.Context, int, ...string) (map[string][]gitdomain.RefDescription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientRefDescriptionsFunc) PushReturn(r0 map[string][]gitdomain.RefDescription, r1 error) {
	f.PushHook(func(context.Context, int, ...string) (map[string][]gitdomain.RefDescription, error) {
		return r0, r1
	})
}

func (f *GitserverClientRefDescriptionsFunc) nextHook() func(context.Context, int, ...string) (map[string][]gitdomain.RefDescription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientRefDescriptionsFunc) appendCall(r0 GitserverClientRefDescriptionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientRefDescriptionsFuncCall
// objects describing the invocations of this function.
func (f *GitserverClientRefDescriptionsFunc) History() []GitserverClientRefDescriptionsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientRefDescriptionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientRefDescriptionsFuncCall is an object that describes an
// invocation of method RefDescriptions on an instance of
// MockGitserverClient.
type GitserverClientRefDescriptionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][]gitdomain.RefDescription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverClientRefDescriptionsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientRefDescriptionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockUploadService is a mock implementation of the UploadService interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/policies)
// used for unit testing.
type MockUploadService struct {
	// GetCommitsVisibleToUploadFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetCommitsVisibleToUpload.
	GetCommitsVisibleToUploadFunc *UploadServiceGetCommitsVisibleToUploadFunc
}

// NewMockUploadService creates a new mock of the UploadService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUploadService() *MockUploadService {
	return &MockUploadService{
		GetCommitsVisibleToUploadFunc: &UploadServiceGetCommitsVisibleToUploadFunc{
			defaultHook: func(context.Context, int, int, *string) (r0 []string, r1 *string, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockUploadService creates a new mock of the UploadService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUploadService() *MockUploadService {
	return &MockUploadService{
		GetCommitsVisibleToUploadFunc: &UploadServiceGetCommitsVisibleToUploadFunc{
			defaultHook: func(context.Context, int, int, *string) ([]string, *string, error) {
				panic("unexpected invocation of MockUploadService.GetCommitsVisibleToUpload")
			},
		},
	}
}

// NewMockUploadServiceFrom creates a new mock of the MockUploadService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUploadServiceFrom(i UploadService) *MockUploadService {
	return &MockUploadService{
		GetCommitsVisibleToUploadFunc: &UploadServiceGetCommitsVisibleToUploadFunc{
			defaultHook: i.GetCommitsVisibleToUpload,
		},
	}
}

// UploadServiceGetCommitsVisibleToUploadFunc describes the behavior when
// the GetCommitsVisibleToUpload method of the parent MockUploadService
// instance is invoked.
type UploadServiceGetCommitsVisibleToUploadFunc struct {
	defaultHook func(context.Context, int, int, *string) ([]string, *string, error)
	hooks       []func(context.Context, int, int, *string) ([]string, *string, error)
	history     []UploadServiceGetCommitsVisibleToUploadFuncCall
	mutex       sync.Mutex
}

// GetCommitsVisibleToUpload delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUploadService) GetCommitsVisibleToUpload(v0 context.Context, v1 int, v2 int, v3 *string) ([]string, *string, error) {
	r0, r1, r2 := m.GetCommitsVisibleToUploadFunc.nextHook()(v0, v1, v2, v3)
	m.GetCommitsVisibleToUploadFunc.appendCall(UploadServiceGetCommitsVisibleToUploadFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetCommitsVisibleToUpload method of the parent MockUploadService instance
// is invoked and the hook queue is empty.
func (f *UploadServiceGetCommitsVisibleToUploadFunc) SetDefaultHook(hook func(context.Context, int, int, *string) ([]string, *string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommitsVisibleToUpload method of the parent MockUploadService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadServiceGetCommitsVisibleToUploadFunc) PushHook(hook func(context.Context, int, int, *string) ([]string, *string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadServiceGetCommitsVisibleToUploadFunc) SetDefaultReturn(r0 []string, r1 *string, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int, *string) ([]string, *string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadServiceGetCommitsVisibleToUploadFunc) PushReturn(r0 []string, r1 *string, r2 error) {
	f.PushHook(func(context.Context, int, int, *string) ([]string, *string, error) {
		return r0, r1, r2
	})
}

func (f *UploadServiceGetCommitsVisibleToUploadFunc) nextHook() func(context.Context, int, int, *string) ([]string, *string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadServiceGetCommitsVisibleToUploadFunc) appendCall(r0 UploadServiceGetCommitsVisibleToUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadServiceGetCommitsVisibleToUploadFuncCall objects describing the
// invocations of this function.
func (f *UploadServiceGetCommitsVisibleToUploadFunc) History() []UploadServiceGetCommitsVisibleToUploadFuncCall {
	f.mutex.Lock()
	history := make([]UploadServiceGetCommitsVisibleToUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadServiceGetCommitsVisibleToUploadFuncCall is an object that
// describes an invocation of method GetCommitsVisibleToUpload on an
// instance of MockUploadService.
type UploadServiceGetCommitsVisibleToUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadServiceGetCommitsVisibleToUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadServiceGetCommitsVisibleToUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}
