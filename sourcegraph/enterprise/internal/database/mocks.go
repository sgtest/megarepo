// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package database

import (
	"context"
	"database/sql"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	encryption "github.com/sourcegraph/sourcegraph/internal/encryption"
)

// MockEnterpriseDB is a mock implementation of the EnterpriseDB interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/database) used for
// unit testing.
type MockEnterpriseDB struct {
	// AccessTokensFunc is an instance of a mock function object controlling
	// the behavior of the method AccessTokens.
	AccessTokensFunc *EnterpriseDBAccessTokensFunc
	// AuthzFunc is an instance of a mock function object controlling the
	// behavior of the method Authz.
	AuthzFunc *EnterpriseDBAuthzFunc
	// ConfFunc is an instance of a mock function object controlling the
	// behavior of the method Conf.
	ConfFunc *EnterpriseDBConfFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *EnterpriseDBDoneFunc
	// EventLogsFunc is an instance of a mock function object controlling
	// the behavior of the method EventLogs.
	EventLogsFunc *EnterpriseDBEventLogsFunc
	// ExecContextFunc is an instance of a mock function object controlling
	// the behavior of the method ExecContext.
	ExecContextFunc *EnterpriseDBExecContextFunc
	// ExecutorsFunc is an instance of a mock function object controlling
	// the behavior of the method Executors.
	ExecutorsFunc *EnterpriseDBExecutorsFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *EnterpriseDBExternalServicesFunc
	// FeatureFlagsFunc is an instance of a mock function object controlling
	// the behavior of the method FeatureFlags.
	FeatureFlagsFunc *EnterpriseDBFeatureFlagsFunc
	// GitserverReposFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverRepos.
	GitserverReposFunc *EnterpriseDBGitserverReposFunc
	// GlobalStateFunc is an instance of a mock function object controlling
	// the behavior of the method GlobalState.
	GlobalStateFunc *EnterpriseDBGlobalStateFunc
	// NamespacesFunc is an instance of a mock function object controlling
	// the behavior of the method Namespaces.
	NamespacesFunc *EnterpriseDBNamespacesFunc
	// OrgInvitationsFunc is an instance of a mock function object
	// controlling the behavior of the method OrgInvitations.
	OrgInvitationsFunc *EnterpriseDBOrgInvitationsFunc
	// OrgMembersFunc is an instance of a mock function object controlling
	// the behavior of the method OrgMembers.
	OrgMembersFunc *EnterpriseDBOrgMembersFunc
	// OrgStatsFunc is an instance of a mock function object controlling the
	// behavior of the method OrgStats.
	OrgStatsFunc *EnterpriseDBOrgStatsFunc
	// OrgsFunc is an instance of a mock function object controlling the
	// behavior of the method Orgs.
	OrgsFunc *EnterpriseDBOrgsFunc
	// PhabricatorFunc is an instance of a mock function object controlling
	// the behavior of the method Phabricator.
	PhabricatorFunc *EnterpriseDBPhabricatorFunc
	// QueryContextFunc is an instance of a mock function object controlling
	// the behavior of the method QueryContext.
	QueryContextFunc *EnterpriseDBQueryContextFunc
	// QueryRowContextFunc is an instance of a mock function object
	// controlling the behavior of the method QueryRowContext.
	QueryRowContextFunc *EnterpriseDBQueryRowContextFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *EnterpriseDBReposFunc
	// SavedSearchesFunc is an instance of a mock function object
	// controlling the behavior of the method SavedSearches.
	SavedSearchesFunc *EnterpriseDBSavedSearchesFunc
	// SearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method SearchContexts.
	SearchContextsFunc *EnterpriseDBSearchContextsFunc
	// SettingsFunc is an instance of a mock function object controlling the
	// behavior of the method Settings.
	SettingsFunc *EnterpriseDBSettingsFunc
	// SubRepoPermsFunc is an instance of a mock function object controlling
	// the behavior of the method SubRepoPerms.
	SubRepoPermsFunc *EnterpriseDBSubRepoPermsFunc
	// TemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method TemporarySettings.
	TemporarySettingsFunc *EnterpriseDBTemporarySettingsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *EnterpriseDBTransactFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *EnterpriseDBUserCredentialsFunc
	// UserEmailsFunc is an instance of a mock function object controlling
	// the behavior of the method UserEmails.
	UserEmailsFunc *EnterpriseDBUserEmailsFunc
	// UserExternalAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method UserExternalAccounts.
	UserExternalAccountsFunc *EnterpriseDBUserExternalAccountsFunc
	// UserPublicReposFunc is an instance of a mock function object
	// controlling the behavior of the method UserPublicRepos.
	UserPublicReposFunc *EnterpriseDBUserPublicReposFunc
	// UsersFunc is an instance of a mock function object controlling the
	// behavior of the method Users.
	UsersFunc *EnterpriseDBUsersFunc
	// WebhookLogsFunc is an instance of a mock function object controlling
	// the behavior of the method WebhookLogs.
	WebhookLogsFunc *EnterpriseDBWebhookLogsFunc
}

// NewMockEnterpriseDB creates a new mock of the EnterpriseDB interface. All
// methods return zero values for all results, unless overwritten.
func NewMockEnterpriseDB() *MockEnterpriseDB {
	return &MockEnterpriseDB{
		AccessTokensFunc: &EnterpriseDBAccessTokensFunc{
			defaultHook: func() database.AccessTokenStore {
				return nil
			},
		},
		AuthzFunc: &EnterpriseDBAuthzFunc{
			defaultHook: func() database.AuthzStore {
				return nil
			},
		},
		ConfFunc: &EnterpriseDBConfFunc{
			defaultHook: func() database.ConfStore {
				return nil
			},
		},
		DoneFunc: &EnterpriseDBDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		EventLogsFunc: &EnterpriseDBEventLogsFunc{
			defaultHook: func() database.EventLogStore {
				return nil
			},
		},
		ExecContextFunc: &EnterpriseDBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (sql.Result, error) {
				return nil, nil
			},
		},
		ExecutorsFunc: &EnterpriseDBExecutorsFunc{
			defaultHook: func() database.ExecutorStore {
				return nil
			},
		},
		ExternalServicesFunc: &EnterpriseDBExternalServicesFunc{
			defaultHook: func() database.ExternalServiceStore {
				return nil
			},
		},
		FeatureFlagsFunc: &EnterpriseDBFeatureFlagsFunc{
			defaultHook: func() database.FeatureFlagStore {
				return nil
			},
		},
		GitserverReposFunc: &EnterpriseDBGitserverReposFunc{
			defaultHook: func() database.GitserverRepoStore {
				return nil
			},
		},
		GlobalStateFunc: &EnterpriseDBGlobalStateFunc{
			defaultHook: func() database.GlobalStateStore {
				return nil
			},
		},
		NamespacesFunc: &EnterpriseDBNamespacesFunc{
			defaultHook: func() database.NamespaceStore {
				return nil
			},
		},
		OrgInvitationsFunc: &EnterpriseDBOrgInvitationsFunc{
			defaultHook: func() database.OrgInvitationStore {
				return nil
			},
		},
		OrgMembersFunc: &EnterpriseDBOrgMembersFunc{
			defaultHook: func() database.OrgMemberStore {
				return nil
			},
		},
		OrgStatsFunc: &EnterpriseDBOrgStatsFunc{
			defaultHook: func() database.OrgStatsStore {
				return nil
			},
		},
		OrgsFunc: &EnterpriseDBOrgsFunc{
			defaultHook: func() database.OrgStore {
				return nil
			},
		},
		PhabricatorFunc: &EnterpriseDBPhabricatorFunc{
			defaultHook: func() database.PhabricatorStore {
				return nil
			},
		},
		QueryContextFunc: &EnterpriseDBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (*sql.Rows, error) {
				return nil, nil
			},
		},
		QueryRowContextFunc: &EnterpriseDBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) *sql.Row {
				return nil
			},
		},
		ReposFunc: &EnterpriseDBReposFunc{
			defaultHook: func() database.RepoStore {
				return nil
			},
		},
		SavedSearchesFunc: &EnterpriseDBSavedSearchesFunc{
			defaultHook: func() database.SavedSearchStore {
				return nil
			},
		},
		SearchContextsFunc: &EnterpriseDBSearchContextsFunc{
			defaultHook: func() database.SearchContextsStore {
				return nil
			},
		},
		SettingsFunc: &EnterpriseDBSettingsFunc{
			defaultHook: func() database.SettingsStore {
				return nil
			},
		},
		SubRepoPermsFunc: &EnterpriseDBSubRepoPermsFunc{
			defaultHook: func() database.SubRepoPermsStore {
				return nil
			},
		},
		TemporarySettingsFunc: &EnterpriseDBTemporarySettingsFunc{
			defaultHook: func() database.TemporarySettingsStore {
				return nil
			},
		},
		TransactFunc: &EnterpriseDBTransactFunc{
			defaultHook: func(context.Context) (database.DB, error) {
				return nil, nil
			},
		},
		UserCredentialsFunc: &EnterpriseDBUserCredentialsFunc{
			defaultHook: func(encryption.Key) database.UserCredentialsStore {
				return nil
			},
		},
		UserEmailsFunc: &EnterpriseDBUserEmailsFunc{
			defaultHook: func() database.UserEmailsStore {
				return nil
			},
		},
		UserExternalAccountsFunc: &EnterpriseDBUserExternalAccountsFunc{
			defaultHook: func() database.UserExternalAccountsStore {
				return nil
			},
		},
		UserPublicReposFunc: &EnterpriseDBUserPublicReposFunc{
			defaultHook: func() database.UserPublicRepoStore {
				return nil
			},
		},
		UsersFunc: &EnterpriseDBUsersFunc{
			defaultHook: func() database.UserStore {
				return nil
			},
		},
		WebhookLogsFunc: &EnterpriseDBWebhookLogsFunc{
			defaultHook: func(encryption.Key) database.WebhookLogStore {
				return nil
			},
		},
	}
}

// NewStrictMockEnterpriseDB creates a new mock of the EnterpriseDB
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockEnterpriseDB() *MockEnterpriseDB {
	return &MockEnterpriseDB{
		AccessTokensFunc: &EnterpriseDBAccessTokensFunc{
			defaultHook: func() database.AccessTokenStore {
				panic("unexpected invocation of MockEnterpriseDB.AccessTokens")
			},
		},
		AuthzFunc: &EnterpriseDBAuthzFunc{
			defaultHook: func() database.AuthzStore {
				panic("unexpected invocation of MockEnterpriseDB.Authz")
			},
		},
		ConfFunc: &EnterpriseDBConfFunc{
			defaultHook: func() database.ConfStore {
				panic("unexpected invocation of MockEnterpriseDB.Conf")
			},
		},
		DoneFunc: &EnterpriseDBDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockEnterpriseDB.Done")
			},
		},
		EventLogsFunc: &EnterpriseDBEventLogsFunc{
			defaultHook: func() database.EventLogStore {
				panic("unexpected invocation of MockEnterpriseDB.EventLogs")
			},
		},
		ExecContextFunc: &EnterpriseDBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (sql.Result, error) {
				panic("unexpected invocation of MockEnterpriseDB.ExecContext")
			},
		},
		ExecutorsFunc: &EnterpriseDBExecutorsFunc{
			defaultHook: func() database.ExecutorStore {
				panic("unexpected invocation of MockEnterpriseDB.Executors")
			},
		},
		ExternalServicesFunc: &EnterpriseDBExternalServicesFunc{
			defaultHook: func() database.ExternalServiceStore {
				panic("unexpected invocation of MockEnterpriseDB.ExternalServices")
			},
		},
		FeatureFlagsFunc: &EnterpriseDBFeatureFlagsFunc{
			defaultHook: func() database.FeatureFlagStore {
				panic("unexpected invocation of MockEnterpriseDB.FeatureFlags")
			},
		},
		GitserverReposFunc: &EnterpriseDBGitserverReposFunc{
			defaultHook: func() database.GitserverRepoStore {
				panic("unexpected invocation of MockEnterpriseDB.GitserverRepos")
			},
		},
		GlobalStateFunc: &EnterpriseDBGlobalStateFunc{
			defaultHook: func() database.GlobalStateStore {
				panic("unexpected invocation of MockEnterpriseDB.GlobalState")
			},
		},
		NamespacesFunc: &EnterpriseDBNamespacesFunc{
			defaultHook: func() database.NamespaceStore {
				panic("unexpected invocation of MockEnterpriseDB.Namespaces")
			},
		},
		OrgInvitationsFunc: &EnterpriseDBOrgInvitationsFunc{
			defaultHook: func() database.OrgInvitationStore {
				panic("unexpected invocation of MockEnterpriseDB.OrgInvitations")
			},
		},
		OrgMembersFunc: &EnterpriseDBOrgMembersFunc{
			defaultHook: func() database.OrgMemberStore {
				panic("unexpected invocation of MockEnterpriseDB.OrgMembers")
			},
		},
		OrgStatsFunc: &EnterpriseDBOrgStatsFunc{
			defaultHook: func() database.OrgStatsStore {
				panic("unexpected invocation of MockEnterpriseDB.OrgStats")
			},
		},
		OrgsFunc: &EnterpriseDBOrgsFunc{
			defaultHook: func() database.OrgStore {
				panic("unexpected invocation of MockEnterpriseDB.Orgs")
			},
		},
		PhabricatorFunc: &EnterpriseDBPhabricatorFunc{
			defaultHook: func() database.PhabricatorStore {
				panic("unexpected invocation of MockEnterpriseDB.Phabricator")
			},
		},
		QueryContextFunc: &EnterpriseDBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (*sql.Rows, error) {
				panic("unexpected invocation of MockEnterpriseDB.QueryContext")
			},
		},
		QueryRowContextFunc: &EnterpriseDBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) *sql.Row {
				panic("unexpected invocation of MockEnterpriseDB.QueryRowContext")
			},
		},
		ReposFunc: &EnterpriseDBReposFunc{
			defaultHook: func() database.RepoStore {
				panic("unexpected invocation of MockEnterpriseDB.Repos")
			},
		},
		SavedSearchesFunc: &EnterpriseDBSavedSearchesFunc{
			defaultHook: func() database.SavedSearchStore {
				panic("unexpected invocation of MockEnterpriseDB.SavedSearches")
			},
		},
		SearchContextsFunc: &EnterpriseDBSearchContextsFunc{
			defaultHook: func() database.SearchContextsStore {
				panic("unexpected invocation of MockEnterpriseDB.SearchContexts")
			},
		},
		SettingsFunc: &EnterpriseDBSettingsFunc{
			defaultHook: func() database.SettingsStore {
				panic("unexpected invocation of MockEnterpriseDB.Settings")
			},
		},
		SubRepoPermsFunc: &EnterpriseDBSubRepoPermsFunc{
			defaultHook: func() database.SubRepoPermsStore {
				panic("unexpected invocation of MockEnterpriseDB.SubRepoPerms")
			},
		},
		TemporarySettingsFunc: &EnterpriseDBTemporarySettingsFunc{
			defaultHook: func() database.TemporarySettingsStore {
				panic("unexpected invocation of MockEnterpriseDB.TemporarySettings")
			},
		},
		TransactFunc: &EnterpriseDBTransactFunc{
			defaultHook: func(context.Context) (database.DB, error) {
				panic("unexpected invocation of MockEnterpriseDB.Transact")
			},
		},
		UserCredentialsFunc: &EnterpriseDBUserCredentialsFunc{
			defaultHook: func(encryption.Key) database.UserCredentialsStore {
				panic("unexpected invocation of MockEnterpriseDB.UserCredentials")
			},
		},
		UserEmailsFunc: &EnterpriseDBUserEmailsFunc{
			defaultHook: func() database.UserEmailsStore {
				panic("unexpected invocation of MockEnterpriseDB.UserEmails")
			},
		},
		UserExternalAccountsFunc: &EnterpriseDBUserExternalAccountsFunc{
			defaultHook: func() database.UserExternalAccountsStore {
				panic("unexpected invocation of MockEnterpriseDB.UserExternalAccounts")
			},
		},
		UserPublicReposFunc: &EnterpriseDBUserPublicReposFunc{
			defaultHook: func() database.UserPublicRepoStore {
				panic("unexpected invocation of MockEnterpriseDB.UserPublicRepos")
			},
		},
		UsersFunc: &EnterpriseDBUsersFunc{
			defaultHook: func() database.UserStore {
				panic("unexpected invocation of MockEnterpriseDB.Users")
			},
		},
		WebhookLogsFunc: &EnterpriseDBWebhookLogsFunc{
			defaultHook: func(encryption.Key) database.WebhookLogStore {
				panic("unexpected invocation of MockEnterpriseDB.WebhookLogs")
			},
		},
	}
}

// NewMockEnterpriseDBFrom creates a new mock of the MockEnterpriseDB
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockEnterpriseDBFrom(i EnterpriseDB) *MockEnterpriseDB {
	return &MockEnterpriseDB{
		AccessTokensFunc: &EnterpriseDBAccessTokensFunc{
			defaultHook: i.AccessTokens,
		},
		AuthzFunc: &EnterpriseDBAuthzFunc{
			defaultHook: i.Authz,
		},
		ConfFunc: &EnterpriseDBConfFunc{
			defaultHook: i.Conf,
		},
		DoneFunc: &EnterpriseDBDoneFunc{
			defaultHook: i.Done,
		},
		EventLogsFunc: &EnterpriseDBEventLogsFunc{
			defaultHook: i.EventLogs,
		},
		ExecContextFunc: &EnterpriseDBExecContextFunc{
			defaultHook: i.ExecContext,
		},
		ExecutorsFunc: &EnterpriseDBExecutorsFunc{
			defaultHook: i.Executors,
		},
		ExternalServicesFunc: &EnterpriseDBExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		FeatureFlagsFunc: &EnterpriseDBFeatureFlagsFunc{
			defaultHook: i.FeatureFlags,
		},
		GitserverReposFunc: &EnterpriseDBGitserverReposFunc{
			defaultHook: i.GitserverRepos,
		},
		GlobalStateFunc: &EnterpriseDBGlobalStateFunc{
			defaultHook: i.GlobalState,
		},
		NamespacesFunc: &EnterpriseDBNamespacesFunc{
			defaultHook: i.Namespaces,
		},
		OrgInvitationsFunc: &EnterpriseDBOrgInvitationsFunc{
			defaultHook: i.OrgInvitations,
		},
		OrgMembersFunc: &EnterpriseDBOrgMembersFunc{
			defaultHook: i.OrgMembers,
		},
		OrgStatsFunc: &EnterpriseDBOrgStatsFunc{
			defaultHook: i.OrgStats,
		},
		OrgsFunc: &EnterpriseDBOrgsFunc{
			defaultHook: i.Orgs,
		},
		PhabricatorFunc: &EnterpriseDBPhabricatorFunc{
			defaultHook: i.Phabricator,
		},
		QueryContextFunc: &EnterpriseDBQueryContextFunc{
			defaultHook: i.QueryContext,
		},
		QueryRowContextFunc: &EnterpriseDBQueryRowContextFunc{
			defaultHook: i.QueryRowContext,
		},
		ReposFunc: &EnterpriseDBReposFunc{
			defaultHook: i.Repos,
		},
		SavedSearchesFunc: &EnterpriseDBSavedSearchesFunc{
			defaultHook: i.SavedSearches,
		},
		SearchContextsFunc: &EnterpriseDBSearchContextsFunc{
			defaultHook: i.SearchContexts,
		},
		SettingsFunc: &EnterpriseDBSettingsFunc{
			defaultHook: i.Settings,
		},
		SubRepoPermsFunc: &EnterpriseDBSubRepoPermsFunc{
			defaultHook: i.SubRepoPerms,
		},
		TemporarySettingsFunc: &EnterpriseDBTemporarySettingsFunc{
			defaultHook: i.TemporarySettings,
		},
		TransactFunc: &EnterpriseDBTransactFunc{
			defaultHook: i.Transact,
		},
		UserCredentialsFunc: &EnterpriseDBUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
		UserEmailsFunc: &EnterpriseDBUserEmailsFunc{
			defaultHook: i.UserEmails,
		},
		UserExternalAccountsFunc: &EnterpriseDBUserExternalAccountsFunc{
			defaultHook: i.UserExternalAccounts,
		},
		UserPublicReposFunc: &EnterpriseDBUserPublicReposFunc{
			defaultHook: i.UserPublicRepos,
		},
		UsersFunc: &EnterpriseDBUsersFunc{
			defaultHook: i.Users,
		},
		WebhookLogsFunc: &EnterpriseDBWebhookLogsFunc{
			defaultHook: i.WebhookLogs,
		},
	}
}

// EnterpriseDBAccessTokensFunc describes the behavior when the AccessTokens
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBAccessTokensFunc struct {
	defaultHook func() database.AccessTokenStore
	hooks       []func() database.AccessTokenStore
	history     []EnterpriseDBAccessTokensFuncCall
	mutex       sync.Mutex
}

// AccessTokens delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) AccessTokens() database.AccessTokenStore {
	r0 := m.AccessTokensFunc.nextHook()()
	m.AccessTokensFunc.appendCall(EnterpriseDBAccessTokensFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AccessTokens method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBAccessTokensFunc) SetDefaultHook(hook func() database.AccessTokenStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccessTokens method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBAccessTokensFunc) PushHook(hook func() database.AccessTokenStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBAccessTokensFunc) SetDefaultReturn(r0 database.AccessTokenStore) {
	f.SetDefaultHook(func() database.AccessTokenStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBAccessTokensFunc) PushReturn(r0 database.AccessTokenStore) {
	f.PushHook(func() database.AccessTokenStore {
		return r0
	})
}

func (f *EnterpriseDBAccessTokensFunc) nextHook() func() database.AccessTokenStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBAccessTokensFunc) appendCall(r0 EnterpriseDBAccessTokensFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBAccessTokensFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBAccessTokensFunc) History() []EnterpriseDBAccessTokensFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBAccessTokensFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBAccessTokensFuncCall is an object that describes an
// invocation of method AccessTokens on an instance of MockEnterpriseDB.
type EnterpriseDBAccessTokensFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AccessTokenStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBAccessTokensFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBAccessTokensFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBAuthzFunc describes the behavior when the Authz method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBAuthzFunc struct {
	defaultHook func() database.AuthzStore
	hooks       []func() database.AuthzStore
	history     []EnterpriseDBAuthzFuncCall
	mutex       sync.Mutex
}

// Authz delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Authz() database.AuthzStore {
	r0 := m.AuthzFunc.nextHook()()
	m.AuthzFunc.appendCall(EnterpriseDBAuthzFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authz method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBAuthzFunc) SetDefaultHook(hook func() database.AuthzStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authz method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBAuthzFunc) PushHook(hook func() database.AuthzStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBAuthzFunc) SetDefaultReturn(r0 database.AuthzStore) {
	f.SetDefaultHook(func() database.AuthzStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBAuthzFunc) PushReturn(r0 database.AuthzStore) {
	f.PushHook(func() database.AuthzStore {
		return r0
	})
}

func (f *EnterpriseDBAuthzFunc) nextHook() func() database.AuthzStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBAuthzFunc) appendCall(r0 EnterpriseDBAuthzFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBAuthzFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBAuthzFunc) History() []EnterpriseDBAuthzFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBAuthzFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBAuthzFuncCall is an object that describes an invocation of
// method Authz on an instance of MockEnterpriseDB.
type EnterpriseDBAuthzFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AuthzStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBAuthzFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBAuthzFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBConfFunc describes the behavior when the Conf method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBConfFunc struct {
	defaultHook func() database.ConfStore
	hooks       []func() database.ConfStore
	history     []EnterpriseDBConfFuncCall
	mutex       sync.Mutex
}

// Conf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Conf() database.ConfStore {
	r0 := m.ConfFunc.nextHook()()
	m.ConfFunc.appendCall(EnterpriseDBConfFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Conf method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBConfFunc) SetDefaultHook(hook func() database.ConfStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Conf method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBConfFunc) PushHook(hook func() database.ConfStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBConfFunc) SetDefaultReturn(r0 database.ConfStore) {
	f.SetDefaultHook(func() database.ConfStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBConfFunc) PushReturn(r0 database.ConfStore) {
	f.PushHook(func() database.ConfStore {
		return r0
	})
}

func (f *EnterpriseDBConfFunc) nextHook() func() database.ConfStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBConfFunc) appendCall(r0 EnterpriseDBConfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBConfFuncCall objects describing
// the invocations of this function.
func (f *EnterpriseDBConfFunc) History() []EnterpriseDBConfFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBConfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBConfFuncCall is an object that describes an invocation of
// method Conf on an instance of MockEnterpriseDB.
type EnterpriseDBConfFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ConfStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBConfFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBConfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBDoneFunc describes the behavior when the Done method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []EnterpriseDBDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(EnterpriseDBDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *EnterpriseDBDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBDoneFunc) appendCall(r0 EnterpriseDBDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBDoneFuncCall objects describing
// the invocations of this function.
func (f *EnterpriseDBDoneFunc) History() []EnterpriseDBDoneFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockEnterpriseDB.
type EnterpriseDBDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBEventLogsFunc describes the behavior when the EventLogs
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBEventLogsFunc struct {
	defaultHook func() database.EventLogStore
	hooks       []func() database.EventLogStore
	history     []EnterpriseDBEventLogsFuncCall
	mutex       sync.Mutex
}

// EventLogs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) EventLogs() database.EventLogStore {
	r0 := m.EventLogsFunc.nextHook()()
	m.EventLogsFunc.appendCall(EnterpriseDBEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EventLogs method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBEventLogsFunc) SetDefaultHook(hook func() database.EventLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EventLogs method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBEventLogsFunc) PushHook(hook func() database.EventLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBEventLogsFunc) SetDefaultReturn(r0 database.EventLogStore) {
	f.SetDefaultHook(func() database.EventLogStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBEventLogsFunc) PushReturn(r0 database.EventLogStore) {
	f.PushHook(func() database.EventLogStore {
		return r0
	})
}

func (f *EnterpriseDBEventLogsFunc) nextHook() func() database.EventLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBEventLogsFunc) appendCall(r0 EnterpriseDBEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBEventLogsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBEventLogsFunc) History() []EnterpriseDBEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBEventLogsFuncCall is an object that describes an invocation
// of method EventLogs on an instance of MockEnterpriseDB.
type EnterpriseDBEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.EventLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBExecContextFunc describes the behavior when the ExecContext
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBExecContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (sql.Result, error)
	hooks       []func(context.Context, string, ...interface{}) (sql.Result, error)
	history     []EnterpriseDBExecContextFuncCall
	mutex       sync.Mutex
}

// ExecContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) ExecContext(v0 context.Context, v1 string, v2 ...interface{}) (sql.Result, error) {
	r0, r1 := m.ExecContextFunc.nextHook()(v0, v1, v2...)
	m.ExecContextFunc.appendCall(EnterpriseDBExecContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecContext method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBExecContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecContext method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBExecContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBExecContextFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBExecContextFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

func (f *EnterpriseDBExecContextFunc) nextHook() func(context.Context, string, ...interface{}) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExecContextFunc) appendCall(r0 EnterpriseDBExecContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBExecContextFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBExecContextFunc) History() []EnterpriseDBExecContextFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExecContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExecContextFuncCall is an object that describes an invocation
// of method ExecContext on an instance of MockEnterpriseDB.
type EnterpriseDBExecContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EnterpriseDBExecContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExecContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EnterpriseDBExecutorsFunc describes the behavior when the Executors
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBExecutorsFunc struct {
	defaultHook func() database.ExecutorStore
	hooks       []func() database.ExecutorStore
	history     []EnterpriseDBExecutorsFuncCall
	mutex       sync.Mutex
}

// Executors delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Executors() database.ExecutorStore {
	r0 := m.ExecutorsFunc.nextHook()()
	m.ExecutorsFunc.appendCall(EnterpriseDBExecutorsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Executors method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBExecutorsFunc) SetDefaultHook(hook func() database.ExecutorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Executors method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBExecutorsFunc) PushHook(hook func() database.ExecutorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBExecutorsFunc) SetDefaultReturn(r0 database.ExecutorStore) {
	f.SetDefaultHook(func() database.ExecutorStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBExecutorsFunc) PushReturn(r0 database.ExecutorStore) {
	f.PushHook(func() database.ExecutorStore {
		return r0
	})
}

func (f *EnterpriseDBExecutorsFunc) nextHook() func() database.ExecutorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExecutorsFunc) appendCall(r0 EnterpriseDBExecutorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBExecutorsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBExecutorsFunc) History() []EnterpriseDBExecutorsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExecutorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExecutorsFuncCall is an object that describes an invocation
// of method Executors on an instance of MockEnterpriseDB.
type EnterpriseDBExecutorsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExecutorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBExecutorsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExecutorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBExternalServicesFunc describes the behavior when the
// ExternalServices method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBExternalServicesFunc struct {
	defaultHook func() database.ExternalServiceStore
	hooks       []func() database.ExternalServiceStore
	history     []EnterpriseDBExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) ExternalServices() database.ExternalServiceStore {
	r0 := m.ExternalServicesFunc.nextHook()()
	m.ExternalServicesFunc.appendCall(EnterpriseDBExternalServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBExternalServicesFunc) SetDefaultHook(hook func() database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBExternalServicesFunc) PushHook(hook func() database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBExternalServicesFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func() database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBExternalServicesFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func() database.ExternalServiceStore {
		return r0
	})
}

func (f *EnterpriseDBExternalServicesFunc) nextHook() func() database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExternalServicesFunc) appendCall(r0 EnterpriseDBExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBExternalServicesFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBExternalServicesFunc) History() []EnterpriseDBExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExternalServicesFuncCall is an object that describes an
// invocation of method ExternalServices on an instance of MockEnterpriseDB.
type EnterpriseDBExternalServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBFeatureFlagsFunc describes the behavior when the FeatureFlags
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBFeatureFlagsFunc struct {
	defaultHook func() database.FeatureFlagStore
	hooks       []func() database.FeatureFlagStore
	history     []EnterpriseDBFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// FeatureFlags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) FeatureFlags() database.FeatureFlagStore {
	r0 := m.FeatureFlagsFunc.nextHook()()
	m.FeatureFlagsFunc.appendCall(EnterpriseDBFeatureFlagsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the FeatureFlags method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBFeatureFlagsFunc) SetDefaultHook(hook func() database.FeatureFlagStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FeatureFlags method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBFeatureFlagsFunc) PushHook(hook func() database.FeatureFlagStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBFeatureFlagsFunc) SetDefaultReturn(r0 database.FeatureFlagStore) {
	f.SetDefaultHook(func() database.FeatureFlagStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBFeatureFlagsFunc) PushReturn(r0 database.FeatureFlagStore) {
	f.PushHook(func() database.FeatureFlagStore {
		return r0
	})
}

func (f *EnterpriseDBFeatureFlagsFunc) nextHook() func() database.FeatureFlagStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBFeatureFlagsFunc) appendCall(r0 EnterpriseDBFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBFeatureFlagsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBFeatureFlagsFunc) History() []EnterpriseDBFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBFeatureFlagsFuncCall is an object that describes an
// invocation of method FeatureFlags on an instance of MockEnterpriseDB.
type EnterpriseDBFeatureFlagsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.FeatureFlagStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBGitserverReposFunc describes the behavior when the
// GitserverRepos method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBGitserverReposFunc struct {
	defaultHook func() database.GitserverRepoStore
	hooks       []func() database.GitserverRepoStore
	history     []EnterpriseDBGitserverReposFuncCall
	mutex       sync.Mutex
}

// GitserverRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) GitserverRepos() database.GitserverRepoStore {
	r0 := m.GitserverReposFunc.nextHook()()
	m.GitserverReposFunc.appendCall(EnterpriseDBGitserverReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverRepos
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBGitserverReposFunc) SetDefaultHook(hook func() database.GitserverRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverRepos method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBGitserverReposFunc) PushHook(hook func() database.GitserverRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBGitserverReposFunc) SetDefaultReturn(r0 database.GitserverRepoStore) {
	f.SetDefaultHook(func() database.GitserverRepoStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBGitserverReposFunc) PushReturn(r0 database.GitserverRepoStore) {
	f.PushHook(func() database.GitserverRepoStore {
		return r0
	})
}

func (f *EnterpriseDBGitserverReposFunc) nextHook() func() database.GitserverRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBGitserverReposFunc) appendCall(r0 EnterpriseDBGitserverReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBGitserverReposFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBGitserverReposFunc) History() []EnterpriseDBGitserverReposFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBGitserverReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBGitserverReposFuncCall is an object that describes an
// invocation of method GitserverRepos on an instance of MockEnterpriseDB.
type EnterpriseDBGitserverReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.GitserverRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBGitserverReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBGitserverReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBGlobalStateFunc describes the behavior when the GlobalState
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBGlobalStateFunc struct {
	defaultHook func() database.GlobalStateStore
	hooks       []func() database.GlobalStateStore
	history     []EnterpriseDBGlobalStateFuncCall
	mutex       sync.Mutex
}

// GlobalState delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) GlobalState() database.GlobalStateStore {
	r0 := m.GlobalStateFunc.nextHook()()
	m.GlobalStateFunc.appendCall(EnterpriseDBGlobalStateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GlobalState method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBGlobalStateFunc) SetDefaultHook(hook func() database.GlobalStateStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GlobalState method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBGlobalStateFunc) PushHook(hook func() database.GlobalStateStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBGlobalStateFunc) SetDefaultReturn(r0 database.GlobalStateStore) {
	f.SetDefaultHook(func() database.GlobalStateStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBGlobalStateFunc) PushReturn(r0 database.GlobalStateStore) {
	f.PushHook(func() database.GlobalStateStore {
		return r0
	})
}

func (f *EnterpriseDBGlobalStateFunc) nextHook() func() database.GlobalStateStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBGlobalStateFunc) appendCall(r0 EnterpriseDBGlobalStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBGlobalStateFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBGlobalStateFunc) History() []EnterpriseDBGlobalStateFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBGlobalStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBGlobalStateFuncCall is an object that describes an invocation
// of method GlobalState on an instance of MockEnterpriseDB.
type EnterpriseDBGlobalStateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.GlobalStateStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBGlobalStateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBGlobalStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBNamespacesFunc describes the behavior when the Namespaces
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBNamespacesFunc struct {
	defaultHook func() database.NamespaceStore
	hooks       []func() database.NamespaceStore
	history     []EnterpriseDBNamespacesFuncCall
	mutex       sync.Mutex
}

// Namespaces delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) Namespaces() database.NamespaceStore {
	r0 := m.NamespacesFunc.nextHook()()
	m.NamespacesFunc.appendCall(EnterpriseDBNamespacesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Namespaces method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBNamespacesFunc) SetDefaultHook(hook func() database.NamespaceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Namespaces method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBNamespacesFunc) PushHook(hook func() database.NamespaceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBNamespacesFunc) SetDefaultReturn(r0 database.NamespaceStore) {
	f.SetDefaultHook(func() database.NamespaceStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBNamespacesFunc) PushReturn(r0 database.NamespaceStore) {
	f.PushHook(func() database.NamespaceStore {
		return r0
	})
}

func (f *EnterpriseDBNamespacesFunc) nextHook() func() database.NamespaceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBNamespacesFunc) appendCall(r0 EnterpriseDBNamespacesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBNamespacesFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBNamespacesFunc) History() []EnterpriseDBNamespacesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBNamespacesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBNamespacesFuncCall is an object that describes an invocation
// of method Namespaces on an instance of MockEnterpriseDB.
type EnterpriseDBNamespacesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.NamespaceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBNamespacesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBNamespacesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgInvitationsFunc describes the behavior when the
// OrgInvitations method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgInvitationsFunc struct {
	defaultHook func() database.OrgInvitationStore
	hooks       []func() database.OrgInvitationStore
	history     []EnterpriseDBOrgInvitationsFuncCall
	mutex       sync.Mutex
}

// OrgInvitations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OrgInvitations() database.OrgInvitationStore {
	r0 := m.OrgInvitationsFunc.nextHook()()
	m.OrgInvitationsFunc.appendCall(EnterpriseDBOrgInvitationsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgInvitations
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBOrgInvitationsFunc) SetDefaultHook(hook func() database.OrgInvitationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgInvitations method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBOrgInvitationsFunc) PushHook(hook func() database.OrgInvitationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBOrgInvitationsFunc) SetDefaultReturn(r0 database.OrgInvitationStore) {
	f.SetDefaultHook(func() database.OrgInvitationStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBOrgInvitationsFunc) PushReturn(r0 database.OrgInvitationStore) {
	f.PushHook(func() database.OrgInvitationStore {
		return r0
	})
}

func (f *EnterpriseDBOrgInvitationsFunc) nextHook() func() database.OrgInvitationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgInvitationsFunc) appendCall(r0 EnterpriseDBOrgInvitationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgInvitationsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBOrgInvitationsFunc) History() []EnterpriseDBOrgInvitationsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgInvitationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgInvitationsFuncCall is an object that describes an
// invocation of method OrgInvitations on an instance of MockEnterpriseDB.
type EnterpriseDBOrgInvitationsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgInvitationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgInvitationsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgInvitationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgMembersFunc describes the behavior when the OrgMembers
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgMembersFunc struct {
	defaultHook func() database.OrgMemberStore
	hooks       []func() database.OrgMemberStore
	history     []EnterpriseDBOrgMembersFuncCall
	mutex       sync.Mutex
}

// OrgMembers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OrgMembers() database.OrgMemberStore {
	r0 := m.OrgMembersFunc.nextHook()()
	m.OrgMembersFunc.appendCall(EnterpriseDBOrgMembersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgMembers method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBOrgMembersFunc) SetDefaultHook(hook func() database.OrgMemberStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgMembers method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBOrgMembersFunc) PushHook(hook func() database.OrgMemberStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBOrgMembersFunc) SetDefaultReturn(r0 database.OrgMemberStore) {
	f.SetDefaultHook(func() database.OrgMemberStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBOrgMembersFunc) PushReturn(r0 database.OrgMemberStore) {
	f.PushHook(func() database.OrgMemberStore {
		return r0
	})
}

func (f *EnterpriseDBOrgMembersFunc) nextHook() func() database.OrgMemberStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgMembersFunc) appendCall(r0 EnterpriseDBOrgMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgMembersFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBOrgMembersFunc) History() []EnterpriseDBOrgMembersFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgMembersFuncCall is an object that describes an invocation
// of method OrgMembers on an instance of MockEnterpriseDB.
type EnterpriseDBOrgMembersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgMemberStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgMembersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgStatsFunc describes the behavior when the OrgStats method
// of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgStatsFunc struct {
	defaultHook func() database.OrgStatsStore
	hooks       []func() database.OrgStatsStore
	history     []EnterpriseDBOrgStatsFuncCall
	mutex       sync.Mutex
}

// OrgStats delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) OrgStats() database.OrgStatsStore {
	r0 := m.OrgStatsFunc.nextHook()()
	m.OrgStatsFunc.appendCall(EnterpriseDBOrgStatsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgStats method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBOrgStatsFunc) SetDefaultHook(hook func() database.OrgStatsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgStats method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBOrgStatsFunc) PushHook(hook func() database.OrgStatsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBOrgStatsFunc) SetDefaultReturn(r0 database.OrgStatsStore) {
	f.SetDefaultHook(func() database.OrgStatsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBOrgStatsFunc) PushReturn(r0 database.OrgStatsStore) {
	f.PushHook(func() database.OrgStatsStore {
		return r0
	})
}

func (f *EnterpriseDBOrgStatsFunc) nextHook() func() database.OrgStatsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgStatsFunc) appendCall(r0 EnterpriseDBOrgStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgStatsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBOrgStatsFunc) History() []EnterpriseDBOrgStatsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgStatsFuncCall is an object that describes an invocation of
// method OrgStats on an instance of MockEnterpriseDB.
type EnterpriseDBOrgStatsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgStatsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgStatsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgsFunc describes the behavior when the Orgs method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgsFunc struct {
	defaultHook func() database.OrgStore
	hooks       []func() database.OrgStore
	history     []EnterpriseDBOrgsFuncCall
	mutex       sync.Mutex
}

// Orgs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Orgs() database.OrgStore {
	r0 := m.OrgsFunc.nextHook()()
	m.OrgsFunc.appendCall(EnterpriseDBOrgsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Orgs method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBOrgsFunc) SetDefaultHook(hook func() database.OrgStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Orgs method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBOrgsFunc) PushHook(hook func() database.OrgStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBOrgsFunc) SetDefaultReturn(r0 database.OrgStore) {
	f.SetDefaultHook(func() database.OrgStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBOrgsFunc) PushReturn(r0 database.OrgStore) {
	f.PushHook(func() database.OrgStore {
		return r0
	})
}

func (f *EnterpriseDBOrgsFunc) nextHook() func() database.OrgStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgsFunc) appendCall(r0 EnterpriseDBOrgsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgsFuncCall objects describing
// the invocations of this function.
func (f *EnterpriseDBOrgsFunc) History() []EnterpriseDBOrgsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgsFuncCall is an object that describes an invocation of
// method Orgs on an instance of MockEnterpriseDB.
type EnterpriseDBOrgsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBPhabricatorFunc describes the behavior when the Phabricator
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBPhabricatorFunc struct {
	defaultHook func() database.PhabricatorStore
	hooks       []func() database.PhabricatorStore
	history     []EnterpriseDBPhabricatorFuncCall
	mutex       sync.Mutex
}

// Phabricator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) Phabricator() database.PhabricatorStore {
	r0 := m.PhabricatorFunc.nextHook()()
	m.PhabricatorFunc.appendCall(EnterpriseDBPhabricatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Phabricator method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBPhabricatorFunc) SetDefaultHook(hook func() database.PhabricatorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Phabricator method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBPhabricatorFunc) PushHook(hook func() database.PhabricatorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBPhabricatorFunc) SetDefaultReturn(r0 database.PhabricatorStore) {
	f.SetDefaultHook(func() database.PhabricatorStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBPhabricatorFunc) PushReturn(r0 database.PhabricatorStore) {
	f.PushHook(func() database.PhabricatorStore {
		return r0
	})
}

func (f *EnterpriseDBPhabricatorFunc) nextHook() func() database.PhabricatorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBPhabricatorFunc) appendCall(r0 EnterpriseDBPhabricatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBPhabricatorFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBPhabricatorFunc) History() []EnterpriseDBPhabricatorFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBPhabricatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBPhabricatorFuncCall is an object that describes an invocation
// of method Phabricator on an instance of MockEnterpriseDB.
type EnterpriseDBPhabricatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.PhabricatorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBPhabricatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBPhabricatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBQueryContextFunc describes the behavior when the QueryContext
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBQueryContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (*sql.Rows, error)
	hooks       []func(context.Context, string, ...interface{}) (*sql.Rows, error)
	history     []EnterpriseDBQueryContextFuncCall
	mutex       sync.Mutex
}

// QueryContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) QueryContext(v0 context.Context, v1 string, v2 ...interface{}) (*sql.Rows, error) {
	r0, r1 := m.QueryContextFunc.nextHook()(v0, v1, v2...)
	m.QueryContextFunc.appendCall(EnterpriseDBQueryContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueryContext method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBQueryContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryContext method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBQueryContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBQueryContextFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBQueryContextFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *EnterpriseDBQueryContextFunc) nextHook() func(context.Context, string, ...interface{}) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBQueryContextFunc) appendCall(r0 EnterpriseDBQueryContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBQueryContextFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBQueryContextFunc) History() []EnterpriseDBQueryContextFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBQueryContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBQueryContextFuncCall is an object that describes an
// invocation of method QueryContext on an instance of MockEnterpriseDB.
type EnterpriseDBQueryContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EnterpriseDBQueryContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBQueryContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EnterpriseDBQueryRowContextFunc describes the behavior when the
// QueryRowContext method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBQueryRowContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) *sql.Row
	hooks       []func(context.Context, string, ...interface{}) *sql.Row
	history     []EnterpriseDBQueryRowContextFuncCall
	mutex       sync.Mutex
}

// QueryRowContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) QueryRowContext(v0 context.Context, v1 string, v2 ...interface{}) *sql.Row {
	r0 := m.QueryRowContextFunc.nextHook()(v0, v1, v2...)
	m.QueryRowContextFunc.appendCall(EnterpriseDBQueryRowContextFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryRowContext
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBQueryRowContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRowContext method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBQueryRowContextFunc) PushHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBQueryRowContextFunc) SetDefaultReturn(r0 *sql.Row) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBQueryRowContextFunc) PushReturn(r0 *sql.Row) {
	f.PushHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

func (f *EnterpriseDBQueryRowContextFunc) nextHook() func(context.Context, string, ...interface{}) *sql.Row {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBQueryRowContextFunc) appendCall(r0 EnterpriseDBQueryRowContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBQueryRowContextFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBQueryRowContextFunc) History() []EnterpriseDBQueryRowContextFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBQueryRowContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBQueryRowContextFuncCall is an object that describes an
// invocation of method QueryRowContext on an instance of MockEnterpriseDB.
type EnterpriseDBQueryRowContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Row
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EnterpriseDBQueryRowContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBQueryRowContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBReposFunc describes the behavior when the Repos method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBReposFunc struct {
	defaultHook func() database.RepoStore
	hooks       []func() database.RepoStore
	history     []EnterpriseDBReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Repos() database.RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(EnterpriseDBReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBReposFunc) SetDefaultHook(hook func() database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBReposFunc) PushHook(hook func() database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBReposFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func() database.RepoStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBReposFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func() database.RepoStore {
		return r0
	})
}

func (f *EnterpriseDBReposFunc) nextHook() func() database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBReposFunc) appendCall(r0 EnterpriseDBReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBReposFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBReposFunc) History() []EnterpriseDBReposFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBReposFuncCall is an object that describes an invocation of
// method Repos on an instance of MockEnterpriseDB.
type EnterpriseDBReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSavedSearchesFunc describes the behavior when the
// SavedSearches method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSavedSearchesFunc struct {
	defaultHook func() database.SavedSearchStore
	hooks       []func() database.SavedSearchStore
	history     []EnterpriseDBSavedSearchesFuncCall
	mutex       sync.Mutex
}

// SavedSearches delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SavedSearches() database.SavedSearchStore {
	r0 := m.SavedSearchesFunc.nextHook()()
	m.SavedSearchesFunc.appendCall(EnterpriseDBSavedSearchesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SavedSearches method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBSavedSearchesFunc) SetDefaultHook(hook func() database.SavedSearchStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SavedSearches method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBSavedSearchesFunc) PushHook(hook func() database.SavedSearchStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBSavedSearchesFunc) SetDefaultReturn(r0 database.SavedSearchStore) {
	f.SetDefaultHook(func() database.SavedSearchStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBSavedSearchesFunc) PushReturn(r0 database.SavedSearchStore) {
	f.PushHook(func() database.SavedSearchStore {
		return r0
	})
}

func (f *EnterpriseDBSavedSearchesFunc) nextHook() func() database.SavedSearchStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSavedSearchesFunc) appendCall(r0 EnterpriseDBSavedSearchesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSavedSearchesFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSavedSearchesFunc) History() []EnterpriseDBSavedSearchesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSavedSearchesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSavedSearchesFuncCall is an object that describes an
// invocation of method SavedSearches on an instance of MockEnterpriseDB.
type EnterpriseDBSavedSearchesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SavedSearchStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSavedSearchesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSavedSearchesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSearchContextsFunc describes the behavior when the
// SearchContexts method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSearchContextsFunc struct {
	defaultHook func() database.SearchContextsStore
	hooks       []func() database.SearchContextsStore
	history     []EnterpriseDBSearchContextsFuncCall
	mutex       sync.Mutex
}

// SearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SearchContexts() database.SearchContextsStore {
	r0 := m.SearchContextsFunc.nextHook()()
	m.SearchContextsFunc.appendCall(EnterpriseDBSearchContextsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SearchContexts
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBSearchContextsFunc) SetDefaultHook(hook func() database.SearchContextsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SearchContexts method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBSearchContextsFunc) PushHook(hook func() database.SearchContextsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBSearchContextsFunc) SetDefaultReturn(r0 database.SearchContextsStore) {
	f.SetDefaultHook(func() database.SearchContextsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBSearchContextsFunc) PushReturn(r0 database.SearchContextsStore) {
	f.PushHook(func() database.SearchContextsStore {
		return r0
	})
}

func (f *EnterpriseDBSearchContextsFunc) nextHook() func() database.SearchContextsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSearchContextsFunc) appendCall(r0 EnterpriseDBSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSearchContextsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSearchContextsFunc) History() []EnterpriseDBSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSearchContextsFuncCall is an object that describes an
// invocation of method SearchContexts on an instance of MockEnterpriseDB.
type EnterpriseDBSearchContextsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SearchContextsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSettingsFunc describes the behavior when the Settings method
// of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSettingsFunc struct {
	defaultHook func() database.SettingsStore
	hooks       []func() database.SettingsStore
	history     []EnterpriseDBSettingsFuncCall
	mutex       sync.Mutex
}

// Settings delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Settings() database.SettingsStore {
	r0 := m.SettingsFunc.nextHook()()
	m.SettingsFunc.appendCall(EnterpriseDBSettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Settings method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBSettingsFunc) SetDefaultHook(hook func() database.SettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Settings method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBSettingsFunc) PushHook(hook func() database.SettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBSettingsFunc) SetDefaultReturn(r0 database.SettingsStore) {
	f.SetDefaultHook(func() database.SettingsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBSettingsFunc) PushReturn(r0 database.SettingsStore) {
	f.PushHook(func() database.SettingsStore {
		return r0
	})
}

func (f *EnterpriseDBSettingsFunc) nextHook() func() database.SettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSettingsFunc) appendCall(r0 EnterpriseDBSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSettingsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSettingsFunc) History() []EnterpriseDBSettingsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSettingsFuncCall is an object that describes an invocation of
// method Settings on an instance of MockEnterpriseDB.
type EnterpriseDBSettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSubRepoPermsFunc describes the behavior when the SubRepoPerms
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSubRepoPermsFunc struct {
	defaultHook func() database.SubRepoPermsStore
	hooks       []func() database.SubRepoPermsStore
	history     []EnterpriseDBSubRepoPermsFuncCall
	mutex       sync.Mutex
}

// SubRepoPerms delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SubRepoPerms() database.SubRepoPermsStore {
	r0 := m.SubRepoPermsFunc.nextHook()()
	m.SubRepoPermsFunc.appendCall(EnterpriseDBSubRepoPermsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SubRepoPerms method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBSubRepoPermsFunc) SetDefaultHook(hook func() database.SubRepoPermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubRepoPerms method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBSubRepoPermsFunc) PushHook(hook func() database.SubRepoPermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBSubRepoPermsFunc) SetDefaultReturn(r0 database.SubRepoPermsStore) {
	f.SetDefaultHook(func() database.SubRepoPermsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBSubRepoPermsFunc) PushReturn(r0 database.SubRepoPermsStore) {
	f.PushHook(func() database.SubRepoPermsStore {
		return r0
	})
}

func (f *EnterpriseDBSubRepoPermsFunc) nextHook() func() database.SubRepoPermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSubRepoPermsFunc) appendCall(r0 EnterpriseDBSubRepoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSubRepoPermsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSubRepoPermsFunc) History() []EnterpriseDBSubRepoPermsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSubRepoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSubRepoPermsFuncCall is an object that describes an
// invocation of method SubRepoPerms on an instance of MockEnterpriseDB.
type EnterpriseDBSubRepoPermsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SubRepoPermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSubRepoPermsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSubRepoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBTemporarySettingsFunc describes the behavior when the
// TemporarySettings method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBTemporarySettingsFunc struct {
	defaultHook func() database.TemporarySettingsStore
	hooks       []func() database.TemporarySettingsStore
	history     []EnterpriseDBTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// TemporarySettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) TemporarySettings() database.TemporarySettingsStore {
	r0 := m.TemporarySettingsFunc.nextHook()()
	m.TemporarySettingsFunc.appendCall(EnterpriseDBTemporarySettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the TemporarySettings
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBTemporarySettingsFunc) SetDefaultHook(hook func() database.TemporarySettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TemporarySettings method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBTemporarySettingsFunc) PushHook(hook func() database.TemporarySettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBTemporarySettingsFunc) SetDefaultReturn(r0 database.TemporarySettingsStore) {
	f.SetDefaultHook(func() database.TemporarySettingsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBTemporarySettingsFunc) PushReturn(r0 database.TemporarySettingsStore) {
	f.PushHook(func() database.TemporarySettingsStore {
		return r0
	})
}

func (f *EnterpriseDBTemporarySettingsFunc) nextHook() func() database.TemporarySettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBTemporarySettingsFunc) appendCall(r0 EnterpriseDBTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBTemporarySettingsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBTemporarySettingsFunc) History() []EnterpriseDBTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBTemporarySettingsFuncCall is an object that describes an
// invocation of method TemporarySettings on an instance of
// MockEnterpriseDB.
type EnterpriseDBTemporarySettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.TemporarySettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBTransactFunc describes the behavior when the Transact method
// of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBTransactFunc struct {
	defaultHook func(context.Context) (database.DB, error)
	hooks       []func(context.Context) (database.DB, error)
	history     []EnterpriseDBTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Transact(v0 context.Context) (database.DB, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(EnterpriseDBTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBTransactFunc) SetDefaultHook(hook func(context.Context) (database.DB, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBTransactFunc) PushHook(hook func(context.Context) (database.DB, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBTransactFunc) SetDefaultReturn(r0 database.DB, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.DB, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBTransactFunc) PushReturn(r0 database.DB, r1 error) {
	f.PushHook(func(context.Context) (database.DB, error) {
		return r0, r1
	})
}

func (f *EnterpriseDBTransactFunc) nextHook() func(context.Context) (database.DB, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBTransactFunc) appendCall(r0 EnterpriseDBTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBTransactFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBTransactFunc) History() []EnterpriseDBTransactFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockEnterpriseDB.
type EnterpriseDBTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EnterpriseDBUserCredentialsFunc describes the behavior when the
// UserCredentials method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBUserCredentialsFunc struct {
	defaultHook func(encryption.Key) database.UserCredentialsStore
	hooks       []func(encryption.Key) database.UserCredentialsStore
	history     []EnterpriseDBUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserCredentials(v0 encryption.Key) database.UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()(v0)
	m.UserCredentialsFunc.appendCall(EnterpriseDBUserCredentialsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBUserCredentialsFunc) SetDefaultHook(hook func(encryption.Key) database.UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBUserCredentialsFunc) PushHook(hook func(encryption.Key) database.UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBUserCredentialsFunc) SetDefaultReturn(r0 database.UserCredentialsStore) {
	f.SetDefaultHook(func(encryption.Key) database.UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBUserCredentialsFunc) PushReturn(r0 database.UserCredentialsStore) {
	f.PushHook(func(encryption.Key) database.UserCredentialsStore {
		return r0
	})
}

func (f *EnterpriseDBUserCredentialsFunc) nextHook() func(encryption.Key) database.UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserCredentialsFunc) appendCall(r0 EnterpriseDBUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUserCredentialsFunc) History() []EnterpriseDBUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserCredentialsFuncCall is an object that describes an
// invocation of method UserCredentials on an instance of MockEnterpriseDB.
type EnterpriseDBUserCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserEmailsFunc describes the behavior when the UserEmails
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBUserEmailsFunc struct {
	defaultHook func() database.UserEmailsStore
	hooks       []func() database.UserEmailsStore
	history     []EnterpriseDBUserEmailsFuncCall
	mutex       sync.Mutex
}

// UserEmails delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserEmails() database.UserEmailsStore {
	r0 := m.UserEmailsFunc.nextHook()()
	m.UserEmailsFunc.appendCall(EnterpriseDBUserEmailsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserEmails method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBUserEmailsFunc) SetDefaultHook(hook func() database.UserEmailsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserEmails method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBUserEmailsFunc) PushHook(hook func() database.UserEmailsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBUserEmailsFunc) SetDefaultReturn(r0 database.UserEmailsStore) {
	f.SetDefaultHook(func() database.UserEmailsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBUserEmailsFunc) PushReturn(r0 database.UserEmailsStore) {
	f.PushHook(func() database.UserEmailsStore {
		return r0
	})
}

func (f *EnterpriseDBUserEmailsFunc) nextHook() func() database.UserEmailsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserEmailsFunc) appendCall(r0 EnterpriseDBUserEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserEmailsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUserEmailsFunc) History() []EnterpriseDBUserEmailsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserEmailsFuncCall is an object that describes an invocation
// of method UserEmails on an instance of MockEnterpriseDB.
type EnterpriseDBUserEmailsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserEmailsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserEmailsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserExternalAccountsFunc describes the behavior when the
// UserExternalAccounts method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBUserExternalAccountsFunc struct {
	defaultHook func() database.UserExternalAccountsStore
	hooks       []func() database.UserExternalAccountsStore
	history     []EnterpriseDBUserExternalAccountsFuncCall
	mutex       sync.Mutex
}

// UserExternalAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserExternalAccounts() database.UserExternalAccountsStore {
	r0 := m.UserExternalAccountsFunc.nextHook()()
	m.UserExternalAccountsFunc.appendCall(EnterpriseDBUserExternalAccountsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserExternalAccounts
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBUserExternalAccountsFunc) SetDefaultHook(hook func() database.UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserExternalAccounts method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBUserExternalAccountsFunc) PushHook(hook func() database.UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBUserExternalAccountsFunc) SetDefaultReturn(r0 database.UserExternalAccountsStore) {
	f.SetDefaultHook(func() database.UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBUserExternalAccountsFunc) PushReturn(r0 database.UserExternalAccountsStore) {
	f.PushHook(func() database.UserExternalAccountsStore {
		return r0
	})
}

func (f *EnterpriseDBUserExternalAccountsFunc) nextHook() func() database.UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserExternalAccountsFunc) appendCall(r0 EnterpriseDBUserExternalAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserExternalAccountsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBUserExternalAccountsFunc) History() []EnterpriseDBUserExternalAccountsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserExternalAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserExternalAccountsFuncCall is an object that describes an
// invocation of method UserExternalAccounts on an instance of
// MockEnterpriseDB.
type EnterpriseDBUserExternalAccountsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserExternalAccountsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserExternalAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserPublicReposFunc describes the behavior when the
// UserPublicRepos method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBUserPublicReposFunc struct {
	defaultHook func() database.UserPublicRepoStore
	hooks       []func() database.UserPublicRepoStore
	history     []EnterpriseDBUserPublicReposFuncCall
	mutex       sync.Mutex
}

// UserPublicRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserPublicRepos() database.UserPublicRepoStore {
	r0 := m.UserPublicReposFunc.nextHook()()
	m.UserPublicReposFunc.appendCall(EnterpriseDBUserPublicReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserPublicRepos
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBUserPublicReposFunc) SetDefaultHook(hook func() database.UserPublicRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserPublicRepos method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBUserPublicReposFunc) PushHook(hook func() database.UserPublicRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBUserPublicReposFunc) SetDefaultReturn(r0 database.UserPublicRepoStore) {
	f.SetDefaultHook(func() database.UserPublicRepoStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBUserPublicReposFunc) PushReturn(r0 database.UserPublicRepoStore) {
	f.PushHook(func() database.UserPublicRepoStore {
		return r0
	})
}

func (f *EnterpriseDBUserPublicReposFunc) nextHook() func() database.UserPublicRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserPublicReposFunc) appendCall(r0 EnterpriseDBUserPublicReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserPublicReposFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUserPublicReposFunc) History() []EnterpriseDBUserPublicReposFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserPublicReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserPublicReposFuncCall is an object that describes an
// invocation of method UserPublicRepos on an instance of MockEnterpriseDB.
type EnterpriseDBUserPublicReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserPublicRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserPublicReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserPublicReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUsersFunc describes the behavior when the Users method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBUsersFunc struct {
	defaultHook func() database.UserStore
	hooks       []func() database.UserStore
	history     []EnterpriseDBUsersFuncCall
	mutex       sync.Mutex
}

// Users delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Users() database.UserStore {
	r0 := m.UsersFunc.nextHook()()
	m.UsersFunc.appendCall(EnterpriseDBUsersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Users method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBUsersFunc) SetDefaultHook(hook func() database.UserStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Users method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBUsersFunc) PushHook(hook func() database.UserStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBUsersFunc) SetDefaultReturn(r0 database.UserStore) {
	f.SetDefaultHook(func() database.UserStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBUsersFunc) PushReturn(r0 database.UserStore) {
	f.PushHook(func() database.UserStore {
		return r0
	})
}

func (f *EnterpriseDBUsersFunc) nextHook() func() database.UserStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUsersFunc) appendCall(r0 EnterpriseDBUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUsersFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUsersFunc) History() []EnterpriseDBUsersFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUsersFuncCall is an object that describes an invocation of
// method Users on an instance of MockEnterpriseDB.
type EnterpriseDBUsersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUsersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBWebhookLogsFunc describes the behavior when the WebhookLogs
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBWebhookLogsFunc struct {
	defaultHook func(encryption.Key) database.WebhookLogStore
	hooks       []func(encryption.Key) database.WebhookLogStore
	history     []EnterpriseDBWebhookLogsFuncCall
	mutex       sync.Mutex
}

// WebhookLogs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) WebhookLogs(v0 encryption.Key) database.WebhookLogStore {
	r0 := m.WebhookLogsFunc.nextHook()(v0)
	m.WebhookLogsFunc.appendCall(EnterpriseDBWebhookLogsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WebhookLogs method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBWebhookLogsFunc) SetDefaultHook(hook func(encryption.Key) database.WebhookLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WebhookLogs method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBWebhookLogsFunc) PushHook(hook func(encryption.Key) database.WebhookLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *EnterpriseDBWebhookLogsFunc) SetDefaultReturn(r0 database.WebhookLogStore) {
	f.SetDefaultHook(func(encryption.Key) database.WebhookLogStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *EnterpriseDBWebhookLogsFunc) PushReturn(r0 database.WebhookLogStore) {
	f.PushHook(func(encryption.Key) database.WebhookLogStore {
		return r0
	})
}

func (f *EnterpriseDBWebhookLogsFunc) nextHook() func(encryption.Key) database.WebhookLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBWebhookLogsFunc) appendCall(r0 EnterpriseDBWebhookLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBWebhookLogsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBWebhookLogsFunc) History() []EnterpriseDBWebhookLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBWebhookLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBWebhookLogsFuncCall is an object that describes an invocation
// of method WebhookLogs on an instance of MockEnterpriseDB.
type EnterpriseDBWebhookLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.WebhookLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBWebhookLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBWebhookLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
