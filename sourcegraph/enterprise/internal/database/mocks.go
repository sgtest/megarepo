// Code generated by go-mockgen 1.2.0; DO NOT EDIT.

package database

import (
	"context"
	"database/sql"
	"sync"
	"time"

	sqlf "github.com/keegancsmith/sqlf"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	authz "github.com/sourcegraph/sourcegraph/internal/authz"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	encryption "github.com/sourcegraph/sourcegraph/internal/encryption"
	extsvc "github.com/sourcegraph/sourcegraph/internal/extsvc"
	result "github.com/sourcegraph/sourcegraph/internal/search/result"
)

// MockCodeMonitorStore is a mock implementation of the CodeMonitorStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/database) used for
// unit testing.
type MockCodeMonitorStore struct {
	// ClockFunc is an instance of a mock function object controlling the
	// behavior of the method Clock.
	ClockFunc *CodeMonitorStoreClockFunc
	// CountActionJobsFunc is an instance of a mock function object
	// controlling the behavior of the method CountActionJobs.
	CountActionJobsFunc *CodeMonitorStoreCountActionJobsFunc
	// CountMonitorsFunc is an instance of a mock function object
	// controlling the behavior of the method CountMonitors.
	CountMonitorsFunc *CodeMonitorStoreCountMonitorsFunc
	// CountQueryTriggerJobsFunc is an instance of a mock function object
	// controlling the behavior of the method CountQueryTriggerJobs.
	CountQueryTriggerJobsFunc *CodeMonitorStoreCountQueryTriggerJobsFunc
	// CountRecipientsFunc is an instance of a mock function object
	// controlling the behavior of the method CountRecipients.
	CountRecipientsFunc *CodeMonitorStoreCountRecipientsFunc
	// CountSlackWebhookActionsFunc is an instance of a mock function object
	// controlling the behavior of the method CountSlackWebhookActions.
	CountSlackWebhookActionsFunc *CodeMonitorStoreCountSlackWebhookActionsFunc
	// CountWebhookActionsFunc is an instance of a mock function object
	// controlling the behavior of the method CountWebhookActions.
	CountWebhookActionsFunc *CodeMonitorStoreCountWebhookActionsFunc
	// CreateEmailActionFunc is an instance of a mock function object
	// controlling the behavior of the method CreateEmailAction.
	CreateEmailActionFunc *CodeMonitorStoreCreateEmailActionFunc
	// CreateMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method CreateMonitor.
	CreateMonitorFunc *CodeMonitorStoreCreateMonitorFunc
	// CreateQueryTriggerFunc is an instance of a mock function object
	// controlling the behavior of the method CreateQueryTrigger.
	CreateQueryTriggerFunc *CodeMonitorStoreCreateQueryTriggerFunc
	// CreateRecipientFunc is an instance of a mock function object
	// controlling the behavior of the method CreateRecipient.
	CreateRecipientFunc *CodeMonitorStoreCreateRecipientFunc
	// CreateSlackWebhookActionFunc is an instance of a mock function object
	// controlling the behavior of the method CreateSlackWebhookAction.
	CreateSlackWebhookActionFunc *CodeMonitorStoreCreateSlackWebhookActionFunc
	// CreateWebhookActionFunc is an instance of a mock function object
	// controlling the behavior of the method CreateWebhookAction.
	CreateWebhookActionFunc *CodeMonitorStoreCreateWebhookActionFunc
	// DeleteEmailActionsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteEmailActions.
	DeleteEmailActionsFunc *CodeMonitorStoreDeleteEmailActionsFunc
	// DeleteMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteMonitor.
	DeleteMonitorFunc *CodeMonitorStoreDeleteMonitorFunc
	// DeleteObsoleteTriggerJobsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteObsoleteTriggerJobs.
	DeleteObsoleteTriggerJobsFunc *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc
	// DeleteOldTriggerJobsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOldTriggerJobs.
	DeleteOldTriggerJobsFunc *CodeMonitorStoreDeleteOldTriggerJobsFunc
	// DeleteRecipientsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteRecipients.
	DeleteRecipientsFunc *CodeMonitorStoreDeleteRecipientsFunc
	// DeleteSlackWebhookActionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteSlackWebhookActions.
	DeleteSlackWebhookActionsFunc *CodeMonitorStoreDeleteSlackWebhookActionsFunc
	// DeleteWebhookActionsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteWebhookActions.
	DeleteWebhookActionsFunc *CodeMonitorStoreDeleteWebhookActionsFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *CodeMonitorStoreDoneFunc
	// EnqueueActionJobsForMonitorFunc is an instance of a mock function
	// object controlling the behavior of the method
	// EnqueueActionJobsForMonitor.
	EnqueueActionJobsForMonitorFunc *CodeMonitorStoreEnqueueActionJobsForMonitorFunc
	// EnqueueQueryTriggerJobsFunc is an instance of a mock function object
	// controlling the behavior of the method EnqueueQueryTriggerJobs.
	EnqueueQueryTriggerJobsFunc *CodeMonitorStoreEnqueueQueryTriggerJobsFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *CodeMonitorStoreExecFunc
	// GetActionJobFunc is an instance of a mock function object controlling
	// the behavior of the method GetActionJob.
	GetActionJobFunc *CodeMonitorStoreGetActionJobFunc
	// GetActionJobMetadataFunc is an instance of a mock function object
	// controlling the behavior of the method GetActionJobMetadata.
	GetActionJobMetadataFunc *CodeMonitorStoreGetActionJobMetadataFunc
	// GetEmailActionFunc is an instance of a mock function object
	// controlling the behavior of the method GetEmailAction.
	GetEmailActionFunc *CodeMonitorStoreGetEmailActionFunc
	// GetLastSearchedFunc is an instance of a mock function object
	// controlling the behavior of the method GetLastSearched.
	GetLastSearchedFunc *CodeMonitorStoreGetLastSearchedFunc
	// GetMonitorFunc is an instance of a mock function object controlling
	// the behavior of the method GetMonitor.
	GetMonitorFunc *CodeMonitorStoreGetMonitorFunc
	// GetQueryTriggerForJobFunc is an instance of a mock function object
	// controlling the behavior of the method GetQueryTriggerForJob.
	GetQueryTriggerForJobFunc *CodeMonitorStoreGetQueryTriggerForJobFunc
	// GetQueryTriggerForMonitorFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetQueryTriggerForMonitor.
	GetQueryTriggerForMonitorFunc *CodeMonitorStoreGetQueryTriggerForMonitorFunc
	// GetSlackWebhookActionFunc is an instance of a mock function object
	// controlling the behavior of the method GetSlackWebhookAction.
	GetSlackWebhookActionFunc *CodeMonitorStoreGetSlackWebhookActionFunc
	// GetWebhookActionFunc is an instance of a mock function object
	// controlling the behavior of the method GetWebhookAction.
	GetWebhookActionFunc *CodeMonitorStoreGetWebhookActionFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *CodeMonitorStoreHandleFunc
	// HasAnyLastSearchedFunc is an instance of a mock function object
	// controlling the behavior of the method HasAnyLastSearched.
	HasAnyLastSearchedFunc *CodeMonitorStoreHasAnyLastSearchedFunc
	// ListActionJobsFunc is an instance of a mock function object
	// controlling the behavior of the method ListActionJobs.
	ListActionJobsFunc *CodeMonitorStoreListActionJobsFunc
	// ListEmailActionsFunc is an instance of a mock function object
	// controlling the behavior of the method ListEmailActions.
	ListEmailActionsFunc *CodeMonitorStoreListEmailActionsFunc
	// ListMonitorsFunc is an instance of a mock function object controlling
	// the behavior of the method ListMonitors.
	ListMonitorsFunc *CodeMonitorStoreListMonitorsFunc
	// ListQueryTriggerJobsFunc is an instance of a mock function object
	// controlling the behavior of the method ListQueryTriggerJobs.
	ListQueryTriggerJobsFunc *CodeMonitorStoreListQueryTriggerJobsFunc
	// ListRecipientsFunc is an instance of a mock function object
	// controlling the behavior of the method ListRecipients.
	ListRecipientsFunc *CodeMonitorStoreListRecipientsFunc
	// ListSlackWebhookActionsFunc is an instance of a mock function object
	// controlling the behavior of the method ListSlackWebhookActions.
	ListSlackWebhookActionsFunc *CodeMonitorStoreListSlackWebhookActionsFunc
	// ListWebhookActionsFunc is an instance of a mock function object
	// controlling the behavior of the method ListWebhookActions.
	ListWebhookActionsFunc *CodeMonitorStoreListWebhookActionsFunc
	// NowFunc is an instance of a mock function object controlling the
	// behavior of the method Now.
	NowFunc *CodeMonitorStoreNowFunc
	// ResetQueryTriggerTimestampsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ResetQueryTriggerTimestamps.
	ResetQueryTriggerTimestampsFunc *CodeMonitorStoreResetQueryTriggerTimestampsFunc
	// SetQueryTriggerNextRunFunc is an instance of a mock function object
	// controlling the behavior of the method SetQueryTriggerNextRun.
	SetQueryTriggerNextRunFunc *CodeMonitorStoreSetQueryTriggerNextRunFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *CodeMonitorStoreTransactFunc
	// UpdateEmailActionFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateEmailAction.
	UpdateEmailActionFunc *CodeMonitorStoreUpdateEmailActionFunc
	// UpdateMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateMonitor.
	UpdateMonitorFunc *CodeMonitorStoreUpdateMonitorFunc
	// UpdateMonitorEnabledFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateMonitorEnabled.
	UpdateMonitorEnabledFunc *CodeMonitorStoreUpdateMonitorEnabledFunc
	// UpdateQueryTriggerFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateQueryTrigger.
	UpdateQueryTriggerFunc *CodeMonitorStoreUpdateQueryTriggerFunc
	// UpdateSlackWebhookActionFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateSlackWebhookAction.
	UpdateSlackWebhookActionFunc *CodeMonitorStoreUpdateSlackWebhookActionFunc
	// UpdateTriggerJobWithResultsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateTriggerJobWithResults.
	UpdateTriggerJobWithResultsFunc *CodeMonitorStoreUpdateTriggerJobWithResultsFunc
	// UpdateWebhookActionFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateWebhookAction.
	UpdateWebhookActionFunc *CodeMonitorStoreUpdateWebhookActionFunc
	// UpsertLastSearchedFunc is an instance of a mock function object
	// controlling the behavior of the method UpsertLastSearched.
	UpsertLastSearchedFunc *CodeMonitorStoreUpsertLastSearchedFunc
}

// NewMockCodeMonitorStore creates a new mock of the CodeMonitorStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockCodeMonitorStore() *MockCodeMonitorStore {
	return &MockCodeMonitorStore{
		ClockFunc: &CodeMonitorStoreClockFunc{
			defaultHook: func() (r0 func() time.Time) {
				return
			},
		},
		CountActionJobsFunc: &CodeMonitorStoreCountActionJobsFunc{
			defaultHook: func(context.Context, ListActionJobsOpts) (r0 int, r1 error) {
				return
			},
		},
		CountMonitorsFunc: &CodeMonitorStoreCountMonitorsFunc{
			defaultHook: func(context.Context, int32) (r0 int32, r1 error) {
				return
			},
		},
		CountQueryTriggerJobsFunc: &CodeMonitorStoreCountQueryTriggerJobsFunc{
			defaultHook: func(context.Context, int64) (r0 int32, r1 error) {
				return
			},
		},
		CountRecipientsFunc: &CodeMonitorStoreCountRecipientsFunc{
			defaultHook: func(context.Context, int64) (r0 int32, r1 error) {
				return
			},
		},
		CountSlackWebhookActionsFunc: &CodeMonitorStoreCountSlackWebhookActionsFunc{
			defaultHook: func(context.Context, int64) (r0 int, r1 error) {
				return
			},
		},
		CountWebhookActionsFunc: &CodeMonitorStoreCountWebhookActionsFunc{
			defaultHook: func(context.Context, int64) (r0 int, r1 error) {
				return
			},
		},
		CreateEmailActionFunc: &CodeMonitorStoreCreateEmailActionFunc{
			defaultHook: func(context.Context, int64, *EmailActionArgs) (r0 *EmailAction, r1 error) {
				return
			},
		},
		CreateMonitorFunc: &CodeMonitorStoreCreateMonitorFunc{
			defaultHook: func(context.Context, MonitorArgs) (r0 *Monitor, r1 error) {
				return
			},
		},
		CreateQueryTriggerFunc: &CodeMonitorStoreCreateQueryTriggerFunc{
			defaultHook: func(context.Context, int64, string) (r0 *QueryTrigger, r1 error) {
				return
			},
		},
		CreateRecipientFunc: &CodeMonitorStoreCreateRecipientFunc{
			defaultHook: func(context.Context, int64, *int32, *int32) (r0 *Recipient, r1 error) {
				return
			},
		},
		CreateSlackWebhookActionFunc: &CodeMonitorStoreCreateSlackWebhookActionFunc{
			defaultHook: func(context.Context, int64, bool, bool, string) (r0 *SlackWebhookAction, r1 error) {
				return
			},
		},
		CreateWebhookActionFunc: &CodeMonitorStoreCreateWebhookActionFunc{
			defaultHook: func(context.Context, int64, bool, bool, string) (r0 *WebhookAction, r1 error) {
				return
			},
		},
		DeleteEmailActionsFunc: &CodeMonitorStoreDeleteEmailActionsFunc{
			defaultHook: func(context.Context, []int64, int64) (r0 error) {
				return
			},
		},
		DeleteMonitorFunc: &CodeMonitorStoreDeleteMonitorFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		DeleteObsoleteTriggerJobsFunc: &CodeMonitorStoreDeleteObsoleteTriggerJobsFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		DeleteOldTriggerJobsFunc: &CodeMonitorStoreDeleteOldTriggerJobsFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		DeleteRecipientsFunc: &CodeMonitorStoreDeleteRecipientsFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		DeleteSlackWebhookActionsFunc: &CodeMonitorStoreDeleteSlackWebhookActionsFunc{
			defaultHook: func(context.Context, int64, ...int64) (r0 error) {
				return
			},
		},
		DeleteWebhookActionsFunc: &CodeMonitorStoreDeleteWebhookActionsFunc{
			defaultHook: func(context.Context, int64, ...int64) (r0 error) {
				return
			},
		},
		DoneFunc: &CodeMonitorStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		EnqueueActionJobsForMonitorFunc: &CodeMonitorStoreEnqueueActionJobsForMonitorFunc{
			defaultHook: func(context.Context, int64, int32) (r0 []*ActionJob, r1 error) {
				return
			},
		},
		EnqueueQueryTriggerJobsFunc: &CodeMonitorStoreEnqueueQueryTriggerJobsFunc{
			defaultHook: func(context.Context) (r0 []*TriggerJob, r1 error) {
				return
			},
		},
		ExecFunc: &CodeMonitorStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 error) {
				return
			},
		},
		GetActionJobFunc: &CodeMonitorStoreGetActionJobFunc{
			defaultHook: func(context.Context, int32) (r0 *ActionJob, r1 error) {
				return
			},
		},
		GetActionJobMetadataFunc: &CodeMonitorStoreGetActionJobMetadataFunc{
			defaultHook: func(context.Context, int32) (r0 *ActionJobMetadata, r1 error) {
				return
			},
		},
		GetEmailActionFunc: &CodeMonitorStoreGetEmailActionFunc{
			defaultHook: func(context.Context, int64) (r0 *EmailAction, r1 error) {
				return
			},
		},
		GetLastSearchedFunc: &CodeMonitorStoreGetLastSearchedFunc{
			defaultHook: func(context.Context, int64, api.RepoID) (r0 []string, r1 error) {
				return
			},
		},
		GetMonitorFunc: &CodeMonitorStoreGetMonitorFunc{
			defaultHook: func(context.Context, int64) (r0 *Monitor, r1 error) {
				return
			},
		},
		GetQueryTriggerForJobFunc: &CodeMonitorStoreGetQueryTriggerForJobFunc{
			defaultHook: func(context.Context, int32) (r0 *QueryTrigger, r1 error) {
				return
			},
		},
		GetQueryTriggerForMonitorFunc: &CodeMonitorStoreGetQueryTriggerForMonitorFunc{
			defaultHook: func(context.Context, int64) (r0 *QueryTrigger, r1 error) {
				return
			},
		},
		GetSlackWebhookActionFunc: &CodeMonitorStoreGetSlackWebhookActionFunc{
			defaultHook: func(context.Context, int64) (r0 *SlackWebhookAction, r1 error) {
				return
			},
		},
		GetWebhookActionFunc: &CodeMonitorStoreGetWebhookActionFunc{
			defaultHook: func(context.Context, int64) (r0 *WebhookAction, r1 error) {
				return
			},
		},
		HandleFunc: &CodeMonitorStoreHandleFunc{
			defaultHook: func() (r0 *basestore.TransactableHandle) {
				return
			},
		},
		HasAnyLastSearchedFunc: &CodeMonitorStoreHasAnyLastSearchedFunc{
			defaultHook: func(context.Context, int64) (r0 bool, r1 error) {
				return
			},
		},
		ListActionJobsFunc: &CodeMonitorStoreListActionJobsFunc{
			defaultHook: func(context.Context, ListActionJobsOpts) (r0 []*ActionJob, r1 error) {
				return
			},
		},
		ListEmailActionsFunc: &CodeMonitorStoreListEmailActionsFunc{
			defaultHook: func(context.Context, ListActionsOpts) (r0 []*EmailAction, r1 error) {
				return
			},
		},
		ListMonitorsFunc: &CodeMonitorStoreListMonitorsFunc{
			defaultHook: func(context.Context, ListMonitorsOpts) (r0 []*Monitor, r1 error) {
				return
			},
		},
		ListQueryTriggerJobsFunc: &CodeMonitorStoreListQueryTriggerJobsFunc{
			defaultHook: func(context.Context, ListTriggerJobsOpts) (r0 []*TriggerJob, r1 error) {
				return
			},
		},
		ListRecipientsFunc: &CodeMonitorStoreListRecipientsFunc{
			defaultHook: func(context.Context, ListRecipientsOpts) (r0 []*Recipient, r1 error) {
				return
			},
		},
		ListSlackWebhookActionsFunc: &CodeMonitorStoreListSlackWebhookActionsFunc{
			defaultHook: func(context.Context, ListActionsOpts) (r0 []*SlackWebhookAction, r1 error) {
				return
			},
		},
		ListWebhookActionsFunc: &CodeMonitorStoreListWebhookActionsFunc{
			defaultHook: func(context.Context, ListActionsOpts) (r0 []*WebhookAction, r1 error) {
				return
			},
		},
		NowFunc: &CodeMonitorStoreNowFunc{
			defaultHook: func() (r0 time.Time) {
				return
			},
		},
		ResetQueryTriggerTimestampsFunc: &CodeMonitorStoreResetQueryTriggerTimestampsFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		SetQueryTriggerNextRunFunc: &CodeMonitorStoreSetQueryTriggerNextRunFunc{
			defaultHook: func(context.Context, int64, time.Time, time.Time) (r0 error) {
				return
			},
		},
		TransactFunc: &CodeMonitorStoreTransactFunc{
			defaultHook: func(context.Context) (r0 CodeMonitorStore, r1 error) {
				return
			},
		},
		UpdateEmailActionFunc: &CodeMonitorStoreUpdateEmailActionFunc{
			defaultHook: func(context.Context, int64, *EmailActionArgs) (r0 *EmailAction, r1 error) {
				return
			},
		},
		UpdateMonitorFunc: &CodeMonitorStoreUpdateMonitorFunc{
			defaultHook: func(context.Context, int64, MonitorArgs) (r0 *Monitor, r1 error) {
				return
			},
		},
		UpdateMonitorEnabledFunc: &CodeMonitorStoreUpdateMonitorEnabledFunc{
			defaultHook: func(context.Context, int64, bool) (r0 *Monitor, r1 error) {
				return
			},
		},
		UpdateQueryTriggerFunc: &CodeMonitorStoreUpdateQueryTriggerFunc{
			defaultHook: func(context.Context, int64, string) (r0 error) {
				return
			},
		},
		UpdateSlackWebhookActionFunc: &CodeMonitorStoreUpdateSlackWebhookActionFunc{
			defaultHook: func(context.Context, int64, bool, bool, string) (r0 *SlackWebhookAction, r1 error) {
				return
			},
		},
		UpdateTriggerJobWithResultsFunc: &CodeMonitorStoreUpdateTriggerJobWithResultsFunc{
			defaultHook: func(context.Context, int32, string, []*result.CommitMatch) (r0 error) {
				return
			},
		},
		UpdateWebhookActionFunc: &CodeMonitorStoreUpdateWebhookActionFunc{
			defaultHook: func(context.Context, int64, bool, bool, string) (r0 *WebhookAction, r1 error) {
				return
			},
		},
		UpsertLastSearchedFunc: &CodeMonitorStoreUpsertLastSearchedFunc{
			defaultHook: func(context.Context, int64, api.RepoID, []string) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockCodeMonitorStore creates a new mock of the CodeMonitorStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockCodeMonitorStore() *MockCodeMonitorStore {
	return &MockCodeMonitorStore{
		ClockFunc: &CodeMonitorStoreClockFunc{
			defaultHook: func() func() time.Time {
				panic("unexpected invocation of MockCodeMonitorStore.Clock")
			},
		},
		CountActionJobsFunc: &CodeMonitorStoreCountActionJobsFunc{
			defaultHook: func(context.Context, ListActionJobsOpts) (int, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CountActionJobs")
			},
		},
		CountMonitorsFunc: &CodeMonitorStoreCountMonitorsFunc{
			defaultHook: func(context.Context, int32) (int32, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CountMonitors")
			},
		},
		CountQueryTriggerJobsFunc: &CodeMonitorStoreCountQueryTriggerJobsFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CountQueryTriggerJobs")
			},
		},
		CountRecipientsFunc: &CodeMonitorStoreCountRecipientsFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CountRecipients")
			},
		},
		CountSlackWebhookActionsFunc: &CodeMonitorStoreCountSlackWebhookActionsFunc{
			defaultHook: func(context.Context, int64) (int, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CountSlackWebhookActions")
			},
		},
		CountWebhookActionsFunc: &CodeMonitorStoreCountWebhookActionsFunc{
			defaultHook: func(context.Context, int64) (int, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CountWebhookActions")
			},
		},
		CreateEmailActionFunc: &CodeMonitorStoreCreateEmailActionFunc{
			defaultHook: func(context.Context, int64, *EmailActionArgs) (*EmailAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CreateEmailAction")
			},
		},
		CreateMonitorFunc: &CodeMonitorStoreCreateMonitorFunc{
			defaultHook: func(context.Context, MonitorArgs) (*Monitor, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CreateMonitor")
			},
		},
		CreateQueryTriggerFunc: &CodeMonitorStoreCreateQueryTriggerFunc{
			defaultHook: func(context.Context, int64, string) (*QueryTrigger, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CreateQueryTrigger")
			},
		},
		CreateRecipientFunc: &CodeMonitorStoreCreateRecipientFunc{
			defaultHook: func(context.Context, int64, *int32, *int32) (*Recipient, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CreateRecipient")
			},
		},
		CreateSlackWebhookActionFunc: &CodeMonitorStoreCreateSlackWebhookActionFunc{
			defaultHook: func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CreateSlackWebhookAction")
			},
		},
		CreateWebhookActionFunc: &CodeMonitorStoreCreateWebhookActionFunc{
			defaultHook: func(context.Context, int64, bool, bool, string) (*WebhookAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.CreateWebhookAction")
			},
		},
		DeleteEmailActionsFunc: &CodeMonitorStoreDeleteEmailActionsFunc{
			defaultHook: func(context.Context, []int64, int64) error {
				panic("unexpected invocation of MockCodeMonitorStore.DeleteEmailActions")
			},
		},
		DeleteMonitorFunc: &CodeMonitorStoreDeleteMonitorFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockCodeMonitorStore.DeleteMonitor")
			},
		},
		DeleteObsoleteTriggerJobsFunc: &CodeMonitorStoreDeleteObsoleteTriggerJobsFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockCodeMonitorStore.DeleteObsoleteTriggerJobs")
			},
		},
		DeleteOldTriggerJobsFunc: &CodeMonitorStoreDeleteOldTriggerJobsFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockCodeMonitorStore.DeleteOldTriggerJobs")
			},
		},
		DeleteRecipientsFunc: &CodeMonitorStoreDeleteRecipientsFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockCodeMonitorStore.DeleteRecipients")
			},
		},
		DeleteSlackWebhookActionsFunc: &CodeMonitorStoreDeleteSlackWebhookActionsFunc{
			defaultHook: func(context.Context, int64, ...int64) error {
				panic("unexpected invocation of MockCodeMonitorStore.DeleteSlackWebhookActions")
			},
		},
		DeleteWebhookActionsFunc: &CodeMonitorStoreDeleteWebhookActionsFunc{
			defaultHook: func(context.Context, int64, ...int64) error {
				panic("unexpected invocation of MockCodeMonitorStore.DeleteWebhookActions")
			},
		},
		DoneFunc: &CodeMonitorStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockCodeMonitorStore.Done")
			},
		},
		EnqueueActionJobsForMonitorFunc: &CodeMonitorStoreEnqueueActionJobsForMonitorFunc{
			defaultHook: func(context.Context, int64, int32) ([]*ActionJob, error) {
				panic("unexpected invocation of MockCodeMonitorStore.EnqueueActionJobsForMonitor")
			},
		},
		EnqueueQueryTriggerJobsFunc: &CodeMonitorStoreEnqueueQueryTriggerJobsFunc{
			defaultHook: func(context.Context) ([]*TriggerJob, error) {
				panic("unexpected invocation of MockCodeMonitorStore.EnqueueQueryTriggerJobs")
			},
		},
		ExecFunc: &CodeMonitorStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				panic("unexpected invocation of MockCodeMonitorStore.Exec")
			},
		},
		GetActionJobFunc: &CodeMonitorStoreGetActionJobFunc{
			defaultHook: func(context.Context, int32) (*ActionJob, error) {
				panic("unexpected invocation of MockCodeMonitorStore.GetActionJob")
			},
		},
		GetActionJobMetadataFunc: &CodeMonitorStoreGetActionJobMetadataFunc{
			defaultHook: func(context.Context, int32) (*ActionJobMetadata, error) {
				panic("unexpected invocation of MockCodeMonitorStore.GetActionJobMetadata")
			},
		},
		GetEmailActionFunc: &CodeMonitorStoreGetEmailActionFunc{
			defaultHook: func(context.Context, int64) (*EmailAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.GetEmailAction")
			},
		},
		GetLastSearchedFunc: &CodeMonitorStoreGetLastSearchedFunc{
			defaultHook: func(context.Context, int64, api.RepoID) ([]string, error) {
				panic("unexpected invocation of MockCodeMonitorStore.GetLastSearched")
			},
		},
		GetMonitorFunc: &CodeMonitorStoreGetMonitorFunc{
			defaultHook: func(context.Context, int64) (*Monitor, error) {
				panic("unexpected invocation of MockCodeMonitorStore.GetMonitor")
			},
		},
		GetQueryTriggerForJobFunc: &CodeMonitorStoreGetQueryTriggerForJobFunc{
			defaultHook: func(context.Context, int32) (*QueryTrigger, error) {
				panic("unexpected invocation of MockCodeMonitorStore.GetQueryTriggerForJob")
			},
		},
		GetQueryTriggerForMonitorFunc: &CodeMonitorStoreGetQueryTriggerForMonitorFunc{
			defaultHook: func(context.Context, int64) (*QueryTrigger, error) {
				panic("unexpected invocation of MockCodeMonitorStore.GetQueryTriggerForMonitor")
			},
		},
		GetSlackWebhookActionFunc: &CodeMonitorStoreGetSlackWebhookActionFunc{
			defaultHook: func(context.Context, int64) (*SlackWebhookAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.GetSlackWebhookAction")
			},
		},
		GetWebhookActionFunc: &CodeMonitorStoreGetWebhookActionFunc{
			defaultHook: func(context.Context, int64) (*WebhookAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.GetWebhookAction")
			},
		},
		HandleFunc: &CodeMonitorStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockCodeMonitorStore.Handle")
			},
		},
		HasAnyLastSearchedFunc: &CodeMonitorStoreHasAnyLastSearchedFunc{
			defaultHook: func(context.Context, int64) (bool, error) {
				panic("unexpected invocation of MockCodeMonitorStore.HasAnyLastSearched")
			},
		},
		ListActionJobsFunc: &CodeMonitorStoreListActionJobsFunc{
			defaultHook: func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
				panic("unexpected invocation of MockCodeMonitorStore.ListActionJobs")
			},
		},
		ListEmailActionsFunc: &CodeMonitorStoreListEmailActionsFunc{
			defaultHook: func(context.Context, ListActionsOpts) ([]*EmailAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.ListEmailActions")
			},
		},
		ListMonitorsFunc: &CodeMonitorStoreListMonitorsFunc{
			defaultHook: func(context.Context, ListMonitorsOpts) ([]*Monitor, error) {
				panic("unexpected invocation of MockCodeMonitorStore.ListMonitors")
			},
		},
		ListQueryTriggerJobsFunc: &CodeMonitorStoreListQueryTriggerJobsFunc{
			defaultHook: func(context.Context, ListTriggerJobsOpts) ([]*TriggerJob, error) {
				panic("unexpected invocation of MockCodeMonitorStore.ListQueryTriggerJobs")
			},
		},
		ListRecipientsFunc: &CodeMonitorStoreListRecipientsFunc{
			defaultHook: func(context.Context, ListRecipientsOpts) ([]*Recipient, error) {
				panic("unexpected invocation of MockCodeMonitorStore.ListRecipients")
			},
		},
		ListSlackWebhookActionsFunc: &CodeMonitorStoreListSlackWebhookActionsFunc{
			defaultHook: func(context.Context, ListActionsOpts) ([]*SlackWebhookAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.ListSlackWebhookActions")
			},
		},
		ListWebhookActionsFunc: &CodeMonitorStoreListWebhookActionsFunc{
			defaultHook: func(context.Context, ListActionsOpts) ([]*WebhookAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.ListWebhookActions")
			},
		},
		NowFunc: &CodeMonitorStoreNowFunc{
			defaultHook: func() time.Time {
				panic("unexpected invocation of MockCodeMonitorStore.Now")
			},
		},
		ResetQueryTriggerTimestampsFunc: &CodeMonitorStoreResetQueryTriggerTimestampsFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockCodeMonitorStore.ResetQueryTriggerTimestamps")
			},
		},
		SetQueryTriggerNextRunFunc: &CodeMonitorStoreSetQueryTriggerNextRunFunc{
			defaultHook: func(context.Context, int64, time.Time, time.Time) error {
				panic("unexpected invocation of MockCodeMonitorStore.SetQueryTriggerNextRun")
			},
		},
		TransactFunc: &CodeMonitorStoreTransactFunc{
			defaultHook: func(context.Context) (CodeMonitorStore, error) {
				panic("unexpected invocation of MockCodeMonitorStore.Transact")
			},
		},
		UpdateEmailActionFunc: &CodeMonitorStoreUpdateEmailActionFunc{
			defaultHook: func(context.Context, int64, *EmailActionArgs) (*EmailAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.UpdateEmailAction")
			},
		},
		UpdateMonitorFunc: &CodeMonitorStoreUpdateMonitorFunc{
			defaultHook: func(context.Context, int64, MonitorArgs) (*Monitor, error) {
				panic("unexpected invocation of MockCodeMonitorStore.UpdateMonitor")
			},
		},
		UpdateMonitorEnabledFunc: &CodeMonitorStoreUpdateMonitorEnabledFunc{
			defaultHook: func(context.Context, int64, bool) (*Monitor, error) {
				panic("unexpected invocation of MockCodeMonitorStore.UpdateMonitorEnabled")
			},
		},
		UpdateQueryTriggerFunc: &CodeMonitorStoreUpdateQueryTriggerFunc{
			defaultHook: func(context.Context, int64, string) error {
				panic("unexpected invocation of MockCodeMonitorStore.UpdateQueryTrigger")
			},
		},
		UpdateSlackWebhookActionFunc: &CodeMonitorStoreUpdateSlackWebhookActionFunc{
			defaultHook: func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.UpdateSlackWebhookAction")
			},
		},
		UpdateTriggerJobWithResultsFunc: &CodeMonitorStoreUpdateTriggerJobWithResultsFunc{
			defaultHook: func(context.Context, int32, string, []*result.CommitMatch) error {
				panic("unexpected invocation of MockCodeMonitorStore.UpdateTriggerJobWithResults")
			},
		},
		UpdateWebhookActionFunc: &CodeMonitorStoreUpdateWebhookActionFunc{
			defaultHook: func(context.Context, int64, bool, bool, string) (*WebhookAction, error) {
				panic("unexpected invocation of MockCodeMonitorStore.UpdateWebhookAction")
			},
		},
		UpsertLastSearchedFunc: &CodeMonitorStoreUpsertLastSearchedFunc{
			defaultHook: func(context.Context, int64, api.RepoID, []string) error {
				panic("unexpected invocation of MockCodeMonitorStore.UpsertLastSearched")
			},
		},
	}
}

// NewMockCodeMonitorStoreFrom creates a new mock of the
// MockCodeMonitorStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockCodeMonitorStoreFrom(i CodeMonitorStore) *MockCodeMonitorStore {
	return &MockCodeMonitorStore{
		ClockFunc: &CodeMonitorStoreClockFunc{
			defaultHook: i.Clock,
		},
		CountActionJobsFunc: &CodeMonitorStoreCountActionJobsFunc{
			defaultHook: i.CountActionJobs,
		},
		CountMonitorsFunc: &CodeMonitorStoreCountMonitorsFunc{
			defaultHook: i.CountMonitors,
		},
		CountQueryTriggerJobsFunc: &CodeMonitorStoreCountQueryTriggerJobsFunc{
			defaultHook: i.CountQueryTriggerJobs,
		},
		CountRecipientsFunc: &CodeMonitorStoreCountRecipientsFunc{
			defaultHook: i.CountRecipients,
		},
		CountSlackWebhookActionsFunc: &CodeMonitorStoreCountSlackWebhookActionsFunc{
			defaultHook: i.CountSlackWebhookActions,
		},
		CountWebhookActionsFunc: &CodeMonitorStoreCountWebhookActionsFunc{
			defaultHook: i.CountWebhookActions,
		},
		CreateEmailActionFunc: &CodeMonitorStoreCreateEmailActionFunc{
			defaultHook: i.CreateEmailAction,
		},
		CreateMonitorFunc: &CodeMonitorStoreCreateMonitorFunc{
			defaultHook: i.CreateMonitor,
		},
		CreateQueryTriggerFunc: &CodeMonitorStoreCreateQueryTriggerFunc{
			defaultHook: i.CreateQueryTrigger,
		},
		CreateRecipientFunc: &CodeMonitorStoreCreateRecipientFunc{
			defaultHook: i.CreateRecipient,
		},
		CreateSlackWebhookActionFunc: &CodeMonitorStoreCreateSlackWebhookActionFunc{
			defaultHook: i.CreateSlackWebhookAction,
		},
		CreateWebhookActionFunc: &CodeMonitorStoreCreateWebhookActionFunc{
			defaultHook: i.CreateWebhookAction,
		},
		DeleteEmailActionsFunc: &CodeMonitorStoreDeleteEmailActionsFunc{
			defaultHook: i.DeleteEmailActions,
		},
		DeleteMonitorFunc: &CodeMonitorStoreDeleteMonitorFunc{
			defaultHook: i.DeleteMonitor,
		},
		DeleteObsoleteTriggerJobsFunc: &CodeMonitorStoreDeleteObsoleteTriggerJobsFunc{
			defaultHook: i.DeleteObsoleteTriggerJobs,
		},
		DeleteOldTriggerJobsFunc: &CodeMonitorStoreDeleteOldTriggerJobsFunc{
			defaultHook: i.DeleteOldTriggerJobs,
		},
		DeleteRecipientsFunc: &CodeMonitorStoreDeleteRecipientsFunc{
			defaultHook: i.DeleteRecipients,
		},
		DeleteSlackWebhookActionsFunc: &CodeMonitorStoreDeleteSlackWebhookActionsFunc{
			defaultHook: i.DeleteSlackWebhookActions,
		},
		DeleteWebhookActionsFunc: &CodeMonitorStoreDeleteWebhookActionsFunc{
			defaultHook: i.DeleteWebhookActions,
		},
		DoneFunc: &CodeMonitorStoreDoneFunc{
			defaultHook: i.Done,
		},
		EnqueueActionJobsForMonitorFunc: &CodeMonitorStoreEnqueueActionJobsForMonitorFunc{
			defaultHook: i.EnqueueActionJobsForMonitor,
		},
		EnqueueQueryTriggerJobsFunc: &CodeMonitorStoreEnqueueQueryTriggerJobsFunc{
			defaultHook: i.EnqueueQueryTriggerJobs,
		},
		ExecFunc: &CodeMonitorStoreExecFunc{
			defaultHook: i.Exec,
		},
		GetActionJobFunc: &CodeMonitorStoreGetActionJobFunc{
			defaultHook: i.GetActionJob,
		},
		GetActionJobMetadataFunc: &CodeMonitorStoreGetActionJobMetadataFunc{
			defaultHook: i.GetActionJobMetadata,
		},
		GetEmailActionFunc: &CodeMonitorStoreGetEmailActionFunc{
			defaultHook: i.GetEmailAction,
		},
		GetLastSearchedFunc: &CodeMonitorStoreGetLastSearchedFunc{
			defaultHook: i.GetLastSearched,
		},
		GetMonitorFunc: &CodeMonitorStoreGetMonitorFunc{
			defaultHook: i.GetMonitor,
		},
		GetQueryTriggerForJobFunc: &CodeMonitorStoreGetQueryTriggerForJobFunc{
			defaultHook: i.GetQueryTriggerForJob,
		},
		GetQueryTriggerForMonitorFunc: &CodeMonitorStoreGetQueryTriggerForMonitorFunc{
			defaultHook: i.GetQueryTriggerForMonitor,
		},
		GetSlackWebhookActionFunc: &CodeMonitorStoreGetSlackWebhookActionFunc{
			defaultHook: i.GetSlackWebhookAction,
		},
		GetWebhookActionFunc: &CodeMonitorStoreGetWebhookActionFunc{
			defaultHook: i.GetWebhookAction,
		},
		HandleFunc: &CodeMonitorStoreHandleFunc{
			defaultHook: i.Handle,
		},
		HasAnyLastSearchedFunc: &CodeMonitorStoreHasAnyLastSearchedFunc{
			defaultHook: i.HasAnyLastSearched,
		},
		ListActionJobsFunc: &CodeMonitorStoreListActionJobsFunc{
			defaultHook: i.ListActionJobs,
		},
		ListEmailActionsFunc: &CodeMonitorStoreListEmailActionsFunc{
			defaultHook: i.ListEmailActions,
		},
		ListMonitorsFunc: &CodeMonitorStoreListMonitorsFunc{
			defaultHook: i.ListMonitors,
		},
		ListQueryTriggerJobsFunc: &CodeMonitorStoreListQueryTriggerJobsFunc{
			defaultHook: i.ListQueryTriggerJobs,
		},
		ListRecipientsFunc: &CodeMonitorStoreListRecipientsFunc{
			defaultHook: i.ListRecipients,
		},
		ListSlackWebhookActionsFunc: &CodeMonitorStoreListSlackWebhookActionsFunc{
			defaultHook: i.ListSlackWebhookActions,
		},
		ListWebhookActionsFunc: &CodeMonitorStoreListWebhookActionsFunc{
			defaultHook: i.ListWebhookActions,
		},
		NowFunc: &CodeMonitorStoreNowFunc{
			defaultHook: i.Now,
		},
		ResetQueryTriggerTimestampsFunc: &CodeMonitorStoreResetQueryTriggerTimestampsFunc{
			defaultHook: i.ResetQueryTriggerTimestamps,
		},
		SetQueryTriggerNextRunFunc: &CodeMonitorStoreSetQueryTriggerNextRunFunc{
			defaultHook: i.SetQueryTriggerNextRun,
		},
		TransactFunc: &CodeMonitorStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateEmailActionFunc: &CodeMonitorStoreUpdateEmailActionFunc{
			defaultHook: i.UpdateEmailAction,
		},
		UpdateMonitorFunc: &CodeMonitorStoreUpdateMonitorFunc{
			defaultHook: i.UpdateMonitor,
		},
		UpdateMonitorEnabledFunc: &CodeMonitorStoreUpdateMonitorEnabledFunc{
			defaultHook: i.UpdateMonitorEnabled,
		},
		UpdateQueryTriggerFunc: &CodeMonitorStoreUpdateQueryTriggerFunc{
			defaultHook: i.UpdateQueryTrigger,
		},
		UpdateSlackWebhookActionFunc: &CodeMonitorStoreUpdateSlackWebhookActionFunc{
			defaultHook: i.UpdateSlackWebhookAction,
		},
		UpdateTriggerJobWithResultsFunc: &CodeMonitorStoreUpdateTriggerJobWithResultsFunc{
			defaultHook: i.UpdateTriggerJobWithResults,
		},
		UpdateWebhookActionFunc: &CodeMonitorStoreUpdateWebhookActionFunc{
			defaultHook: i.UpdateWebhookAction,
		},
		UpsertLastSearchedFunc: &CodeMonitorStoreUpsertLastSearchedFunc{
			defaultHook: i.UpsertLastSearched,
		},
	}
}

// CodeMonitorStoreClockFunc describes the behavior when the Clock method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreClockFunc struct {
	defaultHook func() func() time.Time
	hooks       []func() func() time.Time
	history     []CodeMonitorStoreClockFuncCall
	mutex       sync.Mutex
}

// Clock delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Clock() func() time.Time {
	r0 := m.ClockFunc.nextHook()()
	m.ClockFunc.appendCall(CodeMonitorStoreClockFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Clock method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreClockFunc) SetDefaultHook(hook func() func() time.Time) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Clock method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreClockFunc) PushHook(hook func() func() time.Time) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreClockFunc) SetDefaultReturn(r0 func() time.Time) {
	f.SetDefaultHook(func() func() time.Time {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreClockFunc) PushReturn(r0 func() time.Time) {
	f.PushHook(func() func() time.Time {
		return r0
	})
}

func (f *CodeMonitorStoreClockFunc) nextHook() func() func() time.Time {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreClockFunc) appendCall(r0 CodeMonitorStoreClockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreClockFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreClockFunc) History() []CodeMonitorStoreClockFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreClockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreClockFuncCall is an object that describes an invocation
// of method Clock on an instance of MockCodeMonitorStore.
type CodeMonitorStoreClockFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 func() time.Time
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreClockFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreClockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreCountActionJobsFunc describes the behavior when the
// CountActionJobs method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCountActionJobsFunc struct {
	defaultHook func(context.Context, ListActionJobsOpts) (int, error)
	hooks       []func(context.Context, ListActionJobsOpts) (int, error)
	history     []CodeMonitorStoreCountActionJobsFuncCall
	mutex       sync.Mutex
}

// CountActionJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountActionJobs(v0 context.Context, v1 ListActionJobsOpts) (int, error) {
	r0, r1 := m.CountActionJobsFunc.nextHook()(v0, v1)
	m.CountActionJobsFunc.appendCall(CodeMonitorStoreCountActionJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountActionJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCountActionJobsFunc) SetDefaultHook(hook func(context.Context, ListActionJobsOpts) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountActionJobs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCountActionJobsFunc) PushHook(hook func(context.Context, ListActionJobsOpts) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCountActionJobsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionJobsOpts) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCountActionJobsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ListActionJobsOpts) (int, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountActionJobsFunc) nextHook() func(context.Context, ListActionJobsOpts) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountActionJobsFunc) appendCall(r0 CodeMonitorStoreCountActionJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCountActionJobsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCountActionJobsFunc) History() []CodeMonitorStoreCountActionJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountActionJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountActionJobsFuncCall is an object that describes an
// invocation of method CountActionJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountActionJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionJobsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountActionJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountActionJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCountMonitorsFunc describes the behavior when the
// CountMonitors method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCountMonitorsFunc struct {
	defaultHook func(context.Context, int32) (int32, error)
	hooks       []func(context.Context, int32) (int32, error)
	history     []CodeMonitorStoreCountMonitorsFuncCall
	mutex       sync.Mutex
}

// CountMonitors delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountMonitors(v0 context.Context, v1 int32) (int32, error) {
	r0, r1 := m.CountMonitorsFunc.nextHook()(v0, v1)
	m.CountMonitorsFunc.appendCall(CodeMonitorStoreCountMonitorsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountMonitors method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreCountMonitorsFunc) SetDefaultHook(hook func(context.Context, int32) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountMonitors method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreCountMonitorsFunc) PushHook(hook func(context.Context, int32) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCountMonitorsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCountMonitorsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int32) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountMonitorsFunc) nextHook() func(context.Context, int32) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountMonitorsFunc) appendCall(r0 CodeMonitorStoreCountMonitorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCountMonitorsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCountMonitorsFunc) History() []CodeMonitorStoreCountMonitorsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountMonitorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountMonitorsFuncCall is an object that describes an
// invocation of method CountMonitors on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountMonitorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountMonitorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountMonitorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCountQueryTriggerJobsFunc describes the behavior when the
// CountQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreCountQueryTriggerJobsFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []CodeMonitorStoreCountQueryTriggerJobsFuncCall
	mutex       sync.Mutex
}

// CountQueryTriggerJobs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountQueryTriggerJobs(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.CountQueryTriggerJobsFunc.nextHook()(v0, v1)
	m.CountQueryTriggerJobsFunc.appendCall(CodeMonitorStoreCountQueryTriggerJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) appendCall(r0 CodeMonitorStoreCountQueryTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreCountQueryTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) History() []CodeMonitorStoreCountQueryTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountQueryTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountQueryTriggerJobsFuncCall is an object that describes
// an invocation of method CountQueryTriggerJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountQueryTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountQueryTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountQueryTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCountRecipientsFunc describes the behavior when the
// CountRecipients method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCountRecipientsFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []CodeMonitorStoreCountRecipientsFuncCall
	mutex       sync.Mutex
}

// CountRecipients delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountRecipients(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.CountRecipientsFunc.nextHook()(v0, v1)
	m.CountRecipientsFunc.appendCall(CodeMonitorStoreCountRecipientsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountRecipients
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCountRecipientsFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountRecipients method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCountRecipientsFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCountRecipientsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCountRecipientsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountRecipientsFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountRecipientsFunc) appendCall(r0 CodeMonitorStoreCountRecipientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCountRecipientsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCountRecipientsFunc) History() []CodeMonitorStoreCountRecipientsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountRecipientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountRecipientsFuncCall is an object that describes an
// invocation of method CountRecipients on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountRecipientsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountRecipientsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountRecipientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCountSlackWebhookActionsFunc describes the behavior when
// the CountSlackWebhookActions method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreCountSlackWebhookActionsFunc struct {
	defaultHook func(context.Context, int64) (int, error)
	hooks       []func(context.Context, int64) (int, error)
	history     []CodeMonitorStoreCountSlackWebhookActionsFuncCall
	mutex       sync.Mutex
}

// CountSlackWebhookActions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountSlackWebhookActions(v0 context.Context, v1 int64) (int, error) {
	r0, r1 := m.CountSlackWebhookActionsFunc.nextHook()(v0, v1)
	m.CountSlackWebhookActionsFunc.appendCall(CodeMonitorStoreCountSlackWebhookActionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountSlackWebhookActions method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreCountSlackWebhookActionsFunc) SetDefaultHook(hook func(context.Context, int64) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountSlackWebhookActions method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreCountSlackWebhookActionsFunc) PushHook(hook func(context.Context, int64) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCountSlackWebhookActionsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCountSlackWebhookActionsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int64) (int, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountSlackWebhookActionsFunc) nextHook() func(context.Context, int64) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountSlackWebhookActionsFunc) appendCall(r0 CodeMonitorStoreCountSlackWebhookActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreCountSlackWebhookActionsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreCountSlackWebhookActionsFunc) History() []CodeMonitorStoreCountSlackWebhookActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountSlackWebhookActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountSlackWebhookActionsFuncCall is an object that
// describes an invocation of method CountSlackWebhookActions on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreCountSlackWebhookActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountSlackWebhookActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountSlackWebhookActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCountWebhookActionsFunc describes the behavior when the
// CountWebhookActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCountWebhookActionsFunc struct {
	defaultHook func(context.Context, int64) (int, error)
	hooks       []func(context.Context, int64) (int, error)
	history     []CodeMonitorStoreCountWebhookActionsFuncCall
	mutex       sync.Mutex
}

// CountWebhookActions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountWebhookActions(v0 context.Context, v1 int64) (int, error) {
	r0, r1 := m.CountWebhookActionsFunc.nextHook()(v0, v1)
	m.CountWebhookActionsFunc.appendCall(CodeMonitorStoreCountWebhookActionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountWebhookActions
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCountWebhookActionsFunc) SetDefaultHook(hook func(context.Context, int64) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountWebhookActions method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCountWebhookActionsFunc) PushHook(hook func(context.Context, int64) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCountWebhookActionsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCountWebhookActionsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int64) (int, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountWebhookActionsFunc) nextHook() func(context.Context, int64) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountWebhookActionsFunc) appendCall(r0 CodeMonitorStoreCountWebhookActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCountWebhookActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCountWebhookActionsFunc) History() []CodeMonitorStoreCountWebhookActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountWebhookActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountWebhookActionsFuncCall is an object that describes
// an invocation of method CountWebhookActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountWebhookActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountWebhookActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountWebhookActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateEmailActionFunc describes the behavior when the
// CreateEmailAction method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateEmailActionFunc struct {
	defaultHook func(context.Context, int64, *EmailActionArgs) (*EmailAction, error)
	hooks       []func(context.Context, int64, *EmailActionArgs) (*EmailAction, error)
	history     []CodeMonitorStoreCreateEmailActionFuncCall
	mutex       sync.Mutex
}

// CreateEmailAction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateEmailAction(v0 context.Context, v1 int64, v2 *EmailActionArgs) (*EmailAction, error) {
	r0, r1 := m.CreateEmailActionFunc.nextHook()(v0, v1, v2)
	m.CreateEmailActionFunc.appendCall(CodeMonitorStoreCreateEmailActionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateEmailAction
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateEmailActionFunc) SetDefaultHook(hook func(context.Context, int64, *EmailActionArgs) (*EmailAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateEmailAction method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateEmailActionFunc) PushHook(hook func(context.Context, int64, *EmailActionArgs) (*EmailAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCreateEmailActionFunc) SetDefaultReturn(r0 *EmailAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *EmailActionArgs) (*EmailAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCreateEmailActionFunc) PushReturn(r0 *EmailAction, r1 error) {
	f.PushHook(func(context.Context, int64, *EmailActionArgs) (*EmailAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateEmailActionFunc) nextHook() func(context.Context, int64, *EmailActionArgs) (*EmailAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateEmailActionFunc) appendCall(r0 CodeMonitorStoreCreateEmailActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateEmailActionFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateEmailActionFunc) History() []CodeMonitorStoreCreateEmailActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateEmailActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateEmailActionFuncCall is an object that describes an
// invocation of method CreateEmailAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateEmailActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *EmailActionArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *EmailAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateEmailActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateEmailActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateMonitorFunc describes the behavior when the
// CreateMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateMonitorFunc struct {
	defaultHook func(context.Context, MonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, MonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreCreateMonitorFuncCall
	mutex       sync.Mutex
}

// CreateMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateMonitor(v0 context.Context, v1 MonitorArgs) (*Monitor, error) {
	r0, r1 := m.CreateMonitorFunc.nextHook()(v0, v1)
	m.CreateMonitorFunc.appendCall(CodeMonitorStoreCreateMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreCreateMonitorFunc) SetDefaultHook(hook func(context.Context, MonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreCreateMonitorFunc) PushHook(hook func(context.Context, MonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCreateMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, MonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCreateMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, MonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateMonitorFunc) nextHook() func(context.Context, MonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateMonitorFunc) appendCall(r0 CodeMonitorStoreCreateMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateMonitorFunc) History() []CodeMonitorStoreCreateMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateMonitorFuncCall is an object that describes an
// invocation of method CreateMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 MonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateQueryTriggerFunc describes the behavior when the
// CreateQueryTrigger method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateQueryTriggerFunc struct {
	defaultHook func(context.Context, int64, string) (*QueryTrigger, error)
	hooks       []func(context.Context, int64, string) (*QueryTrigger, error)
	history     []CodeMonitorStoreCreateQueryTriggerFuncCall
	mutex       sync.Mutex
}

// CreateQueryTrigger delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateQueryTrigger(v0 context.Context, v1 int64, v2 string) (*QueryTrigger, error) {
	r0, r1 := m.CreateQueryTriggerFunc.nextHook()(v0, v1, v2)
	m.CreateQueryTriggerFunc.appendCall(CodeMonitorStoreCreateQueryTriggerFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateQueryTrigger
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) SetDefaultHook(hook func(context.Context, int64, string) (*QueryTrigger, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateQueryTrigger method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) PushHook(hook func(context.Context, int64, string) (*QueryTrigger, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) SetDefaultReturn(r0 *QueryTrigger, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, string) (*QueryTrigger, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) PushReturn(r0 *QueryTrigger, r1 error) {
	f.PushHook(func(context.Context, int64, string) (*QueryTrigger, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateQueryTriggerFunc) nextHook() func(context.Context, int64, string) (*QueryTrigger, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateQueryTriggerFunc) appendCall(r0 CodeMonitorStoreCreateQueryTriggerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateQueryTriggerFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) History() []CodeMonitorStoreCreateQueryTriggerFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateQueryTriggerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateQueryTriggerFuncCall is an object that describes an
// invocation of method CreateQueryTrigger on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateQueryTriggerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *QueryTrigger
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateQueryTriggerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateQueryTriggerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateRecipientFunc describes the behavior when the
// CreateRecipient method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateRecipientFunc struct {
	defaultHook func(context.Context, int64, *int32, *int32) (*Recipient, error)
	hooks       []func(context.Context, int64, *int32, *int32) (*Recipient, error)
	history     []CodeMonitorStoreCreateRecipientFuncCall
	mutex       sync.Mutex
}

// CreateRecipient delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateRecipient(v0 context.Context, v1 int64, v2 *int32, v3 *int32) (*Recipient, error) {
	r0, r1 := m.CreateRecipientFunc.nextHook()(v0, v1, v2, v3)
	m.CreateRecipientFunc.appendCall(CodeMonitorStoreCreateRecipientFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateRecipient
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateRecipientFunc) SetDefaultHook(hook func(context.Context, int64, *int32, *int32) (*Recipient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateRecipient method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateRecipientFunc) PushHook(hook func(context.Context, int64, *int32, *int32) (*Recipient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCreateRecipientFunc) SetDefaultReturn(r0 *Recipient, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *int32, *int32) (*Recipient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCreateRecipientFunc) PushReturn(r0 *Recipient, r1 error) {
	f.PushHook(func(context.Context, int64, *int32, *int32) (*Recipient, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateRecipientFunc) nextHook() func(context.Context, int64, *int32, *int32) (*Recipient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateRecipientFunc) appendCall(r0 CodeMonitorStoreCreateRecipientFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateRecipientFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateRecipientFunc) History() []CodeMonitorStoreCreateRecipientFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateRecipientFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateRecipientFuncCall is an object that describes an
// invocation of method CreateRecipient on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateRecipientFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Recipient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateRecipientFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateRecipientFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateSlackWebhookActionFunc describes the behavior when
// the CreateSlackWebhookAction method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreCreateSlackWebhookActionFunc struct {
	defaultHook func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error)
	hooks       []func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error)
	history     []CodeMonitorStoreCreateSlackWebhookActionFuncCall
	mutex       sync.Mutex
}

// CreateSlackWebhookAction delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateSlackWebhookAction(v0 context.Context, v1 int64, v2 bool, v3 bool, v4 string) (*SlackWebhookAction, error) {
	r0, r1 := m.CreateSlackWebhookActionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateSlackWebhookActionFunc.appendCall(CodeMonitorStoreCreateSlackWebhookActionFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateSlackWebhookAction method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreCreateSlackWebhookActionFunc) SetDefaultHook(hook func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateSlackWebhookAction method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreCreateSlackWebhookActionFunc) PushHook(hook func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCreateSlackWebhookActionFunc) SetDefaultReturn(r0 *SlackWebhookAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCreateSlackWebhookActionFunc) PushReturn(r0 *SlackWebhookAction, r1 error) {
	f.PushHook(func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateSlackWebhookActionFunc) nextHook() func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateSlackWebhookActionFunc) appendCall(r0 CodeMonitorStoreCreateSlackWebhookActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreCreateSlackWebhookActionFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreCreateSlackWebhookActionFunc) History() []CodeMonitorStoreCreateSlackWebhookActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateSlackWebhookActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateSlackWebhookActionFuncCall is an object that
// describes an invocation of method CreateSlackWebhookAction on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreCreateSlackWebhookActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *SlackWebhookAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateSlackWebhookActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateSlackWebhookActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateWebhookActionFunc describes the behavior when the
// CreateWebhookAction method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateWebhookActionFunc struct {
	defaultHook func(context.Context, int64, bool, bool, string) (*WebhookAction, error)
	hooks       []func(context.Context, int64, bool, bool, string) (*WebhookAction, error)
	history     []CodeMonitorStoreCreateWebhookActionFuncCall
	mutex       sync.Mutex
}

// CreateWebhookAction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateWebhookAction(v0 context.Context, v1 int64, v2 bool, v3 bool, v4 string) (*WebhookAction, error) {
	r0, r1 := m.CreateWebhookActionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateWebhookActionFunc.appendCall(CodeMonitorStoreCreateWebhookActionFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateWebhookAction
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateWebhookActionFunc) SetDefaultHook(hook func(context.Context, int64, bool, bool, string) (*WebhookAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateWebhookAction method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateWebhookActionFunc) PushHook(hook func(context.Context, int64, bool, bool, string) (*WebhookAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreCreateWebhookActionFunc) SetDefaultReturn(r0 *WebhookAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, bool, bool, string) (*WebhookAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreCreateWebhookActionFunc) PushReturn(r0 *WebhookAction, r1 error) {
	f.PushHook(func(context.Context, int64, bool, bool, string) (*WebhookAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateWebhookActionFunc) nextHook() func(context.Context, int64, bool, bool, string) (*WebhookAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateWebhookActionFunc) appendCall(r0 CodeMonitorStoreCreateWebhookActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateWebhookActionFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateWebhookActionFunc) History() []CodeMonitorStoreCreateWebhookActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateWebhookActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateWebhookActionFuncCall is an object that describes
// an invocation of method CreateWebhookAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateWebhookActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *WebhookAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateWebhookActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateWebhookActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreDeleteEmailActionsFunc describes the behavior when the
// DeleteEmailActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteEmailActionsFunc struct {
	defaultHook func(context.Context, []int64, int64) error
	hooks       []func(context.Context, []int64, int64) error
	history     []CodeMonitorStoreDeleteEmailActionsFuncCall
	mutex       sync.Mutex
}

// DeleteEmailActions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteEmailActions(v0 context.Context, v1 []int64, v2 int64) error {
	r0 := m.DeleteEmailActionsFunc.nextHook()(v0, v1, v2)
	m.DeleteEmailActionsFunc.appendCall(CodeMonitorStoreDeleteEmailActionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteEmailActions
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) SetDefaultHook(hook func(context.Context, []int64, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteEmailActions method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) PushHook(hook func(context.Context, []int64, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int64, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int64, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteEmailActionsFunc) nextHook() func(context.Context, []int64, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteEmailActionsFunc) appendCall(r0 CodeMonitorStoreDeleteEmailActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteEmailActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) History() []CodeMonitorStoreDeleteEmailActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteEmailActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteEmailActionsFuncCall is an object that describes an
// invocation of method DeleteEmailActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteEmailActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteEmailActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteEmailActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteMonitorFunc describes the behavior when the
// DeleteMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteMonitorFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []CodeMonitorStoreDeleteMonitorFuncCall
	mutex       sync.Mutex
}

// DeleteMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteMonitor(v0 context.Context, v1 int64) error {
	r0 := m.DeleteMonitorFunc.nextHook()(v0, v1)
	m.DeleteMonitorFunc.appendCall(CodeMonitorStoreDeleteMonitorFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreDeleteMonitorFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreDeleteMonitorFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreDeleteMonitorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreDeleteMonitorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteMonitorFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteMonitorFunc) appendCall(r0 CodeMonitorStoreDeleteMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteMonitorFunc) History() []CodeMonitorStoreDeleteMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteMonitorFuncCall is an object that describes an
// invocation of method DeleteMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteObsoleteTriggerJobsFunc describes the behavior when
// the DeleteObsoleteTriggerJobs method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreDeleteObsoleteTriggerJobsFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall
	mutex       sync.Mutex
}

// DeleteObsoleteTriggerJobs delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteObsoleteTriggerJobs(v0 context.Context) error {
	r0 := m.DeleteObsoleteTriggerJobsFunc.nextHook()(v0)
	m.DeleteObsoleteTriggerJobsFunc.appendCall(CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteObsoleteTriggerJobs method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteObsoleteTriggerJobs method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) appendCall(r0 CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) History() []CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall is an object that
// describes an invocation of method DeleteObsoleteTriggerJobs on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteOldTriggerJobsFunc describes the behavior when the
// DeleteOldTriggerJobs method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreDeleteOldTriggerJobsFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []CodeMonitorStoreDeleteOldTriggerJobsFuncCall
	mutex       sync.Mutex
}

// DeleteOldTriggerJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteOldTriggerJobs(v0 context.Context, v1 int) error {
	r0 := m.DeleteOldTriggerJobsFunc.nextHook()(v0, v1)
	m.DeleteOldTriggerJobsFunc.appendCall(CodeMonitorStoreDeleteOldTriggerJobsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteOldTriggerJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOldTriggerJobs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) appendCall(r0 CodeMonitorStoreDeleteOldTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreDeleteOldTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) History() []CodeMonitorStoreDeleteOldTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteOldTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteOldTriggerJobsFuncCall is an object that describes
// an invocation of method DeleteOldTriggerJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteOldTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteOldTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteOldTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteRecipientsFunc describes the behavior when the
// DeleteRecipients method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteRecipientsFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []CodeMonitorStoreDeleteRecipientsFuncCall
	mutex       sync.Mutex
}

// DeleteRecipients delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteRecipients(v0 context.Context, v1 int64) error {
	r0 := m.DeleteRecipientsFunc.nextHook()(v0, v1)
	m.DeleteRecipientsFunc.appendCall(CodeMonitorStoreDeleteRecipientsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteRecipients
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteRecipientsFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteRecipients method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteRecipientsFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreDeleteRecipientsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreDeleteRecipientsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteRecipientsFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteRecipientsFunc) appendCall(r0 CodeMonitorStoreDeleteRecipientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteRecipientsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteRecipientsFunc) History() []CodeMonitorStoreDeleteRecipientsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteRecipientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteRecipientsFuncCall is an object that describes an
// invocation of method DeleteRecipients on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteRecipientsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteRecipientsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteRecipientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteSlackWebhookActionsFunc describes the behavior when
// the DeleteSlackWebhookActions method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreDeleteSlackWebhookActionsFunc struct {
	defaultHook func(context.Context, int64, ...int64) error
	hooks       []func(context.Context, int64, ...int64) error
	history     []CodeMonitorStoreDeleteSlackWebhookActionsFuncCall
	mutex       sync.Mutex
}

// DeleteSlackWebhookActions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteSlackWebhookActions(v0 context.Context, v1 int64, v2 ...int64) error {
	r0 := m.DeleteSlackWebhookActionsFunc.nextHook()(v0, v1, v2...)
	m.DeleteSlackWebhookActionsFunc.appendCall(CodeMonitorStoreDeleteSlackWebhookActionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteSlackWebhookActions method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreDeleteSlackWebhookActionsFunc) SetDefaultHook(hook func(context.Context, int64, ...int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteSlackWebhookActions method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreDeleteSlackWebhookActionsFunc) PushHook(hook func(context.Context, int64, ...int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreDeleteSlackWebhookActionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, ...int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreDeleteSlackWebhookActionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, ...int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteSlackWebhookActionsFunc) nextHook() func(context.Context, int64, ...int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteSlackWebhookActionsFunc) appendCall(r0 CodeMonitorStoreDeleteSlackWebhookActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreDeleteSlackWebhookActionsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreDeleteSlackWebhookActionsFunc) History() []CodeMonitorStoreDeleteSlackWebhookActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteSlackWebhookActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteSlackWebhookActionsFuncCall is an object that
// describes an invocation of method DeleteSlackWebhookActions on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreDeleteSlackWebhookActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c CodeMonitorStoreDeleteSlackWebhookActionsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteSlackWebhookActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteWebhookActionsFunc describes the behavior when the
// DeleteWebhookActions method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreDeleteWebhookActionsFunc struct {
	defaultHook func(context.Context, int64, ...int64) error
	hooks       []func(context.Context, int64, ...int64) error
	history     []CodeMonitorStoreDeleteWebhookActionsFuncCall
	mutex       sync.Mutex
}

// DeleteWebhookActions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteWebhookActions(v0 context.Context, v1 int64, v2 ...int64) error {
	r0 := m.DeleteWebhookActionsFunc.nextHook()(v0, v1, v2...)
	m.DeleteWebhookActionsFunc.appendCall(CodeMonitorStoreDeleteWebhookActionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteWebhookActions
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteWebhookActionsFunc) SetDefaultHook(hook func(context.Context, int64, ...int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteWebhookActions method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteWebhookActionsFunc) PushHook(hook func(context.Context, int64, ...int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreDeleteWebhookActionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, ...int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreDeleteWebhookActionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, ...int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteWebhookActionsFunc) nextHook() func(context.Context, int64, ...int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteWebhookActionsFunc) appendCall(r0 CodeMonitorStoreDeleteWebhookActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreDeleteWebhookActionsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreDeleteWebhookActionsFunc) History() []CodeMonitorStoreDeleteWebhookActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteWebhookActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteWebhookActionsFuncCall is an object that describes
// an invocation of method DeleteWebhookActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteWebhookActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c CodeMonitorStoreDeleteWebhookActionsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteWebhookActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDoneFunc describes the behavior when the Done method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []CodeMonitorStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(CodeMonitorStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *CodeMonitorStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDoneFunc) appendCall(r0 CodeMonitorStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreDoneFunc) History() []CodeMonitorStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockCodeMonitorStore.
type CodeMonitorStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreEnqueueActionJobsForMonitorFunc describes the behavior
// when the EnqueueActionJobsForMonitor method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreEnqueueActionJobsForMonitorFunc struct {
	defaultHook func(context.Context, int64, int32) ([]*ActionJob, error)
	hooks       []func(context.Context, int64, int32) ([]*ActionJob, error)
	history     []CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall
	mutex       sync.Mutex
}

// EnqueueActionJobsForMonitor delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) EnqueueActionJobsForMonitor(v0 context.Context, v1 int64, v2 int32) ([]*ActionJob, error) {
	r0, r1 := m.EnqueueActionJobsForMonitorFunc.nextHook()(v0, v1, v2)
	m.EnqueueActionJobsForMonitorFunc.appendCall(CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// EnqueueActionJobsForMonitor method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreEnqueueActionJobsForMonitorFunc) SetDefaultHook(hook func(context.Context, int64, int32) ([]*ActionJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueActionJobsForMonitor method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreEnqueueActionJobsForMonitorFunc) PushHook(hook func(context.Context, int64, int32) ([]*ActionJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreEnqueueActionJobsForMonitorFunc) SetDefaultReturn(r0 []*ActionJob, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, int32) ([]*ActionJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreEnqueueActionJobsForMonitorFunc) PushReturn(r0 []*ActionJob, r1 error) {
	f.PushHook(func(context.Context, int64, int32) ([]*ActionJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreEnqueueActionJobsForMonitorFunc) nextHook() func(context.Context, int64, int32) ([]*ActionJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreEnqueueActionJobsForMonitorFunc) appendCall(r0 CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall objects describing
// the invocations of this function.
func (f *CodeMonitorStoreEnqueueActionJobsForMonitorFunc) History() []CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall is an object that
// describes an invocation of method EnqueueActionJobsForMonitor on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*ActionJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreEnqueueActionJobsForMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreEnqueueQueryTriggerJobsFunc describes the behavior when
// the EnqueueQueryTriggerJobs method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreEnqueueQueryTriggerJobsFunc struct {
	defaultHook func(context.Context) ([]*TriggerJob, error)
	hooks       []func(context.Context) ([]*TriggerJob, error)
	history     []CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall
	mutex       sync.Mutex
}

// EnqueueQueryTriggerJobs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) EnqueueQueryTriggerJobs(v0 context.Context) ([]*TriggerJob, error) {
	r0, r1 := m.EnqueueQueryTriggerJobsFunc.nextHook()(v0)
	m.EnqueueQueryTriggerJobsFunc.appendCall(CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// EnqueueQueryTriggerJobs method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) SetDefaultHook(hook func(context.Context) ([]*TriggerJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueQueryTriggerJobs method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) PushHook(hook func(context.Context) ([]*TriggerJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) SetDefaultReturn(r0 []*TriggerJob, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*TriggerJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) PushReturn(r0 []*TriggerJob, r1 error) {
	f.PushHook(func(context.Context) ([]*TriggerJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) nextHook() func(context.Context) ([]*TriggerJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) appendCall(r0 CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) History() []CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall is an object that
// describes an invocation of method EnqueueQueryTriggerJobs on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*TriggerJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreExecFunc describes the behavior when the Exec method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreExecFunc struct {
	defaultHook func(context.Context, *sqlf.Query) error
	hooks       []func(context.Context, *sqlf.Query) error
	history     []CodeMonitorStoreExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Exec(v0 context.Context, v1 *sqlf.Query) error {
	r0 := m.ExecFunc.nextHook()(v0, v1)
	m.ExecFunc.appendCall(CodeMonitorStoreExecFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreExecFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreExecFunc) PushHook(hook func(context.Context, *sqlf.Query) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreExecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreExecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

func (f *CodeMonitorStoreExecFunc) nextHook() func(context.Context, *sqlf.Query) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreExecFunc) appendCall(r0 CodeMonitorStoreExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreExecFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreExecFunc) History() []CodeMonitorStoreExecFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreExecFuncCall is an object that describes an invocation of
// method Exec on an instance of MockCodeMonitorStore.
type CodeMonitorStoreExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreExecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreGetActionJobFunc describes the behavior when the
// GetActionJob method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreGetActionJobFunc struct {
	defaultHook func(context.Context, int32) (*ActionJob, error)
	hooks       []func(context.Context, int32) (*ActionJob, error)
	history     []CodeMonitorStoreGetActionJobFuncCall
	mutex       sync.Mutex
}

// GetActionJob delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetActionJob(v0 context.Context, v1 int32) (*ActionJob, error) {
	r0, r1 := m.GetActionJobFunc.nextHook()(v0, v1)
	m.GetActionJobFunc.appendCall(CodeMonitorStoreGetActionJobFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetActionJob method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreGetActionJobFunc) SetDefaultHook(hook func(context.Context, int32) (*ActionJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetActionJob method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreGetActionJobFunc) PushHook(hook func(context.Context, int32) (*ActionJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreGetActionJobFunc) SetDefaultReturn(r0 *ActionJob, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*ActionJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreGetActionJobFunc) PushReturn(r0 *ActionJob, r1 error) {
	f.PushHook(func(context.Context, int32) (*ActionJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetActionJobFunc) nextHook() func(context.Context, int32) (*ActionJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetActionJobFunc) appendCall(r0 CodeMonitorStoreGetActionJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreGetActionJobFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreGetActionJobFunc) History() []CodeMonitorStoreGetActionJobFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetActionJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetActionJobFuncCall is an object that describes an
// invocation of method GetActionJob on an instance of MockCodeMonitorStore.
type CodeMonitorStoreGetActionJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *ActionJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetActionJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetActionJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetActionJobMetadataFunc describes the behavior when the
// GetActionJobMetadata method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreGetActionJobMetadataFunc struct {
	defaultHook func(context.Context, int32) (*ActionJobMetadata, error)
	hooks       []func(context.Context, int32) (*ActionJobMetadata, error)
	history     []CodeMonitorStoreGetActionJobMetadataFuncCall
	mutex       sync.Mutex
}

// GetActionJobMetadata delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetActionJobMetadata(v0 context.Context, v1 int32) (*ActionJobMetadata, error) {
	r0, r1 := m.GetActionJobMetadataFunc.nextHook()(v0, v1)
	m.GetActionJobMetadataFunc.appendCall(CodeMonitorStoreGetActionJobMetadataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetActionJobMetadata
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) SetDefaultHook(hook func(context.Context, int32) (*ActionJobMetadata, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetActionJobMetadata method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) PushHook(hook func(context.Context, int32) (*ActionJobMetadata, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) SetDefaultReturn(r0 *ActionJobMetadata, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*ActionJobMetadata, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) PushReturn(r0 *ActionJobMetadata, r1 error) {
	f.PushHook(func(context.Context, int32) (*ActionJobMetadata, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetActionJobMetadataFunc) nextHook() func(context.Context, int32) (*ActionJobMetadata, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetActionJobMetadataFunc) appendCall(r0 CodeMonitorStoreGetActionJobMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreGetActionJobMetadataFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) History() []CodeMonitorStoreGetActionJobMetadataFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetActionJobMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetActionJobMetadataFuncCall is an object that describes
// an invocation of method GetActionJobMetadata on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetActionJobMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *ActionJobMetadata
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetActionJobMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetActionJobMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetEmailActionFunc describes the behavior when the
// GetEmailAction method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreGetEmailActionFunc struct {
	defaultHook func(context.Context, int64) (*EmailAction, error)
	hooks       []func(context.Context, int64) (*EmailAction, error)
	history     []CodeMonitorStoreGetEmailActionFuncCall
	mutex       sync.Mutex
}

// GetEmailAction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetEmailAction(v0 context.Context, v1 int64) (*EmailAction, error) {
	r0, r1 := m.GetEmailActionFunc.nextHook()(v0, v1)
	m.GetEmailActionFunc.appendCall(CodeMonitorStoreGetEmailActionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEmailAction
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreGetEmailActionFunc) SetDefaultHook(hook func(context.Context, int64) (*EmailAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEmailAction method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreGetEmailActionFunc) PushHook(hook func(context.Context, int64) (*EmailAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreGetEmailActionFunc) SetDefaultReturn(r0 *EmailAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*EmailAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreGetEmailActionFunc) PushReturn(r0 *EmailAction, r1 error) {
	f.PushHook(func(context.Context, int64) (*EmailAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetEmailActionFunc) nextHook() func(context.Context, int64) (*EmailAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetEmailActionFunc) appendCall(r0 CodeMonitorStoreGetEmailActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreGetEmailActionFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreGetEmailActionFunc) History() []CodeMonitorStoreGetEmailActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetEmailActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetEmailActionFuncCall is an object that describes an
// invocation of method GetEmailAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetEmailActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *EmailAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetEmailActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetEmailActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetLastSearchedFunc describes the behavior when the
// GetLastSearched method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreGetLastSearchedFunc struct {
	defaultHook func(context.Context, int64, api.RepoID) ([]string, error)
	hooks       []func(context.Context, int64, api.RepoID) ([]string, error)
	history     []CodeMonitorStoreGetLastSearchedFuncCall
	mutex       sync.Mutex
}

// GetLastSearched delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetLastSearched(v0 context.Context, v1 int64, v2 api.RepoID) ([]string, error) {
	r0, r1 := m.GetLastSearchedFunc.nextHook()(v0, v1, v2)
	m.GetLastSearchedFunc.appendCall(CodeMonitorStoreGetLastSearchedFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLastSearched
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreGetLastSearchedFunc) SetDefaultHook(hook func(context.Context, int64, api.RepoID) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastSearched method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreGetLastSearchedFunc) PushHook(hook func(context.Context, int64, api.RepoID) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreGetLastSearchedFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, api.RepoID) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreGetLastSearchedFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, int64, api.RepoID) ([]string, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetLastSearchedFunc) nextHook() func(context.Context, int64, api.RepoID) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetLastSearchedFunc) appendCall(r0 CodeMonitorStoreGetLastSearchedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreGetLastSearchedFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreGetLastSearchedFunc) History() []CodeMonitorStoreGetLastSearchedFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetLastSearchedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetLastSearchedFuncCall is an object that describes an
// invocation of method GetLastSearched on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetLastSearchedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetLastSearchedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetLastSearchedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetMonitorFunc describes the behavior when the GetMonitor
// method of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreGetMonitorFunc struct {
	defaultHook func(context.Context, int64) (*Monitor, error)
	hooks       []func(context.Context, int64) (*Monitor, error)
	history     []CodeMonitorStoreGetMonitorFuncCall
	mutex       sync.Mutex
}

// GetMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetMonitor(v0 context.Context, v1 int64) (*Monitor, error) {
	r0, r1 := m.GetMonitorFunc.nextHook()(v0, v1)
	m.GetMonitorFunc.appendCall(CodeMonitorStoreGetMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMonitor method of
// the parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreGetMonitorFunc) SetDefaultHook(hook func(context.Context, int64) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMonitor method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreGetMonitorFunc) PushHook(hook func(context.Context, int64) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreGetMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreGetMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, int64) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetMonitorFunc) nextHook() func(context.Context, int64) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetMonitorFunc) appendCall(r0 CodeMonitorStoreGetMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreGetMonitorFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreGetMonitorFunc) History() []CodeMonitorStoreGetMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetMonitorFuncCall is an object that describes an
// invocation of method GetMonitor on an instance of MockCodeMonitorStore.
type CodeMonitorStoreGetMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetQueryTriggerForJobFunc describes the behavior when the
// GetQueryTriggerForJob method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreGetQueryTriggerForJobFunc struct {
	defaultHook func(context.Context, int32) (*QueryTrigger, error)
	hooks       []func(context.Context, int32) (*QueryTrigger, error)
	history     []CodeMonitorStoreGetQueryTriggerForJobFuncCall
	mutex       sync.Mutex
}

// GetQueryTriggerForJob delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetQueryTriggerForJob(v0 context.Context, v1 int32) (*QueryTrigger, error) {
	r0, r1 := m.GetQueryTriggerForJobFunc.nextHook()(v0, v1)
	m.GetQueryTriggerForJobFunc.appendCall(CodeMonitorStoreGetQueryTriggerForJobFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetQueryTriggerForJob method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) SetDefaultHook(hook func(context.Context, int32) (*QueryTrigger, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetQueryTriggerForJob method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) PushHook(hook func(context.Context, int32) (*QueryTrigger, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) SetDefaultReturn(r0 *QueryTrigger, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*QueryTrigger, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) PushReturn(r0 *QueryTrigger, r1 error) {
	f.PushHook(func(context.Context, int32) (*QueryTrigger, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) nextHook() func(context.Context, int32) (*QueryTrigger, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) appendCall(r0 CodeMonitorStoreGetQueryTriggerForJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreGetQueryTriggerForJobFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) History() []CodeMonitorStoreGetQueryTriggerForJobFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetQueryTriggerForJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetQueryTriggerForJobFuncCall is an object that describes
// an invocation of method GetQueryTriggerForJob on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetQueryTriggerForJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *QueryTrigger
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetQueryTriggerForJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetQueryTriggerForJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetQueryTriggerForMonitorFunc describes the behavior when
// the GetQueryTriggerForMonitor method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreGetQueryTriggerForMonitorFunc struct {
	defaultHook func(context.Context, int64) (*QueryTrigger, error)
	hooks       []func(context.Context, int64) (*QueryTrigger, error)
	history     []CodeMonitorStoreGetQueryTriggerForMonitorFuncCall
	mutex       sync.Mutex
}

// GetQueryTriggerForMonitor delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetQueryTriggerForMonitor(v0 context.Context, v1 int64) (*QueryTrigger, error) {
	r0, r1 := m.GetQueryTriggerForMonitorFunc.nextHook()(v0, v1)
	m.GetQueryTriggerForMonitorFunc.appendCall(CodeMonitorStoreGetQueryTriggerForMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetQueryTriggerForMonitor method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) SetDefaultHook(hook func(context.Context, int64) (*QueryTrigger, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetQueryTriggerForMonitor method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) PushHook(hook func(context.Context, int64) (*QueryTrigger, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) SetDefaultReturn(r0 *QueryTrigger, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*QueryTrigger, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) PushReturn(r0 *QueryTrigger, r1 error) {
	f.PushHook(func(context.Context, int64) (*QueryTrigger, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) nextHook() func(context.Context, int64) (*QueryTrigger, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) appendCall(r0 CodeMonitorStoreGetQueryTriggerForMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreGetQueryTriggerForMonitorFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) History() []CodeMonitorStoreGetQueryTriggerForMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetQueryTriggerForMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetQueryTriggerForMonitorFuncCall is an object that
// describes an invocation of method GetQueryTriggerForMonitor on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreGetQueryTriggerForMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *QueryTrigger
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetQueryTriggerForMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetQueryTriggerForMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetSlackWebhookActionFunc describes the behavior when the
// GetSlackWebhookAction method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreGetSlackWebhookActionFunc struct {
	defaultHook func(context.Context, int64) (*SlackWebhookAction, error)
	hooks       []func(context.Context, int64) (*SlackWebhookAction, error)
	history     []CodeMonitorStoreGetSlackWebhookActionFuncCall
	mutex       sync.Mutex
}

// GetSlackWebhookAction delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetSlackWebhookAction(v0 context.Context, v1 int64) (*SlackWebhookAction, error) {
	r0, r1 := m.GetSlackWebhookActionFunc.nextHook()(v0, v1)
	m.GetSlackWebhookActionFunc.appendCall(CodeMonitorStoreGetSlackWebhookActionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetSlackWebhookAction method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreGetSlackWebhookActionFunc) SetDefaultHook(hook func(context.Context, int64) (*SlackWebhookAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSlackWebhookAction method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreGetSlackWebhookActionFunc) PushHook(hook func(context.Context, int64) (*SlackWebhookAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreGetSlackWebhookActionFunc) SetDefaultReturn(r0 *SlackWebhookAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*SlackWebhookAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreGetSlackWebhookActionFunc) PushReturn(r0 *SlackWebhookAction, r1 error) {
	f.PushHook(func(context.Context, int64) (*SlackWebhookAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetSlackWebhookActionFunc) nextHook() func(context.Context, int64) (*SlackWebhookAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetSlackWebhookActionFunc) appendCall(r0 CodeMonitorStoreGetSlackWebhookActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreGetSlackWebhookActionFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreGetSlackWebhookActionFunc) History() []CodeMonitorStoreGetSlackWebhookActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetSlackWebhookActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetSlackWebhookActionFuncCall is an object that describes
// an invocation of method GetSlackWebhookAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetSlackWebhookActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *SlackWebhookAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetSlackWebhookActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetSlackWebhookActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetWebhookActionFunc describes the behavior when the
// GetWebhookAction method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreGetWebhookActionFunc struct {
	defaultHook func(context.Context, int64) (*WebhookAction, error)
	hooks       []func(context.Context, int64) (*WebhookAction, error)
	history     []CodeMonitorStoreGetWebhookActionFuncCall
	mutex       sync.Mutex
}

// GetWebhookAction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetWebhookAction(v0 context.Context, v1 int64) (*WebhookAction, error) {
	r0, r1 := m.GetWebhookActionFunc.nextHook()(v0, v1)
	m.GetWebhookActionFunc.appendCall(CodeMonitorStoreGetWebhookActionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetWebhookAction
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreGetWebhookActionFunc) SetDefaultHook(hook func(context.Context, int64) (*WebhookAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetWebhookAction method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreGetWebhookActionFunc) PushHook(hook func(context.Context, int64) (*WebhookAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreGetWebhookActionFunc) SetDefaultReturn(r0 *WebhookAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*WebhookAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreGetWebhookActionFunc) PushReturn(r0 *WebhookAction, r1 error) {
	f.PushHook(func(context.Context, int64) (*WebhookAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetWebhookActionFunc) nextHook() func(context.Context, int64) (*WebhookAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetWebhookActionFunc) appendCall(r0 CodeMonitorStoreGetWebhookActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreGetWebhookActionFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreGetWebhookActionFunc) History() []CodeMonitorStoreGetWebhookActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetWebhookActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetWebhookActionFuncCall is an object that describes an
// invocation of method GetWebhookAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetWebhookActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *WebhookAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetWebhookActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetWebhookActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreHandleFunc describes the behavior when the Handle method
// of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []CodeMonitorStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(CodeMonitorStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *CodeMonitorStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreHandleFunc) appendCall(r0 CodeMonitorStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreHandleFunc) History() []CodeMonitorStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockCodeMonitorStore.
type CodeMonitorStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreHasAnyLastSearchedFunc describes the behavior when the
// HasAnyLastSearched method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreHasAnyLastSearchedFunc struct {
	defaultHook func(context.Context, int64) (bool, error)
	hooks       []func(context.Context, int64) (bool, error)
	history     []CodeMonitorStoreHasAnyLastSearchedFuncCall
	mutex       sync.Mutex
}

// HasAnyLastSearched delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) HasAnyLastSearched(v0 context.Context, v1 int64) (bool, error) {
	r0, r1 := m.HasAnyLastSearchedFunc.nextHook()(v0, v1)
	m.HasAnyLastSearchedFunc.appendCall(CodeMonitorStoreHasAnyLastSearchedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasAnyLastSearched
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreHasAnyLastSearchedFunc) SetDefaultHook(hook func(context.Context, int64) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasAnyLastSearched method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreHasAnyLastSearchedFunc) PushHook(hook func(context.Context, int64) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreHasAnyLastSearchedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreHasAnyLastSearchedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int64) (bool, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreHasAnyLastSearchedFunc) nextHook() func(context.Context, int64) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreHasAnyLastSearchedFunc) appendCall(r0 CodeMonitorStoreHasAnyLastSearchedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreHasAnyLastSearchedFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreHasAnyLastSearchedFunc) History() []CodeMonitorStoreHasAnyLastSearchedFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreHasAnyLastSearchedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreHasAnyLastSearchedFuncCall is an object that describes an
// invocation of method HasAnyLastSearched on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreHasAnyLastSearchedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreHasAnyLastSearchedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreHasAnyLastSearchedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListActionJobsFunc describes the behavior when the
// ListActionJobs method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListActionJobsFunc struct {
	defaultHook func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)
	hooks       []func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)
	history     []CodeMonitorStoreListActionJobsFuncCall
	mutex       sync.Mutex
}

// ListActionJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListActionJobs(v0 context.Context, v1 ListActionJobsOpts) ([]*ActionJob, error) {
	r0, r1 := m.ListActionJobsFunc.nextHook()(v0, v1)
	m.ListActionJobsFunc.appendCall(CodeMonitorStoreListActionJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListActionJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListActionJobsFunc) SetDefaultHook(hook func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListActionJobs method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreListActionJobsFunc) PushHook(hook func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreListActionJobsFunc) SetDefaultReturn(r0 []*ActionJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreListActionJobsFunc) PushReturn(r0 []*ActionJob, r1 error) {
	f.PushHook(func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListActionJobsFunc) nextHook() func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListActionJobsFunc) appendCall(r0 CodeMonitorStoreListActionJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListActionJobsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListActionJobsFunc) History() []CodeMonitorStoreListActionJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListActionJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListActionJobsFuncCall is an object that describes an
// invocation of method ListActionJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListActionJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionJobsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*ActionJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListActionJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListActionJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListEmailActionsFunc describes the behavior when the
// ListEmailActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListEmailActionsFunc struct {
	defaultHook func(context.Context, ListActionsOpts) ([]*EmailAction, error)
	hooks       []func(context.Context, ListActionsOpts) ([]*EmailAction, error)
	history     []CodeMonitorStoreListEmailActionsFuncCall
	mutex       sync.Mutex
}

// ListEmailActions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListEmailActions(v0 context.Context, v1 ListActionsOpts) ([]*EmailAction, error) {
	r0, r1 := m.ListEmailActionsFunc.nextHook()(v0, v1)
	m.ListEmailActionsFunc.appendCall(CodeMonitorStoreListEmailActionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListEmailActions
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListEmailActionsFunc) SetDefaultHook(hook func(context.Context, ListActionsOpts) ([]*EmailAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListEmailActions method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreListEmailActionsFunc) PushHook(hook func(context.Context, ListActionsOpts) ([]*EmailAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreListEmailActionsFunc) SetDefaultReturn(r0 []*EmailAction, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionsOpts) ([]*EmailAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreListEmailActionsFunc) PushReturn(r0 []*EmailAction, r1 error) {
	f.PushHook(func(context.Context, ListActionsOpts) ([]*EmailAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListEmailActionsFunc) nextHook() func(context.Context, ListActionsOpts) ([]*EmailAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListEmailActionsFunc) appendCall(r0 CodeMonitorStoreListEmailActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListEmailActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListEmailActionsFunc) History() []CodeMonitorStoreListEmailActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListEmailActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListEmailActionsFuncCall is an object that describes an
// invocation of method ListEmailActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListEmailActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*EmailAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListEmailActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListEmailActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListMonitorsFunc describes the behavior when the
// ListMonitors method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListMonitorsFunc struct {
	defaultHook func(context.Context, ListMonitorsOpts) ([]*Monitor, error)
	hooks       []func(context.Context, ListMonitorsOpts) ([]*Monitor, error)
	history     []CodeMonitorStoreListMonitorsFuncCall
	mutex       sync.Mutex
}

// ListMonitors delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListMonitors(v0 context.Context, v1 ListMonitorsOpts) ([]*Monitor, error) {
	r0, r1 := m.ListMonitorsFunc.nextHook()(v0, v1)
	m.ListMonitorsFunc.appendCall(CodeMonitorStoreListMonitorsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListMonitors method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreListMonitorsFunc) SetDefaultHook(hook func(context.Context, ListMonitorsOpts) ([]*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListMonitors method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreListMonitorsFunc) PushHook(hook func(context.Context, ListMonitorsOpts) ([]*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreListMonitorsFunc) SetDefaultReturn(r0 []*Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, ListMonitorsOpts) ([]*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreListMonitorsFunc) PushReturn(r0 []*Monitor, r1 error) {
	f.PushHook(func(context.Context, ListMonitorsOpts) ([]*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListMonitorsFunc) nextHook() func(context.Context, ListMonitorsOpts) ([]*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListMonitorsFunc) appendCall(r0 CodeMonitorStoreListMonitorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListMonitorsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListMonitorsFunc) History() []CodeMonitorStoreListMonitorsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListMonitorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListMonitorsFuncCall is an object that describes an
// invocation of method ListMonitors on an instance of MockCodeMonitorStore.
type CodeMonitorStoreListMonitorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListMonitorsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListMonitorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListMonitorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListQueryTriggerJobsFunc describes the behavior when the
// ListQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreListQueryTriggerJobsFunc struct {
	defaultHook func(context.Context, ListTriggerJobsOpts) ([]*TriggerJob, error)
	hooks       []func(context.Context, ListTriggerJobsOpts) ([]*TriggerJob, error)
	history     []CodeMonitorStoreListQueryTriggerJobsFuncCall
	mutex       sync.Mutex
}

// ListQueryTriggerJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListQueryTriggerJobs(v0 context.Context, v1 ListTriggerJobsOpts) ([]*TriggerJob, error) {
	r0, r1 := m.ListQueryTriggerJobsFunc.nextHook()(v0, v1)
	m.ListQueryTriggerJobsFunc.appendCall(CodeMonitorStoreListQueryTriggerJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListQueryTriggerJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) SetDefaultHook(hook func(context.Context, ListTriggerJobsOpts) ([]*TriggerJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) PushHook(hook func(context.Context, ListTriggerJobsOpts) ([]*TriggerJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) SetDefaultReturn(r0 []*TriggerJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ListTriggerJobsOpts) ([]*TriggerJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) PushReturn(r0 []*TriggerJob, r1 error) {
	f.PushHook(func(context.Context, ListTriggerJobsOpts) ([]*TriggerJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListQueryTriggerJobsFunc) nextHook() func(context.Context, ListTriggerJobsOpts) ([]*TriggerJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListQueryTriggerJobsFunc) appendCall(r0 CodeMonitorStoreListQueryTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreListQueryTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) History() []CodeMonitorStoreListQueryTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListQueryTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListQueryTriggerJobsFuncCall is an object that describes
// an invocation of method ListQueryTriggerJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListQueryTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListTriggerJobsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*TriggerJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListQueryTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListQueryTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListRecipientsFunc describes the behavior when the
// ListRecipients method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListRecipientsFunc struct {
	defaultHook func(context.Context, ListRecipientsOpts) ([]*Recipient, error)
	hooks       []func(context.Context, ListRecipientsOpts) ([]*Recipient, error)
	history     []CodeMonitorStoreListRecipientsFuncCall
	mutex       sync.Mutex
}

// ListRecipients delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListRecipients(v0 context.Context, v1 ListRecipientsOpts) ([]*Recipient, error) {
	r0, r1 := m.ListRecipientsFunc.nextHook()(v0, v1)
	m.ListRecipientsFunc.appendCall(CodeMonitorStoreListRecipientsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListRecipients
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListRecipientsFunc) SetDefaultHook(hook func(context.Context, ListRecipientsOpts) ([]*Recipient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRecipients method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreListRecipientsFunc) PushHook(hook func(context.Context, ListRecipientsOpts) ([]*Recipient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreListRecipientsFunc) SetDefaultReturn(r0 []*Recipient, r1 error) {
	f.SetDefaultHook(func(context.Context, ListRecipientsOpts) ([]*Recipient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreListRecipientsFunc) PushReturn(r0 []*Recipient, r1 error) {
	f.PushHook(func(context.Context, ListRecipientsOpts) ([]*Recipient, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListRecipientsFunc) nextHook() func(context.Context, ListRecipientsOpts) ([]*Recipient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListRecipientsFunc) appendCall(r0 CodeMonitorStoreListRecipientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListRecipientsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListRecipientsFunc) History() []CodeMonitorStoreListRecipientsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListRecipientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListRecipientsFuncCall is an object that describes an
// invocation of method ListRecipients on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListRecipientsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListRecipientsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Recipient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListRecipientsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListRecipientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListSlackWebhookActionsFunc describes the behavior when
// the ListSlackWebhookActions method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreListSlackWebhookActionsFunc struct {
	defaultHook func(context.Context, ListActionsOpts) ([]*SlackWebhookAction, error)
	hooks       []func(context.Context, ListActionsOpts) ([]*SlackWebhookAction, error)
	history     []CodeMonitorStoreListSlackWebhookActionsFuncCall
	mutex       sync.Mutex
}

// ListSlackWebhookActions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListSlackWebhookActions(v0 context.Context, v1 ListActionsOpts) ([]*SlackWebhookAction, error) {
	r0, r1 := m.ListSlackWebhookActionsFunc.nextHook()(v0, v1)
	m.ListSlackWebhookActionsFunc.appendCall(CodeMonitorStoreListSlackWebhookActionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListSlackWebhookActions method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreListSlackWebhookActionsFunc) SetDefaultHook(hook func(context.Context, ListActionsOpts) ([]*SlackWebhookAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSlackWebhookActions method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreListSlackWebhookActionsFunc) PushHook(hook func(context.Context, ListActionsOpts) ([]*SlackWebhookAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreListSlackWebhookActionsFunc) SetDefaultReturn(r0 []*SlackWebhookAction, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionsOpts) ([]*SlackWebhookAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreListSlackWebhookActionsFunc) PushReturn(r0 []*SlackWebhookAction, r1 error) {
	f.PushHook(func(context.Context, ListActionsOpts) ([]*SlackWebhookAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListSlackWebhookActionsFunc) nextHook() func(context.Context, ListActionsOpts) ([]*SlackWebhookAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListSlackWebhookActionsFunc) appendCall(r0 CodeMonitorStoreListSlackWebhookActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreListSlackWebhookActionsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreListSlackWebhookActionsFunc) History() []CodeMonitorStoreListSlackWebhookActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListSlackWebhookActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListSlackWebhookActionsFuncCall is an object that
// describes an invocation of method ListSlackWebhookActions on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreListSlackWebhookActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*SlackWebhookAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListSlackWebhookActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListSlackWebhookActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListWebhookActionsFunc describes the behavior when the
// ListWebhookActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListWebhookActionsFunc struct {
	defaultHook func(context.Context, ListActionsOpts) ([]*WebhookAction, error)
	hooks       []func(context.Context, ListActionsOpts) ([]*WebhookAction, error)
	history     []CodeMonitorStoreListWebhookActionsFuncCall
	mutex       sync.Mutex
}

// ListWebhookActions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListWebhookActions(v0 context.Context, v1 ListActionsOpts) ([]*WebhookAction, error) {
	r0, r1 := m.ListWebhookActionsFunc.nextHook()(v0, v1)
	m.ListWebhookActionsFunc.appendCall(CodeMonitorStoreListWebhookActionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListWebhookActions
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListWebhookActionsFunc) SetDefaultHook(hook func(context.Context, ListActionsOpts) ([]*WebhookAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListWebhookActions method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreListWebhookActionsFunc) PushHook(hook func(context.Context, ListActionsOpts) ([]*WebhookAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreListWebhookActionsFunc) SetDefaultReturn(r0 []*WebhookAction, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionsOpts) ([]*WebhookAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreListWebhookActionsFunc) PushReturn(r0 []*WebhookAction, r1 error) {
	f.PushHook(func(context.Context, ListActionsOpts) ([]*WebhookAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListWebhookActionsFunc) nextHook() func(context.Context, ListActionsOpts) ([]*WebhookAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListWebhookActionsFunc) appendCall(r0 CodeMonitorStoreListWebhookActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListWebhookActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListWebhookActionsFunc) History() []CodeMonitorStoreListWebhookActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListWebhookActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListWebhookActionsFuncCall is an object that describes an
// invocation of method ListWebhookActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListWebhookActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*WebhookAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListWebhookActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListWebhookActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreNowFunc describes the behavior when the Now method of the
// parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreNowFunc struct {
	defaultHook func() time.Time
	hooks       []func() time.Time
	history     []CodeMonitorStoreNowFuncCall
	mutex       sync.Mutex
}

// Now delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Now() time.Time {
	r0 := m.NowFunc.nextHook()()
	m.NowFunc.appendCall(CodeMonitorStoreNowFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Now method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreNowFunc) SetDefaultHook(hook func() time.Time) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Now method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreNowFunc) PushHook(hook func() time.Time) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreNowFunc) SetDefaultReturn(r0 time.Time) {
	f.SetDefaultHook(func() time.Time {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreNowFunc) PushReturn(r0 time.Time) {
	f.PushHook(func() time.Time {
		return r0
	})
}

func (f *CodeMonitorStoreNowFunc) nextHook() func() time.Time {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreNowFunc) appendCall(r0 CodeMonitorStoreNowFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreNowFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreNowFunc) History() []CodeMonitorStoreNowFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreNowFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreNowFuncCall is an object that describes an invocation of
// method Now on an instance of MockCodeMonitorStore.
type CodeMonitorStoreNowFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Time
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreNowFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreNowFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreResetQueryTriggerTimestampsFunc describes the behavior
// when the ResetQueryTriggerTimestamps method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreResetQueryTriggerTimestampsFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []CodeMonitorStoreResetQueryTriggerTimestampsFuncCall
	mutex       sync.Mutex
}

// ResetQueryTriggerTimestamps delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ResetQueryTriggerTimestamps(v0 context.Context, v1 int64) error {
	r0 := m.ResetQueryTriggerTimestampsFunc.nextHook()(v0, v1)
	m.ResetQueryTriggerTimestampsFunc.appendCall(CodeMonitorStoreResetQueryTriggerTimestampsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ResetQueryTriggerTimestamps method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResetQueryTriggerTimestamps method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) appendCall(r0 CodeMonitorStoreResetQueryTriggerTimestampsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreResetQueryTriggerTimestampsFuncCall objects describing
// the invocations of this function.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) History() []CodeMonitorStoreResetQueryTriggerTimestampsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreResetQueryTriggerTimestampsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreResetQueryTriggerTimestampsFuncCall is an object that
// describes an invocation of method ResetQueryTriggerTimestamps on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreResetQueryTriggerTimestampsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreResetQueryTriggerTimestampsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreResetQueryTriggerTimestampsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreSetQueryTriggerNextRunFunc describes the behavior when
// the SetQueryTriggerNextRun method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreSetQueryTriggerNextRunFunc struct {
	defaultHook func(context.Context, int64, time.Time, time.Time) error
	hooks       []func(context.Context, int64, time.Time, time.Time) error
	history     []CodeMonitorStoreSetQueryTriggerNextRunFuncCall
	mutex       sync.Mutex
}

// SetQueryTriggerNextRun delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) SetQueryTriggerNextRun(v0 context.Context, v1 int64, v2 time.Time, v3 time.Time) error {
	r0 := m.SetQueryTriggerNextRunFunc.nextHook()(v0, v1, v2, v3)
	m.SetQueryTriggerNextRunFunc.appendCall(CodeMonitorStoreSetQueryTriggerNextRunFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetQueryTriggerNextRun method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) SetDefaultHook(hook func(context.Context, int64, time.Time, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetQueryTriggerNextRun method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) PushHook(hook func(context.Context, int64, time.Time, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, time.Time, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, time.Time, time.Time) error {
		return r0
	})
}

func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) nextHook() func(context.Context, int64, time.Time, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) appendCall(r0 CodeMonitorStoreSetQueryTriggerNextRunFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreSetQueryTriggerNextRunFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) History() []CodeMonitorStoreSetQueryTriggerNextRunFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreSetQueryTriggerNextRunFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreSetQueryTriggerNextRunFuncCall is an object that
// describes an invocation of method SetQueryTriggerNextRun on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreSetQueryTriggerNextRunFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreSetQueryTriggerNextRunFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreSetQueryTriggerNextRunFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreTransactFunc describes the behavior when the Transact
// method of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreTransactFunc struct {
	defaultHook func(context.Context) (CodeMonitorStore, error)
	hooks       []func(context.Context) (CodeMonitorStore, error)
	history     []CodeMonitorStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Transact(v0 context.Context) (CodeMonitorStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(CodeMonitorStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreTransactFunc) SetDefaultHook(hook func(context.Context) (CodeMonitorStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreTransactFunc) PushHook(hook func(context.Context) (CodeMonitorStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreTransactFunc) SetDefaultReturn(r0 CodeMonitorStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (CodeMonitorStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreTransactFunc) PushReturn(r0 CodeMonitorStore, r1 error) {
	f.PushHook(func(context.Context) (CodeMonitorStore, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreTransactFunc) nextHook() func(context.Context) (CodeMonitorStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreTransactFunc) appendCall(r0 CodeMonitorStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreTransactFunc) History() []CodeMonitorStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockCodeMonitorStore.
type CodeMonitorStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 CodeMonitorStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateEmailActionFunc describes the behavior when the
// UpdateEmailAction method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateEmailActionFunc struct {
	defaultHook func(context.Context, int64, *EmailActionArgs) (*EmailAction, error)
	hooks       []func(context.Context, int64, *EmailActionArgs) (*EmailAction, error)
	history     []CodeMonitorStoreUpdateEmailActionFuncCall
	mutex       sync.Mutex
}

// UpdateEmailAction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateEmailAction(v0 context.Context, v1 int64, v2 *EmailActionArgs) (*EmailAction, error) {
	r0, r1 := m.UpdateEmailActionFunc.nextHook()(v0, v1, v2)
	m.UpdateEmailActionFunc.appendCall(CodeMonitorStoreUpdateEmailActionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateEmailAction
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreUpdateEmailActionFunc) SetDefaultHook(hook func(context.Context, int64, *EmailActionArgs) (*EmailAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateEmailAction method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreUpdateEmailActionFunc) PushHook(hook func(context.Context, int64, *EmailActionArgs) (*EmailAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreUpdateEmailActionFunc) SetDefaultReturn(r0 *EmailAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *EmailActionArgs) (*EmailAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreUpdateEmailActionFunc) PushReturn(r0 *EmailAction, r1 error) {
	f.PushHook(func(context.Context, int64, *EmailActionArgs) (*EmailAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreUpdateEmailActionFunc) nextHook() func(context.Context, int64, *EmailActionArgs) (*EmailAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateEmailActionFunc) appendCall(r0 CodeMonitorStoreUpdateEmailActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateEmailActionFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateEmailActionFunc) History() []CodeMonitorStoreUpdateEmailActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateEmailActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateEmailActionFuncCall is an object that describes an
// invocation of method UpdateEmailAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateEmailActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *EmailActionArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *EmailAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateEmailActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateEmailActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateMonitorFunc describes the behavior when the
// UpdateMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateMonitorFunc struct {
	defaultHook func(context.Context, int64, MonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, int64, MonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreUpdateMonitorFuncCall
	mutex       sync.Mutex
}

// UpdateMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateMonitor(v0 context.Context, v1 int64, v2 MonitorArgs) (*Monitor, error) {
	r0, r1 := m.UpdateMonitorFunc.nextHook()(v0, v1, v2)
	m.UpdateMonitorFunc.appendCall(CodeMonitorStoreUpdateMonitorFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreUpdateMonitorFunc) SetDefaultHook(hook func(context.Context, int64, MonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreUpdateMonitorFunc) PushHook(hook func(context.Context, int64, MonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreUpdateMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, MonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreUpdateMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, int64, MonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreUpdateMonitorFunc) nextHook() func(context.Context, int64, MonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateMonitorFunc) appendCall(r0 CodeMonitorStoreUpdateMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateMonitorFunc) History() []CodeMonitorStoreUpdateMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateMonitorFuncCall is an object that describes an
// invocation of method UpdateMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 MonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateMonitorEnabledFunc describes the behavior when the
// UpdateMonitorEnabled method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreUpdateMonitorEnabledFunc struct {
	defaultHook func(context.Context, int64, bool) (*Monitor, error)
	hooks       []func(context.Context, int64, bool) (*Monitor, error)
	history     []CodeMonitorStoreUpdateMonitorEnabledFuncCall
	mutex       sync.Mutex
}

// UpdateMonitorEnabled delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateMonitorEnabled(v0 context.Context, v1 int64, v2 bool) (*Monitor, error) {
	r0, r1 := m.UpdateMonitorEnabledFunc.nextHook()(v0, v1, v2)
	m.UpdateMonitorEnabledFunc.appendCall(CodeMonitorStoreUpdateMonitorEnabledFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateMonitorEnabled
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreUpdateMonitorEnabledFunc) SetDefaultHook(hook func(context.Context, int64, bool) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateMonitorEnabled method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreUpdateMonitorEnabledFunc) PushHook(hook func(context.Context, int64, bool) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreUpdateMonitorEnabledFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, bool) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreUpdateMonitorEnabledFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, int64, bool) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreUpdateMonitorEnabledFunc) nextHook() func(context.Context, int64, bool) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateMonitorEnabledFunc) appendCall(r0 CodeMonitorStoreUpdateMonitorEnabledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreUpdateMonitorEnabledFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreUpdateMonitorEnabledFunc) History() []CodeMonitorStoreUpdateMonitorEnabledFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateMonitorEnabledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateMonitorEnabledFuncCall is an object that describes
// an invocation of method UpdateMonitorEnabled on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateMonitorEnabledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateMonitorEnabledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateMonitorEnabledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateQueryTriggerFunc describes the behavior when the
// UpdateQueryTrigger method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateQueryTriggerFunc struct {
	defaultHook func(context.Context, int64, string) error
	hooks       []func(context.Context, int64, string) error
	history     []CodeMonitorStoreUpdateQueryTriggerFuncCall
	mutex       sync.Mutex
}

// UpdateQueryTrigger delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateQueryTrigger(v0 context.Context, v1 int64, v2 string) error {
	r0 := m.UpdateQueryTriggerFunc.nextHook()(v0, v1, v2)
	m.UpdateQueryTriggerFunc.appendCall(CodeMonitorStoreUpdateQueryTriggerFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateQueryTrigger
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) SetDefaultHook(hook func(context.Context, int64, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateQueryTrigger method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) PushHook(hook func(context.Context, int64, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, string) error {
		return r0
	})
}

func (f *CodeMonitorStoreUpdateQueryTriggerFunc) nextHook() func(context.Context, int64, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateQueryTriggerFunc) appendCall(r0 CodeMonitorStoreUpdateQueryTriggerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateQueryTriggerFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) History() []CodeMonitorStoreUpdateQueryTriggerFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateQueryTriggerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateQueryTriggerFuncCall is an object that describes an
// invocation of method UpdateQueryTrigger on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateQueryTriggerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateQueryTriggerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateQueryTriggerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreUpdateSlackWebhookActionFunc describes the behavior when
// the UpdateSlackWebhookAction method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreUpdateSlackWebhookActionFunc struct {
	defaultHook func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error)
	hooks       []func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error)
	history     []CodeMonitorStoreUpdateSlackWebhookActionFuncCall
	mutex       sync.Mutex
}

// UpdateSlackWebhookAction delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateSlackWebhookAction(v0 context.Context, v1 int64, v2 bool, v3 bool, v4 string) (*SlackWebhookAction, error) {
	r0, r1 := m.UpdateSlackWebhookActionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.UpdateSlackWebhookActionFunc.appendCall(CodeMonitorStoreUpdateSlackWebhookActionFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpdateSlackWebhookAction method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreUpdateSlackWebhookActionFunc) SetDefaultHook(hook func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateSlackWebhookAction method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreUpdateSlackWebhookActionFunc) PushHook(hook func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreUpdateSlackWebhookActionFunc) SetDefaultReturn(r0 *SlackWebhookAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreUpdateSlackWebhookActionFunc) PushReturn(r0 *SlackWebhookAction, r1 error) {
	f.PushHook(func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreUpdateSlackWebhookActionFunc) nextHook() func(context.Context, int64, bool, bool, string) (*SlackWebhookAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateSlackWebhookActionFunc) appendCall(r0 CodeMonitorStoreUpdateSlackWebhookActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreUpdateSlackWebhookActionFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreUpdateSlackWebhookActionFunc) History() []CodeMonitorStoreUpdateSlackWebhookActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateSlackWebhookActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateSlackWebhookActionFuncCall is an object that
// describes an invocation of method UpdateSlackWebhookAction on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreUpdateSlackWebhookActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *SlackWebhookAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateSlackWebhookActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateSlackWebhookActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateTriggerJobWithResultsFunc describes the behavior
// when the UpdateTriggerJobWithResults method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreUpdateTriggerJobWithResultsFunc struct {
	defaultHook func(context.Context, int32, string, []*result.CommitMatch) error
	hooks       []func(context.Context, int32, string, []*result.CommitMatch) error
	history     []CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall
	mutex       sync.Mutex
}

// UpdateTriggerJobWithResults delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateTriggerJobWithResults(v0 context.Context, v1 int32, v2 string, v3 []*result.CommitMatch) error {
	r0 := m.UpdateTriggerJobWithResultsFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateTriggerJobWithResultsFunc.appendCall(CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateTriggerJobWithResults method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) SetDefaultHook(hook func(context.Context, int32, string, []*result.CommitMatch) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateTriggerJobWithResults method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) PushHook(hook func(context.Context, int32, string, []*result.CommitMatch) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, []*result.CommitMatch) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, []*result.CommitMatch) error {
		return r0
	})
}

func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) nextHook() func(context.Context, int32, string, []*result.CommitMatch) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) appendCall(r0 CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall objects describing
// the invocations of this function.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) History() []CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall is an object that
// describes an invocation of method UpdateTriggerJobWithResults on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []*result.CommitMatch
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreUpdateWebhookActionFunc describes the behavior when the
// UpdateWebhookAction method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateWebhookActionFunc struct {
	defaultHook func(context.Context, int64, bool, bool, string) (*WebhookAction, error)
	hooks       []func(context.Context, int64, bool, bool, string) (*WebhookAction, error)
	history     []CodeMonitorStoreUpdateWebhookActionFuncCall
	mutex       sync.Mutex
}

// UpdateWebhookAction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateWebhookAction(v0 context.Context, v1 int64, v2 bool, v3 bool, v4 string) (*WebhookAction, error) {
	r0, r1 := m.UpdateWebhookActionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.UpdateWebhookActionFunc.appendCall(CodeMonitorStoreUpdateWebhookActionFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateWebhookAction
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreUpdateWebhookActionFunc) SetDefaultHook(hook func(context.Context, int64, bool, bool, string) (*WebhookAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateWebhookAction method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreUpdateWebhookActionFunc) PushHook(hook func(context.Context, int64, bool, bool, string) (*WebhookAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreUpdateWebhookActionFunc) SetDefaultReturn(r0 *WebhookAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, bool, bool, string) (*WebhookAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreUpdateWebhookActionFunc) PushReturn(r0 *WebhookAction, r1 error) {
	f.PushHook(func(context.Context, int64, bool, bool, string) (*WebhookAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreUpdateWebhookActionFunc) nextHook() func(context.Context, int64, bool, bool, string) (*WebhookAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateWebhookActionFunc) appendCall(r0 CodeMonitorStoreUpdateWebhookActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateWebhookActionFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateWebhookActionFunc) History() []CodeMonitorStoreUpdateWebhookActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateWebhookActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateWebhookActionFuncCall is an object that describes
// an invocation of method UpdateWebhookAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateWebhookActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *WebhookAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateWebhookActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateWebhookActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpsertLastSearchedFunc describes the behavior when the
// UpsertLastSearched method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpsertLastSearchedFunc struct {
	defaultHook func(context.Context, int64, api.RepoID, []string) error
	hooks       []func(context.Context, int64, api.RepoID, []string) error
	history     []CodeMonitorStoreUpsertLastSearchedFuncCall
	mutex       sync.Mutex
}

// UpsertLastSearched delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpsertLastSearched(v0 context.Context, v1 int64, v2 api.RepoID, v3 []string) error {
	r0 := m.UpsertLastSearchedFunc.nextHook()(v0, v1, v2, v3)
	m.UpsertLastSearchedFunc.appendCall(CodeMonitorStoreUpsertLastSearchedFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpsertLastSearched
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreUpsertLastSearchedFunc) SetDefaultHook(hook func(context.Context, int64, api.RepoID, []string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertLastSearched method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreUpsertLastSearchedFunc) PushHook(hook func(context.Context, int64, api.RepoID, []string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeMonitorStoreUpsertLastSearchedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, api.RepoID, []string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeMonitorStoreUpsertLastSearchedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, api.RepoID, []string) error {
		return r0
	})
}

func (f *CodeMonitorStoreUpsertLastSearchedFunc) nextHook() func(context.Context, int64, api.RepoID, []string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpsertLastSearchedFunc) appendCall(r0 CodeMonitorStoreUpsertLastSearchedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpsertLastSearchedFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpsertLastSearchedFunc) History() []CodeMonitorStoreUpsertLastSearchedFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpsertLastSearchedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpsertLastSearchedFuncCall is an object that describes an
// invocation of method UpsertLastSearched on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpsertLastSearchedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpsertLastSearchedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpsertLastSearchedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockEnterpriseDB is a mock implementation of the EnterpriseDB interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/database) used for
// unit testing.
type MockEnterpriseDB struct {
	// AccessTokensFunc is an instance of a mock function object controlling
	// the behavior of the method AccessTokens.
	AccessTokensFunc *EnterpriseDBAccessTokensFunc
	// AuthzFunc is an instance of a mock function object controlling the
	// behavior of the method Authz.
	AuthzFunc *EnterpriseDBAuthzFunc
	// CodeMonitorsFunc is an instance of a mock function object controlling
	// the behavior of the method CodeMonitors.
	CodeMonitorsFunc *EnterpriseDBCodeMonitorsFunc
	// ConfFunc is an instance of a mock function object controlling the
	// behavior of the method Conf.
	ConfFunc *EnterpriseDBConfFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *EnterpriseDBDoneFunc
	// EventLogsFunc is an instance of a mock function object controlling
	// the behavior of the method EventLogs.
	EventLogsFunc *EnterpriseDBEventLogsFunc
	// ExecContextFunc is an instance of a mock function object controlling
	// the behavior of the method ExecContext.
	ExecContextFunc *EnterpriseDBExecContextFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *EnterpriseDBExternalServicesFunc
	// FeatureFlagsFunc is an instance of a mock function object controlling
	// the behavior of the method FeatureFlags.
	FeatureFlagsFunc *EnterpriseDBFeatureFlagsFunc
	// GitserverLocalCloneFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverLocalClone.
	GitserverLocalCloneFunc *EnterpriseDBGitserverLocalCloneFunc
	// GitserverReposFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverRepos.
	GitserverReposFunc *EnterpriseDBGitserverReposFunc
	// GlobalStateFunc is an instance of a mock function object controlling
	// the behavior of the method GlobalState.
	GlobalStateFunc *EnterpriseDBGlobalStateFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *EnterpriseDBHandleFunc
	// NamespacesFunc is an instance of a mock function object controlling
	// the behavior of the method Namespaces.
	NamespacesFunc *EnterpriseDBNamespacesFunc
	// OrgInvitationsFunc is an instance of a mock function object
	// controlling the behavior of the method OrgInvitations.
	OrgInvitationsFunc *EnterpriseDBOrgInvitationsFunc
	// OrgMembersFunc is an instance of a mock function object controlling
	// the behavior of the method OrgMembers.
	OrgMembersFunc *EnterpriseDBOrgMembersFunc
	// OrgStatsFunc is an instance of a mock function object controlling the
	// behavior of the method OrgStats.
	OrgStatsFunc *EnterpriseDBOrgStatsFunc
	// OrgsFunc is an instance of a mock function object controlling the
	// behavior of the method Orgs.
	OrgsFunc *EnterpriseDBOrgsFunc
	// PermsFunc is an instance of a mock function object controlling the
	// behavior of the method Perms.
	PermsFunc *EnterpriseDBPermsFunc
	// PhabricatorFunc is an instance of a mock function object controlling
	// the behavior of the method Phabricator.
	PhabricatorFunc *EnterpriseDBPhabricatorFunc
	// QueryContextFunc is an instance of a mock function object controlling
	// the behavior of the method QueryContext.
	QueryContextFunc *EnterpriseDBQueryContextFunc
	// QueryRowContextFunc is an instance of a mock function object
	// controlling the behavior of the method QueryRowContext.
	QueryRowContextFunc *EnterpriseDBQueryRowContextFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *EnterpriseDBReposFunc
	// SavedSearchesFunc is an instance of a mock function object
	// controlling the behavior of the method SavedSearches.
	SavedSearchesFunc *EnterpriseDBSavedSearchesFunc
	// SearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method SearchContexts.
	SearchContextsFunc *EnterpriseDBSearchContextsFunc
	// SecurityEventLogsFunc is an instance of a mock function object
	// controlling the behavior of the method SecurityEventLogs.
	SecurityEventLogsFunc *EnterpriseDBSecurityEventLogsFunc
	// SettingsFunc is an instance of a mock function object controlling the
	// behavior of the method Settings.
	SettingsFunc *EnterpriseDBSettingsFunc
	// SubRepoPermsFunc is an instance of a mock function object controlling
	// the behavior of the method SubRepoPerms.
	SubRepoPermsFunc *EnterpriseDBSubRepoPermsFunc
	// TemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method TemporarySettings.
	TemporarySettingsFunc *EnterpriseDBTemporarySettingsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *EnterpriseDBTransactFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *EnterpriseDBUserCredentialsFunc
	// UserEmailsFunc is an instance of a mock function object controlling
	// the behavior of the method UserEmails.
	UserEmailsFunc *EnterpriseDBUserEmailsFunc
	// UserExternalAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method UserExternalAccounts.
	UserExternalAccountsFunc *EnterpriseDBUserExternalAccountsFunc
	// UserPublicReposFunc is an instance of a mock function object
	// controlling the behavior of the method UserPublicRepos.
	UserPublicReposFunc *EnterpriseDBUserPublicReposFunc
	// UsersFunc is an instance of a mock function object controlling the
	// behavior of the method Users.
	UsersFunc *EnterpriseDBUsersFunc
	// WebhookLogsFunc is an instance of a mock function object controlling
	// the behavior of the method WebhookLogs.
	WebhookLogsFunc *EnterpriseDBWebhookLogsFunc
}

// NewMockEnterpriseDB creates a new mock of the EnterpriseDB interface. All
// methods return zero values for all results, unless overwritten.
func NewMockEnterpriseDB() *MockEnterpriseDB {
	return &MockEnterpriseDB{
		AccessTokensFunc: &EnterpriseDBAccessTokensFunc{
			defaultHook: func() (r0 database.AccessTokenStore) {
				return
			},
		},
		AuthzFunc: &EnterpriseDBAuthzFunc{
			defaultHook: func() (r0 database.AuthzStore) {
				return
			},
		},
		CodeMonitorsFunc: &EnterpriseDBCodeMonitorsFunc{
			defaultHook: func() (r0 CodeMonitorStore) {
				return
			},
		},
		ConfFunc: &EnterpriseDBConfFunc{
			defaultHook: func() (r0 database.ConfStore) {
				return
			},
		},
		DoneFunc: &EnterpriseDBDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		EventLogsFunc: &EnterpriseDBEventLogsFunc{
			defaultHook: func() (r0 database.EventLogStore) {
				return
			},
		},
		ExecContextFunc: &EnterpriseDBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 sql.Result, r1 error) {
				return
			},
		},
		ExternalServicesFunc: &EnterpriseDBExternalServicesFunc{
			defaultHook: func() (r0 database.ExternalServiceStore) {
				return
			},
		},
		FeatureFlagsFunc: &EnterpriseDBFeatureFlagsFunc{
			defaultHook: func() (r0 database.FeatureFlagStore) {
				return
			},
		},
		GitserverLocalCloneFunc: &EnterpriseDBGitserverLocalCloneFunc{
			defaultHook: func() (r0 database.GitserverLocalCloneStore) {
				return
			},
		},
		GitserverReposFunc: &EnterpriseDBGitserverReposFunc{
			defaultHook: func() (r0 database.GitserverRepoStore) {
				return
			},
		},
		GlobalStateFunc: &EnterpriseDBGlobalStateFunc{
			defaultHook: func() (r0 database.GlobalStateStore) {
				return
			},
		},
		HandleFunc: &EnterpriseDBHandleFunc{
			defaultHook: func() (r0 *basestore.TransactableHandle) {
				return
			},
		},
		NamespacesFunc: &EnterpriseDBNamespacesFunc{
			defaultHook: func() (r0 database.NamespaceStore) {
				return
			},
		},
		OrgInvitationsFunc: &EnterpriseDBOrgInvitationsFunc{
			defaultHook: func() (r0 database.OrgInvitationStore) {
				return
			},
		},
		OrgMembersFunc: &EnterpriseDBOrgMembersFunc{
			defaultHook: func() (r0 database.OrgMemberStore) {
				return
			},
		},
		OrgStatsFunc: &EnterpriseDBOrgStatsFunc{
			defaultHook: func() (r0 database.OrgStatsStore) {
				return
			},
		},
		OrgsFunc: &EnterpriseDBOrgsFunc{
			defaultHook: func() (r0 database.OrgStore) {
				return
			},
		},
		PermsFunc: &EnterpriseDBPermsFunc{
			defaultHook: func() (r0 PermsStore) {
				return
			},
		},
		PhabricatorFunc: &EnterpriseDBPhabricatorFunc{
			defaultHook: func() (r0 database.PhabricatorStore) {
				return
			},
		},
		QueryContextFunc: &EnterpriseDBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		QueryRowContextFunc: &EnterpriseDBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 *sql.Row) {
				return
			},
		},
		ReposFunc: &EnterpriseDBReposFunc{
			defaultHook: func() (r0 database.RepoStore) {
				return
			},
		},
		SavedSearchesFunc: &EnterpriseDBSavedSearchesFunc{
			defaultHook: func() (r0 database.SavedSearchStore) {
				return
			},
		},
		SearchContextsFunc: &EnterpriseDBSearchContextsFunc{
			defaultHook: func() (r0 database.SearchContextsStore) {
				return
			},
		},
		SecurityEventLogsFunc: &EnterpriseDBSecurityEventLogsFunc{
			defaultHook: func() (r0 database.SecurityEventLogsStore) {
				return
			},
		},
		SettingsFunc: &EnterpriseDBSettingsFunc{
			defaultHook: func() (r0 database.SettingsStore) {
				return
			},
		},
		SubRepoPermsFunc: &EnterpriseDBSubRepoPermsFunc{
			defaultHook: func() (r0 database.SubRepoPermsStore) {
				return
			},
		},
		TemporarySettingsFunc: &EnterpriseDBTemporarySettingsFunc{
			defaultHook: func() (r0 database.TemporarySettingsStore) {
				return
			},
		},
		TransactFunc: &EnterpriseDBTransactFunc{
			defaultHook: func(context.Context) (r0 database.DB, r1 error) {
				return
			},
		},
		UserCredentialsFunc: &EnterpriseDBUserCredentialsFunc{
			defaultHook: func(encryption.Key) (r0 database.UserCredentialsStore) {
				return
			},
		},
		UserEmailsFunc: &EnterpriseDBUserEmailsFunc{
			defaultHook: func() (r0 database.UserEmailsStore) {
				return
			},
		},
		UserExternalAccountsFunc: &EnterpriseDBUserExternalAccountsFunc{
			defaultHook: func() (r0 database.UserExternalAccountsStore) {
				return
			},
		},
		UserPublicReposFunc: &EnterpriseDBUserPublicReposFunc{
			defaultHook: func() (r0 database.UserPublicRepoStore) {
				return
			},
		},
		UsersFunc: &EnterpriseDBUsersFunc{
			defaultHook: func() (r0 database.UserStore) {
				return
			},
		},
		WebhookLogsFunc: &EnterpriseDBWebhookLogsFunc{
			defaultHook: func(encryption.Key) (r0 database.WebhookLogStore) {
				return
			},
		},
	}
}

// NewStrictMockEnterpriseDB creates a new mock of the EnterpriseDB
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockEnterpriseDB() *MockEnterpriseDB {
	return &MockEnterpriseDB{
		AccessTokensFunc: &EnterpriseDBAccessTokensFunc{
			defaultHook: func() database.AccessTokenStore {
				panic("unexpected invocation of MockEnterpriseDB.AccessTokens")
			},
		},
		AuthzFunc: &EnterpriseDBAuthzFunc{
			defaultHook: func() database.AuthzStore {
				panic("unexpected invocation of MockEnterpriseDB.Authz")
			},
		},
		CodeMonitorsFunc: &EnterpriseDBCodeMonitorsFunc{
			defaultHook: func() CodeMonitorStore {
				panic("unexpected invocation of MockEnterpriseDB.CodeMonitors")
			},
		},
		ConfFunc: &EnterpriseDBConfFunc{
			defaultHook: func() database.ConfStore {
				panic("unexpected invocation of MockEnterpriseDB.Conf")
			},
		},
		DoneFunc: &EnterpriseDBDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockEnterpriseDB.Done")
			},
		},
		EventLogsFunc: &EnterpriseDBEventLogsFunc{
			defaultHook: func() database.EventLogStore {
				panic("unexpected invocation of MockEnterpriseDB.EventLogs")
			},
		},
		ExecContextFunc: &EnterpriseDBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (sql.Result, error) {
				panic("unexpected invocation of MockEnterpriseDB.ExecContext")
			},
		},
		ExternalServicesFunc: &EnterpriseDBExternalServicesFunc{
			defaultHook: func() database.ExternalServiceStore {
				panic("unexpected invocation of MockEnterpriseDB.ExternalServices")
			},
		},
		FeatureFlagsFunc: &EnterpriseDBFeatureFlagsFunc{
			defaultHook: func() database.FeatureFlagStore {
				panic("unexpected invocation of MockEnterpriseDB.FeatureFlags")
			},
		},
		GitserverLocalCloneFunc: &EnterpriseDBGitserverLocalCloneFunc{
			defaultHook: func() database.GitserverLocalCloneStore {
				panic("unexpected invocation of MockEnterpriseDB.GitserverLocalClone")
			},
		},
		GitserverReposFunc: &EnterpriseDBGitserverReposFunc{
			defaultHook: func() database.GitserverRepoStore {
				panic("unexpected invocation of MockEnterpriseDB.GitserverRepos")
			},
		},
		GlobalStateFunc: &EnterpriseDBGlobalStateFunc{
			defaultHook: func() database.GlobalStateStore {
				panic("unexpected invocation of MockEnterpriseDB.GlobalState")
			},
		},
		HandleFunc: &EnterpriseDBHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockEnterpriseDB.Handle")
			},
		},
		NamespacesFunc: &EnterpriseDBNamespacesFunc{
			defaultHook: func() database.NamespaceStore {
				panic("unexpected invocation of MockEnterpriseDB.Namespaces")
			},
		},
		OrgInvitationsFunc: &EnterpriseDBOrgInvitationsFunc{
			defaultHook: func() database.OrgInvitationStore {
				panic("unexpected invocation of MockEnterpriseDB.OrgInvitations")
			},
		},
		OrgMembersFunc: &EnterpriseDBOrgMembersFunc{
			defaultHook: func() database.OrgMemberStore {
				panic("unexpected invocation of MockEnterpriseDB.OrgMembers")
			},
		},
		OrgStatsFunc: &EnterpriseDBOrgStatsFunc{
			defaultHook: func() database.OrgStatsStore {
				panic("unexpected invocation of MockEnterpriseDB.OrgStats")
			},
		},
		OrgsFunc: &EnterpriseDBOrgsFunc{
			defaultHook: func() database.OrgStore {
				panic("unexpected invocation of MockEnterpriseDB.Orgs")
			},
		},
		PermsFunc: &EnterpriseDBPermsFunc{
			defaultHook: func() PermsStore {
				panic("unexpected invocation of MockEnterpriseDB.Perms")
			},
		},
		PhabricatorFunc: &EnterpriseDBPhabricatorFunc{
			defaultHook: func() database.PhabricatorStore {
				panic("unexpected invocation of MockEnterpriseDB.Phabricator")
			},
		},
		QueryContextFunc: &EnterpriseDBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (*sql.Rows, error) {
				panic("unexpected invocation of MockEnterpriseDB.QueryContext")
			},
		},
		QueryRowContextFunc: &EnterpriseDBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) *sql.Row {
				panic("unexpected invocation of MockEnterpriseDB.QueryRowContext")
			},
		},
		ReposFunc: &EnterpriseDBReposFunc{
			defaultHook: func() database.RepoStore {
				panic("unexpected invocation of MockEnterpriseDB.Repos")
			},
		},
		SavedSearchesFunc: &EnterpriseDBSavedSearchesFunc{
			defaultHook: func() database.SavedSearchStore {
				panic("unexpected invocation of MockEnterpriseDB.SavedSearches")
			},
		},
		SearchContextsFunc: &EnterpriseDBSearchContextsFunc{
			defaultHook: func() database.SearchContextsStore {
				panic("unexpected invocation of MockEnterpriseDB.SearchContexts")
			},
		},
		SecurityEventLogsFunc: &EnterpriseDBSecurityEventLogsFunc{
			defaultHook: func() database.SecurityEventLogsStore {
				panic("unexpected invocation of MockEnterpriseDB.SecurityEventLogs")
			},
		},
		SettingsFunc: &EnterpriseDBSettingsFunc{
			defaultHook: func() database.SettingsStore {
				panic("unexpected invocation of MockEnterpriseDB.Settings")
			},
		},
		SubRepoPermsFunc: &EnterpriseDBSubRepoPermsFunc{
			defaultHook: func() database.SubRepoPermsStore {
				panic("unexpected invocation of MockEnterpriseDB.SubRepoPerms")
			},
		},
		TemporarySettingsFunc: &EnterpriseDBTemporarySettingsFunc{
			defaultHook: func() database.TemporarySettingsStore {
				panic("unexpected invocation of MockEnterpriseDB.TemporarySettings")
			},
		},
		TransactFunc: &EnterpriseDBTransactFunc{
			defaultHook: func(context.Context) (database.DB, error) {
				panic("unexpected invocation of MockEnterpriseDB.Transact")
			},
		},
		UserCredentialsFunc: &EnterpriseDBUserCredentialsFunc{
			defaultHook: func(encryption.Key) database.UserCredentialsStore {
				panic("unexpected invocation of MockEnterpriseDB.UserCredentials")
			},
		},
		UserEmailsFunc: &EnterpriseDBUserEmailsFunc{
			defaultHook: func() database.UserEmailsStore {
				panic("unexpected invocation of MockEnterpriseDB.UserEmails")
			},
		},
		UserExternalAccountsFunc: &EnterpriseDBUserExternalAccountsFunc{
			defaultHook: func() database.UserExternalAccountsStore {
				panic("unexpected invocation of MockEnterpriseDB.UserExternalAccounts")
			},
		},
		UserPublicReposFunc: &EnterpriseDBUserPublicReposFunc{
			defaultHook: func() database.UserPublicRepoStore {
				panic("unexpected invocation of MockEnterpriseDB.UserPublicRepos")
			},
		},
		UsersFunc: &EnterpriseDBUsersFunc{
			defaultHook: func() database.UserStore {
				panic("unexpected invocation of MockEnterpriseDB.Users")
			},
		},
		WebhookLogsFunc: &EnterpriseDBWebhookLogsFunc{
			defaultHook: func(encryption.Key) database.WebhookLogStore {
				panic("unexpected invocation of MockEnterpriseDB.WebhookLogs")
			},
		},
	}
}

// NewMockEnterpriseDBFrom creates a new mock of the MockEnterpriseDB
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockEnterpriseDBFrom(i EnterpriseDB) *MockEnterpriseDB {
	return &MockEnterpriseDB{
		AccessTokensFunc: &EnterpriseDBAccessTokensFunc{
			defaultHook: i.AccessTokens,
		},
		AuthzFunc: &EnterpriseDBAuthzFunc{
			defaultHook: i.Authz,
		},
		CodeMonitorsFunc: &EnterpriseDBCodeMonitorsFunc{
			defaultHook: i.CodeMonitors,
		},
		ConfFunc: &EnterpriseDBConfFunc{
			defaultHook: i.Conf,
		},
		DoneFunc: &EnterpriseDBDoneFunc{
			defaultHook: i.Done,
		},
		EventLogsFunc: &EnterpriseDBEventLogsFunc{
			defaultHook: i.EventLogs,
		},
		ExecContextFunc: &EnterpriseDBExecContextFunc{
			defaultHook: i.ExecContext,
		},
		ExternalServicesFunc: &EnterpriseDBExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		FeatureFlagsFunc: &EnterpriseDBFeatureFlagsFunc{
			defaultHook: i.FeatureFlags,
		},
		GitserverLocalCloneFunc: &EnterpriseDBGitserverLocalCloneFunc{
			defaultHook: i.GitserverLocalClone,
		},
		GitserverReposFunc: &EnterpriseDBGitserverReposFunc{
			defaultHook: i.GitserverRepos,
		},
		GlobalStateFunc: &EnterpriseDBGlobalStateFunc{
			defaultHook: i.GlobalState,
		},
		HandleFunc: &EnterpriseDBHandleFunc{
			defaultHook: i.Handle,
		},
		NamespacesFunc: &EnterpriseDBNamespacesFunc{
			defaultHook: i.Namespaces,
		},
		OrgInvitationsFunc: &EnterpriseDBOrgInvitationsFunc{
			defaultHook: i.OrgInvitations,
		},
		OrgMembersFunc: &EnterpriseDBOrgMembersFunc{
			defaultHook: i.OrgMembers,
		},
		OrgStatsFunc: &EnterpriseDBOrgStatsFunc{
			defaultHook: i.OrgStats,
		},
		OrgsFunc: &EnterpriseDBOrgsFunc{
			defaultHook: i.Orgs,
		},
		PermsFunc: &EnterpriseDBPermsFunc{
			defaultHook: i.Perms,
		},
		PhabricatorFunc: &EnterpriseDBPhabricatorFunc{
			defaultHook: i.Phabricator,
		},
		QueryContextFunc: &EnterpriseDBQueryContextFunc{
			defaultHook: i.QueryContext,
		},
		QueryRowContextFunc: &EnterpriseDBQueryRowContextFunc{
			defaultHook: i.QueryRowContext,
		},
		ReposFunc: &EnterpriseDBReposFunc{
			defaultHook: i.Repos,
		},
		SavedSearchesFunc: &EnterpriseDBSavedSearchesFunc{
			defaultHook: i.SavedSearches,
		},
		SearchContextsFunc: &EnterpriseDBSearchContextsFunc{
			defaultHook: i.SearchContexts,
		},
		SecurityEventLogsFunc: &EnterpriseDBSecurityEventLogsFunc{
			defaultHook: i.SecurityEventLogs,
		},
		SettingsFunc: &EnterpriseDBSettingsFunc{
			defaultHook: i.Settings,
		},
		SubRepoPermsFunc: &EnterpriseDBSubRepoPermsFunc{
			defaultHook: i.SubRepoPerms,
		},
		TemporarySettingsFunc: &EnterpriseDBTemporarySettingsFunc{
			defaultHook: i.TemporarySettings,
		},
		TransactFunc: &EnterpriseDBTransactFunc{
			defaultHook: i.Transact,
		},
		UserCredentialsFunc: &EnterpriseDBUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
		UserEmailsFunc: &EnterpriseDBUserEmailsFunc{
			defaultHook: i.UserEmails,
		},
		UserExternalAccountsFunc: &EnterpriseDBUserExternalAccountsFunc{
			defaultHook: i.UserExternalAccounts,
		},
		UserPublicReposFunc: &EnterpriseDBUserPublicReposFunc{
			defaultHook: i.UserPublicRepos,
		},
		UsersFunc: &EnterpriseDBUsersFunc{
			defaultHook: i.Users,
		},
		WebhookLogsFunc: &EnterpriseDBWebhookLogsFunc{
			defaultHook: i.WebhookLogs,
		},
	}
}

// EnterpriseDBAccessTokensFunc describes the behavior when the AccessTokens
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBAccessTokensFunc struct {
	defaultHook func() database.AccessTokenStore
	hooks       []func() database.AccessTokenStore
	history     []EnterpriseDBAccessTokensFuncCall
	mutex       sync.Mutex
}

// AccessTokens delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) AccessTokens() database.AccessTokenStore {
	r0 := m.AccessTokensFunc.nextHook()()
	m.AccessTokensFunc.appendCall(EnterpriseDBAccessTokensFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AccessTokens method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBAccessTokensFunc) SetDefaultHook(hook func() database.AccessTokenStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccessTokens method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBAccessTokensFunc) PushHook(hook func() database.AccessTokenStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBAccessTokensFunc) SetDefaultReturn(r0 database.AccessTokenStore) {
	f.SetDefaultHook(func() database.AccessTokenStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBAccessTokensFunc) PushReturn(r0 database.AccessTokenStore) {
	f.PushHook(func() database.AccessTokenStore {
		return r0
	})
}

func (f *EnterpriseDBAccessTokensFunc) nextHook() func() database.AccessTokenStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBAccessTokensFunc) appendCall(r0 EnterpriseDBAccessTokensFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBAccessTokensFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBAccessTokensFunc) History() []EnterpriseDBAccessTokensFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBAccessTokensFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBAccessTokensFuncCall is an object that describes an
// invocation of method AccessTokens on an instance of MockEnterpriseDB.
type EnterpriseDBAccessTokensFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AccessTokenStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBAccessTokensFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBAccessTokensFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBAuthzFunc describes the behavior when the Authz method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBAuthzFunc struct {
	defaultHook func() database.AuthzStore
	hooks       []func() database.AuthzStore
	history     []EnterpriseDBAuthzFuncCall
	mutex       sync.Mutex
}

// Authz delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Authz() database.AuthzStore {
	r0 := m.AuthzFunc.nextHook()()
	m.AuthzFunc.appendCall(EnterpriseDBAuthzFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authz method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBAuthzFunc) SetDefaultHook(hook func() database.AuthzStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authz method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBAuthzFunc) PushHook(hook func() database.AuthzStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBAuthzFunc) SetDefaultReturn(r0 database.AuthzStore) {
	f.SetDefaultHook(func() database.AuthzStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBAuthzFunc) PushReturn(r0 database.AuthzStore) {
	f.PushHook(func() database.AuthzStore {
		return r0
	})
}

func (f *EnterpriseDBAuthzFunc) nextHook() func() database.AuthzStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBAuthzFunc) appendCall(r0 EnterpriseDBAuthzFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBAuthzFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBAuthzFunc) History() []EnterpriseDBAuthzFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBAuthzFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBAuthzFuncCall is an object that describes an invocation of
// method Authz on an instance of MockEnterpriseDB.
type EnterpriseDBAuthzFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AuthzStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBAuthzFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBAuthzFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBCodeMonitorsFunc describes the behavior when the CodeMonitors
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBCodeMonitorsFunc struct {
	defaultHook func() CodeMonitorStore
	hooks       []func() CodeMonitorStore
	history     []EnterpriseDBCodeMonitorsFuncCall
	mutex       sync.Mutex
}

// CodeMonitors delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) CodeMonitors() CodeMonitorStore {
	r0 := m.CodeMonitorsFunc.nextHook()()
	m.CodeMonitorsFunc.appendCall(EnterpriseDBCodeMonitorsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the CodeMonitors method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBCodeMonitorsFunc) SetDefaultHook(hook func() CodeMonitorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeMonitors method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBCodeMonitorsFunc) PushHook(hook func() CodeMonitorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBCodeMonitorsFunc) SetDefaultReturn(r0 CodeMonitorStore) {
	f.SetDefaultHook(func() CodeMonitorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBCodeMonitorsFunc) PushReturn(r0 CodeMonitorStore) {
	f.PushHook(func() CodeMonitorStore {
		return r0
	})
}

func (f *EnterpriseDBCodeMonitorsFunc) nextHook() func() CodeMonitorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBCodeMonitorsFunc) appendCall(r0 EnterpriseDBCodeMonitorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBCodeMonitorsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBCodeMonitorsFunc) History() []EnterpriseDBCodeMonitorsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBCodeMonitorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBCodeMonitorsFuncCall is an object that describes an
// invocation of method CodeMonitors on an instance of MockEnterpriseDB.
type EnterpriseDBCodeMonitorsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 CodeMonitorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBCodeMonitorsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBCodeMonitorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBConfFunc describes the behavior when the Conf method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBConfFunc struct {
	defaultHook func() database.ConfStore
	hooks       []func() database.ConfStore
	history     []EnterpriseDBConfFuncCall
	mutex       sync.Mutex
}

// Conf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Conf() database.ConfStore {
	r0 := m.ConfFunc.nextHook()()
	m.ConfFunc.appendCall(EnterpriseDBConfFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Conf method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBConfFunc) SetDefaultHook(hook func() database.ConfStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Conf method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBConfFunc) PushHook(hook func() database.ConfStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBConfFunc) SetDefaultReturn(r0 database.ConfStore) {
	f.SetDefaultHook(func() database.ConfStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBConfFunc) PushReturn(r0 database.ConfStore) {
	f.PushHook(func() database.ConfStore {
		return r0
	})
}

func (f *EnterpriseDBConfFunc) nextHook() func() database.ConfStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBConfFunc) appendCall(r0 EnterpriseDBConfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBConfFuncCall objects describing
// the invocations of this function.
func (f *EnterpriseDBConfFunc) History() []EnterpriseDBConfFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBConfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBConfFuncCall is an object that describes an invocation of
// method Conf on an instance of MockEnterpriseDB.
type EnterpriseDBConfFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ConfStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBConfFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBConfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBDoneFunc describes the behavior when the Done method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []EnterpriseDBDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(EnterpriseDBDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *EnterpriseDBDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBDoneFunc) appendCall(r0 EnterpriseDBDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBDoneFuncCall objects describing
// the invocations of this function.
func (f *EnterpriseDBDoneFunc) History() []EnterpriseDBDoneFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockEnterpriseDB.
type EnterpriseDBDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBEventLogsFunc describes the behavior when the EventLogs
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBEventLogsFunc struct {
	defaultHook func() database.EventLogStore
	hooks       []func() database.EventLogStore
	history     []EnterpriseDBEventLogsFuncCall
	mutex       sync.Mutex
}

// EventLogs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) EventLogs() database.EventLogStore {
	r0 := m.EventLogsFunc.nextHook()()
	m.EventLogsFunc.appendCall(EnterpriseDBEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EventLogs method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBEventLogsFunc) SetDefaultHook(hook func() database.EventLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EventLogs method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBEventLogsFunc) PushHook(hook func() database.EventLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBEventLogsFunc) SetDefaultReturn(r0 database.EventLogStore) {
	f.SetDefaultHook(func() database.EventLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBEventLogsFunc) PushReturn(r0 database.EventLogStore) {
	f.PushHook(func() database.EventLogStore {
		return r0
	})
}

func (f *EnterpriseDBEventLogsFunc) nextHook() func() database.EventLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBEventLogsFunc) appendCall(r0 EnterpriseDBEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBEventLogsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBEventLogsFunc) History() []EnterpriseDBEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBEventLogsFuncCall is an object that describes an invocation
// of method EventLogs on an instance of MockEnterpriseDB.
type EnterpriseDBEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.EventLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBExecContextFunc describes the behavior when the ExecContext
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBExecContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (sql.Result, error)
	hooks       []func(context.Context, string, ...interface{}) (sql.Result, error)
	history     []EnterpriseDBExecContextFuncCall
	mutex       sync.Mutex
}

// ExecContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) ExecContext(v0 context.Context, v1 string, v2 ...interface{}) (sql.Result, error) {
	r0, r1 := m.ExecContextFunc.nextHook()(v0, v1, v2...)
	m.ExecContextFunc.appendCall(EnterpriseDBExecContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecContext method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBExecContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecContext method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBExecContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBExecContextFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBExecContextFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

func (f *EnterpriseDBExecContextFunc) nextHook() func(context.Context, string, ...interface{}) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExecContextFunc) appendCall(r0 EnterpriseDBExecContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBExecContextFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBExecContextFunc) History() []EnterpriseDBExecContextFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExecContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExecContextFuncCall is an object that describes an invocation
// of method ExecContext on an instance of MockEnterpriseDB.
type EnterpriseDBExecContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EnterpriseDBExecContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExecContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EnterpriseDBExternalServicesFunc describes the behavior when the
// ExternalServices method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBExternalServicesFunc struct {
	defaultHook func() database.ExternalServiceStore
	hooks       []func() database.ExternalServiceStore
	history     []EnterpriseDBExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) ExternalServices() database.ExternalServiceStore {
	r0 := m.ExternalServicesFunc.nextHook()()
	m.ExternalServicesFunc.appendCall(EnterpriseDBExternalServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBExternalServicesFunc) SetDefaultHook(hook func() database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBExternalServicesFunc) PushHook(hook func() database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBExternalServicesFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func() database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBExternalServicesFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func() database.ExternalServiceStore {
		return r0
	})
}

func (f *EnterpriseDBExternalServicesFunc) nextHook() func() database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExternalServicesFunc) appendCall(r0 EnterpriseDBExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBExternalServicesFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBExternalServicesFunc) History() []EnterpriseDBExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExternalServicesFuncCall is an object that describes an
// invocation of method ExternalServices on an instance of MockEnterpriseDB.
type EnterpriseDBExternalServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBFeatureFlagsFunc describes the behavior when the FeatureFlags
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBFeatureFlagsFunc struct {
	defaultHook func() database.FeatureFlagStore
	hooks       []func() database.FeatureFlagStore
	history     []EnterpriseDBFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// FeatureFlags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) FeatureFlags() database.FeatureFlagStore {
	r0 := m.FeatureFlagsFunc.nextHook()()
	m.FeatureFlagsFunc.appendCall(EnterpriseDBFeatureFlagsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the FeatureFlags method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBFeatureFlagsFunc) SetDefaultHook(hook func() database.FeatureFlagStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FeatureFlags method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBFeatureFlagsFunc) PushHook(hook func() database.FeatureFlagStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBFeatureFlagsFunc) SetDefaultReturn(r0 database.FeatureFlagStore) {
	f.SetDefaultHook(func() database.FeatureFlagStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBFeatureFlagsFunc) PushReturn(r0 database.FeatureFlagStore) {
	f.PushHook(func() database.FeatureFlagStore {
		return r0
	})
}

func (f *EnterpriseDBFeatureFlagsFunc) nextHook() func() database.FeatureFlagStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBFeatureFlagsFunc) appendCall(r0 EnterpriseDBFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBFeatureFlagsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBFeatureFlagsFunc) History() []EnterpriseDBFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBFeatureFlagsFuncCall is an object that describes an
// invocation of method FeatureFlags on an instance of MockEnterpriseDB.
type EnterpriseDBFeatureFlagsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.FeatureFlagStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBGitserverLocalCloneFunc describes the behavior when the
// GitserverLocalClone method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBGitserverLocalCloneFunc struct {
	defaultHook func() database.GitserverLocalCloneStore
	hooks       []func() database.GitserverLocalCloneStore
	history     []EnterpriseDBGitserverLocalCloneFuncCall
	mutex       sync.Mutex
}

// GitserverLocalClone delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) GitserverLocalClone() database.GitserverLocalCloneStore {
	r0 := m.GitserverLocalCloneFunc.nextHook()()
	m.GitserverLocalCloneFunc.appendCall(EnterpriseDBGitserverLocalCloneFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverLocalClone
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBGitserverLocalCloneFunc) SetDefaultHook(hook func() database.GitserverLocalCloneStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverLocalClone method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBGitserverLocalCloneFunc) PushHook(hook func() database.GitserverLocalCloneStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBGitserverLocalCloneFunc) SetDefaultReturn(r0 database.GitserverLocalCloneStore) {
	f.SetDefaultHook(func() database.GitserverLocalCloneStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBGitserverLocalCloneFunc) PushReturn(r0 database.GitserverLocalCloneStore) {
	f.PushHook(func() database.GitserverLocalCloneStore {
		return r0
	})
}

func (f *EnterpriseDBGitserverLocalCloneFunc) nextHook() func() database.GitserverLocalCloneStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBGitserverLocalCloneFunc) appendCall(r0 EnterpriseDBGitserverLocalCloneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBGitserverLocalCloneFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBGitserverLocalCloneFunc) History() []EnterpriseDBGitserverLocalCloneFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBGitserverLocalCloneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBGitserverLocalCloneFuncCall is an object that describes an
// invocation of method GitserverLocalClone on an instance of
// MockEnterpriseDB.
type EnterpriseDBGitserverLocalCloneFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.GitserverLocalCloneStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBGitserverLocalCloneFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBGitserverLocalCloneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBGitserverReposFunc describes the behavior when the
// GitserverRepos method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBGitserverReposFunc struct {
	defaultHook func() database.GitserverRepoStore
	hooks       []func() database.GitserverRepoStore
	history     []EnterpriseDBGitserverReposFuncCall
	mutex       sync.Mutex
}

// GitserverRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) GitserverRepos() database.GitserverRepoStore {
	r0 := m.GitserverReposFunc.nextHook()()
	m.GitserverReposFunc.appendCall(EnterpriseDBGitserverReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverRepos
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBGitserverReposFunc) SetDefaultHook(hook func() database.GitserverRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverRepos method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBGitserverReposFunc) PushHook(hook func() database.GitserverRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBGitserverReposFunc) SetDefaultReturn(r0 database.GitserverRepoStore) {
	f.SetDefaultHook(func() database.GitserverRepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBGitserverReposFunc) PushReturn(r0 database.GitserverRepoStore) {
	f.PushHook(func() database.GitserverRepoStore {
		return r0
	})
}

func (f *EnterpriseDBGitserverReposFunc) nextHook() func() database.GitserverRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBGitserverReposFunc) appendCall(r0 EnterpriseDBGitserverReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBGitserverReposFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBGitserverReposFunc) History() []EnterpriseDBGitserverReposFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBGitserverReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBGitserverReposFuncCall is an object that describes an
// invocation of method GitserverRepos on an instance of MockEnterpriseDB.
type EnterpriseDBGitserverReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.GitserverRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBGitserverReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBGitserverReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBGlobalStateFunc describes the behavior when the GlobalState
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBGlobalStateFunc struct {
	defaultHook func() database.GlobalStateStore
	hooks       []func() database.GlobalStateStore
	history     []EnterpriseDBGlobalStateFuncCall
	mutex       sync.Mutex
}

// GlobalState delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) GlobalState() database.GlobalStateStore {
	r0 := m.GlobalStateFunc.nextHook()()
	m.GlobalStateFunc.appendCall(EnterpriseDBGlobalStateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GlobalState method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBGlobalStateFunc) SetDefaultHook(hook func() database.GlobalStateStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GlobalState method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBGlobalStateFunc) PushHook(hook func() database.GlobalStateStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBGlobalStateFunc) SetDefaultReturn(r0 database.GlobalStateStore) {
	f.SetDefaultHook(func() database.GlobalStateStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBGlobalStateFunc) PushReturn(r0 database.GlobalStateStore) {
	f.PushHook(func() database.GlobalStateStore {
		return r0
	})
}

func (f *EnterpriseDBGlobalStateFunc) nextHook() func() database.GlobalStateStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBGlobalStateFunc) appendCall(r0 EnterpriseDBGlobalStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBGlobalStateFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBGlobalStateFunc) History() []EnterpriseDBGlobalStateFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBGlobalStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBGlobalStateFuncCall is an object that describes an invocation
// of method GlobalState on an instance of MockEnterpriseDB.
type EnterpriseDBGlobalStateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.GlobalStateStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBGlobalStateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBGlobalStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBHandleFunc describes the behavior when the Handle method of
// the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []EnterpriseDBHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(EnterpriseDBHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *EnterpriseDBHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBHandleFunc) appendCall(r0 EnterpriseDBHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBHandleFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBHandleFunc) History() []EnterpriseDBHandleFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockEnterpriseDB.
type EnterpriseDBHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBNamespacesFunc describes the behavior when the Namespaces
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBNamespacesFunc struct {
	defaultHook func() database.NamespaceStore
	hooks       []func() database.NamespaceStore
	history     []EnterpriseDBNamespacesFuncCall
	mutex       sync.Mutex
}

// Namespaces delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) Namespaces() database.NamespaceStore {
	r0 := m.NamespacesFunc.nextHook()()
	m.NamespacesFunc.appendCall(EnterpriseDBNamespacesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Namespaces method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBNamespacesFunc) SetDefaultHook(hook func() database.NamespaceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Namespaces method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBNamespacesFunc) PushHook(hook func() database.NamespaceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBNamespacesFunc) SetDefaultReturn(r0 database.NamespaceStore) {
	f.SetDefaultHook(func() database.NamespaceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBNamespacesFunc) PushReturn(r0 database.NamespaceStore) {
	f.PushHook(func() database.NamespaceStore {
		return r0
	})
}

func (f *EnterpriseDBNamespacesFunc) nextHook() func() database.NamespaceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBNamespacesFunc) appendCall(r0 EnterpriseDBNamespacesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBNamespacesFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBNamespacesFunc) History() []EnterpriseDBNamespacesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBNamespacesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBNamespacesFuncCall is an object that describes an invocation
// of method Namespaces on an instance of MockEnterpriseDB.
type EnterpriseDBNamespacesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.NamespaceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBNamespacesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBNamespacesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgInvitationsFunc describes the behavior when the
// OrgInvitations method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgInvitationsFunc struct {
	defaultHook func() database.OrgInvitationStore
	hooks       []func() database.OrgInvitationStore
	history     []EnterpriseDBOrgInvitationsFuncCall
	mutex       sync.Mutex
}

// OrgInvitations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OrgInvitations() database.OrgInvitationStore {
	r0 := m.OrgInvitationsFunc.nextHook()()
	m.OrgInvitationsFunc.appendCall(EnterpriseDBOrgInvitationsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgInvitations
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBOrgInvitationsFunc) SetDefaultHook(hook func() database.OrgInvitationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgInvitations method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBOrgInvitationsFunc) PushHook(hook func() database.OrgInvitationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOrgInvitationsFunc) SetDefaultReturn(r0 database.OrgInvitationStore) {
	f.SetDefaultHook(func() database.OrgInvitationStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOrgInvitationsFunc) PushReturn(r0 database.OrgInvitationStore) {
	f.PushHook(func() database.OrgInvitationStore {
		return r0
	})
}

func (f *EnterpriseDBOrgInvitationsFunc) nextHook() func() database.OrgInvitationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgInvitationsFunc) appendCall(r0 EnterpriseDBOrgInvitationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgInvitationsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBOrgInvitationsFunc) History() []EnterpriseDBOrgInvitationsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgInvitationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgInvitationsFuncCall is an object that describes an
// invocation of method OrgInvitations on an instance of MockEnterpriseDB.
type EnterpriseDBOrgInvitationsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgInvitationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgInvitationsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgInvitationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgMembersFunc describes the behavior when the OrgMembers
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgMembersFunc struct {
	defaultHook func() database.OrgMemberStore
	hooks       []func() database.OrgMemberStore
	history     []EnterpriseDBOrgMembersFuncCall
	mutex       sync.Mutex
}

// OrgMembers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OrgMembers() database.OrgMemberStore {
	r0 := m.OrgMembersFunc.nextHook()()
	m.OrgMembersFunc.appendCall(EnterpriseDBOrgMembersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgMembers method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBOrgMembersFunc) SetDefaultHook(hook func() database.OrgMemberStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgMembers method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBOrgMembersFunc) PushHook(hook func() database.OrgMemberStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOrgMembersFunc) SetDefaultReturn(r0 database.OrgMemberStore) {
	f.SetDefaultHook(func() database.OrgMemberStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOrgMembersFunc) PushReturn(r0 database.OrgMemberStore) {
	f.PushHook(func() database.OrgMemberStore {
		return r0
	})
}

func (f *EnterpriseDBOrgMembersFunc) nextHook() func() database.OrgMemberStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgMembersFunc) appendCall(r0 EnterpriseDBOrgMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgMembersFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBOrgMembersFunc) History() []EnterpriseDBOrgMembersFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgMembersFuncCall is an object that describes an invocation
// of method OrgMembers on an instance of MockEnterpriseDB.
type EnterpriseDBOrgMembersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgMemberStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgMembersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgStatsFunc describes the behavior when the OrgStats method
// of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgStatsFunc struct {
	defaultHook func() database.OrgStatsStore
	hooks       []func() database.OrgStatsStore
	history     []EnterpriseDBOrgStatsFuncCall
	mutex       sync.Mutex
}

// OrgStats delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) OrgStats() database.OrgStatsStore {
	r0 := m.OrgStatsFunc.nextHook()()
	m.OrgStatsFunc.appendCall(EnterpriseDBOrgStatsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgStats method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBOrgStatsFunc) SetDefaultHook(hook func() database.OrgStatsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgStats method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBOrgStatsFunc) PushHook(hook func() database.OrgStatsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOrgStatsFunc) SetDefaultReturn(r0 database.OrgStatsStore) {
	f.SetDefaultHook(func() database.OrgStatsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOrgStatsFunc) PushReturn(r0 database.OrgStatsStore) {
	f.PushHook(func() database.OrgStatsStore {
		return r0
	})
}

func (f *EnterpriseDBOrgStatsFunc) nextHook() func() database.OrgStatsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgStatsFunc) appendCall(r0 EnterpriseDBOrgStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgStatsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBOrgStatsFunc) History() []EnterpriseDBOrgStatsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgStatsFuncCall is an object that describes an invocation of
// method OrgStats on an instance of MockEnterpriseDB.
type EnterpriseDBOrgStatsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgStatsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgStatsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgsFunc describes the behavior when the Orgs method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgsFunc struct {
	defaultHook func() database.OrgStore
	hooks       []func() database.OrgStore
	history     []EnterpriseDBOrgsFuncCall
	mutex       sync.Mutex
}

// Orgs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Orgs() database.OrgStore {
	r0 := m.OrgsFunc.nextHook()()
	m.OrgsFunc.appendCall(EnterpriseDBOrgsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Orgs method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBOrgsFunc) SetDefaultHook(hook func() database.OrgStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Orgs method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBOrgsFunc) PushHook(hook func() database.OrgStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOrgsFunc) SetDefaultReturn(r0 database.OrgStore) {
	f.SetDefaultHook(func() database.OrgStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOrgsFunc) PushReturn(r0 database.OrgStore) {
	f.PushHook(func() database.OrgStore {
		return r0
	})
}

func (f *EnterpriseDBOrgsFunc) nextHook() func() database.OrgStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgsFunc) appendCall(r0 EnterpriseDBOrgsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgsFuncCall objects describing
// the invocations of this function.
func (f *EnterpriseDBOrgsFunc) History() []EnterpriseDBOrgsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgsFuncCall is an object that describes an invocation of
// method Orgs on an instance of MockEnterpriseDB.
type EnterpriseDBOrgsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBPermsFunc describes the behavior when the Perms method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBPermsFunc struct {
	defaultHook func() PermsStore
	hooks       []func() PermsStore
	history     []EnterpriseDBPermsFuncCall
	mutex       sync.Mutex
}

// Perms delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Perms() PermsStore {
	r0 := m.PermsFunc.nextHook()()
	m.PermsFunc.appendCall(EnterpriseDBPermsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Perms method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBPermsFunc) SetDefaultHook(hook func() PermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Perms method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBPermsFunc) PushHook(hook func() PermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBPermsFunc) SetDefaultReturn(r0 PermsStore) {
	f.SetDefaultHook(func() PermsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBPermsFunc) PushReturn(r0 PermsStore) {
	f.PushHook(func() PermsStore {
		return r0
	})
}

func (f *EnterpriseDBPermsFunc) nextHook() func() PermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBPermsFunc) appendCall(r0 EnterpriseDBPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBPermsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBPermsFunc) History() []EnterpriseDBPermsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBPermsFuncCall is an object that describes an invocation of
// method Perms on an instance of MockEnterpriseDB.
type EnterpriseDBPermsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBPermsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBPhabricatorFunc describes the behavior when the Phabricator
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBPhabricatorFunc struct {
	defaultHook func() database.PhabricatorStore
	hooks       []func() database.PhabricatorStore
	history     []EnterpriseDBPhabricatorFuncCall
	mutex       sync.Mutex
}

// Phabricator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) Phabricator() database.PhabricatorStore {
	r0 := m.PhabricatorFunc.nextHook()()
	m.PhabricatorFunc.appendCall(EnterpriseDBPhabricatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Phabricator method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBPhabricatorFunc) SetDefaultHook(hook func() database.PhabricatorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Phabricator method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBPhabricatorFunc) PushHook(hook func() database.PhabricatorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBPhabricatorFunc) SetDefaultReturn(r0 database.PhabricatorStore) {
	f.SetDefaultHook(func() database.PhabricatorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBPhabricatorFunc) PushReturn(r0 database.PhabricatorStore) {
	f.PushHook(func() database.PhabricatorStore {
		return r0
	})
}

func (f *EnterpriseDBPhabricatorFunc) nextHook() func() database.PhabricatorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBPhabricatorFunc) appendCall(r0 EnterpriseDBPhabricatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBPhabricatorFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBPhabricatorFunc) History() []EnterpriseDBPhabricatorFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBPhabricatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBPhabricatorFuncCall is an object that describes an invocation
// of method Phabricator on an instance of MockEnterpriseDB.
type EnterpriseDBPhabricatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.PhabricatorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBPhabricatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBPhabricatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBQueryContextFunc describes the behavior when the QueryContext
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBQueryContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (*sql.Rows, error)
	hooks       []func(context.Context, string, ...interface{}) (*sql.Rows, error)
	history     []EnterpriseDBQueryContextFuncCall
	mutex       sync.Mutex
}

// QueryContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) QueryContext(v0 context.Context, v1 string, v2 ...interface{}) (*sql.Rows, error) {
	r0, r1 := m.QueryContextFunc.nextHook()(v0, v1, v2...)
	m.QueryContextFunc.appendCall(EnterpriseDBQueryContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueryContext method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBQueryContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryContext method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBQueryContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBQueryContextFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBQueryContextFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *EnterpriseDBQueryContextFunc) nextHook() func(context.Context, string, ...interface{}) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBQueryContextFunc) appendCall(r0 EnterpriseDBQueryContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBQueryContextFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBQueryContextFunc) History() []EnterpriseDBQueryContextFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBQueryContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBQueryContextFuncCall is an object that describes an
// invocation of method QueryContext on an instance of MockEnterpriseDB.
type EnterpriseDBQueryContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EnterpriseDBQueryContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBQueryContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EnterpriseDBQueryRowContextFunc describes the behavior when the
// QueryRowContext method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBQueryRowContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) *sql.Row
	hooks       []func(context.Context, string, ...interface{}) *sql.Row
	history     []EnterpriseDBQueryRowContextFuncCall
	mutex       sync.Mutex
}

// QueryRowContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) QueryRowContext(v0 context.Context, v1 string, v2 ...interface{}) *sql.Row {
	r0 := m.QueryRowContextFunc.nextHook()(v0, v1, v2...)
	m.QueryRowContextFunc.appendCall(EnterpriseDBQueryRowContextFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryRowContext
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBQueryRowContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRowContext method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBQueryRowContextFunc) PushHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBQueryRowContextFunc) SetDefaultReturn(r0 *sql.Row) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBQueryRowContextFunc) PushReturn(r0 *sql.Row) {
	f.PushHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

func (f *EnterpriseDBQueryRowContextFunc) nextHook() func(context.Context, string, ...interface{}) *sql.Row {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBQueryRowContextFunc) appendCall(r0 EnterpriseDBQueryRowContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBQueryRowContextFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBQueryRowContextFunc) History() []EnterpriseDBQueryRowContextFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBQueryRowContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBQueryRowContextFuncCall is an object that describes an
// invocation of method QueryRowContext on an instance of MockEnterpriseDB.
type EnterpriseDBQueryRowContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Row
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EnterpriseDBQueryRowContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBQueryRowContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBReposFunc describes the behavior when the Repos method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBReposFunc struct {
	defaultHook func() database.RepoStore
	hooks       []func() database.RepoStore
	history     []EnterpriseDBReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Repos() database.RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(EnterpriseDBReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBReposFunc) SetDefaultHook(hook func() database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBReposFunc) PushHook(hook func() database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBReposFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func() database.RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBReposFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func() database.RepoStore {
		return r0
	})
}

func (f *EnterpriseDBReposFunc) nextHook() func() database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBReposFunc) appendCall(r0 EnterpriseDBReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBReposFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBReposFunc) History() []EnterpriseDBReposFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBReposFuncCall is an object that describes an invocation of
// method Repos on an instance of MockEnterpriseDB.
type EnterpriseDBReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSavedSearchesFunc describes the behavior when the
// SavedSearches method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSavedSearchesFunc struct {
	defaultHook func() database.SavedSearchStore
	hooks       []func() database.SavedSearchStore
	history     []EnterpriseDBSavedSearchesFuncCall
	mutex       sync.Mutex
}

// SavedSearches delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SavedSearches() database.SavedSearchStore {
	r0 := m.SavedSearchesFunc.nextHook()()
	m.SavedSearchesFunc.appendCall(EnterpriseDBSavedSearchesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SavedSearches method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBSavedSearchesFunc) SetDefaultHook(hook func() database.SavedSearchStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SavedSearches method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBSavedSearchesFunc) PushHook(hook func() database.SavedSearchStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSavedSearchesFunc) SetDefaultReturn(r0 database.SavedSearchStore) {
	f.SetDefaultHook(func() database.SavedSearchStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSavedSearchesFunc) PushReturn(r0 database.SavedSearchStore) {
	f.PushHook(func() database.SavedSearchStore {
		return r0
	})
}

func (f *EnterpriseDBSavedSearchesFunc) nextHook() func() database.SavedSearchStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSavedSearchesFunc) appendCall(r0 EnterpriseDBSavedSearchesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSavedSearchesFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSavedSearchesFunc) History() []EnterpriseDBSavedSearchesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSavedSearchesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSavedSearchesFuncCall is an object that describes an
// invocation of method SavedSearches on an instance of MockEnterpriseDB.
type EnterpriseDBSavedSearchesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SavedSearchStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSavedSearchesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSavedSearchesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSearchContextsFunc describes the behavior when the
// SearchContexts method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSearchContextsFunc struct {
	defaultHook func() database.SearchContextsStore
	hooks       []func() database.SearchContextsStore
	history     []EnterpriseDBSearchContextsFuncCall
	mutex       sync.Mutex
}

// SearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SearchContexts() database.SearchContextsStore {
	r0 := m.SearchContextsFunc.nextHook()()
	m.SearchContextsFunc.appendCall(EnterpriseDBSearchContextsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SearchContexts
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBSearchContextsFunc) SetDefaultHook(hook func() database.SearchContextsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SearchContexts method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBSearchContextsFunc) PushHook(hook func() database.SearchContextsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSearchContextsFunc) SetDefaultReturn(r0 database.SearchContextsStore) {
	f.SetDefaultHook(func() database.SearchContextsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSearchContextsFunc) PushReturn(r0 database.SearchContextsStore) {
	f.PushHook(func() database.SearchContextsStore {
		return r0
	})
}

func (f *EnterpriseDBSearchContextsFunc) nextHook() func() database.SearchContextsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSearchContextsFunc) appendCall(r0 EnterpriseDBSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSearchContextsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSearchContextsFunc) History() []EnterpriseDBSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSearchContextsFuncCall is an object that describes an
// invocation of method SearchContexts on an instance of MockEnterpriseDB.
type EnterpriseDBSearchContextsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SearchContextsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSecurityEventLogsFunc describes the behavior when the
// SecurityEventLogs method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBSecurityEventLogsFunc struct {
	defaultHook func() database.SecurityEventLogsStore
	hooks       []func() database.SecurityEventLogsStore
	history     []EnterpriseDBSecurityEventLogsFuncCall
	mutex       sync.Mutex
}

// SecurityEventLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SecurityEventLogs() database.SecurityEventLogsStore {
	r0 := m.SecurityEventLogsFunc.nextHook()()
	m.SecurityEventLogsFunc.appendCall(EnterpriseDBSecurityEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SecurityEventLogs
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBSecurityEventLogsFunc) SetDefaultHook(hook func() database.SecurityEventLogsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SecurityEventLogs method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBSecurityEventLogsFunc) PushHook(hook func() database.SecurityEventLogsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSecurityEventLogsFunc) SetDefaultReturn(r0 database.SecurityEventLogsStore) {
	f.SetDefaultHook(func() database.SecurityEventLogsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSecurityEventLogsFunc) PushReturn(r0 database.SecurityEventLogsStore) {
	f.PushHook(func() database.SecurityEventLogsStore {
		return r0
	})
}

func (f *EnterpriseDBSecurityEventLogsFunc) nextHook() func() database.SecurityEventLogsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSecurityEventLogsFunc) appendCall(r0 EnterpriseDBSecurityEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSecurityEventLogsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBSecurityEventLogsFunc) History() []EnterpriseDBSecurityEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSecurityEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSecurityEventLogsFuncCall is an object that describes an
// invocation of method SecurityEventLogs on an instance of
// MockEnterpriseDB.
type EnterpriseDBSecurityEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SecurityEventLogsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSecurityEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSecurityEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSettingsFunc describes the behavior when the Settings method
// of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSettingsFunc struct {
	defaultHook func() database.SettingsStore
	hooks       []func() database.SettingsStore
	history     []EnterpriseDBSettingsFuncCall
	mutex       sync.Mutex
}

// Settings delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Settings() database.SettingsStore {
	r0 := m.SettingsFunc.nextHook()()
	m.SettingsFunc.appendCall(EnterpriseDBSettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Settings method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBSettingsFunc) SetDefaultHook(hook func() database.SettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Settings method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBSettingsFunc) PushHook(hook func() database.SettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSettingsFunc) SetDefaultReturn(r0 database.SettingsStore) {
	f.SetDefaultHook(func() database.SettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSettingsFunc) PushReturn(r0 database.SettingsStore) {
	f.PushHook(func() database.SettingsStore {
		return r0
	})
}

func (f *EnterpriseDBSettingsFunc) nextHook() func() database.SettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSettingsFunc) appendCall(r0 EnterpriseDBSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSettingsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSettingsFunc) History() []EnterpriseDBSettingsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSettingsFuncCall is an object that describes an invocation of
// method Settings on an instance of MockEnterpriseDB.
type EnterpriseDBSettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSubRepoPermsFunc describes the behavior when the SubRepoPerms
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSubRepoPermsFunc struct {
	defaultHook func() database.SubRepoPermsStore
	hooks       []func() database.SubRepoPermsStore
	history     []EnterpriseDBSubRepoPermsFuncCall
	mutex       sync.Mutex
}

// SubRepoPerms delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SubRepoPerms() database.SubRepoPermsStore {
	r0 := m.SubRepoPermsFunc.nextHook()()
	m.SubRepoPermsFunc.appendCall(EnterpriseDBSubRepoPermsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SubRepoPerms method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBSubRepoPermsFunc) SetDefaultHook(hook func() database.SubRepoPermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubRepoPerms method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBSubRepoPermsFunc) PushHook(hook func() database.SubRepoPermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSubRepoPermsFunc) SetDefaultReturn(r0 database.SubRepoPermsStore) {
	f.SetDefaultHook(func() database.SubRepoPermsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSubRepoPermsFunc) PushReturn(r0 database.SubRepoPermsStore) {
	f.PushHook(func() database.SubRepoPermsStore {
		return r0
	})
}

func (f *EnterpriseDBSubRepoPermsFunc) nextHook() func() database.SubRepoPermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSubRepoPermsFunc) appendCall(r0 EnterpriseDBSubRepoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSubRepoPermsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSubRepoPermsFunc) History() []EnterpriseDBSubRepoPermsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSubRepoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSubRepoPermsFuncCall is an object that describes an
// invocation of method SubRepoPerms on an instance of MockEnterpriseDB.
type EnterpriseDBSubRepoPermsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SubRepoPermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSubRepoPermsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSubRepoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBTemporarySettingsFunc describes the behavior when the
// TemporarySettings method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBTemporarySettingsFunc struct {
	defaultHook func() database.TemporarySettingsStore
	hooks       []func() database.TemporarySettingsStore
	history     []EnterpriseDBTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// TemporarySettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) TemporarySettings() database.TemporarySettingsStore {
	r0 := m.TemporarySettingsFunc.nextHook()()
	m.TemporarySettingsFunc.appendCall(EnterpriseDBTemporarySettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the TemporarySettings
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBTemporarySettingsFunc) SetDefaultHook(hook func() database.TemporarySettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TemporarySettings method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBTemporarySettingsFunc) PushHook(hook func() database.TemporarySettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBTemporarySettingsFunc) SetDefaultReturn(r0 database.TemporarySettingsStore) {
	f.SetDefaultHook(func() database.TemporarySettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBTemporarySettingsFunc) PushReturn(r0 database.TemporarySettingsStore) {
	f.PushHook(func() database.TemporarySettingsStore {
		return r0
	})
}

func (f *EnterpriseDBTemporarySettingsFunc) nextHook() func() database.TemporarySettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBTemporarySettingsFunc) appendCall(r0 EnterpriseDBTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBTemporarySettingsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBTemporarySettingsFunc) History() []EnterpriseDBTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBTemporarySettingsFuncCall is an object that describes an
// invocation of method TemporarySettings on an instance of
// MockEnterpriseDB.
type EnterpriseDBTemporarySettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.TemporarySettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBTransactFunc describes the behavior when the Transact method
// of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBTransactFunc struct {
	defaultHook func(context.Context) (database.DB, error)
	hooks       []func(context.Context) (database.DB, error)
	history     []EnterpriseDBTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Transact(v0 context.Context) (database.DB, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(EnterpriseDBTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBTransactFunc) SetDefaultHook(hook func(context.Context) (database.DB, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBTransactFunc) PushHook(hook func(context.Context) (database.DB, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBTransactFunc) SetDefaultReturn(r0 database.DB, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.DB, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBTransactFunc) PushReturn(r0 database.DB, r1 error) {
	f.PushHook(func(context.Context) (database.DB, error) {
		return r0, r1
	})
}

func (f *EnterpriseDBTransactFunc) nextHook() func(context.Context) (database.DB, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBTransactFunc) appendCall(r0 EnterpriseDBTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBTransactFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBTransactFunc) History() []EnterpriseDBTransactFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockEnterpriseDB.
type EnterpriseDBTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EnterpriseDBUserCredentialsFunc describes the behavior when the
// UserCredentials method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBUserCredentialsFunc struct {
	defaultHook func(encryption.Key) database.UserCredentialsStore
	hooks       []func(encryption.Key) database.UserCredentialsStore
	history     []EnterpriseDBUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserCredentials(v0 encryption.Key) database.UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()(v0)
	m.UserCredentialsFunc.appendCall(EnterpriseDBUserCredentialsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBUserCredentialsFunc) SetDefaultHook(hook func(encryption.Key) database.UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBUserCredentialsFunc) PushHook(hook func(encryption.Key) database.UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUserCredentialsFunc) SetDefaultReturn(r0 database.UserCredentialsStore) {
	f.SetDefaultHook(func(encryption.Key) database.UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUserCredentialsFunc) PushReturn(r0 database.UserCredentialsStore) {
	f.PushHook(func(encryption.Key) database.UserCredentialsStore {
		return r0
	})
}

func (f *EnterpriseDBUserCredentialsFunc) nextHook() func(encryption.Key) database.UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserCredentialsFunc) appendCall(r0 EnterpriseDBUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUserCredentialsFunc) History() []EnterpriseDBUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserCredentialsFuncCall is an object that describes an
// invocation of method UserCredentials on an instance of MockEnterpriseDB.
type EnterpriseDBUserCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserEmailsFunc describes the behavior when the UserEmails
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBUserEmailsFunc struct {
	defaultHook func() database.UserEmailsStore
	hooks       []func() database.UserEmailsStore
	history     []EnterpriseDBUserEmailsFuncCall
	mutex       sync.Mutex
}

// UserEmails delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserEmails() database.UserEmailsStore {
	r0 := m.UserEmailsFunc.nextHook()()
	m.UserEmailsFunc.appendCall(EnterpriseDBUserEmailsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserEmails method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBUserEmailsFunc) SetDefaultHook(hook func() database.UserEmailsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserEmails method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBUserEmailsFunc) PushHook(hook func() database.UserEmailsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUserEmailsFunc) SetDefaultReturn(r0 database.UserEmailsStore) {
	f.SetDefaultHook(func() database.UserEmailsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUserEmailsFunc) PushReturn(r0 database.UserEmailsStore) {
	f.PushHook(func() database.UserEmailsStore {
		return r0
	})
}

func (f *EnterpriseDBUserEmailsFunc) nextHook() func() database.UserEmailsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserEmailsFunc) appendCall(r0 EnterpriseDBUserEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserEmailsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUserEmailsFunc) History() []EnterpriseDBUserEmailsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserEmailsFuncCall is an object that describes an invocation
// of method UserEmails on an instance of MockEnterpriseDB.
type EnterpriseDBUserEmailsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserEmailsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserEmailsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserExternalAccountsFunc describes the behavior when the
// UserExternalAccounts method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBUserExternalAccountsFunc struct {
	defaultHook func() database.UserExternalAccountsStore
	hooks       []func() database.UserExternalAccountsStore
	history     []EnterpriseDBUserExternalAccountsFuncCall
	mutex       sync.Mutex
}

// UserExternalAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserExternalAccounts() database.UserExternalAccountsStore {
	r0 := m.UserExternalAccountsFunc.nextHook()()
	m.UserExternalAccountsFunc.appendCall(EnterpriseDBUserExternalAccountsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserExternalAccounts
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBUserExternalAccountsFunc) SetDefaultHook(hook func() database.UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserExternalAccounts method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBUserExternalAccountsFunc) PushHook(hook func() database.UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUserExternalAccountsFunc) SetDefaultReturn(r0 database.UserExternalAccountsStore) {
	f.SetDefaultHook(func() database.UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUserExternalAccountsFunc) PushReturn(r0 database.UserExternalAccountsStore) {
	f.PushHook(func() database.UserExternalAccountsStore {
		return r0
	})
}

func (f *EnterpriseDBUserExternalAccountsFunc) nextHook() func() database.UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserExternalAccountsFunc) appendCall(r0 EnterpriseDBUserExternalAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserExternalAccountsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBUserExternalAccountsFunc) History() []EnterpriseDBUserExternalAccountsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserExternalAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserExternalAccountsFuncCall is an object that describes an
// invocation of method UserExternalAccounts on an instance of
// MockEnterpriseDB.
type EnterpriseDBUserExternalAccountsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserExternalAccountsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserExternalAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserPublicReposFunc describes the behavior when the
// UserPublicRepos method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBUserPublicReposFunc struct {
	defaultHook func() database.UserPublicRepoStore
	hooks       []func() database.UserPublicRepoStore
	history     []EnterpriseDBUserPublicReposFuncCall
	mutex       sync.Mutex
}

// UserPublicRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserPublicRepos() database.UserPublicRepoStore {
	r0 := m.UserPublicReposFunc.nextHook()()
	m.UserPublicReposFunc.appendCall(EnterpriseDBUserPublicReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserPublicRepos
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBUserPublicReposFunc) SetDefaultHook(hook func() database.UserPublicRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserPublicRepos method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBUserPublicReposFunc) PushHook(hook func() database.UserPublicRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUserPublicReposFunc) SetDefaultReturn(r0 database.UserPublicRepoStore) {
	f.SetDefaultHook(func() database.UserPublicRepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUserPublicReposFunc) PushReturn(r0 database.UserPublicRepoStore) {
	f.PushHook(func() database.UserPublicRepoStore {
		return r0
	})
}

func (f *EnterpriseDBUserPublicReposFunc) nextHook() func() database.UserPublicRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserPublicReposFunc) appendCall(r0 EnterpriseDBUserPublicReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserPublicReposFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUserPublicReposFunc) History() []EnterpriseDBUserPublicReposFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserPublicReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserPublicReposFuncCall is an object that describes an
// invocation of method UserPublicRepos on an instance of MockEnterpriseDB.
type EnterpriseDBUserPublicReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserPublicRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserPublicReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserPublicReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUsersFunc describes the behavior when the Users method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBUsersFunc struct {
	defaultHook func() database.UserStore
	hooks       []func() database.UserStore
	history     []EnterpriseDBUsersFuncCall
	mutex       sync.Mutex
}

// Users delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Users() database.UserStore {
	r0 := m.UsersFunc.nextHook()()
	m.UsersFunc.appendCall(EnterpriseDBUsersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Users method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBUsersFunc) SetDefaultHook(hook func() database.UserStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Users method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBUsersFunc) PushHook(hook func() database.UserStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUsersFunc) SetDefaultReturn(r0 database.UserStore) {
	f.SetDefaultHook(func() database.UserStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUsersFunc) PushReturn(r0 database.UserStore) {
	f.PushHook(func() database.UserStore {
		return r0
	})
}

func (f *EnterpriseDBUsersFunc) nextHook() func() database.UserStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUsersFunc) appendCall(r0 EnterpriseDBUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUsersFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUsersFunc) History() []EnterpriseDBUsersFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUsersFuncCall is an object that describes an invocation of
// method Users on an instance of MockEnterpriseDB.
type EnterpriseDBUsersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUsersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBWebhookLogsFunc describes the behavior when the WebhookLogs
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBWebhookLogsFunc struct {
	defaultHook func(encryption.Key) database.WebhookLogStore
	hooks       []func(encryption.Key) database.WebhookLogStore
	history     []EnterpriseDBWebhookLogsFuncCall
	mutex       sync.Mutex
}

// WebhookLogs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) WebhookLogs(v0 encryption.Key) database.WebhookLogStore {
	r0 := m.WebhookLogsFunc.nextHook()(v0)
	m.WebhookLogsFunc.appendCall(EnterpriseDBWebhookLogsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WebhookLogs method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBWebhookLogsFunc) SetDefaultHook(hook func(encryption.Key) database.WebhookLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WebhookLogs method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBWebhookLogsFunc) PushHook(hook func(encryption.Key) database.WebhookLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBWebhookLogsFunc) SetDefaultReturn(r0 database.WebhookLogStore) {
	f.SetDefaultHook(func(encryption.Key) database.WebhookLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBWebhookLogsFunc) PushReturn(r0 database.WebhookLogStore) {
	f.PushHook(func(encryption.Key) database.WebhookLogStore {
		return r0
	})
}

func (f *EnterpriseDBWebhookLogsFunc) nextHook() func(encryption.Key) database.WebhookLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBWebhookLogsFunc) appendCall(r0 EnterpriseDBWebhookLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBWebhookLogsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBWebhookLogsFunc) History() []EnterpriseDBWebhookLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBWebhookLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBWebhookLogsFuncCall is an object that describes an invocation
// of method WebhookLogs on an instance of MockEnterpriseDB.
type EnterpriseDBWebhookLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.WebhookLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBWebhookLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBWebhookLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockPermsStore is a mock implementation of the PermsStore interface (from
// the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/database) used for
// unit testing.
type MockPermsStore struct {
	// DeleteAllUserPendingPermissionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteAllUserPendingPermissions.
	DeleteAllUserPendingPermissionsFunc *PermsStoreDeleteAllUserPendingPermissionsFunc
	// DeleteAllUserPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteAllUserPermissions.
	DeleteAllUserPermissionsFunc *PermsStoreDeleteAllUserPermissionsFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *PermsStoreDoneFunc
	// GetUserIDsByExternalAccountsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUserIDsByExternalAccounts.
	GetUserIDsByExternalAccountsFunc *PermsStoreGetUserIDsByExternalAccountsFunc
	// GrantPendingPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method GrantPendingPermissions.
	GrantPendingPermissionsFunc *PermsStoreGrantPendingPermissionsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *PermsStoreHandleFunc
	// ListExternalAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method ListExternalAccounts.
	ListExternalAccountsFunc *PermsStoreListExternalAccountsFunc
	// ListPendingUsersFunc is an instance of a mock function object
	// controlling the behavior of the method ListPendingUsers.
	ListPendingUsersFunc *PermsStoreListPendingUsersFunc
	// LoadRepoPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method LoadRepoPermissions.
	LoadRepoPermissionsFunc *PermsStoreLoadRepoPermissionsFunc
	// LoadUserPendingPermissionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// LoadUserPendingPermissions.
	LoadUserPendingPermissionsFunc *PermsStoreLoadUserPendingPermissionsFunc
	// LoadUserPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method LoadUserPermissions.
	LoadUserPermissionsFunc *PermsStoreLoadUserPermissionsFunc
	// MetricsFunc is an instance of a mock function object controlling the
	// behavior of the method Metrics.
	MetricsFunc *PermsStoreMetricsFunc
	// RepoIDsWithNoPermsFunc is an instance of a mock function object
	// controlling the behavior of the method RepoIDsWithNoPerms.
	RepoIDsWithNoPermsFunc *PermsStoreRepoIDsWithNoPermsFunc
	// ReposIDsWithOldestPermsFunc is an instance of a mock function object
	// controlling the behavior of the method ReposIDsWithOldestPerms.
	ReposIDsWithOldestPermsFunc *PermsStoreReposIDsWithOldestPermsFunc
	// SetRepoPendingPermissionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetRepoPendingPermissions.
	SetRepoPendingPermissionsFunc *PermsStoreSetRepoPendingPermissionsFunc
	// SetRepoPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method SetRepoPermissions.
	SetRepoPermissionsFunc *PermsStoreSetRepoPermissionsFunc
	// SetRepoPermissionsUnrestrictedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetRepoPermissionsUnrestricted.
	SetRepoPermissionsUnrestrictedFunc *PermsStoreSetRepoPermissionsUnrestrictedFunc
	// SetUserPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method SetUserPermissions.
	SetUserPermissionsFunc *PermsStoreSetUserPermissionsFunc
	// TouchRepoPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method TouchRepoPermissions.
	TouchRepoPermissionsFunc *PermsStoreTouchRepoPermissionsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *PermsStoreTransactFunc
	// UserIDsWithNoPermsFunc is an instance of a mock function object
	// controlling the behavior of the method UserIDsWithNoPerms.
	UserIDsWithNoPermsFunc *PermsStoreUserIDsWithNoPermsFunc
	// UserIDsWithOldestPermsFunc is an instance of a mock function object
	// controlling the behavior of the method UserIDsWithOldestPerms.
	UserIDsWithOldestPermsFunc *PermsStoreUserIDsWithOldestPermsFunc
	// UserIDsWithOutdatedPermsFunc is an instance of a mock function object
	// controlling the behavior of the method UserIDsWithOutdatedPerms.
	UserIDsWithOutdatedPermsFunc *PermsStoreUserIDsWithOutdatedPermsFunc
	// UserIsMemberOfOrgHasCodeHostConnectionFunc is an instance of a mock
	// function object controlling the behavior of the method
	// UserIsMemberOfOrgHasCodeHostConnection.
	UserIsMemberOfOrgHasCodeHostConnectionFunc *PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *PermsStoreWithFunc
}

// NewMockPermsStore creates a new mock of the PermsStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockPermsStore() *MockPermsStore {
	return &MockPermsStore{
		DeleteAllUserPendingPermissionsFunc: &PermsStoreDeleteAllUserPendingPermissionsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts) (r0 error) {
				return
			},
		},
		DeleteAllUserPermissionsFunc: &PermsStoreDeleteAllUserPermissionsFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DoneFunc: &PermsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetUserIDsByExternalAccountsFunc: &PermsStoreGetUserIDsByExternalAccountsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts) (r0 map[string]int32, r1 error) {
				return
			},
		},
		GrantPendingPermissionsFunc: &PermsStoreGrantPendingPermissionsFunc{
			defaultHook: func(context.Context, int32, *authz.UserPendingPermissions) (r0 error) {
				return
			},
		},
		HandleFunc: &PermsStoreHandleFunc{
			defaultHook: func() (r0 *basestore.TransactableHandle) {
				return
			},
		},
		ListExternalAccountsFunc: &PermsStoreListExternalAccountsFunc{
			defaultHook: func(context.Context, int32) (r0 []*extsvc.Account, r1 error) {
				return
			},
		},
		ListPendingUsersFunc: &PermsStoreListPendingUsersFunc{
			defaultHook: func(context.Context, string, string) (r0 []string, r1 error) {
				return
			},
		},
		LoadRepoPermissionsFunc: &PermsStoreLoadRepoPermissionsFunc{
			defaultHook: func(context.Context, *authz.RepoPermissions) (r0 error) {
				return
			},
		},
		LoadUserPendingPermissionsFunc: &PermsStoreLoadUserPendingPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserPendingPermissions) (r0 error) {
				return
			},
		},
		LoadUserPermissionsFunc: &PermsStoreLoadUserPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserPermissions) (r0 error) {
				return
			},
		},
		MetricsFunc: &PermsStoreMetricsFunc{
			defaultHook: func(context.Context, time.Duration) (r0 *PermsMetrics, r1 error) {
				return
			},
		},
		RepoIDsWithNoPermsFunc: &PermsStoreRepoIDsWithNoPermsFunc{
			defaultHook: func(context.Context) (r0 []api.RepoID, r1 error) {
				return
			},
		},
		ReposIDsWithOldestPermsFunc: &PermsStoreReposIDsWithOldestPermsFunc{
			defaultHook: func(context.Context, int, time.Duration) (r0 map[api.RepoID]time.Time, r1 error) {
				return
			},
		},
		SetRepoPendingPermissionsFunc: &PermsStoreSetRepoPendingPermissionsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) (r0 error) {
				return
			},
		},
		SetRepoPermissionsFunc: &PermsStoreSetRepoPermissionsFunc{
			defaultHook: func(context.Context, *authz.RepoPermissions) (r0 error) {
				return
			},
		},
		SetRepoPermissionsUnrestrictedFunc: &PermsStoreSetRepoPermissionsUnrestrictedFunc{
			defaultHook: func(context.Context, []int32, bool) (r0 error) {
				return
			},
		},
		SetUserPermissionsFunc: &PermsStoreSetUserPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserPermissions) (r0 error) {
				return
			},
		},
		TouchRepoPermissionsFunc: &PermsStoreTouchRepoPermissionsFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		TransactFunc: &PermsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 PermsStore, r1 error) {
				return
			},
		},
		UserIDsWithNoPermsFunc: &PermsStoreUserIDsWithNoPermsFunc{
			defaultHook: func(context.Context) (r0 []int32, r1 error) {
				return
			},
		},
		UserIDsWithOldestPermsFunc: &PermsStoreUserIDsWithOldestPermsFunc{
			defaultHook: func(context.Context, int, time.Duration) (r0 map[int32]time.Time, r1 error) {
				return
			},
		},
		UserIDsWithOutdatedPermsFunc: &PermsStoreUserIDsWithOutdatedPermsFunc{
			defaultHook: func(context.Context) (r0 map[int32]time.Time, r1 error) {
				return
			},
		},
		UserIsMemberOfOrgHasCodeHostConnectionFunc: &PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc{
			defaultHook: func(context.Context, int32) (r0 bool, r1 error) {
				return
			},
		},
		WithFunc: &PermsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 PermsStore) {
				return
			},
		},
	}
}

// NewStrictMockPermsStore creates a new mock of the PermsStore interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockPermsStore() *MockPermsStore {
	return &MockPermsStore{
		DeleteAllUserPendingPermissionsFunc: &PermsStoreDeleteAllUserPendingPermissionsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts) error {
				panic("unexpected invocation of MockPermsStore.DeleteAllUserPendingPermissions")
			},
		},
		DeleteAllUserPermissionsFunc: &PermsStoreDeleteAllUserPermissionsFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockPermsStore.DeleteAllUserPermissions")
			},
		},
		DoneFunc: &PermsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockPermsStore.Done")
			},
		},
		GetUserIDsByExternalAccountsFunc: &PermsStoreGetUserIDsByExternalAccountsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts) (map[string]int32, error) {
				panic("unexpected invocation of MockPermsStore.GetUserIDsByExternalAccounts")
			},
		},
		GrantPendingPermissionsFunc: &PermsStoreGrantPendingPermissionsFunc{
			defaultHook: func(context.Context, int32, *authz.UserPendingPermissions) error {
				panic("unexpected invocation of MockPermsStore.GrantPendingPermissions")
			},
		},
		HandleFunc: &PermsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockPermsStore.Handle")
			},
		},
		ListExternalAccountsFunc: &PermsStoreListExternalAccountsFunc{
			defaultHook: func(context.Context, int32) ([]*extsvc.Account, error) {
				panic("unexpected invocation of MockPermsStore.ListExternalAccounts")
			},
		},
		ListPendingUsersFunc: &PermsStoreListPendingUsersFunc{
			defaultHook: func(context.Context, string, string) ([]string, error) {
				panic("unexpected invocation of MockPermsStore.ListPendingUsers")
			},
		},
		LoadRepoPermissionsFunc: &PermsStoreLoadRepoPermissionsFunc{
			defaultHook: func(context.Context, *authz.RepoPermissions) error {
				panic("unexpected invocation of MockPermsStore.LoadRepoPermissions")
			},
		},
		LoadUserPendingPermissionsFunc: &PermsStoreLoadUserPendingPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserPendingPermissions) error {
				panic("unexpected invocation of MockPermsStore.LoadUserPendingPermissions")
			},
		},
		LoadUserPermissionsFunc: &PermsStoreLoadUserPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserPermissions) error {
				panic("unexpected invocation of MockPermsStore.LoadUserPermissions")
			},
		},
		MetricsFunc: &PermsStoreMetricsFunc{
			defaultHook: func(context.Context, time.Duration) (*PermsMetrics, error) {
				panic("unexpected invocation of MockPermsStore.Metrics")
			},
		},
		RepoIDsWithNoPermsFunc: &PermsStoreRepoIDsWithNoPermsFunc{
			defaultHook: func(context.Context) ([]api.RepoID, error) {
				panic("unexpected invocation of MockPermsStore.RepoIDsWithNoPerms")
			},
		},
		ReposIDsWithOldestPermsFunc: &PermsStoreReposIDsWithOldestPermsFunc{
			defaultHook: func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error) {
				panic("unexpected invocation of MockPermsStore.ReposIDsWithOldestPerms")
			},
		},
		SetRepoPendingPermissionsFunc: &PermsStoreSetRepoPendingPermissionsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error {
				panic("unexpected invocation of MockPermsStore.SetRepoPendingPermissions")
			},
		},
		SetRepoPermissionsFunc: &PermsStoreSetRepoPermissionsFunc{
			defaultHook: func(context.Context, *authz.RepoPermissions) error {
				panic("unexpected invocation of MockPermsStore.SetRepoPermissions")
			},
		},
		SetRepoPermissionsUnrestrictedFunc: &PermsStoreSetRepoPermissionsUnrestrictedFunc{
			defaultHook: func(context.Context, []int32, bool) error {
				panic("unexpected invocation of MockPermsStore.SetRepoPermissionsUnrestricted")
			},
		},
		SetUserPermissionsFunc: &PermsStoreSetUserPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserPermissions) error {
				panic("unexpected invocation of MockPermsStore.SetUserPermissions")
			},
		},
		TouchRepoPermissionsFunc: &PermsStoreTouchRepoPermissionsFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockPermsStore.TouchRepoPermissions")
			},
		},
		TransactFunc: &PermsStoreTransactFunc{
			defaultHook: func(context.Context) (PermsStore, error) {
				panic("unexpected invocation of MockPermsStore.Transact")
			},
		},
		UserIDsWithNoPermsFunc: &PermsStoreUserIDsWithNoPermsFunc{
			defaultHook: func(context.Context) ([]int32, error) {
				panic("unexpected invocation of MockPermsStore.UserIDsWithNoPerms")
			},
		},
		UserIDsWithOldestPermsFunc: &PermsStoreUserIDsWithOldestPermsFunc{
			defaultHook: func(context.Context, int, time.Duration) (map[int32]time.Time, error) {
				panic("unexpected invocation of MockPermsStore.UserIDsWithOldestPerms")
			},
		},
		UserIDsWithOutdatedPermsFunc: &PermsStoreUserIDsWithOutdatedPermsFunc{
			defaultHook: func(context.Context) (map[int32]time.Time, error) {
				panic("unexpected invocation of MockPermsStore.UserIDsWithOutdatedPerms")
			},
		},
		UserIsMemberOfOrgHasCodeHostConnectionFunc: &PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc{
			defaultHook: func(context.Context, int32) (bool, error) {
				panic("unexpected invocation of MockPermsStore.UserIsMemberOfOrgHasCodeHostConnection")
			},
		},
		WithFunc: &PermsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) PermsStore {
				panic("unexpected invocation of MockPermsStore.With")
			},
		},
	}
}

// NewMockPermsStoreFrom creates a new mock of the MockPermsStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockPermsStoreFrom(i PermsStore) *MockPermsStore {
	return &MockPermsStore{
		DeleteAllUserPendingPermissionsFunc: &PermsStoreDeleteAllUserPendingPermissionsFunc{
			defaultHook: i.DeleteAllUserPendingPermissions,
		},
		DeleteAllUserPermissionsFunc: &PermsStoreDeleteAllUserPermissionsFunc{
			defaultHook: i.DeleteAllUserPermissions,
		},
		DoneFunc: &PermsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetUserIDsByExternalAccountsFunc: &PermsStoreGetUserIDsByExternalAccountsFunc{
			defaultHook: i.GetUserIDsByExternalAccounts,
		},
		GrantPendingPermissionsFunc: &PermsStoreGrantPendingPermissionsFunc{
			defaultHook: i.GrantPendingPermissions,
		},
		HandleFunc: &PermsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListExternalAccountsFunc: &PermsStoreListExternalAccountsFunc{
			defaultHook: i.ListExternalAccounts,
		},
		ListPendingUsersFunc: &PermsStoreListPendingUsersFunc{
			defaultHook: i.ListPendingUsers,
		},
		LoadRepoPermissionsFunc: &PermsStoreLoadRepoPermissionsFunc{
			defaultHook: i.LoadRepoPermissions,
		},
		LoadUserPendingPermissionsFunc: &PermsStoreLoadUserPendingPermissionsFunc{
			defaultHook: i.LoadUserPendingPermissions,
		},
		LoadUserPermissionsFunc: &PermsStoreLoadUserPermissionsFunc{
			defaultHook: i.LoadUserPermissions,
		},
		MetricsFunc: &PermsStoreMetricsFunc{
			defaultHook: i.Metrics,
		},
		RepoIDsWithNoPermsFunc: &PermsStoreRepoIDsWithNoPermsFunc{
			defaultHook: i.RepoIDsWithNoPerms,
		},
		ReposIDsWithOldestPermsFunc: &PermsStoreReposIDsWithOldestPermsFunc{
			defaultHook: i.ReposIDsWithOldestPerms,
		},
		SetRepoPendingPermissionsFunc: &PermsStoreSetRepoPendingPermissionsFunc{
			defaultHook: i.SetRepoPendingPermissions,
		},
		SetRepoPermissionsFunc: &PermsStoreSetRepoPermissionsFunc{
			defaultHook: i.SetRepoPermissions,
		},
		SetRepoPermissionsUnrestrictedFunc: &PermsStoreSetRepoPermissionsUnrestrictedFunc{
			defaultHook: i.SetRepoPermissionsUnrestricted,
		},
		SetUserPermissionsFunc: &PermsStoreSetUserPermissionsFunc{
			defaultHook: i.SetUserPermissions,
		},
		TouchRepoPermissionsFunc: &PermsStoreTouchRepoPermissionsFunc{
			defaultHook: i.TouchRepoPermissions,
		},
		TransactFunc: &PermsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UserIDsWithNoPermsFunc: &PermsStoreUserIDsWithNoPermsFunc{
			defaultHook: i.UserIDsWithNoPerms,
		},
		UserIDsWithOldestPermsFunc: &PermsStoreUserIDsWithOldestPermsFunc{
			defaultHook: i.UserIDsWithOldestPerms,
		},
		UserIDsWithOutdatedPermsFunc: &PermsStoreUserIDsWithOutdatedPermsFunc{
			defaultHook: i.UserIDsWithOutdatedPerms,
		},
		UserIsMemberOfOrgHasCodeHostConnectionFunc: &PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc{
			defaultHook: i.UserIsMemberOfOrgHasCodeHostConnection,
		},
		WithFunc: &PermsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// PermsStoreDeleteAllUserPendingPermissionsFunc describes the behavior when
// the DeleteAllUserPendingPermissions method of the parent MockPermsStore
// instance is invoked.
type PermsStoreDeleteAllUserPendingPermissionsFunc struct {
	defaultHook func(context.Context, *extsvc.Accounts) error
	hooks       []func(context.Context, *extsvc.Accounts) error
	history     []PermsStoreDeleteAllUserPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// DeleteAllUserPendingPermissions delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) DeleteAllUserPendingPermissions(v0 context.Context, v1 *extsvc.Accounts) error {
	r0 := m.DeleteAllUserPendingPermissionsFunc.nextHook()(v0, v1)
	m.DeleteAllUserPendingPermissionsFunc.appendCall(PermsStoreDeleteAllUserPendingPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteAllUserPendingPermissions method of the parent MockPermsStore
// instance is invoked and the hook queue is empty.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, *extsvc.Accounts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteAllUserPendingPermissions method of the parent MockPermsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) PushHook(hook func(context.Context, *extsvc.Accounts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *extsvc.Accounts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *extsvc.Accounts) error {
		return r0
	})
}

func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) nextHook() func(context.Context, *extsvc.Accounts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) appendCall(r0 PermsStoreDeleteAllUserPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreDeleteAllUserPendingPermissionsFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) History() []PermsStoreDeleteAllUserPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreDeleteAllUserPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreDeleteAllUserPendingPermissionsFuncCall is an object that
// describes an invocation of method DeleteAllUserPendingPermissions on an
// instance of MockPermsStore.
type PermsStoreDeleteAllUserPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *extsvc.Accounts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreDeleteAllUserPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreDeleteAllUserPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreDeleteAllUserPermissionsFunc describes the behavior when the
// DeleteAllUserPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreDeleteAllUserPermissionsFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []PermsStoreDeleteAllUserPermissionsFuncCall
	mutex       sync.Mutex
}

// DeleteAllUserPermissions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) DeleteAllUserPermissions(v0 context.Context, v1 int32) error {
	r0 := m.DeleteAllUserPermissionsFunc.nextHook()(v0, v1)
	m.DeleteAllUserPermissionsFunc.appendCall(PermsStoreDeleteAllUserPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteAllUserPermissions method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreDeleteAllUserPermissionsFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteAllUserPermissions method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreDeleteAllUserPermissionsFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreDeleteAllUserPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreDeleteAllUserPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *PermsStoreDeleteAllUserPermissionsFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreDeleteAllUserPermissionsFunc) appendCall(r0 PermsStoreDeleteAllUserPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreDeleteAllUserPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreDeleteAllUserPermissionsFunc) History() []PermsStoreDeleteAllUserPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreDeleteAllUserPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreDeleteAllUserPermissionsFuncCall is an object that describes an
// invocation of method DeleteAllUserPermissions on an instance of
// MockPermsStore.
type PermsStoreDeleteAllUserPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreDeleteAllUserPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreDeleteAllUserPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreDoneFunc describes the behavior when the Done method of the
// parent MockPermsStore instance is invoked.
type PermsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []PermsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(PermsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockPermsStore instance is invoked and the hook queue is empty.
func (f *PermsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockPermsStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *PermsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *PermsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreDoneFunc) appendCall(r0 PermsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *PermsStoreDoneFunc) History() []PermsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockPermsStore.
type PermsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreGetUserIDsByExternalAccountsFunc describes the behavior when
// the GetUserIDsByExternalAccounts method of the parent MockPermsStore
// instance is invoked.
type PermsStoreGetUserIDsByExternalAccountsFunc struct {
	defaultHook func(context.Context, *extsvc.Accounts) (map[string]int32, error)
	hooks       []func(context.Context, *extsvc.Accounts) (map[string]int32, error)
	history     []PermsStoreGetUserIDsByExternalAccountsFuncCall
	mutex       sync.Mutex
}

// GetUserIDsByExternalAccounts delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) GetUserIDsByExternalAccounts(v0 context.Context, v1 *extsvc.Accounts) (map[string]int32, error) {
	r0, r1 := m.GetUserIDsByExternalAccountsFunc.nextHook()(v0, v1)
	m.GetUserIDsByExternalAccountsFunc.appendCall(PermsStoreGetUserIDsByExternalAccountsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetUserIDsByExternalAccounts method of the parent MockPermsStore instance
// is invoked and the hook queue is empty.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) SetDefaultHook(hook func(context.Context, *extsvc.Accounts) (map[string]int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserIDsByExternalAccounts method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) PushHook(hook func(context.Context, *extsvc.Accounts) (map[string]int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) SetDefaultReturn(r0 map[string]int32, r1 error) {
	f.SetDefaultHook(func(context.Context, *extsvc.Accounts) (map[string]int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) PushReturn(r0 map[string]int32, r1 error) {
	f.PushHook(func(context.Context, *extsvc.Accounts) (map[string]int32, error) {
		return r0, r1
	})
}

func (f *PermsStoreGetUserIDsByExternalAccountsFunc) nextHook() func(context.Context, *extsvc.Accounts) (map[string]int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreGetUserIDsByExternalAccountsFunc) appendCall(r0 PermsStoreGetUserIDsByExternalAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreGetUserIDsByExternalAccountsFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) History() []PermsStoreGetUserIDsByExternalAccountsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreGetUserIDsByExternalAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreGetUserIDsByExternalAccountsFuncCall is an object that
// describes an invocation of method GetUserIDsByExternalAccounts on an
// instance of MockPermsStore.
type PermsStoreGetUserIDsByExternalAccountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *extsvc.Accounts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreGetUserIDsByExternalAccountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreGetUserIDsByExternalAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreGrantPendingPermissionsFunc describes the behavior when the
// GrantPendingPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreGrantPendingPermissionsFunc struct {
	defaultHook func(context.Context, int32, *authz.UserPendingPermissions) error
	hooks       []func(context.Context, int32, *authz.UserPendingPermissions) error
	history     []PermsStoreGrantPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// GrantPendingPermissions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) GrantPendingPermissions(v0 context.Context, v1 int32, v2 *authz.UserPendingPermissions) error {
	r0 := m.GrantPendingPermissionsFunc.nextHook()(v0, v1, v2)
	m.GrantPendingPermissionsFunc.appendCall(PermsStoreGrantPendingPermissionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GrantPendingPermissions method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreGrantPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, int32, *authz.UserPendingPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GrantPendingPermissions method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreGrantPendingPermissionsFunc) PushHook(hook func(context.Context, int32, *authz.UserPendingPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreGrantPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, *authz.UserPendingPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreGrantPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, *authz.UserPendingPermissions) error {
		return r0
	})
}

func (f *PermsStoreGrantPendingPermissionsFunc) nextHook() func(context.Context, int32, *authz.UserPendingPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreGrantPendingPermissionsFunc) appendCall(r0 PermsStoreGrantPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreGrantPendingPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreGrantPendingPermissionsFunc) History() []PermsStoreGrantPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreGrantPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreGrantPendingPermissionsFuncCall is an object that describes an
// invocation of method GrantPendingPermissions on an instance of
// MockPermsStore.
type PermsStoreGrantPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *authz.UserPendingPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreGrantPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreGrantPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreHandleFunc describes the behavior when the Handle method of the
// parent MockPermsStore instance is invoked.
type PermsStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []PermsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(PermsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockPermsStore instance is invoked and the hook queue is empty.
func (f *PermsStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockPermsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermsStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *PermsStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreHandleFunc) appendCall(r0 PermsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *PermsStoreHandleFunc) History() []PermsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockPermsStore.
type PermsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreListExternalAccountsFunc describes the behavior when the
// ListExternalAccounts method of the parent MockPermsStore instance is
// invoked.
type PermsStoreListExternalAccountsFunc struct {
	defaultHook func(context.Context, int32) ([]*extsvc.Account, error)
	hooks       []func(context.Context, int32) ([]*extsvc.Account, error)
	history     []PermsStoreListExternalAccountsFuncCall
	mutex       sync.Mutex
}

// ListExternalAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) ListExternalAccounts(v0 context.Context, v1 int32) ([]*extsvc.Account, error) {
	r0, r1 := m.ListExternalAccountsFunc.nextHook()(v0, v1)
	m.ListExternalAccountsFunc.appendCall(PermsStoreListExternalAccountsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListExternalAccounts
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreListExternalAccountsFunc) SetDefaultHook(hook func(context.Context, int32) ([]*extsvc.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListExternalAccounts method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreListExternalAccountsFunc) PushHook(hook func(context.Context, int32) ([]*extsvc.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreListExternalAccountsFunc) SetDefaultReturn(r0 []*extsvc.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreListExternalAccountsFunc) PushReturn(r0 []*extsvc.Account, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

func (f *PermsStoreListExternalAccountsFunc) nextHook() func(context.Context, int32) ([]*extsvc.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreListExternalAccountsFunc) appendCall(r0 PermsStoreListExternalAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreListExternalAccountsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreListExternalAccountsFunc) History() []PermsStoreListExternalAccountsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreListExternalAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreListExternalAccountsFuncCall is an object that describes an
// invocation of method ListExternalAccounts on an instance of
// MockPermsStore.
type PermsStoreListExternalAccountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*extsvc.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreListExternalAccountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreListExternalAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreListPendingUsersFunc describes the behavior when the
// ListPendingUsers method of the parent MockPermsStore instance is invoked.
type PermsStoreListPendingUsersFunc struct {
	defaultHook func(context.Context, string, string) ([]string, error)
	hooks       []func(context.Context, string, string) ([]string, error)
	history     []PermsStoreListPendingUsersFuncCall
	mutex       sync.Mutex
}

// ListPendingUsers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) ListPendingUsers(v0 context.Context, v1 string, v2 string) ([]string, error) {
	r0, r1 := m.ListPendingUsersFunc.nextHook()(v0, v1, v2)
	m.ListPendingUsersFunc.appendCall(PermsStoreListPendingUsersFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListPendingUsers
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreListPendingUsersFunc) SetDefaultHook(hook func(context.Context, string, string) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListPendingUsers method of the parent MockPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PermsStoreListPendingUsersFunc) PushHook(hook func(context.Context, string, string) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreListPendingUsersFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreListPendingUsersFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, string, string) ([]string, error) {
		return r0, r1
	})
}

func (f *PermsStoreListPendingUsersFunc) nextHook() func(context.Context, string, string) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreListPendingUsersFunc) appendCall(r0 PermsStoreListPendingUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreListPendingUsersFuncCall objects
// describing the invocations of this function.
func (f *PermsStoreListPendingUsersFunc) History() []PermsStoreListPendingUsersFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreListPendingUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreListPendingUsersFuncCall is an object that describes an
// invocation of method ListPendingUsers on an instance of MockPermsStore.
type PermsStoreListPendingUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreListPendingUsersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreListPendingUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreLoadRepoPermissionsFunc describes the behavior when the
// LoadRepoPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreLoadRepoPermissionsFunc struct {
	defaultHook func(context.Context, *authz.RepoPermissions) error
	hooks       []func(context.Context, *authz.RepoPermissions) error
	history     []PermsStoreLoadRepoPermissionsFuncCall
	mutex       sync.Mutex
}

// LoadRepoPermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) LoadRepoPermissions(v0 context.Context, v1 *authz.RepoPermissions) error {
	r0 := m.LoadRepoPermissionsFunc.nextHook()(v0, v1)
	m.LoadRepoPermissionsFunc.appendCall(PermsStoreLoadRepoPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadRepoPermissions
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreLoadRepoPermissionsFunc) SetDefaultHook(hook func(context.Context, *authz.RepoPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadRepoPermissions method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreLoadRepoPermissionsFunc) PushHook(hook func(context.Context, *authz.RepoPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreLoadRepoPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *authz.RepoPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreLoadRepoPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *authz.RepoPermissions) error {
		return r0
	})
}

func (f *PermsStoreLoadRepoPermissionsFunc) nextHook() func(context.Context, *authz.RepoPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreLoadRepoPermissionsFunc) appendCall(r0 PermsStoreLoadRepoPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreLoadRepoPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreLoadRepoPermissionsFunc) History() []PermsStoreLoadRepoPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreLoadRepoPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreLoadRepoPermissionsFuncCall is an object that describes an
// invocation of method LoadRepoPermissions on an instance of
// MockPermsStore.
type PermsStoreLoadRepoPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *authz.RepoPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreLoadRepoPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreLoadRepoPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreLoadUserPendingPermissionsFunc describes the behavior when the
// LoadUserPendingPermissions method of the parent MockPermsStore instance
// is invoked.
type PermsStoreLoadUserPendingPermissionsFunc struct {
	defaultHook func(context.Context, *authz.UserPendingPermissions) error
	hooks       []func(context.Context, *authz.UserPendingPermissions) error
	history     []PermsStoreLoadUserPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// LoadUserPendingPermissions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) LoadUserPendingPermissions(v0 context.Context, v1 *authz.UserPendingPermissions) error {
	r0 := m.LoadUserPendingPermissionsFunc.nextHook()(v0, v1)
	m.LoadUserPendingPermissionsFunc.appendCall(PermsStoreLoadUserPendingPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// LoadUserPendingPermissions method of the parent MockPermsStore instance
// is invoked and the hook queue is empty.
func (f *PermsStoreLoadUserPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, *authz.UserPendingPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadUserPendingPermissions method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreLoadUserPendingPermissionsFunc) PushHook(hook func(context.Context, *authz.UserPendingPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreLoadUserPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *authz.UserPendingPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreLoadUserPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *authz.UserPendingPermissions) error {
		return r0
	})
}

func (f *PermsStoreLoadUserPendingPermissionsFunc) nextHook() func(context.Context, *authz.UserPendingPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreLoadUserPendingPermissionsFunc) appendCall(r0 PermsStoreLoadUserPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreLoadUserPendingPermissionsFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreLoadUserPendingPermissionsFunc) History() []PermsStoreLoadUserPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreLoadUserPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreLoadUserPendingPermissionsFuncCall is an object that describes
// an invocation of method LoadUserPendingPermissions on an instance of
// MockPermsStore.
type PermsStoreLoadUserPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *authz.UserPendingPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreLoadUserPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreLoadUserPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreLoadUserPermissionsFunc describes the behavior when the
// LoadUserPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreLoadUserPermissionsFunc struct {
	defaultHook func(context.Context, *authz.UserPermissions) error
	hooks       []func(context.Context, *authz.UserPermissions) error
	history     []PermsStoreLoadUserPermissionsFuncCall
	mutex       sync.Mutex
}

// LoadUserPermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) LoadUserPermissions(v0 context.Context, v1 *authz.UserPermissions) error {
	r0 := m.LoadUserPermissionsFunc.nextHook()(v0, v1)
	m.LoadUserPermissionsFunc.appendCall(PermsStoreLoadUserPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadUserPermissions
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreLoadUserPermissionsFunc) SetDefaultHook(hook func(context.Context, *authz.UserPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadUserPermissions method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreLoadUserPermissionsFunc) PushHook(hook func(context.Context, *authz.UserPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreLoadUserPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *authz.UserPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreLoadUserPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *authz.UserPermissions) error {
		return r0
	})
}

func (f *PermsStoreLoadUserPermissionsFunc) nextHook() func(context.Context, *authz.UserPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreLoadUserPermissionsFunc) appendCall(r0 PermsStoreLoadUserPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreLoadUserPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreLoadUserPermissionsFunc) History() []PermsStoreLoadUserPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreLoadUserPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreLoadUserPermissionsFuncCall is an object that describes an
// invocation of method LoadUserPermissions on an instance of
// MockPermsStore.
type PermsStoreLoadUserPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *authz.UserPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreLoadUserPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreLoadUserPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreMetricsFunc describes the behavior when the Metrics method of
// the parent MockPermsStore instance is invoked.
type PermsStoreMetricsFunc struct {
	defaultHook func(context.Context, time.Duration) (*PermsMetrics, error)
	hooks       []func(context.Context, time.Duration) (*PermsMetrics, error)
	history     []PermsStoreMetricsFuncCall
	mutex       sync.Mutex
}

// Metrics delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) Metrics(v0 context.Context, v1 time.Duration) (*PermsMetrics, error) {
	r0, r1 := m.MetricsFunc.nextHook()(v0, v1)
	m.MetricsFunc.appendCall(PermsStoreMetricsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Metrics method of
// the parent MockPermsStore instance is invoked and the hook queue is
// empty.
func (f *PermsStoreMetricsFunc) SetDefaultHook(hook func(context.Context, time.Duration) (*PermsMetrics, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Metrics method of the parent MockPermsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermsStoreMetricsFunc) PushHook(hook func(context.Context, time.Duration) (*PermsMetrics, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreMetricsFunc) SetDefaultReturn(r0 *PermsMetrics, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Duration) (*PermsMetrics, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreMetricsFunc) PushReturn(r0 *PermsMetrics, r1 error) {
	f.PushHook(func(context.Context, time.Duration) (*PermsMetrics, error) {
		return r0, r1
	})
}

func (f *PermsStoreMetricsFunc) nextHook() func(context.Context, time.Duration) (*PermsMetrics, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreMetricsFunc) appendCall(r0 PermsStoreMetricsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreMetricsFuncCall objects
// describing the invocations of this function.
func (f *PermsStoreMetricsFunc) History() []PermsStoreMetricsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreMetricsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreMetricsFuncCall is an object that describes an invocation of
// method Metrics on an instance of MockPermsStore.
type PermsStoreMetricsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *PermsMetrics
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreMetricsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreMetricsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreRepoIDsWithNoPermsFunc describes the behavior when the
// RepoIDsWithNoPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreRepoIDsWithNoPermsFunc struct {
	defaultHook func(context.Context) ([]api.RepoID, error)
	hooks       []func(context.Context) ([]api.RepoID, error)
	history     []PermsStoreRepoIDsWithNoPermsFuncCall
	mutex       sync.Mutex
}

// RepoIDsWithNoPerms delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) RepoIDsWithNoPerms(v0 context.Context) ([]api.RepoID, error) {
	r0, r1 := m.RepoIDsWithNoPermsFunc.nextHook()(v0)
	m.RepoIDsWithNoPermsFunc.appendCall(PermsStoreRepoIDsWithNoPermsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoIDsWithNoPerms
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreRepoIDsWithNoPermsFunc) SetDefaultHook(hook func(context.Context) ([]api.RepoID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoIDsWithNoPerms method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreRepoIDsWithNoPermsFunc) PushHook(hook func(context.Context) ([]api.RepoID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreRepoIDsWithNoPermsFunc) SetDefaultReturn(r0 []api.RepoID, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]api.RepoID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreRepoIDsWithNoPermsFunc) PushReturn(r0 []api.RepoID, r1 error) {
	f.PushHook(func(context.Context) ([]api.RepoID, error) {
		return r0, r1
	})
}

func (f *PermsStoreRepoIDsWithNoPermsFunc) nextHook() func(context.Context) ([]api.RepoID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreRepoIDsWithNoPermsFunc) appendCall(r0 PermsStoreRepoIDsWithNoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreRepoIDsWithNoPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreRepoIDsWithNoPermsFunc) History() []PermsStoreRepoIDsWithNoPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreRepoIDsWithNoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreRepoIDsWithNoPermsFuncCall is an object that describes an
// invocation of method RepoIDsWithNoPerms on an instance of MockPermsStore.
type PermsStoreRepoIDsWithNoPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.RepoID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreRepoIDsWithNoPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreRepoIDsWithNoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreReposIDsWithOldestPermsFunc describes the behavior when the
// ReposIDsWithOldestPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreReposIDsWithOldestPermsFunc struct {
	defaultHook func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error)
	hooks       []func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error)
	history     []PermsStoreReposIDsWithOldestPermsFuncCall
	mutex       sync.Mutex
}

// ReposIDsWithOldestPerms delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) ReposIDsWithOldestPerms(v0 context.Context, v1 int, v2 time.Duration) (map[api.RepoID]time.Time, error) {
	r0, r1 := m.ReposIDsWithOldestPermsFunc.nextHook()(v0, v1, v2)
	m.ReposIDsWithOldestPermsFunc.appendCall(PermsStoreReposIDsWithOldestPermsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ReposIDsWithOldestPerms method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreReposIDsWithOldestPermsFunc) SetDefaultHook(hook func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReposIDsWithOldestPerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreReposIDsWithOldestPermsFunc) PushHook(hook func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreReposIDsWithOldestPermsFunc) SetDefaultReturn(r0 map[api.RepoID]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreReposIDsWithOldestPermsFunc) PushReturn(r0 map[api.RepoID]time.Time, r1 error) {
	f.PushHook(func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error) {
		return r0, r1
	})
}

func (f *PermsStoreReposIDsWithOldestPermsFunc) nextHook() func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreReposIDsWithOldestPermsFunc) appendCall(r0 PermsStoreReposIDsWithOldestPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreReposIDsWithOldestPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreReposIDsWithOldestPermsFunc) History() []PermsStoreReposIDsWithOldestPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreReposIDsWithOldestPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreReposIDsWithOldestPermsFuncCall is an object that describes an
// invocation of method ReposIDsWithOldestPerms on an instance of
// MockPermsStore.
type PermsStoreReposIDsWithOldestPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreReposIDsWithOldestPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreReposIDsWithOldestPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreSetRepoPendingPermissionsFunc describes the behavior when the
// SetRepoPendingPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreSetRepoPendingPermissionsFunc struct {
	defaultHook func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error
	hooks       []func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error
	history     []PermsStoreSetRepoPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// SetRepoPendingPermissions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) SetRepoPendingPermissions(v0 context.Context, v1 *extsvc.Accounts, v2 *authz.RepoPermissions) error {
	r0 := m.SetRepoPendingPermissionsFunc.nextHook()(v0, v1, v2)
	m.SetRepoPendingPermissionsFunc.appendCall(PermsStoreSetRepoPendingPermissionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetRepoPendingPermissions method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreSetRepoPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepoPendingPermissions method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreSetRepoPendingPermissionsFunc) PushHook(hook func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreSetRepoPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreSetRepoPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error {
		return r0
	})
}

func (f *PermsStoreSetRepoPendingPermissionsFunc) nextHook() func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreSetRepoPendingPermissionsFunc) appendCall(r0 PermsStoreSetRepoPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreSetRepoPendingPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreSetRepoPendingPermissionsFunc) History() []PermsStoreSetRepoPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreSetRepoPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreSetRepoPendingPermissionsFuncCall is an object that describes
// an invocation of method SetRepoPendingPermissions on an instance of
// MockPermsStore.
type PermsStoreSetRepoPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *extsvc.Accounts
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *authz.RepoPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreSetRepoPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreSetRepoPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreSetRepoPermissionsFunc describes the behavior when the
// SetRepoPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreSetRepoPermissionsFunc struct {
	defaultHook func(context.Context, *authz.RepoPermissions) error
	hooks       []func(context.Context, *authz.RepoPermissions) error
	history     []PermsStoreSetRepoPermissionsFuncCall
	mutex       sync.Mutex
}

// SetRepoPermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) SetRepoPermissions(v0 context.Context, v1 *authz.RepoPermissions) error {
	r0 := m.SetRepoPermissionsFunc.nextHook()(v0, v1)
	m.SetRepoPermissionsFunc.appendCall(PermsStoreSetRepoPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetRepoPermissions
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreSetRepoPermissionsFunc) SetDefaultHook(hook func(context.Context, *authz.RepoPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepoPermissions method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreSetRepoPermissionsFunc) PushHook(hook func(context.Context, *authz.RepoPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreSetRepoPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *authz.RepoPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreSetRepoPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *authz.RepoPermissions) error {
		return r0
	})
}

func (f *PermsStoreSetRepoPermissionsFunc) nextHook() func(context.Context, *authz.RepoPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreSetRepoPermissionsFunc) appendCall(r0 PermsStoreSetRepoPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreSetRepoPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreSetRepoPermissionsFunc) History() []PermsStoreSetRepoPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreSetRepoPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreSetRepoPermissionsFuncCall is an object that describes an
// invocation of method SetRepoPermissions on an instance of MockPermsStore.
type PermsStoreSetRepoPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *authz.RepoPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreSetRepoPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreSetRepoPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreSetRepoPermissionsUnrestrictedFunc describes the behavior when
// the SetRepoPermissionsUnrestricted method of the parent MockPermsStore
// instance is invoked.
type PermsStoreSetRepoPermissionsUnrestrictedFunc struct {
	defaultHook func(context.Context, []int32, bool) error
	hooks       []func(context.Context, []int32, bool) error
	history     []PermsStoreSetRepoPermissionsUnrestrictedFuncCall
	mutex       sync.Mutex
}

// SetRepoPermissionsUnrestricted delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) SetRepoPermissionsUnrestricted(v0 context.Context, v1 []int32, v2 bool) error {
	r0 := m.SetRepoPermissionsUnrestrictedFunc.nextHook()(v0, v1, v2)
	m.SetRepoPermissionsUnrestrictedFunc.appendCall(PermsStoreSetRepoPermissionsUnrestrictedFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetRepoPermissionsUnrestricted method of the parent MockPermsStore
// instance is invoked and the hook queue is empty.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) SetDefaultHook(hook func(context.Context, []int32, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepoPermissionsUnrestricted method of the parent MockPermsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) PushHook(hook func(context.Context, []int32, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int32, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int32, bool) error {
		return r0
	})
}

func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) nextHook() func(context.Context, []int32, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) appendCall(r0 PermsStoreSetRepoPermissionsUnrestrictedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreSetRepoPermissionsUnrestrictedFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) History() []PermsStoreSetRepoPermissionsUnrestrictedFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreSetRepoPermissionsUnrestrictedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreSetRepoPermissionsUnrestrictedFuncCall is an object that
// describes an invocation of method SetRepoPermissionsUnrestricted on an
// instance of MockPermsStore.
type PermsStoreSetRepoPermissionsUnrestrictedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreSetRepoPermissionsUnrestrictedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreSetRepoPermissionsUnrestrictedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreSetUserPermissionsFunc describes the behavior when the
// SetUserPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreSetUserPermissionsFunc struct {
	defaultHook func(context.Context, *authz.UserPermissions) error
	hooks       []func(context.Context, *authz.UserPermissions) error
	history     []PermsStoreSetUserPermissionsFuncCall
	mutex       sync.Mutex
}

// SetUserPermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) SetUserPermissions(v0 context.Context, v1 *authz.UserPermissions) error {
	r0 := m.SetUserPermissionsFunc.nextHook()(v0, v1)
	m.SetUserPermissionsFunc.appendCall(PermsStoreSetUserPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetUserPermissions
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreSetUserPermissionsFunc) SetDefaultHook(hook func(context.Context, *authz.UserPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetUserPermissions method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreSetUserPermissionsFunc) PushHook(hook func(context.Context, *authz.UserPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreSetUserPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *authz.UserPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreSetUserPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *authz.UserPermissions) error {
		return r0
	})
}

func (f *PermsStoreSetUserPermissionsFunc) nextHook() func(context.Context, *authz.UserPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreSetUserPermissionsFunc) appendCall(r0 PermsStoreSetUserPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreSetUserPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreSetUserPermissionsFunc) History() []PermsStoreSetUserPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreSetUserPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreSetUserPermissionsFuncCall is an object that describes an
// invocation of method SetUserPermissions on an instance of MockPermsStore.
type PermsStoreSetUserPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *authz.UserPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreSetUserPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreSetUserPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreTouchRepoPermissionsFunc describes the behavior when the
// TouchRepoPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreTouchRepoPermissionsFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []PermsStoreTouchRepoPermissionsFuncCall
	mutex       sync.Mutex
}

// TouchRepoPermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) TouchRepoPermissions(v0 context.Context, v1 int32) error {
	r0 := m.TouchRepoPermissionsFunc.nextHook()(v0, v1)
	m.TouchRepoPermissionsFunc.appendCall(PermsStoreTouchRepoPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the TouchRepoPermissions
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreTouchRepoPermissionsFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TouchRepoPermissions method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreTouchRepoPermissionsFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreTouchRepoPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreTouchRepoPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *PermsStoreTouchRepoPermissionsFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreTouchRepoPermissionsFunc) appendCall(r0 PermsStoreTouchRepoPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreTouchRepoPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreTouchRepoPermissionsFunc) History() []PermsStoreTouchRepoPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreTouchRepoPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreTouchRepoPermissionsFuncCall is an object that describes an
// invocation of method TouchRepoPermissions on an instance of
// MockPermsStore.
type PermsStoreTouchRepoPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreTouchRepoPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreTouchRepoPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreTransactFunc describes the behavior when the Transact method of
// the parent MockPermsStore instance is invoked.
type PermsStoreTransactFunc struct {
	defaultHook func(context.Context) (PermsStore, error)
	hooks       []func(context.Context) (PermsStore, error)
	history     []PermsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) Transact(v0 context.Context) (PermsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(PermsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockPermsStore instance is invoked and the hook queue is
// empty.
func (f *PermsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (PermsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockPermsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermsStoreTransactFunc) PushHook(hook func(context.Context) (PermsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreTransactFunc) SetDefaultReturn(r0 PermsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (PermsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreTransactFunc) PushReturn(r0 PermsStore, r1 error) {
	f.PushHook(func(context.Context) (PermsStore, error) {
		return r0, r1
	})
}

func (f *PermsStoreTransactFunc) nextHook() func(context.Context) (PermsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreTransactFunc) appendCall(r0 PermsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *PermsStoreTransactFunc) History() []PermsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockPermsStore.
type PermsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreUserIDsWithNoPermsFunc describes the behavior when the
// UserIDsWithNoPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreUserIDsWithNoPermsFunc struct {
	defaultHook func(context.Context) ([]int32, error)
	hooks       []func(context.Context) ([]int32, error)
	history     []PermsStoreUserIDsWithNoPermsFuncCall
	mutex       sync.Mutex
}

// UserIDsWithNoPerms delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) UserIDsWithNoPerms(v0 context.Context) ([]int32, error) {
	r0, r1 := m.UserIDsWithNoPermsFunc.nextHook()(v0)
	m.UserIDsWithNoPermsFunc.appendCall(PermsStoreUserIDsWithNoPermsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UserIDsWithNoPerms
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreUserIDsWithNoPermsFunc) SetDefaultHook(hook func(context.Context) ([]int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserIDsWithNoPerms method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreUserIDsWithNoPermsFunc) PushHook(hook func(context.Context) ([]int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreUserIDsWithNoPermsFunc) SetDefaultReturn(r0 []int32, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreUserIDsWithNoPermsFunc) PushReturn(r0 []int32, r1 error) {
	f.PushHook(func(context.Context) ([]int32, error) {
		return r0, r1
	})
}

func (f *PermsStoreUserIDsWithNoPermsFunc) nextHook() func(context.Context) ([]int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreUserIDsWithNoPermsFunc) appendCall(r0 PermsStoreUserIDsWithNoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreUserIDsWithNoPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreUserIDsWithNoPermsFunc) History() []PermsStoreUserIDsWithNoPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreUserIDsWithNoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreUserIDsWithNoPermsFuncCall is an object that describes an
// invocation of method UserIDsWithNoPerms on an instance of MockPermsStore.
type PermsStoreUserIDsWithNoPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreUserIDsWithNoPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreUserIDsWithNoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreUserIDsWithOldestPermsFunc describes the behavior when the
// UserIDsWithOldestPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreUserIDsWithOldestPermsFunc struct {
	defaultHook func(context.Context, int, time.Duration) (map[int32]time.Time, error)
	hooks       []func(context.Context, int, time.Duration) (map[int32]time.Time, error)
	history     []PermsStoreUserIDsWithOldestPermsFuncCall
	mutex       sync.Mutex
}

// UserIDsWithOldestPerms delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) UserIDsWithOldestPerms(v0 context.Context, v1 int, v2 time.Duration) (map[int32]time.Time, error) {
	r0, r1 := m.UserIDsWithOldestPermsFunc.nextHook()(v0, v1, v2)
	m.UserIDsWithOldestPermsFunc.appendCall(PermsStoreUserIDsWithOldestPermsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UserIDsWithOldestPerms method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreUserIDsWithOldestPermsFunc) SetDefaultHook(hook func(context.Context, int, time.Duration) (map[int32]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserIDsWithOldestPerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreUserIDsWithOldestPermsFunc) PushHook(hook func(context.Context, int, time.Duration) (map[int32]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreUserIDsWithOldestPermsFunc) SetDefaultReturn(r0 map[int32]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int, time.Duration) (map[int32]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreUserIDsWithOldestPermsFunc) PushReturn(r0 map[int32]time.Time, r1 error) {
	f.PushHook(func(context.Context, int, time.Duration) (map[int32]time.Time, error) {
		return r0, r1
	})
}

func (f *PermsStoreUserIDsWithOldestPermsFunc) nextHook() func(context.Context, int, time.Duration) (map[int32]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreUserIDsWithOldestPermsFunc) appendCall(r0 PermsStoreUserIDsWithOldestPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreUserIDsWithOldestPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreUserIDsWithOldestPermsFunc) History() []PermsStoreUserIDsWithOldestPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreUserIDsWithOldestPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreUserIDsWithOldestPermsFuncCall is an object that describes an
// invocation of method UserIDsWithOldestPerms on an instance of
// MockPermsStore.
type PermsStoreUserIDsWithOldestPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int32]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreUserIDsWithOldestPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreUserIDsWithOldestPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreUserIDsWithOutdatedPermsFunc describes the behavior when the
// UserIDsWithOutdatedPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreUserIDsWithOutdatedPermsFunc struct {
	defaultHook func(context.Context) (map[int32]time.Time, error)
	hooks       []func(context.Context) (map[int32]time.Time, error)
	history     []PermsStoreUserIDsWithOutdatedPermsFuncCall
	mutex       sync.Mutex
}

// UserIDsWithOutdatedPerms delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) UserIDsWithOutdatedPerms(v0 context.Context) (map[int32]time.Time, error) {
	r0, r1 := m.UserIDsWithOutdatedPermsFunc.nextHook()(v0)
	m.UserIDsWithOutdatedPermsFunc.appendCall(PermsStoreUserIDsWithOutdatedPermsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UserIDsWithOutdatedPerms method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreUserIDsWithOutdatedPermsFunc) SetDefaultHook(hook func(context.Context) (map[int32]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserIDsWithOutdatedPerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreUserIDsWithOutdatedPermsFunc) PushHook(hook func(context.Context) (map[int32]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreUserIDsWithOutdatedPermsFunc) SetDefaultReturn(r0 map[int32]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[int32]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreUserIDsWithOutdatedPermsFunc) PushReturn(r0 map[int32]time.Time, r1 error) {
	f.PushHook(func(context.Context) (map[int32]time.Time, error) {
		return r0, r1
	})
}

func (f *PermsStoreUserIDsWithOutdatedPermsFunc) nextHook() func(context.Context) (map[int32]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreUserIDsWithOutdatedPermsFunc) appendCall(r0 PermsStoreUserIDsWithOutdatedPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreUserIDsWithOutdatedPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreUserIDsWithOutdatedPermsFunc) History() []PermsStoreUserIDsWithOutdatedPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreUserIDsWithOutdatedPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreUserIDsWithOutdatedPermsFuncCall is an object that describes an
// invocation of method UserIDsWithOutdatedPerms on an instance of
// MockPermsStore.
type PermsStoreUserIDsWithOutdatedPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int32]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreUserIDsWithOutdatedPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreUserIDsWithOutdatedPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc describes the
// behavior when the UserIsMemberOfOrgHasCodeHostConnection method of the
// parent MockPermsStore instance is invoked.
type PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc struct {
	defaultHook func(context.Context, int32) (bool, error)
	hooks       []func(context.Context, int32) (bool, error)
	history     []PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall
	mutex       sync.Mutex
}

// UserIsMemberOfOrgHasCodeHostConnection delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockPermsStore) UserIsMemberOfOrgHasCodeHostConnection(v0 context.Context, v1 int32) (bool, error) {
	r0, r1 := m.UserIsMemberOfOrgHasCodeHostConnectionFunc.nextHook()(v0, v1)
	m.UserIsMemberOfOrgHasCodeHostConnectionFunc.appendCall(PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UserIsMemberOfOrgHasCodeHostConnection method of the parent
// MockPermsStore instance is invoked and the hook queue is empty.
func (f *PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc) SetDefaultHook(hook func(context.Context, int32) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserIsMemberOfOrgHasCodeHostConnection method of the parent
// MockPermsStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc) PushHook(hook func(context.Context, int32) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

func (f *PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc) nextHook() func(context.Context, int32) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc) appendCall(r0 PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall objects
// describing the invocations of this function.
func (f *PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFunc) History() []PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall is an object
// that describes an invocation of method
// UserIsMemberOfOrgHasCodeHostConnection on an instance of MockPermsStore.
type PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreUserIsMemberOfOrgHasCodeHostConnectionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreWithFunc describes the behavior when the With method of the
// parent MockPermsStore instance is invoked.
type PermsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) PermsStore
	hooks       []func(basestore.ShareableStore) PermsStore
	history     []PermsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) With(v0 basestore.ShareableStore) PermsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(PermsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockPermsStore instance is invoked and the hook queue is empty.
func (f *PermsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) PermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockPermsStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *PermsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) PermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreWithFunc) SetDefaultReturn(r0 PermsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) PermsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreWithFunc) PushReturn(r0 PermsStore) {
	f.PushHook(func(basestore.ShareableStore) PermsStore {
		return r0
	})
}

func (f *PermsStoreWithFunc) nextHook() func(basestore.ShareableStore) PermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreWithFunc) appendCall(r0 PermsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreWithFuncCall objects describing
// the invocations of this function.
func (f *PermsStoreWithFunc) History() []PermsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockPermsStore.
type PermsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
