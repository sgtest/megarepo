// Code generated by go-mockgen 1.3.3; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package sources

import (
	"context"
	"sync"

	store "github.com/sourcegraph/sourcegraph/enterprise/internal/batches/store"
	types1 "github.com/sourcegraph/sourcegraph/enterprise/internal/batches/types"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	auth "github.com/sourcegraph/sourcegraph/internal/extsvc/auth"
	bitbucketcloud "github.com/sourcegraph/sourcegraph/internal/extsvc/bitbucketcloud"
	protocol "github.com/sourcegraph/sourcegraph/internal/gitserver/protocol"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockChangesetSource is a mock implementation of the ChangesetSource
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/sources)
// used for unit testing.
type MockChangesetSource struct {
	// CloseChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CloseChangeset.
	CloseChangesetFunc *ChangesetSourceCloseChangesetFunc
	// CreateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CreateChangeset.
	CreateChangesetFunc *ChangesetSourceCreateChangesetFunc
	// CreateCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreateComment.
	CreateCommentFunc *ChangesetSourceCreateCommentFunc
	// GitserverPushConfigFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverPushConfig.
	GitserverPushConfigFunc *ChangesetSourceGitserverPushConfigFunc
	// LoadChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method LoadChangeset.
	LoadChangesetFunc *ChangesetSourceLoadChangesetFunc
	// MergeChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method MergeChangeset.
	MergeChangesetFunc *ChangesetSourceMergeChangesetFunc
	// ReopenChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method ReopenChangeset.
	ReopenChangesetFunc *ChangesetSourceReopenChangesetFunc
	// UpdateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateChangeset.
	UpdateChangesetFunc *ChangesetSourceUpdateChangesetFunc
	// ValidateAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method ValidateAuthenticator.
	ValidateAuthenticatorFunc *ChangesetSourceValidateAuthenticatorFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *ChangesetSourceWithAuthenticatorFunc
}

// NewMockChangesetSource creates a new mock of the ChangesetSource
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockChangesetSource() *MockChangesetSource {
	return &MockChangesetSource{
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 bool, r1 error) {
				return
			},
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) (r0 error) {
				return
			},
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (r0 *protocol.PushConfig, r1 error) {
				return
			},
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) (r0 error) {
				return
			},
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 ChangesetSource, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockChangesetSource creates a new mock of the ChangesetSource
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockChangesetSource() *MockChangesetSource {
	return &MockChangesetSource{
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.CloseChangeset")
			},
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (bool, error) {
				panic("unexpected invocation of MockChangesetSource.CreateChangeset")
			},
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) error {
				panic("unexpected invocation of MockChangesetSource.CreateComment")
			},
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
				panic("unexpected invocation of MockChangesetSource.GitserverPushConfig")
			},
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.LoadChangeset")
			},
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) error {
				panic("unexpected invocation of MockChangesetSource.MergeChangeset")
			},
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.ReopenChangeset")
			},
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.UpdateChangeset")
			},
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockChangesetSource.ValidateAuthenticator")
			},
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (ChangesetSource, error) {
				panic("unexpected invocation of MockChangesetSource.WithAuthenticator")
			},
		},
	}
}

// NewMockChangesetSourceFrom creates a new mock of the MockChangesetSource
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockChangesetSourceFrom(i ChangesetSource) *MockChangesetSource {
	return &MockChangesetSource{
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: i.CloseChangeset,
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: i.CreateChangeset,
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: i.CreateComment,
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: i.GitserverPushConfig,
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: i.LoadChangeset,
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: i.MergeChangeset,
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: i.ReopenChangeset,
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: i.UpdateChangeset,
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: i.ValidateAuthenticator,
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// ChangesetSourceCloseChangesetFunc describes the behavior when the
// CloseChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCloseChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceCloseChangesetFuncCall
	mutex       sync.Mutex
}

// CloseChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) CloseChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.CloseChangesetFunc.nextHook()(v0, v1)
	m.CloseChangesetFunc.appendCall(ChangesetSourceCloseChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceCloseChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCloseChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCloseChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCloseChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceCloseChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCloseChangesetFunc) appendCall(r0 ChangesetSourceCloseChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCloseChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCloseChangesetFunc) History() []ChangesetSourceCloseChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCloseChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCloseChangesetFuncCall is an object that describes an
// invocation of method CloseChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceCloseChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCloseChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCloseChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceCreateChangesetFunc describes the behavior when the
// CreateChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCreateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) (bool, error)
	hooks       []func(context.Context, *Changeset) (bool, error)
	history     []ChangesetSourceCreateChangesetFuncCall
	mutex       sync.Mutex
}

// CreateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) CreateChangeset(v0 context.Context, v1 *Changeset) (bool, error) {
	r0, r1 := m.CreateChangesetFunc.nextHook()(v0, v1)
	m.CreateChangesetFunc.appendCall(ChangesetSourceCreateChangesetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceCreateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCreateChangesetFunc) PushHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCreateChangesetFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCreateChangesetFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceCreateChangesetFunc) nextHook() func(context.Context, *Changeset) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCreateChangesetFunc) appendCall(r0 ChangesetSourceCreateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCreateChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCreateChangesetFunc) History() []ChangesetSourceCreateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCreateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCreateChangesetFuncCall is an object that describes an
// invocation of method CreateChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceCreateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCreateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCreateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ChangesetSourceCreateCommentFunc describes the behavior when the
// CreateComment method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCreateCommentFunc struct {
	defaultHook func(context.Context, *Changeset, string) error
	hooks       []func(context.Context, *Changeset, string) error
	history     []ChangesetSourceCreateCommentFuncCall
	mutex       sync.Mutex
}

// CreateComment delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockChangesetSource) CreateComment(v0 context.Context, v1 *Changeset, v2 string) error {
	r0 := m.CreateCommentFunc.nextHook()(v0, v1, v2)
	m.CreateCommentFunc.appendCall(ChangesetSourceCreateCommentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateComment method
// of the parent MockChangesetSource instance is invoked and the hook queue
// is empty.
func (f *ChangesetSourceCreateCommentFunc) SetDefaultHook(hook func(context.Context, *Changeset, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateComment method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCreateCommentFunc) PushHook(hook func(context.Context, *Changeset, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCreateCommentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCreateCommentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

func (f *ChangesetSourceCreateCommentFunc) nextHook() func(context.Context, *Changeset, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCreateCommentFunc) appendCall(r0 ChangesetSourceCreateCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCreateCommentFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCreateCommentFunc) History() []ChangesetSourceCreateCommentFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCreateCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCreateCommentFuncCall is an object that describes an
// invocation of method CreateComment on an instance of MockChangesetSource.
type ChangesetSourceCreateCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCreateCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCreateCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceGitserverPushConfigFunc describes the behavior when the
// GitserverPushConfig method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceGitserverPushConfigFunc struct {
	defaultHook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	hooks       []func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	history     []ChangesetSourceGitserverPushConfigFuncCall
	mutex       sync.Mutex
}

// GitserverPushConfig delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) GitserverPushConfig(v0 context.Context, v1 database.ExternalServiceStore, v2 *types.Repo) (*protocol.PushConfig, error) {
	r0, r1 := m.GitserverPushConfigFunc.nextHook()(v0, v1, v2)
	m.GitserverPushConfigFunc.appendCall(ChangesetSourceGitserverPushConfigFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GitserverPushConfig
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceGitserverPushConfigFunc) SetDefaultHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverPushConfig method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceGitserverPushConfigFunc) PushHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceGitserverPushConfigFunc) SetDefaultReturn(r0 *protocol.PushConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceGitserverPushConfigFunc) PushReturn(r0 *protocol.PushConfig, r1 error) {
	f.PushHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceGitserverPushConfigFunc) nextHook() func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceGitserverPushConfigFunc) appendCall(r0 ChangesetSourceGitserverPushConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceGitserverPushConfigFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceGitserverPushConfigFunc) History() []ChangesetSourceGitserverPushConfigFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceGitserverPushConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceGitserverPushConfigFuncCall is an object that describes an
// invocation of method GitserverPushConfig on an instance of
// MockChangesetSource.
type ChangesetSourceGitserverPushConfigFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalServiceStore
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.PushConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceGitserverPushConfigFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceGitserverPushConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ChangesetSourceLoadChangesetFunc describes the behavior when the
// LoadChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceLoadChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceLoadChangesetFuncCall
	mutex       sync.Mutex
}

// LoadChangeset delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockChangesetSource) LoadChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.LoadChangesetFunc.nextHook()(v0, v1)
	m.LoadChangesetFunc.appendCall(ChangesetSourceLoadChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadChangeset method
// of the parent MockChangesetSource instance is invoked and the hook queue
// is empty.
func (f *ChangesetSourceLoadChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceLoadChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceLoadChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceLoadChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceLoadChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceLoadChangesetFunc) appendCall(r0 ChangesetSourceLoadChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceLoadChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceLoadChangesetFunc) History() []ChangesetSourceLoadChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceLoadChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceLoadChangesetFuncCall is an object that describes an
// invocation of method LoadChangeset on an instance of MockChangesetSource.
type ChangesetSourceLoadChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceLoadChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceLoadChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceMergeChangesetFunc describes the behavior when the
// MergeChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceMergeChangesetFunc struct {
	defaultHook func(context.Context, *Changeset, bool) error
	hooks       []func(context.Context, *Changeset, bool) error
	history     []ChangesetSourceMergeChangesetFuncCall
	mutex       sync.Mutex
}

// MergeChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) MergeChangeset(v0 context.Context, v1 *Changeset, v2 bool) error {
	r0 := m.MergeChangesetFunc.nextHook()(v0, v1, v2)
	m.MergeChangesetFunc.appendCall(ChangesetSourceMergeChangesetFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MergeChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceMergeChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceMergeChangesetFunc) PushHook(hook func(context.Context, *Changeset, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceMergeChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceMergeChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

func (f *ChangesetSourceMergeChangesetFunc) nextHook() func(context.Context, *Changeset, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceMergeChangesetFunc) appendCall(r0 ChangesetSourceMergeChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceMergeChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceMergeChangesetFunc) History() []ChangesetSourceMergeChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceMergeChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceMergeChangesetFuncCall is an object that describes an
// invocation of method MergeChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceMergeChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceMergeChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceMergeChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceReopenChangesetFunc describes the behavior when the
// ReopenChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceReopenChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceReopenChangesetFuncCall
	mutex       sync.Mutex
}

// ReopenChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) ReopenChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.ReopenChangesetFunc.nextHook()(v0, v1)
	m.ReopenChangesetFunc.appendCall(ChangesetSourceReopenChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReopenChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceReopenChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReopenChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceReopenChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceReopenChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceReopenChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceReopenChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceReopenChangesetFunc) appendCall(r0 ChangesetSourceReopenChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceReopenChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceReopenChangesetFunc) History() []ChangesetSourceReopenChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceReopenChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceReopenChangesetFuncCall is an object that describes an
// invocation of method ReopenChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceReopenChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceReopenChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceReopenChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceUpdateChangesetFunc describes the behavior when the
// UpdateChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceUpdateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceUpdateChangesetFuncCall
	mutex       sync.Mutex
}

// UpdateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) UpdateChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.UpdateChangesetFunc.nextHook()(v0, v1)
	m.UpdateChangesetFunc.appendCall(ChangesetSourceUpdateChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceUpdateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceUpdateChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceUpdateChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceUpdateChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceUpdateChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceUpdateChangesetFunc) appendCall(r0 ChangesetSourceUpdateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceUpdateChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceUpdateChangesetFunc) History() []ChangesetSourceUpdateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceUpdateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceUpdateChangesetFuncCall is an object that describes an
// invocation of method UpdateChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceUpdateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceUpdateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceUpdateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceValidateAuthenticatorFunc describes the behavior when the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// is invoked.
type ChangesetSourceValidateAuthenticatorFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ChangesetSourceValidateAuthenticatorFuncCall
	mutex       sync.Mutex
}

// ValidateAuthenticator delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockChangesetSource) ValidateAuthenticator(v0 context.Context) error {
	r0 := m.ValidateAuthenticatorFunc.nextHook()(v0)
	m.ValidateAuthenticatorFunc.appendCall(ChangesetSourceValidateAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// is invoked and the hook queue is empty.
func (f *ChangesetSourceValidateAuthenticatorFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceValidateAuthenticatorFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceValidateAuthenticatorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceValidateAuthenticatorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ChangesetSourceValidateAuthenticatorFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceValidateAuthenticatorFunc) appendCall(r0 ChangesetSourceValidateAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ChangesetSourceValidateAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *ChangesetSourceValidateAuthenticatorFunc) History() []ChangesetSourceValidateAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceValidateAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceValidateAuthenticatorFuncCall is an object that describes
// an invocation of method ValidateAuthenticator on an instance of
// MockChangesetSource.
type ChangesetSourceValidateAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceValidateAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceValidateAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceWithAuthenticatorFunc describes the behavior when the
// WithAuthenticator method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) (ChangesetSource, error)
	hooks       []func(auth.Authenticator) (ChangesetSource, error)
	history     []ChangesetSourceWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) WithAuthenticator(v0 auth.Authenticator) (ChangesetSource, error) {
	r0, r1 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(ChangesetSourceWithAuthenticatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceWithAuthenticatorFunc) SetDefaultReturn(r0 ChangesetSource, r1 error) {
	f.SetDefaultHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceWithAuthenticatorFunc) PushReturn(r0 ChangesetSource, r1 error) {
	f.PushHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceWithAuthenticatorFunc) nextHook() func(auth.Authenticator) (ChangesetSource, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceWithAuthenticatorFunc) appendCall(r0 ChangesetSourceWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceWithAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceWithAuthenticatorFunc) History() []ChangesetSourceWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceWithAuthenticatorFuncCall is an object that describes an
// invocation of method WithAuthenticator on an instance of
// MockChangesetSource.
type ChangesetSourceWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ChangesetSource
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockForkableChangesetSource is a mock implementation of the
// ForkableChangesetSource interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/sources)
// used for unit testing.
type MockForkableChangesetSource struct {
	// CloseChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CloseChangeset.
	CloseChangesetFunc *ForkableChangesetSourceCloseChangesetFunc
	// CreateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CreateChangeset.
	CreateChangesetFunc *ForkableChangesetSourceCreateChangesetFunc
	// CreateCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreateComment.
	CreateCommentFunc *ForkableChangesetSourceCreateCommentFunc
	// GetNamespaceForkFunc is an instance of a mock function object
	// controlling the behavior of the method GetNamespaceFork.
	GetNamespaceForkFunc *ForkableChangesetSourceGetNamespaceForkFunc
	// GetUserForkFunc is an instance of a mock function object controlling
	// the behavior of the method GetUserFork.
	GetUserForkFunc *ForkableChangesetSourceGetUserForkFunc
	// GitserverPushConfigFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverPushConfig.
	GitserverPushConfigFunc *ForkableChangesetSourceGitserverPushConfigFunc
	// LoadChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method LoadChangeset.
	LoadChangesetFunc *ForkableChangesetSourceLoadChangesetFunc
	// MergeChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method MergeChangeset.
	MergeChangesetFunc *ForkableChangesetSourceMergeChangesetFunc
	// ReopenChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method ReopenChangeset.
	ReopenChangesetFunc *ForkableChangesetSourceReopenChangesetFunc
	// UpdateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateChangeset.
	UpdateChangesetFunc *ForkableChangesetSourceUpdateChangesetFunc
	// ValidateAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method ValidateAuthenticator.
	ValidateAuthenticatorFunc *ForkableChangesetSourceValidateAuthenticatorFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *ForkableChangesetSourceWithAuthenticatorFunc
}

// NewMockForkableChangesetSource creates a new mock of the
// ForkableChangesetSource interface. All methods return zero values for all
// results, unless overwritten.
func NewMockForkableChangesetSource() *MockForkableChangesetSource {
	return &MockForkableChangesetSource{
		CloseChangesetFunc: &ForkableChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		CreateChangesetFunc: &ForkableChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 bool, r1 error) {
				return
			},
		},
		CreateCommentFunc: &ForkableChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) (r0 error) {
				return
			},
		},
		GetNamespaceForkFunc: &ForkableChangesetSourceGetNamespaceForkFunc{
			defaultHook: func(context.Context, *types.Repo, string) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetUserForkFunc: &ForkableChangesetSourceGetUserForkFunc{
			defaultHook: func(context.Context, *types.Repo) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GitserverPushConfigFunc: &ForkableChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (r0 *protocol.PushConfig, r1 error) {
				return
			},
		},
		LoadChangesetFunc: &ForkableChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		MergeChangesetFunc: &ForkableChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) (r0 error) {
				return
			},
		},
		ReopenChangesetFunc: &ForkableChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		UpdateChangesetFunc: &ForkableChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		ValidateAuthenticatorFunc: &ForkableChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		WithAuthenticatorFunc: &ForkableChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 ChangesetSource, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockForkableChangesetSource creates a new mock of the
// ForkableChangesetSource interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockForkableChangesetSource() *MockForkableChangesetSource {
	return &MockForkableChangesetSource{
		CloseChangesetFunc: &ForkableChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.CloseChangeset")
			},
		},
		CreateChangesetFunc: &ForkableChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (bool, error) {
				panic("unexpected invocation of MockForkableChangesetSource.CreateChangeset")
			},
		},
		CreateCommentFunc: &ForkableChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) error {
				panic("unexpected invocation of MockForkableChangesetSource.CreateComment")
			},
		},
		GetNamespaceForkFunc: &ForkableChangesetSourceGetNamespaceForkFunc{
			defaultHook: func(context.Context, *types.Repo, string) (*types.Repo, error) {
				panic("unexpected invocation of MockForkableChangesetSource.GetNamespaceFork")
			},
		},
		GetUserForkFunc: &ForkableChangesetSourceGetUserForkFunc{
			defaultHook: func(context.Context, *types.Repo) (*types.Repo, error) {
				panic("unexpected invocation of MockForkableChangesetSource.GetUserFork")
			},
		},
		GitserverPushConfigFunc: &ForkableChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
				panic("unexpected invocation of MockForkableChangesetSource.GitserverPushConfig")
			},
		},
		LoadChangesetFunc: &ForkableChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.LoadChangeset")
			},
		},
		MergeChangesetFunc: &ForkableChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) error {
				panic("unexpected invocation of MockForkableChangesetSource.MergeChangeset")
			},
		},
		ReopenChangesetFunc: &ForkableChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.ReopenChangeset")
			},
		},
		UpdateChangesetFunc: &ForkableChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.UpdateChangeset")
			},
		},
		ValidateAuthenticatorFunc: &ForkableChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockForkableChangesetSource.ValidateAuthenticator")
			},
		},
		WithAuthenticatorFunc: &ForkableChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (ChangesetSource, error) {
				panic("unexpected invocation of MockForkableChangesetSource.WithAuthenticator")
			},
		},
	}
}

// NewMockForkableChangesetSourceFrom creates a new mock of the
// MockForkableChangesetSource interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockForkableChangesetSourceFrom(i ForkableChangesetSource) *MockForkableChangesetSource {
	return &MockForkableChangesetSource{
		CloseChangesetFunc: &ForkableChangesetSourceCloseChangesetFunc{
			defaultHook: i.CloseChangeset,
		},
		CreateChangesetFunc: &ForkableChangesetSourceCreateChangesetFunc{
			defaultHook: i.CreateChangeset,
		},
		CreateCommentFunc: &ForkableChangesetSourceCreateCommentFunc{
			defaultHook: i.CreateComment,
		},
		GetNamespaceForkFunc: &ForkableChangesetSourceGetNamespaceForkFunc{
			defaultHook: i.GetNamespaceFork,
		},
		GetUserForkFunc: &ForkableChangesetSourceGetUserForkFunc{
			defaultHook: i.GetUserFork,
		},
		GitserverPushConfigFunc: &ForkableChangesetSourceGitserverPushConfigFunc{
			defaultHook: i.GitserverPushConfig,
		},
		LoadChangesetFunc: &ForkableChangesetSourceLoadChangesetFunc{
			defaultHook: i.LoadChangeset,
		},
		MergeChangesetFunc: &ForkableChangesetSourceMergeChangesetFunc{
			defaultHook: i.MergeChangeset,
		},
		ReopenChangesetFunc: &ForkableChangesetSourceReopenChangesetFunc{
			defaultHook: i.ReopenChangeset,
		},
		UpdateChangesetFunc: &ForkableChangesetSourceUpdateChangesetFunc{
			defaultHook: i.UpdateChangeset,
		},
		ValidateAuthenticatorFunc: &ForkableChangesetSourceValidateAuthenticatorFunc{
			defaultHook: i.ValidateAuthenticator,
		},
		WithAuthenticatorFunc: &ForkableChangesetSourceWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// ForkableChangesetSourceCloseChangesetFunc describes the behavior when the
// CloseChangeset method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceCloseChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ForkableChangesetSourceCloseChangesetFuncCall
	mutex       sync.Mutex
}

// CloseChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) CloseChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.CloseChangesetFunc.nextHook()(v0, v1)
	m.CloseChangesetFunc.appendCall(ForkableChangesetSourceCloseChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceCloseChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceCloseChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceCloseChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceCloseChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceCloseChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceCloseChangesetFunc) appendCall(r0 ForkableChangesetSourceCloseChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceCloseChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceCloseChangesetFunc) History() []ForkableChangesetSourceCloseChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceCloseChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceCloseChangesetFuncCall is an object that describes
// an invocation of method CloseChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceCloseChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceCloseChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceCloseChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceCreateChangesetFunc describes the behavior when
// the CreateChangeset method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceCreateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) (bool, error)
	hooks       []func(context.Context, *Changeset) (bool, error)
	history     []ForkableChangesetSourceCreateChangesetFuncCall
	mutex       sync.Mutex
}

// CreateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) CreateChangeset(v0 context.Context, v1 *Changeset) (bool, error) {
	r0, r1 := m.CreateChangesetFunc.nextHook()(v0, v1)
	m.CreateChangesetFunc.appendCall(ForkableChangesetSourceCreateChangesetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceCreateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceCreateChangesetFunc) PushHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceCreateChangesetFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceCreateChangesetFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceCreateChangesetFunc) nextHook() func(context.Context, *Changeset) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceCreateChangesetFunc) appendCall(r0 ForkableChangesetSourceCreateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceCreateChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceCreateChangesetFunc) History() []ForkableChangesetSourceCreateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceCreateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceCreateChangesetFuncCall is an object that
// describes an invocation of method CreateChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceCreateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceCreateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceCreateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceCreateCommentFunc describes the behavior when the
// CreateComment method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceCreateCommentFunc struct {
	defaultHook func(context.Context, *Changeset, string) error
	hooks       []func(context.Context, *Changeset, string) error
	history     []ForkableChangesetSourceCreateCommentFuncCall
	mutex       sync.Mutex
}

// CreateComment delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) CreateComment(v0 context.Context, v1 *Changeset, v2 string) error {
	r0 := m.CreateCommentFunc.nextHook()(v0, v1, v2)
	m.CreateCommentFunc.appendCall(ForkableChangesetSourceCreateCommentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateComment method
// of the parent MockForkableChangesetSource instance is invoked and the
// hook queue is empty.
func (f *ForkableChangesetSourceCreateCommentFunc) SetDefaultHook(hook func(context.Context, *Changeset, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateComment method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceCreateCommentFunc) PushHook(hook func(context.Context, *Changeset, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceCreateCommentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceCreateCommentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

func (f *ForkableChangesetSourceCreateCommentFunc) nextHook() func(context.Context, *Changeset, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceCreateCommentFunc) appendCall(r0 ForkableChangesetSourceCreateCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceCreateCommentFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceCreateCommentFunc) History() []ForkableChangesetSourceCreateCommentFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceCreateCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceCreateCommentFuncCall is an object that describes
// an invocation of method CreateComment on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceCreateCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceCreateCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceCreateCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceGetNamespaceForkFunc describes the behavior when
// the GetNamespaceFork method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceGetNamespaceForkFunc struct {
	defaultHook func(context.Context, *types.Repo, string) (*types.Repo, error)
	hooks       []func(context.Context, *types.Repo, string) (*types.Repo, error)
	history     []ForkableChangesetSourceGetNamespaceForkFuncCall
	mutex       sync.Mutex
}

// GetNamespaceFork delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) GetNamespaceFork(v0 context.Context, v1 *types.Repo, v2 string) (*types.Repo, error) {
	r0, r1 := m.GetNamespaceForkFunc.nextHook()(v0, v1, v2)
	m.GetNamespaceForkFunc.appendCall(ForkableChangesetSourceGetNamespaceForkFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetNamespaceFork
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) SetDefaultHook(hook func(context.Context, *types.Repo, string) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetNamespaceFork method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) PushHook(hook func(context.Context, *types.Repo, string) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Repo, string) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, *types.Repo, string) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceGetNamespaceForkFunc) nextHook() func(context.Context, *types.Repo, string) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceGetNamespaceForkFunc) appendCall(r0 ForkableChangesetSourceGetNamespaceForkFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceGetNamespaceForkFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) History() []ForkableChangesetSourceGetNamespaceForkFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceGetNamespaceForkFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceGetNamespaceForkFuncCall is an object that
// describes an invocation of method GetNamespaceFork on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceGetNamespaceForkFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceGetNamespaceForkFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceGetNamespaceForkFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceGetUserForkFunc describes the behavior when the
// GetUserFork method of the parent MockForkableChangesetSource instance is
// invoked.
type ForkableChangesetSourceGetUserForkFunc struct {
	defaultHook func(context.Context, *types.Repo) (*types.Repo, error)
	hooks       []func(context.Context, *types.Repo) (*types.Repo, error)
	history     []ForkableChangesetSourceGetUserForkFuncCall
	mutex       sync.Mutex
}

// GetUserFork delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) GetUserFork(v0 context.Context, v1 *types.Repo) (*types.Repo, error) {
	r0, r1 := m.GetUserForkFunc.nextHook()(v0, v1)
	m.GetUserForkFunc.appendCall(ForkableChangesetSourceGetUserForkFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUserFork method
// of the parent MockForkableChangesetSource instance is invoked and the
// hook queue is empty.
func (f *ForkableChangesetSourceGetUserForkFunc) SetDefaultHook(hook func(context.Context, *types.Repo) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserFork method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceGetUserForkFunc) PushHook(hook func(context.Context, *types.Repo) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceGetUserForkFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Repo) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceGetUserForkFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, *types.Repo) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceGetUserForkFunc) nextHook() func(context.Context, *types.Repo) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceGetUserForkFunc) appendCall(r0 ForkableChangesetSourceGetUserForkFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ForkableChangesetSourceGetUserForkFuncCall
// objects describing the invocations of this function.
func (f *ForkableChangesetSourceGetUserForkFunc) History() []ForkableChangesetSourceGetUserForkFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceGetUserForkFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceGetUserForkFuncCall is an object that describes an
// invocation of method GetUserFork on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceGetUserForkFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceGetUserForkFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceGetUserForkFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceGitserverPushConfigFunc describes the behavior
// when the GitserverPushConfig method of the parent
// MockForkableChangesetSource instance is invoked.
type ForkableChangesetSourceGitserverPushConfigFunc struct {
	defaultHook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	hooks       []func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	history     []ForkableChangesetSourceGitserverPushConfigFuncCall
	mutex       sync.Mutex
}

// GitserverPushConfig delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) GitserverPushConfig(v0 context.Context, v1 database.ExternalServiceStore, v2 *types.Repo) (*protocol.PushConfig, error) {
	r0, r1 := m.GitserverPushConfigFunc.nextHook()(v0, v1, v2)
	m.GitserverPushConfigFunc.appendCall(ForkableChangesetSourceGitserverPushConfigFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GitserverPushConfig
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) SetDefaultHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverPushConfig method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) PushHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) SetDefaultReturn(r0 *protocol.PushConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) PushReturn(r0 *protocol.PushConfig, r1 error) {
	f.PushHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceGitserverPushConfigFunc) nextHook() func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceGitserverPushConfigFunc) appendCall(r0 ForkableChangesetSourceGitserverPushConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceGitserverPushConfigFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) History() []ForkableChangesetSourceGitserverPushConfigFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceGitserverPushConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceGitserverPushConfigFuncCall is an object that
// describes an invocation of method GitserverPushConfig on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceGitserverPushConfigFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalServiceStore
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.PushConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceGitserverPushConfigFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceGitserverPushConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceLoadChangesetFunc describes the behavior when the
// LoadChangeset method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceLoadChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ForkableChangesetSourceLoadChangesetFuncCall
	mutex       sync.Mutex
}

// LoadChangeset delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) LoadChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.LoadChangesetFunc.nextHook()(v0, v1)
	m.LoadChangesetFunc.appendCall(ForkableChangesetSourceLoadChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadChangeset method
// of the parent MockForkableChangesetSource instance is invoked and the
// hook queue is empty.
func (f *ForkableChangesetSourceLoadChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceLoadChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceLoadChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceLoadChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceLoadChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceLoadChangesetFunc) appendCall(r0 ForkableChangesetSourceLoadChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceLoadChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceLoadChangesetFunc) History() []ForkableChangesetSourceLoadChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceLoadChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceLoadChangesetFuncCall is an object that describes
// an invocation of method LoadChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceLoadChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceLoadChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceLoadChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceMergeChangesetFunc describes the behavior when the
// MergeChangeset method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceMergeChangesetFunc struct {
	defaultHook func(context.Context, *Changeset, bool) error
	hooks       []func(context.Context, *Changeset, bool) error
	history     []ForkableChangesetSourceMergeChangesetFuncCall
	mutex       sync.Mutex
}

// MergeChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) MergeChangeset(v0 context.Context, v1 *Changeset, v2 bool) error {
	r0 := m.MergeChangesetFunc.nextHook()(v0, v1, v2)
	m.MergeChangesetFunc.appendCall(ForkableChangesetSourceMergeChangesetFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MergeChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceMergeChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceMergeChangesetFunc) PushHook(hook func(context.Context, *Changeset, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceMergeChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceMergeChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

func (f *ForkableChangesetSourceMergeChangesetFunc) nextHook() func(context.Context, *Changeset, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceMergeChangesetFunc) appendCall(r0 ForkableChangesetSourceMergeChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceMergeChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceMergeChangesetFunc) History() []ForkableChangesetSourceMergeChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceMergeChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceMergeChangesetFuncCall is an object that describes
// an invocation of method MergeChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceMergeChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceMergeChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceMergeChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceReopenChangesetFunc describes the behavior when
// the ReopenChangeset method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceReopenChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ForkableChangesetSourceReopenChangesetFuncCall
	mutex       sync.Mutex
}

// ReopenChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) ReopenChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.ReopenChangesetFunc.nextHook()(v0, v1)
	m.ReopenChangesetFunc.appendCall(ForkableChangesetSourceReopenChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReopenChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceReopenChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReopenChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceReopenChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceReopenChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceReopenChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceReopenChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceReopenChangesetFunc) appendCall(r0 ForkableChangesetSourceReopenChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceReopenChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceReopenChangesetFunc) History() []ForkableChangesetSourceReopenChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceReopenChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceReopenChangesetFuncCall is an object that
// describes an invocation of method ReopenChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceReopenChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceReopenChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceReopenChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceUpdateChangesetFunc describes the behavior when
// the UpdateChangeset method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceUpdateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ForkableChangesetSourceUpdateChangesetFuncCall
	mutex       sync.Mutex
}

// UpdateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) UpdateChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.UpdateChangesetFunc.nextHook()(v0, v1)
	m.UpdateChangesetFunc.appendCall(ForkableChangesetSourceUpdateChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceUpdateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceUpdateChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceUpdateChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceUpdateChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceUpdateChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceUpdateChangesetFunc) appendCall(r0 ForkableChangesetSourceUpdateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceUpdateChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceUpdateChangesetFunc) History() []ForkableChangesetSourceUpdateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceUpdateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceUpdateChangesetFuncCall is an object that
// describes an invocation of method UpdateChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceUpdateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceUpdateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceUpdateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceValidateAuthenticatorFunc describes the behavior
// when the ValidateAuthenticator method of the parent
// MockForkableChangesetSource instance is invoked.
type ForkableChangesetSourceValidateAuthenticatorFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ForkableChangesetSourceValidateAuthenticatorFuncCall
	mutex       sync.Mutex
}

// ValidateAuthenticator delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) ValidateAuthenticator(v0 context.Context) error {
	r0 := m.ValidateAuthenticatorFunc.nextHook()(v0)
	m.ValidateAuthenticatorFunc.appendCall(ForkableChangesetSourceValidateAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidateAuthenticator method of the parent MockForkableChangesetSource
// instance is invoked and the hook queue is empty.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidateAuthenticator method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ForkableChangesetSourceValidateAuthenticatorFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceValidateAuthenticatorFunc) appendCall(r0 ForkableChangesetSourceValidateAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceValidateAuthenticatorFuncCall objects describing
// the invocations of this function.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) History() []ForkableChangesetSourceValidateAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceValidateAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceValidateAuthenticatorFuncCall is an object that
// describes an invocation of method ValidateAuthenticator on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceValidateAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceValidateAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceValidateAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceWithAuthenticatorFunc describes the behavior when
// the WithAuthenticator method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) (ChangesetSource, error)
	hooks       []func(auth.Authenticator) (ChangesetSource, error)
	history     []ForkableChangesetSourceWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) WithAuthenticator(v0 auth.Authenticator) (ChangesetSource, error) {
	r0, r1 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(ForkableChangesetSourceWithAuthenticatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) SetDefaultReturn(r0 ChangesetSource, r1 error) {
	f.SetDefaultHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) PushReturn(r0 ChangesetSource, r1 error) {
	f.PushHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceWithAuthenticatorFunc) nextHook() func(auth.Authenticator) (ChangesetSource, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceWithAuthenticatorFunc) appendCall(r0 ForkableChangesetSourceWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceWithAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) History() []ForkableChangesetSourceWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceWithAuthenticatorFuncCall is an object that
// describes an invocation of method WithAuthenticator on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ChangesetSource
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSourcerStore is a mock implementation of the SourcerStore interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/sources)
// used for unit testing.
type MockSourcerStore struct {
	// DatabaseDBFunc is an instance of a mock function object controlling
	// the behavior of the method DatabaseDB.
	DatabaseDBFunc *SourcerStoreDatabaseDBFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *SourcerStoreExternalServicesFunc
	// GetBatchChangeFunc is an instance of a mock function object
	// controlling the behavior of the method GetBatchChange.
	GetBatchChangeFunc *SourcerStoreGetBatchChangeFunc
	// GetExternalServiceIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetExternalServiceIDs.
	GetExternalServiceIDsFunc *SourcerStoreGetExternalServiceIDsFunc
	// GetSiteCredentialFunc is an instance of a mock function object
	// controlling the behavior of the method GetSiteCredential.
	GetSiteCredentialFunc *SourcerStoreGetSiteCredentialFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *SourcerStoreReposFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *SourcerStoreUserCredentialsFunc
}

// NewMockSourcerStore creates a new mock of the SourcerStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockSourcerStore() *MockSourcerStore {
	return &MockSourcerStore{
		DatabaseDBFunc: &SourcerStoreDatabaseDBFunc{
			defaultHook: func() (r0 database.DB) {
				return
			},
		},
		ExternalServicesFunc: &SourcerStoreExternalServicesFunc{
			defaultHook: func() (r0 database.ExternalServiceStore) {
				return
			},
		},
		GetBatchChangeFunc: &SourcerStoreGetBatchChangeFunc{
			defaultHook: func(context.Context, store.GetBatchChangeOpts) (r0 *types1.BatchChange, r1 error) {
				return
			},
		},
		GetExternalServiceIDsFunc: &SourcerStoreGetExternalServiceIDsFunc{
			defaultHook: func(context.Context, store.GetExternalServiceIDsOpts) (r0 []int64, r1 error) {
				return
			},
		},
		GetSiteCredentialFunc: &SourcerStoreGetSiteCredentialFunc{
			defaultHook: func(context.Context, store.GetSiteCredentialOpts) (r0 *types1.SiteCredential, r1 error) {
				return
			},
		},
		ReposFunc: &SourcerStoreReposFunc{
			defaultHook: func() (r0 database.RepoStore) {
				return
			},
		},
		UserCredentialsFunc: &SourcerStoreUserCredentialsFunc{
			defaultHook: func() (r0 database.UserCredentialsStore) {
				return
			},
		},
	}
}

// NewStrictMockSourcerStore creates a new mock of the SourcerStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSourcerStore() *MockSourcerStore {
	return &MockSourcerStore{
		DatabaseDBFunc: &SourcerStoreDatabaseDBFunc{
			defaultHook: func() database.DB {
				panic("unexpected invocation of MockSourcerStore.DatabaseDB")
			},
		},
		ExternalServicesFunc: &SourcerStoreExternalServicesFunc{
			defaultHook: func() database.ExternalServiceStore {
				panic("unexpected invocation of MockSourcerStore.ExternalServices")
			},
		},
		GetBatchChangeFunc: &SourcerStoreGetBatchChangeFunc{
			defaultHook: func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
				panic("unexpected invocation of MockSourcerStore.GetBatchChange")
			},
		},
		GetExternalServiceIDsFunc: &SourcerStoreGetExternalServiceIDsFunc{
			defaultHook: func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
				panic("unexpected invocation of MockSourcerStore.GetExternalServiceIDs")
			},
		},
		GetSiteCredentialFunc: &SourcerStoreGetSiteCredentialFunc{
			defaultHook: func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
				panic("unexpected invocation of MockSourcerStore.GetSiteCredential")
			},
		},
		ReposFunc: &SourcerStoreReposFunc{
			defaultHook: func() database.RepoStore {
				panic("unexpected invocation of MockSourcerStore.Repos")
			},
		},
		UserCredentialsFunc: &SourcerStoreUserCredentialsFunc{
			defaultHook: func() database.UserCredentialsStore {
				panic("unexpected invocation of MockSourcerStore.UserCredentials")
			},
		},
	}
}

// NewMockSourcerStoreFrom creates a new mock of the MockSourcerStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockSourcerStoreFrom(i SourcerStore) *MockSourcerStore {
	return &MockSourcerStore{
		DatabaseDBFunc: &SourcerStoreDatabaseDBFunc{
			defaultHook: i.DatabaseDB,
		},
		ExternalServicesFunc: &SourcerStoreExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		GetBatchChangeFunc: &SourcerStoreGetBatchChangeFunc{
			defaultHook: i.GetBatchChange,
		},
		GetExternalServiceIDsFunc: &SourcerStoreGetExternalServiceIDsFunc{
			defaultHook: i.GetExternalServiceIDs,
		},
		GetSiteCredentialFunc: &SourcerStoreGetSiteCredentialFunc{
			defaultHook: i.GetSiteCredential,
		},
		ReposFunc: &SourcerStoreReposFunc{
			defaultHook: i.Repos,
		},
		UserCredentialsFunc: &SourcerStoreUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
	}
}

// SourcerStoreDatabaseDBFunc describes the behavior when the DatabaseDB
// method of the parent MockSourcerStore instance is invoked.
type SourcerStoreDatabaseDBFunc struct {
	defaultHook func() database.DB
	hooks       []func() database.DB
	history     []SourcerStoreDatabaseDBFuncCall
	mutex       sync.Mutex
}

// DatabaseDB delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSourcerStore) DatabaseDB() database.DB {
	r0 := m.DatabaseDBFunc.nextHook()()
	m.DatabaseDBFunc.appendCall(SourcerStoreDatabaseDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the DatabaseDB method of
// the parent MockSourcerStore instance is invoked and the hook queue is
// empty.
func (f *SourcerStoreDatabaseDBFunc) SetDefaultHook(hook func() database.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DatabaseDB method of the parent MockSourcerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SourcerStoreDatabaseDBFunc) PushHook(hook func() database.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreDatabaseDBFunc) SetDefaultReturn(r0 database.DB) {
	f.SetDefaultHook(func() database.DB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreDatabaseDBFunc) PushReturn(r0 database.DB) {
	f.PushHook(func() database.DB {
		return r0
	})
}

func (f *SourcerStoreDatabaseDBFunc) nextHook() func() database.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreDatabaseDBFunc) appendCall(r0 SourcerStoreDatabaseDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreDatabaseDBFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreDatabaseDBFunc) History() []SourcerStoreDatabaseDBFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreDatabaseDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreDatabaseDBFuncCall is an object that describes an invocation
// of method DatabaseDB on an instance of MockSourcerStore.
type SourcerStoreDatabaseDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreDatabaseDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreDatabaseDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreExternalServicesFunc describes the behavior when the
// ExternalServices method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreExternalServicesFunc struct {
	defaultHook func() database.ExternalServiceStore
	hooks       []func() database.ExternalServiceStore
	history     []SourcerStoreExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) ExternalServices() database.ExternalServiceStore {
	r0 := m.ExternalServicesFunc.nextHook()()
	m.ExternalServicesFunc.appendCall(SourcerStoreExternalServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreExternalServicesFunc) SetDefaultHook(hook func() database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreExternalServicesFunc) PushHook(hook func() database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreExternalServicesFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func() database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreExternalServicesFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func() database.ExternalServiceStore {
		return r0
	})
}

func (f *SourcerStoreExternalServicesFunc) nextHook() func() database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreExternalServicesFunc) appendCall(r0 SourcerStoreExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreExternalServicesFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreExternalServicesFunc) History() []SourcerStoreExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreExternalServicesFuncCall is an object that describes an
// invocation of method ExternalServices on an instance of MockSourcerStore.
type SourcerStoreExternalServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreGetBatchChangeFunc describes the behavior when the
// GetBatchChange method of the parent MockSourcerStore instance is invoked.
type SourcerStoreGetBatchChangeFunc struct {
	defaultHook func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)
	hooks       []func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)
	history     []SourcerStoreGetBatchChangeFuncCall
	mutex       sync.Mutex
}

// GetBatchChange delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetBatchChange(v0 context.Context, v1 store.GetBatchChangeOpts) (*types1.BatchChange, error) {
	r0, r1 := m.GetBatchChangeFunc.nextHook()(v0, v1)
	m.GetBatchChangeFunc.appendCall(SourcerStoreGetBatchChangeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBatchChange
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreGetBatchChangeFunc) SetDefaultHook(hook func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBatchChange method of the parent MockSourcerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SourcerStoreGetBatchChangeFunc) PushHook(hook func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetBatchChangeFunc) SetDefaultReturn(r0 *types1.BatchChange, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetBatchChangeFunc) PushReturn(r0 *types1.BatchChange, r1 error) {
	f.PushHook(func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetBatchChangeFunc) nextHook() func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetBatchChangeFunc) appendCall(r0 SourcerStoreGetBatchChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetBatchChangeFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreGetBatchChangeFunc) History() []SourcerStoreGetBatchChangeFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetBatchChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetBatchChangeFuncCall is an object that describes an
// invocation of method GetBatchChange on an instance of MockSourcerStore.
type SourcerStoreGetBatchChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetBatchChangeOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types1.BatchChange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetBatchChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetBatchChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreGetExternalServiceIDsFunc describes the behavior when the
// GetExternalServiceIDs method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreGetExternalServiceIDsFunc struct {
	defaultHook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)
	hooks       []func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)
	history     []SourcerStoreGetExternalServiceIDsFuncCall
	mutex       sync.Mutex
}

// GetExternalServiceIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetExternalServiceIDs(v0 context.Context, v1 store.GetExternalServiceIDsOpts) ([]int64, error) {
	r0, r1 := m.GetExternalServiceIDsFunc.nextHook()(v0, v1)
	m.GetExternalServiceIDsFunc.appendCall(SourcerStoreGetExternalServiceIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetExternalServiceIDs method of the parent MockSourcerStore instance is
// invoked and the hook queue is empty.
func (f *SourcerStoreGetExternalServiceIDsFunc) SetDefaultHook(hook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetExternalServiceIDs method of the parent MockSourcerStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SourcerStoreGetExternalServiceIDsFunc) PushHook(hook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetExternalServiceIDsFunc) SetDefaultReturn(r0 []int64, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetExternalServiceIDsFunc) PushReturn(r0 []int64, r1 error) {
	f.PushHook(func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetExternalServiceIDsFunc) nextHook() func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetExternalServiceIDsFunc) appendCall(r0 SourcerStoreGetExternalServiceIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetExternalServiceIDsFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreGetExternalServiceIDsFunc) History() []SourcerStoreGetExternalServiceIDsFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetExternalServiceIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetExternalServiceIDsFuncCall is an object that describes an
// invocation of method GetExternalServiceIDs on an instance of
// MockSourcerStore.
type SourcerStoreGetExternalServiceIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetExternalServiceIDsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetExternalServiceIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetExternalServiceIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreGetSiteCredentialFunc describes the behavior when the
// GetSiteCredential method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreGetSiteCredentialFunc struct {
	defaultHook func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)
	hooks       []func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)
	history     []SourcerStoreGetSiteCredentialFuncCall
	mutex       sync.Mutex
}

// GetSiteCredential delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetSiteCredential(v0 context.Context, v1 store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
	r0, r1 := m.GetSiteCredentialFunc.nextHook()(v0, v1)
	m.GetSiteCredentialFunc.appendCall(SourcerStoreGetSiteCredentialFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSiteCredential
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreGetSiteCredentialFunc) SetDefaultHook(hook func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSiteCredential method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreGetSiteCredentialFunc) PushHook(hook func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetSiteCredentialFunc) SetDefaultReturn(r0 *types1.SiteCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetSiteCredentialFunc) PushReturn(r0 *types1.SiteCredential, r1 error) {
	f.PushHook(func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetSiteCredentialFunc) nextHook() func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetSiteCredentialFunc) appendCall(r0 SourcerStoreGetSiteCredentialFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetSiteCredentialFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreGetSiteCredentialFunc) History() []SourcerStoreGetSiteCredentialFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetSiteCredentialFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetSiteCredentialFuncCall is an object that describes an
// invocation of method GetSiteCredential on an instance of
// MockSourcerStore.
type SourcerStoreGetSiteCredentialFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetSiteCredentialOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types1.SiteCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetSiteCredentialFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetSiteCredentialFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreReposFunc describes the behavior when the Repos method of the
// parent MockSourcerStore instance is invoked.
type SourcerStoreReposFunc struct {
	defaultHook func() database.RepoStore
	hooks       []func() database.RepoStore
	history     []SourcerStoreReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSourcerStore) Repos() database.RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(SourcerStoreReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockSourcerStore instance is invoked and the hook queue is empty.
func (f *SourcerStoreReposFunc) SetDefaultHook(hook func() database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockSourcerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SourcerStoreReposFunc) PushHook(hook func() database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreReposFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func() database.RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreReposFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func() database.RepoStore {
		return r0
	})
}

func (f *SourcerStoreReposFunc) nextHook() func() database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreReposFunc) appendCall(r0 SourcerStoreReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreReposFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreReposFunc) History() []SourcerStoreReposFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreReposFuncCall is an object that describes an invocation of
// method Repos on an instance of MockSourcerStore.
type SourcerStoreReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreUserCredentialsFunc describes the behavior when the
// UserCredentials method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreUserCredentialsFunc struct {
	defaultHook func() database.UserCredentialsStore
	hooks       []func() database.UserCredentialsStore
	history     []SourcerStoreUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) UserCredentials() database.UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()()
	m.UserCredentialsFunc.appendCall(SourcerStoreUserCredentialsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreUserCredentialsFunc) SetDefaultHook(hook func() database.UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreUserCredentialsFunc) PushHook(hook func() database.UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreUserCredentialsFunc) SetDefaultReturn(r0 database.UserCredentialsStore) {
	f.SetDefaultHook(func() database.UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreUserCredentialsFunc) PushReturn(r0 database.UserCredentialsStore) {
	f.PushHook(func() database.UserCredentialsStore {
		return r0
	})
}

func (f *SourcerStoreUserCredentialsFunc) nextHook() func() database.UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreUserCredentialsFunc) appendCall(r0 SourcerStoreUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreUserCredentialsFunc) History() []SourcerStoreUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreUserCredentialsFuncCall is an object that describes an
// invocation of method UserCredentials on an instance of MockSourcerStore.
type SourcerStoreUserCredentialsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockBitbucketCloudClient is a mock implementation of the Client interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/extsvc/bitbucketcloud) used
// for unit testing.
type MockBitbucketCloudClient struct {
	// AuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method Authenticator.
	AuthenticatorFunc *BitbucketCloudClientAuthenticatorFunc
	// CreatePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePullRequest.
	CreatePullRequestFunc *BitbucketCloudClientCreatePullRequestFunc
	// CreatePullRequestCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePullRequestComment.
	CreatePullRequestCommentFunc *BitbucketCloudClientCreatePullRequestCommentFunc
	// CurrentUserFunc is an instance of a mock function object controlling
	// the behavior of the method CurrentUser.
	CurrentUserFunc *BitbucketCloudClientCurrentUserFunc
	// DeclinePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method DeclinePullRequest.
	DeclinePullRequestFunc *BitbucketCloudClientDeclinePullRequestFunc
	// ForkRepositoryFunc is an instance of a mock function object
	// controlling the behavior of the method ForkRepository.
	ForkRepositoryFunc *BitbucketCloudClientForkRepositoryFunc
	// GetPullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method GetPullRequest.
	GetPullRequestFunc *BitbucketCloudClientGetPullRequestFunc
	// GetPullRequestStatusesFunc is an instance of a mock function object
	// controlling the behavior of the method GetPullRequestStatuses.
	GetPullRequestStatusesFunc *BitbucketCloudClientGetPullRequestStatusesFunc
	// MergePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method MergePullRequest.
	MergePullRequestFunc *BitbucketCloudClientMergePullRequestFunc
	// PingFunc is an instance of a mock function object controlling the
	// behavior of the method Ping.
	PingFunc *BitbucketCloudClientPingFunc
	// RepoFunc is an instance of a mock function object controlling the
	// behavior of the method Repo.
	RepoFunc *BitbucketCloudClientRepoFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *BitbucketCloudClientReposFunc
	// UpdatePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePullRequest.
	UpdatePullRequestFunc *BitbucketCloudClientUpdatePullRequestFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *BitbucketCloudClientWithAuthenticatorFunc
}

// NewMockBitbucketCloudClient creates a new mock of the Client interface.
// All methods return zero values for all results, unless overwritten.
func NewMockBitbucketCloudClient() *MockBitbucketCloudClient {
	return &MockBitbucketCloudClient{
		AuthenticatorFunc: &BitbucketCloudClientAuthenticatorFunc{
			defaultHook: func() (r0 auth.Authenticator) {
				return
			},
		},
		CreatePullRequestFunc: &BitbucketCloudClientCreatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		CreatePullRequestCommentFunc: &BitbucketCloudClientCreatePullRequestCommentFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (r0 *bitbucketcloud.Comment, r1 error) {
				return
			},
		},
		CurrentUserFunc: &BitbucketCloudClientCurrentUserFunc{
			defaultHook: func(context.Context) (r0 *bitbucketcloud.User, r1 error) {
				return
			},
		},
		DeclinePullRequestFunc: &BitbucketCloudClientDeclinePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		ForkRepositoryFunc: &BitbucketCloudClientForkRepositoryFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (r0 *bitbucketcloud.Repo, r1 error) {
				return
			},
		},
		GetPullRequestFunc: &BitbucketCloudClientGetPullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		GetPullRequestStatusesFunc: &BitbucketCloudClientGetPullRequestStatusesFunc{
			defaultHook: func(*bitbucketcloud.Repo, int64) (r0 *bitbucketcloud.PaginatedResultSet, r1 error) {
				return
			},
		},
		MergePullRequestFunc: &BitbucketCloudClientMergePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		PingFunc: &BitbucketCloudClientPingFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		RepoFunc: &BitbucketCloudClientRepoFunc{
			defaultHook: func(context.Context, string, string) (r0 *bitbucketcloud.Repo, r1 error) {
				return
			},
		},
		ReposFunc: &BitbucketCloudClientReposFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken, string) (r0 []*bitbucketcloud.Repo, r1 *bitbucketcloud.PageToken, r2 error) {
				return
			},
		},
		UpdatePullRequestFunc: &BitbucketCloudClientUpdatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		WithAuthenticatorFunc: &BitbucketCloudClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 bitbucketcloud.Client) {
				return
			},
		},
	}
}

// NewStrictMockBitbucketCloudClient creates a new mock of the Client
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockBitbucketCloudClient() *MockBitbucketCloudClient {
	return &MockBitbucketCloudClient{
		AuthenticatorFunc: &BitbucketCloudClientAuthenticatorFunc{
			defaultHook: func() auth.Authenticator {
				panic("unexpected invocation of MockBitbucketCloudClient.Authenticator")
			},
		},
		CreatePullRequestFunc: &BitbucketCloudClientCreatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CreatePullRequest")
			},
		},
		CreatePullRequestCommentFunc: &BitbucketCloudClientCreatePullRequestCommentFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CreatePullRequestComment")
			},
		},
		CurrentUserFunc: &BitbucketCloudClientCurrentUserFunc{
			defaultHook: func(context.Context) (*bitbucketcloud.User, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CurrentUser")
			},
		},
		DeclinePullRequestFunc: &BitbucketCloudClientDeclinePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.DeclinePullRequest")
			},
		},
		ForkRepositoryFunc: &BitbucketCloudClientForkRepositoryFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.ForkRepository")
			},
		},
		GetPullRequestFunc: &BitbucketCloudClientGetPullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.GetPullRequest")
			},
		},
		GetPullRequestStatusesFunc: &BitbucketCloudClientGetPullRequestStatusesFunc{
			defaultHook: func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.GetPullRequestStatuses")
			},
		},
		MergePullRequestFunc: &BitbucketCloudClientMergePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.MergePullRequest")
			},
		},
		PingFunc: &BitbucketCloudClientPingFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockBitbucketCloudClient.Ping")
			},
		},
		RepoFunc: &BitbucketCloudClientRepoFunc{
			defaultHook: func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.Repo")
			},
		},
		ReposFunc: &BitbucketCloudClientReposFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.Repos")
			},
		},
		UpdatePullRequestFunc: &BitbucketCloudClientUpdatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.UpdatePullRequest")
			},
		},
		WithAuthenticatorFunc: &BitbucketCloudClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) bitbucketcloud.Client {
				panic("unexpected invocation of MockBitbucketCloudClient.WithAuthenticator")
			},
		},
	}
}

// NewMockBitbucketCloudClientFrom creates a new mock of the
// MockBitbucketCloudClient interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockBitbucketCloudClientFrom(i bitbucketcloud.Client) *MockBitbucketCloudClient {
	return &MockBitbucketCloudClient{
		AuthenticatorFunc: &BitbucketCloudClientAuthenticatorFunc{
			defaultHook: i.Authenticator,
		},
		CreatePullRequestFunc: &BitbucketCloudClientCreatePullRequestFunc{
			defaultHook: i.CreatePullRequest,
		},
		CreatePullRequestCommentFunc: &BitbucketCloudClientCreatePullRequestCommentFunc{
			defaultHook: i.CreatePullRequestComment,
		},
		CurrentUserFunc: &BitbucketCloudClientCurrentUserFunc{
			defaultHook: i.CurrentUser,
		},
		DeclinePullRequestFunc: &BitbucketCloudClientDeclinePullRequestFunc{
			defaultHook: i.DeclinePullRequest,
		},
		ForkRepositoryFunc: &BitbucketCloudClientForkRepositoryFunc{
			defaultHook: i.ForkRepository,
		},
		GetPullRequestFunc: &BitbucketCloudClientGetPullRequestFunc{
			defaultHook: i.GetPullRequest,
		},
		GetPullRequestStatusesFunc: &BitbucketCloudClientGetPullRequestStatusesFunc{
			defaultHook: i.GetPullRequestStatuses,
		},
		MergePullRequestFunc: &BitbucketCloudClientMergePullRequestFunc{
			defaultHook: i.MergePullRequest,
		},
		PingFunc: &BitbucketCloudClientPingFunc{
			defaultHook: i.Ping,
		},
		RepoFunc: &BitbucketCloudClientRepoFunc{
			defaultHook: i.Repo,
		},
		ReposFunc: &BitbucketCloudClientReposFunc{
			defaultHook: i.Repos,
		},
		UpdatePullRequestFunc: &BitbucketCloudClientUpdatePullRequestFunc{
			defaultHook: i.UpdatePullRequest,
		},
		WithAuthenticatorFunc: &BitbucketCloudClientWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// BitbucketCloudClientAuthenticatorFunc describes the behavior when the
// Authenticator method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientAuthenticatorFunc struct {
	defaultHook func() auth.Authenticator
	hooks       []func() auth.Authenticator
	history     []BitbucketCloudClientAuthenticatorFuncCall
	mutex       sync.Mutex
}

// Authenticator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Authenticator() auth.Authenticator {
	r0 := m.AuthenticatorFunc.nextHook()()
	m.AuthenticatorFunc.appendCall(BitbucketCloudClientAuthenticatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authenticator method
// of the parent MockBitbucketCloudClient instance is invoked and the hook
// queue is empty.
func (f *BitbucketCloudClientAuthenticatorFunc) SetDefaultHook(hook func() auth.Authenticator) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authenticator method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientAuthenticatorFunc) PushHook(hook func() auth.Authenticator) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientAuthenticatorFunc) SetDefaultReturn(r0 auth.Authenticator) {
	f.SetDefaultHook(func() auth.Authenticator {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientAuthenticatorFunc) PushReturn(r0 auth.Authenticator) {
	f.PushHook(func() auth.Authenticator {
		return r0
	})
}

func (f *BitbucketCloudClientAuthenticatorFunc) nextHook() func() auth.Authenticator {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientAuthenticatorFunc) appendCall(r0 BitbucketCloudClientAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientAuthenticatorFunc) History() []BitbucketCloudClientAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientAuthenticatorFuncCall is an object that describes an
// invocation of method Authenticator on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientAuthenticatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 auth.Authenticator
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketCloudClientCreatePullRequestFunc describes the behavior when the
// CreatePullRequest method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientCreatePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientCreatePullRequestFuncCall
	mutex       sync.Mutex
}

// CreatePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CreatePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.CreatePullRequestFunc.nextHook()(v0, v1, v2)
	m.CreatePullRequestFunc.appendCall(BitbucketCloudClientCreatePullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreatePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientCreatePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientCreatePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCreatePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCreatePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientCreatePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCreatePullRequestFunc) appendCall(r0 BitbucketCloudClientCreatePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientCreatePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientCreatePullRequestFunc) History() []BitbucketCloudClientCreatePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCreatePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCreatePullRequestFuncCall is an object that describes
// an invocation of method CreatePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientCreatePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bitbucketcloud.PullRequestInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientCreatePullRequestCommentFunc describes the behavior
// when the CreatePullRequestComment method of the parent
// MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientCreatePullRequestCommentFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)
	history     []BitbucketCloudClientCreatePullRequestCommentFuncCall
	mutex       sync.Mutex
}

// CreatePullRequestComment delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CreatePullRequestComment(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64, v3 bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
	r0, r1 := m.CreatePullRequestCommentFunc.nextHook()(v0, v1, v2, v3)
	m.CreatePullRequestCommentFunc.appendCall(BitbucketCloudClientCreatePullRequestCommentFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreatePullRequestComment method of the parent MockBitbucketCloudClient
// instance is invoked and the hook queue is empty.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePullRequestComment method of the parent MockBitbucketCloudClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) SetDefaultReturn(r0 *bitbucketcloud.Comment, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) PushReturn(r0 *bitbucketcloud.Comment, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientCreatePullRequestCommentFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCreatePullRequestCommentFunc) appendCall(r0 BitbucketCloudClientCreatePullRequestCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientCreatePullRequestCommentFuncCall objects describing
// the invocations of this function.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) History() []BitbucketCloudClientCreatePullRequestCommentFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCreatePullRequestCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCreatePullRequestCommentFuncCall is an object that
// describes an invocation of method CreatePullRequestComment on an instance
// of MockBitbucketCloudClient.
type BitbucketCloudClientCreatePullRequestCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bitbucketcloud.CommentInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.Comment
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientCurrentUserFunc describes the behavior when the
// CurrentUser method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientCurrentUserFunc struct {
	defaultHook func(context.Context) (*bitbucketcloud.User, error)
	hooks       []func(context.Context) (*bitbucketcloud.User, error)
	history     []BitbucketCloudClientCurrentUserFuncCall
	mutex       sync.Mutex
}

// CurrentUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CurrentUser(v0 context.Context) (*bitbucketcloud.User, error) {
	r0, r1 := m.CurrentUserFunc.nextHook()(v0)
	m.CurrentUserFunc.appendCall(BitbucketCloudClientCurrentUserFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CurrentUser method
// of the parent MockBitbucketCloudClient instance is invoked and the hook
// queue is empty.
func (f *BitbucketCloudClientCurrentUserFunc) SetDefaultHook(hook func(context.Context) (*bitbucketcloud.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CurrentUser method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientCurrentUserFunc) PushHook(hook func(context.Context) (*bitbucketcloud.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCurrentUserFunc) SetDefaultReturn(r0 *bitbucketcloud.User, r1 error) {
	f.SetDefaultHook(func(context.Context) (*bitbucketcloud.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCurrentUserFunc) PushReturn(r0 *bitbucketcloud.User, r1 error) {
	f.PushHook(func(context.Context) (*bitbucketcloud.User, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientCurrentUserFunc) nextHook() func(context.Context) (*bitbucketcloud.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCurrentUserFunc) appendCall(r0 BitbucketCloudClientCurrentUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientCurrentUserFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientCurrentUserFunc) History() []BitbucketCloudClientCurrentUserFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCurrentUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCurrentUserFuncCall is an object that describes an
// invocation of method CurrentUser on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientCurrentUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCurrentUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCurrentUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientDeclinePullRequestFunc describes the behavior when
// the DeclinePullRequest method of the parent MockBitbucketCloudClient
// instance is invoked.
type BitbucketCloudClientDeclinePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientDeclinePullRequestFuncCall
	mutex       sync.Mutex
}

// DeclinePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) DeclinePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.DeclinePullRequestFunc.nextHook()(v0, v1, v2)
	m.DeclinePullRequestFunc.appendCall(BitbucketCloudClientDeclinePullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeclinePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientDeclinePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeclinePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientDeclinePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientDeclinePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientDeclinePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientDeclinePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientDeclinePullRequestFunc) appendCall(r0 BitbucketCloudClientDeclinePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientDeclinePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientDeclinePullRequestFunc) History() []BitbucketCloudClientDeclinePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientDeclinePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientDeclinePullRequestFuncCall is an object that
// describes an invocation of method DeclinePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientDeclinePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientDeclinePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientDeclinePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientForkRepositoryFunc describes the behavior when the
// ForkRepository method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientForkRepositoryFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)
	history     []BitbucketCloudClientForkRepositoryFuncCall
	mutex       sync.Mutex
}

// ForkRepository delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) ForkRepository(v0 context.Context, v1 *bitbucketcloud.Repo, v2 bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
	r0, r1 := m.ForkRepositoryFunc.nextHook()(v0, v1, v2)
	m.ForkRepositoryFunc.appendCall(BitbucketCloudClientForkRepositoryFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ForkRepository
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientForkRepositoryFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ForkRepository method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientForkRepositoryFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientForkRepositoryFunc) SetDefaultReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientForkRepositoryFunc) PushReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientForkRepositoryFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientForkRepositoryFunc) appendCall(r0 BitbucketCloudClientForkRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientForkRepositoryFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientForkRepositoryFunc) History() []BitbucketCloudClientForkRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientForkRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientForkRepositoryFuncCall is an object that describes an
// invocation of method ForkRepository on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientForkRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bitbucketcloud.ForkInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientForkRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientForkRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientGetPullRequestFunc describes the behavior when the
// GetPullRequest method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientGetPullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientGetPullRequestFuncCall
	mutex       sync.Mutex
}

// GetPullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) GetPullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.GetPullRequestFunc.nextHook()(v0, v1, v2)
	m.GetPullRequestFunc.appendCall(BitbucketCloudClientGetPullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientGetPullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientGetPullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientGetPullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientGetPullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientGetPullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientGetPullRequestFunc) appendCall(r0 BitbucketCloudClientGetPullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientGetPullRequestFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientGetPullRequestFunc) History() []BitbucketCloudClientGetPullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientGetPullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientGetPullRequestFuncCall is an object that describes an
// invocation of method GetPullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientGetPullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientGetPullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientGetPullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientGetPullRequestStatusesFunc describes the behavior
// when the GetPullRequestStatuses method of the parent
// MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientGetPullRequestStatusesFunc struct {
	defaultHook func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)
	hooks       []func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)
	history     []BitbucketCloudClientGetPullRequestStatusesFuncCall
	mutex       sync.Mutex
}

// GetPullRequestStatuses delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) GetPullRequestStatuses(v0 *bitbucketcloud.Repo, v1 int64) (*bitbucketcloud.PaginatedResultSet, error) {
	r0, r1 := m.GetPullRequestStatusesFunc.nextHook()(v0, v1)
	m.GetPullRequestStatusesFunc.appendCall(BitbucketCloudClientGetPullRequestStatusesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetPullRequestStatuses method of the parent MockBitbucketCloudClient
// instance is invoked and the hook queue is empty.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) SetDefaultHook(hook func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPullRequestStatuses method of the parent MockBitbucketCloudClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) PushHook(hook func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) SetDefaultReturn(r0 *bitbucketcloud.PaginatedResultSet, r1 error) {
	f.SetDefaultHook(func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) PushReturn(r0 *bitbucketcloud.PaginatedResultSet, r1 error) {
	f.PushHook(func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientGetPullRequestStatusesFunc) nextHook() func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientGetPullRequestStatusesFunc) appendCall(r0 BitbucketCloudClientGetPullRequestStatusesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientGetPullRequestStatusesFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) History() []BitbucketCloudClientGetPullRequestStatusesFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientGetPullRequestStatusesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientGetPullRequestStatusesFuncCall is an object that
// describes an invocation of method GetPullRequestStatuses on an instance
// of MockBitbucketCloudClient.
type BitbucketCloudClientGetPullRequestStatusesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bitbucketcloud.Repo
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PaginatedResultSet
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientGetPullRequestStatusesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientGetPullRequestStatusesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientMergePullRequestFunc describes the behavior when the
// MergePullRequest method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientMergePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientMergePullRequestFuncCall
	mutex       sync.Mutex
}

// MergePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) MergePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64, v3 bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.MergePullRequestFunc.nextHook()(v0, v1, v2, v3)
	m.MergePullRequestFunc.appendCall(BitbucketCloudClientMergePullRequestFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MergePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientMergePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientMergePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientMergePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientMergePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientMergePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientMergePullRequestFunc) appendCall(r0 BitbucketCloudClientMergePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientMergePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientMergePullRequestFunc) History() []BitbucketCloudClientMergePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientMergePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientMergePullRequestFuncCall is an object that describes
// an invocation of method MergePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientMergePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bitbucketcloud.MergePullRequestOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientMergePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientMergePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientPingFunc describes the behavior when the Ping method
// of the parent MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientPingFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []BitbucketCloudClientPingFuncCall
	mutex       sync.Mutex
}

// Ping delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Ping(v0 context.Context) error {
	r0 := m.PingFunc.nextHook()(v0)
	m.PingFunc.appendCall(BitbucketCloudClientPingFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Ping method of the
// parent MockBitbucketCloudClient instance is invoked and the hook queue is
// empty.
func (f *BitbucketCloudClientPingFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Ping method of the parent MockBitbucketCloudClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BitbucketCloudClientPingFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientPingFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientPingFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *BitbucketCloudClientPingFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientPingFunc) appendCall(r0 BitbucketCloudClientPingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientPingFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientPingFunc) History() []BitbucketCloudClientPingFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientPingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientPingFuncCall is an object that describes an
// invocation of method Ping on an instance of MockBitbucketCloudClient.
type BitbucketCloudClientPingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientPingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientPingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketCloudClientRepoFunc describes the behavior when the Repo method
// of the parent MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientRepoFunc struct {
	defaultHook func(context.Context, string, string) (*bitbucketcloud.Repo, error)
	hooks       []func(context.Context, string, string) (*bitbucketcloud.Repo, error)
	history     []BitbucketCloudClientRepoFuncCall
	mutex       sync.Mutex
}

// Repo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Repo(v0 context.Context, v1 string, v2 string) (*bitbucketcloud.Repo, error) {
	r0, r1 := m.RepoFunc.nextHook()(v0, v1, v2)
	m.RepoFunc.appendCall(BitbucketCloudClientRepoFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Repo method of the
// parent MockBitbucketCloudClient instance is invoked and the hook queue is
// empty.
func (f *BitbucketCloudClientRepoFunc) SetDefaultHook(hook func(context.Context, string, string) (*bitbucketcloud.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repo method of the parent MockBitbucketCloudClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BitbucketCloudClientRepoFunc) PushHook(hook func(context.Context, string, string) (*bitbucketcloud.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientRepoFunc) SetDefaultReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientRepoFunc) PushReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.PushHook(func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientRepoFunc) nextHook() func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientRepoFunc) appendCall(r0 BitbucketCloudClientRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientRepoFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientRepoFunc) History() []BitbucketCloudClientRepoFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientRepoFuncCall is an object that describes an
// invocation of method Repo on an instance of MockBitbucketCloudClient.
type BitbucketCloudClientRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientReposFunc describes the behavior when the Repos
// method of the parent MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientReposFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)
	hooks       []func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)
	history     []BitbucketCloudClientReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Repos(v0 context.Context, v1 *bitbucketcloud.PageToken, v2 string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
	r0, r1, r2 := m.ReposFunc.nextHook()(v0, v1, v2)
	m.ReposFunc.appendCall(BitbucketCloudClientReposFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockBitbucketCloudClient instance is invoked and the hook queue is
// empty.
func (f *BitbucketCloudClientReposFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockBitbucketCloudClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BitbucketCloudClientReposFunc) PushHook(hook func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientReposFunc) SetDefaultReturn(r0 []*bitbucketcloud.Repo, r1 *bitbucketcloud.PageToken, r2 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientReposFunc) PushReturn(r0 []*bitbucketcloud.Repo, r1 *bitbucketcloud.PageToken, r2 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

func (f *BitbucketCloudClientReposFunc) nextHook() func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientReposFunc) appendCall(r0 BitbucketCloudClientReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientReposFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientReposFunc) History() []BitbucketCloudClientReposFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientReposFuncCall is an object that describes an
// invocation of method Repos on an instance of MockBitbucketCloudClient.
type BitbucketCloudClientReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.PageToken
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*bitbucketcloud.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *bitbucketcloud.PageToken
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// BitbucketCloudClientUpdatePullRequestFunc describes the behavior when the
// UpdatePullRequest method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientUpdatePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientUpdatePullRequestFuncCall
	mutex       sync.Mutex
}

// UpdatePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) UpdatePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64, v3 bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.UpdatePullRequestFunc.nextHook()(v0, v1, v2, v3)
	m.UpdatePullRequestFunc.appendCall(BitbucketCloudClientUpdatePullRequestFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdatePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientUpdatePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientUpdatePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientUpdatePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientUpdatePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientUpdatePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientUpdatePullRequestFunc) appendCall(r0 BitbucketCloudClientUpdatePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientUpdatePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientUpdatePullRequestFunc) History() []BitbucketCloudClientUpdatePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientUpdatePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientUpdatePullRequestFuncCall is an object that describes
// an invocation of method UpdatePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientUpdatePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bitbucketcloud.PullRequestInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientUpdatePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientUpdatePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientWithAuthenticatorFunc describes the behavior when the
// WithAuthenticator method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) bitbucketcloud.Client
	hooks       []func(auth.Authenticator) bitbucketcloud.Client
	history     []BitbucketCloudClientWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) WithAuthenticator(v0 auth.Authenticator) bitbucketcloud.Client {
	r0 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(BitbucketCloudClientWithAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) bitbucketcloud.Client) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) bitbucketcloud.Client) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientWithAuthenticatorFunc) SetDefaultReturn(r0 bitbucketcloud.Client) {
	f.SetDefaultHook(func(auth.Authenticator) bitbucketcloud.Client {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientWithAuthenticatorFunc) PushReturn(r0 bitbucketcloud.Client) {
	f.PushHook(func(auth.Authenticator) bitbucketcloud.Client {
		return r0
	})
}

func (f *BitbucketCloudClientWithAuthenticatorFunc) nextHook() func(auth.Authenticator) bitbucketcloud.Client {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientWithAuthenticatorFunc) appendCall(r0 BitbucketCloudClientWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientWithAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientWithAuthenticatorFunc) History() []BitbucketCloudClientWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientWithAuthenticatorFuncCall is an object that describes
// an invocation of method WithAuthenticator on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bitbucketcloud.Client
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
