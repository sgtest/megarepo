// Code generated by go-mockgen 1.3.1; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package sources

import (
	"context"
	"sync"

	auth "github.com/sourcegraph/sourcegraph/internal/extsvc/auth"
	bitbucketcloud "github.com/sourcegraph/sourcegraph/internal/extsvc/bitbucketcloud"
)

// MockBitbucketCloudClient is a mock implementation of the Client interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/extsvc/bitbucketcloud) used
// for unit testing.
type MockBitbucketCloudClient struct {
	// AuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method Authenticator.
	AuthenticatorFunc *BitbucketCloudClientAuthenticatorFunc
	// CreatePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePullRequest.
	CreatePullRequestFunc *BitbucketCloudClientCreatePullRequestFunc
	// CreatePullRequestCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePullRequestComment.
	CreatePullRequestCommentFunc *BitbucketCloudClientCreatePullRequestCommentFunc
	// CurrentUserFunc is an instance of a mock function object controlling
	// the behavior of the method CurrentUser.
	CurrentUserFunc *BitbucketCloudClientCurrentUserFunc
	// DeclinePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method DeclinePullRequest.
	DeclinePullRequestFunc *BitbucketCloudClientDeclinePullRequestFunc
	// ForkRepositoryFunc is an instance of a mock function object
	// controlling the behavior of the method ForkRepository.
	ForkRepositoryFunc *BitbucketCloudClientForkRepositoryFunc
	// GetPullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method GetPullRequest.
	GetPullRequestFunc *BitbucketCloudClientGetPullRequestFunc
	// GetPullRequestStatusesFunc is an instance of a mock function object
	// controlling the behavior of the method GetPullRequestStatuses.
	GetPullRequestStatusesFunc *BitbucketCloudClientGetPullRequestStatusesFunc
	// MergePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method MergePullRequest.
	MergePullRequestFunc *BitbucketCloudClientMergePullRequestFunc
	// PingFunc is an instance of a mock function object controlling the
	// behavior of the method Ping.
	PingFunc *BitbucketCloudClientPingFunc
	// RepoFunc is an instance of a mock function object controlling the
	// behavior of the method Repo.
	RepoFunc *BitbucketCloudClientRepoFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *BitbucketCloudClientReposFunc
	// UpdatePullRequestFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePullRequest.
	UpdatePullRequestFunc *BitbucketCloudClientUpdatePullRequestFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *BitbucketCloudClientWithAuthenticatorFunc
}

// NewMockBitbucketCloudClient creates a new mock of the Client interface.
// All methods return zero values for all results, unless overwritten.
func NewMockBitbucketCloudClient() *MockBitbucketCloudClient {
	return &MockBitbucketCloudClient{
		AuthenticatorFunc: &BitbucketCloudClientAuthenticatorFunc{
			defaultHook: func() (r0 auth.Authenticator) {
				return
			},
		},
		CreatePullRequestFunc: &BitbucketCloudClientCreatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		CreatePullRequestCommentFunc: &BitbucketCloudClientCreatePullRequestCommentFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (r0 *bitbucketcloud.Comment, r1 error) {
				return
			},
		},
		CurrentUserFunc: &BitbucketCloudClientCurrentUserFunc{
			defaultHook: func(context.Context) (r0 *bitbucketcloud.User, r1 error) {
				return
			},
		},
		DeclinePullRequestFunc: &BitbucketCloudClientDeclinePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		ForkRepositoryFunc: &BitbucketCloudClientForkRepositoryFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (r0 *bitbucketcloud.Repo, r1 error) {
				return
			},
		},
		GetPullRequestFunc: &BitbucketCloudClientGetPullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		GetPullRequestStatusesFunc: &BitbucketCloudClientGetPullRequestStatusesFunc{
			defaultHook: func(*bitbucketcloud.Repo, int64) (r0 *bitbucketcloud.PaginatedResultSet, r1 error) {
				return
			},
		},
		MergePullRequestFunc: &BitbucketCloudClientMergePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		PingFunc: &BitbucketCloudClientPingFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		RepoFunc: &BitbucketCloudClientRepoFunc{
			defaultHook: func(context.Context, string, string) (r0 *bitbucketcloud.Repo, r1 error) {
				return
			},
		},
		ReposFunc: &BitbucketCloudClientReposFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken, string) (r0 []*bitbucketcloud.Repo, r1 *bitbucketcloud.PageToken, r2 error) {
				return
			},
		},
		UpdatePullRequestFunc: &BitbucketCloudClientUpdatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (r0 *bitbucketcloud.PullRequest, r1 error) {
				return
			},
		},
		WithAuthenticatorFunc: &BitbucketCloudClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 bitbucketcloud.Client) {
				return
			},
		},
	}
}

// NewStrictMockBitbucketCloudClient creates a new mock of the Client
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockBitbucketCloudClient() *MockBitbucketCloudClient {
	return &MockBitbucketCloudClient{
		AuthenticatorFunc: &BitbucketCloudClientAuthenticatorFunc{
			defaultHook: func() auth.Authenticator {
				panic("unexpected invocation of MockBitbucketCloudClient.Authenticator")
			},
		},
		CreatePullRequestFunc: &BitbucketCloudClientCreatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CreatePullRequest")
			},
		},
		CreatePullRequestCommentFunc: &BitbucketCloudClientCreatePullRequestCommentFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CreatePullRequestComment")
			},
		},
		CurrentUserFunc: &BitbucketCloudClientCurrentUserFunc{
			defaultHook: func(context.Context) (*bitbucketcloud.User, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.CurrentUser")
			},
		},
		DeclinePullRequestFunc: &BitbucketCloudClientDeclinePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.DeclinePullRequest")
			},
		},
		ForkRepositoryFunc: &BitbucketCloudClientForkRepositoryFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.ForkRepository")
			},
		},
		GetPullRequestFunc: &BitbucketCloudClientGetPullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.GetPullRequest")
			},
		},
		GetPullRequestStatusesFunc: &BitbucketCloudClientGetPullRequestStatusesFunc{
			defaultHook: func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.GetPullRequestStatuses")
			},
		},
		MergePullRequestFunc: &BitbucketCloudClientMergePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.MergePullRequest")
			},
		},
		PingFunc: &BitbucketCloudClientPingFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockBitbucketCloudClient.Ping")
			},
		},
		RepoFunc: &BitbucketCloudClientRepoFunc{
			defaultHook: func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.Repo")
			},
		},
		ReposFunc: &BitbucketCloudClientReposFunc{
			defaultHook: func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.Repos")
			},
		},
		UpdatePullRequestFunc: &BitbucketCloudClientUpdatePullRequestFunc{
			defaultHook: func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
				panic("unexpected invocation of MockBitbucketCloudClient.UpdatePullRequest")
			},
		},
		WithAuthenticatorFunc: &BitbucketCloudClientWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) bitbucketcloud.Client {
				panic("unexpected invocation of MockBitbucketCloudClient.WithAuthenticator")
			},
		},
	}
}

// NewMockBitbucketCloudClientFrom creates a new mock of the
// MockBitbucketCloudClient interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockBitbucketCloudClientFrom(i bitbucketcloud.Client) *MockBitbucketCloudClient {
	return &MockBitbucketCloudClient{
		AuthenticatorFunc: &BitbucketCloudClientAuthenticatorFunc{
			defaultHook: i.Authenticator,
		},
		CreatePullRequestFunc: &BitbucketCloudClientCreatePullRequestFunc{
			defaultHook: i.CreatePullRequest,
		},
		CreatePullRequestCommentFunc: &BitbucketCloudClientCreatePullRequestCommentFunc{
			defaultHook: i.CreatePullRequestComment,
		},
		CurrentUserFunc: &BitbucketCloudClientCurrentUserFunc{
			defaultHook: i.CurrentUser,
		},
		DeclinePullRequestFunc: &BitbucketCloudClientDeclinePullRequestFunc{
			defaultHook: i.DeclinePullRequest,
		},
		ForkRepositoryFunc: &BitbucketCloudClientForkRepositoryFunc{
			defaultHook: i.ForkRepository,
		},
		GetPullRequestFunc: &BitbucketCloudClientGetPullRequestFunc{
			defaultHook: i.GetPullRequest,
		},
		GetPullRequestStatusesFunc: &BitbucketCloudClientGetPullRequestStatusesFunc{
			defaultHook: i.GetPullRequestStatuses,
		},
		MergePullRequestFunc: &BitbucketCloudClientMergePullRequestFunc{
			defaultHook: i.MergePullRequest,
		},
		PingFunc: &BitbucketCloudClientPingFunc{
			defaultHook: i.Ping,
		},
		RepoFunc: &BitbucketCloudClientRepoFunc{
			defaultHook: i.Repo,
		},
		ReposFunc: &BitbucketCloudClientReposFunc{
			defaultHook: i.Repos,
		},
		UpdatePullRequestFunc: &BitbucketCloudClientUpdatePullRequestFunc{
			defaultHook: i.UpdatePullRequest,
		},
		WithAuthenticatorFunc: &BitbucketCloudClientWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// BitbucketCloudClientAuthenticatorFunc describes the behavior when the
// Authenticator method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientAuthenticatorFunc struct {
	defaultHook func() auth.Authenticator
	hooks       []func() auth.Authenticator
	history     []BitbucketCloudClientAuthenticatorFuncCall
	mutex       sync.Mutex
}

// Authenticator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Authenticator() auth.Authenticator {
	r0 := m.AuthenticatorFunc.nextHook()()
	m.AuthenticatorFunc.appendCall(BitbucketCloudClientAuthenticatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authenticator method
// of the parent MockBitbucketCloudClient instance is invoked and the hook
// queue is empty.
func (f *BitbucketCloudClientAuthenticatorFunc) SetDefaultHook(hook func() auth.Authenticator) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authenticator method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientAuthenticatorFunc) PushHook(hook func() auth.Authenticator) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientAuthenticatorFunc) SetDefaultReturn(r0 auth.Authenticator) {
	f.SetDefaultHook(func() auth.Authenticator {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientAuthenticatorFunc) PushReturn(r0 auth.Authenticator) {
	f.PushHook(func() auth.Authenticator {
		return r0
	})
}

func (f *BitbucketCloudClientAuthenticatorFunc) nextHook() func() auth.Authenticator {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientAuthenticatorFunc) appendCall(r0 BitbucketCloudClientAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientAuthenticatorFunc) History() []BitbucketCloudClientAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientAuthenticatorFuncCall is an object that describes an
// invocation of method Authenticator on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientAuthenticatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 auth.Authenticator
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketCloudClientCreatePullRequestFunc describes the behavior when the
// CreatePullRequest method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientCreatePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientCreatePullRequestFuncCall
	mutex       sync.Mutex
}

// CreatePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CreatePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.CreatePullRequestFunc.nextHook()(v0, v1, v2)
	m.CreatePullRequestFunc.appendCall(BitbucketCloudClientCreatePullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreatePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientCreatePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientCreatePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCreatePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCreatePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientCreatePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCreatePullRequestFunc) appendCall(r0 BitbucketCloudClientCreatePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientCreatePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientCreatePullRequestFunc) History() []BitbucketCloudClientCreatePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCreatePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCreatePullRequestFuncCall is an object that describes
// an invocation of method CreatePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientCreatePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bitbucketcloud.PullRequestInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientCreatePullRequestCommentFunc describes the behavior
// when the CreatePullRequestComment method of the parent
// MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientCreatePullRequestCommentFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)
	history     []BitbucketCloudClientCreatePullRequestCommentFuncCall
	mutex       sync.Mutex
}

// CreatePullRequestComment delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CreatePullRequestComment(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64, v3 bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
	r0, r1 := m.CreatePullRequestCommentFunc.nextHook()(v0, v1, v2, v3)
	m.CreatePullRequestCommentFunc.appendCall(BitbucketCloudClientCreatePullRequestCommentFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreatePullRequestComment method of the parent MockBitbucketCloudClient
// instance is invoked and the hook queue is empty.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePullRequestComment method of the parent MockBitbucketCloudClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) SetDefaultReturn(r0 *bitbucketcloud.Comment, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) PushReturn(r0 *bitbucketcloud.Comment, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientCreatePullRequestCommentFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.CommentInput) (*bitbucketcloud.Comment, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCreatePullRequestCommentFunc) appendCall(r0 BitbucketCloudClientCreatePullRequestCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientCreatePullRequestCommentFuncCall objects describing
// the invocations of this function.
func (f *BitbucketCloudClientCreatePullRequestCommentFunc) History() []BitbucketCloudClientCreatePullRequestCommentFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCreatePullRequestCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCreatePullRequestCommentFuncCall is an object that
// describes an invocation of method CreatePullRequestComment on an instance
// of MockBitbucketCloudClient.
type BitbucketCloudClientCreatePullRequestCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bitbucketcloud.CommentInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.Comment
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCreatePullRequestCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientCurrentUserFunc describes the behavior when the
// CurrentUser method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientCurrentUserFunc struct {
	defaultHook func(context.Context) (*bitbucketcloud.User, error)
	hooks       []func(context.Context) (*bitbucketcloud.User, error)
	history     []BitbucketCloudClientCurrentUserFuncCall
	mutex       sync.Mutex
}

// CurrentUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) CurrentUser(v0 context.Context) (*bitbucketcloud.User, error) {
	r0, r1 := m.CurrentUserFunc.nextHook()(v0)
	m.CurrentUserFunc.appendCall(BitbucketCloudClientCurrentUserFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CurrentUser method
// of the parent MockBitbucketCloudClient instance is invoked and the hook
// queue is empty.
func (f *BitbucketCloudClientCurrentUserFunc) SetDefaultHook(hook func(context.Context) (*bitbucketcloud.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CurrentUser method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientCurrentUserFunc) PushHook(hook func(context.Context) (*bitbucketcloud.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientCurrentUserFunc) SetDefaultReturn(r0 *bitbucketcloud.User, r1 error) {
	f.SetDefaultHook(func(context.Context) (*bitbucketcloud.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientCurrentUserFunc) PushReturn(r0 *bitbucketcloud.User, r1 error) {
	f.PushHook(func(context.Context) (*bitbucketcloud.User, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientCurrentUserFunc) nextHook() func(context.Context) (*bitbucketcloud.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientCurrentUserFunc) appendCall(r0 BitbucketCloudClientCurrentUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientCurrentUserFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientCurrentUserFunc) History() []BitbucketCloudClientCurrentUserFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientCurrentUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientCurrentUserFuncCall is an object that describes an
// invocation of method CurrentUser on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientCurrentUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientCurrentUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientCurrentUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientDeclinePullRequestFunc describes the behavior when
// the DeclinePullRequest method of the parent MockBitbucketCloudClient
// instance is invoked.
type BitbucketCloudClientDeclinePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientDeclinePullRequestFuncCall
	mutex       sync.Mutex
}

// DeclinePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) DeclinePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.DeclinePullRequestFunc.nextHook()(v0, v1, v2)
	m.DeclinePullRequestFunc.appendCall(BitbucketCloudClientDeclinePullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeclinePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientDeclinePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeclinePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientDeclinePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientDeclinePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientDeclinePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientDeclinePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientDeclinePullRequestFunc) appendCall(r0 BitbucketCloudClientDeclinePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientDeclinePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientDeclinePullRequestFunc) History() []BitbucketCloudClientDeclinePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientDeclinePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientDeclinePullRequestFuncCall is an object that
// describes an invocation of method DeclinePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientDeclinePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientDeclinePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientDeclinePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientForkRepositoryFunc describes the behavior when the
// ForkRepository method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientForkRepositoryFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)
	history     []BitbucketCloudClientForkRepositoryFuncCall
	mutex       sync.Mutex
}

// ForkRepository delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) ForkRepository(v0 context.Context, v1 *bitbucketcloud.Repo, v2 bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
	r0, r1 := m.ForkRepositoryFunc.nextHook()(v0, v1, v2)
	m.ForkRepositoryFunc.appendCall(BitbucketCloudClientForkRepositoryFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ForkRepository
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientForkRepositoryFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ForkRepository method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientForkRepositoryFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientForkRepositoryFunc) SetDefaultReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientForkRepositoryFunc) PushReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientForkRepositoryFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, bitbucketcloud.ForkInput) (*bitbucketcloud.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientForkRepositoryFunc) appendCall(r0 BitbucketCloudClientForkRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientForkRepositoryFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientForkRepositoryFunc) History() []BitbucketCloudClientForkRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientForkRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientForkRepositoryFuncCall is an object that describes an
// invocation of method ForkRepository on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientForkRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bitbucketcloud.ForkInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientForkRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientForkRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientGetPullRequestFunc describes the behavior when the
// GetPullRequest method of the parent MockBitbucketCloudClient instance is
// invoked.
type BitbucketCloudClientGetPullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientGetPullRequestFuncCall
	mutex       sync.Mutex
}

// GetPullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) GetPullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.GetPullRequestFunc.nextHook()(v0, v1, v2)
	m.GetPullRequestFunc.appendCall(BitbucketCloudClientGetPullRequestFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientGetPullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientGetPullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientGetPullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientGetPullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientGetPullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientGetPullRequestFunc) appendCall(r0 BitbucketCloudClientGetPullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientGetPullRequestFuncCall
// objects describing the invocations of this function.
func (f *BitbucketCloudClientGetPullRequestFunc) History() []BitbucketCloudClientGetPullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientGetPullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientGetPullRequestFuncCall is an object that describes an
// invocation of method GetPullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientGetPullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientGetPullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientGetPullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientGetPullRequestStatusesFunc describes the behavior
// when the GetPullRequestStatuses method of the parent
// MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientGetPullRequestStatusesFunc struct {
	defaultHook func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)
	hooks       []func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)
	history     []BitbucketCloudClientGetPullRequestStatusesFuncCall
	mutex       sync.Mutex
}

// GetPullRequestStatuses delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) GetPullRequestStatuses(v0 *bitbucketcloud.Repo, v1 int64) (*bitbucketcloud.PaginatedResultSet, error) {
	r0, r1 := m.GetPullRequestStatusesFunc.nextHook()(v0, v1)
	m.GetPullRequestStatusesFunc.appendCall(BitbucketCloudClientGetPullRequestStatusesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetPullRequestStatuses method of the parent MockBitbucketCloudClient
// instance is invoked and the hook queue is empty.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) SetDefaultHook(hook func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPullRequestStatuses method of the parent MockBitbucketCloudClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) PushHook(hook func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) SetDefaultReturn(r0 *bitbucketcloud.PaginatedResultSet, r1 error) {
	f.SetDefaultHook(func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) PushReturn(r0 *bitbucketcloud.PaginatedResultSet, r1 error) {
	f.PushHook(func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientGetPullRequestStatusesFunc) nextHook() func(*bitbucketcloud.Repo, int64) (*bitbucketcloud.PaginatedResultSet, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientGetPullRequestStatusesFunc) appendCall(r0 BitbucketCloudClientGetPullRequestStatusesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientGetPullRequestStatusesFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientGetPullRequestStatusesFunc) History() []BitbucketCloudClientGetPullRequestStatusesFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientGetPullRequestStatusesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientGetPullRequestStatusesFuncCall is an object that
// describes an invocation of method GetPullRequestStatuses on an instance
// of MockBitbucketCloudClient.
type BitbucketCloudClientGetPullRequestStatusesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *bitbucketcloud.Repo
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PaginatedResultSet
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientGetPullRequestStatusesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientGetPullRequestStatusesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientMergePullRequestFunc describes the behavior when the
// MergePullRequest method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientMergePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientMergePullRequestFuncCall
	mutex       sync.Mutex
}

// MergePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) MergePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64, v3 bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.MergePullRequestFunc.nextHook()(v0, v1, v2, v3)
	m.MergePullRequestFunc.appendCall(BitbucketCloudClientMergePullRequestFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MergePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientMergePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientMergePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientMergePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientMergePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientMergePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.MergePullRequestOpts) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientMergePullRequestFunc) appendCall(r0 BitbucketCloudClientMergePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientMergePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientMergePullRequestFunc) History() []BitbucketCloudClientMergePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientMergePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientMergePullRequestFuncCall is an object that describes
// an invocation of method MergePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientMergePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bitbucketcloud.MergePullRequestOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientMergePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientMergePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientPingFunc describes the behavior when the Ping method
// of the parent MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientPingFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []BitbucketCloudClientPingFuncCall
	mutex       sync.Mutex
}

// Ping delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Ping(v0 context.Context) error {
	r0 := m.PingFunc.nextHook()(v0)
	m.PingFunc.appendCall(BitbucketCloudClientPingFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Ping method of the
// parent MockBitbucketCloudClient instance is invoked and the hook queue is
// empty.
func (f *BitbucketCloudClientPingFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Ping method of the parent MockBitbucketCloudClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BitbucketCloudClientPingFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientPingFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientPingFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *BitbucketCloudClientPingFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientPingFunc) appendCall(r0 BitbucketCloudClientPingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientPingFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientPingFunc) History() []BitbucketCloudClientPingFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientPingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientPingFuncCall is an object that describes an
// invocation of method Ping on an instance of MockBitbucketCloudClient.
type BitbucketCloudClientPingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientPingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientPingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketCloudClientRepoFunc describes the behavior when the Repo method
// of the parent MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientRepoFunc struct {
	defaultHook func(context.Context, string, string) (*bitbucketcloud.Repo, error)
	hooks       []func(context.Context, string, string) (*bitbucketcloud.Repo, error)
	history     []BitbucketCloudClientRepoFuncCall
	mutex       sync.Mutex
}

// Repo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Repo(v0 context.Context, v1 string, v2 string) (*bitbucketcloud.Repo, error) {
	r0, r1 := m.RepoFunc.nextHook()(v0, v1, v2)
	m.RepoFunc.appendCall(BitbucketCloudClientRepoFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Repo method of the
// parent MockBitbucketCloudClient instance is invoked and the hook queue is
// empty.
func (f *BitbucketCloudClientRepoFunc) SetDefaultHook(hook func(context.Context, string, string) (*bitbucketcloud.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repo method of the parent MockBitbucketCloudClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BitbucketCloudClientRepoFunc) PushHook(hook func(context.Context, string, string) (*bitbucketcloud.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientRepoFunc) SetDefaultReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientRepoFunc) PushReturn(r0 *bitbucketcloud.Repo, r1 error) {
	f.PushHook(func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientRepoFunc) nextHook() func(context.Context, string, string) (*bitbucketcloud.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientRepoFunc) appendCall(r0 BitbucketCloudClientRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientRepoFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientRepoFunc) History() []BitbucketCloudClientRepoFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientRepoFuncCall is an object that describes an
// invocation of method Repo on an instance of MockBitbucketCloudClient.
type BitbucketCloudClientRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientReposFunc describes the behavior when the Repos
// method of the parent MockBitbucketCloudClient instance is invoked.
type BitbucketCloudClientReposFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)
	hooks       []func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)
	history     []BitbucketCloudClientReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) Repos(v0 context.Context, v1 *bitbucketcloud.PageToken, v2 string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
	r0, r1, r2 := m.ReposFunc.nextHook()(v0, v1, v2)
	m.ReposFunc.appendCall(BitbucketCloudClientReposFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockBitbucketCloudClient instance is invoked and the hook queue is
// empty.
func (f *BitbucketCloudClientReposFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockBitbucketCloudClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *BitbucketCloudClientReposFunc) PushHook(hook func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientReposFunc) SetDefaultReturn(r0 []*bitbucketcloud.Repo, r1 *bitbucketcloud.PageToken, r2 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientReposFunc) PushReturn(r0 []*bitbucketcloud.Repo, r1 *bitbucketcloud.PageToken, r2 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
		return r0, r1, r2
	})
}

func (f *BitbucketCloudClientReposFunc) nextHook() func(context.Context, *bitbucketcloud.PageToken, string) ([]*bitbucketcloud.Repo, *bitbucketcloud.PageToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientReposFunc) appendCall(r0 BitbucketCloudClientReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BitbucketCloudClientReposFuncCall objects
// describing the invocations of this function.
func (f *BitbucketCloudClientReposFunc) History() []BitbucketCloudClientReposFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientReposFuncCall is an object that describes an
// invocation of method Repos on an instance of MockBitbucketCloudClient.
type BitbucketCloudClientReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.PageToken
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*bitbucketcloud.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *bitbucketcloud.PageToken
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// BitbucketCloudClientUpdatePullRequestFunc describes the behavior when the
// UpdatePullRequest method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientUpdatePullRequestFunc struct {
	defaultHook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	hooks       []func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)
	history     []BitbucketCloudClientUpdatePullRequestFuncCall
	mutex       sync.Mutex
}

// UpdatePullRequest delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) UpdatePullRequest(v0 context.Context, v1 *bitbucketcloud.Repo, v2 int64, v3 bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	r0, r1 := m.UpdatePullRequestFunc.nextHook()(v0, v1, v2, v3)
	m.UpdatePullRequestFunc.appendCall(BitbucketCloudClientUpdatePullRequestFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdatePullRequest
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientUpdatePullRequestFunc) SetDefaultHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePullRequest method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientUpdatePullRequestFunc) PushHook(hook func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientUpdatePullRequestFunc) SetDefaultReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientUpdatePullRequestFunc) PushReturn(r0 *bitbucketcloud.PullRequest, r1 error) {
	f.PushHook(func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
		return r0, r1
	})
}

func (f *BitbucketCloudClientUpdatePullRequestFunc) nextHook() func(context.Context, *bitbucketcloud.Repo, int64, bitbucketcloud.PullRequestInput) (*bitbucketcloud.PullRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientUpdatePullRequestFunc) appendCall(r0 BitbucketCloudClientUpdatePullRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientUpdatePullRequestFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientUpdatePullRequestFunc) History() []BitbucketCloudClientUpdatePullRequestFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientUpdatePullRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientUpdatePullRequestFuncCall is an object that describes
// an invocation of method UpdatePullRequest on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientUpdatePullRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *bitbucketcloud.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bitbucketcloud.PullRequestInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *bitbucketcloud.PullRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientUpdatePullRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientUpdatePullRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketCloudClientWithAuthenticatorFunc describes the behavior when the
// WithAuthenticator method of the parent MockBitbucketCloudClient instance
// is invoked.
type BitbucketCloudClientWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) bitbucketcloud.Client
	hooks       []func(auth.Authenticator) bitbucketcloud.Client
	history     []BitbucketCloudClientWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockBitbucketCloudClient) WithAuthenticator(v0 auth.Authenticator) bitbucketcloud.Client {
	r0 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(BitbucketCloudClientWithAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockBitbucketCloudClient instance is invoked and the
// hook queue is empty.
func (f *BitbucketCloudClientWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) bitbucketcloud.Client) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockBitbucketCloudClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketCloudClientWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) bitbucketcloud.Client) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketCloudClientWithAuthenticatorFunc) SetDefaultReturn(r0 bitbucketcloud.Client) {
	f.SetDefaultHook(func(auth.Authenticator) bitbucketcloud.Client {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketCloudClientWithAuthenticatorFunc) PushReturn(r0 bitbucketcloud.Client) {
	f.PushHook(func(auth.Authenticator) bitbucketcloud.Client {
		return r0
	})
}

func (f *BitbucketCloudClientWithAuthenticatorFunc) nextHook() func(auth.Authenticator) bitbucketcloud.Client {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketCloudClientWithAuthenticatorFunc) appendCall(r0 BitbucketCloudClientWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketCloudClientWithAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *BitbucketCloudClientWithAuthenticatorFunc) History() []BitbucketCloudClientWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketCloudClientWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketCloudClientWithAuthenticatorFuncCall is an object that describes
// an invocation of method WithAuthenticator on an instance of
// MockBitbucketCloudClient.
type BitbucketCloudClientWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bitbucketcloud.Client
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketCloudClientWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketCloudClientWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
