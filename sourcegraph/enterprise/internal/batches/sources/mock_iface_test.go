// Code generated by go-mockgen 1.2.0; DO NOT EDIT.

package sources

import (
	"context"
	"sync"

	store "github.com/sourcegraph/sourcegraph/enterprise/internal/batches/store"
	types1 "github.com/sourcegraph/sourcegraph/enterprise/internal/batches/types"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	auth "github.com/sourcegraph/sourcegraph/internal/extsvc/auth"
	protocol "github.com/sourcegraph/sourcegraph/internal/gitserver/protocol"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockChangesetSource is a mock implementation of the ChangesetSource
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/sources)
// used for unit testing.
type MockChangesetSource struct {
	// CloseChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CloseChangeset.
	CloseChangesetFunc *ChangesetSourceCloseChangesetFunc
	// CreateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CreateChangeset.
	CreateChangesetFunc *ChangesetSourceCreateChangesetFunc
	// CreateCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreateComment.
	CreateCommentFunc *ChangesetSourceCreateCommentFunc
	// GitserverPushConfigFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverPushConfig.
	GitserverPushConfigFunc *ChangesetSourceGitserverPushConfigFunc
	// LoadChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method LoadChangeset.
	LoadChangesetFunc *ChangesetSourceLoadChangesetFunc
	// MergeChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method MergeChangeset.
	MergeChangesetFunc *ChangesetSourceMergeChangesetFunc
	// ReopenChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method ReopenChangeset.
	ReopenChangesetFunc *ChangesetSourceReopenChangesetFunc
	// UpdateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateChangeset.
	UpdateChangesetFunc *ChangesetSourceUpdateChangesetFunc
	// ValidateAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method ValidateAuthenticator.
	ValidateAuthenticatorFunc *ChangesetSourceValidateAuthenticatorFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *ChangesetSourceWithAuthenticatorFunc
}

// NewMockChangesetSource creates a new mock of the ChangesetSource
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockChangesetSource() *MockChangesetSource {
	return &MockChangesetSource{
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 bool, r1 error) {
				return
			},
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) (r0 error) {
				return
			},
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (r0 *protocol.PushConfig, r1 error) {
				return
			},
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) (r0 error) {
				return
			},
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (r0 error) {
				return
			},
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 ChangesetSource, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockChangesetSource creates a new mock of the ChangesetSource
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockChangesetSource() *MockChangesetSource {
	return &MockChangesetSource{
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.CloseChangeset")
			},
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) (bool, error) {
				panic("unexpected invocation of MockChangesetSource.CreateChangeset")
			},
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *Changeset, string) error {
				panic("unexpected invocation of MockChangesetSource.CreateComment")
			},
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
				panic("unexpected invocation of MockChangesetSource.GitserverPushConfig")
			},
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.LoadChangeset")
			},
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *Changeset, bool) error {
				panic("unexpected invocation of MockChangesetSource.MergeChangeset")
			},
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.ReopenChangeset")
			},
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *Changeset) error {
				panic("unexpected invocation of MockChangesetSource.UpdateChangeset")
			},
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockChangesetSource.ValidateAuthenticator")
			},
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (ChangesetSource, error) {
				panic("unexpected invocation of MockChangesetSource.WithAuthenticator")
			},
		},
	}
}

// NewMockChangesetSourceFrom creates a new mock of the MockChangesetSource
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockChangesetSourceFrom(i ChangesetSource) *MockChangesetSource {
	return &MockChangesetSource{
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: i.CloseChangeset,
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: i.CreateChangeset,
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: i.CreateComment,
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: i.GitserverPushConfig,
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: i.LoadChangeset,
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: i.MergeChangeset,
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: i.ReopenChangeset,
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: i.UpdateChangeset,
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: i.ValidateAuthenticator,
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// ChangesetSourceCloseChangesetFunc describes the behavior when the
// CloseChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCloseChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceCloseChangesetFuncCall
	mutex       sync.Mutex
}

// CloseChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) CloseChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.CloseChangesetFunc.nextHook()(v0, v1)
	m.CloseChangesetFunc.appendCall(ChangesetSourceCloseChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceCloseChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCloseChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCloseChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCloseChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceCloseChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCloseChangesetFunc) appendCall(r0 ChangesetSourceCloseChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCloseChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCloseChangesetFunc) History() []ChangesetSourceCloseChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCloseChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCloseChangesetFuncCall is an object that describes an
// invocation of method CloseChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceCloseChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCloseChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCloseChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceCreateChangesetFunc describes the behavior when the
// CreateChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCreateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) (bool, error)
	hooks       []func(context.Context, *Changeset) (bool, error)
	history     []ChangesetSourceCreateChangesetFuncCall
	mutex       sync.Mutex
}

// CreateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) CreateChangeset(v0 context.Context, v1 *Changeset) (bool, error) {
	r0, r1 := m.CreateChangesetFunc.nextHook()(v0, v1)
	m.CreateChangesetFunc.appendCall(ChangesetSourceCreateChangesetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceCreateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCreateChangesetFunc) PushHook(hook func(context.Context, *Changeset) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCreateChangesetFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCreateChangesetFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *Changeset) (bool, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceCreateChangesetFunc) nextHook() func(context.Context, *Changeset) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCreateChangesetFunc) appendCall(r0 ChangesetSourceCreateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCreateChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCreateChangesetFunc) History() []ChangesetSourceCreateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCreateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCreateChangesetFuncCall is an object that describes an
// invocation of method CreateChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceCreateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCreateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCreateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ChangesetSourceCreateCommentFunc describes the behavior when the
// CreateComment method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCreateCommentFunc struct {
	defaultHook func(context.Context, *Changeset, string) error
	hooks       []func(context.Context, *Changeset, string) error
	history     []ChangesetSourceCreateCommentFuncCall
	mutex       sync.Mutex
}

// CreateComment delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockChangesetSource) CreateComment(v0 context.Context, v1 *Changeset, v2 string) error {
	r0 := m.CreateCommentFunc.nextHook()(v0, v1, v2)
	m.CreateCommentFunc.appendCall(ChangesetSourceCreateCommentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateComment method
// of the parent MockChangesetSource instance is invoked and the hook queue
// is empty.
func (f *ChangesetSourceCreateCommentFunc) SetDefaultHook(hook func(context.Context, *Changeset, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateComment method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCreateCommentFunc) PushHook(hook func(context.Context, *Changeset, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCreateCommentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCreateCommentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, string) error {
		return r0
	})
}

func (f *ChangesetSourceCreateCommentFunc) nextHook() func(context.Context, *Changeset, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCreateCommentFunc) appendCall(r0 ChangesetSourceCreateCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCreateCommentFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCreateCommentFunc) History() []ChangesetSourceCreateCommentFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCreateCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCreateCommentFuncCall is an object that describes an
// invocation of method CreateComment on an instance of MockChangesetSource.
type ChangesetSourceCreateCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCreateCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCreateCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceGitserverPushConfigFunc describes the behavior when the
// GitserverPushConfig method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceGitserverPushConfigFunc struct {
	defaultHook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	hooks       []func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	history     []ChangesetSourceGitserverPushConfigFuncCall
	mutex       sync.Mutex
}

// GitserverPushConfig delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) GitserverPushConfig(v0 context.Context, v1 database.ExternalServiceStore, v2 *types.Repo) (*protocol.PushConfig, error) {
	r0, r1 := m.GitserverPushConfigFunc.nextHook()(v0, v1, v2)
	m.GitserverPushConfigFunc.appendCall(ChangesetSourceGitserverPushConfigFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GitserverPushConfig
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceGitserverPushConfigFunc) SetDefaultHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverPushConfig method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceGitserverPushConfigFunc) PushHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceGitserverPushConfigFunc) SetDefaultReturn(r0 *protocol.PushConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceGitserverPushConfigFunc) PushReturn(r0 *protocol.PushConfig, r1 error) {
	f.PushHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceGitserverPushConfigFunc) nextHook() func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceGitserverPushConfigFunc) appendCall(r0 ChangesetSourceGitserverPushConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceGitserverPushConfigFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceGitserverPushConfigFunc) History() []ChangesetSourceGitserverPushConfigFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceGitserverPushConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceGitserverPushConfigFuncCall is an object that describes an
// invocation of method GitserverPushConfig on an instance of
// MockChangesetSource.
type ChangesetSourceGitserverPushConfigFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalServiceStore
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.PushConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceGitserverPushConfigFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceGitserverPushConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ChangesetSourceLoadChangesetFunc describes the behavior when the
// LoadChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceLoadChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceLoadChangesetFuncCall
	mutex       sync.Mutex
}

// LoadChangeset delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockChangesetSource) LoadChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.LoadChangesetFunc.nextHook()(v0, v1)
	m.LoadChangesetFunc.appendCall(ChangesetSourceLoadChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadChangeset method
// of the parent MockChangesetSource instance is invoked and the hook queue
// is empty.
func (f *ChangesetSourceLoadChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceLoadChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceLoadChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceLoadChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceLoadChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceLoadChangesetFunc) appendCall(r0 ChangesetSourceLoadChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceLoadChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceLoadChangesetFunc) History() []ChangesetSourceLoadChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceLoadChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceLoadChangesetFuncCall is an object that describes an
// invocation of method LoadChangeset on an instance of MockChangesetSource.
type ChangesetSourceLoadChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceLoadChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceLoadChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceMergeChangesetFunc describes the behavior when the
// MergeChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceMergeChangesetFunc struct {
	defaultHook func(context.Context, *Changeset, bool) error
	hooks       []func(context.Context, *Changeset, bool) error
	history     []ChangesetSourceMergeChangesetFuncCall
	mutex       sync.Mutex
}

// MergeChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) MergeChangeset(v0 context.Context, v1 *Changeset, v2 bool) error {
	r0 := m.MergeChangesetFunc.nextHook()(v0, v1, v2)
	m.MergeChangesetFunc.appendCall(ChangesetSourceMergeChangesetFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MergeChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceMergeChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceMergeChangesetFunc) PushHook(hook func(context.Context, *Changeset, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceMergeChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceMergeChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset, bool) error {
		return r0
	})
}

func (f *ChangesetSourceMergeChangesetFunc) nextHook() func(context.Context, *Changeset, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceMergeChangesetFunc) appendCall(r0 ChangesetSourceMergeChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceMergeChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceMergeChangesetFunc) History() []ChangesetSourceMergeChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceMergeChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceMergeChangesetFuncCall is an object that describes an
// invocation of method MergeChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceMergeChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceMergeChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceMergeChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceReopenChangesetFunc describes the behavior when the
// ReopenChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceReopenChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceReopenChangesetFuncCall
	mutex       sync.Mutex
}

// ReopenChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) ReopenChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.ReopenChangesetFunc.nextHook()(v0, v1)
	m.ReopenChangesetFunc.appendCall(ChangesetSourceReopenChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReopenChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceReopenChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReopenChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceReopenChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceReopenChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceReopenChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceReopenChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceReopenChangesetFunc) appendCall(r0 ChangesetSourceReopenChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceReopenChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceReopenChangesetFunc) History() []ChangesetSourceReopenChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceReopenChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceReopenChangesetFuncCall is an object that describes an
// invocation of method ReopenChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceReopenChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceReopenChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceReopenChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceUpdateChangesetFunc describes the behavior when the
// UpdateChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceUpdateChangesetFunc struct {
	defaultHook func(context.Context, *Changeset) error
	hooks       []func(context.Context, *Changeset) error
	history     []ChangesetSourceUpdateChangesetFuncCall
	mutex       sync.Mutex
}

// UpdateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) UpdateChangeset(v0 context.Context, v1 *Changeset) error {
	r0 := m.UpdateChangesetFunc.nextHook()(v0, v1)
	m.UpdateChangesetFunc.appendCall(ChangesetSourceUpdateChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceUpdateChangesetFunc) SetDefaultHook(hook func(context.Context, *Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceUpdateChangesetFunc) PushHook(hook func(context.Context, *Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceUpdateChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceUpdateChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceUpdateChangesetFunc) nextHook() func(context.Context, *Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceUpdateChangesetFunc) appendCall(r0 ChangesetSourceUpdateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceUpdateChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceUpdateChangesetFunc) History() []ChangesetSourceUpdateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceUpdateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceUpdateChangesetFuncCall is an object that describes an
// invocation of method UpdateChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceUpdateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceUpdateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceUpdateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceValidateAuthenticatorFunc describes the behavior when the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// is invoked.
type ChangesetSourceValidateAuthenticatorFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ChangesetSourceValidateAuthenticatorFuncCall
	mutex       sync.Mutex
}

// ValidateAuthenticator delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockChangesetSource) ValidateAuthenticator(v0 context.Context) error {
	r0 := m.ValidateAuthenticatorFunc.nextHook()(v0)
	m.ValidateAuthenticatorFunc.appendCall(ChangesetSourceValidateAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// is invoked and the hook queue is empty.
func (f *ChangesetSourceValidateAuthenticatorFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceValidateAuthenticatorFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceValidateAuthenticatorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceValidateAuthenticatorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ChangesetSourceValidateAuthenticatorFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceValidateAuthenticatorFunc) appendCall(r0 ChangesetSourceValidateAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ChangesetSourceValidateAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *ChangesetSourceValidateAuthenticatorFunc) History() []ChangesetSourceValidateAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceValidateAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceValidateAuthenticatorFuncCall is an object that describes
// an invocation of method ValidateAuthenticator on an instance of
// MockChangesetSource.
type ChangesetSourceValidateAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceValidateAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceValidateAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceWithAuthenticatorFunc describes the behavior when the
// WithAuthenticator method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) (ChangesetSource, error)
	hooks       []func(auth.Authenticator) (ChangesetSource, error)
	history     []ChangesetSourceWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) WithAuthenticator(v0 auth.Authenticator) (ChangesetSource, error) {
	r0, r1 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(ChangesetSourceWithAuthenticatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) (ChangesetSource, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceWithAuthenticatorFunc) SetDefaultReturn(r0 ChangesetSource, r1 error) {
	f.SetDefaultHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceWithAuthenticatorFunc) PushReturn(r0 ChangesetSource, r1 error) {
	f.PushHook(func(auth.Authenticator) (ChangesetSource, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceWithAuthenticatorFunc) nextHook() func(auth.Authenticator) (ChangesetSource, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceWithAuthenticatorFunc) appendCall(r0 ChangesetSourceWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceWithAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceWithAuthenticatorFunc) History() []ChangesetSourceWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceWithAuthenticatorFuncCall is an object that describes an
// invocation of method WithAuthenticator on an instance of
// MockChangesetSource.
type ChangesetSourceWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ChangesetSource
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSourcerStore is a mock implementation of the SourcerStore interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/sources)
// used for unit testing.
type MockSourcerStore struct {
	// DatabaseDBFunc is an instance of a mock function object controlling
	// the behavior of the method DatabaseDB.
	DatabaseDBFunc *SourcerStoreDatabaseDBFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *SourcerStoreExternalServicesFunc
	// GetBatchChangeFunc is an instance of a mock function object
	// controlling the behavior of the method GetBatchChange.
	GetBatchChangeFunc *SourcerStoreGetBatchChangeFunc
	// GetExternalServiceIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetExternalServiceIDs.
	GetExternalServiceIDsFunc *SourcerStoreGetExternalServiceIDsFunc
	// GetSiteCredentialFunc is an instance of a mock function object
	// controlling the behavior of the method GetSiteCredential.
	GetSiteCredentialFunc *SourcerStoreGetSiteCredentialFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *SourcerStoreReposFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *SourcerStoreUserCredentialsFunc
}

// NewMockSourcerStore creates a new mock of the SourcerStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockSourcerStore() *MockSourcerStore {
	return &MockSourcerStore{
		DatabaseDBFunc: &SourcerStoreDatabaseDBFunc{
			defaultHook: func() (r0 database.DB) {
				return
			},
		},
		ExternalServicesFunc: &SourcerStoreExternalServicesFunc{
			defaultHook: func() (r0 database.ExternalServiceStore) {
				return
			},
		},
		GetBatchChangeFunc: &SourcerStoreGetBatchChangeFunc{
			defaultHook: func(context.Context, store.GetBatchChangeOpts) (r0 *types1.BatchChange, r1 error) {
				return
			},
		},
		GetExternalServiceIDsFunc: &SourcerStoreGetExternalServiceIDsFunc{
			defaultHook: func(context.Context, store.GetExternalServiceIDsOpts) (r0 []int64, r1 error) {
				return
			},
		},
		GetSiteCredentialFunc: &SourcerStoreGetSiteCredentialFunc{
			defaultHook: func(context.Context, store.GetSiteCredentialOpts) (r0 *types1.SiteCredential, r1 error) {
				return
			},
		},
		ReposFunc: &SourcerStoreReposFunc{
			defaultHook: func() (r0 database.RepoStore) {
				return
			},
		},
		UserCredentialsFunc: &SourcerStoreUserCredentialsFunc{
			defaultHook: func() (r0 database.UserCredentialsStore) {
				return
			},
		},
	}
}

// NewStrictMockSourcerStore creates a new mock of the SourcerStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSourcerStore() *MockSourcerStore {
	return &MockSourcerStore{
		DatabaseDBFunc: &SourcerStoreDatabaseDBFunc{
			defaultHook: func() database.DB {
				panic("unexpected invocation of MockSourcerStore.DatabaseDB")
			},
		},
		ExternalServicesFunc: &SourcerStoreExternalServicesFunc{
			defaultHook: func() database.ExternalServiceStore {
				panic("unexpected invocation of MockSourcerStore.ExternalServices")
			},
		},
		GetBatchChangeFunc: &SourcerStoreGetBatchChangeFunc{
			defaultHook: func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
				panic("unexpected invocation of MockSourcerStore.GetBatchChange")
			},
		},
		GetExternalServiceIDsFunc: &SourcerStoreGetExternalServiceIDsFunc{
			defaultHook: func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
				panic("unexpected invocation of MockSourcerStore.GetExternalServiceIDs")
			},
		},
		GetSiteCredentialFunc: &SourcerStoreGetSiteCredentialFunc{
			defaultHook: func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
				panic("unexpected invocation of MockSourcerStore.GetSiteCredential")
			},
		},
		ReposFunc: &SourcerStoreReposFunc{
			defaultHook: func() database.RepoStore {
				panic("unexpected invocation of MockSourcerStore.Repos")
			},
		},
		UserCredentialsFunc: &SourcerStoreUserCredentialsFunc{
			defaultHook: func() database.UserCredentialsStore {
				panic("unexpected invocation of MockSourcerStore.UserCredentials")
			},
		},
	}
}

// NewMockSourcerStoreFrom creates a new mock of the MockSourcerStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockSourcerStoreFrom(i SourcerStore) *MockSourcerStore {
	return &MockSourcerStore{
		DatabaseDBFunc: &SourcerStoreDatabaseDBFunc{
			defaultHook: i.DatabaseDB,
		},
		ExternalServicesFunc: &SourcerStoreExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		GetBatchChangeFunc: &SourcerStoreGetBatchChangeFunc{
			defaultHook: i.GetBatchChange,
		},
		GetExternalServiceIDsFunc: &SourcerStoreGetExternalServiceIDsFunc{
			defaultHook: i.GetExternalServiceIDs,
		},
		GetSiteCredentialFunc: &SourcerStoreGetSiteCredentialFunc{
			defaultHook: i.GetSiteCredential,
		},
		ReposFunc: &SourcerStoreReposFunc{
			defaultHook: i.Repos,
		},
		UserCredentialsFunc: &SourcerStoreUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
	}
}

// SourcerStoreDatabaseDBFunc describes the behavior when the DatabaseDB
// method of the parent MockSourcerStore instance is invoked.
type SourcerStoreDatabaseDBFunc struct {
	defaultHook func() database.DB
	hooks       []func() database.DB
	history     []SourcerStoreDatabaseDBFuncCall
	mutex       sync.Mutex
}

// DatabaseDB delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSourcerStore) DatabaseDB() database.DB {
	r0 := m.DatabaseDBFunc.nextHook()()
	m.DatabaseDBFunc.appendCall(SourcerStoreDatabaseDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the DatabaseDB method of
// the parent MockSourcerStore instance is invoked and the hook queue is
// empty.
func (f *SourcerStoreDatabaseDBFunc) SetDefaultHook(hook func() database.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DatabaseDB method of the parent MockSourcerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SourcerStoreDatabaseDBFunc) PushHook(hook func() database.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreDatabaseDBFunc) SetDefaultReturn(r0 database.DB) {
	f.SetDefaultHook(func() database.DB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreDatabaseDBFunc) PushReturn(r0 database.DB) {
	f.PushHook(func() database.DB {
		return r0
	})
}

func (f *SourcerStoreDatabaseDBFunc) nextHook() func() database.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreDatabaseDBFunc) appendCall(r0 SourcerStoreDatabaseDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreDatabaseDBFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreDatabaseDBFunc) History() []SourcerStoreDatabaseDBFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreDatabaseDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreDatabaseDBFuncCall is an object that describes an invocation
// of method DatabaseDB on an instance of MockSourcerStore.
type SourcerStoreDatabaseDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreDatabaseDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreDatabaseDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreExternalServicesFunc describes the behavior when the
// ExternalServices method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreExternalServicesFunc struct {
	defaultHook func() database.ExternalServiceStore
	hooks       []func() database.ExternalServiceStore
	history     []SourcerStoreExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) ExternalServices() database.ExternalServiceStore {
	r0 := m.ExternalServicesFunc.nextHook()()
	m.ExternalServicesFunc.appendCall(SourcerStoreExternalServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreExternalServicesFunc) SetDefaultHook(hook func() database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreExternalServicesFunc) PushHook(hook func() database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreExternalServicesFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func() database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreExternalServicesFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func() database.ExternalServiceStore {
		return r0
	})
}

func (f *SourcerStoreExternalServicesFunc) nextHook() func() database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreExternalServicesFunc) appendCall(r0 SourcerStoreExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreExternalServicesFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreExternalServicesFunc) History() []SourcerStoreExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreExternalServicesFuncCall is an object that describes an
// invocation of method ExternalServices on an instance of MockSourcerStore.
type SourcerStoreExternalServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreGetBatchChangeFunc describes the behavior when the
// GetBatchChange method of the parent MockSourcerStore instance is invoked.
type SourcerStoreGetBatchChangeFunc struct {
	defaultHook func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)
	hooks       []func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)
	history     []SourcerStoreGetBatchChangeFuncCall
	mutex       sync.Mutex
}

// GetBatchChange delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetBatchChange(v0 context.Context, v1 store.GetBatchChangeOpts) (*types1.BatchChange, error) {
	r0, r1 := m.GetBatchChangeFunc.nextHook()(v0, v1)
	m.GetBatchChangeFunc.appendCall(SourcerStoreGetBatchChangeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBatchChange
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreGetBatchChangeFunc) SetDefaultHook(hook func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBatchChange method of the parent MockSourcerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SourcerStoreGetBatchChangeFunc) PushHook(hook func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetBatchChangeFunc) SetDefaultReturn(r0 *types1.BatchChange, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetBatchChangeFunc) PushReturn(r0 *types1.BatchChange, r1 error) {
	f.PushHook(func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetBatchChangeFunc) nextHook() func(context.Context, store.GetBatchChangeOpts) (*types1.BatchChange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetBatchChangeFunc) appendCall(r0 SourcerStoreGetBatchChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetBatchChangeFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreGetBatchChangeFunc) History() []SourcerStoreGetBatchChangeFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetBatchChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetBatchChangeFuncCall is an object that describes an
// invocation of method GetBatchChange on an instance of MockSourcerStore.
type SourcerStoreGetBatchChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetBatchChangeOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types1.BatchChange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetBatchChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetBatchChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreGetExternalServiceIDsFunc describes the behavior when the
// GetExternalServiceIDs method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreGetExternalServiceIDsFunc struct {
	defaultHook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)
	hooks       []func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)
	history     []SourcerStoreGetExternalServiceIDsFuncCall
	mutex       sync.Mutex
}

// GetExternalServiceIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetExternalServiceIDs(v0 context.Context, v1 store.GetExternalServiceIDsOpts) ([]int64, error) {
	r0, r1 := m.GetExternalServiceIDsFunc.nextHook()(v0, v1)
	m.GetExternalServiceIDsFunc.appendCall(SourcerStoreGetExternalServiceIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetExternalServiceIDs method of the parent MockSourcerStore instance is
// invoked and the hook queue is empty.
func (f *SourcerStoreGetExternalServiceIDsFunc) SetDefaultHook(hook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetExternalServiceIDs method of the parent MockSourcerStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SourcerStoreGetExternalServiceIDsFunc) PushHook(hook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetExternalServiceIDsFunc) SetDefaultReturn(r0 []int64, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetExternalServiceIDsFunc) PushReturn(r0 []int64, r1 error) {
	f.PushHook(func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetExternalServiceIDsFunc) nextHook() func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetExternalServiceIDsFunc) appendCall(r0 SourcerStoreGetExternalServiceIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetExternalServiceIDsFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreGetExternalServiceIDsFunc) History() []SourcerStoreGetExternalServiceIDsFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetExternalServiceIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetExternalServiceIDsFuncCall is an object that describes an
// invocation of method GetExternalServiceIDs on an instance of
// MockSourcerStore.
type SourcerStoreGetExternalServiceIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetExternalServiceIDsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetExternalServiceIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetExternalServiceIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreGetSiteCredentialFunc describes the behavior when the
// GetSiteCredential method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreGetSiteCredentialFunc struct {
	defaultHook func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)
	hooks       []func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)
	history     []SourcerStoreGetSiteCredentialFuncCall
	mutex       sync.Mutex
}

// GetSiteCredential delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) GetSiteCredential(v0 context.Context, v1 store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
	r0, r1 := m.GetSiteCredentialFunc.nextHook()(v0, v1)
	m.GetSiteCredentialFunc.appendCall(SourcerStoreGetSiteCredentialFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSiteCredential
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreGetSiteCredentialFunc) SetDefaultHook(hook func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSiteCredential method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreGetSiteCredentialFunc) PushHook(hook func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreGetSiteCredentialFunc) SetDefaultReturn(r0 *types1.SiteCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreGetSiteCredentialFunc) PushReturn(r0 *types1.SiteCredential, r1 error) {
	f.PushHook(func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
		return r0, r1
	})
}

func (f *SourcerStoreGetSiteCredentialFunc) nextHook() func(context.Context, store.GetSiteCredentialOpts) (*types1.SiteCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreGetSiteCredentialFunc) appendCall(r0 SourcerStoreGetSiteCredentialFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreGetSiteCredentialFuncCall
// objects describing the invocations of this function.
func (f *SourcerStoreGetSiteCredentialFunc) History() []SourcerStoreGetSiteCredentialFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreGetSiteCredentialFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreGetSiteCredentialFuncCall is an object that describes an
// invocation of method GetSiteCredential on an instance of
// MockSourcerStore.
type SourcerStoreGetSiteCredentialFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetSiteCredentialOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types1.SiteCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreGetSiteCredentialFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreGetSiteCredentialFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SourcerStoreReposFunc describes the behavior when the Repos method of the
// parent MockSourcerStore instance is invoked.
type SourcerStoreReposFunc struct {
	defaultHook func() database.RepoStore
	hooks       []func() database.RepoStore
	history     []SourcerStoreReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSourcerStore) Repos() database.RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(SourcerStoreReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockSourcerStore instance is invoked and the hook queue is empty.
func (f *SourcerStoreReposFunc) SetDefaultHook(hook func() database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockSourcerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SourcerStoreReposFunc) PushHook(hook func() database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreReposFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func() database.RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreReposFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func() database.RepoStore {
		return r0
	})
}

func (f *SourcerStoreReposFunc) nextHook() func() database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreReposFunc) appendCall(r0 SourcerStoreReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreReposFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreReposFunc) History() []SourcerStoreReposFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreReposFuncCall is an object that describes an invocation of
// method Repos on an instance of MockSourcerStore.
type SourcerStoreReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SourcerStoreUserCredentialsFunc describes the behavior when the
// UserCredentials method of the parent MockSourcerStore instance is
// invoked.
type SourcerStoreUserCredentialsFunc struct {
	defaultHook func() database.UserCredentialsStore
	hooks       []func() database.UserCredentialsStore
	history     []SourcerStoreUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSourcerStore) UserCredentials() database.UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()()
	m.UserCredentialsFunc.appendCall(SourcerStoreUserCredentialsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockSourcerStore instance is invoked and the hook
// queue is empty.
func (f *SourcerStoreUserCredentialsFunc) SetDefaultHook(hook func() database.UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockSourcerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SourcerStoreUserCredentialsFunc) PushHook(hook func() database.UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SourcerStoreUserCredentialsFunc) SetDefaultReturn(r0 database.UserCredentialsStore) {
	f.SetDefaultHook(func() database.UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SourcerStoreUserCredentialsFunc) PushReturn(r0 database.UserCredentialsStore) {
	f.PushHook(func() database.UserCredentialsStore {
		return r0
	})
}

func (f *SourcerStoreUserCredentialsFunc) nextHook() func() database.UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SourcerStoreUserCredentialsFunc) appendCall(r0 SourcerStoreUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SourcerStoreUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *SourcerStoreUserCredentialsFunc) History() []SourcerStoreUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]SourcerStoreUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SourcerStoreUserCredentialsFuncCall is an object that describes an
// invocation of method UserCredentials on an instance of MockSourcerStore.
type SourcerStoreUserCredentialsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SourcerStoreUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SourcerStoreUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
