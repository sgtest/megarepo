// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package syncer

import (
	"context"
	"sync"
	"time"

	store "github.com/sourcegraph/sourcegraph/enterprise/internal/batches/store"
	types "github.com/sourcegraph/sourcegraph/enterprise/internal/batches/types"
	store1 "github.com/sourcegraph/sourcegraph/enterprise/internal/github_apps/store"
	database "github.com/sourcegraph/sourcegraph/internal/database"
)

// MockSyncStore is a mock implementation of the SyncStore interface (from
// the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/syncer)
// used for unit testing.
type MockSyncStore struct {
	// ClockFunc is an instance of a mock function object controlling the
	// behavior of the method Clock.
	ClockFunc *SyncStoreClockFunc
	// DatabaseDBFunc is an instance of a mock function object controlling
	// the behavior of the method DatabaseDB.
	DatabaseDBFunc *SyncStoreDatabaseDBFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *SyncStoreExternalServicesFunc
	// GetBatchChangeFunc is an instance of a mock function object
	// controlling the behavior of the method GetBatchChange.
	GetBatchChangeFunc *SyncStoreGetBatchChangeFunc
	// GetChangesetFunc is an instance of a mock function object controlling
	// the behavior of the method GetChangeset.
	GetChangesetFunc *SyncStoreGetChangesetFunc
	// GetExternalServiceIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetExternalServiceIDs.
	GetExternalServiceIDsFunc *SyncStoreGetExternalServiceIDsFunc
	// GetSiteCredentialFunc is an instance of a mock function object
	// controlling the behavior of the method GetSiteCredential.
	GetSiteCredentialFunc *SyncStoreGetSiteCredentialFunc
	// GitHubAppsStoreFunc is an instance of a mock function object
	// controlling the behavior of the method GitHubAppsStore.
	GitHubAppsStoreFunc *SyncStoreGitHubAppsStoreFunc
	// ListChangesetSyncDataFunc is an instance of a mock function object
	// controlling the behavior of the method ListChangesetSyncData.
	ListChangesetSyncDataFunc *SyncStoreListChangesetSyncDataFunc
	// ListChangesetsFunc is an instance of a mock function object
	// controlling the behavior of the method ListChangesets.
	ListChangesetsFunc *SyncStoreListChangesetsFunc
	// ListCodeHostsFunc is an instance of a mock function object
	// controlling the behavior of the method ListCodeHosts.
	ListCodeHostsFunc *SyncStoreListCodeHostsFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *SyncStoreReposFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SyncStoreTransactFunc
	// UpdateChangesetCodeHostStateFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateChangesetCodeHostState.
	UpdateChangesetCodeHostStateFunc *SyncStoreUpdateChangesetCodeHostStateFunc
	// UpsertChangesetEventsFunc is an instance of a mock function object
	// controlling the behavior of the method UpsertChangesetEvents.
	UpsertChangesetEventsFunc *SyncStoreUpsertChangesetEventsFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *SyncStoreUserCredentialsFunc
}

// NewMockSyncStore creates a new mock of the SyncStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockSyncStore() *MockSyncStore {
	return &MockSyncStore{
		ClockFunc: &SyncStoreClockFunc{
			defaultHook: func() (r0 func() time.Time) {
				return
			},
		},
		DatabaseDBFunc: &SyncStoreDatabaseDBFunc{
			defaultHook: func() (r0 database.DB) {
				return
			},
		},
		ExternalServicesFunc: &SyncStoreExternalServicesFunc{
			defaultHook: func() (r0 database.ExternalServiceStore) {
				return
			},
		},
		GetBatchChangeFunc: &SyncStoreGetBatchChangeFunc{
			defaultHook: func(context.Context, store.GetBatchChangeOpts) (r0 *types.BatchChange, r1 error) {
				return
			},
		},
		GetChangesetFunc: &SyncStoreGetChangesetFunc{
			defaultHook: func(context.Context, store.GetChangesetOpts) (r0 *types.Changeset, r1 error) {
				return
			},
		},
		GetExternalServiceIDsFunc: &SyncStoreGetExternalServiceIDsFunc{
			defaultHook: func(context.Context, store.GetExternalServiceIDsOpts) (r0 []int64, r1 error) {
				return
			},
		},
		GetSiteCredentialFunc: &SyncStoreGetSiteCredentialFunc{
			defaultHook: func(context.Context, store.GetSiteCredentialOpts) (r0 *types.SiteCredential, r1 error) {
				return
			},
		},
		GitHubAppsStoreFunc: &SyncStoreGitHubAppsStoreFunc{
			defaultHook: func() (r0 store1.GitHubAppsStore) {
				return
			},
		},
		ListChangesetSyncDataFunc: &SyncStoreListChangesetSyncDataFunc{
			defaultHook: func(context.Context, store.ListChangesetSyncDataOpts) (r0 []*types.ChangesetSyncData, r1 error) {
				return
			},
		},
		ListChangesetsFunc: &SyncStoreListChangesetsFunc{
			defaultHook: func(context.Context, store.ListChangesetsOpts) (r0 types.Changesets, r1 int64, r2 error) {
				return
			},
		},
		ListCodeHostsFunc: &SyncStoreListCodeHostsFunc{
			defaultHook: func(context.Context, store.ListCodeHostsOpts) (r0 []*types.CodeHost, r1 error) {
				return
			},
		},
		ReposFunc: &SyncStoreReposFunc{
			defaultHook: func() (r0 database.RepoStore) {
				return
			},
		},
		TransactFunc: &SyncStoreTransactFunc{
			defaultHook: func(context.Context) (r0 *store.Store, r1 error) {
				return
			},
		},
		UpdateChangesetCodeHostStateFunc: &SyncStoreUpdateChangesetCodeHostStateFunc{
			defaultHook: func(context.Context, *types.Changeset) (r0 error) {
				return
			},
		},
		UpsertChangesetEventsFunc: &SyncStoreUpsertChangesetEventsFunc{
			defaultHook: func(context.Context, ...*types.ChangesetEvent) (r0 error) {
				return
			},
		},
		UserCredentialsFunc: &SyncStoreUserCredentialsFunc{
			defaultHook: func() (r0 database.UserCredentialsStore) {
				return
			},
		},
	}
}

// NewStrictMockSyncStore creates a new mock of the SyncStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockSyncStore() *MockSyncStore {
	return &MockSyncStore{
		ClockFunc: &SyncStoreClockFunc{
			defaultHook: func() func() time.Time {
				panic("unexpected invocation of MockSyncStore.Clock")
			},
		},
		DatabaseDBFunc: &SyncStoreDatabaseDBFunc{
			defaultHook: func() database.DB {
				panic("unexpected invocation of MockSyncStore.DatabaseDB")
			},
		},
		ExternalServicesFunc: &SyncStoreExternalServicesFunc{
			defaultHook: func() database.ExternalServiceStore {
				panic("unexpected invocation of MockSyncStore.ExternalServices")
			},
		},
		GetBatchChangeFunc: &SyncStoreGetBatchChangeFunc{
			defaultHook: func(context.Context, store.GetBatchChangeOpts) (*types.BatchChange, error) {
				panic("unexpected invocation of MockSyncStore.GetBatchChange")
			},
		},
		GetChangesetFunc: &SyncStoreGetChangesetFunc{
			defaultHook: func(context.Context, store.GetChangesetOpts) (*types.Changeset, error) {
				panic("unexpected invocation of MockSyncStore.GetChangeset")
			},
		},
		GetExternalServiceIDsFunc: &SyncStoreGetExternalServiceIDsFunc{
			defaultHook: func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
				panic("unexpected invocation of MockSyncStore.GetExternalServiceIDs")
			},
		},
		GetSiteCredentialFunc: &SyncStoreGetSiteCredentialFunc{
			defaultHook: func(context.Context, store.GetSiteCredentialOpts) (*types.SiteCredential, error) {
				panic("unexpected invocation of MockSyncStore.GetSiteCredential")
			},
		},
		GitHubAppsStoreFunc: &SyncStoreGitHubAppsStoreFunc{
			defaultHook: func() store1.GitHubAppsStore {
				panic("unexpected invocation of MockSyncStore.GitHubAppsStore")
			},
		},
		ListChangesetSyncDataFunc: &SyncStoreListChangesetSyncDataFunc{
			defaultHook: func(context.Context, store.ListChangesetSyncDataOpts) ([]*types.ChangesetSyncData, error) {
				panic("unexpected invocation of MockSyncStore.ListChangesetSyncData")
			},
		},
		ListChangesetsFunc: &SyncStoreListChangesetsFunc{
			defaultHook: func(context.Context, store.ListChangesetsOpts) (types.Changesets, int64, error) {
				panic("unexpected invocation of MockSyncStore.ListChangesets")
			},
		},
		ListCodeHostsFunc: &SyncStoreListCodeHostsFunc{
			defaultHook: func(context.Context, store.ListCodeHostsOpts) ([]*types.CodeHost, error) {
				panic("unexpected invocation of MockSyncStore.ListCodeHosts")
			},
		},
		ReposFunc: &SyncStoreReposFunc{
			defaultHook: func() database.RepoStore {
				panic("unexpected invocation of MockSyncStore.Repos")
			},
		},
		TransactFunc: &SyncStoreTransactFunc{
			defaultHook: func(context.Context) (*store.Store, error) {
				panic("unexpected invocation of MockSyncStore.Transact")
			},
		},
		UpdateChangesetCodeHostStateFunc: &SyncStoreUpdateChangesetCodeHostStateFunc{
			defaultHook: func(context.Context, *types.Changeset) error {
				panic("unexpected invocation of MockSyncStore.UpdateChangesetCodeHostState")
			},
		},
		UpsertChangesetEventsFunc: &SyncStoreUpsertChangesetEventsFunc{
			defaultHook: func(context.Context, ...*types.ChangesetEvent) error {
				panic("unexpected invocation of MockSyncStore.UpsertChangesetEvents")
			},
		},
		UserCredentialsFunc: &SyncStoreUserCredentialsFunc{
			defaultHook: func() database.UserCredentialsStore {
				panic("unexpected invocation of MockSyncStore.UserCredentials")
			},
		},
	}
}

// NewMockSyncStoreFrom creates a new mock of the MockSyncStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockSyncStoreFrom(i SyncStore) *MockSyncStore {
	return &MockSyncStore{
		ClockFunc: &SyncStoreClockFunc{
			defaultHook: i.Clock,
		},
		DatabaseDBFunc: &SyncStoreDatabaseDBFunc{
			defaultHook: i.DatabaseDB,
		},
		ExternalServicesFunc: &SyncStoreExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		GetBatchChangeFunc: &SyncStoreGetBatchChangeFunc{
			defaultHook: i.GetBatchChange,
		},
		GetChangesetFunc: &SyncStoreGetChangesetFunc{
			defaultHook: i.GetChangeset,
		},
		GetExternalServiceIDsFunc: &SyncStoreGetExternalServiceIDsFunc{
			defaultHook: i.GetExternalServiceIDs,
		},
		GetSiteCredentialFunc: &SyncStoreGetSiteCredentialFunc{
			defaultHook: i.GetSiteCredential,
		},
		GitHubAppsStoreFunc: &SyncStoreGitHubAppsStoreFunc{
			defaultHook: i.GitHubAppsStore,
		},
		ListChangesetSyncDataFunc: &SyncStoreListChangesetSyncDataFunc{
			defaultHook: i.ListChangesetSyncData,
		},
		ListChangesetsFunc: &SyncStoreListChangesetsFunc{
			defaultHook: i.ListChangesets,
		},
		ListCodeHostsFunc: &SyncStoreListCodeHostsFunc{
			defaultHook: i.ListCodeHosts,
		},
		ReposFunc: &SyncStoreReposFunc{
			defaultHook: i.Repos,
		},
		TransactFunc: &SyncStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateChangesetCodeHostStateFunc: &SyncStoreUpdateChangesetCodeHostStateFunc{
			defaultHook: i.UpdateChangesetCodeHostState,
		},
		UpsertChangesetEventsFunc: &SyncStoreUpsertChangesetEventsFunc{
			defaultHook: i.UpsertChangesetEvents,
		},
		UserCredentialsFunc: &SyncStoreUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
	}
}

// SyncStoreClockFunc describes the behavior when the Clock method of the
// parent MockSyncStore instance is invoked.
type SyncStoreClockFunc struct {
	defaultHook func() func() time.Time
	hooks       []func() func() time.Time
	history     []SyncStoreClockFuncCall
	mutex       sync.Mutex
}

// Clock delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSyncStore) Clock() func() time.Time {
	r0 := m.ClockFunc.nextHook()()
	m.ClockFunc.appendCall(SyncStoreClockFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Clock method of the
// parent MockSyncStore instance is invoked and the hook queue is empty.
func (f *SyncStoreClockFunc) SetDefaultHook(hook func() func() time.Time) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Clock method of the parent MockSyncStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *SyncStoreClockFunc) PushHook(hook func() func() time.Time) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreClockFunc) SetDefaultReturn(r0 func() time.Time) {
	f.SetDefaultHook(func() func() time.Time {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreClockFunc) PushReturn(r0 func() time.Time) {
	f.PushHook(func() func() time.Time {
		return r0
	})
}

func (f *SyncStoreClockFunc) nextHook() func() func() time.Time {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreClockFunc) appendCall(r0 SyncStoreClockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreClockFuncCall objects describing
// the invocations of this function.
func (f *SyncStoreClockFunc) History() []SyncStoreClockFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreClockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreClockFuncCall is an object that describes an invocation of
// method Clock on an instance of MockSyncStore.
type SyncStoreClockFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 func() time.Time
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreClockFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreClockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SyncStoreDatabaseDBFunc describes the behavior when the DatabaseDB method
// of the parent MockSyncStore instance is invoked.
type SyncStoreDatabaseDBFunc struct {
	defaultHook func() database.DB
	hooks       []func() database.DB
	history     []SyncStoreDatabaseDBFuncCall
	mutex       sync.Mutex
}

// DatabaseDB delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSyncStore) DatabaseDB() database.DB {
	r0 := m.DatabaseDBFunc.nextHook()()
	m.DatabaseDBFunc.appendCall(SyncStoreDatabaseDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the DatabaseDB method of
// the parent MockSyncStore instance is invoked and the hook queue is empty.
func (f *SyncStoreDatabaseDBFunc) SetDefaultHook(hook func() database.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DatabaseDB method of the parent MockSyncStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SyncStoreDatabaseDBFunc) PushHook(hook func() database.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreDatabaseDBFunc) SetDefaultReturn(r0 database.DB) {
	f.SetDefaultHook(func() database.DB {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreDatabaseDBFunc) PushReturn(r0 database.DB) {
	f.PushHook(func() database.DB {
		return r0
	})
}

func (f *SyncStoreDatabaseDBFunc) nextHook() func() database.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreDatabaseDBFunc) appendCall(r0 SyncStoreDatabaseDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreDatabaseDBFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreDatabaseDBFunc) History() []SyncStoreDatabaseDBFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreDatabaseDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreDatabaseDBFuncCall is an object that describes an invocation of
// method DatabaseDB on an instance of MockSyncStore.
type SyncStoreDatabaseDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreDatabaseDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreDatabaseDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SyncStoreExternalServicesFunc describes the behavior when the
// ExternalServices method of the parent MockSyncStore instance is invoked.
type SyncStoreExternalServicesFunc struct {
	defaultHook func() database.ExternalServiceStore
	hooks       []func() database.ExternalServiceStore
	history     []SyncStoreExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSyncStore) ExternalServices() database.ExternalServiceStore {
	r0 := m.ExternalServicesFunc.nextHook()()
	m.ExternalServicesFunc.appendCall(SyncStoreExternalServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockSyncStore instance is invoked and the hook queue
// is empty.
func (f *SyncStoreExternalServicesFunc) SetDefaultHook(hook func() database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockSyncStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SyncStoreExternalServicesFunc) PushHook(hook func() database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreExternalServicesFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func() database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreExternalServicesFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func() database.ExternalServiceStore {
		return r0
	})
}

func (f *SyncStoreExternalServicesFunc) nextHook() func() database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreExternalServicesFunc) appendCall(r0 SyncStoreExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreExternalServicesFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreExternalServicesFunc) History() []SyncStoreExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreExternalServicesFuncCall is an object that describes an
// invocation of method ExternalServices on an instance of MockSyncStore.
type SyncStoreExternalServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SyncStoreGetBatchChangeFunc describes the behavior when the
// GetBatchChange method of the parent MockSyncStore instance is invoked.
type SyncStoreGetBatchChangeFunc struct {
	defaultHook func(context.Context, store.GetBatchChangeOpts) (*types.BatchChange, error)
	hooks       []func(context.Context, store.GetBatchChangeOpts) (*types.BatchChange, error)
	history     []SyncStoreGetBatchChangeFuncCall
	mutex       sync.Mutex
}

// GetBatchChange delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSyncStore) GetBatchChange(v0 context.Context, v1 store.GetBatchChangeOpts) (*types.BatchChange, error) {
	r0, r1 := m.GetBatchChangeFunc.nextHook()(v0, v1)
	m.GetBatchChangeFunc.appendCall(SyncStoreGetBatchChangeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBatchChange
// method of the parent MockSyncStore instance is invoked and the hook queue
// is empty.
func (f *SyncStoreGetBatchChangeFunc) SetDefaultHook(hook func(context.Context, store.GetBatchChangeOpts) (*types.BatchChange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBatchChange method of the parent MockSyncStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SyncStoreGetBatchChangeFunc) PushHook(hook func(context.Context, store.GetBatchChangeOpts) (*types.BatchChange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreGetBatchChangeFunc) SetDefaultReturn(r0 *types.BatchChange, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetBatchChangeOpts) (*types.BatchChange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreGetBatchChangeFunc) PushReturn(r0 *types.BatchChange, r1 error) {
	f.PushHook(func(context.Context, store.GetBatchChangeOpts) (*types.BatchChange, error) {
		return r0, r1
	})
}

func (f *SyncStoreGetBatchChangeFunc) nextHook() func(context.Context, store.GetBatchChangeOpts) (*types.BatchChange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreGetBatchChangeFunc) appendCall(r0 SyncStoreGetBatchChangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreGetBatchChangeFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreGetBatchChangeFunc) History() []SyncStoreGetBatchChangeFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreGetBatchChangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreGetBatchChangeFuncCall is an object that describes an invocation
// of method GetBatchChange on an instance of MockSyncStore.
type SyncStoreGetBatchChangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetBatchChangeOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.BatchChange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreGetBatchChangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreGetBatchChangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SyncStoreGetChangesetFunc describes the behavior when the GetChangeset
// method of the parent MockSyncStore instance is invoked.
type SyncStoreGetChangesetFunc struct {
	defaultHook func(context.Context, store.GetChangesetOpts) (*types.Changeset, error)
	hooks       []func(context.Context, store.GetChangesetOpts) (*types.Changeset, error)
	history     []SyncStoreGetChangesetFuncCall
	mutex       sync.Mutex
}

// GetChangeset delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSyncStore) GetChangeset(v0 context.Context, v1 store.GetChangesetOpts) (*types.Changeset, error) {
	r0, r1 := m.GetChangesetFunc.nextHook()(v0, v1)
	m.GetChangesetFunc.appendCall(SyncStoreGetChangesetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetChangeset method
// of the parent MockSyncStore instance is invoked and the hook queue is
// empty.
func (f *SyncStoreGetChangesetFunc) SetDefaultHook(hook func(context.Context, store.GetChangesetOpts) (*types.Changeset, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChangeset method of the parent MockSyncStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SyncStoreGetChangesetFunc) PushHook(hook func(context.Context, store.GetChangesetOpts) (*types.Changeset, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreGetChangesetFunc) SetDefaultReturn(r0 *types.Changeset, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetChangesetOpts) (*types.Changeset, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreGetChangesetFunc) PushReturn(r0 *types.Changeset, r1 error) {
	f.PushHook(func(context.Context, store.GetChangesetOpts) (*types.Changeset, error) {
		return r0, r1
	})
}

func (f *SyncStoreGetChangesetFunc) nextHook() func(context.Context, store.GetChangesetOpts) (*types.Changeset, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreGetChangesetFunc) appendCall(r0 SyncStoreGetChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreGetChangesetFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreGetChangesetFunc) History() []SyncStoreGetChangesetFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreGetChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreGetChangesetFuncCall is an object that describes an invocation
// of method GetChangeset on an instance of MockSyncStore.
type SyncStoreGetChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetChangesetOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Changeset
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreGetChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreGetChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SyncStoreGetExternalServiceIDsFunc describes the behavior when the
// GetExternalServiceIDs method of the parent MockSyncStore instance is
// invoked.
type SyncStoreGetExternalServiceIDsFunc struct {
	defaultHook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)
	hooks       []func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)
	history     []SyncStoreGetExternalServiceIDsFuncCall
	mutex       sync.Mutex
}

// GetExternalServiceIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSyncStore) GetExternalServiceIDs(v0 context.Context, v1 store.GetExternalServiceIDsOpts) ([]int64, error) {
	r0, r1 := m.GetExternalServiceIDsFunc.nextHook()(v0, v1)
	m.GetExternalServiceIDsFunc.appendCall(SyncStoreGetExternalServiceIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetExternalServiceIDs method of the parent MockSyncStore instance is
// invoked and the hook queue is empty.
func (f *SyncStoreGetExternalServiceIDsFunc) SetDefaultHook(hook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetExternalServiceIDs method of the parent MockSyncStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SyncStoreGetExternalServiceIDsFunc) PushHook(hook func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreGetExternalServiceIDsFunc) SetDefaultReturn(r0 []int64, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreGetExternalServiceIDsFunc) PushReturn(r0 []int64, r1 error) {
	f.PushHook(func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
		return r0, r1
	})
}

func (f *SyncStoreGetExternalServiceIDsFunc) nextHook() func(context.Context, store.GetExternalServiceIDsOpts) ([]int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreGetExternalServiceIDsFunc) appendCall(r0 SyncStoreGetExternalServiceIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreGetExternalServiceIDsFuncCall
// objects describing the invocations of this function.
func (f *SyncStoreGetExternalServiceIDsFunc) History() []SyncStoreGetExternalServiceIDsFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreGetExternalServiceIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreGetExternalServiceIDsFuncCall is an object that describes an
// invocation of method GetExternalServiceIDs on an instance of
// MockSyncStore.
type SyncStoreGetExternalServiceIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetExternalServiceIDsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreGetExternalServiceIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreGetExternalServiceIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SyncStoreGetSiteCredentialFunc describes the behavior when the
// GetSiteCredential method of the parent MockSyncStore instance is invoked.
type SyncStoreGetSiteCredentialFunc struct {
	defaultHook func(context.Context, store.GetSiteCredentialOpts) (*types.SiteCredential, error)
	hooks       []func(context.Context, store.GetSiteCredentialOpts) (*types.SiteCredential, error)
	history     []SyncStoreGetSiteCredentialFuncCall
	mutex       sync.Mutex
}

// GetSiteCredential delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSyncStore) GetSiteCredential(v0 context.Context, v1 store.GetSiteCredentialOpts) (*types.SiteCredential, error) {
	r0, r1 := m.GetSiteCredentialFunc.nextHook()(v0, v1)
	m.GetSiteCredentialFunc.appendCall(SyncStoreGetSiteCredentialFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSiteCredential
// method of the parent MockSyncStore instance is invoked and the hook queue
// is empty.
func (f *SyncStoreGetSiteCredentialFunc) SetDefaultHook(hook func(context.Context, store.GetSiteCredentialOpts) (*types.SiteCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSiteCredential method of the parent MockSyncStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SyncStoreGetSiteCredentialFunc) PushHook(hook func(context.Context, store.GetSiteCredentialOpts) (*types.SiteCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreGetSiteCredentialFunc) SetDefaultReturn(r0 *types.SiteCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, store.GetSiteCredentialOpts) (*types.SiteCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreGetSiteCredentialFunc) PushReturn(r0 *types.SiteCredential, r1 error) {
	f.PushHook(func(context.Context, store.GetSiteCredentialOpts) (*types.SiteCredential, error) {
		return r0, r1
	})
}

func (f *SyncStoreGetSiteCredentialFunc) nextHook() func(context.Context, store.GetSiteCredentialOpts) (*types.SiteCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreGetSiteCredentialFunc) appendCall(r0 SyncStoreGetSiteCredentialFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreGetSiteCredentialFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreGetSiteCredentialFunc) History() []SyncStoreGetSiteCredentialFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreGetSiteCredentialFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreGetSiteCredentialFuncCall is an object that describes an
// invocation of method GetSiteCredential on an instance of MockSyncStore.
type SyncStoreGetSiteCredentialFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.GetSiteCredentialOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SiteCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreGetSiteCredentialFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreGetSiteCredentialFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SyncStoreGitHubAppsStoreFunc describes the behavior when the
// GitHubAppsStore method of the parent MockSyncStore instance is invoked.
type SyncStoreGitHubAppsStoreFunc struct {
	defaultHook func() store1.GitHubAppsStore
	hooks       []func() store1.GitHubAppsStore
	history     []SyncStoreGitHubAppsStoreFuncCall
	mutex       sync.Mutex
}

// GitHubAppsStore delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSyncStore) GitHubAppsStore() store1.GitHubAppsStore {
	r0 := m.GitHubAppsStoreFunc.nextHook()()
	m.GitHubAppsStoreFunc.appendCall(SyncStoreGitHubAppsStoreFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitHubAppsStore
// method of the parent MockSyncStore instance is invoked and the hook queue
// is empty.
func (f *SyncStoreGitHubAppsStoreFunc) SetDefaultHook(hook func() store1.GitHubAppsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitHubAppsStore method of the parent MockSyncStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SyncStoreGitHubAppsStoreFunc) PushHook(hook func() store1.GitHubAppsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreGitHubAppsStoreFunc) SetDefaultReturn(r0 store1.GitHubAppsStore) {
	f.SetDefaultHook(func() store1.GitHubAppsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreGitHubAppsStoreFunc) PushReturn(r0 store1.GitHubAppsStore) {
	f.PushHook(func() store1.GitHubAppsStore {
		return r0
	})
}

func (f *SyncStoreGitHubAppsStoreFunc) nextHook() func() store1.GitHubAppsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreGitHubAppsStoreFunc) appendCall(r0 SyncStoreGitHubAppsStoreFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreGitHubAppsStoreFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreGitHubAppsStoreFunc) History() []SyncStoreGitHubAppsStoreFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreGitHubAppsStoreFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreGitHubAppsStoreFuncCall is an object that describes an
// invocation of method GitHubAppsStore on an instance of MockSyncStore.
type SyncStoreGitHubAppsStoreFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 store1.GitHubAppsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreGitHubAppsStoreFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreGitHubAppsStoreFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SyncStoreListChangesetSyncDataFunc describes the behavior when the
// ListChangesetSyncData method of the parent MockSyncStore instance is
// invoked.
type SyncStoreListChangesetSyncDataFunc struct {
	defaultHook func(context.Context, store.ListChangesetSyncDataOpts) ([]*types.ChangesetSyncData, error)
	hooks       []func(context.Context, store.ListChangesetSyncDataOpts) ([]*types.ChangesetSyncData, error)
	history     []SyncStoreListChangesetSyncDataFuncCall
	mutex       sync.Mutex
}

// ListChangesetSyncData delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSyncStore) ListChangesetSyncData(v0 context.Context, v1 store.ListChangesetSyncDataOpts) ([]*types.ChangesetSyncData, error) {
	r0, r1 := m.ListChangesetSyncDataFunc.nextHook()(v0, v1)
	m.ListChangesetSyncDataFunc.appendCall(SyncStoreListChangesetSyncDataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListChangesetSyncData method of the parent MockSyncStore instance is
// invoked and the hook queue is empty.
func (f *SyncStoreListChangesetSyncDataFunc) SetDefaultHook(hook func(context.Context, store.ListChangesetSyncDataOpts) ([]*types.ChangesetSyncData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListChangesetSyncData method of the parent MockSyncStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SyncStoreListChangesetSyncDataFunc) PushHook(hook func(context.Context, store.ListChangesetSyncDataOpts) ([]*types.ChangesetSyncData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreListChangesetSyncDataFunc) SetDefaultReturn(r0 []*types.ChangesetSyncData, r1 error) {
	f.SetDefaultHook(func(context.Context, store.ListChangesetSyncDataOpts) ([]*types.ChangesetSyncData, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreListChangesetSyncDataFunc) PushReturn(r0 []*types.ChangesetSyncData, r1 error) {
	f.PushHook(func(context.Context, store.ListChangesetSyncDataOpts) ([]*types.ChangesetSyncData, error) {
		return r0, r1
	})
}

func (f *SyncStoreListChangesetSyncDataFunc) nextHook() func(context.Context, store.ListChangesetSyncDataOpts) ([]*types.ChangesetSyncData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreListChangesetSyncDataFunc) appendCall(r0 SyncStoreListChangesetSyncDataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreListChangesetSyncDataFuncCall
// objects describing the invocations of this function.
func (f *SyncStoreListChangesetSyncDataFunc) History() []SyncStoreListChangesetSyncDataFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreListChangesetSyncDataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreListChangesetSyncDataFuncCall is an object that describes an
// invocation of method ListChangesetSyncData on an instance of
// MockSyncStore.
type SyncStoreListChangesetSyncDataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.ListChangesetSyncDataOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ChangesetSyncData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreListChangesetSyncDataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreListChangesetSyncDataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SyncStoreListChangesetsFunc describes the behavior when the
// ListChangesets method of the parent MockSyncStore instance is invoked.
type SyncStoreListChangesetsFunc struct {
	defaultHook func(context.Context, store.ListChangesetsOpts) (types.Changesets, int64, error)
	hooks       []func(context.Context, store.ListChangesetsOpts) (types.Changesets, int64, error)
	history     []SyncStoreListChangesetsFuncCall
	mutex       sync.Mutex
}

// ListChangesets delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSyncStore) ListChangesets(v0 context.Context, v1 store.ListChangesetsOpts) (types.Changesets, int64, error) {
	r0, r1, r2 := m.ListChangesetsFunc.nextHook()(v0, v1)
	m.ListChangesetsFunc.appendCall(SyncStoreListChangesetsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ListChangesets
// method of the parent MockSyncStore instance is invoked and the hook queue
// is empty.
func (f *SyncStoreListChangesetsFunc) SetDefaultHook(hook func(context.Context, store.ListChangesetsOpts) (types.Changesets, int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListChangesets method of the parent MockSyncStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SyncStoreListChangesetsFunc) PushHook(hook func(context.Context, store.ListChangesetsOpts) (types.Changesets, int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreListChangesetsFunc) SetDefaultReturn(r0 types.Changesets, r1 int64, r2 error) {
	f.SetDefaultHook(func(context.Context, store.ListChangesetsOpts) (types.Changesets, int64, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreListChangesetsFunc) PushReturn(r0 types.Changesets, r1 int64, r2 error) {
	f.PushHook(func(context.Context, store.ListChangesetsOpts) (types.Changesets, int64, error) {
		return r0, r1, r2
	})
}

func (f *SyncStoreListChangesetsFunc) nextHook() func(context.Context, store.ListChangesetsOpts) (types.Changesets, int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreListChangesetsFunc) appendCall(r0 SyncStoreListChangesetsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreListChangesetsFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreListChangesetsFunc) History() []SyncStoreListChangesetsFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreListChangesetsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreListChangesetsFuncCall is an object that describes an invocation
// of method ListChangesets on an instance of MockSyncStore.
type SyncStoreListChangesetsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.ListChangesetsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Changesets
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int64
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreListChangesetsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreListChangesetsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// SyncStoreListCodeHostsFunc describes the behavior when the ListCodeHosts
// method of the parent MockSyncStore instance is invoked.
type SyncStoreListCodeHostsFunc struct {
	defaultHook func(context.Context, store.ListCodeHostsOpts) ([]*types.CodeHost, error)
	hooks       []func(context.Context, store.ListCodeHostsOpts) ([]*types.CodeHost, error)
	history     []SyncStoreListCodeHostsFuncCall
	mutex       sync.Mutex
}

// ListCodeHosts delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSyncStore) ListCodeHosts(v0 context.Context, v1 store.ListCodeHostsOpts) ([]*types.CodeHost, error) {
	r0, r1 := m.ListCodeHostsFunc.nextHook()(v0, v1)
	m.ListCodeHostsFunc.appendCall(SyncStoreListCodeHostsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListCodeHosts method
// of the parent MockSyncStore instance is invoked and the hook queue is
// empty.
func (f *SyncStoreListCodeHostsFunc) SetDefaultHook(hook func(context.Context, store.ListCodeHostsOpts) ([]*types.CodeHost, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListCodeHosts method of the parent MockSyncStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SyncStoreListCodeHostsFunc) PushHook(hook func(context.Context, store.ListCodeHostsOpts) ([]*types.CodeHost, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreListCodeHostsFunc) SetDefaultReturn(r0 []*types.CodeHost, r1 error) {
	f.SetDefaultHook(func(context.Context, store.ListCodeHostsOpts) ([]*types.CodeHost, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreListCodeHostsFunc) PushReturn(r0 []*types.CodeHost, r1 error) {
	f.PushHook(func(context.Context, store.ListCodeHostsOpts) ([]*types.CodeHost, error) {
		return r0, r1
	})
}

func (f *SyncStoreListCodeHostsFunc) nextHook() func(context.Context, store.ListCodeHostsOpts) ([]*types.CodeHost, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreListCodeHostsFunc) appendCall(r0 SyncStoreListCodeHostsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreListCodeHostsFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreListCodeHostsFunc) History() []SyncStoreListCodeHostsFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreListCodeHostsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreListCodeHostsFuncCall is an object that describes an invocation
// of method ListCodeHosts on an instance of MockSyncStore.
type SyncStoreListCodeHostsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.ListCodeHostsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.CodeHost
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreListCodeHostsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreListCodeHostsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SyncStoreReposFunc describes the behavior when the Repos method of the
// parent MockSyncStore instance is invoked.
type SyncStoreReposFunc struct {
	defaultHook func() database.RepoStore
	hooks       []func() database.RepoStore
	history     []SyncStoreReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSyncStore) Repos() database.RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(SyncStoreReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockSyncStore instance is invoked and the hook queue is empty.
func (f *SyncStoreReposFunc) SetDefaultHook(hook func() database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockSyncStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *SyncStoreReposFunc) PushHook(hook func() database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreReposFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func() database.RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreReposFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func() database.RepoStore {
		return r0
	})
}

func (f *SyncStoreReposFunc) nextHook() func() database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreReposFunc) appendCall(r0 SyncStoreReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreReposFuncCall objects describing
// the invocations of this function.
func (f *SyncStoreReposFunc) History() []SyncStoreReposFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreReposFuncCall is an object that describes an invocation of
// method Repos on an instance of MockSyncStore.
type SyncStoreReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SyncStoreTransactFunc describes the behavior when the Transact method of
// the parent MockSyncStore instance is invoked.
type SyncStoreTransactFunc struct {
	defaultHook func(context.Context) (*store.Store, error)
	hooks       []func(context.Context) (*store.Store, error)
	history     []SyncStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSyncStore) Transact(v0 context.Context) (*store.Store, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SyncStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSyncStore instance is invoked and the hook queue is empty.
func (f *SyncStoreTransactFunc) SetDefaultHook(hook func(context.Context) (*store.Store, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSyncStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SyncStoreTransactFunc) PushHook(hook func(context.Context) (*store.Store, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreTransactFunc) SetDefaultReturn(r0 *store.Store, r1 error) {
	f.SetDefaultHook(func(context.Context) (*store.Store, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreTransactFunc) PushReturn(r0 *store.Store, r1 error) {
	f.PushHook(func(context.Context) (*store.Store, error) {
		return r0, r1
	})
}

func (f *SyncStoreTransactFunc) nextHook() func(context.Context) (*store.Store, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreTransactFunc) appendCall(r0 SyncStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreTransactFunc) History() []SyncStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockSyncStore.
type SyncStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *store.Store
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SyncStoreUpdateChangesetCodeHostStateFunc describes the behavior when the
// UpdateChangesetCodeHostState method of the parent MockSyncStore instance
// is invoked.
type SyncStoreUpdateChangesetCodeHostStateFunc struct {
	defaultHook func(context.Context, *types.Changeset) error
	hooks       []func(context.Context, *types.Changeset) error
	history     []SyncStoreUpdateChangesetCodeHostStateFuncCall
	mutex       sync.Mutex
}

// UpdateChangesetCodeHostState delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockSyncStore) UpdateChangesetCodeHostState(v0 context.Context, v1 *types.Changeset) error {
	r0 := m.UpdateChangesetCodeHostStateFunc.nextHook()(v0, v1)
	m.UpdateChangesetCodeHostStateFunc.appendCall(SyncStoreUpdateChangesetCodeHostStateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateChangesetCodeHostState method of the parent MockSyncStore instance
// is invoked and the hook queue is empty.
func (f *SyncStoreUpdateChangesetCodeHostStateFunc) SetDefaultHook(hook func(context.Context, *types.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateChangesetCodeHostState method of the parent MockSyncStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SyncStoreUpdateChangesetCodeHostStateFunc) PushHook(hook func(context.Context, *types.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreUpdateChangesetCodeHostStateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreUpdateChangesetCodeHostStateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.Changeset) error {
		return r0
	})
}

func (f *SyncStoreUpdateChangesetCodeHostStateFunc) nextHook() func(context.Context, *types.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreUpdateChangesetCodeHostStateFunc) appendCall(r0 SyncStoreUpdateChangesetCodeHostStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SyncStoreUpdateChangesetCodeHostStateFuncCall objects describing the
// invocations of this function.
func (f *SyncStoreUpdateChangesetCodeHostStateFunc) History() []SyncStoreUpdateChangesetCodeHostStateFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreUpdateChangesetCodeHostStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreUpdateChangesetCodeHostStateFuncCall is an object that describes
// an invocation of method UpdateChangesetCodeHostState on an instance of
// MockSyncStore.
type SyncStoreUpdateChangesetCodeHostStateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreUpdateChangesetCodeHostStateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreUpdateChangesetCodeHostStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SyncStoreUpsertChangesetEventsFunc describes the behavior when the
// UpsertChangesetEvents method of the parent MockSyncStore instance is
// invoked.
type SyncStoreUpsertChangesetEventsFunc struct {
	defaultHook func(context.Context, ...*types.ChangesetEvent) error
	hooks       []func(context.Context, ...*types.ChangesetEvent) error
	history     []SyncStoreUpsertChangesetEventsFuncCall
	mutex       sync.Mutex
}

// UpsertChangesetEvents delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSyncStore) UpsertChangesetEvents(v0 context.Context, v1 ...*types.ChangesetEvent) error {
	r0 := m.UpsertChangesetEventsFunc.nextHook()(v0, v1...)
	m.UpsertChangesetEventsFunc.appendCall(SyncStoreUpsertChangesetEventsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpsertChangesetEvents method of the parent MockSyncStore instance is
// invoked and the hook queue is empty.
func (f *SyncStoreUpsertChangesetEventsFunc) SetDefaultHook(hook func(context.Context, ...*types.ChangesetEvent) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertChangesetEvents method of the parent MockSyncStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SyncStoreUpsertChangesetEventsFunc) PushHook(hook func(context.Context, ...*types.ChangesetEvent) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreUpsertChangesetEventsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.ChangesetEvent) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreUpsertChangesetEventsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.ChangesetEvent) error {
		return r0
	})
}

func (f *SyncStoreUpsertChangesetEventsFunc) nextHook() func(context.Context, ...*types.ChangesetEvent) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreUpsertChangesetEventsFunc) appendCall(r0 SyncStoreUpsertChangesetEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreUpsertChangesetEventsFuncCall
// objects describing the invocations of this function.
func (f *SyncStoreUpsertChangesetEventsFunc) History() []SyncStoreUpsertChangesetEventsFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreUpsertChangesetEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreUpsertChangesetEventsFuncCall is an object that describes an
// invocation of method UpsertChangesetEvents on an instance of
// MockSyncStore.
type SyncStoreUpsertChangesetEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.ChangesetEvent
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c SyncStoreUpsertChangesetEventsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreUpsertChangesetEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SyncStoreUserCredentialsFunc describes the behavior when the
// UserCredentials method of the parent MockSyncStore instance is invoked.
type SyncStoreUserCredentialsFunc struct {
	defaultHook func() database.UserCredentialsStore
	hooks       []func() database.UserCredentialsStore
	history     []SyncStoreUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSyncStore) UserCredentials() database.UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()()
	m.UserCredentialsFunc.appendCall(SyncStoreUserCredentialsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockSyncStore instance is invoked and the hook queue
// is empty.
func (f *SyncStoreUserCredentialsFunc) SetDefaultHook(hook func() database.UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockSyncStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SyncStoreUserCredentialsFunc) PushHook(hook func() database.UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncStoreUserCredentialsFunc) SetDefaultReturn(r0 database.UserCredentialsStore) {
	f.SetDefaultHook(func() database.UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncStoreUserCredentialsFunc) PushReturn(r0 database.UserCredentialsStore) {
	f.PushHook(func() database.UserCredentialsStore {
		return r0
	})
}

func (f *SyncStoreUserCredentialsFunc) nextHook() func() database.UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncStoreUserCredentialsFunc) appendCall(r0 SyncStoreUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncStoreUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *SyncStoreUserCredentialsFunc) History() []SyncStoreUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]SyncStoreUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncStoreUserCredentialsFuncCall is an object that describes an
// invocation of method UserCredentials on an instance of MockSyncStore.
type SyncStoreUserCredentialsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncStoreUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncStoreUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
