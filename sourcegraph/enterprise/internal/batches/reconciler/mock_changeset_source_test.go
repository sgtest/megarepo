// Code generated by go-mockgen 1.3.1; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package reconciler

import (
	"context"
	"sync"

	sources "github.com/sourcegraph/sourcegraph/enterprise/internal/batches/sources"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	auth "github.com/sourcegraph/sourcegraph/internal/extsvc/auth"
	protocol "github.com/sourcegraph/sourcegraph/internal/gitserver/protocol"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockChangesetSource is a mock implementation of the ChangesetSource
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/sources)
// used for unit testing.
type MockChangesetSource struct {
	// CloseChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CloseChangeset.
	CloseChangesetFunc *ChangesetSourceCloseChangesetFunc
	// CreateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CreateChangeset.
	CreateChangesetFunc *ChangesetSourceCreateChangesetFunc
	// CreateCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreateComment.
	CreateCommentFunc *ChangesetSourceCreateCommentFunc
	// GitserverPushConfigFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverPushConfig.
	GitserverPushConfigFunc *ChangesetSourceGitserverPushConfigFunc
	// LoadChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method LoadChangeset.
	LoadChangesetFunc *ChangesetSourceLoadChangesetFunc
	// MergeChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method MergeChangeset.
	MergeChangesetFunc *ChangesetSourceMergeChangesetFunc
	// ReopenChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method ReopenChangeset.
	ReopenChangesetFunc *ChangesetSourceReopenChangesetFunc
	// UpdateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateChangeset.
	UpdateChangesetFunc *ChangesetSourceUpdateChangesetFunc
	// ValidateAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method ValidateAuthenticator.
	ValidateAuthenticatorFunc *ChangesetSourceValidateAuthenticatorFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *ChangesetSourceWithAuthenticatorFunc
}

// NewMockChangesetSource creates a new mock of the ChangesetSource
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockChangesetSource() *MockChangesetSource {
	return &MockChangesetSource{
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 error) {
				return
			},
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 bool, r1 error) {
				return
			},
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *sources.Changeset, string) (r0 error) {
				return
			},
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (r0 *protocol.PushConfig, r1 error) {
				return
			},
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 error) {
				return
			},
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset, bool) (r0 error) {
				return
			},
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 error) {
				return
			},
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 error) {
				return
			},
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 sources.ChangesetSource, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockChangesetSource creates a new mock of the ChangesetSource
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockChangesetSource() *MockChangesetSource {
	return &MockChangesetSource{
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) error {
				panic("unexpected invocation of MockChangesetSource.CloseChangeset")
			},
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (bool, error) {
				panic("unexpected invocation of MockChangesetSource.CreateChangeset")
			},
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *sources.Changeset, string) error {
				panic("unexpected invocation of MockChangesetSource.CreateComment")
			},
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
				panic("unexpected invocation of MockChangesetSource.GitserverPushConfig")
			},
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) error {
				panic("unexpected invocation of MockChangesetSource.LoadChangeset")
			},
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset, bool) error {
				panic("unexpected invocation of MockChangesetSource.MergeChangeset")
			},
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) error {
				panic("unexpected invocation of MockChangesetSource.ReopenChangeset")
			},
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) error {
				panic("unexpected invocation of MockChangesetSource.UpdateChangeset")
			},
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockChangesetSource.ValidateAuthenticator")
			},
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (sources.ChangesetSource, error) {
				panic("unexpected invocation of MockChangesetSource.WithAuthenticator")
			},
		},
	}
}

// NewMockChangesetSourceFrom creates a new mock of the MockChangesetSource
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockChangesetSourceFrom(i sources.ChangesetSource) *MockChangesetSource {
	return &MockChangesetSource{
		CloseChangesetFunc: &ChangesetSourceCloseChangesetFunc{
			defaultHook: i.CloseChangeset,
		},
		CreateChangesetFunc: &ChangesetSourceCreateChangesetFunc{
			defaultHook: i.CreateChangeset,
		},
		CreateCommentFunc: &ChangesetSourceCreateCommentFunc{
			defaultHook: i.CreateComment,
		},
		GitserverPushConfigFunc: &ChangesetSourceGitserverPushConfigFunc{
			defaultHook: i.GitserverPushConfig,
		},
		LoadChangesetFunc: &ChangesetSourceLoadChangesetFunc{
			defaultHook: i.LoadChangeset,
		},
		MergeChangesetFunc: &ChangesetSourceMergeChangesetFunc{
			defaultHook: i.MergeChangeset,
		},
		ReopenChangesetFunc: &ChangesetSourceReopenChangesetFunc{
			defaultHook: i.ReopenChangeset,
		},
		UpdateChangesetFunc: &ChangesetSourceUpdateChangesetFunc{
			defaultHook: i.UpdateChangeset,
		},
		ValidateAuthenticatorFunc: &ChangesetSourceValidateAuthenticatorFunc{
			defaultHook: i.ValidateAuthenticator,
		},
		WithAuthenticatorFunc: &ChangesetSourceWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// ChangesetSourceCloseChangesetFunc describes the behavior when the
// CloseChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCloseChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) error
	hooks       []func(context.Context, *sources.Changeset) error
	history     []ChangesetSourceCloseChangesetFuncCall
	mutex       sync.Mutex
}

// CloseChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) CloseChangeset(v0 context.Context, v1 *sources.Changeset) error {
	r0 := m.CloseChangesetFunc.nextHook()(v0, v1)
	m.CloseChangesetFunc.appendCall(ChangesetSourceCloseChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceCloseChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCloseChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCloseChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCloseChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceCloseChangesetFunc) nextHook() func(context.Context, *sources.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCloseChangesetFunc) appendCall(r0 ChangesetSourceCloseChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCloseChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCloseChangesetFunc) History() []ChangesetSourceCloseChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCloseChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCloseChangesetFuncCall is an object that describes an
// invocation of method CloseChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceCloseChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCloseChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCloseChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceCreateChangesetFunc describes the behavior when the
// CreateChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCreateChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) (bool, error)
	hooks       []func(context.Context, *sources.Changeset) (bool, error)
	history     []ChangesetSourceCreateChangesetFuncCall
	mutex       sync.Mutex
}

// CreateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) CreateChangeset(v0 context.Context, v1 *sources.Changeset) (bool, error) {
	r0, r1 := m.CreateChangesetFunc.nextHook()(v0, v1)
	m.CreateChangesetFunc.appendCall(ChangesetSourceCreateChangesetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceCreateChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCreateChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCreateChangesetFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCreateChangesetFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *sources.Changeset) (bool, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceCreateChangesetFunc) nextHook() func(context.Context, *sources.Changeset) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCreateChangesetFunc) appendCall(r0 ChangesetSourceCreateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCreateChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCreateChangesetFunc) History() []ChangesetSourceCreateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCreateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCreateChangesetFuncCall is an object that describes an
// invocation of method CreateChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceCreateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCreateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCreateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ChangesetSourceCreateCommentFunc describes the behavior when the
// CreateComment method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceCreateCommentFunc struct {
	defaultHook func(context.Context, *sources.Changeset, string) error
	hooks       []func(context.Context, *sources.Changeset, string) error
	history     []ChangesetSourceCreateCommentFuncCall
	mutex       sync.Mutex
}

// CreateComment delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockChangesetSource) CreateComment(v0 context.Context, v1 *sources.Changeset, v2 string) error {
	r0 := m.CreateCommentFunc.nextHook()(v0, v1, v2)
	m.CreateCommentFunc.appendCall(ChangesetSourceCreateCommentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateComment method
// of the parent MockChangesetSource instance is invoked and the hook queue
// is empty.
func (f *ChangesetSourceCreateCommentFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateComment method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceCreateCommentFunc) PushHook(hook func(context.Context, *sources.Changeset, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceCreateCommentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceCreateCommentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset, string) error {
		return r0
	})
}

func (f *ChangesetSourceCreateCommentFunc) nextHook() func(context.Context, *sources.Changeset, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceCreateCommentFunc) appendCall(r0 ChangesetSourceCreateCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceCreateCommentFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceCreateCommentFunc) History() []ChangesetSourceCreateCommentFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceCreateCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceCreateCommentFuncCall is an object that describes an
// invocation of method CreateComment on an instance of MockChangesetSource.
type ChangesetSourceCreateCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceCreateCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceCreateCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceGitserverPushConfigFunc describes the behavior when the
// GitserverPushConfig method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceGitserverPushConfigFunc struct {
	defaultHook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	hooks       []func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	history     []ChangesetSourceGitserverPushConfigFuncCall
	mutex       sync.Mutex
}

// GitserverPushConfig delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) GitserverPushConfig(v0 context.Context, v1 database.ExternalServiceStore, v2 *types.Repo) (*protocol.PushConfig, error) {
	r0, r1 := m.GitserverPushConfigFunc.nextHook()(v0, v1, v2)
	m.GitserverPushConfigFunc.appendCall(ChangesetSourceGitserverPushConfigFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GitserverPushConfig
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceGitserverPushConfigFunc) SetDefaultHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverPushConfig method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceGitserverPushConfigFunc) PushHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceGitserverPushConfigFunc) SetDefaultReturn(r0 *protocol.PushConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceGitserverPushConfigFunc) PushReturn(r0 *protocol.PushConfig, r1 error) {
	f.PushHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceGitserverPushConfigFunc) nextHook() func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceGitserverPushConfigFunc) appendCall(r0 ChangesetSourceGitserverPushConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceGitserverPushConfigFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceGitserverPushConfigFunc) History() []ChangesetSourceGitserverPushConfigFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceGitserverPushConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceGitserverPushConfigFuncCall is an object that describes an
// invocation of method GitserverPushConfig on an instance of
// MockChangesetSource.
type ChangesetSourceGitserverPushConfigFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalServiceStore
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.PushConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceGitserverPushConfigFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceGitserverPushConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ChangesetSourceLoadChangesetFunc describes the behavior when the
// LoadChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceLoadChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) error
	hooks       []func(context.Context, *sources.Changeset) error
	history     []ChangesetSourceLoadChangesetFuncCall
	mutex       sync.Mutex
}

// LoadChangeset delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockChangesetSource) LoadChangeset(v0 context.Context, v1 *sources.Changeset) error {
	r0 := m.LoadChangesetFunc.nextHook()(v0, v1)
	m.LoadChangesetFunc.appendCall(ChangesetSourceLoadChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadChangeset method
// of the parent MockChangesetSource instance is invoked and the hook queue
// is empty.
func (f *ChangesetSourceLoadChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceLoadChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceLoadChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceLoadChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceLoadChangesetFunc) nextHook() func(context.Context, *sources.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceLoadChangesetFunc) appendCall(r0 ChangesetSourceLoadChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceLoadChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceLoadChangesetFunc) History() []ChangesetSourceLoadChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceLoadChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceLoadChangesetFuncCall is an object that describes an
// invocation of method LoadChangeset on an instance of MockChangesetSource.
type ChangesetSourceLoadChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceLoadChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceLoadChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceMergeChangesetFunc describes the behavior when the
// MergeChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceMergeChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset, bool) error
	hooks       []func(context.Context, *sources.Changeset, bool) error
	history     []ChangesetSourceMergeChangesetFuncCall
	mutex       sync.Mutex
}

// MergeChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) MergeChangeset(v0 context.Context, v1 *sources.Changeset, v2 bool) error {
	r0 := m.MergeChangesetFunc.nextHook()(v0, v1, v2)
	m.MergeChangesetFunc.appendCall(ChangesetSourceMergeChangesetFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MergeChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceMergeChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceMergeChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceMergeChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceMergeChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset, bool) error {
		return r0
	})
}

func (f *ChangesetSourceMergeChangesetFunc) nextHook() func(context.Context, *sources.Changeset, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceMergeChangesetFunc) appendCall(r0 ChangesetSourceMergeChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceMergeChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceMergeChangesetFunc) History() []ChangesetSourceMergeChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceMergeChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceMergeChangesetFuncCall is an object that describes an
// invocation of method MergeChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceMergeChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceMergeChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceMergeChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceReopenChangesetFunc describes the behavior when the
// ReopenChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceReopenChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) error
	hooks       []func(context.Context, *sources.Changeset) error
	history     []ChangesetSourceReopenChangesetFuncCall
	mutex       sync.Mutex
}

// ReopenChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) ReopenChangeset(v0 context.Context, v1 *sources.Changeset) error {
	r0 := m.ReopenChangesetFunc.nextHook()(v0, v1)
	m.ReopenChangesetFunc.appendCall(ChangesetSourceReopenChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReopenChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceReopenChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReopenChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceReopenChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceReopenChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceReopenChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceReopenChangesetFunc) nextHook() func(context.Context, *sources.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceReopenChangesetFunc) appendCall(r0 ChangesetSourceReopenChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceReopenChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceReopenChangesetFunc) History() []ChangesetSourceReopenChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceReopenChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceReopenChangesetFuncCall is an object that describes an
// invocation of method ReopenChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceReopenChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceReopenChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceReopenChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceUpdateChangesetFunc describes the behavior when the
// UpdateChangeset method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceUpdateChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) error
	hooks       []func(context.Context, *sources.Changeset) error
	history     []ChangesetSourceUpdateChangesetFuncCall
	mutex       sync.Mutex
}

// UpdateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) UpdateChangeset(v0 context.Context, v1 *sources.Changeset) error {
	r0 := m.UpdateChangesetFunc.nextHook()(v0, v1)
	m.UpdateChangesetFunc.appendCall(ChangesetSourceUpdateChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateChangeset
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceUpdateChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateChangeset method of the parent MockChangesetSource instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ChangesetSourceUpdateChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceUpdateChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceUpdateChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

func (f *ChangesetSourceUpdateChangesetFunc) nextHook() func(context.Context, *sources.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceUpdateChangesetFunc) appendCall(r0 ChangesetSourceUpdateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceUpdateChangesetFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceUpdateChangesetFunc) History() []ChangesetSourceUpdateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceUpdateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceUpdateChangesetFuncCall is an object that describes an
// invocation of method UpdateChangeset on an instance of
// MockChangesetSource.
type ChangesetSourceUpdateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceUpdateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceUpdateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceValidateAuthenticatorFunc describes the behavior when the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// is invoked.
type ChangesetSourceValidateAuthenticatorFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ChangesetSourceValidateAuthenticatorFuncCall
	mutex       sync.Mutex
}

// ValidateAuthenticator delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockChangesetSource) ValidateAuthenticator(v0 context.Context) error {
	r0 := m.ValidateAuthenticatorFunc.nextHook()(v0)
	m.ValidateAuthenticatorFunc.appendCall(ChangesetSourceValidateAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// is invoked and the hook queue is empty.
func (f *ChangesetSourceValidateAuthenticatorFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidateAuthenticator method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceValidateAuthenticatorFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceValidateAuthenticatorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceValidateAuthenticatorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ChangesetSourceValidateAuthenticatorFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceValidateAuthenticatorFunc) appendCall(r0 ChangesetSourceValidateAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ChangesetSourceValidateAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *ChangesetSourceValidateAuthenticatorFunc) History() []ChangesetSourceValidateAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceValidateAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceValidateAuthenticatorFuncCall is an object that describes
// an invocation of method ValidateAuthenticator on an instance of
// MockChangesetSource.
type ChangesetSourceValidateAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceValidateAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceValidateAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ChangesetSourceWithAuthenticatorFunc describes the behavior when the
// WithAuthenticator method of the parent MockChangesetSource instance is
// invoked.
type ChangesetSourceWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) (sources.ChangesetSource, error)
	hooks       []func(auth.Authenticator) (sources.ChangesetSource, error)
	history     []ChangesetSourceWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockChangesetSource) WithAuthenticator(v0 auth.Authenticator) (sources.ChangesetSource, error) {
	r0, r1 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(ChangesetSourceWithAuthenticatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockChangesetSource instance is invoked and the hook
// queue is empty.
func (f *ChangesetSourceWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) (sources.ChangesetSource, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ChangesetSourceWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) (sources.ChangesetSource, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ChangesetSourceWithAuthenticatorFunc) SetDefaultReturn(r0 sources.ChangesetSource, r1 error) {
	f.SetDefaultHook(func(auth.Authenticator) (sources.ChangesetSource, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ChangesetSourceWithAuthenticatorFunc) PushReturn(r0 sources.ChangesetSource, r1 error) {
	f.PushHook(func(auth.Authenticator) (sources.ChangesetSource, error) {
		return r0, r1
	})
}

func (f *ChangesetSourceWithAuthenticatorFunc) nextHook() func(auth.Authenticator) (sources.ChangesetSource, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ChangesetSourceWithAuthenticatorFunc) appendCall(r0 ChangesetSourceWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ChangesetSourceWithAuthenticatorFuncCall
// objects describing the invocations of this function.
func (f *ChangesetSourceWithAuthenticatorFunc) History() []ChangesetSourceWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ChangesetSourceWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ChangesetSourceWithAuthenticatorFuncCall is an object that describes an
// invocation of method WithAuthenticator on an instance of
// MockChangesetSource.
type ChangesetSourceWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sources.ChangesetSource
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ChangesetSourceWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ChangesetSourceWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockForkableChangesetSource is a mock implementation of the
// ForkableChangesetSource interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/batches/sources)
// used for unit testing.
type MockForkableChangesetSource struct {
	// CloseChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CloseChangeset.
	CloseChangesetFunc *ForkableChangesetSourceCloseChangesetFunc
	// CreateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method CreateChangeset.
	CreateChangesetFunc *ForkableChangesetSourceCreateChangesetFunc
	// CreateCommentFunc is an instance of a mock function object
	// controlling the behavior of the method CreateComment.
	CreateCommentFunc *ForkableChangesetSourceCreateCommentFunc
	// GetNamespaceForkFunc is an instance of a mock function object
	// controlling the behavior of the method GetNamespaceFork.
	GetNamespaceForkFunc *ForkableChangesetSourceGetNamespaceForkFunc
	// GetUserForkFunc is an instance of a mock function object controlling
	// the behavior of the method GetUserFork.
	GetUserForkFunc *ForkableChangesetSourceGetUserForkFunc
	// GitserverPushConfigFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverPushConfig.
	GitserverPushConfigFunc *ForkableChangesetSourceGitserverPushConfigFunc
	// LoadChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method LoadChangeset.
	LoadChangesetFunc *ForkableChangesetSourceLoadChangesetFunc
	// MergeChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method MergeChangeset.
	MergeChangesetFunc *ForkableChangesetSourceMergeChangesetFunc
	// ReopenChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method ReopenChangeset.
	ReopenChangesetFunc *ForkableChangesetSourceReopenChangesetFunc
	// UpdateChangesetFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateChangeset.
	UpdateChangesetFunc *ForkableChangesetSourceUpdateChangesetFunc
	// ValidateAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method ValidateAuthenticator.
	ValidateAuthenticatorFunc *ForkableChangesetSourceValidateAuthenticatorFunc
	// WithAuthenticatorFunc is an instance of a mock function object
	// controlling the behavior of the method WithAuthenticator.
	WithAuthenticatorFunc *ForkableChangesetSourceWithAuthenticatorFunc
}

// NewMockForkableChangesetSource creates a new mock of the
// ForkableChangesetSource interface. All methods return zero values for all
// results, unless overwritten.
func NewMockForkableChangesetSource() *MockForkableChangesetSource {
	return &MockForkableChangesetSource{
		CloseChangesetFunc: &ForkableChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 error) {
				return
			},
		},
		CreateChangesetFunc: &ForkableChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 bool, r1 error) {
				return
			},
		},
		CreateCommentFunc: &ForkableChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *sources.Changeset, string) (r0 error) {
				return
			},
		},
		GetNamespaceForkFunc: &ForkableChangesetSourceGetNamespaceForkFunc{
			defaultHook: func(context.Context, *types.Repo, string) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetUserForkFunc: &ForkableChangesetSourceGetUserForkFunc{
			defaultHook: func(context.Context, *types.Repo) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GitserverPushConfigFunc: &ForkableChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (r0 *protocol.PushConfig, r1 error) {
				return
			},
		},
		LoadChangesetFunc: &ForkableChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 error) {
				return
			},
		},
		MergeChangesetFunc: &ForkableChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset, bool) (r0 error) {
				return
			},
		},
		ReopenChangesetFunc: &ForkableChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 error) {
				return
			},
		},
		UpdateChangesetFunc: &ForkableChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (r0 error) {
				return
			},
		},
		ValidateAuthenticatorFunc: &ForkableChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		WithAuthenticatorFunc: &ForkableChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (r0 sources.ChangesetSource, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockForkableChangesetSource creates a new mock of the
// ForkableChangesetSource interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockForkableChangesetSource() *MockForkableChangesetSource {
	return &MockForkableChangesetSource{
		CloseChangesetFunc: &ForkableChangesetSourceCloseChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.CloseChangeset")
			},
		},
		CreateChangesetFunc: &ForkableChangesetSourceCreateChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) (bool, error) {
				panic("unexpected invocation of MockForkableChangesetSource.CreateChangeset")
			},
		},
		CreateCommentFunc: &ForkableChangesetSourceCreateCommentFunc{
			defaultHook: func(context.Context, *sources.Changeset, string) error {
				panic("unexpected invocation of MockForkableChangesetSource.CreateComment")
			},
		},
		GetNamespaceForkFunc: &ForkableChangesetSourceGetNamespaceForkFunc{
			defaultHook: func(context.Context, *types.Repo, string) (*types.Repo, error) {
				panic("unexpected invocation of MockForkableChangesetSource.GetNamespaceFork")
			},
		},
		GetUserForkFunc: &ForkableChangesetSourceGetUserForkFunc{
			defaultHook: func(context.Context, *types.Repo) (*types.Repo, error) {
				panic("unexpected invocation of MockForkableChangesetSource.GetUserFork")
			},
		},
		GitserverPushConfigFunc: &ForkableChangesetSourceGitserverPushConfigFunc{
			defaultHook: func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
				panic("unexpected invocation of MockForkableChangesetSource.GitserverPushConfig")
			},
		},
		LoadChangesetFunc: &ForkableChangesetSourceLoadChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.LoadChangeset")
			},
		},
		MergeChangesetFunc: &ForkableChangesetSourceMergeChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset, bool) error {
				panic("unexpected invocation of MockForkableChangesetSource.MergeChangeset")
			},
		},
		ReopenChangesetFunc: &ForkableChangesetSourceReopenChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.ReopenChangeset")
			},
		},
		UpdateChangesetFunc: &ForkableChangesetSourceUpdateChangesetFunc{
			defaultHook: func(context.Context, *sources.Changeset) error {
				panic("unexpected invocation of MockForkableChangesetSource.UpdateChangeset")
			},
		},
		ValidateAuthenticatorFunc: &ForkableChangesetSourceValidateAuthenticatorFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockForkableChangesetSource.ValidateAuthenticator")
			},
		},
		WithAuthenticatorFunc: &ForkableChangesetSourceWithAuthenticatorFunc{
			defaultHook: func(auth.Authenticator) (sources.ChangesetSource, error) {
				panic("unexpected invocation of MockForkableChangesetSource.WithAuthenticator")
			},
		},
	}
}

// NewMockForkableChangesetSourceFrom creates a new mock of the
// MockForkableChangesetSource interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockForkableChangesetSourceFrom(i sources.ForkableChangesetSource) *MockForkableChangesetSource {
	return &MockForkableChangesetSource{
		CloseChangesetFunc: &ForkableChangesetSourceCloseChangesetFunc{
			defaultHook: i.CloseChangeset,
		},
		CreateChangesetFunc: &ForkableChangesetSourceCreateChangesetFunc{
			defaultHook: i.CreateChangeset,
		},
		CreateCommentFunc: &ForkableChangesetSourceCreateCommentFunc{
			defaultHook: i.CreateComment,
		},
		GetNamespaceForkFunc: &ForkableChangesetSourceGetNamespaceForkFunc{
			defaultHook: i.GetNamespaceFork,
		},
		GetUserForkFunc: &ForkableChangesetSourceGetUserForkFunc{
			defaultHook: i.GetUserFork,
		},
		GitserverPushConfigFunc: &ForkableChangesetSourceGitserverPushConfigFunc{
			defaultHook: i.GitserverPushConfig,
		},
		LoadChangesetFunc: &ForkableChangesetSourceLoadChangesetFunc{
			defaultHook: i.LoadChangeset,
		},
		MergeChangesetFunc: &ForkableChangesetSourceMergeChangesetFunc{
			defaultHook: i.MergeChangeset,
		},
		ReopenChangesetFunc: &ForkableChangesetSourceReopenChangesetFunc{
			defaultHook: i.ReopenChangeset,
		},
		UpdateChangesetFunc: &ForkableChangesetSourceUpdateChangesetFunc{
			defaultHook: i.UpdateChangeset,
		},
		ValidateAuthenticatorFunc: &ForkableChangesetSourceValidateAuthenticatorFunc{
			defaultHook: i.ValidateAuthenticator,
		},
		WithAuthenticatorFunc: &ForkableChangesetSourceWithAuthenticatorFunc{
			defaultHook: i.WithAuthenticator,
		},
	}
}

// ForkableChangesetSourceCloseChangesetFunc describes the behavior when the
// CloseChangeset method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceCloseChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) error
	hooks       []func(context.Context, *sources.Changeset) error
	history     []ForkableChangesetSourceCloseChangesetFuncCall
	mutex       sync.Mutex
}

// CloseChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) CloseChangeset(v0 context.Context, v1 *sources.Changeset) error {
	r0 := m.CloseChangesetFunc.nextHook()(v0, v1)
	m.CloseChangesetFunc.appendCall(ForkableChangesetSourceCloseChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceCloseChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceCloseChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceCloseChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceCloseChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceCloseChangesetFunc) nextHook() func(context.Context, *sources.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceCloseChangesetFunc) appendCall(r0 ForkableChangesetSourceCloseChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceCloseChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceCloseChangesetFunc) History() []ForkableChangesetSourceCloseChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceCloseChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceCloseChangesetFuncCall is an object that describes
// an invocation of method CloseChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceCloseChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceCloseChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceCloseChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceCreateChangesetFunc describes the behavior when
// the CreateChangeset method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceCreateChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) (bool, error)
	hooks       []func(context.Context, *sources.Changeset) (bool, error)
	history     []ForkableChangesetSourceCreateChangesetFuncCall
	mutex       sync.Mutex
}

// CreateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) CreateChangeset(v0 context.Context, v1 *sources.Changeset) (bool, error) {
	r0, r1 := m.CreateChangesetFunc.nextHook()(v0, v1)
	m.CreateChangesetFunc.appendCall(ForkableChangesetSourceCreateChangesetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceCreateChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceCreateChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceCreateChangesetFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceCreateChangesetFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *sources.Changeset) (bool, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceCreateChangesetFunc) nextHook() func(context.Context, *sources.Changeset) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceCreateChangesetFunc) appendCall(r0 ForkableChangesetSourceCreateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceCreateChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceCreateChangesetFunc) History() []ForkableChangesetSourceCreateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceCreateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceCreateChangesetFuncCall is an object that
// describes an invocation of method CreateChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceCreateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceCreateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceCreateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceCreateCommentFunc describes the behavior when the
// CreateComment method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceCreateCommentFunc struct {
	defaultHook func(context.Context, *sources.Changeset, string) error
	hooks       []func(context.Context, *sources.Changeset, string) error
	history     []ForkableChangesetSourceCreateCommentFuncCall
	mutex       sync.Mutex
}

// CreateComment delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) CreateComment(v0 context.Context, v1 *sources.Changeset, v2 string) error {
	r0 := m.CreateCommentFunc.nextHook()(v0, v1, v2)
	m.CreateCommentFunc.appendCall(ForkableChangesetSourceCreateCommentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateComment method
// of the parent MockForkableChangesetSource instance is invoked and the
// hook queue is empty.
func (f *ForkableChangesetSourceCreateCommentFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateComment method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceCreateCommentFunc) PushHook(hook func(context.Context, *sources.Changeset, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceCreateCommentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceCreateCommentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset, string) error {
		return r0
	})
}

func (f *ForkableChangesetSourceCreateCommentFunc) nextHook() func(context.Context, *sources.Changeset, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceCreateCommentFunc) appendCall(r0 ForkableChangesetSourceCreateCommentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceCreateCommentFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceCreateCommentFunc) History() []ForkableChangesetSourceCreateCommentFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceCreateCommentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceCreateCommentFuncCall is an object that describes
// an invocation of method CreateComment on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceCreateCommentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceCreateCommentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceCreateCommentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceGetNamespaceForkFunc describes the behavior when
// the GetNamespaceFork method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceGetNamespaceForkFunc struct {
	defaultHook func(context.Context, *types.Repo, string) (*types.Repo, error)
	hooks       []func(context.Context, *types.Repo, string) (*types.Repo, error)
	history     []ForkableChangesetSourceGetNamespaceForkFuncCall
	mutex       sync.Mutex
}

// GetNamespaceFork delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) GetNamespaceFork(v0 context.Context, v1 *types.Repo, v2 string) (*types.Repo, error) {
	r0, r1 := m.GetNamespaceForkFunc.nextHook()(v0, v1, v2)
	m.GetNamespaceForkFunc.appendCall(ForkableChangesetSourceGetNamespaceForkFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetNamespaceFork
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) SetDefaultHook(hook func(context.Context, *types.Repo, string) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetNamespaceFork method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) PushHook(hook func(context.Context, *types.Repo, string) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Repo, string) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, *types.Repo, string) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceGetNamespaceForkFunc) nextHook() func(context.Context, *types.Repo, string) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceGetNamespaceForkFunc) appendCall(r0 ForkableChangesetSourceGetNamespaceForkFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceGetNamespaceForkFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceGetNamespaceForkFunc) History() []ForkableChangesetSourceGetNamespaceForkFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceGetNamespaceForkFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceGetNamespaceForkFuncCall is an object that
// describes an invocation of method GetNamespaceFork on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceGetNamespaceForkFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceGetNamespaceForkFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceGetNamespaceForkFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceGetUserForkFunc describes the behavior when the
// GetUserFork method of the parent MockForkableChangesetSource instance is
// invoked.
type ForkableChangesetSourceGetUserForkFunc struct {
	defaultHook func(context.Context, *types.Repo) (*types.Repo, error)
	hooks       []func(context.Context, *types.Repo) (*types.Repo, error)
	history     []ForkableChangesetSourceGetUserForkFuncCall
	mutex       sync.Mutex
}

// GetUserFork delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) GetUserFork(v0 context.Context, v1 *types.Repo) (*types.Repo, error) {
	r0, r1 := m.GetUserForkFunc.nextHook()(v0, v1)
	m.GetUserForkFunc.appendCall(ForkableChangesetSourceGetUserForkFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUserFork method
// of the parent MockForkableChangesetSource instance is invoked and the
// hook queue is empty.
func (f *ForkableChangesetSourceGetUserForkFunc) SetDefaultHook(hook func(context.Context, *types.Repo) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserFork method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceGetUserForkFunc) PushHook(hook func(context.Context, *types.Repo) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceGetUserForkFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Repo) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceGetUserForkFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, *types.Repo) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceGetUserForkFunc) nextHook() func(context.Context, *types.Repo) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceGetUserForkFunc) appendCall(r0 ForkableChangesetSourceGetUserForkFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ForkableChangesetSourceGetUserForkFuncCall
// objects describing the invocations of this function.
func (f *ForkableChangesetSourceGetUserForkFunc) History() []ForkableChangesetSourceGetUserForkFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceGetUserForkFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceGetUserForkFuncCall is an object that describes an
// invocation of method GetUserFork on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceGetUserForkFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceGetUserForkFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceGetUserForkFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceGitserverPushConfigFunc describes the behavior
// when the GitserverPushConfig method of the parent
// MockForkableChangesetSource instance is invoked.
type ForkableChangesetSourceGitserverPushConfigFunc struct {
	defaultHook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	hooks       []func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)
	history     []ForkableChangesetSourceGitserverPushConfigFuncCall
	mutex       sync.Mutex
}

// GitserverPushConfig delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) GitserverPushConfig(v0 context.Context, v1 database.ExternalServiceStore, v2 *types.Repo) (*protocol.PushConfig, error) {
	r0, r1 := m.GitserverPushConfigFunc.nextHook()(v0, v1, v2)
	m.GitserverPushConfigFunc.appendCall(ForkableChangesetSourceGitserverPushConfigFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GitserverPushConfig
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) SetDefaultHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverPushConfig method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) PushHook(hook func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) SetDefaultReturn(r0 *protocol.PushConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) PushReturn(r0 *protocol.PushConfig, r1 error) {
	f.PushHook(func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceGitserverPushConfigFunc) nextHook() func(context.Context, database.ExternalServiceStore, *types.Repo) (*protocol.PushConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceGitserverPushConfigFunc) appendCall(r0 ForkableChangesetSourceGitserverPushConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceGitserverPushConfigFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceGitserverPushConfigFunc) History() []ForkableChangesetSourceGitserverPushConfigFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceGitserverPushConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceGitserverPushConfigFuncCall is an object that
// describes an invocation of method GitserverPushConfig on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceGitserverPushConfigFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalServiceStore
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.PushConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceGitserverPushConfigFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceGitserverPushConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ForkableChangesetSourceLoadChangesetFunc describes the behavior when the
// LoadChangeset method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceLoadChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) error
	hooks       []func(context.Context, *sources.Changeset) error
	history     []ForkableChangesetSourceLoadChangesetFuncCall
	mutex       sync.Mutex
}

// LoadChangeset delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) LoadChangeset(v0 context.Context, v1 *sources.Changeset) error {
	r0 := m.LoadChangesetFunc.nextHook()(v0, v1)
	m.LoadChangesetFunc.appendCall(ForkableChangesetSourceLoadChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LoadChangeset method
// of the parent MockForkableChangesetSource instance is invoked and the
// hook queue is empty.
func (f *ForkableChangesetSourceLoadChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceLoadChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceLoadChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceLoadChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceLoadChangesetFunc) nextHook() func(context.Context, *sources.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceLoadChangesetFunc) appendCall(r0 ForkableChangesetSourceLoadChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceLoadChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceLoadChangesetFunc) History() []ForkableChangesetSourceLoadChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceLoadChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceLoadChangesetFuncCall is an object that describes
// an invocation of method LoadChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceLoadChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceLoadChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceLoadChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceMergeChangesetFunc describes the behavior when the
// MergeChangeset method of the parent MockForkableChangesetSource instance
// is invoked.
type ForkableChangesetSourceMergeChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset, bool) error
	hooks       []func(context.Context, *sources.Changeset, bool) error
	history     []ForkableChangesetSourceMergeChangesetFuncCall
	mutex       sync.Mutex
}

// MergeChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) MergeChangeset(v0 context.Context, v1 *sources.Changeset, v2 bool) error {
	r0 := m.MergeChangesetFunc.nextHook()(v0, v1, v2)
	m.MergeChangesetFunc.appendCall(ForkableChangesetSourceMergeChangesetFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MergeChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceMergeChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceMergeChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceMergeChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceMergeChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset, bool) error {
		return r0
	})
}

func (f *ForkableChangesetSourceMergeChangesetFunc) nextHook() func(context.Context, *sources.Changeset, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceMergeChangesetFunc) appendCall(r0 ForkableChangesetSourceMergeChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceMergeChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceMergeChangesetFunc) History() []ForkableChangesetSourceMergeChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceMergeChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceMergeChangesetFuncCall is an object that describes
// an invocation of method MergeChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceMergeChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceMergeChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceMergeChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceReopenChangesetFunc describes the behavior when
// the ReopenChangeset method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceReopenChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) error
	hooks       []func(context.Context, *sources.Changeset) error
	history     []ForkableChangesetSourceReopenChangesetFuncCall
	mutex       sync.Mutex
}

// ReopenChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) ReopenChangeset(v0 context.Context, v1 *sources.Changeset) error {
	r0 := m.ReopenChangesetFunc.nextHook()(v0, v1)
	m.ReopenChangesetFunc.appendCall(ForkableChangesetSourceReopenChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReopenChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceReopenChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReopenChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceReopenChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceReopenChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceReopenChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceReopenChangesetFunc) nextHook() func(context.Context, *sources.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceReopenChangesetFunc) appendCall(r0 ForkableChangesetSourceReopenChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceReopenChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceReopenChangesetFunc) History() []ForkableChangesetSourceReopenChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceReopenChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceReopenChangesetFuncCall is an object that
// describes an invocation of method ReopenChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceReopenChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceReopenChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceReopenChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceUpdateChangesetFunc describes the behavior when
// the UpdateChangeset method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceUpdateChangesetFunc struct {
	defaultHook func(context.Context, *sources.Changeset) error
	hooks       []func(context.Context, *sources.Changeset) error
	history     []ForkableChangesetSourceUpdateChangesetFuncCall
	mutex       sync.Mutex
}

// UpdateChangeset delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) UpdateChangeset(v0 context.Context, v1 *sources.Changeset) error {
	r0 := m.UpdateChangesetFunc.nextHook()(v0, v1)
	m.UpdateChangesetFunc.appendCall(ForkableChangesetSourceUpdateChangesetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateChangeset
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceUpdateChangesetFunc) SetDefaultHook(hook func(context.Context, *sources.Changeset) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateChangeset method of the parent MockForkableChangesetSource instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ForkableChangesetSourceUpdateChangesetFunc) PushHook(hook func(context.Context, *sources.Changeset) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceUpdateChangesetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceUpdateChangesetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sources.Changeset) error {
		return r0
	})
}

func (f *ForkableChangesetSourceUpdateChangesetFunc) nextHook() func(context.Context, *sources.Changeset) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceUpdateChangesetFunc) appendCall(r0 ForkableChangesetSourceUpdateChangesetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceUpdateChangesetFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceUpdateChangesetFunc) History() []ForkableChangesetSourceUpdateChangesetFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceUpdateChangesetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceUpdateChangesetFuncCall is an object that
// describes an invocation of method UpdateChangeset on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceUpdateChangesetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sources.Changeset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceUpdateChangesetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceUpdateChangesetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceValidateAuthenticatorFunc describes the behavior
// when the ValidateAuthenticator method of the parent
// MockForkableChangesetSource instance is invoked.
type ForkableChangesetSourceValidateAuthenticatorFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []ForkableChangesetSourceValidateAuthenticatorFuncCall
	mutex       sync.Mutex
}

// ValidateAuthenticator delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) ValidateAuthenticator(v0 context.Context) error {
	r0 := m.ValidateAuthenticatorFunc.nextHook()(v0)
	m.ValidateAuthenticatorFunc.appendCall(ForkableChangesetSourceValidateAuthenticatorFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ValidateAuthenticator method of the parent MockForkableChangesetSource
// instance is invoked and the hook queue is empty.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidateAuthenticator method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *ForkableChangesetSourceValidateAuthenticatorFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceValidateAuthenticatorFunc) appendCall(r0 ForkableChangesetSourceValidateAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceValidateAuthenticatorFuncCall objects describing
// the invocations of this function.
func (f *ForkableChangesetSourceValidateAuthenticatorFunc) History() []ForkableChangesetSourceValidateAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceValidateAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceValidateAuthenticatorFuncCall is an object that
// describes an invocation of method ValidateAuthenticator on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceValidateAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceValidateAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceValidateAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ForkableChangesetSourceWithAuthenticatorFunc describes the behavior when
// the WithAuthenticator method of the parent MockForkableChangesetSource
// instance is invoked.
type ForkableChangesetSourceWithAuthenticatorFunc struct {
	defaultHook func(auth.Authenticator) (sources.ChangesetSource, error)
	hooks       []func(auth.Authenticator) (sources.ChangesetSource, error)
	history     []ForkableChangesetSourceWithAuthenticatorFuncCall
	mutex       sync.Mutex
}

// WithAuthenticator delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockForkableChangesetSource) WithAuthenticator(v0 auth.Authenticator) (sources.ChangesetSource, error) {
	r0, r1 := m.WithAuthenticatorFunc.nextHook()(v0)
	m.WithAuthenticatorFunc.appendCall(ForkableChangesetSourceWithAuthenticatorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the WithAuthenticator
// method of the parent MockForkableChangesetSource instance is invoked and
// the hook queue is empty.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) SetDefaultHook(hook func(auth.Authenticator) (sources.ChangesetSource, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithAuthenticator method of the parent MockForkableChangesetSource
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) PushHook(hook func(auth.Authenticator) (sources.ChangesetSource, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) SetDefaultReturn(r0 sources.ChangesetSource, r1 error) {
	f.SetDefaultHook(func(auth.Authenticator) (sources.ChangesetSource, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) PushReturn(r0 sources.ChangesetSource, r1 error) {
	f.PushHook(func(auth.Authenticator) (sources.ChangesetSource, error) {
		return r0, r1
	})
}

func (f *ForkableChangesetSourceWithAuthenticatorFunc) nextHook() func(auth.Authenticator) (sources.ChangesetSource, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ForkableChangesetSourceWithAuthenticatorFunc) appendCall(r0 ForkableChangesetSourceWithAuthenticatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ForkableChangesetSourceWithAuthenticatorFuncCall objects describing the
// invocations of this function.
func (f *ForkableChangesetSourceWithAuthenticatorFunc) History() []ForkableChangesetSourceWithAuthenticatorFuncCall {
	f.mutex.Lock()
	history := make([]ForkableChangesetSourceWithAuthenticatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ForkableChangesetSourceWithAuthenticatorFuncCall is an object that
// describes an invocation of method WithAuthenticator on an instance of
// MockForkableChangesetSource.
type ForkableChangesetSourceWithAuthenticatorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sources.ChangesetSource
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ForkableChangesetSourceWithAuthenticatorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ForkableChangesetSourceWithAuthenticatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
