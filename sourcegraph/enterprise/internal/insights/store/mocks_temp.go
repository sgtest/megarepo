// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package store

import (
	"context"
	"sync"

	types "github.com/sourcegraph/sourcegraph/enterprise/internal/insights/types"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockDataSeriesStore is a mock implementation of the DataSeriesStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/insights/store)
// used for unit testing.
type MockDataSeriesStore struct {
	// CompleteJustInTimeConversionAttemptFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CompleteJustInTimeConversionAttempt.
	CompleteJustInTimeConversionAttemptFunc *DataSeriesStoreCompleteJustInTimeConversionAttemptFunc
	// GetDataSeriesFunc is an instance of a mock function object
	// controlling the behavior of the method GetDataSeries.
	GetDataSeriesFunc *DataSeriesStoreGetDataSeriesFunc
	// GetScopedSearchSeriesNeedBackfillFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetScopedSearchSeriesNeedBackfill.
	GetScopedSearchSeriesNeedBackfillFunc *DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc
	// IncrementBackfillAttemptsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// IncrementBackfillAttempts.
	IncrementBackfillAttemptsFunc *DataSeriesStoreIncrementBackfillAttemptsFunc
	// SetSeriesEnabledFunc is an instance of a mock function object
	// controlling the behavior of the method SetSeriesEnabled.
	SetSeriesEnabledFunc *DataSeriesStoreSetSeriesEnabledFunc
	// StampBackfillFunc is an instance of a mock function object
	// controlling the behavior of the method StampBackfill.
	StampBackfillFunc *DataSeriesStoreStampBackfillFunc
	// StampRecordingFunc is an instance of a mock function object
	// controlling the behavior of the method StampRecording.
	StampRecordingFunc *DataSeriesStoreStampRecordingFunc
	// StampSnapshotFunc is an instance of a mock function object
	// controlling the behavior of the method StampSnapshot.
	StampSnapshotFunc *DataSeriesStoreStampSnapshotFunc
	// StartJustInTimeConversionAttemptFunc is an instance of a mock
	// function object controlling the behavior of the method
	// StartJustInTimeConversionAttempt.
	StartJustInTimeConversionAttemptFunc *DataSeriesStoreStartJustInTimeConversionAttemptFunc
}

// NewMockDataSeriesStore creates a new mock of the DataSeriesStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockDataSeriesStore() *MockDataSeriesStore {
	return &MockDataSeriesStore{
		CompleteJustInTimeConversionAttemptFunc: &DataSeriesStoreCompleteJustInTimeConversionAttemptFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 error) {
				return
			},
		},
		GetDataSeriesFunc: &DataSeriesStoreGetDataSeriesFunc{
			defaultHook: func(context.Context, GetDataSeriesArgs) (r0 []types.InsightSeries, r1 error) {
				return
			},
		},
		GetScopedSearchSeriesNeedBackfillFunc: &DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc{
			defaultHook: func(context.Context) (r0 []types.InsightSeries, r1 error) {
				return
			},
		},
		IncrementBackfillAttemptsFunc: &DataSeriesStoreIncrementBackfillAttemptsFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 error) {
				return
			},
		},
		SetSeriesEnabledFunc: &DataSeriesStoreSetSeriesEnabledFunc{
			defaultHook: func(context.Context, string, bool) (r0 error) {
				return
			},
		},
		StampBackfillFunc: &DataSeriesStoreStampBackfillFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 types.InsightSeries, r1 error) {
				return
			},
		},
		StampRecordingFunc: &DataSeriesStoreStampRecordingFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 types.InsightSeries, r1 error) {
				return
			},
		},
		StampSnapshotFunc: &DataSeriesStoreStampSnapshotFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 types.InsightSeries, r1 error) {
				return
			},
		},
		StartJustInTimeConversionAttemptFunc: &DataSeriesStoreStartJustInTimeConversionAttemptFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockDataSeriesStore creates a new mock of the DataSeriesStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockDataSeriesStore() *MockDataSeriesStore {
	return &MockDataSeriesStore{
		CompleteJustInTimeConversionAttemptFunc: &DataSeriesStoreCompleteJustInTimeConversionAttemptFunc{
			defaultHook: func(context.Context, types.InsightSeries) error {
				panic("unexpected invocation of MockDataSeriesStore.CompleteJustInTimeConversionAttempt")
			},
		},
		GetDataSeriesFunc: &DataSeriesStoreGetDataSeriesFunc{
			defaultHook: func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error) {
				panic("unexpected invocation of MockDataSeriesStore.GetDataSeries")
			},
		},
		GetScopedSearchSeriesNeedBackfillFunc: &DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc{
			defaultHook: func(context.Context) ([]types.InsightSeries, error) {
				panic("unexpected invocation of MockDataSeriesStore.GetScopedSearchSeriesNeedBackfill")
			},
		},
		IncrementBackfillAttemptsFunc: &DataSeriesStoreIncrementBackfillAttemptsFunc{
			defaultHook: func(context.Context, types.InsightSeries) error {
				panic("unexpected invocation of MockDataSeriesStore.IncrementBackfillAttempts")
			},
		},
		SetSeriesEnabledFunc: &DataSeriesStoreSetSeriesEnabledFunc{
			defaultHook: func(context.Context, string, bool) error {
				panic("unexpected invocation of MockDataSeriesStore.SetSeriesEnabled")
			},
		},
		StampBackfillFunc: &DataSeriesStoreStampBackfillFunc{
			defaultHook: func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
				panic("unexpected invocation of MockDataSeriesStore.StampBackfill")
			},
		},
		StampRecordingFunc: &DataSeriesStoreStampRecordingFunc{
			defaultHook: func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
				panic("unexpected invocation of MockDataSeriesStore.StampRecording")
			},
		},
		StampSnapshotFunc: &DataSeriesStoreStampSnapshotFunc{
			defaultHook: func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
				panic("unexpected invocation of MockDataSeriesStore.StampSnapshot")
			},
		},
		StartJustInTimeConversionAttemptFunc: &DataSeriesStoreStartJustInTimeConversionAttemptFunc{
			defaultHook: func(context.Context, types.InsightSeries) error {
				panic("unexpected invocation of MockDataSeriesStore.StartJustInTimeConversionAttempt")
			},
		},
	}
}

// NewMockDataSeriesStoreFrom creates a new mock of the MockDataSeriesStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockDataSeriesStoreFrom(i DataSeriesStore) *MockDataSeriesStore {
	return &MockDataSeriesStore{
		CompleteJustInTimeConversionAttemptFunc: &DataSeriesStoreCompleteJustInTimeConversionAttemptFunc{
			defaultHook: i.CompleteJustInTimeConversionAttempt,
		},
		GetDataSeriesFunc: &DataSeriesStoreGetDataSeriesFunc{
			defaultHook: i.GetDataSeries,
		},
		GetScopedSearchSeriesNeedBackfillFunc: &DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc{
			defaultHook: i.GetScopedSearchSeriesNeedBackfill,
		},
		IncrementBackfillAttemptsFunc: &DataSeriesStoreIncrementBackfillAttemptsFunc{
			defaultHook: i.IncrementBackfillAttempts,
		},
		SetSeriesEnabledFunc: &DataSeriesStoreSetSeriesEnabledFunc{
			defaultHook: i.SetSeriesEnabled,
		},
		StampBackfillFunc: &DataSeriesStoreStampBackfillFunc{
			defaultHook: i.StampBackfill,
		},
		StampRecordingFunc: &DataSeriesStoreStampRecordingFunc{
			defaultHook: i.StampRecording,
		},
		StampSnapshotFunc: &DataSeriesStoreStampSnapshotFunc{
			defaultHook: i.StampSnapshot,
		},
		StartJustInTimeConversionAttemptFunc: &DataSeriesStoreStartJustInTimeConversionAttemptFunc{
			defaultHook: i.StartJustInTimeConversionAttempt,
		},
	}
}

// DataSeriesStoreCompleteJustInTimeConversionAttemptFunc describes the
// behavior when the CompleteJustInTimeConversionAttempt method of the
// parent MockDataSeriesStore instance is invoked.
type DataSeriesStoreCompleteJustInTimeConversionAttemptFunc struct {
	defaultHook func(context.Context, types.InsightSeries) error
	hooks       []func(context.Context, types.InsightSeries) error
	history     []DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall
	mutex       sync.Mutex
}

// CompleteJustInTimeConversionAttempt delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockDataSeriesStore) CompleteJustInTimeConversionAttempt(v0 context.Context, v1 types.InsightSeries) error {
	r0 := m.CompleteJustInTimeConversionAttemptFunc.nextHook()(v0, v1)
	m.CompleteJustInTimeConversionAttemptFunc.appendCall(DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CompleteJustInTimeConversionAttempt method of the parent
// MockDataSeriesStore instance is invoked and the hook queue is empty.
func (f *DataSeriesStoreCompleteJustInTimeConversionAttemptFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CompleteJustInTimeConversionAttempt method of the parent
// MockDataSeriesStore instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *DataSeriesStoreCompleteJustInTimeConversionAttemptFunc) PushHook(hook func(context.Context, types.InsightSeries) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreCompleteJustInTimeConversionAttemptFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreCompleteJustInTimeConversionAttemptFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, types.InsightSeries) error {
		return r0
	})
}

func (f *DataSeriesStoreCompleteJustInTimeConversionAttemptFunc) nextHook() func(context.Context, types.InsightSeries) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreCompleteJustInTimeConversionAttemptFunc) appendCall(r0 DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall objects
// describing the invocations of this function.
func (f *DataSeriesStoreCompleteJustInTimeConversionAttemptFunc) History() []DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall is an object
// that describes an invocation of method
// CompleteJustInTimeConversionAttempt on an instance of
// MockDataSeriesStore.
type DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreCompleteJustInTimeConversionAttemptFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DataSeriesStoreGetDataSeriesFunc describes the behavior when the
// GetDataSeries method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreGetDataSeriesFunc struct {
	defaultHook func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error)
	hooks       []func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error)
	history     []DataSeriesStoreGetDataSeriesFuncCall
	mutex       sync.Mutex
}

// GetDataSeries delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDataSeriesStore) GetDataSeries(v0 context.Context, v1 GetDataSeriesArgs) ([]types.InsightSeries, error) {
	r0, r1 := m.GetDataSeriesFunc.nextHook()(v0, v1)
	m.GetDataSeriesFunc.appendCall(DataSeriesStoreGetDataSeriesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDataSeries method
// of the parent MockDataSeriesStore instance is invoked and the hook queue
// is empty.
func (f *DataSeriesStoreGetDataSeriesFunc) SetDefaultHook(hook func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDataSeries method of the parent MockDataSeriesStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataSeriesStoreGetDataSeriesFunc) PushHook(hook func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreGetDataSeriesFunc) SetDefaultReturn(r0 []types.InsightSeries, r1 error) {
	f.SetDefaultHook(func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreGetDataSeriesFunc) PushReturn(r0 []types.InsightSeries, r1 error) {
	f.PushHook(func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error) {
		return r0, r1
	})
}

func (f *DataSeriesStoreGetDataSeriesFunc) nextHook() func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreGetDataSeriesFunc) appendCall(r0 DataSeriesStoreGetDataSeriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreGetDataSeriesFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreGetDataSeriesFunc) History() []DataSeriesStoreGetDataSeriesFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreGetDataSeriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreGetDataSeriesFuncCall is an object that describes an
// invocation of method GetDataSeries on an instance of MockDataSeriesStore.
type DataSeriesStoreGetDataSeriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetDataSeriesArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.InsightSeries
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreGetDataSeriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreGetDataSeriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc describes the
// behavior when the GetScopedSearchSeriesNeedBackfill method of the parent
// MockDataSeriesStore instance is invoked.
type DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc struct {
	defaultHook func(context.Context) ([]types.InsightSeries, error)
	hooks       []func(context.Context) ([]types.InsightSeries, error)
	history     []DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall
	mutex       sync.Mutex
}

// GetScopedSearchSeriesNeedBackfill delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockDataSeriesStore) GetScopedSearchSeriesNeedBackfill(v0 context.Context) ([]types.InsightSeries, error) {
	r0, r1 := m.GetScopedSearchSeriesNeedBackfillFunc.nextHook()(v0)
	m.GetScopedSearchSeriesNeedBackfillFunc.appendCall(DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetScopedSearchSeriesNeedBackfill method of the parent
// MockDataSeriesStore instance is invoked and the hook queue is empty.
func (f *DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc) SetDefaultHook(hook func(context.Context) ([]types.InsightSeries, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetScopedSearchSeriesNeedBackfill method of the parent
// MockDataSeriesStore instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc) PushHook(hook func(context.Context) ([]types.InsightSeries, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc) SetDefaultReturn(r0 []types.InsightSeries, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.InsightSeries, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc) PushReturn(r0 []types.InsightSeries, r1 error) {
	f.PushHook(func(context.Context) ([]types.InsightSeries, error) {
		return r0, r1
	})
}

func (f *DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc) nextHook() func(context.Context) ([]types.InsightSeries, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc) appendCall(r0 DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall objects
// describing the invocations of this function.
func (f *DataSeriesStoreGetScopedSearchSeriesNeedBackfillFunc) History() []DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall is an object
// that describes an invocation of method GetScopedSearchSeriesNeedBackfill
// on an instance of MockDataSeriesStore.
type DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.InsightSeries
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreGetScopedSearchSeriesNeedBackfillFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataSeriesStoreIncrementBackfillAttemptsFunc describes the behavior when
// the IncrementBackfillAttempts method of the parent MockDataSeriesStore
// instance is invoked.
type DataSeriesStoreIncrementBackfillAttemptsFunc struct {
	defaultHook func(context.Context, types.InsightSeries) error
	hooks       []func(context.Context, types.InsightSeries) error
	history     []DataSeriesStoreIncrementBackfillAttemptsFuncCall
	mutex       sync.Mutex
}

// IncrementBackfillAttempts delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDataSeriesStore) IncrementBackfillAttempts(v0 context.Context, v1 types.InsightSeries) error {
	r0 := m.IncrementBackfillAttemptsFunc.nextHook()(v0, v1)
	m.IncrementBackfillAttemptsFunc.appendCall(DataSeriesStoreIncrementBackfillAttemptsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IncrementBackfillAttempts method of the parent MockDataSeriesStore
// instance is invoked and the hook queue is empty.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IncrementBackfillAttempts method of the parent MockDataSeriesStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) PushHook(hook func(context.Context, types.InsightSeries) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, types.InsightSeries) error {
		return r0
	})
}

func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) nextHook() func(context.Context, types.InsightSeries) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) appendCall(r0 DataSeriesStoreIncrementBackfillAttemptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DataSeriesStoreIncrementBackfillAttemptsFuncCall objects describing the
// invocations of this function.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) History() []DataSeriesStoreIncrementBackfillAttemptsFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreIncrementBackfillAttemptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreIncrementBackfillAttemptsFuncCall is an object that
// describes an invocation of method IncrementBackfillAttempts on an
// instance of MockDataSeriesStore.
type DataSeriesStoreIncrementBackfillAttemptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreIncrementBackfillAttemptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreIncrementBackfillAttemptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DataSeriesStoreSetSeriesEnabledFunc describes the behavior when the
// SetSeriesEnabled method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreSetSeriesEnabledFunc struct {
	defaultHook func(context.Context, string, bool) error
	hooks       []func(context.Context, string, bool) error
	history     []DataSeriesStoreSetSeriesEnabledFuncCall
	mutex       sync.Mutex
}

// SetSeriesEnabled delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDataSeriesStore) SetSeriesEnabled(v0 context.Context, v1 string, v2 bool) error {
	r0 := m.SetSeriesEnabledFunc.nextHook()(v0, v1, v2)
	m.SetSeriesEnabledFunc.appendCall(DataSeriesStoreSetSeriesEnabledFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetSeriesEnabled
// method of the parent MockDataSeriesStore instance is invoked and the hook
// queue is empty.
func (f *DataSeriesStoreSetSeriesEnabledFunc) SetDefaultHook(hook func(context.Context, string, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSeriesEnabled method of the parent MockDataSeriesStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DataSeriesStoreSetSeriesEnabledFunc) PushHook(hook func(context.Context, string, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreSetSeriesEnabledFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreSetSeriesEnabledFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, bool) error {
		return r0
	})
}

func (f *DataSeriesStoreSetSeriesEnabledFunc) nextHook() func(context.Context, string, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreSetSeriesEnabledFunc) appendCall(r0 DataSeriesStoreSetSeriesEnabledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreSetSeriesEnabledFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreSetSeriesEnabledFunc) History() []DataSeriesStoreSetSeriesEnabledFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreSetSeriesEnabledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreSetSeriesEnabledFuncCall is an object that describes an
// invocation of method SetSeriesEnabled on an instance of
// MockDataSeriesStore.
type DataSeriesStoreSetSeriesEnabledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreSetSeriesEnabledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreSetSeriesEnabledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DataSeriesStoreStampBackfillFunc describes the behavior when the
// StampBackfill method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreStampBackfillFunc struct {
	defaultHook func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	hooks       []func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	history     []DataSeriesStoreStampBackfillFuncCall
	mutex       sync.Mutex
}

// StampBackfill delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDataSeriesStore) StampBackfill(v0 context.Context, v1 types.InsightSeries) (types.InsightSeries, error) {
	r0, r1 := m.StampBackfillFunc.nextHook()(v0, v1)
	m.StampBackfillFunc.appendCall(DataSeriesStoreStampBackfillFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StampBackfill method
// of the parent MockDataSeriesStore instance is invoked and the hook queue
// is empty.
func (f *DataSeriesStoreStampBackfillFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StampBackfill method of the parent MockDataSeriesStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataSeriesStoreStampBackfillFunc) PushHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreStampBackfillFunc) SetDefaultReturn(r0 types.InsightSeries, r1 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreStampBackfillFunc) PushReturn(r0 types.InsightSeries, r1 error) {
	f.PushHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

func (f *DataSeriesStoreStampBackfillFunc) nextHook() func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreStampBackfillFunc) appendCall(r0 DataSeriesStoreStampBackfillFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreStampBackfillFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreStampBackfillFunc) History() []DataSeriesStoreStampBackfillFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreStampBackfillFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreStampBackfillFuncCall is an object that describes an
// invocation of method StampBackfill on an instance of MockDataSeriesStore.
type DataSeriesStoreStampBackfillFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.InsightSeries
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreStampBackfillFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreStampBackfillFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataSeriesStoreStampRecordingFunc describes the behavior when the
// StampRecording method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreStampRecordingFunc struct {
	defaultHook func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	hooks       []func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	history     []DataSeriesStoreStampRecordingFuncCall
	mutex       sync.Mutex
}

// StampRecording delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDataSeriesStore) StampRecording(v0 context.Context, v1 types.InsightSeries) (types.InsightSeries, error) {
	r0, r1 := m.StampRecordingFunc.nextHook()(v0, v1)
	m.StampRecordingFunc.appendCall(DataSeriesStoreStampRecordingFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StampRecording
// method of the parent MockDataSeriesStore instance is invoked and the hook
// queue is empty.
func (f *DataSeriesStoreStampRecordingFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StampRecording method of the parent MockDataSeriesStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataSeriesStoreStampRecordingFunc) PushHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreStampRecordingFunc) SetDefaultReturn(r0 types.InsightSeries, r1 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreStampRecordingFunc) PushReturn(r0 types.InsightSeries, r1 error) {
	f.PushHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

func (f *DataSeriesStoreStampRecordingFunc) nextHook() func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreStampRecordingFunc) appendCall(r0 DataSeriesStoreStampRecordingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreStampRecordingFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreStampRecordingFunc) History() []DataSeriesStoreStampRecordingFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreStampRecordingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreStampRecordingFuncCall is an object that describes an
// invocation of method StampRecording on an instance of
// MockDataSeriesStore.
type DataSeriesStoreStampRecordingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.InsightSeries
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreStampRecordingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreStampRecordingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataSeriesStoreStampSnapshotFunc describes the behavior when the
// StampSnapshot method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreStampSnapshotFunc struct {
	defaultHook func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	hooks       []func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	history     []DataSeriesStoreStampSnapshotFuncCall
	mutex       sync.Mutex
}

// StampSnapshot delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDataSeriesStore) StampSnapshot(v0 context.Context, v1 types.InsightSeries) (types.InsightSeries, error) {
	r0, r1 := m.StampSnapshotFunc.nextHook()(v0, v1)
	m.StampSnapshotFunc.appendCall(DataSeriesStoreStampSnapshotFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StampSnapshot method
// of the parent MockDataSeriesStore instance is invoked and the hook queue
// is empty.
func (f *DataSeriesStoreStampSnapshotFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StampSnapshot method of the parent MockDataSeriesStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataSeriesStoreStampSnapshotFunc) PushHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreStampSnapshotFunc) SetDefaultReturn(r0 types.InsightSeries, r1 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreStampSnapshotFunc) PushReturn(r0 types.InsightSeries, r1 error) {
	f.PushHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

func (f *DataSeriesStoreStampSnapshotFunc) nextHook() func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreStampSnapshotFunc) appendCall(r0 DataSeriesStoreStampSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreStampSnapshotFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreStampSnapshotFunc) History() []DataSeriesStoreStampSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreStampSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreStampSnapshotFuncCall is an object that describes an
// invocation of method StampSnapshot on an instance of MockDataSeriesStore.
type DataSeriesStoreStampSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.InsightSeries
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreStampSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreStampSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataSeriesStoreStartJustInTimeConversionAttemptFunc describes the
// behavior when the StartJustInTimeConversionAttempt method of the parent
// MockDataSeriesStore instance is invoked.
type DataSeriesStoreStartJustInTimeConversionAttemptFunc struct {
	defaultHook func(context.Context, types.InsightSeries) error
	hooks       []func(context.Context, types.InsightSeries) error
	history     []DataSeriesStoreStartJustInTimeConversionAttemptFuncCall
	mutex       sync.Mutex
}

// StartJustInTimeConversionAttempt delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockDataSeriesStore) StartJustInTimeConversionAttempt(v0 context.Context, v1 types.InsightSeries) error {
	r0 := m.StartJustInTimeConversionAttemptFunc.nextHook()(v0, v1)
	m.StartJustInTimeConversionAttemptFunc.appendCall(DataSeriesStoreStartJustInTimeConversionAttemptFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// StartJustInTimeConversionAttempt method of the parent MockDataSeriesStore
// instance is invoked and the hook queue is empty.
func (f *DataSeriesStoreStartJustInTimeConversionAttemptFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StartJustInTimeConversionAttempt method of the parent MockDataSeriesStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *DataSeriesStoreStartJustInTimeConversionAttemptFunc) PushHook(hook func(context.Context, types.InsightSeries) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreStartJustInTimeConversionAttemptFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreStartJustInTimeConversionAttemptFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, types.InsightSeries) error {
		return r0
	})
}

func (f *DataSeriesStoreStartJustInTimeConversionAttemptFunc) nextHook() func(context.Context, types.InsightSeries) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreStartJustInTimeConversionAttemptFunc) appendCall(r0 DataSeriesStoreStartJustInTimeConversionAttemptFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DataSeriesStoreStartJustInTimeConversionAttemptFuncCall objects
// describing the invocations of this function.
func (f *DataSeriesStoreStartJustInTimeConversionAttemptFunc) History() []DataSeriesStoreStartJustInTimeConversionAttemptFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreStartJustInTimeConversionAttemptFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreStartJustInTimeConversionAttemptFuncCall is an object that
// describes an invocation of method StartJustInTimeConversionAttempt on an
// instance of MockDataSeriesStore.
type DataSeriesStoreStartJustInTimeConversionAttemptFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreStartJustInTimeConversionAttemptFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreStartJustInTimeConversionAttemptFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockInsightMetadataStore is a mock implementation of the
// InsightMetadataStore interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/insights/store)
// used for unit testing.
type MockInsightMetadataStore struct {
	// GetMappedFunc is an instance of a mock function object controlling
	// the behavior of the method GetMapped.
	GetMappedFunc *InsightMetadataStoreGetMappedFunc
}

// NewMockInsightMetadataStore creates a new mock of the
// InsightMetadataStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockInsightMetadataStore() *MockInsightMetadataStore {
	return &MockInsightMetadataStore{
		GetMappedFunc: &InsightMetadataStoreGetMappedFunc{
			defaultHook: func(context.Context, InsightQueryArgs) (r0 []types.Insight, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockInsightMetadataStore creates a new mock of the
// InsightMetadataStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockInsightMetadataStore() *MockInsightMetadataStore {
	return &MockInsightMetadataStore{
		GetMappedFunc: &InsightMetadataStoreGetMappedFunc{
			defaultHook: func(context.Context, InsightQueryArgs) ([]types.Insight, error) {
				panic("unexpected invocation of MockInsightMetadataStore.GetMapped")
			},
		},
	}
}

// NewMockInsightMetadataStoreFrom creates a new mock of the
// MockInsightMetadataStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockInsightMetadataStoreFrom(i InsightMetadataStore) *MockInsightMetadataStore {
	return &MockInsightMetadataStore{
		GetMappedFunc: &InsightMetadataStoreGetMappedFunc{
			defaultHook: i.GetMapped,
		},
	}
}

// InsightMetadataStoreGetMappedFunc describes the behavior when the
// GetMapped method of the parent MockInsightMetadataStore instance is
// invoked.
type InsightMetadataStoreGetMappedFunc struct {
	defaultHook func(context.Context, InsightQueryArgs) ([]types.Insight, error)
	hooks       []func(context.Context, InsightQueryArgs) ([]types.Insight, error)
	history     []InsightMetadataStoreGetMappedFuncCall
	mutex       sync.Mutex
}

// GetMapped delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockInsightMetadataStore) GetMapped(v0 context.Context, v1 InsightQueryArgs) ([]types.Insight, error) {
	r0, r1 := m.GetMappedFunc.nextHook()(v0, v1)
	m.GetMappedFunc.appendCall(InsightMetadataStoreGetMappedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMapped method of
// the parent MockInsightMetadataStore instance is invoked and the hook
// queue is empty.
func (f *InsightMetadataStoreGetMappedFunc) SetDefaultHook(hook func(context.Context, InsightQueryArgs) ([]types.Insight, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMapped method of the parent MockInsightMetadataStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *InsightMetadataStoreGetMappedFunc) PushHook(hook func(context.Context, InsightQueryArgs) ([]types.Insight, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InsightMetadataStoreGetMappedFunc) SetDefaultReturn(r0 []types.Insight, r1 error) {
	f.SetDefaultHook(func(context.Context, InsightQueryArgs) ([]types.Insight, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InsightMetadataStoreGetMappedFunc) PushReturn(r0 []types.Insight, r1 error) {
	f.PushHook(func(context.Context, InsightQueryArgs) ([]types.Insight, error) {
		return r0, r1
	})
}

func (f *InsightMetadataStoreGetMappedFunc) nextHook() func(context.Context, InsightQueryArgs) ([]types.Insight, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InsightMetadataStoreGetMappedFunc) appendCall(r0 InsightMetadataStoreGetMappedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InsightMetadataStoreGetMappedFuncCall
// objects describing the invocations of this function.
func (f *InsightMetadataStoreGetMappedFunc) History() []InsightMetadataStoreGetMappedFuncCall {
	f.mutex.Lock()
	history := make([]InsightMetadataStoreGetMappedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InsightMetadataStoreGetMappedFuncCall is an object that describes an
// invocation of method GetMapped on an instance of
// MockInsightMetadataStore.
type InsightMetadataStoreGetMappedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 InsightQueryArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Insight
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InsightMetadataStoreGetMappedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InsightMetadataStoreGetMappedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockInterface is a mock implementation of the Interface interface (from
// the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/insights/store)
// used for unit testing.
type MockInterface struct {
	// AddIncompleteDatapointFunc is an instance of a mock function object
	// controlling the behavior of the method AddIncompleteDatapoint.
	AddIncompleteDatapointFunc *InterfaceAddIncompleteDatapointFunc
	// CountDataFunc is an instance of a mock function object controlling
	// the behavior of the method CountData.
	CountDataFunc *InterfaceCountDataFunc
	// GetAllDataForInsightViewIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetAllDataForInsightViewID.
	GetAllDataForInsightViewIDFunc *InterfaceGetAllDataForInsightViewIDFunc
	// GetInsightSeriesRecordingTimesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetInsightSeriesRecordingTimes.
	GetInsightSeriesRecordingTimesFunc *InterfaceGetInsightSeriesRecordingTimesFunc
	// LoadAggregatedIncompleteDatapointsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// LoadAggregatedIncompleteDatapoints.
	LoadAggregatedIncompleteDatapointsFunc *InterfaceLoadAggregatedIncompleteDatapointsFunc
	// RecordSeriesPointsFunc is an instance of a mock function object
	// controlling the behavior of the method RecordSeriesPoints.
	RecordSeriesPointsFunc *InterfaceRecordSeriesPointsFunc
	// RecordSeriesPointsAndRecordingTimesFunc is an instance of a mock
	// function object controlling the behavior of the method
	// RecordSeriesPointsAndRecordingTimes.
	RecordSeriesPointsAndRecordingTimesFunc *InterfaceRecordSeriesPointsAndRecordingTimesFunc
	// SeriesPointsFunc is an instance of a mock function object controlling
	// the behavior of the method SeriesPoints.
	SeriesPointsFunc *InterfaceSeriesPointsFunc
	// SetInsightSeriesRecordingTimesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetInsightSeriesRecordingTimes.
	SetInsightSeriesRecordingTimesFunc *InterfaceSetInsightSeriesRecordingTimesFunc
	// WithOtherFunc is an instance of a mock function object controlling
	// the behavior of the method WithOther.
	WithOtherFunc *InterfaceWithOtherFunc
}

// NewMockInterface creates a new mock of the Interface interface. All
// methods return zero values for all results, unless overwritten.
func NewMockInterface() *MockInterface {
	return &MockInterface{
		AddIncompleteDatapointFunc: &InterfaceAddIncompleteDatapointFunc{
			defaultHook: func(context.Context, AddIncompleteDatapointInput) (r0 error) {
				return
			},
		},
		CountDataFunc: &InterfaceCountDataFunc{
			defaultHook: func(context.Context, CountDataOpts) (r0 int, r1 error) {
				return
			},
		},
		GetAllDataForInsightViewIDFunc: &InterfaceGetAllDataForInsightViewIDFunc{
			defaultHook: func(context.Context, ExportOpts) (r0 []SeriesPointForExport, r1 error) {
				return
			},
		},
		GetInsightSeriesRecordingTimesFunc: &InterfaceGetInsightSeriesRecordingTimesFunc{
			defaultHook: func(context.Context, int, SeriesPointsOpts) (r0 types.InsightSeriesRecordingTimes, r1 error) {
				return
			},
		},
		LoadAggregatedIncompleteDatapointsFunc: &InterfaceLoadAggregatedIncompleteDatapointsFunc{
			defaultHook: func(context.Context, int) (r0 []IncompleteDatapoint, r1 error) {
				return
			},
		},
		RecordSeriesPointsFunc: &InterfaceRecordSeriesPointsFunc{
			defaultHook: func(context.Context, []RecordSeriesPointArgs) (r0 error) {
				return
			},
		},
		RecordSeriesPointsAndRecordingTimesFunc: &InterfaceRecordSeriesPointsAndRecordingTimesFunc{
			defaultHook: func(context.Context, []RecordSeriesPointArgs, types.InsightSeriesRecordingTimes) (r0 error) {
				return
			},
		},
		SeriesPointsFunc: &InterfaceSeriesPointsFunc{
			defaultHook: func(context.Context, SeriesPointsOpts) (r0 []SeriesPoint, r1 error) {
				return
			},
		},
		SetInsightSeriesRecordingTimesFunc: &InterfaceSetInsightSeriesRecordingTimesFunc{
			defaultHook: func(context.Context, []types.InsightSeriesRecordingTimes) (r0 error) {
				return
			},
		},
		WithOtherFunc: &InterfaceWithOtherFunc{
			defaultHook: func(basestore.ShareableStore) (r0 Interface) {
				return
			},
		},
	}
}

// NewStrictMockInterface creates a new mock of the Interface interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockInterface() *MockInterface {
	return &MockInterface{
		AddIncompleteDatapointFunc: &InterfaceAddIncompleteDatapointFunc{
			defaultHook: func(context.Context, AddIncompleteDatapointInput) error {
				panic("unexpected invocation of MockInterface.AddIncompleteDatapoint")
			},
		},
		CountDataFunc: &InterfaceCountDataFunc{
			defaultHook: func(context.Context, CountDataOpts) (int, error) {
				panic("unexpected invocation of MockInterface.CountData")
			},
		},
		GetAllDataForInsightViewIDFunc: &InterfaceGetAllDataForInsightViewIDFunc{
			defaultHook: func(context.Context, ExportOpts) ([]SeriesPointForExport, error) {
				panic("unexpected invocation of MockInterface.GetAllDataForInsightViewID")
			},
		},
		GetInsightSeriesRecordingTimesFunc: &InterfaceGetInsightSeriesRecordingTimesFunc{
			defaultHook: func(context.Context, int, SeriesPointsOpts) (types.InsightSeriesRecordingTimes, error) {
				panic("unexpected invocation of MockInterface.GetInsightSeriesRecordingTimes")
			},
		},
		LoadAggregatedIncompleteDatapointsFunc: &InterfaceLoadAggregatedIncompleteDatapointsFunc{
			defaultHook: func(context.Context, int) ([]IncompleteDatapoint, error) {
				panic("unexpected invocation of MockInterface.LoadAggregatedIncompleteDatapoints")
			},
		},
		RecordSeriesPointsFunc: &InterfaceRecordSeriesPointsFunc{
			defaultHook: func(context.Context, []RecordSeriesPointArgs) error {
				panic("unexpected invocation of MockInterface.RecordSeriesPoints")
			},
		},
		RecordSeriesPointsAndRecordingTimesFunc: &InterfaceRecordSeriesPointsAndRecordingTimesFunc{
			defaultHook: func(context.Context, []RecordSeriesPointArgs, types.InsightSeriesRecordingTimes) error {
				panic("unexpected invocation of MockInterface.RecordSeriesPointsAndRecordingTimes")
			},
		},
		SeriesPointsFunc: &InterfaceSeriesPointsFunc{
			defaultHook: func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error) {
				panic("unexpected invocation of MockInterface.SeriesPoints")
			},
		},
		SetInsightSeriesRecordingTimesFunc: &InterfaceSetInsightSeriesRecordingTimesFunc{
			defaultHook: func(context.Context, []types.InsightSeriesRecordingTimes) error {
				panic("unexpected invocation of MockInterface.SetInsightSeriesRecordingTimes")
			},
		},
		WithOtherFunc: &InterfaceWithOtherFunc{
			defaultHook: func(basestore.ShareableStore) Interface {
				panic("unexpected invocation of MockInterface.WithOther")
			},
		},
	}
}

// NewMockInterfaceFrom creates a new mock of the MockInterface interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockInterfaceFrom(i Interface) *MockInterface {
	return &MockInterface{
		AddIncompleteDatapointFunc: &InterfaceAddIncompleteDatapointFunc{
			defaultHook: i.AddIncompleteDatapoint,
		},
		CountDataFunc: &InterfaceCountDataFunc{
			defaultHook: i.CountData,
		},
		GetAllDataForInsightViewIDFunc: &InterfaceGetAllDataForInsightViewIDFunc{
			defaultHook: i.GetAllDataForInsightViewID,
		},
		GetInsightSeriesRecordingTimesFunc: &InterfaceGetInsightSeriesRecordingTimesFunc{
			defaultHook: i.GetInsightSeriesRecordingTimes,
		},
		LoadAggregatedIncompleteDatapointsFunc: &InterfaceLoadAggregatedIncompleteDatapointsFunc{
			defaultHook: i.LoadAggregatedIncompleteDatapoints,
		},
		RecordSeriesPointsFunc: &InterfaceRecordSeriesPointsFunc{
			defaultHook: i.RecordSeriesPoints,
		},
		RecordSeriesPointsAndRecordingTimesFunc: &InterfaceRecordSeriesPointsAndRecordingTimesFunc{
			defaultHook: i.RecordSeriesPointsAndRecordingTimes,
		},
		SeriesPointsFunc: &InterfaceSeriesPointsFunc{
			defaultHook: i.SeriesPoints,
		},
		SetInsightSeriesRecordingTimesFunc: &InterfaceSetInsightSeriesRecordingTimesFunc{
			defaultHook: i.SetInsightSeriesRecordingTimes,
		},
		WithOtherFunc: &InterfaceWithOtherFunc{
			defaultHook: i.WithOther,
		},
	}
}

// InterfaceAddIncompleteDatapointFunc describes the behavior when the
// AddIncompleteDatapoint method of the parent MockInterface instance is
// invoked.
type InterfaceAddIncompleteDatapointFunc struct {
	defaultHook func(context.Context, AddIncompleteDatapointInput) error
	hooks       []func(context.Context, AddIncompleteDatapointInput) error
	history     []InterfaceAddIncompleteDatapointFuncCall
	mutex       sync.Mutex
}

// AddIncompleteDatapoint delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockInterface) AddIncompleteDatapoint(v0 context.Context, v1 AddIncompleteDatapointInput) error {
	r0 := m.AddIncompleteDatapointFunc.nextHook()(v0, v1)
	m.AddIncompleteDatapointFunc.appendCall(InterfaceAddIncompleteDatapointFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// AddIncompleteDatapoint method of the parent MockInterface instance is
// invoked and the hook queue is empty.
func (f *InterfaceAddIncompleteDatapointFunc) SetDefaultHook(hook func(context.Context, AddIncompleteDatapointInput) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddIncompleteDatapoint method of the parent MockInterface instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *InterfaceAddIncompleteDatapointFunc) PushHook(hook func(context.Context, AddIncompleteDatapointInput) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceAddIncompleteDatapointFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, AddIncompleteDatapointInput) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceAddIncompleteDatapointFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, AddIncompleteDatapointInput) error {
		return r0
	})
}

func (f *InterfaceAddIncompleteDatapointFunc) nextHook() func(context.Context, AddIncompleteDatapointInput) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceAddIncompleteDatapointFunc) appendCall(r0 InterfaceAddIncompleteDatapointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceAddIncompleteDatapointFuncCall
// objects describing the invocations of this function.
func (f *InterfaceAddIncompleteDatapointFunc) History() []InterfaceAddIncompleteDatapointFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceAddIncompleteDatapointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceAddIncompleteDatapointFuncCall is an object that describes an
// invocation of method AddIncompleteDatapoint on an instance of
// MockInterface.
type InterfaceAddIncompleteDatapointFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 AddIncompleteDatapointInput
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceAddIncompleteDatapointFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceAddIncompleteDatapointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// InterfaceCountDataFunc describes the behavior when the CountData method
// of the parent MockInterface instance is invoked.
type InterfaceCountDataFunc struct {
	defaultHook func(context.Context, CountDataOpts) (int, error)
	hooks       []func(context.Context, CountDataOpts) (int, error)
	history     []InterfaceCountDataFuncCall
	mutex       sync.Mutex
}

// CountData delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockInterface) CountData(v0 context.Context, v1 CountDataOpts) (int, error) {
	r0, r1 := m.CountDataFunc.nextHook()(v0, v1)
	m.CountDataFunc.appendCall(InterfaceCountDataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountData method of
// the parent MockInterface instance is invoked and the hook queue is empty.
func (f *InterfaceCountDataFunc) SetDefaultHook(hook func(context.Context, CountDataOpts) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountData method of the parent MockInterface instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *InterfaceCountDataFunc) PushHook(hook func(context.Context, CountDataOpts) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceCountDataFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, CountDataOpts) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceCountDataFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, CountDataOpts) (int, error) {
		return r0, r1
	})
}

func (f *InterfaceCountDataFunc) nextHook() func(context.Context, CountDataOpts) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceCountDataFunc) appendCall(r0 InterfaceCountDataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceCountDataFuncCall objects
// describing the invocations of this function.
func (f *InterfaceCountDataFunc) History() []InterfaceCountDataFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceCountDataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceCountDataFuncCall is an object that describes an invocation of
// method CountData on an instance of MockInterface.
type InterfaceCountDataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 CountDataOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceCountDataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceCountDataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// InterfaceGetAllDataForInsightViewIDFunc describes the behavior when the
// GetAllDataForInsightViewID method of the parent MockInterface instance is
// invoked.
type InterfaceGetAllDataForInsightViewIDFunc struct {
	defaultHook func(context.Context, ExportOpts) ([]SeriesPointForExport, error)
	hooks       []func(context.Context, ExportOpts) ([]SeriesPointForExport, error)
	history     []InterfaceGetAllDataForInsightViewIDFuncCall
	mutex       sync.Mutex
}

// GetAllDataForInsightViewID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockInterface) GetAllDataForInsightViewID(v0 context.Context, v1 ExportOpts) ([]SeriesPointForExport, error) {
	r0, r1 := m.GetAllDataForInsightViewIDFunc.nextHook()(v0, v1)
	m.GetAllDataForInsightViewIDFunc.appendCall(InterfaceGetAllDataForInsightViewIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAllDataForInsightViewID method of the parent MockInterface instance is
// invoked and the hook queue is empty.
func (f *InterfaceGetAllDataForInsightViewIDFunc) SetDefaultHook(hook func(context.Context, ExportOpts) ([]SeriesPointForExport, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAllDataForInsightViewID method of the parent MockInterface instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *InterfaceGetAllDataForInsightViewIDFunc) PushHook(hook func(context.Context, ExportOpts) ([]SeriesPointForExport, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceGetAllDataForInsightViewIDFunc) SetDefaultReturn(r0 []SeriesPointForExport, r1 error) {
	f.SetDefaultHook(func(context.Context, ExportOpts) ([]SeriesPointForExport, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceGetAllDataForInsightViewIDFunc) PushReturn(r0 []SeriesPointForExport, r1 error) {
	f.PushHook(func(context.Context, ExportOpts) ([]SeriesPointForExport, error) {
		return r0, r1
	})
}

func (f *InterfaceGetAllDataForInsightViewIDFunc) nextHook() func(context.Context, ExportOpts) ([]SeriesPointForExport, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceGetAllDataForInsightViewIDFunc) appendCall(r0 InterfaceGetAllDataForInsightViewIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceGetAllDataForInsightViewIDFuncCall
// objects describing the invocations of this function.
func (f *InterfaceGetAllDataForInsightViewIDFunc) History() []InterfaceGetAllDataForInsightViewIDFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceGetAllDataForInsightViewIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceGetAllDataForInsightViewIDFuncCall is an object that describes
// an invocation of method GetAllDataForInsightViewID on an instance of
// MockInterface.
type InterfaceGetAllDataForInsightViewIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExportOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []SeriesPointForExport
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceGetAllDataForInsightViewIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceGetAllDataForInsightViewIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// InterfaceGetInsightSeriesRecordingTimesFunc describes the behavior when
// the GetInsightSeriesRecordingTimes method of the parent MockInterface
// instance is invoked.
type InterfaceGetInsightSeriesRecordingTimesFunc struct {
	defaultHook func(context.Context, int, SeriesPointsOpts) (types.InsightSeriesRecordingTimes, error)
	hooks       []func(context.Context, int, SeriesPointsOpts) (types.InsightSeriesRecordingTimes, error)
	history     []InterfaceGetInsightSeriesRecordingTimesFuncCall
	mutex       sync.Mutex
}

// GetInsightSeriesRecordingTimes delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockInterface) GetInsightSeriesRecordingTimes(v0 context.Context, v1 int, v2 SeriesPointsOpts) (types.InsightSeriesRecordingTimes, error) {
	r0, r1 := m.GetInsightSeriesRecordingTimesFunc.nextHook()(v0, v1, v2)
	m.GetInsightSeriesRecordingTimesFunc.appendCall(InterfaceGetInsightSeriesRecordingTimesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetInsightSeriesRecordingTimes method of the parent MockInterface
// instance is invoked and the hook queue is empty.
func (f *InterfaceGetInsightSeriesRecordingTimesFunc) SetDefaultHook(hook func(context.Context, int, SeriesPointsOpts) (types.InsightSeriesRecordingTimes, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetInsightSeriesRecordingTimes method of the parent MockInterface
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *InterfaceGetInsightSeriesRecordingTimesFunc) PushHook(hook func(context.Context, int, SeriesPointsOpts) (types.InsightSeriesRecordingTimes, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceGetInsightSeriesRecordingTimesFunc) SetDefaultReturn(r0 types.InsightSeriesRecordingTimes, r1 error) {
	f.SetDefaultHook(func(context.Context, int, SeriesPointsOpts) (types.InsightSeriesRecordingTimes, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceGetInsightSeriesRecordingTimesFunc) PushReturn(r0 types.InsightSeriesRecordingTimes, r1 error) {
	f.PushHook(func(context.Context, int, SeriesPointsOpts) (types.InsightSeriesRecordingTimes, error) {
		return r0, r1
	})
}

func (f *InterfaceGetInsightSeriesRecordingTimesFunc) nextHook() func(context.Context, int, SeriesPointsOpts) (types.InsightSeriesRecordingTimes, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceGetInsightSeriesRecordingTimesFunc) appendCall(r0 InterfaceGetInsightSeriesRecordingTimesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// InterfaceGetInsightSeriesRecordingTimesFuncCall objects describing the
// invocations of this function.
func (f *InterfaceGetInsightSeriesRecordingTimesFunc) History() []InterfaceGetInsightSeriesRecordingTimesFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceGetInsightSeriesRecordingTimesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceGetInsightSeriesRecordingTimesFuncCall is an object that
// describes an invocation of method GetInsightSeriesRecordingTimes on an
// instance of MockInterface.
type InterfaceGetInsightSeriesRecordingTimesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 SeriesPointsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.InsightSeriesRecordingTimes
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceGetInsightSeriesRecordingTimesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceGetInsightSeriesRecordingTimesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// InterfaceLoadAggregatedIncompleteDatapointsFunc describes the behavior
// when the LoadAggregatedIncompleteDatapoints method of the parent
// MockInterface instance is invoked.
type InterfaceLoadAggregatedIncompleteDatapointsFunc struct {
	defaultHook func(context.Context, int) ([]IncompleteDatapoint, error)
	hooks       []func(context.Context, int) ([]IncompleteDatapoint, error)
	history     []InterfaceLoadAggregatedIncompleteDatapointsFuncCall
	mutex       sync.Mutex
}

// LoadAggregatedIncompleteDatapoints delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockInterface) LoadAggregatedIncompleteDatapoints(v0 context.Context, v1 int) ([]IncompleteDatapoint, error) {
	r0, r1 := m.LoadAggregatedIncompleteDatapointsFunc.nextHook()(v0, v1)
	m.LoadAggregatedIncompleteDatapointsFunc.appendCall(InterfaceLoadAggregatedIncompleteDatapointsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// LoadAggregatedIncompleteDatapoints method of the parent MockInterface
// instance is invoked and the hook queue is empty.
func (f *InterfaceLoadAggregatedIncompleteDatapointsFunc) SetDefaultHook(hook func(context.Context, int) ([]IncompleteDatapoint, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadAggregatedIncompleteDatapoints method of the parent MockInterface
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *InterfaceLoadAggregatedIncompleteDatapointsFunc) PushHook(hook func(context.Context, int) ([]IncompleteDatapoint, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceLoadAggregatedIncompleteDatapointsFunc) SetDefaultReturn(r0 []IncompleteDatapoint, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]IncompleteDatapoint, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceLoadAggregatedIncompleteDatapointsFunc) PushReturn(r0 []IncompleteDatapoint, r1 error) {
	f.PushHook(func(context.Context, int) ([]IncompleteDatapoint, error) {
		return r0, r1
	})
}

func (f *InterfaceLoadAggregatedIncompleteDatapointsFunc) nextHook() func(context.Context, int) ([]IncompleteDatapoint, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceLoadAggregatedIncompleteDatapointsFunc) appendCall(r0 InterfaceLoadAggregatedIncompleteDatapointsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// InterfaceLoadAggregatedIncompleteDatapointsFuncCall objects describing
// the invocations of this function.
func (f *InterfaceLoadAggregatedIncompleteDatapointsFunc) History() []InterfaceLoadAggregatedIncompleteDatapointsFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceLoadAggregatedIncompleteDatapointsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceLoadAggregatedIncompleteDatapointsFuncCall is an object that
// describes an invocation of method LoadAggregatedIncompleteDatapoints on
// an instance of MockInterface.
type InterfaceLoadAggregatedIncompleteDatapointsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []IncompleteDatapoint
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceLoadAggregatedIncompleteDatapointsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceLoadAggregatedIncompleteDatapointsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// InterfaceRecordSeriesPointsFunc describes the behavior when the
// RecordSeriesPoints method of the parent MockInterface instance is
// invoked.
type InterfaceRecordSeriesPointsFunc struct {
	defaultHook func(context.Context, []RecordSeriesPointArgs) error
	hooks       []func(context.Context, []RecordSeriesPointArgs) error
	history     []InterfaceRecordSeriesPointsFuncCall
	mutex       sync.Mutex
}

// RecordSeriesPoints delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockInterface) RecordSeriesPoints(v0 context.Context, v1 []RecordSeriesPointArgs) error {
	r0 := m.RecordSeriesPointsFunc.nextHook()(v0, v1)
	m.RecordSeriesPointsFunc.appendCall(InterfaceRecordSeriesPointsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecordSeriesPoints
// method of the parent MockInterface instance is invoked and the hook queue
// is empty.
func (f *InterfaceRecordSeriesPointsFunc) SetDefaultHook(hook func(context.Context, []RecordSeriesPointArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecordSeriesPoints method of the parent MockInterface instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *InterfaceRecordSeriesPointsFunc) PushHook(hook func(context.Context, []RecordSeriesPointArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceRecordSeriesPointsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []RecordSeriesPointArgs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceRecordSeriesPointsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []RecordSeriesPointArgs) error {
		return r0
	})
}

func (f *InterfaceRecordSeriesPointsFunc) nextHook() func(context.Context, []RecordSeriesPointArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceRecordSeriesPointsFunc) appendCall(r0 InterfaceRecordSeriesPointsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceRecordSeriesPointsFuncCall objects
// describing the invocations of this function.
func (f *InterfaceRecordSeriesPointsFunc) History() []InterfaceRecordSeriesPointsFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceRecordSeriesPointsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceRecordSeriesPointsFuncCall is an object that describes an
// invocation of method RecordSeriesPoints on an instance of MockInterface.
type InterfaceRecordSeriesPointsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []RecordSeriesPointArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceRecordSeriesPointsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceRecordSeriesPointsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// InterfaceRecordSeriesPointsAndRecordingTimesFunc describes the behavior
// when the RecordSeriesPointsAndRecordingTimes method of the parent
// MockInterface instance is invoked.
type InterfaceRecordSeriesPointsAndRecordingTimesFunc struct {
	defaultHook func(context.Context, []RecordSeriesPointArgs, types.InsightSeriesRecordingTimes) error
	hooks       []func(context.Context, []RecordSeriesPointArgs, types.InsightSeriesRecordingTimes) error
	history     []InterfaceRecordSeriesPointsAndRecordingTimesFuncCall
	mutex       sync.Mutex
}

// RecordSeriesPointsAndRecordingTimes delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockInterface) RecordSeriesPointsAndRecordingTimes(v0 context.Context, v1 []RecordSeriesPointArgs, v2 types.InsightSeriesRecordingTimes) error {
	r0 := m.RecordSeriesPointsAndRecordingTimesFunc.nextHook()(v0, v1, v2)
	m.RecordSeriesPointsAndRecordingTimesFunc.appendCall(InterfaceRecordSeriesPointsAndRecordingTimesFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RecordSeriesPointsAndRecordingTimes method of the parent MockInterface
// instance is invoked and the hook queue is empty.
func (f *InterfaceRecordSeriesPointsAndRecordingTimesFunc) SetDefaultHook(hook func(context.Context, []RecordSeriesPointArgs, types.InsightSeriesRecordingTimes) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecordSeriesPointsAndRecordingTimes method of the parent MockInterface
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *InterfaceRecordSeriesPointsAndRecordingTimesFunc) PushHook(hook func(context.Context, []RecordSeriesPointArgs, types.InsightSeriesRecordingTimes) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceRecordSeriesPointsAndRecordingTimesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []RecordSeriesPointArgs, types.InsightSeriesRecordingTimes) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceRecordSeriesPointsAndRecordingTimesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []RecordSeriesPointArgs, types.InsightSeriesRecordingTimes) error {
		return r0
	})
}

func (f *InterfaceRecordSeriesPointsAndRecordingTimesFunc) nextHook() func(context.Context, []RecordSeriesPointArgs, types.InsightSeriesRecordingTimes) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceRecordSeriesPointsAndRecordingTimesFunc) appendCall(r0 InterfaceRecordSeriesPointsAndRecordingTimesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// InterfaceRecordSeriesPointsAndRecordingTimesFuncCall objects describing
// the invocations of this function.
func (f *InterfaceRecordSeriesPointsAndRecordingTimesFunc) History() []InterfaceRecordSeriesPointsAndRecordingTimesFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceRecordSeriesPointsAndRecordingTimesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceRecordSeriesPointsAndRecordingTimesFuncCall is an object that
// describes an invocation of method RecordSeriesPointsAndRecordingTimes on
// an instance of MockInterface.
type InterfaceRecordSeriesPointsAndRecordingTimesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []RecordSeriesPointArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 types.InsightSeriesRecordingTimes
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceRecordSeriesPointsAndRecordingTimesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceRecordSeriesPointsAndRecordingTimesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// InterfaceSeriesPointsFunc describes the behavior when the SeriesPoints
// method of the parent MockInterface instance is invoked.
type InterfaceSeriesPointsFunc struct {
	defaultHook func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error)
	hooks       []func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error)
	history     []InterfaceSeriesPointsFuncCall
	mutex       sync.Mutex
}

// SeriesPoints delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockInterface) SeriesPoints(v0 context.Context, v1 SeriesPointsOpts) ([]SeriesPoint, error) {
	r0, r1 := m.SeriesPointsFunc.nextHook()(v0, v1)
	m.SeriesPointsFunc.appendCall(InterfaceSeriesPointsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SeriesPoints method
// of the parent MockInterface instance is invoked and the hook queue is
// empty.
func (f *InterfaceSeriesPointsFunc) SetDefaultHook(hook func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SeriesPoints method of the parent MockInterface instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *InterfaceSeriesPointsFunc) PushHook(hook func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceSeriesPointsFunc) SetDefaultReturn(r0 []SeriesPoint, r1 error) {
	f.SetDefaultHook(func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceSeriesPointsFunc) PushReturn(r0 []SeriesPoint, r1 error) {
	f.PushHook(func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error) {
		return r0, r1
	})
}

func (f *InterfaceSeriesPointsFunc) nextHook() func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceSeriesPointsFunc) appendCall(r0 InterfaceSeriesPointsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceSeriesPointsFuncCall objects
// describing the invocations of this function.
func (f *InterfaceSeriesPointsFunc) History() []InterfaceSeriesPointsFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceSeriesPointsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceSeriesPointsFuncCall is an object that describes an invocation
// of method SeriesPoints on an instance of MockInterface.
type InterfaceSeriesPointsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 SeriesPointsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []SeriesPoint
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceSeriesPointsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceSeriesPointsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// InterfaceSetInsightSeriesRecordingTimesFunc describes the behavior when
// the SetInsightSeriesRecordingTimes method of the parent MockInterface
// instance is invoked.
type InterfaceSetInsightSeriesRecordingTimesFunc struct {
	defaultHook func(context.Context, []types.InsightSeriesRecordingTimes) error
	hooks       []func(context.Context, []types.InsightSeriesRecordingTimes) error
	history     []InterfaceSetInsightSeriesRecordingTimesFuncCall
	mutex       sync.Mutex
}

// SetInsightSeriesRecordingTimes delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockInterface) SetInsightSeriesRecordingTimes(v0 context.Context, v1 []types.InsightSeriesRecordingTimes) error {
	r0 := m.SetInsightSeriesRecordingTimesFunc.nextHook()(v0, v1)
	m.SetInsightSeriesRecordingTimesFunc.appendCall(InterfaceSetInsightSeriesRecordingTimesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetInsightSeriesRecordingTimes method of the parent MockInterface
// instance is invoked and the hook queue is empty.
func (f *InterfaceSetInsightSeriesRecordingTimesFunc) SetDefaultHook(hook func(context.Context, []types.InsightSeriesRecordingTimes) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetInsightSeriesRecordingTimes method of the parent MockInterface
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *InterfaceSetInsightSeriesRecordingTimesFunc) PushHook(hook func(context.Context, []types.InsightSeriesRecordingTimes) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceSetInsightSeriesRecordingTimesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []types.InsightSeriesRecordingTimes) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceSetInsightSeriesRecordingTimesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []types.InsightSeriesRecordingTimes) error {
		return r0
	})
}

func (f *InterfaceSetInsightSeriesRecordingTimesFunc) nextHook() func(context.Context, []types.InsightSeriesRecordingTimes) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceSetInsightSeriesRecordingTimesFunc) appendCall(r0 InterfaceSetInsightSeriesRecordingTimesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// InterfaceSetInsightSeriesRecordingTimesFuncCall objects describing the
// invocations of this function.
func (f *InterfaceSetInsightSeriesRecordingTimesFunc) History() []InterfaceSetInsightSeriesRecordingTimesFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceSetInsightSeriesRecordingTimesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceSetInsightSeriesRecordingTimesFuncCall is an object that
// describes an invocation of method SetInsightSeriesRecordingTimes on an
// instance of MockInterface.
type InterfaceSetInsightSeriesRecordingTimesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []types.InsightSeriesRecordingTimes
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceSetInsightSeriesRecordingTimesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceSetInsightSeriesRecordingTimesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// InterfaceWithOtherFunc describes the behavior when the WithOther method
// of the parent MockInterface instance is invoked.
type InterfaceWithOtherFunc struct {
	defaultHook func(basestore.ShareableStore) Interface
	hooks       []func(basestore.ShareableStore) Interface
	history     []InterfaceWithOtherFuncCall
	mutex       sync.Mutex
}

// WithOther delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockInterface) WithOther(v0 basestore.ShareableStore) Interface {
	r0 := m.WithOtherFunc.nextHook()(v0)
	m.WithOtherFunc.appendCall(InterfaceWithOtherFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithOther method of
// the parent MockInterface instance is invoked and the hook queue is empty.
func (f *InterfaceWithOtherFunc) SetDefaultHook(hook func(basestore.ShareableStore) Interface) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithOther method of the parent MockInterface instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *InterfaceWithOtherFunc) PushHook(hook func(basestore.ShareableStore) Interface) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceWithOtherFunc) SetDefaultReturn(r0 Interface) {
	f.SetDefaultHook(func(basestore.ShareableStore) Interface {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceWithOtherFunc) PushReturn(r0 Interface) {
	f.PushHook(func(basestore.ShareableStore) Interface {
		return r0
	})
}

func (f *InterfaceWithOtherFunc) nextHook() func(basestore.ShareableStore) Interface {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceWithOtherFunc) appendCall(r0 InterfaceWithOtherFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceWithOtherFuncCall objects
// describing the invocations of this function.
func (f *InterfaceWithOtherFunc) History() []InterfaceWithOtherFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceWithOtherFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceWithOtherFuncCall is an object that describes an invocation of
// method WithOther on an instance of MockInterface.
type InterfaceWithOtherFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Interface
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceWithOtherFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceWithOtherFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
