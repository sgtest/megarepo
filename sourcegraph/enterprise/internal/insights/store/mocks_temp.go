// Code generated by go-mockgen 1.3.3; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package store

import (
	"context"
	"sync"

	types "github.com/sourcegraph/sourcegraph/enterprise/internal/insights/types"
)

// MockDataSeriesStore is a mock implementation of the DataSeriesStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/insights/store)
// used for unit testing.
type MockDataSeriesStore struct {
	// GetDataSeriesFunc is an instance of a mock function object
	// controlling the behavior of the method GetDataSeries.
	GetDataSeriesFunc *DataSeriesStoreGetDataSeriesFunc
	// IncrementBackfillAttemptsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// IncrementBackfillAttempts.
	IncrementBackfillAttemptsFunc *DataSeriesStoreIncrementBackfillAttemptsFunc
	// SetSeriesEnabledFunc is an instance of a mock function object
	// controlling the behavior of the method SetSeriesEnabled.
	SetSeriesEnabledFunc *DataSeriesStoreSetSeriesEnabledFunc
	// StampBackfillFunc is an instance of a mock function object
	// controlling the behavior of the method StampBackfill.
	StampBackfillFunc *DataSeriesStoreStampBackfillFunc
	// StampRecordingFunc is an instance of a mock function object
	// controlling the behavior of the method StampRecording.
	StampRecordingFunc *DataSeriesStoreStampRecordingFunc
	// StampSnapshotFunc is an instance of a mock function object
	// controlling the behavior of the method StampSnapshot.
	StampSnapshotFunc *DataSeriesStoreStampSnapshotFunc
}

// NewMockDataSeriesStore creates a new mock of the DataSeriesStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockDataSeriesStore() *MockDataSeriesStore {
	return &MockDataSeriesStore{
		GetDataSeriesFunc: &DataSeriesStoreGetDataSeriesFunc{
			defaultHook: func(context.Context, GetDataSeriesArgs) (r0 []types.InsightSeries, r1 error) {
				return
			},
		},
		IncrementBackfillAttemptsFunc: &DataSeriesStoreIncrementBackfillAttemptsFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 error) {
				return
			},
		},
		SetSeriesEnabledFunc: &DataSeriesStoreSetSeriesEnabledFunc{
			defaultHook: func(context.Context, string, bool) (r0 error) {
				return
			},
		},
		StampBackfillFunc: &DataSeriesStoreStampBackfillFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 types.InsightSeries, r1 error) {
				return
			},
		},
		StampRecordingFunc: &DataSeriesStoreStampRecordingFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 types.InsightSeries, r1 error) {
				return
			},
		},
		StampSnapshotFunc: &DataSeriesStoreStampSnapshotFunc{
			defaultHook: func(context.Context, types.InsightSeries) (r0 types.InsightSeries, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockDataSeriesStore creates a new mock of the DataSeriesStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockDataSeriesStore() *MockDataSeriesStore {
	return &MockDataSeriesStore{
		GetDataSeriesFunc: &DataSeriesStoreGetDataSeriesFunc{
			defaultHook: func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error) {
				panic("unexpected invocation of MockDataSeriesStore.GetDataSeries")
			},
		},
		IncrementBackfillAttemptsFunc: &DataSeriesStoreIncrementBackfillAttemptsFunc{
			defaultHook: func(context.Context, types.InsightSeries) error {
				panic("unexpected invocation of MockDataSeriesStore.IncrementBackfillAttempts")
			},
		},
		SetSeriesEnabledFunc: &DataSeriesStoreSetSeriesEnabledFunc{
			defaultHook: func(context.Context, string, bool) error {
				panic("unexpected invocation of MockDataSeriesStore.SetSeriesEnabled")
			},
		},
		StampBackfillFunc: &DataSeriesStoreStampBackfillFunc{
			defaultHook: func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
				panic("unexpected invocation of MockDataSeriesStore.StampBackfill")
			},
		},
		StampRecordingFunc: &DataSeriesStoreStampRecordingFunc{
			defaultHook: func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
				panic("unexpected invocation of MockDataSeriesStore.StampRecording")
			},
		},
		StampSnapshotFunc: &DataSeriesStoreStampSnapshotFunc{
			defaultHook: func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
				panic("unexpected invocation of MockDataSeriesStore.StampSnapshot")
			},
		},
	}
}

// NewMockDataSeriesStoreFrom creates a new mock of the MockDataSeriesStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockDataSeriesStoreFrom(i DataSeriesStore) *MockDataSeriesStore {
	return &MockDataSeriesStore{
		GetDataSeriesFunc: &DataSeriesStoreGetDataSeriesFunc{
			defaultHook: i.GetDataSeries,
		},
		IncrementBackfillAttemptsFunc: &DataSeriesStoreIncrementBackfillAttemptsFunc{
			defaultHook: i.IncrementBackfillAttempts,
		},
		SetSeriesEnabledFunc: &DataSeriesStoreSetSeriesEnabledFunc{
			defaultHook: i.SetSeriesEnabled,
		},
		StampBackfillFunc: &DataSeriesStoreStampBackfillFunc{
			defaultHook: i.StampBackfill,
		},
		StampRecordingFunc: &DataSeriesStoreStampRecordingFunc{
			defaultHook: i.StampRecording,
		},
		StampSnapshotFunc: &DataSeriesStoreStampSnapshotFunc{
			defaultHook: i.StampSnapshot,
		},
	}
}

// DataSeriesStoreGetDataSeriesFunc describes the behavior when the
// GetDataSeries method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreGetDataSeriesFunc struct {
	defaultHook func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error)
	hooks       []func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error)
	history     []DataSeriesStoreGetDataSeriesFuncCall
	mutex       sync.Mutex
}

// GetDataSeries delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDataSeriesStore) GetDataSeries(v0 context.Context, v1 GetDataSeriesArgs) ([]types.InsightSeries, error) {
	r0, r1 := m.GetDataSeriesFunc.nextHook()(v0, v1)
	m.GetDataSeriesFunc.appendCall(DataSeriesStoreGetDataSeriesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDataSeries method
// of the parent MockDataSeriesStore instance is invoked and the hook queue
// is empty.
func (f *DataSeriesStoreGetDataSeriesFunc) SetDefaultHook(hook func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDataSeries method of the parent MockDataSeriesStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataSeriesStoreGetDataSeriesFunc) PushHook(hook func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreGetDataSeriesFunc) SetDefaultReturn(r0 []types.InsightSeries, r1 error) {
	f.SetDefaultHook(func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreGetDataSeriesFunc) PushReturn(r0 []types.InsightSeries, r1 error) {
	f.PushHook(func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error) {
		return r0, r1
	})
}

func (f *DataSeriesStoreGetDataSeriesFunc) nextHook() func(context.Context, GetDataSeriesArgs) ([]types.InsightSeries, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreGetDataSeriesFunc) appendCall(r0 DataSeriesStoreGetDataSeriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreGetDataSeriesFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreGetDataSeriesFunc) History() []DataSeriesStoreGetDataSeriesFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreGetDataSeriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreGetDataSeriesFuncCall is an object that describes an
// invocation of method GetDataSeries on an instance of MockDataSeriesStore.
type DataSeriesStoreGetDataSeriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetDataSeriesArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.InsightSeries
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreGetDataSeriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreGetDataSeriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataSeriesStoreIncrementBackfillAttemptsFunc describes the behavior when
// the IncrementBackfillAttempts method of the parent MockDataSeriesStore
// instance is invoked.
type DataSeriesStoreIncrementBackfillAttemptsFunc struct {
	defaultHook func(context.Context, types.InsightSeries) error
	hooks       []func(context.Context, types.InsightSeries) error
	history     []DataSeriesStoreIncrementBackfillAttemptsFuncCall
	mutex       sync.Mutex
}

// IncrementBackfillAttempts delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDataSeriesStore) IncrementBackfillAttempts(v0 context.Context, v1 types.InsightSeries) error {
	r0 := m.IncrementBackfillAttemptsFunc.nextHook()(v0, v1)
	m.IncrementBackfillAttemptsFunc.appendCall(DataSeriesStoreIncrementBackfillAttemptsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IncrementBackfillAttempts method of the parent MockDataSeriesStore
// instance is invoked and the hook queue is empty.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IncrementBackfillAttempts method of the parent MockDataSeriesStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) PushHook(hook func(context.Context, types.InsightSeries) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, types.InsightSeries) error {
		return r0
	})
}

func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) nextHook() func(context.Context, types.InsightSeries) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) appendCall(r0 DataSeriesStoreIncrementBackfillAttemptsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DataSeriesStoreIncrementBackfillAttemptsFuncCall objects describing the
// invocations of this function.
func (f *DataSeriesStoreIncrementBackfillAttemptsFunc) History() []DataSeriesStoreIncrementBackfillAttemptsFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreIncrementBackfillAttemptsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreIncrementBackfillAttemptsFuncCall is an object that
// describes an invocation of method IncrementBackfillAttempts on an
// instance of MockDataSeriesStore.
type DataSeriesStoreIncrementBackfillAttemptsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreIncrementBackfillAttemptsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreIncrementBackfillAttemptsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DataSeriesStoreSetSeriesEnabledFunc describes the behavior when the
// SetSeriesEnabled method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreSetSeriesEnabledFunc struct {
	defaultHook func(context.Context, string, bool) error
	hooks       []func(context.Context, string, bool) error
	history     []DataSeriesStoreSetSeriesEnabledFuncCall
	mutex       sync.Mutex
}

// SetSeriesEnabled delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDataSeriesStore) SetSeriesEnabled(v0 context.Context, v1 string, v2 bool) error {
	r0 := m.SetSeriesEnabledFunc.nextHook()(v0, v1, v2)
	m.SetSeriesEnabledFunc.appendCall(DataSeriesStoreSetSeriesEnabledFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetSeriesEnabled
// method of the parent MockDataSeriesStore instance is invoked and the hook
// queue is empty.
func (f *DataSeriesStoreSetSeriesEnabledFunc) SetDefaultHook(hook func(context.Context, string, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSeriesEnabled method of the parent MockDataSeriesStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DataSeriesStoreSetSeriesEnabledFunc) PushHook(hook func(context.Context, string, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreSetSeriesEnabledFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreSetSeriesEnabledFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, bool) error {
		return r0
	})
}

func (f *DataSeriesStoreSetSeriesEnabledFunc) nextHook() func(context.Context, string, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreSetSeriesEnabledFunc) appendCall(r0 DataSeriesStoreSetSeriesEnabledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreSetSeriesEnabledFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreSetSeriesEnabledFunc) History() []DataSeriesStoreSetSeriesEnabledFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreSetSeriesEnabledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreSetSeriesEnabledFuncCall is an object that describes an
// invocation of method SetSeriesEnabled on an instance of
// MockDataSeriesStore.
type DataSeriesStoreSetSeriesEnabledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreSetSeriesEnabledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreSetSeriesEnabledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DataSeriesStoreStampBackfillFunc describes the behavior when the
// StampBackfill method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreStampBackfillFunc struct {
	defaultHook func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	hooks       []func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	history     []DataSeriesStoreStampBackfillFuncCall
	mutex       sync.Mutex
}

// StampBackfill delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDataSeriesStore) StampBackfill(v0 context.Context, v1 types.InsightSeries) (types.InsightSeries, error) {
	r0, r1 := m.StampBackfillFunc.nextHook()(v0, v1)
	m.StampBackfillFunc.appendCall(DataSeriesStoreStampBackfillFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StampBackfill method
// of the parent MockDataSeriesStore instance is invoked and the hook queue
// is empty.
func (f *DataSeriesStoreStampBackfillFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StampBackfill method of the parent MockDataSeriesStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataSeriesStoreStampBackfillFunc) PushHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreStampBackfillFunc) SetDefaultReturn(r0 types.InsightSeries, r1 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreStampBackfillFunc) PushReturn(r0 types.InsightSeries, r1 error) {
	f.PushHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

func (f *DataSeriesStoreStampBackfillFunc) nextHook() func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreStampBackfillFunc) appendCall(r0 DataSeriesStoreStampBackfillFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreStampBackfillFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreStampBackfillFunc) History() []DataSeriesStoreStampBackfillFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreStampBackfillFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreStampBackfillFuncCall is an object that describes an
// invocation of method StampBackfill on an instance of MockDataSeriesStore.
type DataSeriesStoreStampBackfillFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.InsightSeries
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreStampBackfillFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreStampBackfillFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataSeriesStoreStampRecordingFunc describes the behavior when the
// StampRecording method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreStampRecordingFunc struct {
	defaultHook func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	hooks       []func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	history     []DataSeriesStoreStampRecordingFuncCall
	mutex       sync.Mutex
}

// StampRecording delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDataSeriesStore) StampRecording(v0 context.Context, v1 types.InsightSeries) (types.InsightSeries, error) {
	r0, r1 := m.StampRecordingFunc.nextHook()(v0, v1)
	m.StampRecordingFunc.appendCall(DataSeriesStoreStampRecordingFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StampRecording
// method of the parent MockDataSeriesStore instance is invoked and the hook
// queue is empty.
func (f *DataSeriesStoreStampRecordingFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StampRecording method of the parent MockDataSeriesStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataSeriesStoreStampRecordingFunc) PushHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreStampRecordingFunc) SetDefaultReturn(r0 types.InsightSeries, r1 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreStampRecordingFunc) PushReturn(r0 types.InsightSeries, r1 error) {
	f.PushHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

func (f *DataSeriesStoreStampRecordingFunc) nextHook() func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreStampRecordingFunc) appendCall(r0 DataSeriesStoreStampRecordingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreStampRecordingFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreStampRecordingFunc) History() []DataSeriesStoreStampRecordingFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreStampRecordingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreStampRecordingFuncCall is an object that describes an
// invocation of method StampRecording on an instance of
// MockDataSeriesStore.
type DataSeriesStoreStampRecordingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.InsightSeries
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreStampRecordingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreStampRecordingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataSeriesStoreStampSnapshotFunc describes the behavior when the
// StampSnapshot method of the parent MockDataSeriesStore instance is
// invoked.
type DataSeriesStoreStampSnapshotFunc struct {
	defaultHook func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	hooks       []func(context.Context, types.InsightSeries) (types.InsightSeries, error)
	history     []DataSeriesStoreStampSnapshotFuncCall
	mutex       sync.Mutex
}

// StampSnapshot delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDataSeriesStore) StampSnapshot(v0 context.Context, v1 types.InsightSeries) (types.InsightSeries, error) {
	r0, r1 := m.StampSnapshotFunc.nextHook()(v0, v1)
	m.StampSnapshotFunc.appendCall(DataSeriesStoreStampSnapshotFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StampSnapshot method
// of the parent MockDataSeriesStore instance is invoked and the hook queue
// is empty.
func (f *DataSeriesStoreStampSnapshotFunc) SetDefaultHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StampSnapshot method of the parent MockDataSeriesStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataSeriesStoreStampSnapshotFunc) PushHook(hook func(context.Context, types.InsightSeries) (types.InsightSeries, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataSeriesStoreStampSnapshotFunc) SetDefaultReturn(r0 types.InsightSeries, r1 error) {
	f.SetDefaultHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataSeriesStoreStampSnapshotFunc) PushReturn(r0 types.InsightSeries, r1 error) {
	f.PushHook(func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
		return r0, r1
	})
}

func (f *DataSeriesStoreStampSnapshotFunc) nextHook() func(context.Context, types.InsightSeries) (types.InsightSeries, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataSeriesStoreStampSnapshotFunc) appendCall(r0 DataSeriesStoreStampSnapshotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataSeriesStoreStampSnapshotFuncCall
// objects describing the invocations of this function.
func (f *DataSeriesStoreStampSnapshotFunc) History() []DataSeriesStoreStampSnapshotFuncCall {
	f.mutex.Lock()
	history := make([]DataSeriesStoreStampSnapshotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataSeriesStoreStampSnapshotFuncCall is an object that describes an
// invocation of method StampSnapshot on an instance of MockDataSeriesStore.
type DataSeriesStoreStampSnapshotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.InsightSeries
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataSeriesStoreStampSnapshotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataSeriesStoreStampSnapshotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockInsightMetadataStore is a mock implementation of the
// InsightMetadataStore interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/insights/store)
// used for unit testing.
type MockInsightMetadataStore struct {
	// GetDirtyQueriesFunc is an instance of a mock function object
	// controlling the behavior of the method GetDirtyQueries.
	GetDirtyQueriesFunc *InsightMetadataStoreGetDirtyQueriesFunc
	// GetDirtyQueriesAggregatedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetDirtyQueriesAggregated.
	GetDirtyQueriesAggregatedFunc *InsightMetadataStoreGetDirtyQueriesAggregatedFunc
	// GetMappedFunc is an instance of a mock function object controlling
	// the behavior of the method GetMapped.
	GetMappedFunc *InsightMetadataStoreGetMappedFunc
}

// NewMockInsightMetadataStore creates a new mock of the
// InsightMetadataStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockInsightMetadataStore() *MockInsightMetadataStore {
	return &MockInsightMetadataStore{
		GetDirtyQueriesFunc: &InsightMetadataStoreGetDirtyQueriesFunc{
			defaultHook: func(context.Context, *types.InsightSeries) (r0 []*types.DirtyQuery, r1 error) {
				return
			},
		},
		GetDirtyQueriesAggregatedFunc: &InsightMetadataStoreGetDirtyQueriesAggregatedFunc{
			defaultHook: func(context.Context, string) (r0 []*types.DirtyQueryAggregate, r1 error) {
				return
			},
		},
		GetMappedFunc: &InsightMetadataStoreGetMappedFunc{
			defaultHook: func(context.Context, InsightQueryArgs) (r0 []types.Insight, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockInsightMetadataStore creates a new mock of the
// InsightMetadataStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockInsightMetadataStore() *MockInsightMetadataStore {
	return &MockInsightMetadataStore{
		GetDirtyQueriesFunc: &InsightMetadataStoreGetDirtyQueriesFunc{
			defaultHook: func(context.Context, *types.InsightSeries) ([]*types.DirtyQuery, error) {
				panic("unexpected invocation of MockInsightMetadataStore.GetDirtyQueries")
			},
		},
		GetDirtyQueriesAggregatedFunc: &InsightMetadataStoreGetDirtyQueriesAggregatedFunc{
			defaultHook: func(context.Context, string) ([]*types.DirtyQueryAggregate, error) {
				panic("unexpected invocation of MockInsightMetadataStore.GetDirtyQueriesAggregated")
			},
		},
		GetMappedFunc: &InsightMetadataStoreGetMappedFunc{
			defaultHook: func(context.Context, InsightQueryArgs) ([]types.Insight, error) {
				panic("unexpected invocation of MockInsightMetadataStore.GetMapped")
			},
		},
	}
}

// NewMockInsightMetadataStoreFrom creates a new mock of the
// MockInsightMetadataStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockInsightMetadataStoreFrom(i InsightMetadataStore) *MockInsightMetadataStore {
	return &MockInsightMetadataStore{
		GetDirtyQueriesFunc: &InsightMetadataStoreGetDirtyQueriesFunc{
			defaultHook: i.GetDirtyQueries,
		},
		GetDirtyQueriesAggregatedFunc: &InsightMetadataStoreGetDirtyQueriesAggregatedFunc{
			defaultHook: i.GetDirtyQueriesAggregated,
		},
		GetMappedFunc: &InsightMetadataStoreGetMappedFunc{
			defaultHook: i.GetMapped,
		},
	}
}

// InsightMetadataStoreGetDirtyQueriesFunc describes the behavior when the
// GetDirtyQueries method of the parent MockInsightMetadataStore instance is
// invoked.
type InsightMetadataStoreGetDirtyQueriesFunc struct {
	defaultHook func(context.Context, *types.InsightSeries) ([]*types.DirtyQuery, error)
	hooks       []func(context.Context, *types.InsightSeries) ([]*types.DirtyQuery, error)
	history     []InsightMetadataStoreGetDirtyQueriesFuncCall
	mutex       sync.Mutex
}

// GetDirtyQueries delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockInsightMetadataStore) GetDirtyQueries(v0 context.Context, v1 *types.InsightSeries) ([]*types.DirtyQuery, error) {
	r0, r1 := m.GetDirtyQueriesFunc.nextHook()(v0, v1)
	m.GetDirtyQueriesFunc.appendCall(InsightMetadataStoreGetDirtyQueriesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDirtyQueries
// method of the parent MockInsightMetadataStore instance is invoked and the
// hook queue is empty.
func (f *InsightMetadataStoreGetDirtyQueriesFunc) SetDefaultHook(hook func(context.Context, *types.InsightSeries) ([]*types.DirtyQuery, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDirtyQueries method of the parent MockInsightMetadataStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *InsightMetadataStoreGetDirtyQueriesFunc) PushHook(hook func(context.Context, *types.InsightSeries) ([]*types.DirtyQuery, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InsightMetadataStoreGetDirtyQueriesFunc) SetDefaultReturn(r0 []*types.DirtyQuery, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.InsightSeries) ([]*types.DirtyQuery, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InsightMetadataStoreGetDirtyQueriesFunc) PushReturn(r0 []*types.DirtyQuery, r1 error) {
	f.PushHook(func(context.Context, *types.InsightSeries) ([]*types.DirtyQuery, error) {
		return r0, r1
	})
}

func (f *InsightMetadataStoreGetDirtyQueriesFunc) nextHook() func(context.Context, *types.InsightSeries) ([]*types.DirtyQuery, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InsightMetadataStoreGetDirtyQueriesFunc) appendCall(r0 InsightMetadataStoreGetDirtyQueriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InsightMetadataStoreGetDirtyQueriesFuncCall
// objects describing the invocations of this function.
func (f *InsightMetadataStoreGetDirtyQueriesFunc) History() []InsightMetadataStoreGetDirtyQueriesFuncCall {
	f.mutex.Lock()
	history := make([]InsightMetadataStoreGetDirtyQueriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InsightMetadataStoreGetDirtyQueriesFuncCall is an object that describes
// an invocation of method GetDirtyQueries on an instance of
// MockInsightMetadataStore.
type InsightMetadataStoreGetDirtyQueriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.InsightSeries
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.DirtyQuery
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InsightMetadataStoreGetDirtyQueriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InsightMetadataStoreGetDirtyQueriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// InsightMetadataStoreGetDirtyQueriesAggregatedFunc describes the behavior
// when the GetDirtyQueriesAggregated method of the parent
// MockInsightMetadataStore instance is invoked.
type InsightMetadataStoreGetDirtyQueriesAggregatedFunc struct {
	defaultHook func(context.Context, string) ([]*types.DirtyQueryAggregate, error)
	hooks       []func(context.Context, string) ([]*types.DirtyQueryAggregate, error)
	history     []InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall
	mutex       sync.Mutex
}

// GetDirtyQueriesAggregated delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockInsightMetadataStore) GetDirtyQueriesAggregated(v0 context.Context, v1 string) ([]*types.DirtyQueryAggregate, error) {
	r0, r1 := m.GetDirtyQueriesAggregatedFunc.nextHook()(v0, v1)
	m.GetDirtyQueriesAggregatedFunc.appendCall(InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetDirtyQueriesAggregated method of the parent MockInsightMetadataStore
// instance is invoked and the hook queue is empty.
func (f *InsightMetadataStoreGetDirtyQueriesAggregatedFunc) SetDefaultHook(hook func(context.Context, string) ([]*types.DirtyQueryAggregate, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDirtyQueriesAggregated method of the parent MockInsightMetadataStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *InsightMetadataStoreGetDirtyQueriesAggregatedFunc) PushHook(hook func(context.Context, string) ([]*types.DirtyQueryAggregate, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InsightMetadataStoreGetDirtyQueriesAggregatedFunc) SetDefaultReturn(r0 []*types.DirtyQueryAggregate, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]*types.DirtyQueryAggregate, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InsightMetadataStoreGetDirtyQueriesAggregatedFunc) PushReturn(r0 []*types.DirtyQueryAggregate, r1 error) {
	f.PushHook(func(context.Context, string) ([]*types.DirtyQueryAggregate, error) {
		return r0, r1
	})
}

func (f *InsightMetadataStoreGetDirtyQueriesAggregatedFunc) nextHook() func(context.Context, string) ([]*types.DirtyQueryAggregate, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InsightMetadataStoreGetDirtyQueriesAggregatedFunc) appendCall(r0 InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall objects describing
// the invocations of this function.
func (f *InsightMetadataStoreGetDirtyQueriesAggregatedFunc) History() []InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall {
	f.mutex.Lock()
	history := make([]InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall is an object that
// describes an invocation of method GetDirtyQueriesAggregated on an
// instance of MockInsightMetadataStore.
type InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.DirtyQueryAggregate
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InsightMetadataStoreGetDirtyQueriesAggregatedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// InsightMetadataStoreGetMappedFunc describes the behavior when the
// GetMapped method of the parent MockInsightMetadataStore instance is
// invoked.
type InsightMetadataStoreGetMappedFunc struct {
	defaultHook func(context.Context, InsightQueryArgs) ([]types.Insight, error)
	hooks       []func(context.Context, InsightQueryArgs) ([]types.Insight, error)
	history     []InsightMetadataStoreGetMappedFuncCall
	mutex       sync.Mutex
}

// GetMapped delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockInsightMetadataStore) GetMapped(v0 context.Context, v1 InsightQueryArgs) ([]types.Insight, error) {
	r0, r1 := m.GetMappedFunc.nextHook()(v0, v1)
	m.GetMappedFunc.appendCall(InsightMetadataStoreGetMappedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMapped method of
// the parent MockInsightMetadataStore instance is invoked and the hook
// queue is empty.
func (f *InsightMetadataStoreGetMappedFunc) SetDefaultHook(hook func(context.Context, InsightQueryArgs) ([]types.Insight, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMapped method of the parent MockInsightMetadataStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *InsightMetadataStoreGetMappedFunc) PushHook(hook func(context.Context, InsightQueryArgs) ([]types.Insight, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InsightMetadataStoreGetMappedFunc) SetDefaultReturn(r0 []types.Insight, r1 error) {
	f.SetDefaultHook(func(context.Context, InsightQueryArgs) ([]types.Insight, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InsightMetadataStoreGetMappedFunc) PushReturn(r0 []types.Insight, r1 error) {
	f.PushHook(func(context.Context, InsightQueryArgs) ([]types.Insight, error) {
		return r0, r1
	})
}

func (f *InsightMetadataStoreGetMappedFunc) nextHook() func(context.Context, InsightQueryArgs) ([]types.Insight, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InsightMetadataStoreGetMappedFunc) appendCall(r0 InsightMetadataStoreGetMappedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InsightMetadataStoreGetMappedFuncCall
// objects describing the invocations of this function.
func (f *InsightMetadataStoreGetMappedFunc) History() []InsightMetadataStoreGetMappedFuncCall {
	f.mutex.Lock()
	history := make([]InsightMetadataStoreGetMappedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InsightMetadataStoreGetMappedFuncCall is an object that describes an
// invocation of method GetMapped on an instance of
// MockInsightMetadataStore.
type InsightMetadataStoreGetMappedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 InsightQueryArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Insight
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InsightMetadataStoreGetMappedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InsightMetadataStoreGetMappedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockInterface is a mock implementation of the Interface interface (from
// the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/insights/store)
// used for unit testing.
type MockInterface struct {
	// CountDataFunc is an instance of a mock function object controlling
	// the behavior of the method CountData.
	CountDataFunc *InterfaceCountDataFunc
	// RecordSeriesPointFunc is an instance of a mock function object
	// controlling the behavior of the method RecordSeriesPoint.
	RecordSeriesPointFunc *InterfaceRecordSeriesPointFunc
	// RecordSeriesPointsFunc is an instance of a mock function object
	// controlling the behavior of the method RecordSeriesPoints.
	RecordSeriesPointsFunc *InterfaceRecordSeriesPointsFunc
	// SeriesPointsFunc is an instance of a mock function object controlling
	// the behavior of the method SeriesPoints.
	SeriesPointsFunc *InterfaceSeriesPointsFunc
}

// NewMockInterface creates a new mock of the Interface interface. All
// methods return zero values for all results, unless overwritten.
func NewMockInterface() *MockInterface {
	return &MockInterface{
		CountDataFunc: &InterfaceCountDataFunc{
			defaultHook: func(context.Context, CountDataOpts) (r0 int, r1 error) {
				return
			},
		},
		RecordSeriesPointFunc: &InterfaceRecordSeriesPointFunc{
			defaultHook: func(context.Context, RecordSeriesPointArgs) (r0 error) {
				return
			},
		},
		RecordSeriesPointsFunc: &InterfaceRecordSeriesPointsFunc{
			defaultHook: func(context.Context, []RecordSeriesPointArgs) (r0 error) {
				return
			},
		},
		SeriesPointsFunc: &InterfaceSeriesPointsFunc{
			defaultHook: func(context.Context, SeriesPointsOpts) (r0 []SeriesPoint, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockInterface creates a new mock of the Interface interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockInterface() *MockInterface {
	return &MockInterface{
		CountDataFunc: &InterfaceCountDataFunc{
			defaultHook: func(context.Context, CountDataOpts) (int, error) {
				panic("unexpected invocation of MockInterface.CountData")
			},
		},
		RecordSeriesPointFunc: &InterfaceRecordSeriesPointFunc{
			defaultHook: func(context.Context, RecordSeriesPointArgs) error {
				panic("unexpected invocation of MockInterface.RecordSeriesPoint")
			},
		},
		RecordSeriesPointsFunc: &InterfaceRecordSeriesPointsFunc{
			defaultHook: func(context.Context, []RecordSeriesPointArgs) error {
				panic("unexpected invocation of MockInterface.RecordSeriesPoints")
			},
		},
		SeriesPointsFunc: &InterfaceSeriesPointsFunc{
			defaultHook: func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error) {
				panic("unexpected invocation of MockInterface.SeriesPoints")
			},
		},
	}
}

// NewMockInterfaceFrom creates a new mock of the MockInterface interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockInterfaceFrom(i Interface) *MockInterface {
	return &MockInterface{
		CountDataFunc: &InterfaceCountDataFunc{
			defaultHook: i.CountData,
		},
		RecordSeriesPointFunc: &InterfaceRecordSeriesPointFunc{
			defaultHook: i.RecordSeriesPoint,
		},
		RecordSeriesPointsFunc: &InterfaceRecordSeriesPointsFunc{
			defaultHook: i.RecordSeriesPoints,
		},
		SeriesPointsFunc: &InterfaceSeriesPointsFunc{
			defaultHook: i.SeriesPoints,
		},
	}
}

// InterfaceCountDataFunc describes the behavior when the CountData method
// of the parent MockInterface instance is invoked.
type InterfaceCountDataFunc struct {
	defaultHook func(context.Context, CountDataOpts) (int, error)
	hooks       []func(context.Context, CountDataOpts) (int, error)
	history     []InterfaceCountDataFuncCall
	mutex       sync.Mutex
}

// CountData delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockInterface) CountData(v0 context.Context, v1 CountDataOpts) (int, error) {
	r0, r1 := m.CountDataFunc.nextHook()(v0, v1)
	m.CountDataFunc.appendCall(InterfaceCountDataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountData method of
// the parent MockInterface instance is invoked and the hook queue is empty.
func (f *InterfaceCountDataFunc) SetDefaultHook(hook func(context.Context, CountDataOpts) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountData method of the parent MockInterface instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *InterfaceCountDataFunc) PushHook(hook func(context.Context, CountDataOpts) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceCountDataFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, CountDataOpts) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceCountDataFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, CountDataOpts) (int, error) {
		return r0, r1
	})
}

func (f *InterfaceCountDataFunc) nextHook() func(context.Context, CountDataOpts) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceCountDataFunc) appendCall(r0 InterfaceCountDataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceCountDataFuncCall objects
// describing the invocations of this function.
func (f *InterfaceCountDataFunc) History() []InterfaceCountDataFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceCountDataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceCountDataFuncCall is an object that describes an invocation of
// method CountData on an instance of MockInterface.
type InterfaceCountDataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 CountDataOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceCountDataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceCountDataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// InterfaceRecordSeriesPointFunc describes the behavior when the
// RecordSeriesPoint method of the parent MockInterface instance is invoked.
type InterfaceRecordSeriesPointFunc struct {
	defaultHook func(context.Context, RecordSeriesPointArgs) error
	hooks       []func(context.Context, RecordSeriesPointArgs) error
	history     []InterfaceRecordSeriesPointFuncCall
	mutex       sync.Mutex
}

// RecordSeriesPoint delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockInterface) RecordSeriesPoint(v0 context.Context, v1 RecordSeriesPointArgs) error {
	r0 := m.RecordSeriesPointFunc.nextHook()(v0, v1)
	m.RecordSeriesPointFunc.appendCall(InterfaceRecordSeriesPointFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecordSeriesPoint
// method of the parent MockInterface instance is invoked and the hook queue
// is empty.
func (f *InterfaceRecordSeriesPointFunc) SetDefaultHook(hook func(context.Context, RecordSeriesPointArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecordSeriesPoint method of the parent MockInterface instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *InterfaceRecordSeriesPointFunc) PushHook(hook func(context.Context, RecordSeriesPointArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceRecordSeriesPointFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, RecordSeriesPointArgs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceRecordSeriesPointFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, RecordSeriesPointArgs) error {
		return r0
	})
}

func (f *InterfaceRecordSeriesPointFunc) nextHook() func(context.Context, RecordSeriesPointArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceRecordSeriesPointFunc) appendCall(r0 InterfaceRecordSeriesPointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceRecordSeriesPointFuncCall objects
// describing the invocations of this function.
func (f *InterfaceRecordSeriesPointFunc) History() []InterfaceRecordSeriesPointFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceRecordSeriesPointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceRecordSeriesPointFuncCall is an object that describes an
// invocation of method RecordSeriesPoint on an instance of MockInterface.
type InterfaceRecordSeriesPointFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 RecordSeriesPointArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceRecordSeriesPointFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceRecordSeriesPointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// InterfaceRecordSeriesPointsFunc describes the behavior when the
// RecordSeriesPoints method of the parent MockInterface instance is
// invoked.
type InterfaceRecordSeriesPointsFunc struct {
	defaultHook func(context.Context, []RecordSeriesPointArgs) error
	hooks       []func(context.Context, []RecordSeriesPointArgs) error
	history     []InterfaceRecordSeriesPointsFuncCall
	mutex       sync.Mutex
}

// RecordSeriesPoints delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockInterface) RecordSeriesPoints(v0 context.Context, v1 []RecordSeriesPointArgs) error {
	r0 := m.RecordSeriesPointsFunc.nextHook()(v0, v1)
	m.RecordSeriesPointsFunc.appendCall(InterfaceRecordSeriesPointsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecordSeriesPoints
// method of the parent MockInterface instance is invoked and the hook queue
// is empty.
func (f *InterfaceRecordSeriesPointsFunc) SetDefaultHook(hook func(context.Context, []RecordSeriesPointArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecordSeriesPoints method of the parent MockInterface instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *InterfaceRecordSeriesPointsFunc) PushHook(hook func(context.Context, []RecordSeriesPointArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceRecordSeriesPointsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []RecordSeriesPointArgs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceRecordSeriesPointsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []RecordSeriesPointArgs) error {
		return r0
	})
}

func (f *InterfaceRecordSeriesPointsFunc) nextHook() func(context.Context, []RecordSeriesPointArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceRecordSeriesPointsFunc) appendCall(r0 InterfaceRecordSeriesPointsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceRecordSeriesPointsFuncCall objects
// describing the invocations of this function.
func (f *InterfaceRecordSeriesPointsFunc) History() []InterfaceRecordSeriesPointsFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceRecordSeriesPointsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceRecordSeriesPointsFuncCall is an object that describes an
// invocation of method RecordSeriesPoints on an instance of MockInterface.
type InterfaceRecordSeriesPointsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []RecordSeriesPointArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceRecordSeriesPointsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceRecordSeriesPointsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// InterfaceSeriesPointsFunc describes the behavior when the SeriesPoints
// method of the parent MockInterface instance is invoked.
type InterfaceSeriesPointsFunc struct {
	defaultHook func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error)
	hooks       []func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error)
	history     []InterfaceSeriesPointsFuncCall
	mutex       sync.Mutex
}

// SeriesPoints delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockInterface) SeriesPoints(v0 context.Context, v1 SeriesPointsOpts) ([]SeriesPoint, error) {
	r0, r1 := m.SeriesPointsFunc.nextHook()(v0, v1)
	m.SeriesPointsFunc.appendCall(InterfaceSeriesPointsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SeriesPoints method
// of the parent MockInterface instance is invoked and the hook queue is
// empty.
func (f *InterfaceSeriesPointsFunc) SetDefaultHook(hook func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SeriesPoints method of the parent MockInterface instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *InterfaceSeriesPointsFunc) PushHook(hook func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *InterfaceSeriesPointsFunc) SetDefaultReturn(r0 []SeriesPoint, r1 error) {
	f.SetDefaultHook(func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *InterfaceSeriesPointsFunc) PushReturn(r0 []SeriesPoint, r1 error) {
	f.PushHook(func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error) {
		return r0, r1
	})
}

func (f *InterfaceSeriesPointsFunc) nextHook() func(context.Context, SeriesPointsOpts) ([]SeriesPoint, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *InterfaceSeriesPointsFunc) appendCall(r0 InterfaceSeriesPointsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of InterfaceSeriesPointsFuncCall objects
// describing the invocations of this function.
func (f *InterfaceSeriesPointsFunc) History() []InterfaceSeriesPointsFuncCall {
	f.mutex.Lock()
	history := make([]InterfaceSeriesPointsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// InterfaceSeriesPointsFuncCall is an object that describes an invocation
// of method SeriesPoints on an instance of MockInterface.
type InterfaceSeriesPointsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 SeriesPointsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []SeriesPoint
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c InterfaceSeriesPointsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c InterfaceSeriesPointsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
