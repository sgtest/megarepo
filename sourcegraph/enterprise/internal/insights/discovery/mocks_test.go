// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package discovery

import (
	"context"
	"sync"

	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockRepoQueryExecutor is a mock implementation of the RepoQueryExecutor
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/insights/discovery)
// used for unit testing.
type MockRepoQueryExecutor struct {
	// ExecuteRepoListFunc is an instance of a mock function object
	// controlling the behavior of the method ExecuteRepoList.
	ExecuteRepoListFunc *RepoQueryExecutorExecuteRepoListFunc
}

// NewMockRepoQueryExecutor creates a new mock of the RepoQueryExecutor
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockRepoQueryExecutor() *MockRepoQueryExecutor {
	return &MockRepoQueryExecutor{
		ExecuteRepoListFunc: &RepoQueryExecutorExecuteRepoListFunc{
			defaultHook: func(context.Context, string) (r0 []types.MinimalRepo, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockRepoQueryExecutor creates a new mock of the
// RepoQueryExecutor interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockRepoQueryExecutor() *MockRepoQueryExecutor {
	return &MockRepoQueryExecutor{
		ExecuteRepoListFunc: &RepoQueryExecutorExecuteRepoListFunc{
			defaultHook: func(context.Context, string) ([]types.MinimalRepo, error) {
				panic("unexpected invocation of MockRepoQueryExecutor.ExecuteRepoList")
			},
		},
	}
}

// NewMockRepoQueryExecutorFrom creates a new mock of the
// MockRepoQueryExecutor interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockRepoQueryExecutorFrom(i RepoQueryExecutor) *MockRepoQueryExecutor {
	return &MockRepoQueryExecutor{
		ExecuteRepoListFunc: &RepoQueryExecutorExecuteRepoListFunc{
			defaultHook: i.ExecuteRepoList,
		},
	}
}

// RepoQueryExecutorExecuteRepoListFunc describes the behavior when the
// ExecuteRepoList method of the parent MockRepoQueryExecutor instance is
// invoked.
type RepoQueryExecutorExecuteRepoListFunc struct {
	defaultHook func(context.Context, string) ([]types.MinimalRepo, error)
	hooks       []func(context.Context, string) ([]types.MinimalRepo, error)
	history     []RepoQueryExecutorExecuteRepoListFuncCall
	mutex       sync.Mutex
}

// ExecuteRepoList delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoQueryExecutor) ExecuteRepoList(v0 context.Context, v1 string) ([]types.MinimalRepo, error) {
	r0, r1 := m.ExecuteRepoListFunc.nextHook()(v0, v1)
	m.ExecuteRepoListFunc.appendCall(RepoQueryExecutorExecuteRepoListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecuteRepoList
// method of the parent MockRepoQueryExecutor instance is invoked and the
// hook queue is empty.
func (f *RepoQueryExecutorExecuteRepoListFunc) SetDefaultHook(hook func(context.Context, string) ([]types.MinimalRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecuteRepoList method of the parent MockRepoQueryExecutor instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RepoQueryExecutorExecuteRepoListFunc) PushHook(hook func(context.Context, string) ([]types.MinimalRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoQueryExecutorExecuteRepoListFunc) SetDefaultReturn(r0 []types.MinimalRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoQueryExecutorExecuteRepoListFunc) PushReturn(r0 []types.MinimalRepo, r1 error) {
	f.PushHook(func(context.Context, string) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

func (f *RepoQueryExecutorExecuteRepoListFunc) nextHook() func(context.Context, string) ([]types.MinimalRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoQueryExecutorExecuteRepoListFunc) appendCall(r0 RepoQueryExecutorExecuteRepoListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoQueryExecutorExecuteRepoListFuncCall
// objects describing the invocations of this function.
func (f *RepoQueryExecutorExecuteRepoListFunc) History() []RepoQueryExecutorExecuteRepoListFuncCall {
	f.mutex.Lock()
	history := make([]RepoQueryExecutorExecuteRepoListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoQueryExecutorExecuteRepoListFuncCall is an object that describes an
// invocation of method ExecuteRepoList on an instance of
// MockRepoQueryExecutor.
type RepoQueryExecutorExecuteRepoListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.MinimalRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoQueryExecutorExecuteRepoListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoQueryExecutorExecuteRepoListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
