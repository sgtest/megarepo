// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package codemonitors

import (
	"context"
	"database/sql"
	"sync"
	"time"

	graphqlgo "github.com/graph-gophers/graphql-go"
	sqlf "github.com/keegancsmith/sqlf"
	graphqlbackend "github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockCodeMonitorStore is a mock implementation of the CodeMonitorStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codemonitors) used
// for unit testing.
type MockCodeMonitorStore struct {
	// ActionEmailByIDInt64Func is an instance of a mock function object
	// controlling the behavior of the method ActionEmailByIDInt64.
	ActionEmailByIDInt64Func *CodeMonitorStoreActionEmailByIDInt64Func
	// ActionJobForIDIntFunc is an instance of a mock function object
	// controlling the behavior of the method ActionJobForIDInt.
	ActionJobForIDIntFunc *CodeMonitorStoreActionJobForIDIntFunc
	// AllRecipientsForEmailIDInt64Func is an instance of a mock function
	// object controlling the behavior of the method
	// AllRecipientsForEmailIDInt64.
	AllRecipientsForEmailIDInt64Func *CodeMonitorStoreAllRecipientsForEmailIDInt64Func
	// ClockFunc is an instance of a mock function object controlling the
	// behavior of the method Clock.
	ClockFunc *CodeMonitorStoreClockFunc
	// CountActionJobsFunc is an instance of a mock function object
	// controlling the behavior of the method CountActionJobs.
	CountActionJobsFunc *CodeMonitorStoreCountActionJobsFunc
	// CreateActionEmailFunc is an instance of a mock function object
	// controlling the behavior of the method CreateActionEmail.
	CreateActionEmailFunc *CodeMonitorStoreCreateActionEmailFunc
	// CreateActionsFunc is an instance of a mock function object
	// controlling the behavior of the method CreateActions.
	CreateActionsFunc *CodeMonitorStoreCreateActionsFunc
	// CreateCodeMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method CreateCodeMonitor.
	CreateCodeMonitorFunc *CodeMonitorStoreCreateCodeMonitorFunc
	// CreateMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method CreateMonitor.
	CreateMonitorFunc *CodeMonitorStoreCreateMonitorFunc
	// CreateRecipientsFunc is an instance of a mock function object
	// controlling the behavior of the method CreateRecipients.
	CreateRecipientsFunc *CodeMonitorStoreCreateRecipientsFunc
	// CreateTriggerQueryFunc is an instance of a mock function object
	// controlling the behavior of the method CreateTriggerQuery.
	CreateTriggerQueryFunc *CodeMonitorStoreCreateTriggerQueryFunc
	// DeleteActionsInt64Func is an instance of a mock function object
	// controlling the behavior of the method DeleteActionsInt64.
	DeleteActionsInt64Func *CodeMonitorStoreDeleteActionsInt64Func
	// DeleteMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteMonitor.
	DeleteMonitorFunc *CodeMonitorStoreDeleteMonitorFunc
	// DeleteObsoleteJobLogsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteObsoleteJobLogs.
	DeleteObsoleteJobLogsFunc *CodeMonitorStoreDeleteObsoleteJobLogsFunc
	// DeleteOldJobLogsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOldJobLogs.
	DeleteOldJobLogsFunc *CodeMonitorStoreDeleteOldJobLogsFunc
	// DeleteRecipientsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteRecipients.
	DeleteRecipientsFunc *CodeMonitorStoreDeleteRecipientsFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *CodeMonitorStoreDoneFunc
	// EnqueueActionEmailsForQueryIDInt64Func is an instance of a mock
	// function object controlling the behavior of the method
	// EnqueueActionEmailsForQueryIDInt64.
	EnqueueActionEmailsForQueryIDInt64Func *CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func
	// EnqueueTriggerQueriesFunc is an instance of a mock function object
	// controlling the behavior of the method EnqueueTriggerQueries.
	EnqueueTriggerQueriesFunc *CodeMonitorStoreEnqueueTriggerQueriesFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *CodeMonitorStoreExecFunc
	// GetActionJobMetadataFunc is an instance of a mock function object
	// controlling the behavior of the method GetActionJobMetadata.
	GetActionJobMetadataFunc *CodeMonitorStoreGetActionJobMetadataFunc
	// GetEventsForQueryIDInt64Func is an instance of a mock function object
	// controlling the behavior of the method GetEventsForQueryIDInt64.
	GetEventsForQueryIDInt64Func *CodeMonitorStoreGetEventsForQueryIDInt64Func
	// GetQueryByRecordIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetQueryByRecordID.
	GetQueryByRecordIDFunc *CodeMonitorStoreGetQueryByRecordIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *CodeMonitorStoreHandleFunc
	// ListActionJobsFunc is an instance of a mock function object
	// controlling the behavior of the method ListActionJobs.
	ListActionJobsFunc *CodeMonitorStoreListActionJobsFunc
	// ListEmailActionsFunc is an instance of a mock function object
	// controlling the behavior of the method ListEmailActions.
	ListEmailActionsFunc *CodeMonitorStoreListEmailActionsFunc
	// LogSearchFunc is an instance of a mock function object controlling
	// the behavior of the method LogSearch.
	LogSearchFunc *CodeMonitorStoreLogSearchFunc
	// MonitorByIDInt64Func is an instance of a mock function object
	// controlling the behavior of the method MonitorByIDInt64.
	MonitorByIDInt64Func *CodeMonitorStoreMonitorByIDInt64Func
	// MonitorsFunc is an instance of a mock function object controlling the
	// behavior of the method Monitors.
	MonitorsFunc *CodeMonitorStoreMonitorsFunc
	// NowFunc is an instance of a mock function object controlling the
	// behavior of the method Now.
	NowFunc *CodeMonitorStoreNowFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *CodeMonitorStoreQueryFunc
	// RecipientsForEmailIDInt64Func is an instance of a mock function
	// object controlling the behavior of the method
	// RecipientsForEmailIDInt64.
	RecipientsForEmailIDInt64Func *CodeMonitorStoreRecipientsForEmailIDInt64Func
	// ResetTriggerQueryTimestampsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ResetTriggerQueryTimestamps.
	ResetTriggerQueryTimestampsFunc *CodeMonitorStoreResetTriggerQueryTimestampsFunc
	// SetTriggerQueryNextRunFunc is an instance of a mock function object
	// controlling the behavior of the method SetTriggerQueryNextRun.
	SetTriggerQueryNextRunFunc *CodeMonitorStoreSetTriggerQueryNextRunFunc
	// ToggleMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method ToggleMonitor.
	ToggleMonitorFunc *CodeMonitorStoreToggleMonitorFunc
	// TotalCountActionEmailsFunc is an instance of a mock function object
	// controlling the behavior of the method TotalCountActionEmails.
	TotalCountActionEmailsFunc *CodeMonitorStoreTotalCountActionEmailsFunc
	// TotalCountEventsForQueryIDInt64Func is an instance of a mock function
	// object controlling the behavior of the method
	// TotalCountEventsForQueryIDInt64.
	TotalCountEventsForQueryIDInt64Func *CodeMonitorStoreTotalCountEventsForQueryIDInt64Func
	// TotalCountMonitorsFunc is an instance of a mock function object
	// controlling the behavior of the method TotalCountMonitors.
	TotalCountMonitorsFunc *CodeMonitorStoreTotalCountMonitorsFunc
	// TotalCountRecipientsFunc is an instance of a mock function object
	// controlling the behavior of the method TotalCountRecipients.
	TotalCountRecipientsFunc *CodeMonitorStoreTotalCountRecipientsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *CodeMonitorStoreTransactFunc
	// TriggerQueryByMonitorIDInt64Func is an instance of a mock function
	// object controlling the behavior of the method
	// TriggerQueryByMonitorIDInt64.
	TriggerQueryByMonitorIDInt64Func *CodeMonitorStoreTriggerQueryByMonitorIDInt64Func
	// UpdateActionEmailFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateActionEmail.
	UpdateActionEmailFunc *CodeMonitorStoreUpdateActionEmailFunc
	// UpdateMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateMonitor.
	UpdateMonitorFunc *CodeMonitorStoreUpdateMonitorFunc
	// UpdateTriggerQueryFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateTriggerQuery.
	UpdateTriggerQueryFunc *CodeMonitorStoreUpdateTriggerQueryFunc
}

// NewMockCodeMonitorStore creates a new mock of the CodeMonitorStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockCodeMonitorStore() *MockCodeMonitorStore {
	return &MockCodeMonitorStore{
		ActionEmailByIDInt64Func: &CodeMonitorStoreActionEmailByIDInt64Func{
			defaultHook: func(context.Context, int64) (*MonitorEmail, error) {
				return nil, nil
			},
		},
		ActionJobForIDIntFunc: &CodeMonitorStoreActionJobForIDIntFunc{
			defaultHook: func(context.Context, int) (*ActionJob, error) {
				return nil, nil
			},
		},
		AllRecipientsForEmailIDInt64Func: &CodeMonitorStoreAllRecipientsForEmailIDInt64Func{
			defaultHook: func(context.Context, int64) ([]*Recipient, error) {
				return nil, nil
			},
		},
		ClockFunc: &CodeMonitorStoreClockFunc{
			defaultHook: func() func() time.Time {
				return nil
			},
		},
		CountActionJobsFunc: &CodeMonitorStoreCountActionJobsFunc{
			defaultHook: func(context.Context, ListActionJobsOpts) (int, error) {
				return 0, nil
			},
		},
		CreateActionEmailFunc: &CodeMonitorStoreCreateActionEmailFunc{
			defaultHook: func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*MonitorEmail, error) {
				return nil, nil
			},
		},
		CreateActionsFunc: &CodeMonitorStoreCreateActionsFunc{
			defaultHook: func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error {
				return nil
			},
		},
		CreateCodeMonitorFunc: &CodeMonitorStoreCreateCodeMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
				return nil, nil
			},
		},
		CreateMonitorFunc: &CodeMonitorStoreCreateMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
				return nil, nil
			},
		},
		CreateRecipientsFunc: &CodeMonitorStoreCreateRecipientsFunc{
			defaultHook: func(context.Context, []graphqlgo.ID, int64) error {
				return nil
			},
		},
		CreateTriggerQueryFunc: &CodeMonitorStoreCreateTriggerQueryFunc{
			defaultHook: func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error {
				return nil
			},
		},
		DeleteActionsInt64Func: &CodeMonitorStoreDeleteActionsInt64Func{
			defaultHook: func(context.Context, []int64, int64) error {
				return nil
			},
		},
		DeleteMonitorFunc: &CodeMonitorStoreDeleteMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error {
				return nil
			},
		},
		DeleteObsoleteJobLogsFunc: &CodeMonitorStoreDeleteObsoleteJobLogsFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		DeleteOldJobLogsFunc: &CodeMonitorStoreDeleteOldJobLogsFunc{
			defaultHook: func(context.Context, int) error {
				return nil
			},
		},
		DeleteRecipientsFunc: &CodeMonitorStoreDeleteRecipientsFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		DoneFunc: &CodeMonitorStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		EnqueueActionEmailsForQueryIDInt64Func: &CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func{
			defaultHook: func(context.Context, int64, int) error {
				return nil
			},
		},
		EnqueueTriggerQueriesFunc: &CodeMonitorStoreEnqueueTriggerQueriesFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		ExecFunc: &CodeMonitorStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				return nil
			},
		},
		GetActionJobMetadataFunc: &CodeMonitorStoreGetActionJobMetadataFunc{
			defaultHook: func(context.Context, int) (*ActionJobMetadata, error) {
				return nil, nil
			},
		},
		GetEventsForQueryIDInt64Func: &CodeMonitorStoreGetEventsForQueryIDInt64Func{
			defaultHook: func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJobs, error) {
				return nil, nil
			},
		},
		GetQueryByRecordIDFunc: &CodeMonitorStoreGetQueryByRecordIDFunc{
			defaultHook: func(context.Context, int) (*MonitorQuery, error) {
				return nil, nil
			},
		},
		HandleFunc: &CodeMonitorStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListActionJobsFunc: &CodeMonitorStoreListActionJobsFunc{
			defaultHook: func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
				return nil, nil
			},
		},
		ListEmailActionsFunc: &CodeMonitorStoreListEmailActionsFunc{
			defaultHook: func(context.Context, ListActionsOpts) ([]*MonitorEmail, error) {
				return nil, nil
			},
		},
		LogSearchFunc: &CodeMonitorStoreLogSearchFunc{
			defaultHook: func(context.Context, string, int, int) error {
				return nil
			},
		},
		MonitorByIDInt64Func: &CodeMonitorStoreMonitorByIDInt64Func{
			defaultHook: func(context.Context, int64) (*Monitor, error) {
				return nil, nil
			},
		},
		MonitorsFunc: &CodeMonitorStoreMonitorsFunc{
			defaultHook: func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
				return nil, nil
			},
		},
		NowFunc: &CodeMonitorStoreNowFunc{
			defaultHook: func() time.Time {
				return time.Time{}
			},
		},
		QueryFunc: &CodeMonitorStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (*sql.Rows, error) {
				return nil, nil
			},
		},
		RecipientsForEmailIDInt64Func: &CodeMonitorStoreRecipientsForEmailIDInt64Func{
			defaultHook: func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
				return nil, nil
			},
		},
		ResetTriggerQueryTimestampsFunc: &CodeMonitorStoreResetTriggerQueryTimestampsFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		SetTriggerQueryNextRunFunc: &CodeMonitorStoreSetTriggerQueryNextRunFunc{
			defaultHook: func(context.Context, int64, time.Time, time.Time) error {
				return nil
			},
		},
		ToggleMonitorFunc: &CodeMonitorStoreToggleMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
				return nil, nil
			},
		},
		TotalCountActionEmailsFunc: &CodeMonitorStoreTotalCountActionEmailsFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				return 0, nil
			},
		},
		TotalCountEventsForQueryIDInt64Func: &CodeMonitorStoreTotalCountEventsForQueryIDInt64Func{
			defaultHook: func(context.Context, int64) (int32, error) {
				return 0, nil
			},
		},
		TotalCountMonitorsFunc: &CodeMonitorStoreTotalCountMonitorsFunc{
			defaultHook: func(context.Context, int32) (int32, error) {
				return 0, nil
			},
		},
		TotalCountRecipientsFunc: &CodeMonitorStoreTotalCountRecipientsFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				return 0, nil
			},
		},
		TransactFunc: &CodeMonitorStoreTransactFunc{
			defaultHook: func(context.Context) (CodeMonitorStore, error) {
				return nil, nil
			},
		},
		TriggerQueryByMonitorIDInt64Func: &CodeMonitorStoreTriggerQueryByMonitorIDInt64Func{
			defaultHook: func(context.Context, int64) (*MonitorQuery, error) {
				return nil, nil
			},
		},
		UpdateActionEmailFunc: &CodeMonitorStoreUpdateActionEmailFunc{
			defaultHook: func(context.Context, int64, *graphqlbackend.EditActionArgs) (*MonitorEmail, error) {
				return nil, nil
			},
		},
		UpdateMonitorFunc: &CodeMonitorStoreUpdateMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
				return nil, nil
			},
		},
		UpdateTriggerQueryFunc: &CodeMonitorStoreUpdateTriggerQueryFunc{
			defaultHook: func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error {
				return nil
			},
		},
	}
}

// NewMockCodeMonitorStoreFrom creates a new mock of the
// MockCodeMonitorStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockCodeMonitorStoreFrom(i CodeMonitorStore) *MockCodeMonitorStore {
	return &MockCodeMonitorStore{
		ActionEmailByIDInt64Func: &CodeMonitorStoreActionEmailByIDInt64Func{
			defaultHook: i.ActionEmailByIDInt64,
		},
		ActionJobForIDIntFunc: &CodeMonitorStoreActionJobForIDIntFunc{
			defaultHook: i.ActionJobForIDInt,
		},
		AllRecipientsForEmailIDInt64Func: &CodeMonitorStoreAllRecipientsForEmailIDInt64Func{
			defaultHook: i.AllRecipientsForEmailIDInt64,
		},
		ClockFunc: &CodeMonitorStoreClockFunc{
			defaultHook: i.Clock,
		},
		CountActionJobsFunc: &CodeMonitorStoreCountActionJobsFunc{
			defaultHook: i.CountActionJobs,
		},
		CreateActionEmailFunc: &CodeMonitorStoreCreateActionEmailFunc{
			defaultHook: i.CreateActionEmail,
		},
		CreateActionsFunc: &CodeMonitorStoreCreateActionsFunc{
			defaultHook: i.CreateActions,
		},
		CreateCodeMonitorFunc: &CodeMonitorStoreCreateCodeMonitorFunc{
			defaultHook: i.CreateCodeMonitor,
		},
		CreateMonitorFunc: &CodeMonitorStoreCreateMonitorFunc{
			defaultHook: i.CreateMonitor,
		},
		CreateRecipientsFunc: &CodeMonitorStoreCreateRecipientsFunc{
			defaultHook: i.CreateRecipients,
		},
		CreateTriggerQueryFunc: &CodeMonitorStoreCreateTriggerQueryFunc{
			defaultHook: i.CreateTriggerQuery,
		},
		DeleteActionsInt64Func: &CodeMonitorStoreDeleteActionsInt64Func{
			defaultHook: i.DeleteActionsInt64,
		},
		DeleteMonitorFunc: &CodeMonitorStoreDeleteMonitorFunc{
			defaultHook: i.DeleteMonitor,
		},
		DeleteObsoleteJobLogsFunc: &CodeMonitorStoreDeleteObsoleteJobLogsFunc{
			defaultHook: i.DeleteObsoleteJobLogs,
		},
		DeleteOldJobLogsFunc: &CodeMonitorStoreDeleteOldJobLogsFunc{
			defaultHook: i.DeleteOldJobLogs,
		},
		DeleteRecipientsFunc: &CodeMonitorStoreDeleteRecipientsFunc{
			defaultHook: i.DeleteRecipients,
		},
		DoneFunc: &CodeMonitorStoreDoneFunc{
			defaultHook: i.Done,
		},
		EnqueueActionEmailsForQueryIDInt64Func: &CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func{
			defaultHook: i.EnqueueActionEmailsForQueryIDInt64,
		},
		EnqueueTriggerQueriesFunc: &CodeMonitorStoreEnqueueTriggerQueriesFunc{
			defaultHook: i.EnqueueTriggerQueries,
		},
		ExecFunc: &CodeMonitorStoreExecFunc{
			defaultHook: i.Exec,
		},
		GetActionJobMetadataFunc: &CodeMonitorStoreGetActionJobMetadataFunc{
			defaultHook: i.GetActionJobMetadata,
		},
		GetEventsForQueryIDInt64Func: &CodeMonitorStoreGetEventsForQueryIDInt64Func{
			defaultHook: i.GetEventsForQueryIDInt64,
		},
		GetQueryByRecordIDFunc: &CodeMonitorStoreGetQueryByRecordIDFunc{
			defaultHook: i.GetQueryByRecordID,
		},
		HandleFunc: &CodeMonitorStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListActionJobsFunc: &CodeMonitorStoreListActionJobsFunc{
			defaultHook: i.ListActionJobs,
		},
		ListEmailActionsFunc: &CodeMonitorStoreListEmailActionsFunc{
			defaultHook: i.ListEmailActions,
		},
		LogSearchFunc: &CodeMonitorStoreLogSearchFunc{
			defaultHook: i.LogSearch,
		},
		MonitorByIDInt64Func: &CodeMonitorStoreMonitorByIDInt64Func{
			defaultHook: i.MonitorByIDInt64,
		},
		MonitorsFunc: &CodeMonitorStoreMonitorsFunc{
			defaultHook: i.Monitors,
		},
		NowFunc: &CodeMonitorStoreNowFunc{
			defaultHook: i.Now,
		},
		QueryFunc: &CodeMonitorStoreQueryFunc{
			defaultHook: i.Query,
		},
		RecipientsForEmailIDInt64Func: &CodeMonitorStoreRecipientsForEmailIDInt64Func{
			defaultHook: i.RecipientsForEmailIDInt64,
		},
		ResetTriggerQueryTimestampsFunc: &CodeMonitorStoreResetTriggerQueryTimestampsFunc{
			defaultHook: i.ResetTriggerQueryTimestamps,
		},
		SetTriggerQueryNextRunFunc: &CodeMonitorStoreSetTriggerQueryNextRunFunc{
			defaultHook: i.SetTriggerQueryNextRun,
		},
		ToggleMonitorFunc: &CodeMonitorStoreToggleMonitorFunc{
			defaultHook: i.ToggleMonitor,
		},
		TotalCountActionEmailsFunc: &CodeMonitorStoreTotalCountActionEmailsFunc{
			defaultHook: i.TotalCountActionEmails,
		},
		TotalCountEventsForQueryIDInt64Func: &CodeMonitorStoreTotalCountEventsForQueryIDInt64Func{
			defaultHook: i.TotalCountEventsForQueryIDInt64,
		},
		TotalCountMonitorsFunc: &CodeMonitorStoreTotalCountMonitorsFunc{
			defaultHook: i.TotalCountMonitors,
		},
		TotalCountRecipientsFunc: &CodeMonitorStoreTotalCountRecipientsFunc{
			defaultHook: i.TotalCountRecipients,
		},
		TransactFunc: &CodeMonitorStoreTransactFunc{
			defaultHook: i.Transact,
		},
		TriggerQueryByMonitorIDInt64Func: &CodeMonitorStoreTriggerQueryByMonitorIDInt64Func{
			defaultHook: i.TriggerQueryByMonitorIDInt64,
		},
		UpdateActionEmailFunc: &CodeMonitorStoreUpdateActionEmailFunc{
			defaultHook: i.UpdateActionEmail,
		},
		UpdateMonitorFunc: &CodeMonitorStoreUpdateMonitorFunc{
			defaultHook: i.UpdateMonitor,
		},
		UpdateTriggerQueryFunc: &CodeMonitorStoreUpdateTriggerQueryFunc{
			defaultHook: i.UpdateTriggerQuery,
		},
	}
}

// CodeMonitorStoreActionEmailByIDInt64Func describes the behavior when the
// ActionEmailByIDInt64 method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreActionEmailByIDInt64Func struct {
	defaultHook func(context.Context, int64) (*MonitorEmail, error)
	hooks       []func(context.Context, int64) (*MonitorEmail, error)
	history     []CodeMonitorStoreActionEmailByIDInt64FuncCall
	mutex       sync.Mutex
}

// ActionEmailByIDInt64 delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ActionEmailByIDInt64(v0 context.Context, v1 int64) (*MonitorEmail, error) {
	r0, r1 := m.ActionEmailByIDInt64Func.nextHook()(v0, v1)
	m.ActionEmailByIDInt64Func.appendCall(CodeMonitorStoreActionEmailByIDInt64FuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ActionEmailByIDInt64
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreActionEmailByIDInt64Func) SetDefaultHook(hook func(context.Context, int64) (*MonitorEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ActionEmailByIDInt64 method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreActionEmailByIDInt64Func) PushHook(hook func(context.Context, int64) (*MonitorEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreActionEmailByIDInt64Func) SetDefaultReturn(r0 *MonitorEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*MonitorEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreActionEmailByIDInt64Func) PushReturn(r0 *MonitorEmail, r1 error) {
	f.PushHook(func(context.Context, int64) (*MonitorEmail, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreActionEmailByIDInt64Func) nextHook() func(context.Context, int64) (*MonitorEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreActionEmailByIDInt64Func) appendCall(r0 CodeMonitorStoreActionEmailByIDInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreActionEmailByIDInt64FuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreActionEmailByIDInt64Func) History() []CodeMonitorStoreActionEmailByIDInt64FuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreActionEmailByIDInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreActionEmailByIDInt64FuncCall is an object that describes
// an invocation of method ActionEmailByIDInt64 on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreActionEmailByIDInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *MonitorEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreActionEmailByIDInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreActionEmailByIDInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreActionJobForIDIntFunc describes the behavior when the
// ActionJobForIDInt method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreActionJobForIDIntFunc struct {
	defaultHook func(context.Context, int) (*ActionJob, error)
	hooks       []func(context.Context, int) (*ActionJob, error)
	history     []CodeMonitorStoreActionJobForIDIntFuncCall
	mutex       sync.Mutex
}

// ActionJobForIDInt delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ActionJobForIDInt(v0 context.Context, v1 int) (*ActionJob, error) {
	r0, r1 := m.ActionJobForIDIntFunc.nextHook()(v0, v1)
	m.ActionJobForIDIntFunc.appendCall(CodeMonitorStoreActionJobForIDIntFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ActionJobForIDInt
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreActionJobForIDIntFunc) SetDefaultHook(hook func(context.Context, int) (*ActionJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ActionJobForIDInt method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreActionJobForIDIntFunc) PushHook(hook func(context.Context, int) (*ActionJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreActionJobForIDIntFunc) SetDefaultReturn(r0 *ActionJob, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*ActionJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreActionJobForIDIntFunc) PushReturn(r0 *ActionJob, r1 error) {
	f.PushHook(func(context.Context, int) (*ActionJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreActionJobForIDIntFunc) nextHook() func(context.Context, int) (*ActionJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreActionJobForIDIntFunc) appendCall(r0 CodeMonitorStoreActionJobForIDIntFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreActionJobForIDIntFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreActionJobForIDIntFunc) History() []CodeMonitorStoreActionJobForIDIntFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreActionJobForIDIntFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreActionJobForIDIntFuncCall is an object that describes an
// invocation of method ActionJobForIDInt on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreActionJobForIDIntFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *ActionJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreActionJobForIDIntFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreActionJobForIDIntFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreAllRecipientsForEmailIDInt64Func describes the behavior
// when the AllRecipientsForEmailIDInt64 method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreAllRecipientsForEmailIDInt64Func struct {
	defaultHook func(context.Context, int64) ([]*Recipient, error)
	hooks       []func(context.Context, int64) ([]*Recipient, error)
	history     []CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall
	mutex       sync.Mutex
}

// AllRecipientsForEmailIDInt64 delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) AllRecipientsForEmailIDInt64(v0 context.Context, v1 int64) ([]*Recipient, error) {
	r0, r1 := m.AllRecipientsForEmailIDInt64Func.nextHook()(v0, v1)
	m.AllRecipientsForEmailIDInt64Func.appendCall(CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AllRecipientsForEmailIDInt64 method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreAllRecipientsForEmailIDInt64Func) SetDefaultHook(hook func(context.Context, int64) ([]*Recipient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AllRecipientsForEmailIDInt64 method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreAllRecipientsForEmailIDInt64Func) PushHook(hook func(context.Context, int64) ([]*Recipient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreAllRecipientsForEmailIDInt64Func) SetDefaultReturn(r0 []*Recipient, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) ([]*Recipient, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreAllRecipientsForEmailIDInt64Func) PushReturn(r0 []*Recipient, r1 error) {
	f.PushHook(func(context.Context, int64) ([]*Recipient, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreAllRecipientsForEmailIDInt64Func) nextHook() func(context.Context, int64) ([]*Recipient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreAllRecipientsForEmailIDInt64Func) appendCall(r0 CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall objects describing
// the invocations of this function.
func (f *CodeMonitorStoreAllRecipientsForEmailIDInt64Func) History() []CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall is an object that
// describes an invocation of method AllRecipientsForEmailIDInt64 on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Recipient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreAllRecipientsForEmailIDInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreClockFunc describes the behavior when the Clock method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreClockFunc struct {
	defaultHook func() func() time.Time
	hooks       []func() func() time.Time
	history     []CodeMonitorStoreClockFuncCall
	mutex       sync.Mutex
}

// Clock delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Clock() func() time.Time {
	r0 := m.ClockFunc.nextHook()()
	m.ClockFunc.appendCall(CodeMonitorStoreClockFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Clock method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreClockFunc) SetDefaultHook(hook func() func() time.Time) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Clock method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreClockFunc) PushHook(hook func() func() time.Time) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreClockFunc) SetDefaultReturn(r0 func() time.Time) {
	f.SetDefaultHook(func() func() time.Time {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreClockFunc) PushReturn(r0 func() time.Time) {
	f.PushHook(func() func() time.Time {
		return r0
	})
}

func (f *CodeMonitorStoreClockFunc) nextHook() func() func() time.Time {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreClockFunc) appendCall(r0 CodeMonitorStoreClockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreClockFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreClockFunc) History() []CodeMonitorStoreClockFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreClockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreClockFuncCall is an object that describes an invocation
// of method Clock on an instance of MockCodeMonitorStore.
type CodeMonitorStoreClockFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 func() time.Time
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreClockFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreClockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreCountActionJobsFunc describes the behavior when the
// CountActionJobs method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCountActionJobsFunc struct {
	defaultHook func(context.Context, ListActionJobsOpts) (int, error)
	hooks       []func(context.Context, ListActionJobsOpts) (int, error)
	history     []CodeMonitorStoreCountActionJobsFuncCall
	mutex       sync.Mutex
}

// CountActionJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountActionJobs(v0 context.Context, v1 ListActionJobsOpts) (int, error) {
	r0, r1 := m.CountActionJobsFunc.nextHook()(v0, v1)
	m.CountActionJobsFunc.appendCall(CodeMonitorStoreCountActionJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountActionJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCountActionJobsFunc) SetDefaultHook(hook func(context.Context, ListActionJobsOpts) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountActionJobs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCountActionJobsFunc) PushHook(hook func(context.Context, ListActionJobsOpts) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCountActionJobsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionJobsOpts) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCountActionJobsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ListActionJobsOpts) (int, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountActionJobsFunc) nextHook() func(context.Context, ListActionJobsOpts) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountActionJobsFunc) appendCall(r0 CodeMonitorStoreCountActionJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCountActionJobsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCountActionJobsFunc) History() []CodeMonitorStoreCountActionJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountActionJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountActionJobsFuncCall is an object that describes an
// invocation of method CountActionJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountActionJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionJobsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountActionJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountActionJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateActionEmailFunc describes the behavior when the
// CreateActionEmail method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateActionEmailFunc struct {
	defaultHook func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*MonitorEmail, error)
	hooks       []func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*MonitorEmail, error)
	history     []CodeMonitorStoreCreateActionEmailFuncCall
	mutex       sync.Mutex
}

// CreateActionEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateActionEmail(v0 context.Context, v1 int64, v2 *graphqlbackend.CreateActionArgs) (*MonitorEmail, error) {
	r0, r1 := m.CreateActionEmailFunc.nextHook()(v0, v1, v2)
	m.CreateActionEmailFunc.appendCall(CodeMonitorStoreCreateActionEmailFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateActionEmail
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateActionEmailFunc) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*MonitorEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateActionEmail method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateActionEmailFunc) PushHook(hook func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*MonitorEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateActionEmailFunc) SetDefaultReturn(r0 *MonitorEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*MonitorEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateActionEmailFunc) PushReturn(r0 *MonitorEmail, r1 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*MonitorEmail, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateActionEmailFunc) nextHook() func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*MonitorEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateActionEmailFunc) appendCall(r0 CodeMonitorStoreCreateActionEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateActionEmailFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateActionEmailFunc) History() []CodeMonitorStoreCreateActionEmailFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateActionEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateActionEmailFuncCall is an object that describes an
// invocation of method CreateActionEmail on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateActionEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.CreateActionArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *MonitorEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateActionEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateActionEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateActionsFunc describes the behavior when the
// CreateActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateActionsFunc struct {
	defaultHook func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error
	hooks       []func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error
	history     []CodeMonitorStoreCreateActionsFuncCall
	mutex       sync.Mutex
}

// CreateActions delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateActions(v0 context.Context, v1 []*graphqlbackend.CreateActionArgs, v2 int64) error {
	r0 := m.CreateActionsFunc.nextHook()(v0, v1, v2)
	m.CreateActionsFunc.appendCall(CodeMonitorStoreCreateActionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateActions method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreCreateActionsFunc) SetDefaultHook(hook func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateActions method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreCreateActionsFunc) PushHook(hook func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateActionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateActionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreCreateActionsFunc) nextHook() func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateActionsFunc) appendCall(r0 CodeMonitorStoreCreateActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateActionsFunc) History() []CodeMonitorStoreCreateActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateActionsFuncCall is an object that describes an
// invocation of method CreateActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*graphqlbackend.CreateActionArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreCreateCodeMonitorFunc describes the behavior when the
// CreateCodeMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateCodeMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreCreateCodeMonitorFuncCall
	mutex       sync.Mutex
}

// CreateCodeMonitor delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateCodeMonitor(v0 context.Context, v1 *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
	r0, r1 := m.CreateCodeMonitorFunc.nextHook()(v0, v1)
	m.CreateCodeMonitorFunc.appendCall(CodeMonitorStoreCreateCodeMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateCodeMonitor
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCodeMonitor method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateCodeMonitorFunc) nextHook() func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateCodeMonitorFunc) appendCall(r0 CodeMonitorStoreCreateCodeMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateCodeMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) History() []CodeMonitorStoreCreateCodeMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateCodeMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateCodeMonitorFuncCall is an object that describes an
// invocation of method CreateCodeMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateCodeMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.CreateCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateCodeMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateCodeMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateMonitorFunc describes the behavior when the
// CreateMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreCreateMonitorFuncCall
	mutex       sync.Mutex
}

// CreateMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateMonitor(v0 context.Context, v1 *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
	r0, r1 := m.CreateMonitorFunc.nextHook()(v0, v1)
	m.CreateMonitorFunc.appendCall(CodeMonitorStoreCreateMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreCreateMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreCreateMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateMonitorFunc) nextHook() func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateMonitorFunc) appendCall(r0 CodeMonitorStoreCreateMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateMonitorFunc) History() []CodeMonitorStoreCreateMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateMonitorFuncCall is an object that describes an
// invocation of method CreateMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.CreateMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateRecipientsFunc describes the behavior when the
// CreateRecipients method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateRecipientsFunc struct {
	defaultHook func(context.Context, []graphqlgo.ID, int64) error
	hooks       []func(context.Context, []graphqlgo.ID, int64) error
	history     []CodeMonitorStoreCreateRecipientsFuncCall
	mutex       sync.Mutex
}

// CreateRecipients delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateRecipients(v0 context.Context, v1 []graphqlgo.ID, v2 int64) error {
	r0 := m.CreateRecipientsFunc.nextHook()(v0, v1, v2)
	m.CreateRecipientsFunc.appendCall(CodeMonitorStoreCreateRecipientsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateRecipients
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateRecipientsFunc) SetDefaultHook(hook func(context.Context, []graphqlgo.ID, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateRecipients method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateRecipientsFunc) PushHook(hook func(context.Context, []graphqlgo.ID, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateRecipientsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []graphqlgo.ID, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateRecipientsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []graphqlgo.ID, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreCreateRecipientsFunc) nextHook() func(context.Context, []graphqlgo.ID, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateRecipientsFunc) appendCall(r0 CodeMonitorStoreCreateRecipientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateRecipientsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateRecipientsFunc) History() []CodeMonitorStoreCreateRecipientsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateRecipientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateRecipientsFuncCall is an object that describes an
// invocation of method CreateRecipients on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateRecipientsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []graphqlgo.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateRecipientsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateRecipientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreCreateTriggerQueryFunc describes the behavior when the
// CreateTriggerQuery method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateTriggerQueryFunc struct {
	defaultHook func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error
	hooks       []func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error
	history     []CodeMonitorStoreCreateTriggerQueryFuncCall
	mutex       sync.Mutex
}

// CreateTriggerQuery delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateTriggerQuery(v0 context.Context, v1 int64, v2 *graphqlbackend.CreateTriggerArgs) error {
	r0 := m.CreateTriggerQueryFunc.nextHook()(v0, v1, v2)
	m.CreateTriggerQueryFunc.appendCall(CodeMonitorStoreCreateTriggerQueryFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateTriggerQuery
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateTriggerQueryFunc) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateTriggerQuery method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateTriggerQueryFunc) PushHook(hook func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateTriggerQueryFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateTriggerQueryFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error {
		return r0
	})
}

func (f *CodeMonitorStoreCreateTriggerQueryFunc) nextHook() func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateTriggerQueryFunc) appendCall(r0 CodeMonitorStoreCreateTriggerQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateTriggerQueryFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateTriggerQueryFunc) History() []CodeMonitorStoreCreateTriggerQueryFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateTriggerQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateTriggerQueryFuncCall is an object that describes an
// invocation of method CreateTriggerQuery on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateTriggerQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.CreateTriggerArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateTriggerQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateTriggerQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteActionsInt64Func describes the behavior when the
// DeleteActionsInt64 method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteActionsInt64Func struct {
	defaultHook func(context.Context, []int64, int64) error
	hooks       []func(context.Context, []int64, int64) error
	history     []CodeMonitorStoreDeleteActionsInt64FuncCall
	mutex       sync.Mutex
}

// DeleteActionsInt64 delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteActionsInt64(v0 context.Context, v1 []int64, v2 int64) error {
	r0 := m.DeleteActionsInt64Func.nextHook()(v0, v1, v2)
	m.DeleteActionsInt64Func.appendCall(CodeMonitorStoreDeleteActionsInt64FuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteActionsInt64
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteActionsInt64Func) SetDefaultHook(hook func(context.Context, []int64, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteActionsInt64 method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteActionsInt64Func) PushHook(hook func(context.Context, []int64, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteActionsInt64Func) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int64, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteActionsInt64Func) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int64, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteActionsInt64Func) nextHook() func(context.Context, []int64, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteActionsInt64Func) appendCall(r0 CodeMonitorStoreDeleteActionsInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteActionsInt64FuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteActionsInt64Func) History() []CodeMonitorStoreDeleteActionsInt64FuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteActionsInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteActionsInt64FuncCall is an object that describes an
// invocation of method DeleteActionsInt64 on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteActionsInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteActionsInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteActionsInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteMonitorFunc describes the behavior when the
// DeleteMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error
	hooks       []func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error
	history     []CodeMonitorStoreDeleteMonitorFuncCall
	mutex       sync.Mutex
}

// DeleteMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteMonitor(v0 context.Context, v1 *graphqlbackend.DeleteCodeMonitorArgs) error {
	r0 := m.DeleteMonitorFunc.nextHook()(v0, v1)
	m.DeleteMonitorFunc.appendCall(CodeMonitorStoreDeleteMonitorFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreDeleteMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreDeleteMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteMonitorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteMonitorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteMonitorFunc) nextHook() func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteMonitorFunc) appendCall(r0 CodeMonitorStoreDeleteMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteMonitorFunc) History() []CodeMonitorStoreDeleteMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteMonitorFuncCall is an object that describes an
// invocation of method DeleteMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.DeleteCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteObsoleteJobLogsFunc describes the behavior when the
// DeleteObsoleteJobLogs method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreDeleteObsoleteJobLogsFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []CodeMonitorStoreDeleteObsoleteJobLogsFuncCall
	mutex       sync.Mutex
}

// DeleteObsoleteJobLogs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteObsoleteJobLogs(v0 context.Context) error {
	r0 := m.DeleteObsoleteJobLogsFunc.nextHook()(v0)
	m.DeleteObsoleteJobLogsFunc.appendCall(CodeMonitorStoreDeleteObsoleteJobLogsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteObsoleteJobLogs method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreDeleteObsoleteJobLogsFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteObsoleteJobLogs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteObsoleteJobLogsFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteObsoleteJobLogsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteObsoleteJobLogsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteObsoleteJobLogsFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteObsoleteJobLogsFunc) appendCall(r0 CodeMonitorStoreDeleteObsoleteJobLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreDeleteObsoleteJobLogsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreDeleteObsoleteJobLogsFunc) History() []CodeMonitorStoreDeleteObsoleteJobLogsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteObsoleteJobLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteObsoleteJobLogsFuncCall is an object that describes
// an invocation of method DeleteObsoleteJobLogs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteObsoleteJobLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteObsoleteJobLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteObsoleteJobLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteOldJobLogsFunc describes the behavior when the
// DeleteOldJobLogs method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteOldJobLogsFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []CodeMonitorStoreDeleteOldJobLogsFuncCall
	mutex       sync.Mutex
}

// DeleteOldJobLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteOldJobLogs(v0 context.Context, v1 int) error {
	r0 := m.DeleteOldJobLogsFunc.nextHook()(v0, v1)
	m.DeleteOldJobLogsFunc.appendCall(CodeMonitorStoreDeleteOldJobLogsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteOldJobLogs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteOldJobLogsFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOldJobLogs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteOldJobLogsFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteOldJobLogsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteOldJobLogsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteOldJobLogsFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteOldJobLogsFunc) appendCall(r0 CodeMonitorStoreDeleteOldJobLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteOldJobLogsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteOldJobLogsFunc) History() []CodeMonitorStoreDeleteOldJobLogsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteOldJobLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteOldJobLogsFuncCall is an object that describes an
// invocation of method DeleteOldJobLogs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteOldJobLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteOldJobLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteOldJobLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteRecipientsFunc describes the behavior when the
// DeleteRecipients method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteRecipientsFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []CodeMonitorStoreDeleteRecipientsFuncCall
	mutex       sync.Mutex
}

// DeleteRecipients delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteRecipients(v0 context.Context, v1 int64) error {
	r0 := m.DeleteRecipientsFunc.nextHook()(v0, v1)
	m.DeleteRecipientsFunc.appendCall(CodeMonitorStoreDeleteRecipientsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteRecipients
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteRecipientsFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteRecipients method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteRecipientsFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteRecipientsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteRecipientsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteRecipientsFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteRecipientsFunc) appendCall(r0 CodeMonitorStoreDeleteRecipientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteRecipientsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteRecipientsFunc) History() []CodeMonitorStoreDeleteRecipientsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteRecipientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteRecipientsFuncCall is an object that describes an
// invocation of method DeleteRecipients on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteRecipientsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteRecipientsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteRecipientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDoneFunc describes the behavior when the Done method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []CodeMonitorStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(CodeMonitorStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *CodeMonitorStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDoneFunc) appendCall(r0 CodeMonitorStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreDoneFunc) History() []CodeMonitorStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockCodeMonitorStore.
type CodeMonitorStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func describes the
// behavior when the EnqueueActionEmailsForQueryIDInt64 method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func struct {
	defaultHook func(context.Context, int64, int) error
	hooks       []func(context.Context, int64, int) error
	history     []CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall
	mutex       sync.Mutex
}

// EnqueueActionEmailsForQueryIDInt64 delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) EnqueueActionEmailsForQueryIDInt64(v0 context.Context, v1 int64, v2 int) error {
	r0 := m.EnqueueActionEmailsForQueryIDInt64Func.nextHook()(v0, v1, v2)
	m.EnqueueActionEmailsForQueryIDInt64Func.appendCall(CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// EnqueueActionEmailsForQueryIDInt64 method of the parent
// MockCodeMonitorStore instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func) SetDefaultHook(hook func(context.Context, int64, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueActionEmailsForQueryIDInt64 method of the parent
// MockCodeMonitorStore instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func) PushHook(hook func(context.Context, int64, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, int) error {
		return r0
	})
}

func (f *CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func) nextHook() func(context.Context, int64, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func) appendCall(r0 CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64Func) History() []CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall is an object
// that describes an invocation of method EnqueueActionEmailsForQueryIDInt64
// on an instance of MockCodeMonitorStore.
type CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreEnqueueActionEmailsForQueryIDInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreEnqueueTriggerQueriesFunc describes the behavior when the
// EnqueueTriggerQueries method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreEnqueueTriggerQueriesFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []CodeMonitorStoreEnqueueTriggerQueriesFuncCall
	mutex       sync.Mutex
}

// EnqueueTriggerQueries delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) EnqueueTriggerQueries(v0 context.Context) error {
	r0 := m.EnqueueTriggerQueriesFunc.nextHook()(v0)
	m.EnqueueTriggerQueriesFunc.appendCall(CodeMonitorStoreEnqueueTriggerQueriesFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// EnqueueTriggerQueries method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreEnqueueTriggerQueriesFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueTriggerQueries method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreEnqueueTriggerQueriesFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreEnqueueTriggerQueriesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreEnqueueTriggerQueriesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *CodeMonitorStoreEnqueueTriggerQueriesFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreEnqueueTriggerQueriesFunc) appendCall(r0 CodeMonitorStoreEnqueueTriggerQueriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreEnqueueTriggerQueriesFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreEnqueueTriggerQueriesFunc) History() []CodeMonitorStoreEnqueueTriggerQueriesFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreEnqueueTriggerQueriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreEnqueueTriggerQueriesFuncCall is an object that describes
// an invocation of method EnqueueTriggerQueries on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreEnqueueTriggerQueriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreEnqueueTriggerQueriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreEnqueueTriggerQueriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreExecFunc describes the behavior when the Exec method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreExecFunc struct {
	defaultHook func(context.Context, *sqlf.Query) error
	hooks       []func(context.Context, *sqlf.Query) error
	history     []CodeMonitorStoreExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Exec(v0 context.Context, v1 *sqlf.Query) error {
	r0 := m.ExecFunc.nextHook()(v0, v1)
	m.ExecFunc.appendCall(CodeMonitorStoreExecFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreExecFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreExecFunc) PushHook(hook func(context.Context, *sqlf.Query) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreExecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreExecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

func (f *CodeMonitorStoreExecFunc) nextHook() func(context.Context, *sqlf.Query) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreExecFunc) appendCall(r0 CodeMonitorStoreExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreExecFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreExecFunc) History() []CodeMonitorStoreExecFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreExecFuncCall is an object that describes an invocation of
// method Exec on an instance of MockCodeMonitorStore.
type CodeMonitorStoreExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreExecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreGetActionJobMetadataFunc describes the behavior when the
// GetActionJobMetadata method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreGetActionJobMetadataFunc struct {
	defaultHook func(context.Context, int) (*ActionJobMetadata, error)
	hooks       []func(context.Context, int) (*ActionJobMetadata, error)
	history     []CodeMonitorStoreGetActionJobMetadataFuncCall
	mutex       sync.Mutex
}

// GetActionJobMetadata delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetActionJobMetadata(v0 context.Context, v1 int) (*ActionJobMetadata, error) {
	r0, r1 := m.GetActionJobMetadataFunc.nextHook()(v0, v1)
	m.GetActionJobMetadataFunc.appendCall(CodeMonitorStoreGetActionJobMetadataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetActionJobMetadata
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) SetDefaultHook(hook func(context.Context, int) (*ActionJobMetadata, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetActionJobMetadata method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) PushHook(hook func(context.Context, int) (*ActionJobMetadata, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) SetDefaultReturn(r0 *ActionJobMetadata, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*ActionJobMetadata, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) PushReturn(r0 *ActionJobMetadata, r1 error) {
	f.PushHook(func(context.Context, int) (*ActionJobMetadata, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetActionJobMetadataFunc) nextHook() func(context.Context, int) (*ActionJobMetadata, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetActionJobMetadataFunc) appendCall(r0 CodeMonitorStoreGetActionJobMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreGetActionJobMetadataFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) History() []CodeMonitorStoreGetActionJobMetadataFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetActionJobMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetActionJobMetadataFuncCall is an object that describes
// an invocation of method GetActionJobMetadata on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetActionJobMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *ActionJobMetadata
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetActionJobMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetActionJobMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetEventsForQueryIDInt64Func describes the behavior when
// the GetEventsForQueryIDInt64 method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreGetEventsForQueryIDInt64Func struct {
	defaultHook func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJobs, error)
	hooks       []func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJobs, error)
	history     []CodeMonitorStoreGetEventsForQueryIDInt64FuncCall
	mutex       sync.Mutex
}

// GetEventsForQueryIDInt64 delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetEventsForQueryIDInt64(v0 context.Context, v1 int64, v2 *graphqlbackend.ListEventsArgs) ([]*TriggerJobs, error) {
	r0, r1 := m.GetEventsForQueryIDInt64Func.nextHook()(v0, v1, v2)
	m.GetEventsForQueryIDInt64Func.appendCall(CodeMonitorStoreGetEventsForQueryIDInt64FuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetEventsForQueryIDInt64 method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreGetEventsForQueryIDInt64Func) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJobs, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEventsForQueryIDInt64 method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreGetEventsForQueryIDInt64Func) PushHook(hook func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJobs, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreGetEventsForQueryIDInt64Func) SetDefaultReturn(r0 []*TriggerJobs, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJobs, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreGetEventsForQueryIDInt64Func) PushReturn(r0 []*TriggerJobs, r1 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJobs, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetEventsForQueryIDInt64Func) nextHook() func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJobs, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetEventsForQueryIDInt64Func) appendCall(r0 CodeMonitorStoreGetEventsForQueryIDInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreGetEventsForQueryIDInt64FuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreGetEventsForQueryIDInt64Func) History() []CodeMonitorStoreGetEventsForQueryIDInt64FuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetEventsForQueryIDInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetEventsForQueryIDInt64FuncCall is an object that
// describes an invocation of method GetEventsForQueryIDInt64 on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreGetEventsForQueryIDInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.ListEventsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*TriggerJobs
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetEventsForQueryIDInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetEventsForQueryIDInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetQueryByRecordIDFunc describes the behavior when the
// GetQueryByRecordID method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreGetQueryByRecordIDFunc struct {
	defaultHook func(context.Context, int) (*MonitorQuery, error)
	hooks       []func(context.Context, int) (*MonitorQuery, error)
	history     []CodeMonitorStoreGetQueryByRecordIDFuncCall
	mutex       sync.Mutex
}

// GetQueryByRecordID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetQueryByRecordID(v0 context.Context, v1 int) (*MonitorQuery, error) {
	r0, r1 := m.GetQueryByRecordIDFunc.nextHook()(v0, v1)
	m.GetQueryByRecordIDFunc.appendCall(CodeMonitorStoreGetQueryByRecordIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetQueryByRecordID
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreGetQueryByRecordIDFunc) SetDefaultHook(hook func(context.Context, int) (*MonitorQuery, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetQueryByRecordID method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreGetQueryByRecordIDFunc) PushHook(hook func(context.Context, int) (*MonitorQuery, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreGetQueryByRecordIDFunc) SetDefaultReturn(r0 *MonitorQuery, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*MonitorQuery, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreGetQueryByRecordIDFunc) PushReturn(r0 *MonitorQuery, r1 error) {
	f.PushHook(func(context.Context, int) (*MonitorQuery, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetQueryByRecordIDFunc) nextHook() func(context.Context, int) (*MonitorQuery, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetQueryByRecordIDFunc) appendCall(r0 CodeMonitorStoreGetQueryByRecordIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreGetQueryByRecordIDFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreGetQueryByRecordIDFunc) History() []CodeMonitorStoreGetQueryByRecordIDFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetQueryByRecordIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetQueryByRecordIDFuncCall is an object that describes an
// invocation of method GetQueryByRecordID on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetQueryByRecordIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *MonitorQuery
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetQueryByRecordIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetQueryByRecordIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreHandleFunc describes the behavior when the Handle method
// of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []CodeMonitorStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(CodeMonitorStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *CodeMonitorStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreHandleFunc) appendCall(r0 CodeMonitorStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreHandleFunc) History() []CodeMonitorStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockCodeMonitorStore.
type CodeMonitorStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreListActionJobsFunc describes the behavior when the
// ListActionJobs method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListActionJobsFunc struct {
	defaultHook func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)
	hooks       []func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)
	history     []CodeMonitorStoreListActionJobsFuncCall
	mutex       sync.Mutex
}

// ListActionJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListActionJobs(v0 context.Context, v1 ListActionJobsOpts) ([]*ActionJob, error) {
	r0, r1 := m.ListActionJobsFunc.nextHook()(v0, v1)
	m.ListActionJobsFunc.appendCall(CodeMonitorStoreListActionJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListActionJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListActionJobsFunc) SetDefaultHook(hook func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListActionJobs method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreListActionJobsFunc) PushHook(hook func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreListActionJobsFunc) SetDefaultReturn(r0 []*ActionJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreListActionJobsFunc) PushReturn(r0 []*ActionJob, r1 error) {
	f.PushHook(func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListActionJobsFunc) nextHook() func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListActionJobsFunc) appendCall(r0 CodeMonitorStoreListActionJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListActionJobsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListActionJobsFunc) History() []CodeMonitorStoreListActionJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListActionJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListActionJobsFuncCall is an object that describes an
// invocation of method ListActionJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListActionJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionJobsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*ActionJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListActionJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListActionJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListEmailActionsFunc describes the behavior when the
// ListEmailActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListEmailActionsFunc struct {
	defaultHook func(context.Context, ListActionsOpts) ([]*MonitorEmail, error)
	hooks       []func(context.Context, ListActionsOpts) ([]*MonitorEmail, error)
	history     []CodeMonitorStoreListEmailActionsFuncCall
	mutex       sync.Mutex
}

// ListEmailActions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListEmailActions(v0 context.Context, v1 ListActionsOpts) ([]*MonitorEmail, error) {
	r0, r1 := m.ListEmailActionsFunc.nextHook()(v0, v1)
	m.ListEmailActionsFunc.appendCall(CodeMonitorStoreListEmailActionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListEmailActions
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListEmailActionsFunc) SetDefaultHook(hook func(context.Context, ListActionsOpts) ([]*MonitorEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListEmailActions method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreListEmailActionsFunc) PushHook(hook func(context.Context, ListActionsOpts) ([]*MonitorEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreListEmailActionsFunc) SetDefaultReturn(r0 []*MonitorEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionsOpts) ([]*MonitorEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreListEmailActionsFunc) PushReturn(r0 []*MonitorEmail, r1 error) {
	f.PushHook(func(context.Context, ListActionsOpts) ([]*MonitorEmail, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListEmailActionsFunc) nextHook() func(context.Context, ListActionsOpts) ([]*MonitorEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListEmailActionsFunc) appendCall(r0 CodeMonitorStoreListEmailActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListEmailActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListEmailActionsFunc) History() []CodeMonitorStoreListEmailActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListEmailActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListEmailActionsFuncCall is an object that describes an
// invocation of method ListEmailActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListEmailActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*MonitorEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListEmailActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListEmailActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreLogSearchFunc describes the behavior when the LogSearch
// method of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreLogSearchFunc struct {
	defaultHook func(context.Context, string, int, int) error
	hooks       []func(context.Context, string, int, int) error
	history     []CodeMonitorStoreLogSearchFuncCall
	mutex       sync.Mutex
}

// LogSearch delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) LogSearch(v0 context.Context, v1 string, v2 int, v3 int) error {
	r0 := m.LogSearchFunc.nextHook()(v0, v1, v2, v3)
	m.LogSearchFunc.appendCall(CodeMonitorStoreLogSearchFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LogSearch method of
// the parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreLogSearchFunc) SetDefaultHook(hook func(context.Context, string, int, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogSearch method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreLogSearchFunc) PushHook(hook func(context.Context, string, int, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreLogSearchFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, int, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreLogSearchFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, int, int) error {
		return r0
	})
}

func (f *CodeMonitorStoreLogSearchFunc) nextHook() func(context.Context, string, int, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreLogSearchFunc) appendCall(r0 CodeMonitorStoreLogSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreLogSearchFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreLogSearchFunc) History() []CodeMonitorStoreLogSearchFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreLogSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreLogSearchFuncCall is an object that describes an
// invocation of method LogSearch on an instance of MockCodeMonitorStore.
type CodeMonitorStoreLogSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreLogSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreLogSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreMonitorByIDInt64Func describes the behavior when the
// MonitorByIDInt64 method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreMonitorByIDInt64Func struct {
	defaultHook func(context.Context, int64) (*Monitor, error)
	hooks       []func(context.Context, int64) (*Monitor, error)
	history     []CodeMonitorStoreMonitorByIDInt64FuncCall
	mutex       sync.Mutex
}

// MonitorByIDInt64 delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) MonitorByIDInt64(v0 context.Context, v1 int64) (*Monitor, error) {
	r0, r1 := m.MonitorByIDInt64Func.nextHook()(v0, v1)
	m.MonitorByIDInt64Func.appendCall(CodeMonitorStoreMonitorByIDInt64FuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MonitorByIDInt64
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreMonitorByIDInt64Func) SetDefaultHook(hook func(context.Context, int64) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MonitorByIDInt64 method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreMonitorByIDInt64Func) PushHook(hook func(context.Context, int64) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreMonitorByIDInt64Func) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreMonitorByIDInt64Func) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, int64) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreMonitorByIDInt64Func) nextHook() func(context.Context, int64) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreMonitorByIDInt64Func) appendCall(r0 CodeMonitorStoreMonitorByIDInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreMonitorByIDInt64FuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreMonitorByIDInt64Func) History() []CodeMonitorStoreMonitorByIDInt64FuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreMonitorByIDInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreMonitorByIDInt64FuncCall is an object that describes an
// invocation of method MonitorByIDInt64 on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreMonitorByIDInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreMonitorByIDInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreMonitorByIDInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreMonitorsFunc describes the behavior when the Monitors
// method of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreMonitorsFunc struct {
	defaultHook func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error)
	hooks       []func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error)
	history     []CodeMonitorStoreMonitorsFuncCall
	mutex       sync.Mutex
}

// Monitors delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Monitors(v0 context.Context, v1 int32, v2 *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
	r0, r1 := m.MonitorsFunc.nextHook()(v0, v1, v2)
	m.MonitorsFunc.appendCall(CodeMonitorStoreMonitorsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Monitors method of
// the parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreMonitorsFunc) SetDefaultHook(hook func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Monitors method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreMonitorsFunc) PushHook(hook func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreMonitorsFunc) SetDefaultReturn(r0 []*Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreMonitorsFunc) PushReturn(r0 []*Monitor, r1 error) {
	f.PushHook(func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreMonitorsFunc) nextHook() func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreMonitorsFunc) appendCall(r0 CodeMonitorStoreMonitorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreMonitorsFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreMonitorsFunc) History() []CodeMonitorStoreMonitorsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreMonitorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreMonitorsFuncCall is an object that describes an
// invocation of method Monitors on an instance of MockCodeMonitorStore.
type CodeMonitorStoreMonitorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.ListMonitorsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreMonitorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreMonitorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreNowFunc describes the behavior when the Now method of the
// parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreNowFunc struct {
	defaultHook func() time.Time
	hooks       []func() time.Time
	history     []CodeMonitorStoreNowFuncCall
	mutex       sync.Mutex
}

// Now delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Now() time.Time {
	r0 := m.NowFunc.nextHook()()
	m.NowFunc.appendCall(CodeMonitorStoreNowFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Now method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreNowFunc) SetDefaultHook(hook func() time.Time) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Now method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreNowFunc) PushHook(hook func() time.Time) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreNowFunc) SetDefaultReturn(r0 time.Time) {
	f.SetDefaultHook(func() time.Time {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreNowFunc) PushReturn(r0 time.Time) {
	f.PushHook(func() time.Time {
		return r0
	})
}

func (f *CodeMonitorStoreNowFunc) nextHook() func() time.Time {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreNowFunc) appendCall(r0 CodeMonitorStoreNowFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreNowFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreNowFunc) History() []CodeMonitorStoreNowFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreNowFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreNowFuncCall is an object that describes an invocation of
// method Now on an instance of MockCodeMonitorStore.
type CodeMonitorStoreNowFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Time
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreNowFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreNowFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreQueryFunc describes the behavior when the Query method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreQueryFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (*sql.Rows, error)
	hooks       []func(context.Context, *sqlf.Query) (*sql.Rows, error)
	history     []CodeMonitorStoreQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Query(v0 context.Context, v1 *sqlf.Query) (*sql.Rows, error) {
	r0, r1 := m.QueryFunc.nextHook()(v0, v1)
	m.QueryFunc.appendCall(CodeMonitorStoreQueryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreQueryFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreQueryFunc) PushHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreQueryFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreQueryFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreQueryFunc) nextHook() func(context.Context, *sqlf.Query) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreQueryFunc) appendCall(r0 CodeMonitorStoreQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreQueryFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreQueryFunc) History() []CodeMonitorStoreQueryFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreQueryFuncCall is an object that describes an invocation
// of method Query on an instance of MockCodeMonitorStore.
type CodeMonitorStoreQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreRecipientsForEmailIDInt64Func describes the behavior when
// the RecipientsForEmailIDInt64 method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreRecipientsForEmailIDInt64Func struct {
	defaultHook func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error)
	hooks       []func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error)
	history     []CodeMonitorStoreRecipientsForEmailIDInt64FuncCall
	mutex       sync.Mutex
}

// RecipientsForEmailIDInt64 delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) RecipientsForEmailIDInt64(v0 context.Context, v1 int64, v2 *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
	r0, r1 := m.RecipientsForEmailIDInt64Func.nextHook()(v0, v1, v2)
	m.RecipientsForEmailIDInt64Func.appendCall(CodeMonitorStoreRecipientsForEmailIDInt64FuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// RecipientsForEmailIDInt64 method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreRecipientsForEmailIDInt64Func) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecipientsForEmailIDInt64 method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreRecipientsForEmailIDInt64Func) PushHook(hook func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreRecipientsForEmailIDInt64Func) SetDefaultReturn(r0 []*Recipient, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreRecipientsForEmailIDInt64Func) PushReturn(r0 []*Recipient, r1 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreRecipientsForEmailIDInt64Func) nextHook() func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreRecipientsForEmailIDInt64Func) appendCall(r0 CodeMonitorStoreRecipientsForEmailIDInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreRecipientsForEmailIDInt64FuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreRecipientsForEmailIDInt64Func) History() []CodeMonitorStoreRecipientsForEmailIDInt64FuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreRecipientsForEmailIDInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreRecipientsForEmailIDInt64FuncCall is an object that
// describes an invocation of method RecipientsForEmailIDInt64 on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreRecipientsForEmailIDInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.ListRecipientsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Recipient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreRecipientsForEmailIDInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreRecipientsForEmailIDInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreResetTriggerQueryTimestampsFunc describes the behavior
// when the ResetTriggerQueryTimestamps method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreResetTriggerQueryTimestampsFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []CodeMonitorStoreResetTriggerQueryTimestampsFuncCall
	mutex       sync.Mutex
}

// ResetTriggerQueryTimestamps delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ResetTriggerQueryTimestamps(v0 context.Context, v1 int64) error {
	r0 := m.ResetTriggerQueryTimestampsFunc.nextHook()(v0, v1)
	m.ResetTriggerQueryTimestampsFunc.appendCall(CodeMonitorStoreResetTriggerQueryTimestampsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ResetTriggerQueryTimestamps method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreResetTriggerQueryTimestampsFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResetTriggerQueryTimestamps method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreResetTriggerQueryTimestampsFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreResetTriggerQueryTimestampsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreResetTriggerQueryTimestampsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreResetTriggerQueryTimestampsFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreResetTriggerQueryTimestampsFunc) appendCall(r0 CodeMonitorStoreResetTriggerQueryTimestampsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreResetTriggerQueryTimestampsFuncCall objects describing
// the invocations of this function.
func (f *CodeMonitorStoreResetTriggerQueryTimestampsFunc) History() []CodeMonitorStoreResetTriggerQueryTimestampsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreResetTriggerQueryTimestampsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreResetTriggerQueryTimestampsFuncCall is an object that
// describes an invocation of method ResetTriggerQueryTimestamps on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreResetTriggerQueryTimestampsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreResetTriggerQueryTimestampsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreResetTriggerQueryTimestampsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreSetTriggerQueryNextRunFunc describes the behavior when
// the SetTriggerQueryNextRun method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreSetTriggerQueryNextRunFunc struct {
	defaultHook func(context.Context, int64, time.Time, time.Time) error
	hooks       []func(context.Context, int64, time.Time, time.Time) error
	history     []CodeMonitorStoreSetTriggerQueryNextRunFuncCall
	mutex       sync.Mutex
}

// SetTriggerQueryNextRun delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) SetTriggerQueryNextRun(v0 context.Context, v1 int64, v2 time.Time, v3 time.Time) error {
	r0 := m.SetTriggerQueryNextRunFunc.nextHook()(v0, v1, v2, v3)
	m.SetTriggerQueryNextRunFunc.appendCall(CodeMonitorStoreSetTriggerQueryNextRunFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetTriggerQueryNextRun method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreSetTriggerQueryNextRunFunc) SetDefaultHook(hook func(context.Context, int64, time.Time, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTriggerQueryNextRun method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreSetTriggerQueryNextRunFunc) PushHook(hook func(context.Context, int64, time.Time, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreSetTriggerQueryNextRunFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, time.Time, time.Time) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreSetTriggerQueryNextRunFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, time.Time, time.Time) error {
		return r0
	})
}

func (f *CodeMonitorStoreSetTriggerQueryNextRunFunc) nextHook() func(context.Context, int64, time.Time, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreSetTriggerQueryNextRunFunc) appendCall(r0 CodeMonitorStoreSetTriggerQueryNextRunFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreSetTriggerQueryNextRunFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreSetTriggerQueryNextRunFunc) History() []CodeMonitorStoreSetTriggerQueryNextRunFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreSetTriggerQueryNextRunFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreSetTriggerQueryNextRunFuncCall is an object that
// describes an invocation of method SetTriggerQueryNextRun on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreSetTriggerQueryNextRunFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreSetTriggerQueryNextRunFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreSetTriggerQueryNextRunFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreToggleMonitorFunc describes the behavior when the
// ToggleMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreToggleMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreToggleMonitorFuncCall
	mutex       sync.Mutex
}

// ToggleMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ToggleMonitor(v0 context.Context, v1 *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
	r0, r1 := m.ToggleMonitorFunc.nextHook()(v0, v1)
	m.ToggleMonitorFunc.appendCall(CodeMonitorStoreToggleMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ToggleMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreToggleMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ToggleMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreToggleMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreToggleMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreToggleMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreToggleMonitorFunc) nextHook() func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreToggleMonitorFunc) appendCall(r0 CodeMonitorStoreToggleMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreToggleMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreToggleMonitorFunc) History() []CodeMonitorStoreToggleMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreToggleMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreToggleMonitorFuncCall is an object that describes an
// invocation of method ToggleMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreToggleMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.ToggleCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreToggleMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreToggleMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreTotalCountActionEmailsFunc describes the behavior when
// the TotalCountActionEmails method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreTotalCountActionEmailsFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []CodeMonitorStoreTotalCountActionEmailsFuncCall
	mutex       sync.Mutex
}

// TotalCountActionEmails delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) TotalCountActionEmails(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.TotalCountActionEmailsFunc.nextHook()(v0, v1)
	m.TotalCountActionEmailsFunc.appendCall(CodeMonitorStoreTotalCountActionEmailsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// TotalCountActionEmails method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreTotalCountActionEmailsFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalCountActionEmails method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreTotalCountActionEmailsFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreTotalCountActionEmailsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreTotalCountActionEmailsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreTotalCountActionEmailsFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreTotalCountActionEmailsFunc) appendCall(r0 CodeMonitorStoreTotalCountActionEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreTotalCountActionEmailsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreTotalCountActionEmailsFunc) History() []CodeMonitorStoreTotalCountActionEmailsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreTotalCountActionEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreTotalCountActionEmailsFuncCall is an object that
// describes an invocation of method TotalCountActionEmails on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreTotalCountActionEmailsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreTotalCountActionEmailsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreTotalCountActionEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreTotalCountEventsForQueryIDInt64Func describes the
// behavior when the TotalCountEventsForQueryIDInt64 method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreTotalCountEventsForQueryIDInt64Func struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall
	mutex       sync.Mutex
}

// TotalCountEventsForQueryIDInt64 delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) TotalCountEventsForQueryIDInt64(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.TotalCountEventsForQueryIDInt64Func.nextHook()(v0, v1)
	m.TotalCountEventsForQueryIDInt64Func.appendCall(CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// TotalCountEventsForQueryIDInt64 method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreTotalCountEventsForQueryIDInt64Func) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalCountEventsForQueryIDInt64 method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreTotalCountEventsForQueryIDInt64Func) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreTotalCountEventsForQueryIDInt64Func) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreTotalCountEventsForQueryIDInt64Func) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreTotalCountEventsForQueryIDInt64Func) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreTotalCountEventsForQueryIDInt64Func) appendCall(r0 CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreTotalCountEventsForQueryIDInt64Func) History() []CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall is an object that
// describes an invocation of method TotalCountEventsForQueryIDInt64 on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreTotalCountEventsForQueryIDInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreTotalCountMonitorsFunc describes the behavior when the
// TotalCountMonitors method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreTotalCountMonitorsFunc struct {
	defaultHook func(context.Context, int32) (int32, error)
	hooks       []func(context.Context, int32) (int32, error)
	history     []CodeMonitorStoreTotalCountMonitorsFuncCall
	mutex       sync.Mutex
}

// TotalCountMonitors delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) TotalCountMonitors(v0 context.Context, v1 int32) (int32, error) {
	r0, r1 := m.TotalCountMonitorsFunc.nextHook()(v0, v1)
	m.TotalCountMonitorsFunc.appendCall(CodeMonitorStoreTotalCountMonitorsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TotalCountMonitors
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreTotalCountMonitorsFunc) SetDefaultHook(hook func(context.Context, int32) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalCountMonitors method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreTotalCountMonitorsFunc) PushHook(hook func(context.Context, int32) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreTotalCountMonitorsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreTotalCountMonitorsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int32) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreTotalCountMonitorsFunc) nextHook() func(context.Context, int32) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreTotalCountMonitorsFunc) appendCall(r0 CodeMonitorStoreTotalCountMonitorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreTotalCountMonitorsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreTotalCountMonitorsFunc) History() []CodeMonitorStoreTotalCountMonitorsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreTotalCountMonitorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreTotalCountMonitorsFuncCall is an object that describes an
// invocation of method TotalCountMonitors on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreTotalCountMonitorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreTotalCountMonitorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreTotalCountMonitorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreTotalCountRecipientsFunc describes the behavior when the
// TotalCountRecipients method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreTotalCountRecipientsFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []CodeMonitorStoreTotalCountRecipientsFuncCall
	mutex       sync.Mutex
}

// TotalCountRecipients delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) TotalCountRecipients(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.TotalCountRecipientsFunc.nextHook()(v0, v1)
	m.TotalCountRecipientsFunc.appendCall(CodeMonitorStoreTotalCountRecipientsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TotalCountRecipients
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreTotalCountRecipientsFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalCountRecipients method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreTotalCountRecipientsFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreTotalCountRecipientsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreTotalCountRecipientsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreTotalCountRecipientsFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreTotalCountRecipientsFunc) appendCall(r0 CodeMonitorStoreTotalCountRecipientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreTotalCountRecipientsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreTotalCountRecipientsFunc) History() []CodeMonitorStoreTotalCountRecipientsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreTotalCountRecipientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreTotalCountRecipientsFuncCall is an object that describes
// an invocation of method TotalCountRecipients on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreTotalCountRecipientsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreTotalCountRecipientsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreTotalCountRecipientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreTransactFunc describes the behavior when the Transact
// method of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreTransactFunc struct {
	defaultHook func(context.Context) (CodeMonitorStore, error)
	hooks       []func(context.Context) (CodeMonitorStore, error)
	history     []CodeMonitorStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Transact(v0 context.Context) (CodeMonitorStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(CodeMonitorStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreTransactFunc) SetDefaultHook(hook func(context.Context) (CodeMonitorStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreTransactFunc) PushHook(hook func(context.Context) (CodeMonitorStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreTransactFunc) SetDefaultReturn(r0 CodeMonitorStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (CodeMonitorStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreTransactFunc) PushReturn(r0 CodeMonitorStore, r1 error) {
	f.PushHook(func(context.Context) (CodeMonitorStore, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreTransactFunc) nextHook() func(context.Context) (CodeMonitorStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreTransactFunc) appendCall(r0 CodeMonitorStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreTransactFunc) History() []CodeMonitorStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockCodeMonitorStore.
type CodeMonitorStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 CodeMonitorStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreTriggerQueryByMonitorIDInt64Func describes the behavior
// when the TriggerQueryByMonitorIDInt64 method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreTriggerQueryByMonitorIDInt64Func struct {
	defaultHook func(context.Context, int64) (*MonitorQuery, error)
	hooks       []func(context.Context, int64) (*MonitorQuery, error)
	history     []CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall
	mutex       sync.Mutex
}

// TriggerQueryByMonitorIDInt64 delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) TriggerQueryByMonitorIDInt64(v0 context.Context, v1 int64) (*MonitorQuery, error) {
	r0, r1 := m.TriggerQueryByMonitorIDInt64Func.nextHook()(v0, v1)
	m.TriggerQueryByMonitorIDInt64Func.appendCall(CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// TriggerQueryByMonitorIDInt64 method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreTriggerQueryByMonitorIDInt64Func) SetDefaultHook(hook func(context.Context, int64) (*MonitorQuery, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TriggerQueryByMonitorIDInt64 method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreTriggerQueryByMonitorIDInt64Func) PushHook(hook func(context.Context, int64) (*MonitorQuery, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreTriggerQueryByMonitorIDInt64Func) SetDefaultReturn(r0 *MonitorQuery, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*MonitorQuery, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreTriggerQueryByMonitorIDInt64Func) PushReturn(r0 *MonitorQuery, r1 error) {
	f.PushHook(func(context.Context, int64) (*MonitorQuery, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreTriggerQueryByMonitorIDInt64Func) nextHook() func(context.Context, int64) (*MonitorQuery, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreTriggerQueryByMonitorIDInt64Func) appendCall(r0 CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall objects describing
// the invocations of this function.
func (f *CodeMonitorStoreTriggerQueryByMonitorIDInt64Func) History() []CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall is an object that
// describes an invocation of method TriggerQueryByMonitorIDInt64 on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *MonitorQuery
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreTriggerQueryByMonitorIDInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateActionEmailFunc describes the behavior when the
// UpdateActionEmail method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateActionEmailFunc struct {
	defaultHook func(context.Context, int64, *graphqlbackend.EditActionArgs) (*MonitorEmail, error)
	hooks       []func(context.Context, int64, *graphqlbackend.EditActionArgs) (*MonitorEmail, error)
	history     []CodeMonitorStoreUpdateActionEmailFuncCall
	mutex       sync.Mutex
}

// UpdateActionEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateActionEmail(v0 context.Context, v1 int64, v2 *graphqlbackend.EditActionArgs) (*MonitorEmail, error) {
	r0, r1 := m.UpdateActionEmailFunc.nextHook()(v0, v1, v2)
	m.UpdateActionEmailFunc.appendCall(CodeMonitorStoreUpdateActionEmailFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateActionEmail
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreUpdateActionEmailFunc) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.EditActionArgs) (*MonitorEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateActionEmail method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreUpdateActionEmailFunc) PushHook(hook func(context.Context, int64, *graphqlbackend.EditActionArgs) (*MonitorEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreUpdateActionEmailFunc) SetDefaultReturn(r0 *MonitorEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.EditActionArgs) (*MonitorEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreUpdateActionEmailFunc) PushReturn(r0 *MonitorEmail, r1 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.EditActionArgs) (*MonitorEmail, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreUpdateActionEmailFunc) nextHook() func(context.Context, int64, *graphqlbackend.EditActionArgs) (*MonitorEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateActionEmailFunc) appendCall(r0 CodeMonitorStoreUpdateActionEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateActionEmailFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateActionEmailFunc) History() []CodeMonitorStoreUpdateActionEmailFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateActionEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateActionEmailFuncCall is an object that describes an
// invocation of method UpdateActionEmail on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateActionEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.EditActionArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *MonitorEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateActionEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateActionEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateMonitorFunc describes the behavior when the
// UpdateMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreUpdateMonitorFuncCall
	mutex       sync.Mutex
}

// UpdateMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateMonitor(v0 context.Context, v1 *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
	r0, r1 := m.UpdateMonitorFunc.nextHook()(v0, v1)
	m.UpdateMonitorFunc.appendCall(CodeMonitorStoreUpdateMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreUpdateMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreUpdateMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreUpdateMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreUpdateMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreUpdateMonitorFunc) nextHook() func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateMonitorFunc) appendCall(r0 CodeMonitorStoreUpdateMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateMonitorFunc) History() []CodeMonitorStoreUpdateMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateMonitorFuncCall is an object that describes an
// invocation of method UpdateMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.UpdateCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateTriggerQueryFunc describes the behavior when the
// UpdateTriggerQuery method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateTriggerQueryFunc struct {
	defaultHook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error
	hooks       []func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error
	history     []CodeMonitorStoreUpdateTriggerQueryFuncCall
	mutex       sync.Mutex
}

// UpdateTriggerQuery delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateTriggerQuery(v0 context.Context, v1 *graphqlbackend.UpdateCodeMonitorArgs) error {
	r0 := m.UpdateTriggerQueryFunc.nextHook()(v0, v1)
	m.UpdateTriggerQueryFunc.appendCall(CodeMonitorStoreUpdateTriggerQueryFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateTriggerQuery
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreUpdateTriggerQueryFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateTriggerQuery method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreUpdateTriggerQueryFunc) PushHook(hook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreUpdateTriggerQueryFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreUpdateTriggerQueryFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error {
		return r0
	})
}

func (f *CodeMonitorStoreUpdateTriggerQueryFunc) nextHook() func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateTriggerQueryFunc) appendCall(r0 CodeMonitorStoreUpdateTriggerQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateTriggerQueryFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateTriggerQueryFunc) History() []CodeMonitorStoreUpdateTriggerQueryFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateTriggerQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateTriggerQueryFuncCall is an object that describes an
// invocation of method UpdateTriggerQuery on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateTriggerQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.UpdateCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateTriggerQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateTriggerQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
