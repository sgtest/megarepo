// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package codemonitors

import (
	"context"
	"sync"
	"time"

	graphqlgo "github.com/graph-gophers/graphql-go"
	sqlf "github.com/keegancsmith/sqlf"
	graphqlbackend "github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockCodeMonitorStore is a mock implementation of the CodeMonitorStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codemonitors) used
// for unit testing.
type MockCodeMonitorStore struct {
	// ClockFunc is an instance of a mock function object controlling the
	// behavior of the method Clock.
	ClockFunc *CodeMonitorStoreClockFunc
	// CountActionJobsFunc is an instance of a mock function object
	// controlling the behavior of the method CountActionJobs.
	CountActionJobsFunc *CodeMonitorStoreCountActionJobsFunc
	// CountEmailActionsFunc is an instance of a mock function object
	// controlling the behavior of the method CountEmailActions.
	CountEmailActionsFunc *CodeMonitorStoreCountEmailActionsFunc
	// CountMonitorsFunc is an instance of a mock function object
	// controlling the behavior of the method CountMonitors.
	CountMonitorsFunc *CodeMonitorStoreCountMonitorsFunc
	// CountQueryTriggerJobsFunc is an instance of a mock function object
	// controlling the behavior of the method CountQueryTriggerJobs.
	CountQueryTriggerJobsFunc *CodeMonitorStoreCountQueryTriggerJobsFunc
	// CountRecipientsFunc is an instance of a mock function object
	// controlling the behavior of the method CountRecipients.
	CountRecipientsFunc *CodeMonitorStoreCountRecipientsFunc
	// CreateActionsFunc is an instance of a mock function object
	// controlling the behavior of the method CreateActions.
	CreateActionsFunc *CodeMonitorStoreCreateActionsFunc
	// CreateCodeMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method CreateCodeMonitor.
	CreateCodeMonitorFunc *CodeMonitorStoreCreateCodeMonitorFunc
	// CreateEmailActionFunc is an instance of a mock function object
	// controlling the behavior of the method CreateEmailAction.
	CreateEmailActionFunc *CodeMonitorStoreCreateEmailActionFunc
	// CreateMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method CreateMonitor.
	CreateMonitorFunc *CodeMonitorStoreCreateMonitorFunc
	// CreateQueryTriggerFunc is an instance of a mock function object
	// controlling the behavior of the method CreateQueryTrigger.
	CreateQueryTriggerFunc *CodeMonitorStoreCreateQueryTriggerFunc
	// CreateRecipientsFunc is an instance of a mock function object
	// controlling the behavior of the method CreateRecipients.
	CreateRecipientsFunc *CodeMonitorStoreCreateRecipientsFunc
	// DeleteEmailActionsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteEmailActions.
	DeleteEmailActionsFunc *CodeMonitorStoreDeleteEmailActionsFunc
	// DeleteMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteMonitor.
	DeleteMonitorFunc *CodeMonitorStoreDeleteMonitorFunc
	// DeleteObsoleteTriggerJobsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteObsoleteTriggerJobs.
	DeleteObsoleteTriggerJobsFunc *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc
	// DeleteOldTriggerJobsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOldTriggerJobs.
	DeleteOldTriggerJobsFunc *CodeMonitorStoreDeleteOldTriggerJobsFunc
	// DeleteRecipientsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteRecipients.
	DeleteRecipientsFunc *CodeMonitorStoreDeleteRecipientsFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *CodeMonitorStoreDoneFunc
	// EnqueueActionJobsForQueryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// EnqueueActionJobsForQuery.
	EnqueueActionJobsForQueryFunc *CodeMonitorStoreEnqueueActionJobsForQueryFunc
	// EnqueueQueryTriggerJobsFunc is an instance of a mock function object
	// controlling the behavior of the method EnqueueQueryTriggerJobs.
	EnqueueQueryTriggerJobsFunc *CodeMonitorStoreEnqueueQueryTriggerJobsFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *CodeMonitorStoreExecFunc
	// GetActionJobFunc is an instance of a mock function object controlling
	// the behavior of the method GetActionJob.
	GetActionJobFunc *CodeMonitorStoreGetActionJobFunc
	// GetActionJobMetadataFunc is an instance of a mock function object
	// controlling the behavior of the method GetActionJobMetadata.
	GetActionJobMetadataFunc *CodeMonitorStoreGetActionJobMetadataFunc
	// GetEmailActionFunc is an instance of a mock function object
	// controlling the behavior of the method GetEmailAction.
	GetEmailActionFunc *CodeMonitorStoreGetEmailActionFunc
	// GetMonitorFunc is an instance of a mock function object controlling
	// the behavior of the method GetMonitor.
	GetMonitorFunc *CodeMonitorStoreGetMonitorFunc
	// GetQueryTriggerForJobFunc is an instance of a mock function object
	// controlling the behavior of the method GetQueryTriggerForJob.
	GetQueryTriggerForJobFunc *CodeMonitorStoreGetQueryTriggerForJobFunc
	// GetQueryTriggerForMonitorFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetQueryTriggerForMonitor.
	GetQueryTriggerForMonitorFunc *CodeMonitorStoreGetQueryTriggerForMonitorFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *CodeMonitorStoreHandleFunc
	// ListActionJobsFunc is an instance of a mock function object
	// controlling the behavior of the method ListActionJobs.
	ListActionJobsFunc *CodeMonitorStoreListActionJobsFunc
	// ListAllRecipientsForEmailActionFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListAllRecipientsForEmailAction.
	ListAllRecipientsForEmailActionFunc *CodeMonitorStoreListAllRecipientsForEmailActionFunc
	// ListEmailActionsFunc is an instance of a mock function object
	// controlling the behavior of the method ListEmailActions.
	ListEmailActionsFunc *CodeMonitorStoreListEmailActionsFunc
	// ListMonitorsFunc is an instance of a mock function object controlling
	// the behavior of the method ListMonitors.
	ListMonitorsFunc *CodeMonitorStoreListMonitorsFunc
	// ListQueryTriggerJobsFunc is an instance of a mock function object
	// controlling the behavior of the method ListQueryTriggerJobs.
	ListQueryTriggerJobsFunc *CodeMonitorStoreListQueryTriggerJobsFunc
	// ListRecipientsForEmailActionFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListRecipientsForEmailAction.
	ListRecipientsForEmailActionFunc *CodeMonitorStoreListRecipientsForEmailActionFunc
	// NowFunc is an instance of a mock function object controlling the
	// behavior of the method Now.
	NowFunc *CodeMonitorStoreNowFunc
	// ResetQueryTriggerTimestampsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ResetQueryTriggerTimestamps.
	ResetQueryTriggerTimestampsFunc *CodeMonitorStoreResetQueryTriggerTimestampsFunc
	// SetQueryTriggerNextRunFunc is an instance of a mock function object
	// controlling the behavior of the method SetQueryTriggerNextRun.
	SetQueryTriggerNextRunFunc *CodeMonitorStoreSetQueryTriggerNextRunFunc
	// ToggleMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method ToggleMonitor.
	ToggleMonitorFunc *CodeMonitorStoreToggleMonitorFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *CodeMonitorStoreTransactFunc
	// UpdateEmailActionFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateEmailAction.
	UpdateEmailActionFunc *CodeMonitorStoreUpdateEmailActionFunc
	// UpdateMonitorFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateMonitor.
	UpdateMonitorFunc *CodeMonitorStoreUpdateMonitorFunc
	// UpdateQueryTriggerFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateQueryTrigger.
	UpdateQueryTriggerFunc *CodeMonitorStoreUpdateQueryTriggerFunc
	// UpdateTriggerJobWithResultsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateTriggerJobWithResults.
	UpdateTriggerJobWithResultsFunc *CodeMonitorStoreUpdateTriggerJobWithResultsFunc
}

// NewMockCodeMonitorStore creates a new mock of the CodeMonitorStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockCodeMonitorStore() *MockCodeMonitorStore {
	return &MockCodeMonitorStore{
		ClockFunc: &CodeMonitorStoreClockFunc{
			defaultHook: func() func() time.Time {
				return nil
			},
		},
		CountActionJobsFunc: &CodeMonitorStoreCountActionJobsFunc{
			defaultHook: func(context.Context, ListActionJobsOpts) (int, error) {
				return 0, nil
			},
		},
		CountEmailActionsFunc: &CodeMonitorStoreCountEmailActionsFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				return 0, nil
			},
		},
		CountMonitorsFunc: &CodeMonitorStoreCountMonitorsFunc{
			defaultHook: func(context.Context, int32) (int32, error) {
				return 0, nil
			},
		},
		CountQueryTriggerJobsFunc: &CodeMonitorStoreCountQueryTriggerJobsFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				return 0, nil
			},
		},
		CountRecipientsFunc: &CodeMonitorStoreCountRecipientsFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				return 0, nil
			},
		},
		CreateActionsFunc: &CodeMonitorStoreCreateActionsFunc{
			defaultHook: func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error {
				return nil
			},
		},
		CreateCodeMonitorFunc: &CodeMonitorStoreCreateCodeMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
				return nil, nil
			},
		},
		CreateEmailActionFunc: &CodeMonitorStoreCreateEmailActionFunc{
			defaultHook: func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*EmailAction, error) {
				return nil, nil
			},
		},
		CreateMonitorFunc: &CodeMonitorStoreCreateMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
				return nil, nil
			},
		},
		CreateQueryTriggerFunc: &CodeMonitorStoreCreateQueryTriggerFunc{
			defaultHook: func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error {
				return nil
			},
		},
		CreateRecipientsFunc: &CodeMonitorStoreCreateRecipientsFunc{
			defaultHook: func(context.Context, []graphqlgo.ID, int64) error {
				return nil
			},
		},
		DeleteEmailActionsFunc: &CodeMonitorStoreDeleteEmailActionsFunc{
			defaultHook: func(context.Context, []int64, int64) error {
				return nil
			},
		},
		DeleteMonitorFunc: &CodeMonitorStoreDeleteMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error {
				return nil
			},
		},
		DeleteObsoleteTriggerJobsFunc: &CodeMonitorStoreDeleteObsoleteTriggerJobsFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		DeleteOldTriggerJobsFunc: &CodeMonitorStoreDeleteOldTriggerJobsFunc{
			defaultHook: func(context.Context, int) error {
				return nil
			},
		},
		DeleteRecipientsFunc: &CodeMonitorStoreDeleteRecipientsFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		DoneFunc: &CodeMonitorStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		EnqueueActionJobsForQueryFunc: &CodeMonitorStoreEnqueueActionJobsForQueryFunc{
			defaultHook: func(context.Context, int64, int) error {
				return nil
			},
		},
		EnqueueQueryTriggerJobsFunc: &CodeMonitorStoreEnqueueQueryTriggerJobsFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		ExecFunc: &CodeMonitorStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				return nil
			},
		},
		GetActionJobFunc: &CodeMonitorStoreGetActionJobFunc{
			defaultHook: func(context.Context, int) (*ActionJob, error) {
				return nil, nil
			},
		},
		GetActionJobMetadataFunc: &CodeMonitorStoreGetActionJobMetadataFunc{
			defaultHook: func(context.Context, int) (*ActionJobMetadata, error) {
				return nil, nil
			},
		},
		GetEmailActionFunc: &CodeMonitorStoreGetEmailActionFunc{
			defaultHook: func(context.Context, int64) (*EmailAction, error) {
				return nil, nil
			},
		},
		GetMonitorFunc: &CodeMonitorStoreGetMonitorFunc{
			defaultHook: func(context.Context, int64) (*Monitor, error) {
				return nil, nil
			},
		},
		GetQueryTriggerForJobFunc: &CodeMonitorStoreGetQueryTriggerForJobFunc{
			defaultHook: func(context.Context, int) (*QueryTrigger, error) {
				return nil, nil
			},
		},
		GetQueryTriggerForMonitorFunc: &CodeMonitorStoreGetQueryTriggerForMonitorFunc{
			defaultHook: func(context.Context, int64) (*QueryTrigger, error) {
				return nil, nil
			},
		},
		HandleFunc: &CodeMonitorStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListActionJobsFunc: &CodeMonitorStoreListActionJobsFunc{
			defaultHook: func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
				return nil, nil
			},
		},
		ListAllRecipientsForEmailActionFunc: &CodeMonitorStoreListAllRecipientsForEmailActionFunc{
			defaultHook: func(context.Context, int64) ([]*Recipient, error) {
				return nil, nil
			},
		},
		ListEmailActionsFunc: &CodeMonitorStoreListEmailActionsFunc{
			defaultHook: func(context.Context, ListActionsOpts) ([]*EmailAction, error) {
				return nil, nil
			},
		},
		ListMonitorsFunc: &CodeMonitorStoreListMonitorsFunc{
			defaultHook: func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
				return nil, nil
			},
		},
		ListQueryTriggerJobsFunc: &CodeMonitorStoreListQueryTriggerJobsFunc{
			defaultHook: func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJob, error) {
				return nil, nil
			},
		},
		ListRecipientsForEmailActionFunc: &CodeMonitorStoreListRecipientsForEmailActionFunc{
			defaultHook: func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
				return nil, nil
			},
		},
		NowFunc: &CodeMonitorStoreNowFunc{
			defaultHook: func() time.Time {
				return time.Time{}
			},
		},
		ResetQueryTriggerTimestampsFunc: &CodeMonitorStoreResetQueryTriggerTimestampsFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		SetQueryTriggerNextRunFunc: &CodeMonitorStoreSetQueryTriggerNextRunFunc{
			defaultHook: func(context.Context, int64, time.Time, time.Time) error {
				return nil
			},
		},
		ToggleMonitorFunc: &CodeMonitorStoreToggleMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
				return nil, nil
			},
		},
		TransactFunc: &CodeMonitorStoreTransactFunc{
			defaultHook: func(context.Context) (CodeMonitorStore, error) {
				return nil, nil
			},
		},
		UpdateEmailActionFunc: &CodeMonitorStoreUpdateEmailActionFunc{
			defaultHook: func(context.Context, int64, *graphqlbackend.EditActionArgs) (*EmailAction, error) {
				return nil, nil
			},
		},
		UpdateMonitorFunc: &CodeMonitorStoreUpdateMonitorFunc{
			defaultHook: func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
				return nil, nil
			},
		},
		UpdateQueryTriggerFunc: &CodeMonitorStoreUpdateQueryTriggerFunc{
			defaultHook: func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error {
				return nil
			},
		},
		UpdateTriggerJobWithResultsFunc: &CodeMonitorStoreUpdateTriggerJobWithResultsFunc{
			defaultHook: func(context.Context, string, int, int) error {
				return nil
			},
		},
	}
}

// NewMockCodeMonitorStoreFrom creates a new mock of the
// MockCodeMonitorStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockCodeMonitorStoreFrom(i CodeMonitorStore) *MockCodeMonitorStore {
	return &MockCodeMonitorStore{
		ClockFunc: &CodeMonitorStoreClockFunc{
			defaultHook: i.Clock,
		},
		CountActionJobsFunc: &CodeMonitorStoreCountActionJobsFunc{
			defaultHook: i.CountActionJobs,
		},
		CountEmailActionsFunc: &CodeMonitorStoreCountEmailActionsFunc{
			defaultHook: i.CountEmailActions,
		},
		CountMonitorsFunc: &CodeMonitorStoreCountMonitorsFunc{
			defaultHook: i.CountMonitors,
		},
		CountQueryTriggerJobsFunc: &CodeMonitorStoreCountQueryTriggerJobsFunc{
			defaultHook: i.CountQueryTriggerJobs,
		},
		CountRecipientsFunc: &CodeMonitorStoreCountRecipientsFunc{
			defaultHook: i.CountRecipients,
		},
		CreateActionsFunc: &CodeMonitorStoreCreateActionsFunc{
			defaultHook: i.CreateActions,
		},
		CreateCodeMonitorFunc: &CodeMonitorStoreCreateCodeMonitorFunc{
			defaultHook: i.CreateCodeMonitor,
		},
		CreateEmailActionFunc: &CodeMonitorStoreCreateEmailActionFunc{
			defaultHook: i.CreateEmailAction,
		},
		CreateMonitorFunc: &CodeMonitorStoreCreateMonitorFunc{
			defaultHook: i.CreateMonitor,
		},
		CreateQueryTriggerFunc: &CodeMonitorStoreCreateQueryTriggerFunc{
			defaultHook: i.CreateQueryTrigger,
		},
		CreateRecipientsFunc: &CodeMonitorStoreCreateRecipientsFunc{
			defaultHook: i.CreateRecipients,
		},
		DeleteEmailActionsFunc: &CodeMonitorStoreDeleteEmailActionsFunc{
			defaultHook: i.DeleteEmailActions,
		},
		DeleteMonitorFunc: &CodeMonitorStoreDeleteMonitorFunc{
			defaultHook: i.DeleteMonitor,
		},
		DeleteObsoleteTriggerJobsFunc: &CodeMonitorStoreDeleteObsoleteTriggerJobsFunc{
			defaultHook: i.DeleteObsoleteTriggerJobs,
		},
		DeleteOldTriggerJobsFunc: &CodeMonitorStoreDeleteOldTriggerJobsFunc{
			defaultHook: i.DeleteOldTriggerJobs,
		},
		DeleteRecipientsFunc: &CodeMonitorStoreDeleteRecipientsFunc{
			defaultHook: i.DeleteRecipients,
		},
		DoneFunc: &CodeMonitorStoreDoneFunc{
			defaultHook: i.Done,
		},
		EnqueueActionJobsForQueryFunc: &CodeMonitorStoreEnqueueActionJobsForQueryFunc{
			defaultHook: i.EnqueueActionJobsForQuery,
		},
		EnqueueQueryTriggerJobsFunc: &CodeMonitorStoreEnqueueQueryTriggerJobsFunc{
			defaultHook: i.EnqueueQueryTriggerJobs,
		},
		ExecFunc: &CodeMonitorStoreExecFunc{
			defaultHook: i.Exec,
		},
		GetActionJobFunc: &CodeMonitorStoreGetActionJobFunc{
			defaultHook: i.GetActionJob,
		},
		GetActionJobMetadataFunc: &CodeMonitorStoreGetActionJobMetadataFunc{
			defaultHook: i.GetActionJobMetadata,
		},
		GetEmailActionFunc: &CodeMonitorStoreGetEmailActionFunc{
			defaultHook: i.GetEmailAction,
		},
		GetMonitorFunc: &CodeMonitorStoreGetMonitorFunc{
			defaultHook: i.GetMonitor,
		},
		GetQueryTriggerForJobFunc: &CodeMonitorStoreGetQueryTriggerForJobFunc{
			defaultHook: i.GetQueryTriggerForJob,
		},
		GetQueryTriggerForMonitorFunc: &CodeMonitorStoreGetQueryTriggerForMonitorFunc{
			defaultHook: i.GetQueryTriggerForMonitor,
		},
		HandleFunc: &CodeMonitorStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListActionJobsFunc: &CodeMonitorStoreListActionJobsFunc{
			defaultHook: i.ListActionJobs,
		},
		ListAllRecipientsForEmailActionFunc: &CodeMonitorStoreListAllRecipientsForEmailActionFunc{
			defaultHook: i.ListAllRecipientsForEmailAction,
		},
		ListEmailActionsFunc: &CodeMonitorStoreListEmailActionsFunc{
			defaultHook: i.ListEmailActions,
		},
		ListMonitorsFunc: &CodeMonitorStoreListMonitorsFunc{
			defaultHook: i.ListMonitors,
		},
		ListQueryTriggerJobsFunc: &CodeMonitorStoreListQueryTriggerJobsFunc{
			defaultHook: i.ListQueryTriggerJobs,
		},
		ListRecipientsForEmailActionFunc: &CodeMonitorStoreListRecipientsForEmailActionFunc{
			defaultHook: i.ListRecipientsForEmailAction,
		},
		NowFunc: &CodeMonitorStoreNowFunc{
			defaultHook: i.Now,
		},
		ResetQueryTriggerTimestampsFunc: &CodeMonitorStoreResetQueryTriggerTimestampsFunc{
			defaultHook: i.ResetQueryTriggerTimestamps,
		},
		SetQueryTriggerNextRunFunc: &CodeMonitorStoreSetQueryTriggerNextRunFunc{
			defaultHook: i.SetQueryTriggerNextRun,
		},
		ToggleMonitorFunc: &CodeMonitorStoreToggleMonitorFunc{
			defaultHook: i.ToggleMonitor,
		},
		TransactFunc: &CodeMonitorStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateEmailActionFunc: &CodeMonitorStoreUpdateEmailActionFunc{
			defaultHook: i.UpdateEmailAction,
		},
		UpdateMonitorFunc: &CodeMonitorStoreUpdateMonitorFunc{
			defaultHook: i.UpdateMonitor,
		},
		UpdateQueryTriggerFunc: &CodeMonitorStoreUpdateQueryTriggerFunc{
			defaultHook: i.UpdateQueryTrigger,
		},
		UpdateTriggerJobWithResultsFunc: &CodeMonitorStoreUpdateTriggerJobWithResultsFunc{
			defaultHook: i.UpdateTriggerJobWithResults,
		},
	}
}

// CodeMonitorStoreClockFunc describes the behavior when the Clock method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreClockFunc struct {
	defaultHook func() func() time.Time
	hooks       []func() func() time.Time
	history     []CodeMonitorStoreClockFuncCall
	mutex       sync.Mutex
}

// Clock delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Clock() func() time.Time {
	r0 := m.ClockFunc.nextHook()()
	m.ClockFunc.appendCall(CodeMonitorStoreClockFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Clock method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreClockFunc) SetDefaultHook(hook func() func() time.Time) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Clock method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreClockFunc) PushHook(hook func() func() time.Time) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreClockFunc) SetDefaultReturn(r0 func() time.Time) {
	f.SetDefaultHook(func() func() time.Time {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreClockFunc) PushReturn(r0 func() time.Time) {
	f.PushHook(func() func() time.Time {
		return r0
	})
}

func (f *CodeMonitorStoreClockFunc) nextHook() func() func() time.Time {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreClockFunc) appendCall(r0 CodeMonitorStoreClockFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreClockFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreClockFunc) History() []CodeMonitorStoreClockFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreClockFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreClockFuncCall is an object that describes an invocation
// of method Clock on an instance of MockCodeMonitorStore.
type CodeMonitorStoreClockFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 func() time.Time
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreClockFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreClockFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreCountActionJobsFunc describes the behavior when the
// CountActionJobs method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCountActionJobsFunc struct {
	defaultHook func(context.Context, ListActionJobsOpts) (int, error)
	hooks       []func(context.Context, ListActionJobsOpts) (int, error)
	history     []CodeMonitorStoreCountActionJobsFuncCall
	mutex       sync.Mutex
}

// CountActionJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountActionJobs(v0 context.Context, v1 ListActionJobsOpts) (int, error) {
	r0, r1 := m.CountActionJobsFunc.nextHook()(v0, v1)
	m.CountActionJobsFunc.appendCall(CodeMonitorStoreCountActionJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountActionJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCountActionJobsFunc) SetDefaultHook(hook func(context.Context, ListActionJobsOpts) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountActionJobs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCountActionJobsFunc) PushHook(hook func(context.Context, ListActionJobsOpts) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCountActionJobsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionJobsOpts) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCountActionJobsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ListActionJobsOpts) (int, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountActionJobsFunc) nextHook() func(context.Context, ListActionJobsOpts) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountActionJobsFunc) appendCall(r0 CodeMonitorStoreCountActionJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCountActionJobsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCountActionJobsFunc) History() []CodeMonitorStoreCountActionJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountActionJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountActionJobsFuncCall is an object that describes an
// invocation of method CountActionJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountActionJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionJobsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountActionJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountActionJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCountEmailActionsFunc describes the behavior when the
// CountEmailActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCountEmailActionsFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []CodeMonitorStoreCountEmailActionsFuncCall
	mutex       sync.Mutex
}

// CountEmailActions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountEmailActions(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.CountEmailActionsFunc.nextHook()(v0, v1)
	m.CountEmailActionsFunc.appendCall(CodeMonitorStoreCountEmailActionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountEmailActions
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCountEmailActionsFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountEmailActions method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCountEmailActionsFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCountEmailActionsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCountEmailActionsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountEmailActionsFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountEmailActionsFunc) appendCall(r0 CodeMonitorStoreCountEmailActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCountEmailActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCountEmailActionsFunc) History() []CodeMonitorStoreCountEmailActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountEmailActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountEmailActionsFuncCall is an object that describes an
// invocation of method CountEmailActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountEmailActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountEmailActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountEmailActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCountMonitorsFunc describes the behavior when the
// CountMonitors method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCountMonitorsFunc struct {
	defaultHook func(context.Context, int32) (int32, error)
	hooks       []func(context.Context, int32) (int32, error)
	history     []CodeMonitorStoreCountMonitorsFuncCall
	mutex       sync.Mutex
}

// CountMonitors delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountMonitors(v0 context.Context, v1 int32) (int32, error) {
	r0, r1 := m.CountMonitorsFunc.nextHook()(v0, v1)
	m.CountMonitorsFunc.appendCall(CodeMonitorStoreCountMonitorsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountMonitors method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreCountMonitorsFunc) SetDefaultHook(hook func(context.Context, int32) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountMonitors method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreCountMonitorsFunc) PushHook(hook func(context.Context, int32) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCountMonitorsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCountMonitorsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int32) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountMonitorsFunc) nextHook() func(context.Context, int32) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountMonitorsFunc) appendCall(r0 CodeMonitorStoreCountMonitorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCountMonitorsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCountMonitorsFunc) History() []CodeMonitorStoreCountMonitorsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountMonitorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountMonitorsFuncCall is an object that describes an
// invocation of method CountMonitors on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountMonitorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountMonitorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountMonitorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCountQueryTriggerJobsFunc describes the behavior when the
// CountQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreCountQueryTriggerJobsFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []CodeMonitorStoreCountQueryTriggerJobsFuncCall
	mutex       sync.Mutex
}

// CountQueryTriggerJobs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountQueryTriggerJobs(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.CountQueryTriggerJobsFunc.nextHook()(v0, v1)
	m.CountQueryTriggerJobsFunc.appendCall(CodeMonitorStoreCountQueryTriggerJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) appendCall(r0 CodeMonitorStoreCountQueryTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreCountQueryTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreCountQueryTriggerJobsFunc) History() []CodeMonitorStoreCountQueryTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountQueryTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountQueryTriggerJobsFuncCall is an object that describes
// an invocation of method CountQueryTriggerJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountQueryTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountQueryTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountQueryTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCountRecipientsFunc describes the behavior when the
// CountRecipients method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCountRecipientsFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []CodeMonitorStoreCountRecipientsFuncCall
	mutex       sync.Mutex
}

// CountRecipients delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CountRecipients(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.CountRecipientsFunc.nextHook()(v0, v1)
	m.CountRecipientsFunc.appendCall(CodeMonitorStoreCountRecipientsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountRecipients
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCountRecipientsFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountRecipients method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCountRecipientsFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCountRecipientsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCountRecipientsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCountRecipientsFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCountRecipientsFunc) appendCall(r0 CodeMonitorStoreCountRecipientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCountRecipientsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCountRecipientsFunc) History() []CodeMonitorStoreCountRecipientsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCountRecipientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCountRecipientsFuncCall is an object that describes an
// invocation of method CountRecipients on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCountRecipientsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCountRecipientsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCountRecipientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateActionsFunc describes the behavior when the
// CreateActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateActionsFunc struct {
	defaultHook func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error
	hooks       []func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error
	history     []CodeMonitorStoreCreateActionsFuncCall
	mutex       sync.Mutex
}

// CreateActions delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateActions(v0 context.Context, v1 []*graphqlbackend.CreateActionArgs, v2 int64) error {
	r0 := m.CreateActionsFunc.nextHook()(v0, v1, v2)
	m.CreateActionsFunc.appendCall(CodeMonitorStoreCreateActionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateActions method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreCreateActionsFunc) SetDefaultHook(hook func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateActions method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreCreateActionsFunc) PushHook(hook func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateActionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateActionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreCreateActionsFunc) nextHook() func(context.Context, []*graphqlbackend.CreateActionArgs, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateActionsFunc) appendCall(r0 CodeMonitorStoreCreateActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateActionsFunc) History() []CodeMonitorStoreCreateActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateActionsFuncCall is an object that describes an
// invocation of method CreateActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*graphqlbackend.CreateActionArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreCreateCodeMonitorFunc describes the behavior when the
// CreateCodeMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateCodeMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreCreateCodeMonitorFuncCall
	mutex       sync.Mutex
}

// CreateCodeMonitor delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateCodeMonitor(v0 context.Context, v1 *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
	r0, r1 := m.CreateCodeMonitorFunc.nextHook()(v0, v1)
	m.CreateCodeMonitorFunc.appendCall(CodeMonitorStoreCreateCodeMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateCodeMonitor
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCodeMonitor method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateCodeMonitorFunc) nextHook() func(context.Context, *graphqlbackend.CreateCodeMonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateCodeMonitorFunc) appendCall(r0 CodeMonitorStoreCreateCodeMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateCodeMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateCodeMonitorFunc) History() []CodeMonitorStoreCreateCodeMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateCodeMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateCodeMonitorFuncCall is an object that describes an
// invocation of method CreateCodeMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateCodeMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.CreateCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateCodeMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateCodeMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateEmailActionFunc describes the behavior when the
// CreateEmailAction method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateEmailActionFunc struct {
	defaultHook func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*EmailAction, error)
	hooks       []func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*EmailAction, error)
	history     []CodeMonitorStoreCreateEmailActionFuncCall
	mutex       sync.Mutex
}

// CreateEmailAction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateEmailAction(v0 context.Context, v1 int64, v2 *graphqlbackend.CreateActionArgs) (*EmailAction, error) {
	r0, r1 := m.CreateEmailActionFunc.nextHook()(v0, v1, v2)
	m.CreateEmailActionFunc.appendCall(CodeMonitorStoreCreateEmailActionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateEmailAction
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateEmailActionFunc) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*EmailAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateEmailAction method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateEmailActionFunc) PushHook(hook func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*EmailAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateEmailActionFunc) SetDefaultReturn(r0 *EmailAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*EmailAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateEmailActionFunc) PushReturn(r0 *EmailAction, r1 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*EmailAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateEmailActionFunc) nextHook() func(context.Context, int64, *graphqlbackend.CreateActionArgs) (*EmailAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateEmailActionFunc) appendCall(r0 CodeMonitorStoreCreateEmailActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateEmailActionFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateEmailActionFunc) History() []CodeMonitorStoreCreateEmailActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateEmailActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateEmailActionFuncCall is an object that describes an
// invocation of method CreateEmailAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateEmailActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.CreateActionArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *EmailAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateEmailActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateEmailActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateMonitorFunc describes the behavior when the
// CreateMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreCreateMonitorFuncCall
	mutex       sync.Mutex
}

// CreateMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateMonitor(v0 context.Context, v1 *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
	r0, r1 := m.CreateMonitorFunc.nextHook()(v0, v1)
	m.CreateMonitorFunc.appendCall(CodeMonitorStoreCreateMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreCreateMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreCreateMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreCreateMonitorFunc) nextHook() func(context.Context, *graphqlbackend.CreateMonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateMonitorFunc) appendCall(r0 CodeMonitorStoreCreateMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateMonitorFunc) History() []CodeMonitorStoreCreateMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateMonitorFuncCall is an object that describes an
// invocation of method CreateMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.CreateMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreCreateQueryTriggerFunc describes the behavior when the
// CreateQueryTrigger method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateQueryTriggerFunc struct {
	defaultHook func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error
	hooks       []func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error
	history     []CodeMonitorStoreCreateQueryTriggerFuncCall
	mutex       sync.Mutex
}

// CreateQueryTrigger delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateQueryTrigger(v0 context.Context, v1 int64, v2 *graphqlbackend.CreateTriggerArgs) error {
	r0 := m.CreateQueryTriggerFunc.nextHook()(v0, v1, v2)
	m.CreateQueryTriggerFunc.appendCall(CodeMonitorStoreCreateQueryTriggerFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateQueryTrigger
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateQueryTrigger method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) PushHook(hook func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error {
		return r0
	})
}

func (f *CodeMonitorStoreCreateQueryTriggerFunc) nextHook() func(context.Context, int64, *graphqlbackend.CreateTriggerArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateQueryTriggerFunc) appendCall(r0 CodeMonitorStoreCreateQueryTriggerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateQueryTriggerFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateQueryTriggerFunc) History() []CodeMonitorStoreCreateQueryTriggerFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateQueryTriggerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateQueryTriggerFuncCall is an object that describes an
// invocation of method CreateQueryTrigger on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateQueryTriggerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.CreateTriggerArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateQueryTriggerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateQueryTriggerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreCreateRecipientsFunc describes the behavior when the
// CreateRecipients method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreCreateRecipientsFunc struct {
	defaultHook func(context.Context, []graphqlgo.ID, int64) error
	hooks       []func(context.Context, []graphqlgo.ID, int64) error
	history     []CodeMonitorStoreCreateRecipientsFuncCall
	mutex       sync.Mutex
}

// CreateRecipients delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) CreateRecipients(v0 context.Context, v1 []graphqlgo.ID, v2 int64) error {
	r0 := m.CreateRecipientsFunc.nextHook()(v0, v1, v2)
	m.CreateRecipientsFunc.appendCall(CodeMonitorStoreCreateRecipientsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateRecipients
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreCreateRecipientsFunc) SetDefaultHook(hook func(context.Context, []graphqlgo.ID, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateRecipients method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreCreateRecipientsFunc) PushHook(hook func(context.Context, []graphqlgo.ID, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreCreateRecipientsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []graphqlgo.ID, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreCreateRecipientsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []graphqlgo.ID, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreCreateRecipientsFunc) nextHook() func(context.Context, []graphqlgo.ID, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreCreateRecipientsFunc) appendCall(r0 CodeMonitorStoreCreateRecipientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreCreateRecipientsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreCreateRecipientsFunc) History() []CodeMonitorStoreCreateRecipientsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreCreateRecipientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreCreateRecipientsFuncCall is an object that describes an
// invocation of method CreateRecipients on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreCreateRecipientsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []graphqlgo.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreCreateRecipientsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreCreateRecipientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteEmailActionsFunc describes the behavior when the
// DeleteEmailActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteEmailActionsFunc struct {
	defaultHook func(context.Context, []int64, int64) error
	hooks       []func(context.Context, []int64, int64) error
	history     []CodeMonitorStoreDeleteEmailActionsFuncCall
	mutex       sync.Mutex
}

// DeleteEmailActions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteEmailActions(v0 context.Context, v1 []int64, v2 int64) error {
	r0 := m.DeleteEmailActionsFunc.nextHook()(v0, v1, v2)
	m.DeleteEmailActionsFunc.appendCall(CodeMonitorStoreDeleteEmailActionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteEmailActions
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) SetDefaultHook(hook func(context.Context, []int64, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteEmailActions method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) PushHook(hook func(context.Context, []int64, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int64, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int64, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteEmailActionsFunc) nextHook() func(context.Context, []int64, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteEmailActionsFunc) appendCall(r0 CodeMonitorStoreDeleteEmailActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteEmailActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteEmailActionsFunc) History() []CodeMonitorStoreDeleteEmailActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteEmailActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteEmailActionsFuncCall is an object that describes an
// invocation of method DeleteEmailActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteEmailActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteEmailActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteEmailActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteMonitorFunc describes the behavior when the
// DeleteMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error
	hooks       []func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error
	history     []CodeMonitorStoreDeleteMonitorFuncCall
	mutex       sync.Mutex
}

// DeleteMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteMonitor(v0 context.Context, v1 *graphqlbackend.DeleteCodeMonitorArgs) error {
	r0 := m.DeleteMonitorFunc.nextHook()(v0, v1)
	m.DeleteMonitorFunc.appendCall(CodeMonitorStoreDeleteMonitorFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreDeleteMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreDeleteMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteMonitorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteMonitorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteMonitorFunc) nextHook() func(context.Context, *graphqlbackend.DeleteCodeMonitorArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteMonitorFunc) appendCall(r0 CodeMonitorStoreDeleteMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteMonitorFunc) History() []CodeMonitorStoreDeleteMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteMonitorFuncCall is an object that describes an
// invocation of method DeleteMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.DeleteCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteObsoleteTriggerJobsFunc describes the behavior when
// the DeleteObsoleteTriggerJobs method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreDeleteObsoleteTriggerJobsFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall
	mutex       sync.Mutex
}

// DeleteObsoleteTriggerJobs delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteObsoleteTriggerJobs(v0 context.Context) error {
	r0 := m.DeleteObsoleteTriggerJobsFunc.nextHook()(v0)
	m.DeleteObsoleteTriggerJobsFunc.appendCall(CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteObsoleteTriggerJobs method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteObsoleteTriggerJobs method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) appendCall(r0 CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreDeleteObsoleteTriggerJobsFunc) History() []CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall is an object that
// describes an invocation of method DeleteObsoleteTriggerJobs on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteObsoleteTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteOldTriggerJobsFunc describes the behavior when the
// DeleteOldTriggerJobs method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreDeleteOldTriggerJobsFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []CodeMonitorStoreDeleteOldTriggerJobsFuncCall
	mutex       sync.Mutex
}

// DeleteOldTriggerJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteOldTriggerJobs(v0 context.Context, v1 int) error {
	r0 := m.DeleteOldTriggerJobsFunc.nextHook()(v0, v1)
	m.DeleteOldTriggerJobsFunc.appendCall(CodeMonitorStoreDeleteOldTriggerJobsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteOldTriggerJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOldTriggerJobs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) appendCall(r0 CodeMonitorStoreDeleteOldTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreDeleteOldTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreDeleteOldTriggerJobsFunc) History() []CodeMonitorStoreDeleteOldTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteOldTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteOldTriggerJobsFuncCall is an object that describes
// an invocation of method DeleteOldTriggerJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteOldTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteOldTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteOldTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDeleteRecipientsFunc describes the behavior when the
// DeleteRecipients method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreDeleteRecipientsFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []CodeMonitorStoreDeleteRecipientsFuncCall
	mutex       sync.Mutex
}

// DeleteRecipients delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) DeleteRecipients(v0 context.Context, v1 int64) error {
	r0 := m.DeleteRecipientsFunc.nextHook()(v0, v1)
	m.DeleteRecipientsFunc.appendCall(CodeMonitorStoreDeleteRecipientsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteRecipients
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreDeleteRecipientsFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteRecipients method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreDeleteRecipientsFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDeleteRecipientsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDeleteRecipientsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreDeleteRecipientsFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDeleteRecipientsFunc) appendCall(r0 CodeMonitorStoreDeleteRecipientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDeleteRecipientsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreDeleteRecipientsFunc) History() []CodeMonitorStoreDeleteRecipientsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDeleteRecipientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDeleteRecipientsFuncCall is an object that describes an
// invocation of method DeleteRecipients on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreDeleteRecipientsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDeleteRecipientsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDeleteRecipientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreDoneFunc describes the behavior when the Done method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []CodeMonitorStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(CodeMonitorStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *CodeMonitorStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreDoneFunc) appendCall(r0 CodeMonitorStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreDoneFunc) History() []CodeMonitorStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockCodeMonitorStore.
type CodeMonitorStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreEnqueueActionJobsForQueryFunc describes the behavior when
// the EnqueueActionJobsForQuery method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreEnqueueActionJobsForQueryFunc struct {
	defaultHook func(context.Context, int64, int) error
	hooks       []func(context.Context, int64, int) error
	history     []CodeMonitorStoreEnqueueActionJobsForQueryFuncCall
	mutex       sync.Mutex
}

// EnqueueActionJobsForQuery delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) EnqueueActionJobsForQuery(v0 context.Context, v1 int64, v2 int) error {
	r0 := m.EnqueueActionJobsForQueryFunc.nextHook()(v0, v1, v2)
	m.EnqueueActionJobsForQueryFunc.appendCall(CodeMonitorStoreEnqueueActionJobsForQueryFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// EnqueueActionJobsForQuery method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreEnqueueActionJobsForQueryFunc) SetDefaultHook(hook func(context.Context, int64, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueActionJobsForQuery method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreEnqueueActionJobsForQueryFunc) PushHook(hook func(context.Context, int64, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreEnqueueActionJobsForQueryFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreEnqueueActionJobsForQueryFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, int) error {
		return r0
	})
}

func (f *CodeMonitorStoreEnqueueActionJobsForQueryFunc) nextHook() func(context.Context, int64, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreEnqueueActionJobsForQueryFunc) appendCall(r0 CodeMonitorStoreEnqueueActionJobsForQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreEnqueueActionJobsForQueryFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreEnqueueActionJobsForQueryFunc) History() []CodeMonitorStoreEnqueueActionJobsForQueryFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreEnqueueActionJobsForQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreEnqueueActionJobsForQueryFuncCall is an object that
// describes an invocation of method EnqueueActionJobsForQuery on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreEnqueueActionJobsForQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreEnqueueActionJobsForQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreEnqueueActionJobsForQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreEnqueueQueryTriggerJobsFunc describes the behavior when
// the EnqueueQueryTriggerJobs method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreEnqueueQueryTriggerJobsFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall
	mutex       sync.Mutex
}

// EnqueueQueryTriggerJobs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) EnqueueQueryTriggerJobs(v0 context.Context) error {
	r0 := m.EnqueueQueryTriggerJobsFunc.nextHook()(v0)
	m.EnqueueQueryTriggerJobsFunc.appendCall(CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// EnqueueQueryTriggerJobs method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueQueryTriggerJobs method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) appendCall(r0 CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreEnqueueQueryTriggerJobsFunc) History() []CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall is an object that
// describes an invocation of method EnqueueQueryTriggerJobs on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreEnqueueQueryTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreExecFunc describes the behavior when the Exec method of
// the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreExecFunc struct {
	defaultHook func(context.Context, *sqlf.Query) error
	hooks       []func(context.Context, *sqlf.Query) error
	history     []CodeMonitorStoreExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Exec(v0 context.Context, v1 *sqlf.Query) error {
	r0 := m.ExecFunc.nextHook()(v0, v1)
	m.ExecFunc.appendCall(CodeMonitorStoreExecFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreExecFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreExecFunc) PushHook(hook func(context.Context, *sqlf.Query) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreExecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreExecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

func (f *CodeMonitorStoreExecFunc) nextHook() func(context.Context, *sqlf.Query) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreExecFunc) appendCall(r0 CodeMonitorStoreExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreExecFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreExecFunc) History() []CodeMonitorStoreExecFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreExecFuncCall is an object that describes an invocation of
// method Exec on an instance of MockCodeMonitorStore.
type CodeMonitorStoreExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreExecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreGetActionJobFunc describes the behavior when the
// GetActionJob method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreGetActionJobFunc struct {
	defaultHook func(context.Context, int) (*ActionJob, error)
	hooks       []func(context.Context, int) (*ActionJob, error)
	history     []CodeMonitorStoreGetActionJobFuncCall
	mutex       sync.Mutex
}

// GetActionJob delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetActionJob(v0 context.Context, v1 int) (*ActionJob, error) {
	r0, r1 := m.GetActionJobFunc.nextHook()(v0, v1)
	m.GetActionJobFunc.appendCall(CodeMonitorStoreGetActionJobFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetActionJob method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreGetActionJobFunc) SetDefaultHook(hook func(context.Context, int) (*ActionJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetActionJob method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreGetActionJobFunc) PushHook(hook func(context.Context, int) (*ActionJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreGetActionJobFunc) SetDefaultReturn(r0 *ActionJob, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*ActionJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreGetActionJobFunc) PushReturn(r0 *ActionJob, r1 error) {
	f.PushHook(func(context.Context, int) (*ActionJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetActionJobFunc) nextHook() func(context.Context, int) (*ActionJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetActionJobFunc) appendCall(r0 CodeMonitorStoreGetActionJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreGetActionJobFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreGetActionJobFunc) History() []CodeMonitorStoreGetActionJobFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetActionJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetActionJobFuncCall is an object that describes an
// invocation of method GetActionJob on an instance of MockCodeMonitorStore.
type CodeMonitorStoreGetActionJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *ActionJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetActionJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetActionJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetActionJobMetadataFunc describes the behavior when the
// GetActionJobMetadata method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreGetActionJobMetadataFunc struct {
	defaultHook func(context.Context, int) (*ActionJobMetadata, error)
	hooks       []func(context.Context, int) (*ActionJobMetadata, error)
	history     []CodeMonitorStoreGetActionJobMetadataFuncCall
	mutex       sync.Mutex
}

// GetActionJobMetadata delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetActionJobMetadata(v0 context.Context, v1 int) (*ActionJobMetadata, error) {
	r0, r1 := m.GetActionJobMetadataFunc.nextHook()(v0, v1)
	m.GetActionJobMetadataFunc.appendCall(CodeMonitorStoreGetActionJobMetadataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetActionJobMetadata
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) SetDefaultHook(hook func(context.Context, int) (*ActionJobMetadata, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetActionJobMetadata method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) PushHook(hook func(context.Context, int) (*ActionJobMetadata, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) SetDefaultReturn(r0 *ActionJobMetadata, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*ActionJobMetadata, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) PushReturn(r0 *ActionJobMetadata, r1 error) {
	f.PushHook(func(context.Context, int) (*ActionJobMetadata, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetActionJobMetadataFunc) nextHook() func(context.Context, int) (*ActionJobMetadata, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetActionJobMetadataFunc) appendCall(r0 CodeMonitorStoreGetActionJobMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreGetActionJobMetadataFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreGetActionJobMetadataFunc) History() []CodeMonitorStoreGetActionJobMetadataFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetActionJobMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetActionJobMetadataFuncCall is an object that describes
// an invocation of method GetActionJobMetadata on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetActionJobMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *ActionJobMetadata
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetActionJobMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetActionJobMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetEmailActionFunc describes the behavior when the
// GetEmailAction method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreGetEmailActionFunc struct {
	defaultHook func(context.Context, int64) (*EmailAction, error)
	hooks       []func(context.Context, int64) (*EmailAction, error)
	history     []CodeMonitorStoreGetEmailActionFuncCall
	mutex       sync.Mutex
}

// GetEmailAction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetEmailAction(v0 context.Context, v1 int64) (*EmailAction, error) {
	r0, r1 := m.GetEmailActionFunc.nextHook()(v0, v1)
	m.GetEmailActionFunc.appendCall(CodeMonitorStoreGetEmailActionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetEmailAction
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreGetEmailActionFunc) SetDefaultHook(hook func(context.Context, int64) (*EmailAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEmailAction method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreGetEmailActionFunc) PushHook(hook func(context.Context, int64) (*EmailAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreGetEmailActionFunc) SetDefaultReturn(r0 *EmailAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*EmailAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreGetEmailActionFunc) PushReturn(r0 *EmailAction, r1 error) {
	f.PushHook(func(context.Context, int64) (*EmailAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetEmailActionFunc) nextHook() func(context.Context, int64) (*EmailAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetEmailActionFunc) appendCall(r0 CodeMonitorStoreGetEmailActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreGetEmailActionFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreGetEmailActionFunc) History() []CodeMonitorStoreGetEmailActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetEmailActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetEmailActionFuncCall is an object that describes an
// invocation of method GetEmailAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetEmailActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *EmailAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetEmailActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetEmailActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetMonitorFunc describes the behavior when the GetMonitor
// method of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreGetMonitorFunc struct {
	defaultHook func(context.Context, int64) (*Monitor, error)
	hooks       []func(context.Context, int64) (*Monitor, error)
	history     []CodeMonitorStoreGetMonitorFuncCall
	mutex       sync.Mutex
}

// GetMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetMonitor(v0 context.Context, v1 int64) (*Monitor, error) {
	r0, r1 := m.GetMonitorFunc.nextHook()(v0, v1)
	m.GetMonitorFunc.appendCall(CodeMonitorStoreGetMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetMonitor method of
// the parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreGetMonitorFunc) SetDefaultHook(hook func(context.Context, int64) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMonitor method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreGetMonitorFunc) PushHook(hook func(context.Context, int64) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreGetMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreGetMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, int64) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetMonitorFunc) nextHook() func(context.Context, int64) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetMonitorFunc) appendCall(r0 CodeMonitorStoreGetMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreGetMonitorFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreGetMonitorFunc) History() []CodeMonitorStoreGetMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetMonitorFuncCall is an object that describes an
// invocation of method GetMonitor on an instance of MockCodeMonitorStore.
type CodeMonitorStoreGetMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetQueryTriggerForJobFunc describes the behavior when the
// GetQueryTriggerForJob method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreGetQueryTriggerForJobFunc struct {
	defaultHook func(context.Context, int) (*QueryTrigger, error)
	hooks       []func(context.Context, int) (*QueryTrigger, error)
	history     []CodeMonitorStoreGetQueryTriggerForJobFuncCall
	mutex       sync.Mutex
}

// GetQueryTriggerForJob delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetQueryTriggerForJob(v0 context.Context, v1 int) (*QueryTrigger, error) {
	r0, r1 := m.GetQueryTriggerForJobFunc.nextHook()(v0, v1)
	m.GetQueryTriggerForJobFunc.appendCall(CodeMonitorStoreGetQueryTriggerForJobFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetQueryTriggerForJob method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) SetDefaultHook(hook func(context.Context, int) (*QueryTrigger, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetQueryTriggerForJob method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) PushHook(hook func(context.Context, int) (*QueryTrigger, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) SetDefaultReturn(r0 *QueryTrigger, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*QueryTrigger, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) PushReturn(r0 *QueryTrigger, r1 error) {
	f.PushHook(func(context.Context, int) (*QueryTrigger, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) nextHook() func(context.Context, int) (*QueryTrigger, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) appendCall(r0 CodeMonitorStoreGetQueryTriggerForJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreGetQueryTriggerForJobFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreGetQueryTriggerForJobFunc) History() []CodeMonitorStoreGetQueryTriggerForJobFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetQueryTriggerForJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetQueryTriggerForJobFuncCall is an object that describes
// an invocation of method GetQueryTriggerForJob on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreGetQueryTriggerForJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *QueryTrigger
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetQueryTriggerForJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetQueryTriggerForJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreGetQueryTriggerForMonitorFunc describes the behavior when
// the GetQueryTriggerForMonitor method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreGetQueryTriggerForMonitorFunc struct {
	defaultHook func(context.Context, int64) (*QueryTrigger, error)
	hooks       []func(context.Context, int64) (*QueryTrigger, error)
	history     []CodeMonitorStoreGetQueryTriggerForMonitorFuncCall
	mutex       sync.Mutex
}

// GetQueryTriggerForMonitor delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) GetQueryTriggerForMonitor(v0 context.Context, v1 int64) (*QueryTrigger, error) {
	r0, r1 := m.GetQueryTriggerForMonitorFunc.nextHook()(v0, v1)
	m.GetQueryTriggerForMonitorFunc.appendCall(CodeMonitorStoreGetQueryTriggerForMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetQueryTriggerForMonitor method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) SetDefaultHook(hook func(context.Context, int64) (*QueryTrigger, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetQueryTriggerForMonitor method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) PushHook(hook func(context.Context, int64) (*QueryTrigger, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) SetDefaultReturn(r0 *QueryTrigger, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*QueryTrigger, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) PushReturn(r0 *QueryTrigger, r1 error) {
	f.PushHook(func(context.Context, int64) (*QueryTrigger, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) nextHook() func(context.Context, int64) (*QueryTrigger, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) appendCall(r0 CodeMonitorStoreGetQueryTriggerForMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreGetQueryTriggerForMonitorFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreGetQueryTriggerForMonitorFunc) History() []CodeMonitorStoreGetQueryTriggerForMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreGetQueryTriggerForMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreGetQueryTriggerForMonitorFuncCall is an object that
// describes an invocation of method GetQueryTriggerForMonitor on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreGetQueryTriggerForMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *QueryTrigger
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreGetQueryTriggerForMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreGetQueryTriggerForMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreHandleFunc describes the behavior when the Handle method
// of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []CodeMonitorStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(CodeMonitorStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *CodeMonitorStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreHandleFunc) appendCall(r0 CodeMonitorStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreHandleFunc) History() []CodeMonitorStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockCodeMonitorStore.
type CodeMonitorStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreListActionJobsFunc describes the behavior when the
// ListActionJobs method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListActionJobsFunc struct {
	defaultHook func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)
	hooks       []func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)
	history     []CodeMonitorStoreListActionJobsFuncCall
	mutex       sync.Mutex
}

// ListActionJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListActionJobs(v0 context.Context, v1 ListActionJobsOpts) ([]*ActionJob, error) {
	r0, r1 := m.ListActionJobsFunc.nextHook()(v0, v1)
	m.ListActionJobsFunc.appendCall(CodeMonitorStoreListActionJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListActionJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListActionJobsFunc) SetDefaultHook(hook func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListActionJobs method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreListActionJobsFunc) PushHook(hook func(context.Context, ListActionJobsOpts) ([]*ActionJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreListActionJobsFunc) SetDefaultReturn(r0 []*ActionJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreListActionJobsFunc) PushReturn(r0 []*ActionJob, r1 error) {
	f.PushHook(func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListActionJobsFunc) nextHook() func(context.Context, ListActionJobsOpts) ([]*ActionJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListActionJobsFunc) appendCall(r0 CodeMonitorStoreListActionJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListActionJobsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListActionJobsFunc) History() []CodeMonitorStoreListActionJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListActionJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListActionJobsFuncCall is an object that describes an
// invocation of method ListActionJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListActionJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionJobsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*ActionJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListActionJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListActionJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListAllRecipientsForEmailActionFunc describes the
// behavior when the ListAllRecipientsForEmailAction method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreListAllRecipientsForEmailActionFunc struct {
	defaultHook func(context.Context, int64) ([]*Recipient, error)
	hooks       []func(context.Context, int64) ([]*Recipient, error)
	history     []CodeMonitorStoreListAllRecipientsForEmailActionFuncCall
	mutex       sync.Mutex
}

// ListAllRecipientsForEmailAction delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListAllRecipientsForEmailAction(v0 context.Context, v1 int64) ([]*Recipient, error) {
	r0, r1 := m.ListAllRecipientsForEmailActionFunc.nextHook()(v0, v1)
	m.ListAllRecipientsForEmailActionFunc.appendCall(CodeMonitorStoreListAllRecipientsForEmailActionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListAllRecipientsForEmailAction method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreListAllRecipientsForEmailActionFunc) SetDefaultHook(hook func(context.Context, int64) ([]*Recipient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAllRecipientsForEmailAction method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreListAllRecipientsForEmailActionFunc) PushHook(hook func(context.Context, int64) ([]*Recipient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreListAllRecipientsForEmailActionFunc) SetDefaultReturn(r0 []*Recipient, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) ([]*Recipient, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreListAllRecipientsForEmailActionFunc) PushReturn(r0 []*Recipient, r1 error) {
	f.PushHook(func(context.Context, int64) ([]*Recipient, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListAllRecipientsForEmailActionFunc) nextHook() func(context.Context, int64) ([]*Recipient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListAllRecipientsForEmailActionFunc) appendCall(r0 CodeMonitorStoreListAllRecipientsForEmailActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreListAllRecipientsForEmailActionFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreListAllRecipientsForEmailActionFunc) History() []CodeMonitorStoreListAllRecipientsForEmailActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListAllRecipientsForEmailActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListAllRecipientsForEmailActionFuncCall is an object that
// describes an invocation of method ListAllRecipientsForEmailAction on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreListAllRecipientsForEmailActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Recipient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListAllRecipientsForEmailActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListAllRecipientsForEmailActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListEmailActionsFunc describes the behavior when the
// ListEmailActions method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListEmailActionsFunc struct {
	defaultHook func(context.Context, ListActionsOpts) ([]*EmailAction, error)
	hooks       []func(context.Context, ListActionsOpts) ([]*EmailAction, error)
	history     []CodeMonitorStoreListEmailActionsFuncCall
	mutex       sync.Mutex
}

// ListEmailActions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListEmailActions(v0 context.Context, v1 ListActionsOpts) ([]*EmailAction, error) {
	r0, r1 := m.ListEmailActionsFunc.nextHook()(v0, v1)
	m.ListEmailActionsFunc.appendCall(CodeMonitorStoreListEmailActionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListEmailActions
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListEmailActionsFunc) SetDefaultHook(hook func(context.Context, ListActionsOpts) ([]*EmailAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListEmailActions method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreListEmailActionsFunc) PushHook(hook func(context.Context, ListActionsOpts) ([]*EmailAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreListEmailActionsFunc) SetDefaultReturn(r0 []*EmailAction, r1 error) {
	f.SetDefaultHook(func(context.Context, ListActionsOpts) ([]*EmailAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreListEmailActionsFunc) PushReturn(r0 []*EmailAction, r1 error) {
	f.PushHook(func(context.Context, ListActionsOpts) ([]*EmailAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListEmailActionsFunc) nextHook() func(context.Context, ListActionsOpts) ([]*EmailAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListEmailActionsFunc) appendCall(r0 CodeMonitorStoreListEmailActionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListEmailActionsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListEmailActionsFunc) History() []CodeMonitorStoreListEmailActionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListEmailActionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListEmailActionsFuncCall is an object that describes an
// invocation of method ListEmailActions on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListEmailActionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListActionsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*EmailAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListEmailActionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListEmailActionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListMonitorsFunc describes the behavior when the
// ListMonitors method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreListMonitorsFunc struct {
	defaultHook func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error)
	hooks       []func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error)
	history     []CodeMonitorStoreListMonitorsFuncCall
	mutex       sync.Mutex
}

// ListMonitors delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListMonitors(v0 context.Context, v1 int32, v2 *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
	r0, r1 := m.ListMonitorsFunc.nextHook()(v0, v1, v2)
	m.ListMonitorsFunc.appendCall(CodeMonitorStoreListMonitorsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListMonitors method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreListMonitorsFunc) SetDefaultHook(hook func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListMonitors method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreListMonitorsFunc) PushHook(hook func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreListMonitorsFunc) SetDefaultReturn(r0 []*Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreListMonitorsFunc) PushReturn(r0 []*Monitor, r1 error) {
	f.PushHook(func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListMonitorsFunc) nextHook() func(context.Context, int32, *graphqlbackend.ListMonitorsArgs) ([]*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListMonitorsFunc) appendCall(r0 CodeMonitorStoreListMonitorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreListMonitorsFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreListMonitorsFunc) History() []CodeMonitorStoreListMonitorsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListMonitorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListMonitorsFuncCall is an object that describes an
// invocation of method ListMonitors on an instance of MockCodeMonitorStore.
type CodeMonitorStoreListMonitorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.ListMonitorsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListMonitorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListMonitorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListQueryTriggerJobsFunc describes the behavior when the
// ListQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// is invoked.
type CodeMonitorStoreListQueryTriggerJobsFunc struct {
	defaultHook func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJob, error)
	hooks       []func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJob, error)
	history     []CodeMonitorStoreListQueryTriggerJobsFuncCall
	mutex       sync.Mutex
}

// ListQueryTriggerJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListQueryTriggerJobs(v0 context.Context, v1 int64, v2 *graphqlbackend.ListEventsArgs) ([]*TriggerJob, error) {
	r0, r1 := m.ListQueryTriggerJobsFunc.nextHook()(v0, v1, v2)
	m.ListQueryTriggerJobsFunc.appendCall(CodeMonitorStoreListQueryTriggerJobsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListQueryTriggerJobs
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListQueryTriggerJobs method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) PushHook(hook func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) SetDefaultReturn(r0 []*TriggerJob, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) PushReturn(r0 []*TriggerJob, r1 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJob, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListQueryTriggerJobsFunc) nextHook() func(context.Context, int64, *graphqlbackend.ListEventsArgs) ([]*TriggerJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListQueryTriggerJobsFunc) appendCall(r0 CodeMonitorStoreListQueryTriggerJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreListQueryTriggerJobsFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreListQueryTriggerJobsFunc) History() []CodeMonitorStoreListQueryTriggerJobsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListQueryTriggerJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListQueryTriggerJobsFuncCall is an object that describes
// an invocation of method ListQueryTriggerJobs on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreListQueryTriggerJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.ListEventsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*TriggerJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListQueryTriggerJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListQueryTriggerJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreListRecipientsForEmailActionFunc describes the behavior
// when the ListRecipientsForEmailAction method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreListRecipientsForEmailActionFunc struct {
	defaultHook func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error)
	hooks       []func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error)
	history     []CodeMonitorStoreListRecipientsForEmailActionFuncCall
	mutex       sync.Mutex
}

// ListRecipientsForEmailAction delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ListRecipientsForEmailAction(v0 context.Context, v1 int64, v2 *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
	r0, r1 := m.ListRecipientsForEmailActionFunc.nextHook()(v0, v1, v2)
	m.ListRecipientsForEmailActionFunc.appendCall(CodeMonitorStoreListRecipientsForEmailActionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListRecipientsForEmailAction method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreListRecipientsForEmailActionFunc) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRecipientsForEmailAction method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreListRecipientsForEmailActionFunc) PushHook(hook func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreListRecipientsForEmailActionFunc) SetDefaultReturn(r0 []*Recipient, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreListRecipientsForEmailActionFunc) PushReturn(r0 []*Recipient, r1 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreListRecipientsForEmailActionFunc) nextHook() func(context.Context, int64, *graphqlbackend.ListRecipientsArgs) ([]*Recipient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreListRecipientsForEmailActionFunc) appendCall(r0 CodeMonitorStoreListRecipientsForEmailActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreListRecipientsForEmailActionFuncCall objects describing
// the invocations of this function.
func (f *CodeMonitorStoreListRecipientsForEmailActionFunc) History() []CodeMonitorStoreListRecipientsForEmailActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreListRecipientsForEmailActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreListRecipientsForEmailActionFuncCall is an object that
// describes an invocation of method ListRecipientsForEmailAction on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreListRecipientsForEmailActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.ListRecipientsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Recipient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreListRecipientsForEmailActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreListRecipientsForEmailActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreNowFunc describes the behavior when the Now method of the
// parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreNowFunc struct {
	defaultHook func() time.Time
	hooks       []func() time.Time
	history     []CodeMonitorStoreNowFuncCall
	mutex       sync.Mutex
}

// Now delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Now() time.Time {
	r0 := m.NowFunc.nextHook()()
	m.NowFunc.appendCall(CodeMonitorStoreNowFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Now method of the
// parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreNowFunc) SetDefaultHook(hook func() time.Time) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Now method of the parent MockCodeMonitorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CodeMonitorStoreNowFunc) PushHook(hook func() time.Time) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreNowFunc) SetDefaultReturn(r0 time.Time) {
	f.SetDefaultHook(func() time.Time {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreNowFunc) PushReturn(r0 time.Time) {
	f.PushHook(func() time.Time {
		return r0
	})
}

func (f *CodeMonitorStoreNowFunc) nextHook() func() time.Time {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreNowFunc) appendCall(r0 CodeMonitorStoreNowFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreNowFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreNowFunc) History() []CodeMonitorStoreNowFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreNowFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreNowFuncCall is an object that describes an invocation of
// method Now on an instance of MockCodeMonitorStore.
type CodeMonitorStoreNowFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Time
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreNowFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreNowFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreResetQueryTriggerTimestampsFunc describes the behavior
// when the ResetQueryTriggerTimestamps method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreResetQueryTriggerTimestampsFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []CodeMonitorStoreResetQueryTriggerTimestampsFuncCall
	mutex       sync.Mutex
}

// ResetQueryTriggerTimestamps delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ResetQueryTriggerTimestamps(v0 context.Context, v1 int64) error {
	r0 := m.ResetQueryTriggerTimestampsFunc.nextHook()(v0, v1)
	m.ResetQueryTriggerTimestampsFunc.appendCall(CodeMonitorStoreResetQueryTriggerTimestampsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ResetQueryTriggerTimestamps method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResetQueryTriggerTimestamps method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) appendCall(r0 CodeMonitorStoreResetQueryTriggerTimestampsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreResetQueryTriggerTimestampsFuncCall objects describing
// the invocations of this function.
func (f *CodeMonitorStoreResetQueryTriggerTimestampsFunc) History() []CodeMonitorStoreResetQueryTriggerTimestampsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreResetQueryTriggerTimestampsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreResetQueryTriggerTimestampsFuncCall is an object that
// describes an invocation of method ResetQueryTriggerTimestamps on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreResetQueryTriggerTimestampsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreResetQueryTriggerTimestampsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreResetQueryTriggerTimestampsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreSetQueryTriggerNextRunFunc describes the behavior when
// the SetQueryTriggerNextRun method of the parent MockCodeMonitorStore
// instance is invoked.
type CodeMonitorStoreSetQueryTriggerNextRunFunc struct {
	defaultHook func(context.Context, int64, time.Time, time.Time) error
	hooks       []func(context.Context, int64, time.Time, time.Time) error
	history     []CodeMonitorStoreSetQueryTriggerNextRunFuncCall
	mutex       sync.Mutex
}

// SetQueryTriggerNextRun delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) SetQueryTriggerNextRun(v0 context.Context, v1 int64, v2 time.Time, v3 time.Time) error {
	r0 := m.SetQueryTriggerNextRunFunc.nextHook()(v0, v1, v2, v3)
	m.SetQueryTriggerNextRunFunc.appendCall(CodeMonitorStoreSetQueryTriggerNextRunFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetQueryTriggerNextRun method of the parent MockCodeMonitorStore instance
// is invoked and the hook queue is empty.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) SetDefaultHook(hook func(context.Context, int64, time.Time, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetQueryTriggerNextRun method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) PushHook(hook func(context.Context, int64, time.Time, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, time.Time, time.Time) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, time.Time, time.Time) error {
		return r0
	})
}

func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) nextHook() func(context.Context, int64, time.Time, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) appendCall(r0 CodeMonitorStoreSetQueryTriggerNextRunFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreSetQueryTriggerNextRunFuncCall objects describing the
// invocations of this function.
func (f *CodeMonitorStoreSetQueryTriggerNextRunFunc) History() []CodeMonitorStoreSetQueryTriggerNextRunFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreSetQueryTriggerNextRunFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreSetQueryTriggerNextRunFuncCall is an object that
// describes an invocation of method SetQueryTriggerNextRun on an instance
// of MockCodeMonitorStore.
type CodeMonitorStoreSetQueryTriggerNextRunFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreSetQueryTriggerNextRunFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreSetQueryTriggerNextRunFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreToggleMonitorFunc describes the behavior when the
// ToggleMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreToggleMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreToggleMonitorFuncCall
	mutex       sync.Mutex
}

// ToggleMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) ToggleMonitor(v0 context.Context, v1 *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
	r0, r1 := m.ToggleMonitorFunc.nextHook()(v0, v1)
	m.ToggleMonitorFunc.appendCall(CodeMonitorStoreToggleMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ToggleMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreToggleMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ToggleMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreToggleMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreToggleMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreToggleMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreToggleMonitorFunc) nextHook() func(context.Context, *graphqlbackend.ToggleCodeMonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreToggleMonitorFunc) appendCall(r0 CodeMonitorStoreToggleMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreToggleMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreToggleMonitorFunc) History() []CodeMonitorStoreToggleMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreToggleMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreToggleMonitorFuncCall is an object that describes an
// invocation of method ToggleMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreToggleMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.ToggleCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreToggleMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreToggleMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreTransactFunc describes the behavior when the Transact
// method of the parent MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreTransactFunc struct {
	defaultHook func(context.Context) (CodeMonitorStore, error)
	hooks       []func(context.Context) (CodeMonitorStore, error)
	history     []CodeMonitorStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeMonitorStore) Transact(v0 context.Context) (CodeMonitorStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(CodeMonitorStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockCodeMonitorStore instance is invoked and the hook queue is
// empty.
func (f *CodeMonitorStoreTransactFunc) SetDefaultHook(hook func(context.Context) (CodeMonitorStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockCodeMonitorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeMonitorStoreTransactFunc) PushHook(hook func(context.Context) (CodeMonitorStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreTransactFunc) SetDefaultReturn(r0 CodeMonitorStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (CodeMonitorStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreTransactFunc) PushReturn(r0 CodeMonitorStore, r1 error) {
	f.PushHook(func(context.Context) (CodeMonitorStore, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreTransactFunc) nextHook() func(context.Context) (CodeMonitorStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreTransactFunc) appendCall(r0 CodeMonitorStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *CodeMonitorStoreTransactFunc) History() []CodeMonitorStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockCodeMonitorStore.
type CodeMonitorStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 CodeMonitorStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateEmailActionFunc describes the behavior when the
// UpdateEmailAction method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateEmailActionFunc struct {
	defaultHook func(context.Context, int64, *graphqlbackend.EditActionArgs) (*EmailAction, error)
	hooks       []func(context.Context, int64, *graphqlbackend.EditActionArgs) (*EmailAction, error)
	history     []CodeMonitorStoreUpdateEmailActionFuncCall
	mutex       sync.Mutex
}

// UpdateEmailAction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateEmailAction(v0 context.Context, v1 int64, v2 *graphqlbackend.EditActionArgs) (*EmailAction, error) {
	r0, r1 := m.UpdateEmailActionFunc.nextHook()(v0, v1, v2)
	m.UpdateEmailActionFunc.appendCall(CodeMonitorStoreUpdateEmailActionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateEmailAction
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreUpdateEmailActionFunc) SetDefaultHook(hook func(context.Context, int64, *graphqlbackend.EditActionArgs) (*EmailAction, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateEmailAction method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreUpdateEmailActionFunc) PushHook(hook func(context.Context, int64, *graphqlbackend.EditActionArgs) (*EmailAction, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreUpdateEmailActionFunc) SetDefaultReturn(r0 *EmailAction, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, *graphqlbackend.EditActionArgs) (*EmailAction, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreUpdateEmailActionFunc) PushReturn(r0 *EmailAction, r1 error) {
	f.PushHook(func(context.Context, int64, *graphqlbackend.EditActionArgs) (*EmailAction, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreUpdateEmailActionFunc) nextHook() func(context.Context, int64, *graphqlbackend.EditActionArgs) (*EmailAction, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateEmailActionFunc) appendCall(r0 CodeMonitorStoreUpdateEmailActionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateEmailActionFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateEmailActionFunc) History() []CodeMonitorStoreUpdateEmailActionFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateEmailActionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateEmailActionFuncCall is an object that describes an
// invocation of method UpdateEmailAction on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateEmailActionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphqlbackend.EditActionArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *EmailAction
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateEmailActionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateEmailActionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateMonitorFunc describes the behavior when the
// UpdateMonitor method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateMonitorFunc struct {
	defaultHook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error)
	hooks       []func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error)
	history     []CodeMonitorStoreUpdateMonitorFuncCall
	mutex       sync.Mutex
}

// UpdateMonitor delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateMonitor(v0 context.Context, v1 *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
	r0, r1 := m.UpdateMonitorFunc.nextHook()(v0, v1)
	m.UpdateMonitorFunc.appendCall(CodeMonitorStoreUpdateMonitorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateMonitor method
// of the parent MockCodeMonitorStore instance is invoked and the hook queue
// is empty.
func (f *CodeMonitorStoreUpdateMonitorFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateMonitor method of the parent MockCodeMonitorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeMonitorStoreUpdateMonitorFunc) PushHook(hook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreUpdateMonitorFunc) SetDefaultReturn(r0 *Monitor, r1 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreUpdateMonitorFunc) PushReturn(r0 *Monitor, r1 error) {
	f.PushHook(func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
		return r0, r1
	})
}

func (f *CodeMonitorStoreUpdateMonitorFunc) nextHook() func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) (*Monitor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateMonitorFunc) appendCall(r0 CodeMonitorStoreUpdateMonitorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateMonitorFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateMonitorFunc) History() []CodeMonitorStoreUpdateMonitorFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateMonitorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateMonitorFuncCall is an object that describes an
// invocation of method UpdateMonitor on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateMonitorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.UpdateCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Monitor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateMonitorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateMonitorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeMonitorStoreUpdateQueryTriggerFunc describes the behavior when the
// UpdateQueryTrigger method of the parent MockCodeMonitorStore instance is
// invoked.
type CodeMonitorStoreUpdateQueryTriggerFunc struct {
	defaultHook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error
	hooks       []func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error
	history     []CodeMonitorStoreUpdateQueryTriggerFuncCall
	mutex       sync.Mutex
}

// UpdateQueryTrigger delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateQueryTrigger(v0 context.Context, v1 *graphqlbackend.UpdateCodeMonitorArgs) error {
	r0 := m.UpdateQueryTriggerFunc.nextHook()(v0, v1)
	m.UpdateQueryTriggerFunc.appendCall(CodeMonitorStoreUpdateQueryTriggerFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateQueryTrigger
// method of the parent MockCodeMonitorStore instance is invoked and the
// hook queue is empty.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateQueryTrigger method of the parent MockCodeMonitorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) PushHook(hook func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error {
		return r0
	})
}

func (f *CodeMonitorStoreUpdateQueryTriggerFunc) nextHook() func(context.Context, *graphqlbackend.UpdateCodeMonitorArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateQueryTriggerFunc) appendCall(r0 CodeMonitorStoreUpdateQueryTriggerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeMonitorStoreUpdateQueryTriggerFuncCall
// objects describing the invocations of this function.
func (f *CodeMonitorStoreUpdateQueryTriggerFunc) History() []CodeMonitorStoreUpdateQueryTriggerFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateQueryTriggerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateQueryTriggerFuncCall is an object that describes an
// invocation of method UpdateQueryTrigger on an instance of
// MockCodeMonitorStore.
type CodeMonitorStoreUpdateQueryTriggerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.UpdateCodeMonitorArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateQueryTriggerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateQueryTriggerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CodeMonitorStoreUpdateTriggerJobWithResultsFunc describes the behavior
// when the UpdateTriggerJobWithResults method of the parent
// MockCodeMonitorStore instance is invoked.
type CodeMonitorStoreUpdateTriggerJobWithResultsFunc struct {
	defaultHook func(context.Context, string, int, int) error
	hooks       []func(context.Context, string, int, int) error
	history     []CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall
	mutex       sync.Mutex
}

// UpdateTriggerJobWithResults delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockCodeMonitorStore) UpdateTriggerJobWithResults(v0 context.Context, v1 string, v2 int, v3 int) error {
	r0 := m.UpdateTriggerJobWithResultsFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateTriggerJobWithResultsFunc.appendCall(CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateTriggerJobWithResults method of the parent MockCodeMonitorStore
// instance is invoked and the hook queue is empty.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) SetDefaultHook(hook func(context.Context, string, int, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateTriggerJobWithResults method of the parent MockCodeMonitorStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) PushHook(hook func(context.Context, string, int, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, int, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, int, int) error {
		return r0
	})
}

func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) nextHook() func(context.Context, string, int, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) appendCall(r0 CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall objects describing
// the invocations of this function.
func (f *CodeMonitorStoreUpdateTriggerJobWithResultsFunc) History() []CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall {
	f.mutex.Lock()
	history := make([]CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall is an object that
// describes an invocation of method UpdateTriggerJobWithResults on an
// instance of MockCodeMonitorStore.
type CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeMonitorStoreUpdateTriggerJobWithResultsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
