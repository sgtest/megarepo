// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package embeddings

import (
	"context"
	"sync"
)

// MockClient is a mock implementation of the Client interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/internal/embeddings) used
// for unit testing.
type MockClient struct {
	// IsContextRequiredForChatQueryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// IsContextRequiredForChatQuery.
	IsContextRequiredForChatQueryFunc *ClientIsContextRequiredForChatQueryFunc
	// SearchFunc is an instance of a mock function object controlling the
	// behavior of the method Search.
	SearchFunc *ClientSearchFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		IsContextRequiredForChatQueryFunc: &ClientIsContextRequiredForChatQueryFunc{
			defaultHook: func(context.Context, IsContextRequiredForChatQueryParameters) (r0 bool, r1 error) {
				return
			},
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: func(context.Context, EmbeddingsSearchParameters) (r0 *EmbeddingCombinedSearchResults, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockClient creates a new mock of the Client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockClient() *MockClient {
	return &MockClient{
		IsContextRequiredForChatQueryFunc: &ClientIsContextRequiredForChatQueryFunc{
			defaultHook: func(context.Context, IsContextRequiredForChatQueryParameters) (bool, error) {
				panic("unexpected invocation of MockClient.IsContextRequiredForChatQuery")
			},
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: func(context.Context, EmbeddingsSearchParameters) (*EmbeddingCombinedSearchResults, error) {
				panic("unexpected invocation of MockClient.Search")
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i Client) *MockClient {
	return &MockClient{
		IsContextRequiredForChatQueryFunc: &ClientIsContextRequiredForChatQueryFunc{
			defaultHook: i.IsContextRequiredForChatQuery,
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: i.Search,
		},
	}
}

// ClientIsContextRequiredForChatQueryFunc describes the behavior when the
// IsContextRequiredForChatQuery method of the parent MockClient instance is
// invoked.
type ClientIsContextRequiredForChatQueryFunc struct {
	defaultHook func(context.Context, IsContextRequiredForChatQueryParameters) (bool, error)
	hooks       []func(context.Context, IsContextRequiredForChatQueryParameters) (bool, error)
	history     []ClientIsContextRequiredForChatQueryFuncCall
	mutex       sync.Mutex
}

// IsContextRequiredForChatQuery delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockClient) IsContextRequiredForChatQuery(v0 context.Context, v1 IsContextRequiredForChatQueryParameters) (bool, error) {
	r0, r1 := m.IsContextRequiredForChatQueryFunc.nextHook()(v0, v1)
	m.IsContextRequiredForChatQueryFunc.appendCall(ClientIsContextRequiredForChatQueryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// IsContextRequiredForChatQuery method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientIsContextRequiredForChatQueryFunc) SetDefaultHook(hook func(context.Context, IsContextRequiredForChatQueryParameters) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsContextRequiredForChatQuery method of the parent MockClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ClientIsContextRequiredForChatQueryFunc) PushHook(hook func(context.Context, IsContextRequiredForChatQueryParameters) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientIsContextRequiredForChatQueryFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, IsContextRequiredForChatQueryParameters) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientIsContextRequiredForChatQueryFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, IsContextRequiredForChatQueryParameters) (bool, error) {
		return r0, r1
	})
}

func (f *ClientIsContextRequiredForChatQueryFunc) nextHook() func(context.Context, IsContextRequiredForChatQueryParameters) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientIsContextRequiredForChatQueryFunc) appendCall(r0 ClientIsContextRequiredForChatQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientIsContextRequiredForChatQueryFuncCall
// objects describing the invocations of this function.
func (f *ClientIsContextRequiredForChatQueryFunc) History() []ClientIsContextRequiredForChatQueryFuncCall {
	f.mutex.Lock()
	history := make([]ClientIsContextRequiredForChatQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientIsContextRequiredForChatQueryFuncCall is an object that describes
// an invocation of method IsContextRequiredForChatQuery on an instance of
// MockClient.
type ClientIsContextRequiredForChatQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 IsContextRequiredForChatQueryParameters
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientIsContextRequiredForChatQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientIsContextRequiredForChatQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSearchFunc describes the behavior when the Search method of the
// parent MockClient instance is invoked.
type ClientSearchFunc struct {
	defaultHook func(context.Context, EmbeddingsSearchParameters) (*EmbeddingCombinedSearchResults, error)
	hooks       []func(context.Context, EmbeddingsSearchParameters) (*EmbeddingCombinedSearchResults, error)
	history     []ClientSearchFuncCall
	mutex       sync.Mutex
}

// Search delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Search(v0 context.Context, v1 EmbeddingsSearchParameters) (*EmbeddingCombinedSearchResults, error) {
	r0, r1 := m.SearchFunc.nextHook()(v0, v1)
	m.SearchFunc.appendCall(ClientSearchFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Search method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientSearchFunc) SetDefaultHook(hook func(context.Context, EmbeddingsSearchParameters) (*EmbeddingCombinedSearchResults, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Search method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientSearchFunc) PushHook(hook func(context.Context, EmbeddingsSearchParameters) (*EmbeddingCombinedSearchResults, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSearchFunc) SetDefaultReturn(r0 *EmbeddingCombinedSearchResults, r1 error) {
	f.SetDefaultHook(func(context.Context, EmbeddingsSearchParameters) (*EmbeddingCombinedSearchResults, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSearchFunc) PushReturn(r0 *EmbeddingCombinedSearchResults, r1 error) {
	f.PushHook(func(context.Context, EmbeddingsSearchParameters) (*EmbeddingCombinedSearchResults, error) {
		return r0, r1
	})
}

func (f *ClientSearchFunc) nextHook() func(context.Context, EmbeddingsSearchParameters) (*EmbeddingCombinedSearchResults, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSearchFunc) appendCall(r0 ClientSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSearchFuncCall objects describing the
// invocations of this function.
func (f *ClientSearchFunc) History() []ClientSearchFuncCall {
	f.mutex.Lock()
	history := make([]ClientSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSearchFuncCall is an object that describes an invocation of method
// Search on an instance of MockClient.
type ClientSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 EmbeddingsSearchParameters
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *EmbeddingCombinedSearchResults
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
