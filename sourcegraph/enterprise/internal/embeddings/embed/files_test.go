package embed

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestExcludingFilePaths(t *testing.T) {
	files := []string{
		"file.sql",
		"root/file.yaml",
		"client/web/struct.json",
		"vendor/vendor.txt",
		"cool.go",
		"node_modules/a.go",
		"Dockerfile",
		"README.md",
		"vendor/README.md",
		"LICENSE.txt",
		"nested/vendor/file.py",
		".prettierignore",
		"client/web/.gitattributes",
		"no_ignore",
		"data/names.csv",
	}

	expectedFiles := []string{"cool.go", "Dockerfile", "README.md", "LICENSE.txt", "no_ignore"}
	gotFiles := []string{}

	excludedGlobPatterns := GetDefaultExcludedFilePathPatterns()
	for _, file := range files {
		if !isExcludedFilePath(file, excludedGlobPatterns) {
			gotFiles = append(gotFiles, file)
		}
	}

	require.Equal(t, expectedFiles, gotFiles)
}

func Test_isEmbeddableFileContent(t *testing.T) {
	cases := []struct {
		content    []byte
		embeddable bool
		reason     SkipReason
	}{{
		// gob file header
		content:    bytes.Repeat([]byte{0xff, 0x0f, 0x04, 0x83, 0x02, 0x01, 0x84, 0xff, 0x01, 0x00}, 10),
		embeddable: false,
		reason:     SkipReasonBinary,
	}, {
		content:    []byte("test"),
		embeddable: false,
		reason:     SkipReasonSmall,
	}, {
		content:    []byte("file that is larger than the minimum size but contains the word lockfile"),
		embeddable: false,
		reason:     SkipReasonAutogenerated,
	}, {
		content:    []byte("file that is larger than the minimum\nsize but contains the words do not edit"),
		embeddable: false,
		reason:     SkipReasonAutogenerated,
	}, {
		content:    bytes.Repeat([]byte("very long line "), 1000),
		embeddable: false,
		reason:     SkipReasonLongLine,
	}, {
		content:    bytes.Repeat([]byte("somewhat long line "), 10),
		embeddable: true,
		reason:     SkipReasonNone,
	}}

	for _, tc := range cases {
		t.Run("", func(t *testing.T) {
			emeddable, skipReason := isEmbeddableFileContent(tc.content)
			require.Equal(t, tc.embeddable, emeddable)
			require.Equal(t, tc.reason, skipReason)
		})
	}
}
