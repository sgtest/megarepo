package embed

import (
	"path/filepath"
	"strings"
)

const MIN_EMBEDDABLE_FILE_SIZE = 32
const MAX_LINE_LENGTH = 2048

var autogeneratedFileHeaders = []string{"autogenerated file", "lockfile", "generated by", "do not edit"}

var textFileExtensions = map[string]struct{}{
	"md":       {},
	"markdown": {},
	"rst":      {},
	"txt":      {},
}

var excludedCodeFileExtensions = map[string]struct{}{
	"sql":  {},
	"svg":  {},
	"json": {},
	"yml":  {},
	"yaml": {},
}

var excludedFilePaths = []string{
	"/__fixtures__",
	"/testdata",
	"/mocks",
	"/vendor",
}

func isEmbeddableFile(fileName string, content string) bool {
	if len(strings.TrimSpace(content)) < MIN_EMBEDDABLE_FILE_SIZE {
		return false
	}

	for _, excludedFilePath := range excludedFilePaths {
		if strings.Contains(fileName, excludedFilePath) {
			return false
		}
	}

	lines := strings.Split(content, "\n")

	fileHeader := strings.ToLower(strings.Join(lines[0:min(5, len(lines))], "\n"))
	for _, header := range autogeneratedFileHeaders {
		if strings.Contains(fileHeader, header) {
			return false
		}
	}

	for _, line := range lines {
		if len(line) > MAX_LINE_LENGTH {
			return false
		}
	}

	return true
}

func isValidTextFile(fileName string) bool {
	ext := strings.TrimPrefix(filepath.Ext(fileName), ".")
	_, ok := textFileExtensions[strings.ToLower(ext)]
	if ok {
		return true
	}
	basename := strings.ToLower(filepath.Base(fileName))
	return strings.HasPrefix(basename, "license")
}

func isValidCodeFile(fileName string) bool {
	basename := strings.ToLower(filepath.Base(fileName))
	if strings.HasPrefix(basename, "dockerfile") {
		return true
	}

	ext := strings.TrimPrefix(filepath.Ext(fileName), ".")
	_, ok := excludedCodeFileExtensions[strings.ToLower(ext)]
	return !ok
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
