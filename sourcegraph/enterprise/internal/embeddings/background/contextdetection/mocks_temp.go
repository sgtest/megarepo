// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package contextdetection

import (
	"context"
	"sync"

	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockContextDetectionEmbeddingJobsStore is a mock implementation of the
// ContextDetectionEmbeddingJobsStore interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/embeddings/background/contextdetection)
// used for unit testing.
type MockContextDetectionEmbeddingJobsStore struct {
	// CreateContextDetectionEmbeddingJobFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CreateContextDetectionEmbeddingJob.
	CreateContextDetectionEmbeddingJobFunc *ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ContextDetectionEmbeddingJobsStoreHandleFunc
}

// NewMockContextDetectionEmbeddingJobsStore creates a new mock of the
// ContextDetectionEmbeddingJobsStore interface. All methods return zero
// values for all results, unless overwritten.
func NewMockContextDetectionEmbeddingJobsStore() *MockContextDetectionEmbeddingJobsStore {
	return &MockContextDetectionEmbeddingJobsStore{
		CreateContextDetectionEmbeddingJobFunc: &ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		HandleFunc: &ContextDetectionEmbeddingJobsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
	}
}

// NewStrictMockContextDetectionEmbeddingJobsStore creates a new mock of the
// ContextDetectionEmbeddingJobsStore interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockContextDetectionEmbeddingJobsStore() *MockContextDetectionEmbeddingJobsStore {
	return &MockContextDetectionEmbeddingJobsStore{
		CreateContextDetectionEmbeddingJobFunc: &ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockContextDetectionEmbeddingJobsStore.CreateContextDetectionEmbeddingJob")
			},
		},
		HandleFunc: &ContextDetectionEmbeddingJobsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockContextDetectionEmbeddingJobsStore.Handle")
			},
		},
	}
}

// NewMockContextDetectionEmbeddingJobsStoreFrom creates a new mock of the
// MockContextDetectionEmbeddingJobsStore interface. All methods delegate to
// the given implementation, unless overwritten.
func NewMockContextDetectionEmbeddingJobsStoreFrom(i ContextDetectionEmbeddingJobsStore) *MockContextDetectionEmbeddingJobsStore {
	return &MockContextDetectionEmbeddingJobsStore{
		CreateContextDetectionEmbeddingJobFunc: &ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc{
			defaultHook: i.CreateContextDetectionEmbeddingJob,
		},
		HandleFunc: &ContextDetectionEmbeddingJobsStoreHandleFunc{
			defaultHook: i.Handle,
		},
	}
}

// ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc
// describes the behavior when the CreateContextDetectionEmbeddingJob method
// of the parent MockContextDetectionEmbeddingJobsStore instance is invoked.
type ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall
	mutex       sync.Mutex
}

// CreateContextDetectionEmbeddingJob delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockContextDetectionEmbeddingJobsStore) CreateContextDetectionEmbeddingJob(v0 context.Context) (int, error) {
	r0, r1 := m.CreateContextDetectionEmbeddingJobFunc.nextHook()(v0)
	m.CreateContextDetectionEmbeddingJobFunc.appendCall(ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateContextDetectionEmbeddingJob method of the parent
// MockContextDetectionEmbeddingJobsStore instance is invoked and the hook
// queue is empty.
func (f *ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateContextDetectionEmbeddingJob method of the parent
// MockContextDetectionEmbeddingJobsStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc) appendCall(r0 ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall
// objects describing the invocations of this function.
func (f *ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFunc) History() []ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall {
	f.mutex.Lock()
	history := make([]ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall
// is an object that describes an invocation of method
// CreateContextDetectionEmbeddingJob on an instance of
// MockContextDetectionEmbeddingJobsStore.
type ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextDetectionEmbeddingJobsStoreCreateContextDetectionEmbeddingJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ContextDetectionEmbeddingJobsStoreHandleFunc describes the behavior when
// the Handle method of the parent MockContextDetectionEmbeddingJobsStore
// instance is invoked.
type ContextDetectionEmbeddingJobsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []ContextDetectionEmbeddingJobsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContextDetectionEmbeddingJobsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ContextDetectionEmbeddingJobsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockContextDetectionEmbeddingJobsStore instance is invoked and the
// hook queue is empty.
func (f *ContextDetectionEmbeddingJobsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockContextDetectionEmbeddingJobsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ContextDetectionEmbeddingJobsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextDetectionEmbeddingJobsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextDetectionEmbeddingJobsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *ContextDetectionEmbeddingJobsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextDetectionEmbeddingJobsStoreHandleFunc) appendCall(r0 ContextDetectionEmbeddingJobsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ContextDetectionEmbeddingJobsStoreHandleFuncCall objects describing the
// invocations of this function.
func (f *ContextDetectionEmbeddingJobsStoreHandleFunc) History() []ContextDetectionEmbeddingJobsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ContextDetectionEmbeddingJobsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextDetectionEmbeddingJobsStoreHandleFuncCall is an object that
// describes an invocation of method Handle on an instance of
// MockContextDetectionEmbeddingJobsStore.
type ContextDetectionEmbeddingJobsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextDetectionEmbeddingJobsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextDetectionEmbeddingJobsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
