// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package repo

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockRepoEmbeddingJobsStore is a mock implementation of the
// RepoEmbeddingJobsStore interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/embeddings/background/repo)
// used for unit testing.
type MockRepoEmbeddingJobsStore struct {
	// CreateRepoEmbeddingJobFunc is an instance of a mock function object
	// controlling the behavior of the method CreateRepoEmbeddingJob.
	CreateRepoEmbeddingJobFunc *RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *RepoEmbeddingJobsStoreDoneFunc
	// GetLastCompletedRepoEmbeddingJobFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetLastCompletedRepoEmbeddingJob.
	GetLastCompletedRepoEmbeddingJobFunc *RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *RepoEmbeddingJobsStoreHandleFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *RepoEmbeddingJobsStoreTransactFunc
}

// NewMockRepoEmbeddingJobsStore creates a new mock of the
// RepoEmbeddingJobsStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockRepoEmbeddingJobsStore() *MockRepoEmbeddingJobsStore {
	return &MockRepoEmbeddingJobsStore{
		CreateRepoEmbeddingJobFunc: &RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc{
			defaultHook: func(context.Context, api.RepoID, api.CommitID) (r0 int, r1 error) {
				return
			},
		},
		DoneFunc: &RepoEmbeddingJobsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetLastCompletedRepoEmbeddingJobFunc: &RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *RepoEmbeddingJob, r1 error) {
				return
			},
		},
		HandleFunc: &RepoEmbeddingJobsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		TransactFunc: &RepoEmbeddingJobsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 RepoEmbeddingJobsStore, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockRepoEmbeddingJobsStore creates a new mock of the
// RepoEmbeddingJobsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockRepoEmbeddingJobsStore() *MockRepoEmbeddingJobsStore {
	return &MockRepoEmbeddingJobsStore{
		CreateRepoEmbeddingJobFunc: &RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc{
			defaultHook: func(context.Context, api.RepoID, api.CommitID) (int, error) {
				panic("unexpected invocation of MockRepoEmbeddingJobsStore.CreateRepoEmbeddingJob")
			},
		},
		DoneFunc: &RepoEmbeddingJobsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockRepoEmbeddingJobsStore.Done")
			},
		},
		GetLastCompletedRepoEmbeddingJobFunc: &RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc{
			defaultHook: func(context.Context, api.RepoID) (*RepoEmbeddingJob, error) {
				panic("unexpected invocation of MockRepoEmbeddingJobsStore.GetLastCompletedRepoEmbeddingJob")
			},
		},
		HandleFunc: &RepoEmbeddingJobsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockRepoEmbeddingJobsStore.Handle")
			},
		},
		TransactFunc: &RepoEmbeddingJobsStoreTransactFunc{
			defaultHook: func(context.Context) (RepoEmbeddingJobsStore, error) {
				panic("unexpected invocation of MockRepoEmbeddingJobsStore.Transact")
			},
		},
	}
}

// NewMockRepoEmbeddingJobsStoreFrom creates a new mock of the
// MockRepoEmbeddingJobsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockRepoEmbeddingJobsStoreFrom(i RepoEmbeddingJobsStore) *MockRepoEmbeddingJobsStore {
	return &MockRepoEmbeddingJobsStore{
		CreateRepoEmbeddingJobFunc: &RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc{
			defaultHook: i.CreateRepoEmbeddingJob,
		},
		DoneFunc: &RepoEmbeddingJobsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetLastCompletedRepoEmbeddingJobFunc: &RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc{
			defaultHook: i.GetLastCompletedRepoEmbeddingJob,
		},
		HandleFunc: &RepoEmbeddingJobsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		TransactFunc: &RepoEmbeddingJobsStoreTransactFunc{
			defaultHook: i.Transact,
		},
	}
}

// RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc describes the behavior
// when the CreateRepoEmbeddingJob method of the parent
// MockRepoEmbeddingJobsStore instance is invoked.
type RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc struct {
	defaultHook func(context.Context, api.RepoID, api.CommitID) (int, error)
	hooks       []func(context.Context, api.RepoID, api.CommitID) (int, error)
	history     []RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall
	mutex       sync.Mutex
}

// CreateRepoEmbeddingJob delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockRepoEmbeddingJobsStore) CreateRepoEmbeddingJob(v0 context.Context, v1 api.RepoID, v2 api.CommitID) (int, error) {
	r0, r1 := m.CreateRepoEmbeddingJobFunc.nextHook()(v0, v1, v2)
	m.CreateRepoEmbeddingJobFunc.appendCall(RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateRepoEmbeddingJob method of the parent MockRepoEmbeddingJobsStore
// instance is invoked and the hook queue is empty.
func (f *RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc) SetDefaultHook(hook func(context.Context, api.RepoID, api.CommitID) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateRepoEmbeddingJob method of the parent MockRepoEmbeddingJobsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc) PushHook(hook func(context.Context, api.RepoID, api.CommitID) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID, api.CommitID) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, api.RepoID, api.CommitID) (int, error) {
		return r0, r1
	})
}

func (f *RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc) nextHook() func(context.Context, api.RepoID, api.CommitID) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc) appendCall(r0 RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall objects describing
// the invocations of this function.
func (f *RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFunc) History() []RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall {
	f.mutex.Lock()
	history := make([]RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall is an object that
// describes an invocation of method CreateRepoEmbeddingJob on an instance
// of MockRepoEmbeddingJobsStore.
type RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoEmbeddingJobsStoreCreateRepoEmbeddingJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoEmbeddingJobsStoreDoneFunc describes the behavior when the Done
// method of the parent MockRepoEmbeddingJobsStore instance is invoked.
type RepoEmbeddingJobsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []RepoEmbeddingJobsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoEmbeddingJobsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(RepoEmbeddingJobsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockRepoEmbeddingJobsStore instance is invoked and the hook queue
// is empty.
func (f *RepoEmbeddingJobsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockRepoEmbeddingJobsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoEmbeddingJobsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoEmbeddingJobsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoEmbeddingJobsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *RepoEmbeddingJobsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoEmbeddingJobsStoreDoneFunc) appendCall(r0 RepoEmbeddingJobsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoEmbeddingJobsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *RepoEmbeddingJobsStoreDoneFunc) History() []RepoEmbeddingJobsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]RepoEmbeddingJobsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoEmbeddingJobsStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of MockRepoEmbeddingJobsStore.
type RepoEmbeddingJobsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoEmbeddingJobsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoEmbeddingJobsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc describes the
// behavior when the GetLastCompletedRepoEmbeddingJob method of the parent
// MockRepoEmbeddingJobsStore instance is invoked.
type RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc struct {
	defaultHook func(context.Context, api.RepoID) (*RepoEmbeddingJob, error)
	hooks       []func(context.Context, api.RepoID) (*RepoEmbeddingJob, error)
	history     []RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall
	mutex       sync.Mutex
}

// GetLastCompletedRepoEmbeddingJob delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockRepoEmbeddingJobsStore) GetLastCompletedRepoEmbeddingJob(v0 context.Context, v1 api.RepoID) (*RepoEmbeddingJob, error) {
	r0, r1 := m.GetLastCompletedRepoEmbeddingJobFunc.nextHook()(v0, v1)
	m.GetLastCompletedRepoEmbeddingJobFunc.appendCall(RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLastCompletedRepoEmbeddingJob method of the parent
// MockRepoEmbeddingJobsStore instance is invoked and the hook queue is
// empty.
func (f *RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*RepoEmbeddingJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastCompletedRepoEmbeddingJob method of the parent
// MockRepoEmbeddingJobsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc) PushHook(hook func(context.Context, api.RepoID) (*RepoEmbeddingJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc) SetDefaultReturn(r0 *RepoEmbeddingJob, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*RepoEmbeddingJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc) PushReturn(r0 *RepoEmbeddingJob, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*RepoEmbeddingJob, error) {
		return r0, r1
	})
}

func (f *RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc) nextHook() func(context.Context, api.RepoID) (*RepoEmbeddingJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc) appendCall(r0 RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall objects
// describing the invocations of this function.
func (f *RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFunc) History() []RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall {
	f.mutex.Lock()
	history := make([]RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall is an
// object that describes an invocation of method
// GetLastCompletedRepoEmbeddingJob on an instance of
// MockRepoEmbeddingJobsStore.
type RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *RepoEmbeddingJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoEmbeddingJobsStoreGetLastCompletedRepoEmbeddingJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoEmbeddingJobsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockRepoEmbeddingJobsStore instance is invoked.
type RepoEmbeddingJobsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []RepoEmbeddingJobsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoEmbeddingJobsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(RepoEmbeddingJobsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockRepoEmbeddingJobsStore instance is invoked and the hook queue
// is empty.
func (f *RepoEmbeddingJobsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockRepoEmbeddingJobsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RepoEmbeddingJobsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoEmbeddingJobsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoEmbeddingJobsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *RepoEmbeddingJobsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoEmbeddingJobsStoreHandleFunc) appendCall(r0 RepoEmbeddingJobsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoEmbeddingJobsStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *RepoEmbeddingJobsStoreHandleFunc) History() []RepoEmbeddingJobsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]RepoEmbeddingJobsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoEmbeddingJobsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockRepoEmbeddingJobsStore.
type RepoEmbeddingJobsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoEmbeddingJobsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoEmbeddingJobsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoEmbeddingJobsStoreTransactFunc describes the behavior when the
// Transact method of the parent MockRepoEmbeddingJobsStore instance is
// invoked.
type RepoEmbeddingJobsStoreTransactFunc struct {
	defaultHook func(context.Context) (RepoEmbeddingJobsStore, error)
	hooks       []func(context.Context) (RepoEmbeddingJobsStore, error)
	history     []RepoEmbeddingJobsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoEmbeddingJobsStore) Transact(v0 context.Context) (RepoEmbeddingJobsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(RepoEmbeddingJobsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockRepoEmbeddingJobsStore instance is invoked and the hook
// queue is empty.
func (f *RepoEmbeddingJobsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (RepoEmbeddingJobsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockRepoEmbeddingJobsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RepoEmbeddingJobsStoreTransactFunc) PushHook(hook func(context.Context) (RepoEmbeddingJobsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoEmbeddingJobsStoreTransactFunc) SetDefaultReturn(r0 RepoEmbeddingJobsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (RepoEmbeddingJobsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoEmbeddingJobsStoreTransactFunc) PushReturn(r0 RepoEmbeddingJobsStore, r1 error) {
	f.PushHook(func(context.Context) (RepoEmbeddingJobsStore, error) {
		return r0, r1
	})
}

func (f *RepoEmbeddingJobsStoreTransactFunc) nextHook() func(context.Context) (RepoEmbeddingJobsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoEmbeddingJobsStoreTransactFunc) appendCall(r0 RepoEmbeddingJobsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoEmbeddingJobsStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *RepoEmbeddingJobsStoreTransactFunc) History() []RepoEmbeddingJobsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]RepoEmbeddingJobsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoEmbeddingJobsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of
// MockRepoEmbeddingJobsStore.
type RepoEmbeddingJobsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoEmbeddingJobsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoEmbeddingJobsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoEmbeddingJobsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
