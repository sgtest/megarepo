{"id":1,"type":"vertex","label":"metaData","version":"0.4.3","projectRoot":"file:///home/arrow/sourcegraph/sourcegraph","positionEncoding":"utf-16","toolInfo":{"name":"lsif-go","version":"dev","args":["--module-root=/home/arrow/sourcegraph/sourcegraph/enterprise/lib"]}}
{"id":2,"type":"vertex","label":"project","kind":"go"}
{"id":3,"type":"vertex","label":"document","uri":"file:///home/arrow/sourcegraph/sourcegraph/enterprise/lib/codeintel/semantic/diff/testdata/project1/test.go","languageId":"go"}
{"id":4,"type":"vertex","label":"range","start":{"line":4,"character":25},"end":{"line":4,"character":29}}
{"id":5,"type":"vertex","label":"resultSet"}
{"id":6,"type":"vertex","label":"definitionResult"}
{"id":7,"type":"edge","label":"next","outV":4,"inV":5}
{"id":8,"type":"edge","label":"textDocument/definition","outV":5,"inV":6}
{"id":9,"type":"edge","label":"item","outV":6,"inVs":[4],"document":3}
{"id":10,"type":"vertex","label":"hoverResult","result":{"contents":[{"language":"go","value":"var arg2 int"}]}}
{"id":11,"type":"edge","label":"textDocument/hover","outV":5,"inV":10}
{"id":12,"type":"vertex","label":"range","start":{"line":9,"character":1},"end":{"line":9,"character":7}}
{"id":13,"type":"vertex","label":"resultSet"}
{"id":14,"type":"vertex","label":"definitionResult"}
{"id":15,"type":"edge","label":"next","outV":12,"inV":13}
{"id":16,"type":"edge","label":"textDocument/definition","outV":13,"inV":14}
{"id":17,"type":"edge","label":"item","outV":14,"inVs":[12],"document":3}
{"id":18,"type":"vertex","label":"hoverResult","result":{"contents":[{"language":"go","value":"struct field Field1 int"}]}}
{"id":19,"type":"edge","label":"textDocument/hover","outV":13,"inV":18}
{"id":20,"type":"vertex","label":"packageInformation","name":"github.com/sourcegraph/sourcegraph/enterprise/lib","manager":"gomod","version":"v3.25.0-3f0a00693ea0"}
{"id":21,"type":"vertex","label":"moniker","kind":"export","scheme":"gomod","identifier":"github.com/sourcegraph/sourcegraph/enterprise/lib/codeintel/semantic/diff/testdata/project1:Struct1.Field1"}
{"id":22,"type":"edge","label":"packageInformation","outV":21,"inV":20}
{"id":23,"type":"edge","label":"moniker","outV":13,"inV":21}
{"id":24,"type":"vertex","label":"range","start":{"line":11,"character":1},"end":{"line":11,"character":7}}
{"id":25,"type":"vertex","label":"resultSet"}
{"id":26,"type":"vertex","label":"definitionResult"}
{"id":27,"type":"edge","label":"next","outV":24,"inV":25}
{"id":28,"type":"edge","label":"textDocument/definition","outV":25,"inV":26}
{"id":29,"type":"edge","label":"item","outV":26,"inVs":[24],"document":3}
{"id":30,"type":"vertex","label":"hoverResult","result":{"contents":[{"language":"go","value":"struct field field3 string"}]}}
{"id":31,"type":"edge","label":"textDocument/hover","outV":25,"inV":30}
{"id":32,"type":"vertex","label":"range","start":{"line":2,"character":8},"end":{"line":2,"character":36}}
{"id":33,"type":"vertex","label":"resultSet"}
{"id":34,"type":"vertex","label":"definitionResult"}
{"id":35,"type":"edge","label":"next","outV":32,"inV":33}
{"id":36,"type":"edge","label":"textDocument/definition","outV":33,"inV":34}
{"id":37,"type":"edge","label":"item","outV":34,"inVs":[32],"document":3}
{"id":38,"type":"vertex","label":"hoverResult","result":{"contents":[{"language":"go","value":"package \"github.com/google/go-cmp/cmp\""},"Package cmp determines equality of values. \n\nThis package is intended to be a more powerful and safer alternative to reflect.DeepEqual for comparing whether two values are semantically equal. It is intended to only be used in tests, as performance is not a goal and it may panic if it cannot compare the values. Its propensity towards panicking means that its unsuitable for production environments where a spurious panic may be fatal. \n\nThe primary features of cmp are: \n\n• When the default behavior of equality does not suit the needs of the test, custom equality functions can override the equality operation. For example, an equality function may report floats as equal so long as they are within some tolerance of each other. \n\n• Types that have an Equal method may use that method to determine equality. This allows package authors to determine the equality operation for the types that they define. \n\n• If no custom equality functions are used and no Equal method is defined, equality is determined by recursively comparing the primitive kinds on both values, much like reflect.DeepEqual. Unlike reflect.DeepEqual, unexported fields are not compared by default; they result in panics unless suppressed by using an Ignore option (see cmpopts.IgnoreUnexported) or explicitly compared using the Exporter option. \n\n"]}}
{"id":39,"type":"edge","label":"textDocument/hover","outV":33,"inV":38}
{"id":40,"type":"vertex","label":"packageInformation","name":"github.com/google/go-cmp","manager":"gomod","version":"v0.5.4"}
{"id":41,"type":"vertex","label":"moniker","kind":"import","scheme":"gomod","identifier":"github.com/google/go-cmp/cmp"}
{"id":42,"type":"edge","label":"packageInformation","outV":41,"inV":40}
{"id":43,"type":"edge","label":"moniker","outV":33,"inV":41}
{"id":44,"type":"vertex","label":"range","start":{"line":4,"character":5},"end":{"line":4,"character":14}}
{"id":45,"type":"vertex","label":"resultSet"}
{"id":46,"type":"vertex","label":"definitionResult"}
{"id":47,"type":"edge","label":"next","outV":44,"inV":45}
{"id":48,"type":"edge","label":"textDocument/definition","outV":45,"inV":46}
{"id":49,"type":"edge","label":"item","outV":46,"inVs":[44],"document":3}
{"id":50,"type":"vertex","label":"hoverResult","result":{"contents":[{"language":"go","value":"func Function1(arg1 int, arg2 int) string"}]}}
{"id":51,"type":"edge","label":"textDocument/hover","outV":45,"inV":50}
{"id":52,"type":"vertex","label":"moniker","kind":"export","scheme":"gomod","identifier":"github.com/sourcegraph/sourcegraph/enterprise/lib/codeintel/semantic/diff/testdata/project1:Function1"}
{"id":53,"type":"edge","label":"packageInformation","outV":52,"inV":20}
{"id":54,"type":"edge","label":"moniker","outV":45,"inV":52}
{"id":55,"type":"vertex","label":"range","start":{"line":4,"character":15},"end":{"line":4,"character":19}}
{"id":56,"type":"vertex","label":"resultSet"}
{"id":57,"type":"vertex","label":"definitionResult"}
{"id":58,"type":"edge","label":"next","outV":55,"inV":56}
{"id":59,"type":"edge","label":"textDocument/definition","outV":56,"inV":57}
{"id":60,"type":"edge","label":"item","outV":57,"inVs":[55],"document":3}
{"id":61,"type":"vertex","label":"hoverResult","result":{"contents":[{"language":"go","value":"var arg1 int"}]}}
{"id":62,"type":"edge","label":"textDocument/hover","outV":56,"inV":61}
{"id":63,"type":"vertex","label":"range","start":{"line":8,"character":5},"end":{"line":8,"character":12}}
{"id":64,"type":"vertex","label":"resultSet"}
{"id":65,"type":"vertex","label":"definitionResult"}
{"id":66,"type":"edge","label":"next","outV":63,"inV":64}
{"id":67,"type":"edge","label":"textDocument/definition","outV":64,"inV":65}
{"id":68,"type":"edge","label":"item","outV":65,"inVs":[63],"document":3}
{"id":69,"type":"vertex","label":"hoverResult","result":{"contents":[{"language":"go","value":"type Struct1 struct"},{"language":"go","value":"struct {\n    Field1 int\n    Field2 *Struct1\n    field3 string\n}"}]}}
{"id":70,"type":"edge","label":"textDocument/hover","outV":64,"inV":69}
{"id":71,"type":"vertex","label":"moniker","kind":"export","scheme":"gomod","identifier":"github.com/sourcegraph/sourcegraph/enterprise/lib/codeintel/semantic/diff/testdata/project1:Struct1"}
{"id":72,"type":"edge","label":"packageInformation","outV":71,"inV":20}
{"id":73,"type":"edge","label":"moniker","outV":64,"inV":71}
{"id":74,"type":"vertex","label":"range","start":{"line":10,"character":1},"end":{"line":10,"character":7}}
{"id":75,"type":"vertex","label":"resultSet"}
{"id":76,"type":"vertex","label":"definitionResult"}
{"id":77,"type":"edge","label":"next","outV":74,"inV":75}
{"id":78,"type":"edge","label":"textDocument/definition","outV":75,"inV":76}
{"id":79,"type":"edge","label":"item","outV":76,"inVs":[74],"document":3}
{"id":80,"type":"vertex","label":"hoverResult","result":{"contents":[{"language":"go","value":"struct field Field2 *github.com/sourcegraph/sourcegraph/enterprise/lib/codeintel/semantic/diff/testdata/project1.Struct1"}]}}
{"id":81,"type":"edge","label":"textDocument/hover","outV":75,"inV":80}
{"id":82,"type":"vertex","label":"moniker","kind":"export","scheme":"gomod","identifier":"github.com/sourcegraph/sourcegraph/enterprise/lib/codeintel/semantic/diff/testdata/project1:Struct1.Field2"}
{"id":83,"type":"edge","label":"packageInformation","outV":82,"inV":20}
{"id":84,"type":"edge","label":"moniker","outV":75,"inV":82}
{"id":85,"type":"vertex","label":"range","start":{"line":5,"character":24},"end":{"line":5,"character":28}}
{"id":86,"type":"edge","label":"next","outV":85,"inV":56}
{"id":87,"type":"vertex","label":"range","start":{"line":5,"character":8},"end":{"line":5,"character":11}}
{"id":88,"type":"edge","label":"next","outV":87,"inV":33}
{"id":89,"type":"vertex","label":"hoverResult","result":{"contents":[{"language":"go","value":"func Diff(x interface{}, y interface{}, opts ...Option) string"},"Diff returns a human-readable report of the differences between two values: y - x. It returns an empty string if and only if Equal returns true for the same input values and options. \n\nThe output is displayed as a literal in pseudo-Go syntax. At the start of each line, a \"-\" prefix indicates an element removed from x, a \"+\" prefix to indicates an element added from y, and the lack of a prefix indicates an element common to both x and y. If possible, the output uses fmt.Stringer.String or error.Error methods to produce more humanly readable outputs. In such cases, the string is prefixed with either an 's' or 'e' character, respectively, to indicate that the method was called. \n\nDo not depend on this output being stable. If you need the ability to programmatically interpret the difference, consider using a custom Reporter. \n\n"]}}
{"id":90,"type":"vertex","label":"range","start":{"line":5,"character":12},"end":{"line":5,"character":16}}
{"id":91,"type":"vertex","label":"referenceResult"}
{"id":92,"type":"edge","label":"textDocument/references","outV":90,"inV":91}
{"id":93,"type":"edge","label":"item","outV":91,"inVs":[90],"document":3,"property":"references"}
{"id":94,"type":"edge","label":"textDocument/hover","outV":90,"inV":89}
{"id":95,"type":"vertex","label":"moniker","kind":"import","scheme":"gomod","identifier":"github.com/google/go-cmp/cmp:Diff"}
{"id":96,"type":"edge","label":"packageInformation","outV":95,"inV":40}
{"id":97,"type":"edge","label":"moniker","outV":90,"inV":95}
{"id":98,"type":"vertex","label":"range","start":{"line":5,"character":17},"end":{"line":5,"character":21}}
{"id":99,"type":"edge","label":"next","outV":98,"inV":56}
{"id":100,"type":"vertex","label":"range","start":{"line":5,"character":31},"end":{"line":5,"character":35}}
{"id":101,"type":"edge","label":"next","outV":100,"inV":5}
{"id":102,"type":"vertex","label":"range","start":{"line":10,"character":9},"end":{"line":10,"character":16}}
{"id":103,"type":"edge","label":"next","outV":102,"inV":64}
{"id":104,"type":"vertex","label":"referenceResult"}
{"id":105,"type":"edge","label":"textDocument/references","outV":45,"inV":104}
{"id":106,"type":"edge","label":"item","outV":104,"inVs":[44],"document":3,"property":"definitions"}
{"id":107,"type":"vertex","label":"referenceResult"}
{"id":108,"type":"edge","label":"textDocument/references","outV":33,"inV":107}
{"id":109,"type":"edge","label":"item","outV":107,"inVs":[32],"document":3,"property":"definitions"}
{"id":110,"type":"edge","label":"item","outV":107,"inVs":[87],"document":3,"property":"references"}
{"id":111,"type":"vertex","label":"referenceResult"}
{"id":112,"type":"edge","label":"textDocument/references","outV":64,"inV":111}
{"id":113,"type":"edge","label":"item","outV":111,"inVs":[63],"document":3,"property":"definitions"}
{"id":114,"type":"edge","label":"item","outV":111,"inVs":[102],"document":3,"property":"references"}
{"id":115,"type":"vertex","label":"referenceResult"}
{"id":116,"type":"edge","label":"textDocument/references","outV":75,"inV":115}
{"id":117,"type":"edge","label":"item","outV":115,"inVs":[74],"document":3,"property":"definitions"}
{"id":118,"type":"vertex","label":"referenceResult"}
{"id":119,"type":"edge","label":"textDocument/references","outV":25,"inV":118}
{"id":120,"type":"edge","label":"item","outV":118,"inVs":[24],"document":3,"property":"definitions"}
{"id":121,"type":"vertex","label":"referenceResult"}
{"id":122,"type":"edge","label":"textDocument/references","outV":56,"inV":121}
{"id":123,"type":"edge","label":"item","outV":121,"inVs":[55],"document":3,"property":"definitions"}
{"id":124,"type":"vertex","label":"referenceResult"}
{"id":125,"type":"edge","label":"textDocument/references","outV":5,"inV":124}
{"id":126,"type":"edge","label":"item","outV":121,"inVs":[85,98],"document":3,"property":"references"}
{"id":127,"type":"edge","label":"item","outV":124,"inVs":[4],"document":3,"property":"definitions"}
{"id":128,"type":"edge","label":"item","outV":124,"inVs":[100],"document":3,"property":"references"}
{"id":129,"type":"vertex","label":"referenceResult"}
{"id":130,"type":"edge","label":"textDocument/references","outV":13,"inV":129}
{"id":131,"type":"edge","label":"item","outV":129,"inVs":[12],"document":3,"property":"definitions"}
{"id":132,"type":"edge","label":"contains","outV":3,"inVs":[63,87,98,44,90,102,85,32,74,12,24,55,100,4]}
{"id":133,"type":"edge","label":"contains","outV":2,"inVs":[3]}
