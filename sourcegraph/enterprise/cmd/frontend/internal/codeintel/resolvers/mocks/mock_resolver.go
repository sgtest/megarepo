// Code generated by go-mockgen 1.3.1; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the metadata.yaml file in the root of this repository.

package mocks

import (
	"context"
	"sync"
	"time"

	graphqlbackend "github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend"
	resolvers "github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	dbstore "github.com/sourcegraph/sourcegraph/internal/codeintel/stores/dbstore"
	graphql "github.com/sourcegraph/sourcegraph/internal/services/executors/transport/graphql"
	config "github.com/sourcegraph/sourcegraph/lib/codeintel/autoindex/config"
)

// MockResolver is a mock implementation of the Resolver interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/codeintel/resolvers)
// used for unit testing.
type MockResolver struct {
	// AuditLogsForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method AuditLogsForUpload.
	AuditLogsForUploadFunc *ResolverAuditLogsForUploadFunc
	// CommitGraphFunc is an instance of a mock function object controlling
	// the behavior of the method CommitGraph.
	CommitGraphFunc *ResolverCommitGraphFunc
	// CreateConfigurationPolicyFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CreateConfigurationPolicy.
	CreateConfigurationPolicyFunc *ResolverCreateConfigurationPolicyFunc
	// DeleteConfigurationPolicyByIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteConfigurationPolicyByID.
	DeleteConfigurationPolicyByIDFunc *ResolverDeleteConfigurationPolicyByIDFunc
	// DeleteIndexByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteIndexByID.
	DeleteIndexByIDFunc *ResolverDeleteIndexByIDFunc
	// DeleteUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploadByID.
	DeleteUploadByIDFunc *ResolverDeleteUploadByIDFunc
	// ExecutorResolverFunc is an instance of a mock function object
	// controlling the behavior of the method ExecutorResolver.
	ExecutorResolverFunc *ResolverExecutorResolverFunc
	// GetConfigurationPoliciesFunc is an instance of a mock function object
	// controlling the behavior of the method GetConfigurationPolicies.
	GetConfigurationPoliciesFunc *ResolverGetConfigurationPoliciesFunc
	// GetConfigurationPolicyByIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetConfigurationPolicyByID.
	GetConfigurationPolicyByIDFunc *ResolverGetConfigurationPolicyByIDFunc
	// GetIndexByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexByID.
	GetIndexByIDFunc *ResolverGetIndexByIDFunc
	// GetIndexesByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetIndexesByIDs.
	GetIndexesByIDsFunc *ResolverGetIndexesByIDsFunc
	// GetUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadByID.
	GetUploadByIDFunc *ResolverGetUploadByIDFunc
	// GetUploadDocumentsForPathFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadDocumentsForPath.
	GetUploadDocumentsForPathFunc *ResolverGetUploadDocumentsForPathFunc
	// GetUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByIDs.
	GetUploadsByIDsFunc *ResolverGetUploadsByIDsFunc
	// IndexConfigurationFunc is an instance of a mock function object
	// controlling the behavior of the method IndexConfiguration.
	IndexConfigurationFunc *ResolverIndexConfigurationFunc
	// IndexConnectionResolverFunc is an instance of a mock function object
	// controlling the behavior of the method IndexConnectionResolver.
	IndexConnectionResolverFunc *ResolverIndexConnectionResolverFunc
	// InferedIndexConfigurationFunc is an instance of a mock function
	// object controlling the behavior of the method
	// InferedIndexConfiguration.
	InferedIndexConfigurationFunc *ResolverInferedIndexConfigurationFunc
	// InferedIndexConfigurationHintsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// InferedIndexConfigurationHints.
	InferedIndexConfigurationHintsFunc *ResolverInferedIndexConfigurationHintsFunc
	// PreviewGitObjectFilterFunc is an instance of a mock function object
	// controlling the behavior of the method PreviewGitObjectFilter.
	PreviewGitObjectFilterFunc *ResolverPreviewGitObjectFilterFunc
	// PreviewRepositoryFilterFunc is an instance of a mock function object
	// controlling the behavior of the method PreviewRepositoryFilter.
	PreviewRepositoryFilterFunc *ResolverPreviewRepositoryFilterFunc
	// QueryResolverFunc is an instance of a mock function object
	// controlling the behavior of the method QueryResolver.
	QueryResolverFunc *ResolverQueryResolverFunc
	// QueueAutoIndexJobsForRepoFunc is an instance of a mock function
	// object controlling the behavior of the method
	// QueueAutoIndexJobsForRepo.
	QueueAutoIndexJobsForRepoFunc *ResolverQueueAutoIndexJobsForRepoFunc
	// RepositorySummaryFunc is an instance of a mock function object
	// controlling the behavior of the method RepositorySummary.
	RepositorySummaryFunc *ResolverRepositorySummaryFunc
	// RequestLanguageSupportFunc is an instance of a mock function object
	// controlling the behavior of the method RequestLanguageSupport.
	RequestLanguageSupportFunc *ResolverRequestLanguageSupportFunc
	// RequestedLanguageSupportFunc is an instance of a mock function object
	// controlling the behavior of the method RequestedLanguageSupport.
	RequestedLanguageSupportFunc *ResolverRequestedLanguageSupportFunc
	// RetentionPolicyOverviewFunc is an instance of a mock function object
	// controlling the behavior of the method RetentionPolicyOverview.
	RetentionPolicyOverviewFunc *ResolverRetentionPolicyOverviewFunc
	// SupportedByCtagsFunc is an instance of a mock function object
	// controlling the behavior of the method SupportedByCtags.
	SupportedByCtagsFunc *ResolverSupportedByCtagsFunc
	// UpdateConfigurationPolicyFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateConfigurationPolicy.
	UpdateConfigurationPolicyFunc *ResolverUpdateConfigurationPolicyFunc
	// UpdateIndexConfigurationByRepositoryIDFunc is an instance of a mock
	// function object controlling the behavior of the method
	// UpdateIndexConfigurationByRepositoryID.
	UpdateIndexConfigurationByRepositoryIDFunc *ResolverUpdateIndexConfigurationByRepositoryIDFunc
	// UploadConnectionResolverFunc is an instance of a mock function object
	// controlling the behavior of the method UploadConnectionResolver.
	UploadConnectionResolverFunc *ResolverUploadConnectionResolverFunc
}

// NewMockResolver creates a new mock of the Resolver interface. All methods
// return zero values for all results, unless overwritten.
func NewMockResolver() *MockResolver {
	return &MockResolver{
		AuditLogsForUploadFunc: &ResolverAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) (r0 []dbstore.UploadLog, r1 error) {
				return
			},
		},
		CommitGraphFunc: &ResolverCommitGraphFunc{
			defaultHook: func(context.Context, int) (r0 graphqlbackend.CodeIntelligenceCommitGraphResolver, r1 error) {
				return
			},
		},
		CreateConfigurationPolicyFunc: &ResolverCreateConfigurationPolicyFunc{
			defaultHook: func(context.Context, dbstore.ConfigurationPolicy) (r0 dbstore.ConfigurationPolicy, r1 error) {
				return
			},
		},
		DeleteConfigurationPolicyByIDFunc: &ResolverDeleteConfigurationPolicyByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		DeleteIndexByIDFunc: &ResolverDeleteIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		DeleteUploadByIDFunc: &ResolverDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		ExecutorResolverFunc: &ResolverExecutorResolverFunc{
			defaultHook: func() (r0 graphql.Resolver) {
				return
			},
		},
		GetConfigurationPoliciesFunc: &ResolverGetConfigurationPoliciesFunc{
			defaultHook: func(context.Context, dbstore.GetConfigurationPoliciesOptions) (r0 []dbstore.ConfigurationPolicy, r1 int, r2 error) {
				return
			},
		},
		GetConfigurationPolicyByIDFunc: &ResolverGetConfigurationPolicyByIDFunc{
			defaultHook: func(context.Context, int) (r0 dbstore.ConfigurationPolicy, r1 bool, r2 error) {
				return
			},
		},
		GetIndexByIDFunc: &ResolverGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 dbstore.Index, r1 bool, r2 error) {
				return
			},
		},
		GetIndexesByIDsFunc: &ResolverGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []dbstore.Index, r1 error) {
				return
			},
		},
		GetUploadByIDFunc: &ResolverGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 dbstore.Upload, r1 bool, r2 error) {
				return
			},
		},
		GetUploadDocumentsForPathFunc: &ResolverGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) (r0 []string, r1 int, r2 error) {
				return
			},
		},
		GetUploadsByIDsFunc: &ResolverGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []dbstore.Upload, r1 error) {
				return
			},
		},
		IndexConfigurationFunc: &ResolverIndexConfigurationFunc{
			defaultHook: func(context.Context, int) (r0 []byte, r1 bool, r2 error) {
				return
			},
		},
		IndexConnectionResolverFunc: &ResolverIndexConnectionResolverFunc{
			defaultHook: func(dbstore.GetIndexesOptions) (r0 *resolvers.IndexesResolver) {
				return
			},
		},
		InferedIndexConfigurationFunc: &ResolverInferedIndexConfigurationFunc{
			defaultHook: func(context.Context, int, string) (r0 *config.IndexConfiguration, r1 bool, r2 error) {
				return
			},
		},
		InferedIndexConfigurationHintsFunc: &ResolverInferedIndexConfigurationHintsFunc{
			defaultHook: func(context.Context, int, string) (r0 []config.IndexJobHint, r1 error) {
				return
			},
		},
		PreviewGitObjectFilterFunc: &ResolverPreviewGitObjectFilterFunc{
			defaultHook: func(context.Context, int, dbstore.GitObjectType, string) (r0 map[string][]string, r1 error) {
				return
			},
		},
		PreviewRepositoryFilterFunc: &ResolverPreviewRepositoryFilterFunc{
			defaultHook: func(context.Context, []string, int, int) (r0 []int, r1 int, r2 *int, r3 error) {
				return
			},
		},
		QueryResolverFunc: &ResolverQueryResolverFunc{
			defaultHook: func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (r0 resolvers.QueryResolver, r1 error) {
				return
			},
		},
		QueueAutoIndexJobsForRepoFunc: &ResolverQueueAutoIndexJobsForRepoFunc{
			defaultHook: func(context.Context, int, string, string) (r0 []dbstore.Index, r1 error) {
				return
			},
		},
		RepositorySummaryFunc: &ResolverRepositorySummaryFunc{
			defaultHook: func(context.Context, int) (r0 resolvers.RepositorySummary, r1 error) {
				return
			},
		},
		RequestLanguageSupportFunc: &ResolverRequestLanguageSupportFunc{
			defaultHook: func(context.Context, int, string) (r0 error) {
				return
			},
		},
		RequestedLanguageSupportFunc: &ResolverRequestedLanguageSupportFunc{
			defaultHook: func(context.Context, int) (r0 []string, r1 error) {
				return
			},
		},
		RetentionPolicyOverviewFunc: &ResolverRetentionPolicyOverviewFunc{
			defaultHook: func(context.Context, dbstore.Upload, bool, int, int64, string, time.Time) (r0 []resolvers.RetentionPolicyMatchCandidate, r1 int, r2 error) {
				return
			},
		},
		SupportedByCtagsFunc: &ResolverSupportedByCtagsFunc{
			defaultHook: func(context.Context, string, api.RepoName) (r0 bool, r1 string, r2 error) {
				return
			},
		},
		UpdateConfigurationPolicyFunc: &ResolverUpdateConfigurationPolicyFunc{
			defaultHook: func(context.Context, dbstore.ConfigurationPolicy) (r0 error) {
				return
			},
		},
		UpdateIndexConfigurationByRepositoryIDFunc: &ResolverUpdateIndexConfigurationByRepositoryIDFunc{
			defaultHook: func(context.Context, int, string) (r0 error) {
				return
			},
		},
		UploadConnectionResolverFunc: &ResolverUploadConnectionResolverFunc{
			defaultHook: func(dbstore.GetUploadsOptions) (r0 *resolvers.UploadsResolver) {
				return
			},
		},
	}
}

// NewStrictMockResolver creates a new mock of the Resolver interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockResolver() *MockResolver {
	return &MockResolver{
		AuditLogsForUploadFunc: &ResolverAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) ([]dbstore.UploadLog, error) {
				panic("unexpected invocation of MockResolver.AuditLogsForUpload")
			},
		},
		CommitGraphFunc: &ResolverCommitGraphFunc{
			defaultHook: func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error) {
				panic("unexpected invocation of MockResolver.CommitGraph")
			},
		},
		CreateConfigurationPolicyFunc: &ResolverCreateConfigurationPolicyFunc{
			defaultHook: func(context.Context, dbstore.ConfigurationPolicy) (dbstore.ConfigurationPolicy, error) {
				panic("unexpected invocation of MockResolver.CreateConfigurationPolicy")
			},
		},
		DeleteConfigurationPolicyByIDFunc: &ResolverDeleteConfigurationPolicyByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockResolver.DeleteConfigurationPolicyByID")
			},
		},
		DeleteIndexByIDFunc: &ResolverDeleteIndexByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockResolver.DeleteIndexByID")
			},
		},
		DeleteUploadByIDFunc: &ResolverDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockResolver.DeleteUploadByID")
			},
		},
		ExecutorResolverFunc: &ResolverExecutorResolverFunc{
			defaultHook: func() graphql.Resolver {
				panic("unexpected invocation of MockResolver.ExecutorResolver")
			},
		},
		GetConfigurationPoliciesFunc: &ResolverGetConfigurationPoliciesFunc{
			defaultHook: func(context.Context, dbstore.GetConfigurationPoliciesOptions) ([]dbstore.ConfigurationPolicy, int, error) {
				panic("unexpected invocation of MockResolver.GetConfigurationPolicies")
			},
		},
		GetConfigurationPolicyByIDFunc: &ResolverGetConfigurationPolicyByIDFunc{
			defaultHook: func(context.Context, int) (dbstore.ConfigurationPolicy, bool, error) {
				panic("unexpected invocation of MockResolver.GetConfigurationPolicyByID")
			},
		},
		GetIndexByIDFunc: &ResolverGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (dbstore.Index, bool, error) {
				panic("unexpected invocation of MockResolver.GetIndexByID")
			},
		},
		GetIndexesByIDsFunc: &ResolverGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]dbstore.Index, error) {
				panic("unexpected invocation of MockResolver.GetIndexesByIDs")
			},
		},
		GetUploadByIDFunc: &ResolverGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (dbstore.Upload, bool, error) {
				panic("unexpected invocation of MockResolver.GetUploadByID")
			},
		},
		GetUploadDocumentsForPathFunc: &ResolverGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) ([]string, int, error) {
				panic("unexpected invocation of MockResolver.GetUploadDocumentsForPath")
			},
		},
		GetUploadsByIDsFunc: &ResolverGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]dbstore.Upload, error) {
				panic("unexpected invocation of MockResolver.GetUploadsByIDs")
			},
		},
		IndexConfigurationFunc: &ResolverIndexConfigurationFunc{
			defaultHook: func(context.Context, int) ([]byte, bool, error) {
				panic("unexpected invocation of MockResolver.IndexConfiguration")
			},
		},
		IndexConnectionResolverFunc: &ResolverIndexConnectionResolverFunc{
			defaultHook: func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver {
				panic("unexpected invocation of MockResolver.IndexConnectionResolver")
			},
		},
		InferedIndexConfigurationFunc: &ResolverInferedIndexConfigurationFunc{
			defaultHook: func(context.Context, int, string) (*config.IndexConfiguration, bool, error) {
				panic("unexpected invocation of MockResolver.InferedIndexConfiguration")
			},
		},
		InferedIndexConfigurationHintsFunc: &ResolverInferedIndexConfigurationHintsFunc{
			defaultHook: func(context.Context, int, string) ([]config.IndexJobHint, error) {
				panic("unexpected invocation of MockResolver.InferedIndexConfigurationHints")
			},
		},
		PreviewGitObjectFilterFunc: &ResolverPreviewGitObjectFilterFunc{
			defaultHook: func(context.Context, int, dbstore.GitObjectType, string) (map[string][]string, error) {
				panic("unexpected invocation of MockResolver.PreviewGitObjectFilter")
			},
		},
		PreviewRepositoryFilterFunc: &ResolverPreviewRepositoryFilterFunc{
			defaultHook: func(context.Context, []string, int, int) ([]int, int, *int, error) {
				panic("unexpected invocation of MockResolver.PreviewRepositoryFilter")
			},
		},
		QueryResolverFunc: &ResolverQueryResolverFunc{
			defaultHook: func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error) {
				panic("unexpected invocation of MockResolver.QueryResolver")
			},
		},
		QueueAutoIndexJobsForRepoFunc: &ResolverQueueAutoIndexJobsForRepoFunc{
			defaultHook: func(context.Context, int, string, string) ([]dbstore.Index, error) {
				panic("unexpected invocation of MockResolver.QueueAutoIndexJobsForRepo")
			},
		},
		RepositorySummaryFunc: &ResolverRepositorySummaryFunc{
			defaultHook: func(context.Context, int) (resolvers.RepositorySummary, error) {
				panic("unexpected invocation of MockResolver.RepositorySummary")
			},
		},
		RequestLanguageSupportFunc: &ResolverRequestLanguageSupportFunc{
			defaultHook: func(context.Context, int, string) error {
				panic("unexpected invocation of MockResolver.RequestLanguageSupport")
			},
		},
		RequestedLanguageSupportFunc: &ResolverRequestedLanguageSupportFunc{
			defaultHook: func(context.Context, int) ([]string, error) {
				panic("unexpected invocation of MockResolver.RequestedLanguageSupport")
			},
		},
		RetentionPolicyOverviewFunc: &ResolverRetentionPolicyOverviewFunc{
			defaultHook: func(context.Context, dbstore.Upload, bool, int, int64, string, time.Time) ([]resolvers.RetentionPolicyMatchCandidate, int, error) {
				panic("unexpected invocation of MockResolver.RetentionPolicyOverview")
			},
		},
		SupportedByCtagsFunc: &ResolverSupportedByCtagsFunc{
			defaultHook: func(context.Context, string, api.RepoName) (bool, string, error) {
				panic("unexpected invocation of MockResolver.SupportedByCtags")
			},
		},
		UpdateConfigurationPolicyFunc: &ResolverUpdateConfigurationPolicyFunc{
			defaultHook: func(context.Context, dbstore.ConfigurationPolicy) error {
				panic("unexpected invocation of MockResolver.UpdateConfigurationPolicy")
			},
		},
		UpdateIndexConfigurationByRepositoryIDFunc: &ResolverUpdateIndexConfigurationByRepositoryIDFunc{
			defaultHook: func(context.Context, int, string) error {
				panic("unexpected invocation of MockResolver.UpdateIndexConfigurationByRepositoryID")
			},
		},
		UploadConnectionResolverFunc: &ResolverUploadConnectionResolverFunc{
			defaultHook: func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver {
				panic("unexpected invocation of MockResolver.UploadConnectionResolver")
			},
		},
	}
}

// NewMockResolverFrom creates a new mock of the MockResolver interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockResolverFrom(i resolvers.Resolver) *MockResolver {
	return &MockResolver{
		AuditLogsForUploadFunc: &ResolverAuditLogsForUploadFunc{
			defaultHook: i.AuditLogsForUpload,
		},
		CommitGraphFunc: &ResolverCommitGraphFunc{
			defaultHook: i.CommitGraph,
		},
		CreateConfigurationPolicyFunc: &ResolverCreateConfigurationPolicyFunc{
			defaultHook: i.CreateConfigurationPolicy,
		},
		DeleteConfigurationPolicyByIDFunc: &ResolverDeleteConfigurationPolicyByIDFunc{
			defaultHook: i.DeleteConfigurationPolicyByID,
		},
		DeleteIndexByIDFunc: &ResolverDeleteIndexByIDFunc{
			defaultHook: i.DeleteIndexByID,
		},
		DeleteUploadByIDFunc: &ResolverDeleteUploadByIDFunc{
			defaultHook: i.DeleteUploadByID,
		},
		ExecutorResolverFunc: &ResolverExecutorResolverFunc{
			defaultHook: i.ExecutorResolver,
		},
		GetConfigurationPoliciesFunc: &ResolverGetConfigurationPoliciesFunc{
			defaultHook: i.GetConfigurationPolicies,
		},
		GetConfigurationPolicyByIDFunc: &ResolverGetConfigurationPolicyByIDFunc{
			defaultHook: i.GetConfigurationPolicyByID,
		},
		GetIndexByIDFunc: &ResolverGetIndexByIDFunc{
			defaultHook: i.GetIndexByID,
		},
		GetIndexesByIDsFunc: &ResolverGetIndexesByIDsFunc{
			defaultHook: i.GetIndexesByIDs,
		},
		GetUploadByIDFunc: &ResolverGetUploadByIDFunc{
			defaultHook: i.GetUploadByID,
		},
		GetUploadDocumentsForPathFunc: &ResolverGetUploadDocumentsForPathFunc{
			defaultHook: i.GetUploadDocumentsForPath,
		},
		GetUploadsByIDsFunc: &ResolverGetUploadsByIDsFunc{
			defaultHook: i.GetUploadsByIDs,
		},
		IndexConfigurationFunc: &ResolverIndexConfigurationFunc{
			defaultHook: i.IndexConfiguration,
		},
		IndexConnectionResolverFunc: &ResolverIndexConnectionResolverFunc{
			defaultHook: i.IndexConnectionResolver,
		},
		InferedIndexConfigurationFunc: &ResolverInferedIndexConfigurationFunc{
			defaultHook: i.InferedIndexConfiguration,
		},
		InferedIndexConfigurationHintsFunc: &ResolverInferedIndexConfigurationHintsFunc{
			defaultHook: i.InferedIndexConfigurationHints,
		},
		PreviewGitObjectFilterFunc: &ResolverPreviewGitObjectFilterFunc{
			defaultHook: i.PreviewGitObjectFilter,
		},
		PreviewRepositoryFilterFunc: &ResolverPreviewRepositoryFilterFunc{
			defaultHook: i.PreviewRepositoryFilter,
		},
		QueryResolverFunc: &ResolverQueryResolverFunc{
			defaultHook: i.QueryResolver,
		},
		QueueAutoIndexJobsForRepoFunc: &ResolverQueueAutoIndexJobsForRepoFunc{
			defaultHook: i.QueueAutoIndexJobsForRepo,
		},
		RepositorySummaryFunc: &ResolverRepositorySummaryFunc{
			defaultHook: i.RepositorySummary,
		},
		RequestLanguageSupportFunc: &ResolverRequestLanguageSupportFunc{
			defaultHook: i.RequestLanguageSupport,
		},
		RequestedLanguageSupportFunc: &ResolverRequestedLanguageSupportFunc{
			defaultHook: i.RequestedLanguageSupport,
		},
		RetentionPolicyOverviewFunc: &ResolverRetentionPolicyOverviewFunc{
			defaultHook: i.RetentionPolicyOverview,
		},
		SupportedByCtagsFunc: &ResolverSupportedByCtagsFunc{
			defaultHook: i.SupportedByCtags,
		},
		UpdateConfigurationPolicyFunc: &ResolverUpdateConfigurationPolicyFunc{
			defaultHook: i.UpdateConfigurationPolicy,
		},
		UpdateIndexConfigurationByRepositoryIDFunc: &ResolverUpdateIndexConfigurationByRepositoryIDFunc{
			defaultHook: i.UpdateIndexConfigurationByRepositoryID,
		},
		UploadConnectionResolverFunc: &ResolverUploadConnectionResolverFunc{
			defaultHook: i.UploadConnectionResolver,
		},
	}
}

// ResolverAuditLogsForUploadFunc describes the behavior when the
// AuditLogsForUpload method of the parent MockResolver instance is invoked.
type ResolverAuditLogsForUploadFunc struct {
	defaultHook func(context.Context, int) ([]dbstore.UploadLog, error)
	hooks       []func(context.Context, int) ([]dbstore.UploadLog, error)
	history     []ResolverAuditLogsForUploadFuncCall
	mutex       sync.Mutex
}

// AuditLogsForUpload delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) AuditLogsForUpload(v0 context.Context, v1 int) ([]dbstore.UploadLog, error) {
	r0, r1 := m.AuditLogsForUploadFunc.nextHook()(v0, v1)
	m.AuditLogsForUploadFunc.appendCall(ResolverAuditLogsForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AuditLogsForUpload
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverAuditLogsForUploadFunc) SetDefaultHook(hook func(context.Context, int) ([]dbstore.UploadLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AuditLogsForUpload method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverAuditLogsForUploadFunc) PushHook(hook func(context.Context, int) ([]dbstore.UploadLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverAuditLogsForUploadFunc) SetDefaultReturn(r0 []dbstore.UploadLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]dbstore.UploadLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverAuditLogsForUploadFunc) PushReturn(r0 []dbstore.UploadLog, r1 error) {
	f.PushHook(func(context.Context, int) ([]dbstore.UploadLog, error) {
		return r0, r1
	})
}

func (f *ResolverAuditLogsForUploadFunc) nextHook() func(context.Context, int) ([]dbstore.UploadLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverAuditLogsForUploadFunc) appendCall(r0 ResolverAuditLogsForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverAuditLogsForUploadFuncCall objects
// describing the invocations of this function.
func (f *ResolverAuditLogsForUploadFunc) History() []ResolverAuditLogsForUploadFuncCall {
	f.mutex.Lock()
	history := make([]ResolverAuditLogsForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverAuditLogsForUploadFuncCall is an object that describes an
// invocation of method AuditLogsForUpload on an instance of MockResolver.
type ResolverAuditLogsForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []dbstore.UploadLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverAuditLogsForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverAuditLogsForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverCommitGraphFunc describes the behavior when the CommitGraph
// method of the parent MockResolver instance is invoked.
type ResolverCommitGraphFunc struct {
	defaultHook func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)
	hooks       []func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)
	history     []ResolverCommitGraphFuncCall
	mutex       sync.Mutex
}

// CommitGraph delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockResolver) CommitGraph(v0 context.Context, v1 int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error) {
	r0, r1 := m.CommitGraphFunc.nextHook()(v0, v1)
	m.CommitGraphFunc.appendCall(ResolverCommitGraphFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitGraph method
// of the parent MockResolver instance is invoked and the hook queue is
// empty.
func (f *ResolverCommitGraphFunc) SetDefaultHook(hook func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitGraph method of the parent MockResolver instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ResolverCommitGraphFunc) PushHook(hook func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverCommitGraphFunc) SetDefaultReturn(r0 graphqlbackend.CodeIntelligenceCommitGraphResolver, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverCommitGraphFunc) PushReturn(r0 graphqlbackend.CodeIntelligenceCommitGraphResolver, r1 error) {
	f.PushHook(func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error) {
		return r0, r1
	})
}

func (f *ResolverCommitGraphFunc) nextHook() func(context.Context, int) (graphqlbackend.CodeIntelligenceCommitGraphResolver, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverCommitGraphFunc) appendCall(r0 ResolverCommitGraphFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverCommitGraphFuncCall objects
// describing the invocations of this function.
func (f *ResolverCommitGraphFunc) History() []ResolverCommitGraphFuncCall {
	f.mutex.Lock()
	history := make([]ResolverCommitGraphFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverCommitGraphFuncCall is an object that describes an invocation of
// method CommitGraph on an instance of MockResolver.
type ResolverCommitGraphFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 graphqlbackend.CodeIntelligenceCommitGraphResolver
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverCommitGraphFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverCommitGraphFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverCreateConfigurationPolicyFunc describes the behavior when the
// CreateConfigurationPolicy method of the parent MockResolver instance is
// invoked.
type ResolverCreateConfigurationPolicyFunc struct {
	defaultHook func(context.Context, dbstore.ConfigurationPolicy) (dbstore.ConfigurationPolicy, error)
	hooks       []func(context.Context, dbstore.ConfigurationPolicy) (dbstore.ConfigurationPolicy, error)
	history     []ResolverCreateConfigurationPolicyFuncCall
	mutex       sync.Mutex
}

// CreateConfigurationPolicy delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) CreateConfigurationPolicy(v0 context.Context, v1 dbstore.ConfigurationPolicy) (dbstore.ConfigurationPolicy, error) {
	r0, r1 := m.CreateConfigurationPolicyFunc.nextHook()(v0, v1)
	m.CreateConfigurationPolicyFunc.appendCall(ResolverCreateConfigurationPolicyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateConfigurationPolicy method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverCreateConfigurationPolicyFunc) SetDefaultHook(hook func(context.Context, dbstore.ConfigurationPolicy) (dbstore.ConfigurationPolicy, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateConfigurationPolicy method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverCreateConfigurationPolicyFunc) PushHook(hook func(context.Context, dbstore.ConfigurationPolicy) (dbstore.ConfigurationPolicy, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverCreateConfigurationPolicyFunc) SetDefaultReturn(r0 dbstore.ConfigurationPolicy, r1 error) {
	f.SetDefaultHook(func(context.Context, dbstore.ConfigurationPolicy) (dbstore.ConfigurationPolicy, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverCreateConfigurationPolicyFunc) PushReturn(r0 dbstore.ConfigurationPolicy, r1 error) {
	f.PushHook(func(context.Context, dbstore.ConfigurationPolicy) (dbstore.ConfigurationPolicy, error) {
		return r0, r1
	})
}

func (f *ResolverCreateConfigurationPolicyFunc) nextHook() func(context.Context, dbstore.ConfigurationPolicy) (dbstore.ConfigurationPolicy, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverCreateConfigurationPolicyFunc) appendCall(r0 ResolverCreateConfigurationPolicyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverCreateConfigurationPolicyFuncCall
// objects describing the invocations of this function.
func (f *ResolverCreateConfigurationPolicyFunc) History() []ResolverCreateConfigurationPolicyFuncCall {
	f.mutex.Lock()
	history := make([]ResolverCreateConfigurationPolicyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverCreateConfigurationPolicyFuncCall is an object that describes an
// invocation of method CreateConfigurationPolicy on an instance of
// MockResolver.
type ResolverCreateConfigurationPolicyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 dbstore.ConfigurationPolicy
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 dbstore.ConfigurationPolicy
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverCreateConfigurationPolicyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverCreateConfigurationPolicyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverDeleteConfigurationPolicyByIDFunc describes the behavior when the
// DeleteConfigurationPolicyByID method of the parent MockResolver instance
// is invoked.
type ResolverDeleteConfigurationPolicyByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []ResolverDeleteConfigurationPolicyByIDFuncCall
	mutex       sync.Mutex
}

// DeleteConfigurationPolicyByID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) DeleteConfigurationPolicyByID(v0 context.Context, v1 int) error {
	r0 := m.DeleteConfigurationPolicyByIDFunc.nextHook()(v0, v1)
	m.DeleteConfigurationPolicyByIDFunc.appendCall(ResolverDeleteConfigurationPolicyByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteConfigurationPolicyByID method of the parent MockResolver instance
// is invoked and the hook queue is empty.
func (f *ResolverDeleteConfigurationPolicyByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteConfigurationPolicyByID method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverDeleteConfigurationPolicyByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverDeleteConfigurationPolicyByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverDeleteConfigurationPolicyByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *ResolverDeleteConfigurationPolicyByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverDeleteConfigurationPolicyByIDFunc) appendCall(r0 ResolverDeleteConfigurationPolicyByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverDeleteConfigurationPolicyByIDFuncCall objects describing the
// invocations of this function.
func (f *ResolverDeleteConfigurationPolicyByIDFunc) History() []ResolverDeleteConfigurationPolicyByIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverDeleteConfigurationPolicyByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverDeleteConfigurationPolicyByIDFuncCall is an object that describes
// an invocation of method DeleteConfigurationPolicyByID on an instance of
// MockResolver.
type ResolverDeleteConfigurationPolicyByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverDeleteConfigurationPolicyByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverDeleteConfigurationPolicyByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverDeleteIndexByIDFunc describes the behavior when the
// DeleteIndexByID method of the parent MockResolver instance is invoked.
type ResolverDeleteIndexByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []ResolverDeleteIndexByIDFuncCall
	mutex       sync.Mutex
}

// DeleteIndexByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) DeleteIndexByID(v0 context.Context, v1 int) error {
	r0 := m.DeleteIndexByIDFunc.nextHook()(v0, v1)
	m.DeleteIndexByIDFunc.appendCall(ResolverDeleteIndexByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteIndexByID
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverDeleteIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteIndexByID method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverDeleteIndexByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverDeleteIndexByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverDeleteIndexByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *ResolverDeleteIndexByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverDeleteIndexByIDFunc) appendCall(r0 ResolverDeleteIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverDeleteIndexByIDFuncCall objects
// describing the invocations of this function.
func (f *ResolverDeleteIndexByIDFunc) History() []ResolverDeleteIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverDeleteIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverDeleteIndexByIDFuncCall is an object that describes an invocation
// of method DeleteIndexByID on an instance of MockResolver.
type ResolverDeleteIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverDeleteIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverDeleteIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverDeleteUploadByIDFunc describes the behavior when the
// DeleteUploadByID method of the parent MockResolver instance is invoked.
type ResolverDeleteUploadByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []ResolverDeleteUploadByIDFuncCall
	mutex       sync.Mutex
}

// DeleteUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) DeleteUploadByID(v0 context.Context, v1 int) error {
	r0 := m.DeleteUploadByIDFunc.nextHook()(v0, v1)
	m.DeleteUploadByIDFunc.appendCall(ResolverDeleteUploadByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteUploadByID
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploadByID method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverDeleteUploadByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverDeleteUploadByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverDeleteUploadByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *ResolverDeleteUploadByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverDeleteUploadByIDFunc) appendCall(r0 ResolverDeleteUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverDeleteUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *ResolverDeleteUploadByIDFunc) History() []ResolverDeleteUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverDeleteUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverDeleteUploadByIDFuncCall is an object that describes an
// invocation of method DeleteUploadByID on an instance of MockResolver.
type ResolverDeleteUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverDeleteUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverDeleteUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverExecutorResolverFunc describes the behavior when the
// ExecutorResolver method of the parent MockResolver instance is invoked.
type ResolverExecutorResolverFunc struct {
	defaultHook func() graphql.Resolver
	hooks       []func() graphql.Resolver
	history     []ResolverExecutorResolverFuncCall
	mutex       sync.Mutex
}

// ExecutorResolver delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) ExecutorResolver() graphql.Resolver {
	r0 := m.ExecutorResolverFunc.nextHook()()
	m.ExecutorResolverFunc.appendCall(ResolverExecutorResolverFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExecutorResolver
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverExecutorResolverFunc) SetDefaultHook(hook func() graphql.Resolver) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecutorResolver method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverExecutorResolverFunc) PushHook(hook func() graphql.Resolver) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverExecutorResolverFunc) SetDefaultReturn(r0 graphql.Resolver) {
	f.SetDefaultHook(func() graphql.Resolver {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverExecutorResolverFunc) PushReturn(r0 graphql.Resolver) {
	f.PushHook(func() graphql.Resolver {
		return r0
	})
}

func (f *ResolverExecutorResolverFunc) nextHook() func() graphql.Resolver {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverExecutorResolverFunc) appendCall(r0 ResolverExecutorResolverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverExecutorResolverFuncCall objects
// describing the invocations of this function.
func (f *ResolverExecutorResolverFunc) History() []ResolverExecutorResolverFuncCall {
	f.mutex.Lock()
	history := make([]ResolverExecutorResolverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverExecutorResolverFuncCall is an object that describes an
// invocation of method ExecutorResolver on an instance of MockResolver.
type ResolverExecutorResolverFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 graphql.Resolver
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverExecutorResolverFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverExecutorResolverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverGetConfigurationPoliciesFunc describes the behavior when the
// GetConfigurationPolicies method of the parent MockResolver instance is
// invoked.
type ResolverGetConfigurationPoliciesFunc struct {
	defaultHook func(context.Context, dbstore.GetConfigurationPoliciesOptions) ([]dbstore.ConfigurationPolicy, int, error)
	hooks       []func(context.Context, dbstore.GetConfigurationPoliciesOptions) ([]dbstore.ConfigurationPolicy, int, error)
	history     []ResolverGetConfigurationPoliciesFuncCall
	mutex       sync.Mutex
}

// GetConfigurationPolicies delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) GetConfigurationPolicies(v0 context.Context, v1 dbstore.GetConfigurationPoliciesOptions) ([]dbstore.ConfigurationPolicy, int, error) {
	r0, r1, r2 := m.GetConfigurationPoliciesFunc.nextHook()(v0, v1)
	m.GetConfigurationPoliciesFunc.appendCall(ResolverGetConfigurationPoliciesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetConfigurationPolicies method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverGetConfigurationPoliciesFunc) SetDefaultHook(hook func(context.Context, dbstore.GetConfigurationPoliciesOptions) ([]dbstore.ConfigurationPolicy, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetConfigurationPolicies method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverGetConfigurationPoliciesFunc) PushHook(hook func(context.Context, dbstore.GetConfigurationPoliciesOptions) ([]dbstore.ConfigurationPolicy, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetConfigurationPoliciesFunc) SetDefaultReturn(r0 []dbstore.ConfigurationPolicy, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, dbstore.GetConfigurationPoliciesOptions) ([]dbstore.ConfigurationPolicy, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetConfigurationPoliciesFunc) PushReturn(r0 []dbstore.ConfigurationPolicy, r1 int, r2 error) {
	f.PushHook(func(context.Context, dbstore.GetConfigurationPoliciesOptions) ([]dbstore.ConfigurationPolicy, int, error) {
		return r0, r1, r2
	})
}

func (f *ResolverGetConfigurationPoliciesFunc) nextHook() func(context.Context, dbstore.GetConfigurationPoliciesOptions) ([]dbstore.ConfigurationPolicy, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetConfigurationPoliciesFunc) appendCall(r0 ResolverGetConfigurationPoliciesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetConfigurationPoliciesFuncCall
// objects describing the invocations of this function.
func (f *ResolverGetConfigurationPoliciesFunc) History() []ResolverGetConfigurationPoliciesFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetConfigurationPoliciesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetConfigurationPoliciesFuncCall is an object that describes an
// invocation of method GetConfigurationPolicies on an instance of
// MockResolver.
type ResolverGetConfigurationPoliciesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 dbstore.GetConfigurationPoliciesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []dbstore.ConfigurationPolicy
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetConfigurationPoliciesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetConfigurationPoliciesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverGetConfigurationPolicyByIDFunc describes the behavior when the
// GetConfigurationPolicyByID method of the parent MockResolver instance is
// invoked.
type ResolverGetConfigurationPolicyByIDFunc struct {
	defaultHook func(context.Context, int) (dbstore.ConfigurationPolicy, bool, error)
	hooks       []func(context.Context, int) (dbstore.ConfigurationPolicy, bool, error)
	history     []ResolverGetConfigurationPolicyByIDFuncCall
	mutex       sync.Mutex
}

// GetConfigurationPolicyByID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) GetConfigurationPolicyByID(v0 context.Context, v1 int) (dbstore.ConfigurationPolicy, bool, error) {
	r0, r1, r2 := m.GetConfigurationPolicyByIDFunc.nextHook()(v0, v1)
	m.GetConfigurationPolicyByIDFunc.appendCall(ResolverGetConfigurationPolicyByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetConfigurationPolicyByID method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverGetConfigurationPolicyByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.ConfigurationPolicy, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetConfigurationPolicyByID method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverGetConfigurationPolicyByIDFunc) PushHook(hook func(context.Context, int) (dbstore.ConfigurationPolicy, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetConfigurationPolicyByIDFunc) SetDefaultReturn(r0 dbstore.ConfigurationPolicy, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (dbstore.ConfigurationPolicy, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetConfigurationPolicyByIDFunc) PushReturn(r0 dbstore.ConfigurationPolicy, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (dbstore.ConfigurationPolicy, bool, error) {
		return r0, r1, r2
	})
}

func (f *ResolverGetConfigurationPolicyByIDFunc) nextHook() func(context.Context, int) (dbstore.ConfigurationPolicy, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetConfigurationPolicyByIDFunc) appendCall(r0 ResolverGetConfigurationPolicyByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetConfigurationPolicyByIDFuncCall
// objects describing the invocations of this function.
func (f *ResolverGetConfigurationPolicyByIDFunc) History() []ResolverGetConfigurationPolicyByIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetConfigurationPolicyByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetConfigurationPolicyByIDFuncCall is an object that describes an
// invocation of method GetConfigurationPolicyByID on an instance of
// MockResolver.
type ResolverGetConfigurationPolicyByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 dbstore.ConfigurationPolicy
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetConfigurationPolicyByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetConfigurationPolicyByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverGetIndexByIDFunc describes the behavior when the GetIndexByID
// method of the parent MockResolver instance is invoked.
type ResolverGetIndexByIDFunc struct {
	defaultHook func(context.Context, int) (dbstore.Index, bool, error)
	hooks       []func(context.Context, int) (dbstore.Index, bool, error)
	history     []ResolverGetIndexByIDFuncCall
	mutex       sync.Mutex
}

// GetIndexByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockResolver) GetIndexByID(v0 context.Context, v1 int) (dbstore.Index, bool, error) {
	r0, r1, r2 := m.GetIndexByIDFunc.nextHook()(v0, v1)
	m.GetIndexByIDFunc.appendCall(ResolverGetIndexByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexByID method
// of the parent MockResolver instance is invoked and the hook queue is
// empty.
func (f *ResolverGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Index, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexByID method of the parent MockResolver instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ResolverGetIndexByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Index, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetIndexByIDFunc) SetDefaultReturn(r0 dbstore.Index, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (dbstore.Index, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetIndexByIDFunc) PushReturn(r0 dbstore.Index, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (dbstore.Index, bool, error) {
		return r0, r1, r2
	})
}

func (f *ResolverGetIndexByIDFunc) nextHook() func(context.Context, int) (dbstore.Index, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetIndexByIDFunc) appendCall(r0 ResolverGetIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetIndexByIDFuncCall objects
// describing the invocations of this function.
func (f *ResolverGetIndexByIDFunc) History() []ResolverGetIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetIndexByIDFuncCall is an object that describes an invocation of
// method GetIndexByID on an instance of MockResolver.
type ResolverGetIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 dbstore.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverGetIndexesByIDsFunc describes the behavior when the
// GetIndexesByIDs method of the parent MockResolver instance is invoked.
type ResolverGetIndexesByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]dbstore.Index, error)
	hooks       []func(context.Context, ...int) ([]dbstore.Index, error)
	history     []ResolverGetIndexesByIDsFuncCall
	mutex       sync.Mutex
}

// GetIndexesByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]dbstore.Index, error) {
	r0, r1 := m.GetIndexesByIDsFunc.nextHook()(v0, v1...)
	m.GetIndexesByIDsFunc.appendCall(ResolverGetIndexesByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexesByIDs
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexesByIDs method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetIndexesByIDsFunc) SetDefaultReturn(r0 []dbstore.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]dbstore.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetIndexesByIDsFunc) PushReturn(r0 []dbstore.Index, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]dbstore.Index, error) {
		return r0, r1
	})
}

func (f *ResolverGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetIndexesByIDsFunc) appendCall(r0 ResolverGetIndexesByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetIndexesByIDsFuncCall objects
// describing the invocations of this function.
func (f *ResolverGetIndexesByIDsFunc) History() []ResolverGetIndexesByIDsFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetIndexesByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetIndexesByIDsFuncCall is an object that describes an invocation
// of method GetIndexesByIDs on an instance of MockResolver.
type ResolverGetIndexesByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []dbstore.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ResolverGetIndexesByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetIndexesByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverGetUploadByIDFunc describes the behavior when the GetUploadByID
// method of the parent MockResolver instance is invoked.
type ResolverGetUploadByIDFunc struct {
	defaultHook func(context.Context, int) (dbstore.Upload, bool, error)
	hooks       []func(context.Context, int) (dbstore.Upload, bool, error)
	history     []ResolverGetUploadByIDFuncCall
	mutex       sync.Mutex
}

// GetUploadByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockResolver) GetUploadByID(v0 context.Context, v1 int) (dbstore.Upload, bool, error) {
	r0, r1, r2 := m.GetUploadByIDFunc.nextHook()(v0, v1)
	m.GetUploadByIDFunc.appendCall(ResolverGetUploadByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploadByID method
// of the parent MockResolver instance is invoked and the hook queue is
// empty.
func (f *ResolverGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.Upload, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadByID method of the parent MockResolver instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ResolverGetUploadByIDFunc) PushHook(hook func(context.Context, int) (dbstore.Upload, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetUploadByIDFunc) SetDefaultReturn(r0 dbstore.Upload, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (dbstore.Upload, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetUploadByIDFunc) PushReturn(r0 dbstore.Upload, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (dbstore.Upload, bool, error) {
		return r0, r1, r2
	})
}

func (f *ResolverGetUploadByIDFunc) nextHook() func(context.Context, int) (dbstore.Upload, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetUploadByIDFunc) appendCall(r0 ResolverGetUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *ResolverGetUploadByIDFunc) History() []ResolverGetUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetUploadByIDFuncCall is an object that describes an invocation
// of method GetUploadByID on an instance of MockResolver.
type ResolverGetUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 dbstore.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverGetUploadDocumentsForPathFunc describes the behavior when the
// GetUploadDocumentsForPath method of the parent MockResolver instance is
// invoked.
type ResolverGetUploadDocumentsForPathFunc struct {
	defaultHook func(context.Context, int, string) ([]string, int, error)
	hooks       []func(context.Context, int, string) ([]string, int, error)
	history     []ResolverGetUploadDocumentsForPathFuncCall
	mutex       sync.Mutex
}

// GetUploadDocumentsForPath delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) GetUploadDocumentsForPath(v0 context.Context, v1 int, v2 string) ([]string, int, error) {
	r0, r1, r2 := m.GetUploadDocumentsForPathFunc.nextHook()(v0, v1, v2)
	m.GetUploadDocumentsForPathFunc.appendCall(ResolverGetUploadDocumentsForPathFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetUploadDocumentsForPath method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverGetUploadDocumentsForPathFunc) SetDefaultHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadDocumentsForPath method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverGetUploadDocumentsForPathFunc) PushHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetUploadDocumentsForPathFunc) SetDefaultReturn(r0 []string, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetUploadDocumentsForPathFunc) PushReturn(r0 []string, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

func (f *ResolverGetUploadDocumentsForPathFunc) nextHook() func(context.Context, int, string) ([]string, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetUploadDocumentsForPathFunc) appendCall(r0 ResolverGetUploadDocumentsForPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetUploadDocumentsForPathFuncCall
// objects describing the invocations of this function.
func (f *ResolverGetUploadDocumentsForPathFunc) History() []ResolverGetUploadDocumentsForPathFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetUploadDocumentsForPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetUploadDocumentsForPathFuncCall is an object that describes an
// invocation of method GetUploadDocumentsForPath on an instance of
// MockResolver.
type ResolverGetUploadDocumentsForPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetUploadDocumentsForPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetUploadDocumentsForPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverGetUploadsByIDsFunc describes the behavior when the
// GetUploadsByIDs method of the parent MockResolver instance is invoked.
type ResolverGetUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]dbstore.Upload, error)
	hooks       []func(context.Context, ...int) ([]dbstore.Upload, error)
	history     []ResolverGetUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]dbstore.Upload, error) {
	r0, r1 := m.GetUploadsByIDsFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsFunc.appendCall(ResolverGetUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsByIDs
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]dbstore.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDs method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]dbstore.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetUploadsByIDsFunc) SetDefaultReturn(r0 []dbstore.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]dbstore.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetUploadsByIDsFunc) PushReturn(r0 []dbstore.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]dbstore.Upload, error) {
		return r0, r1
	})
}

func (f *ResolverGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]dbstore.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetUploadsByIDsFunc) appendCall(r0 ResolverGetUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetUploadsByIDsFuncCall objects
// describing the invocations of this function.
func (f *ResolverGetUploadsByIDsFunc) History() []ResolverGetUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetUploadsByIDsFuncCall is an object that describes an invocation
// of method GetUploadsByIDs on an instance of MockResolver.
type ResolverGetUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []dbstore.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ResolverGetUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverIndexConfigurationFunc describes the behavior when the
// IndexConfiguration method of the parent MockResolver instance is invoked.
type ResolverIndexConfigurationFunc struct {
	defaultHook func(context.Context, int) ([]byte, bool, error)
	hooks       []func(context.Context, int) ([]byte, bool, error)
	history     []ResolverIndexConfigurationFuncCall
	mutex       sync.Mutex
}

// IndexConfiguration delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) IndexConfiguration(v0 context.Context, v1 int) ([]byte, bool, error) {
	r0, r1, r2 := m.IndexConfigurationFunc.nextHook()(v0, v1)
	m.IndexConfigurationFunc.appendCall(ResolverIndexConfigurationFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the IndexConfiguration
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverIndexConfigurationFunc) SetDefaultHook(hook func(context.Context, int) ([]byte, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IndexConfiguration method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverIndexConfigurationFunc) PushHook(hook func(context.Context, int) ([]byte, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverIndexConfigurationFunc) SetDefaultReturn(r0 []byte, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) ([]byte, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverIndexConfigurationFunc) PushReturn(r0 []byte, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) ([]byte, bool, error) {
		return r0, r1, r2
	})
}

func (f *ResolverIndexConfigurationFunc) nextHook() func(context.Context, int) ([]byte, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverIndexConfigurationFunc) appendCall(r0 ResolverIndexConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverIndexConfigurationFuncCall objects
// describing the invocations of this function.
func (f *ResolverIndexConfigurationFunc) History() []ResolverIndexConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]ResolverIndexConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverIndexConfigurationFuncCall is an object that describes an
// invocation of method IndexConfiguration on an instance of MockResolver.
type ResolverIndexConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverIndexConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverIndexConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverIndexConnectionResolverFunc describes the behavior when the
// IndexConnectionResolver method of the parent MockResolver instance is
// invoked.
type ResolverIndexConnectionResolverFunc struct {
	defaultHook func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver
	hooks       []func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver
	history     []ResolverIndexConnectionResolverFuncCall
	mutex       sync.Mutex
}

// IndexConnectionResolver delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) IndexConnectionResolver(v0 dbstore.GetIndexesOptions) *resolvers.IndexesResolver {
	r0 := m.IndexConnectionResolverFunc.nextHook()(v0)
	m.IndexConnectionResolverFunc.appendCall(ResolverIndexConnectionResolverFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IndexConnectionResolver method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverIndexConnectionResolverFunc) SetDefaultHook(hook func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IndexConnectionResolver method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverIndexConnectionResolverFunc) PushHook(hook func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverIndexConnectionResolverFunc) SetDefaultReturn(r0 *resolvers.IndexesResolver) {
	f.SetDefaultHook(func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverIndexConnectionResolverFunc) PushReturn(r0 *resolvers.IndexesResolver) {
	f.PushHook(func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver {
		return r0
	})
}

func (f *ResolverIndexConnectionResolverFunc) nextHook() func(dbstore.GetIndexesOptions) *resolvers.IndexesResolver {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverIndexConnectionResolverFunc) appendCall(r0 ResolverIndexConnectionResolverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverIndexConnectionResolverFuncCall
// objects describing the invocations of this function.
func (f *ResolverIndexConnectionResolverFunc) History() []ResolverIndexConnectionResolverFuncCall {
	f.mutex.Lock()
	history := make([]ResolverIndexConnectionResolverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverIndexConnectionResolverFuncCall is an object that describes an
// invocation of method IndexConnectionResolver on an instance of
// MockResolver.
type ResolverIndexConnectionResolverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 dbstore.GetIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *resolvers.IndexesResolver
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverIndexConnectionResolverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverIndexConnectionResolverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverInferedIndexConfigurationFunc describes the behavior when the
// InferedIndexConfiguration method of the parent MockResolver instance is
// invoked.
type ResolverInferedIndexConfigurationFunc struct {
	defaultHook func(context.Context, int, string) (*config.IndexConfiguration, bool, error)
	hooks       []func(context.Context, int, string) (*config.IndexConfiguration, bool, error)
	history     []ResolverInferedIndexConfigurationFuncCall
	mutex       sync.Mutex
}

// InferedIndexConfiguration delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) InferedIndexConfiguration(v0 context.Context, v1 int, v2 string) (*config.IndexConfiguration, bool, error) {
	r0, r1, r2 := m.InferedIndexConfigurationFunc.nextHook()(v0, v1, v2)
	m.InferedIndexConfigurationFunc.appendCall(ResolverInferedIndexConfigurationFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// InferedIndexConfiguration method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverInferedIndexConfigurationFunc) SetDefaultHook(hook func(context.Context, int, string) (*config.IndexConfiguration, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InferedIndexConfiguration method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverInferedIndexConfigurationFunc) PushHook(hook func(context.Context, int, string) (*config.IndexConfiguration, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverInferedIndexConfigurationFunc) SetDefaultReturn(r0 *config.IndexConfiguration, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string) (*config.IndexConfiguration, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverInferedIndexConfigurationFunc) PushReturn(r0 *config.IndexConfiguration, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int, string) (*config.IndexConfiguration, bool, error) {
		return r0, r1, r2
	})
}

func (f *ResolverInferedIndexConfigurationFunc) nextHook() func(context.Context, int, string) (*config.IndexConfiguration, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverInferedIndexConfigurationFunc) appendCall(r0 ResolverInferedIndexConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverInferedIndexConfigurationFuncCall
// objects describing the invocations of this function.
func (f *ResolverInferedIndexConfigurationFunc) History() []ResolverInferedIndexConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]ResolverInferedIndexConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverInferedIndexConfigurationFuncCall is an object that describes an
// invocation of method InferedIndexConfiguration on an instance of
// MockResolver.
type ResolverInferedIndexConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *config.IndexConfiguration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverInferedIndexConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverInferedIndexConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverInferedIndexConfigurationHintsFunc describes the behavior when
// the InferedIndexConfigurationHints method of the parent MockResolver
// instance is invoked.
type ResolverInferedIndexConfigurationHintsFunc struct {
	defaultHook func(context.Context, int, string) ([]config.IndexJobHint, error)
	hooks       []func(context.Context, int, string) ([]config.IndexJobHint, error)
	history     []ResolverInferedIndexConfigurationHintsFuncCall
	mutex       sync.Mutex
}

// InferedIndexConfigurationHints delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) InferedIndexConfigurationHints(v0 context.Context, v1 int, v2 string) ([]config.IndexJobHint, error) {
	r0, r1 := m.InferedIndexConfigurationHintsFunc.nextHook()(v0, v1, v2)
	m.InferedIndexConfigurationHintsFunc.appendCall(ResolverInferedIndexConfigurationHintsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// InferedIndexConfigurationHints method of the parent MockResolver instance
// is invoked and the hook queue is empty.
func (f *ResolverInferedIndexConfigurationHintsFunc) SetDefaultHook(hook func(context.Context, int, string) ([]config.IndexJobHint, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InferedIndexConfigurationHints method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverInferedIndexConfigurationHintsFunc) PushHook(hook func(context.Context, int, string) ([]config.IndexJobHint, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverInferedIndexConfigurationHintsFunc) SetDefaultReturn(r0 []config.IndexJobHint, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string) ([]config.IndexJobHint, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverInferedIndexConfigurationHintsFunc) PushReturn(r0 []config.IndexJobHint, r1 error) {
	f.PushHook(func(context.Context, int, string) ([]config.IndexJobHint, error) {
		return r0, r1
	})
}

func (f *ResolverInferedIndexConfigurationHintsFunc) nextHook() func(context.Context, int, string) ([]config.IndexJobHint, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverInferedIndexConfigurationHintsFunc) appendCall(r0 ResolverInferedIndexConfigurationHintsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverInferedIndexConfigurationHintsFuncCall objects describing the
// invocations of this function.
func (f *ResolverInferedIndexConfigurationHintsFunc) History() []ResolverInferedIndexConfigurationHintsFuncCall {
	f.mutex.Lock()
	history := make([]ResolverInferedIndexConfigurationHintsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverInferedIndexConfigurationHintsFuncCall is an object that
// describes an invocation of method InferedIndexConfigurationHints on an
// instance of MockResolver.
type ResolverInferedIndexConfigurationHintsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []config.IndexJobHint
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverInferedIndexConfigurationHintsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverInferedIndexConfigurationHintsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverPreviewGitObjectFilterFunc describes the behavior when the
// PreviewGitObjectFilter method of the parent MockResolver instance is
// invoked.
type ResolverPreviewGitObjectFilterFunc struct {
	defaultHook func(context.Context, int, dbstore.GitObjectType, string) (map[string][]string, error)
	hooks       []func(context.Context, int, dbstore.GitObjectType, string) (map[string][]string, error)
	history     []ResolverPreviewGitObjectFilterFuncCall
	mutex       sync.Mutex
}

// PreviewGitObjectFilter delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) PreviewGitObjectFilter(v0 context.Context, v1 int, v2 dbstore.GitObjectType, v3 string) (map[string][]string, error) {
	r0, r1 := m.PreviewGitObjectFilterFunc.nextHook()(v0, v1, v2, v3)
	m.PreviewGitObjectFilterFunc.appendCall(ResolverPreviewGitObjectFilterFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PreviewGitObjectFilter method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverPreviewGitObjectFilterFunc) SetDefaultHook(hook func(context.Context, int, dbstore.GitObjectType, string) (map[string][]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PreviewGitObjectFilter method of the parent MockResolver instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ResolverPreviewGitObjectFilterFunc) PushHook(hook func(context.Context, int, dbstore.GitObjectType, string) (map[string][]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverPreviewGitObjectFilterFunc) SetDefaultReturn(r0 map[string][]string, r1 error) {
	f.SetDefaultHook(func(context.Context, int, dbstore.GitObjectType, string) (map[string][]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverPreviewGitObjectFilterFunc) PushReturn(r0 map[string][]string, r1 error) {
	f.PushHook(func(context.Context, int, dbstore.GitObjectType, string) (map[string][]string, error) {
		return r0, r1
	})
}

func (f *ResolverPreviewGitObjectFilterFunc) nextHook() func(context.Context, int, dbstore.GitObjectType, string) (map[string][]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverPreviewGitObjectFilterFunc) appendCall(r0 ResolverPreviewGitObjectFilterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverPreviewGitObjectFilterFuncCall
// objects describing the invocations of this function.
func (f *ResolverPreviewGitObjectFilterFunc) History() []ResolverPreviewGitObjectFilterFuncCall {
	f.mutex.Lock()
	history := make([]ResolverPreviewGitObjectFilterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverPreviewGitObjectFilterFuncCall is an object that describes an
// invocation of method PreviewGitObjectFilter on an instance of
// MockResolver.
type ResolverPreviewGitObjectFilterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 dbstore.GitObjectType
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverPreviewGitObjectFilterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverPreviewGitObjectFilterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverPreviewRepositoryFilterFunc describes the behavior when the
// PreviewRepositoryFilter method of the parent MockResolver instance is
// invoked.
type ResolverPreviewRepositoryFilterFunc struct {
	defaultHook func(context.Context, []string, int, int) ([]int, int, *int, error)
	hooks       []func(context.Context, []string, int, int) ([]int, int, *int, error)
	history     []ResolverPreviewRepositoryFilterFuncCall
	mutex       sync.Mutex
}

// PreviewRepositoryFilter delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) PreviewRepositoryFilter(v0 context.Context, v1 []string, v2 int, v3 int) ([]int, int, *int, error) {
	r0, r1, r2, r3 := m.PreviewRepositoryFilterFunc.nextHook()(v0, v1, v2, v3)
	m.PreviewRepositoryFilterFunc.appendCall(ResolverPreviewRepositoryFilterFuncCall{v0, v1, v2, v3, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// PreviewRepositoryFilter method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverPreviewRepositoryFilterFunc) SetDefaultHook(hook func(context.Context, []string, int, int) ([]int, int, *int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PreviewRepositoryFilter method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverPreviewRepositoryFilterFunc) PushHook(hook func(context.Context, []string, int, int) ([]int, int, *int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverPreviewRepositoryFilterFunc) SetDefaultReturn(r0 []int, r1 int, r2 *int, r3 error) {
	f.SetDefaultHook(func(context.Context, []string, int, int) ([]int, int, *int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverPreviewRepositoryFilterFunc) PushReturn(r0 []int, r1 int, r2 *int, r3 error) {
	f.PushHook(func(context.Context, []string, int, int) ([]int, int, *int, error) {
		return r0, r1, r2, r3
	})
}

func (f *ResolverPreviewRepositoryFilterFunc) nextHook() func(context.Context, []string, int, int) ([]int, int, *int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverPreviewRepositoryFilterFunc) appendCall(r0 ResolverPreviewRepositoryFilterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverPreviewRepositoryFilterFuncCall
// objects describing the invocations of this function.
func (f *ResolverPreviewRepositoryFilterFunc) History() []ResolverPreviewRepositoryFilterFuncCall {
	f.mutex.Lock()
	history := make([]ResolverPreviewRepositoryFilterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverPreviewRepositoryFilterFuncCall is an object that describes an
// invocation of method PreviewRepositoryFilter on an instance of
// MockResolver.
type ResolverPreviewRepositoryFilterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 *int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverPreviewRepositoryFilterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverPreviewRepositoryFilterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// ResolverQueryResolverFunc describes the behavior when the QueryResolver
// method of the parent MockResolver instance is invoked.
type ResolverQueryResolverFunc struct {
	defaultHook func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)
	hooks       []func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)
	history     []ResolverQueryResolverFuncCall
	mutex       sync.Mutex
}

// QueryResolver delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockResolver) QueryResolver(v0 context.Context, v1 *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error) {
	r0, r1 := m.QueryResolverFunc.nextHook()(v0, v1)
	m.QueryResolverFunc.appendCall(ResolverQueryResolverFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueryResolver method
// of the parent MockResolver instance is invoked and the hook queue is
// empty.
func (f *ResolverQueryResolverFunc) SetDefaultHook(hook func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryResolver method of the parent MockResolver instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ResolverQueryResolverFunc) PushHook(hook func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverQueryResolverFunc) SetDefaultReturn(r0 resolvers.QueryResolver, r1 error) {
	f.SetDefaultHook(func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverQueryResolverFunc) PushReturn(r0 resolvers.QueryResolver, r1 error) {
	f.PushHook(func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error) {
		return r0, r1
	})
}

func (f *ResolverQueryResolverFunc) nextHook() func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverQueryResolverFunc) appendCall(r0 ResolverQueryResolverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverQueryResolverFuncCall objects
// describing the invocations of this function.
func (f *ResolverQueryResolverFunc) History() []ResolverQueryResolverFuncCall {
	f.mutex.Lock()
	history := make([]ResolverQueryResolverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverQueryResolverFuncCall is an object that describes an invocation
// of method QueryResolver on an instance of MockResolver.
type ResolverQueryResolverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphqlbackend.GitBlobLSIFDataArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 resolvers.QueryResolver
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverQueryResolverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverQueryResolverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverQueueAutoIndexJobsForRepoFunc describes the behavior when the
// QueueAutoIndexJobsForRepo method of the parent MockResolver instance is
// invoked.
type ResolverQueueAutoIndexJobsForRepoFunc struct {
	defaultHook func(context.Context, int, string, string) ([]dbstore.Index, error)
	hooks       []func(context.Context, int, string, string) ([]dbstore.Index, error)
	history     []ResolverQueueAutoIndexJobsForRepoFuncCall
	mutex       sync.Mutex
}

// QueueAutoIndexJobsForRepo delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) QueueAutoIndexJobsForRepo(v0 context.Context, v1 int, v2 string, v3 string) ([]dbstore.Index, error) {
	r0, r1 := m.QueueAutoIndexJobsForRepoFunc.nextHook()(v0, v1, v2, v3)
	m.QueueAutoIndexJobsForRepoFunc.appendCall(ResolverQueueAutoIndexJobsForRepoFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// QueueAutoIndexJobsForRepo method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]dbstore.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueAutoIndexJobsForRepo method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) PushHook(hook func(context.Context, int, string, string) ([]dbstore.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) SetDefaultReturn(r0 []dbstore.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) ([]dbstore.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) PushReturn(r0 []dbstore.Index, r1 error) {
	f.PushHook(func(context.Context, int, string, string) ([]dbstore.Index, error) {
		return r0, r1
	})
}

func (f *ResolverQueueAutoIndexJobsForRepoFunc) nextHook() func(context.Context, int, string, string) ([]dbstore.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverQueueAutoIndexJobsForRepoFunc) appendCall(r0 ResolverQueueAutoIndexJobsForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverQueueAutoIndexJobsForRepoFuncCall
// objects describing the invocations of this function.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) History() []ResolverQueueAutoIndexJobsForRepoFuncCall {
	f.mutex.Lock()
	history := make([]ResolverQueueAutoIndexJobsForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverQueueAutoIndexJobsForRepoFuncCall is an object that describes an
// invocation of method QueueAutoIndexJobsForRepo on an instance of
// MockResolver.
type ResolverQueueAutoIndexJobsForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []dbstore.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverQueueAutoIndexJobsForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverQueueAutoIndexJobsForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverRepositorySummaryFunc describes the behavior when the
// RepositorySummary method of the parent MockResolver instance is invoked.
type ResolverRepositorySummaryFunc struct {
	defaultHook func(context.Context, int) (resolvers.RepositorySummary, error)
	hooks       []func(context.Context, int) (resolvers.RepositorySummary, error)
	history     []ResolverRepositorySummaryFuncCall
	mutex       sync.Mutex
}

// RepositorySummary delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) RepositorySummary(v0 context.Context, v1 int) (resolvers.RepositorySummary, error) {
	r0, r1 := m.RepositorySummaryFunc.nextHook()(v0, v1)
	m.RepositorySummaryFunc.appendCall(ResolverRepositorySummaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepositorySummary
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverRepositorySummaryFunc) SetDefaultHook(hook func(context.Context, int) (resolvers.RepositorySummary, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepositorySummary method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverRepositorySummaryFunc) PushHook(hook func(context.Context, int) (resolvers.RepositorySummary, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverRepositorySummaryFunc) SetDefaultReturn(r0 resolvers.RepositorySummary, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (resolvers.RepositorySummary, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverRepositorySummaryFunc) PushReturn(r0 resolvers.RepositorySummary, r1 error) {
	f.PushHook(func(context.Context, int) (resolvers.RepositorySummary, error) {
		return r0, r1
	})
}

func (f *ResolverRepositorySummaryFunc) nextHook() func(context.Context, int) (resolvers.RepositorySummary, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverRepositorySummaryFunc) appendCall(r0 ResolverRepositorySummaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverRepositorySummaryFuncCall objects
// describing the invocations of this function.
func (f *ResolverRepositorySummaryFunc) History() []ResolverRepositorySummaryFuncCall {
	f.mutex.Lock()
	history := make([]ResolverRepositorySummaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverRepositorySummaryFuncCall is an object that describes an
// invocation of method RepositorySummary on an instance of MockResolver.
type ResolverRepositorySummaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 resolvers.RepositorySummary
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverRepositorySummaryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverRepositorySummaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverRequestLanguageSupportFunc describes the behavior when the
// RequestLanguageSupport method of the parent MockResolver instance is
// invoked.
type ResolverRequestLanguageSupportFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []ResolverRequestLanguageSupportFuncCall
	mutex       sync.Mutex
}

// RequestLanguageSupport delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) RequestLanguageSupport(v0 context.Context, v1 int, v2 string) error {
	r0 := m.RequestLanguageSupportFunc.nextHook()(v0, v1, v2)
	m.RequestLanguageSupportFunc.appendCall(ResolverRequestLanguageSupportFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RequestLanguageSupport method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverRequestLanguageSupportFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestLanguageSupport method of the parent MockResolver instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ResolverRequestLanguageSupportFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverRequestLanguageSupportFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverRequestLanguageSupportFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *ResolverRequestLanguageSupportFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverRequestLanguageSupportFunc) appendCall(r0 ResolverRequestLanguageSupportFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverRequestLanguageSupportFuncCall
// objects describing the invocations of this function.
func (f *ResolverRequestLanguageSupportFunc) History() []ResolverRequestLanguageSupportFuncCall {
	f.mutex.Lock()
	history := make([]ResolverRequestLanguageSupportFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverRequestLanguageSupportFuncCall is an object that describes an
// invocation of method RequestLanguageSupport on an instance of
// MockResolver.
type ResolverRequestLanguageSupportFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverRequestLanguageSupportFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverRequestLanguageSupportFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverRequestedLanguageSupportFunc describes the behavior when the
// RequestedLanguageSupport method of the parent MockResolver instance is
// invoked.
type ResolverRequestedLanguageSupportFunc struct {
	defaultHook func(context.Context, int) ([]string, error)
	hooks       []func(context.Context, int) ([]string, error)
	history     []ResolverRequestedLanguageSupportFuncCall
	mutex       sync.Mutex
}

// RequestedLanguageSupport delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) RequestedLanguageSupport(v0 context.Context, v1 int) ([]string, error) {
	r0, r1 := m.RequestedLanguageSupportFunc.nextHook()(v0, v1)
	m.RequestedLanguageSupportFunc.appendCall(ResolverRequestedLanguageSupportFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// RequestedLanguageSupport method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverRequestedLanguageSupportFunc) SetDefaultHook(hook func(context.Context, int) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestedLanguageSupport method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverRequestedLanguageSupportFunc) PushHook(hook func(context.Context, int) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverRequestedLanguageSupportFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverRequestedLanguageSupportFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, int) ([]string, error) {
		return r0, r1
	})
}

func (f *ResolverRequestedLanguageSupportFunc) nextHook() func(context.Context, int) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverRequestedLanguageSupportFunc) appendCall(r0 ResolverRequestedLanguageSupportFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverRequestedLanguageSupportFuncCall
// objects describing the invocations of this function.
func (f *ResolverRequestedLanguageSupportFunc) History() []ResolverRequestedLanguageSupportFuncCall {
	f.mutex.Lock()
	history := make([]ResolverRequestedLanguageSupportFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverRequestedLanguageSupportFuncCall is an object that describes an
// invocation of method RequestedLanguageSupport on an instance of
// MockResolver.
type ResolverRequestedLanguageSupportFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverRequestedLanguageSupportFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverRequestedLanguageSupportFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverRetentionPolicyOverviewFunc describes the behavior when the
// RetentionPolicyOverview method of the parent MockResolver instance is
// invoked.
type ResolverRetentionPolicyOverviewFunc struct {
	defaultHook func(context.Context, dbstore.Upload, bool, int, int64, string, time.Time) ([]resolvers.RetentionPolicyMatchCandidate, int, error)
	hooks       []func(context.Context, dbstore.Upload, bool, int, int64, string, time.Time) ([]resolvers.RetentionPolicyMatchCandidate, int, error)
	history     []ResolverRetentionPolicyOverviewFuncCall
	mutex       sync.Mutex
}

// RetentionPolicyOverview delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) RetentionPolicyOverview(v0 context.Context, v1 dbstore.Upload, v2 bool, v3 int, v4 int64, v5 string, v6 time.Time) ([]resolvers.RetentionPolicyMatchCandidate, int, error) {
	r0, r1, r2 := m.RetentionPolicyOverviewFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.RetentionPolicyOverviewFunc.appendCall(ResolverRetentionPolicyOverviewFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// RetentionPolicyOverview method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverRetentionPolicyOverviewFunc) SetDefaultHook(hook func(context.Context, dbstore.Upload, bool, int, int64, string, time.Time) ([]resolvers.RetentionPolicyMatchCandidate, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RetentionPolicyOverview method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverRetentionPolicyOverviewFunc) PushHook(hook func(context.Context, dbstore.Upload, bool, int, int64, string, time.Time) ([]resolvers.RetentionPolicyMatchCandidate, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverRetentionPolicyOverviewFunc) SetDefaultReturn(r0 []resolvers.RetentionPolicyMatchCandidate, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, dbstore.Upload, bool, int, int64, string, time.Time) ([]resolvers.RetentionPolicyMatchCandidate, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverRetentionPolicyOverviewFunc) PushReturn(r0 []resolvers.RetentionPolicyMatchCandidate, r1 int, r2 error) {
	f.PushHook(func(context.Context, dbstore.Upload, bool, int, int64, string, time.Time) ([]resolvers.RetentionPolicyMatchCandidate, int, error) {
		return r0, r1, r2
	})
}

func (f *ResolverRetentionPolicyOverviewFunc) nextHook() func(context.Context, dbstore.Upload, bool, int, int64, string, time.Time) ([]resolvers.RetentionPolicyMatchCandidate, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverRetentionPolicyOverviewFunc) appendCall(r0 ResolverRetentionPolicyOverviewFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverRetentionPolicyOverviewFuncCall
// objects describing the invocations of this function.
func (f *ResolverRetentionPolicyOverviewFunc) History() []ResolverRetentionPolicyOverviewFuncCall {
	f.mutex.Lock()
	history := make([]ResolverRetentionPolicyOverviewFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverRetentionPolicyOverviewFuncCall is an object that describes an
// invocation of method RetentionPolicyOverview on an instance of
// MockResolver.
type ResolverRetentionPolicyOverviewFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 dbstore.Upload
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int64
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []resolvers.RetentionPolicyMatchCandidate
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverRetentionPolicyOverviewFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverRetentionPolicyOverviewFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverSupportedByCtagsFunc describes the behavior when the
// SupportedByCtags method of the parent MockResolver instance is invoked.
type ResolverSupportedByCtagsFunc struct {
	defaultHook func(context.Context, string, api.RepoName) (bool, string, error)
	hooks       []func(context.Context, string, api.RepoName) (bool, string, error)
	history     []ResolverSupportedByCtagsFuncCall
	mutex       sync.Mutex
}

// SupportedByCtags delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) SupportedByCtags(v0 context.Context, v1 string, v2 api.RepoName) (bool, string, error) {
	r0, r1, r2 := m.SupportedByCtagsFunc.nextHook()(v0, v1, v2)
	m.SupportedByCtagsFunc.appendCall(ResolverSupportedByCtagsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the SupportedByCtags
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverSupportedByCtagsFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName) (bool, string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SupportedByCtags method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverSupportedByCtagsFunc) PushHook(hook func(context.Context, string, api.RepoName) (bool, string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverSupportedByCtagsFunc) SetDefaultReturn(r0 bool, r1 string, r2 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName) (bool, string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverSupportedByCtagsFunc) PushReturn(r0 bool, r1 string, r2 error) {
	f.PushHook(func(context.Context, string, api.RepoName) (bool, string, error) {
		return r0, r1, r2
	})
}

func (f *ResolverSupportedByCtagsFunc) nextHook() func(context.Context, string, api.RepoName) (bool, string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverSupportedByCtagsFunc) appendCall(r0 ResolverSupportedByCtagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverSupportedByCtagsFuncCall objects
// describing the invocations of this function.
func (f *ResolverSupportedByCtagsFunc) History() []ResolverSupportedByCtagsFuncCall {
	f.mutex.Lock()
	history := make([]ResolverSupportedByCtagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverSupportedByCtagsFuncCall is an object that describes an
// invocation of method SupportedByCtags on an instance of MockResolver.
type ResolverSupportedByCtagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverSupportedByCtagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverSupportedByCtagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverUpdateConfigurationPolicyFunc describes the behavior when the
// UpdateConfigurationPolicy method of the parent MockResolver instance is
// invoked.
type ResolverUpdateConfigurationPolicyFunc struct {
	defaultHook func(context.Context, dbstore.ConfigurationPolicy) error
	hooks       []func(context.Context, dbstore.ConfigurationPolicy) error
	history     []ResolverUpdateConfigurationPolicyFuncCall
	mutex       sync.Mutex
}

// UpdateConfigurationPolicy delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) UpdateConfigurationPolicy(v0 context.Context, v1 dbstore.ConfigurationPolicy) error {
	r0 := m.UpdateConfigurationPolicyFunc.nextHook()(v0, v1)
	m.UpdateConfigurationPolicyFunc.appendCall(ResolverUpdateConfigurationPolicyFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateConfigurationPolicy method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverUpdateConfigurationPolicyFunc) SetDefaultHook(hook func(context.Context, dbstore.ConfigurationPolicy) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateConfigurationPolicy method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverUpdateConfigurationPolicyFunc) PushHook(hook func(context.Context, dbstore.ConfigurationPolicy) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverUpdateConfigurationPolicyFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, dbstore.ConfigurationPolicy) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverUpdateConfigurationPolicyFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, dbstore.ConfigurationPolicy) error {
		return r0
	})
}

func (f *ResolverUpdateConfigurationPolicyFunc) nextHook() func(context.Context, dbstore.ConfigurationPolicy) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverUpdateConfigurationPolicyFunc) appendCall(r0 ResolverUpdateConfigurationPolicyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverUpdateConfigurationPolicyFuncCall
// objects describing the invocations of this function.
func (f *ResolverUpdateConfigurationPolicyFunc) History() []ResolverUpdateConfigurationPolicyFuncCall {
	f.mutex.Lock()
	history := make([]ResolverUpdateConfigurationPolicyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverUpdateConfigurationPolicyFuncCall is an object that describes an
// invocation of method UpdateConfigurationPolicy on an instance of
// MockResolver.
type ResolverUpdateConfigurationPolicyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 dbstore.ConfigurationPolicy
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverUpdateConfigurationPolicyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverUpdateConfigurationPolicyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverUpdateIndexConfigurationByRepositoryIDFunc describes the behavior
// when the UpdateIndexConfigurationByRepositoryID method of the parent
// MockResolver instance is invoked.
type ResolverUpdateIndexConfigurationByRepositoryIDFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []ResolverUpdateIndexConfigurationByRepositoryIDFuncCall
	mutex       sync.Mutex
}

// UpdateIndexConfigurationByRepositoryID delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockResolver) UpdateIndexConfigurationByRepositoryID(v0 context.Context, v1 int, v2 string) error {
	r0 := m.UpdateIndexConfigurationByRepositoryIDFunc.nextHook()(v0, v1, v2)
	m.UpdateIndexConfigurationByRepositoryIDFunc.appendCall(ResolverUpdateIndexConfigurationByRepositoryIDFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateIndexConfigurationByRepositoryID method of the parent MockResolver
// instance is invoked and the hook queue is empty.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateIndexConfigurationByRepositoryID method of the parent MockResolver
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) appendCall(r0 ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverUpdateIndexConfigurationByRepositoryIDFuncCall objects describing
// the invocations of this function.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) History() []ResolverUpdateIndexConfigurationByRepositoryIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverUpdateIndexConfigurationByRepositoryIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverUpdateIndexConfigurationByRepositoryIDFuncCall is an object that
// describes an invocation of method UpdateIndexConfigurationByRepositoryID
// on an instance of MockResolver.
type ResolverUpdateIndexConfigurationByRepositoryIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverUploadConnectionResolverFunc describes the behavior when the
// UploadConnectionResolver method of the parent MockResolver instance is
// invoked.
type ResolverUploadConnectionResolverFunc struct {
	defaultHook func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver
	hooks       []func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver
	history     []ResolverUploadConnectionResolverFuncCall
	mutex       sync.Mutex
}

// UploadConnectionResolver delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) UploadConnectionResolver(v0 dbstore.GetUploadsOptions) *resolvers.UploadsResolver {
	r0 := m.UploadConnectionResolverFunc.nextHook()(v0)
	m.UploadConnectionResolverFunc.appendCall(ResolverUploadConnectionResolverFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UploadConnectionResolver method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverUploadConnectionResolverFunc) SetDefaultHook(hook func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UploadConnectionResolver method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverUploadConnectionResolverFunc) PushHook(hook func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverUploadConnectionResolverFunc) SetDefaultReturn(r0 *resolvers.UploadsResolver) {
	f.SetDefaultHook(func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverUploadConnectionResolverFunc) PushReturn(r0 *resolvers.UploadsResolver) {
	f.PushHook(func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver {
		return r0
	})
}

func (f *ResolverUploadConnectionResolverFunc) nextHook() func(dbstore.GetUploadsOptions) *resolvers.UploadsResolver {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverUploadConnectionResolverFunc) appendCall(r0 ResolverUploadConnectionResolverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverUploadConnectionResolverFuncCall
// objects describing the invocations of this function.
func (f *ResolverUploadConnectionResolverFunc) History() []ResolverUploadConnectionResolverFuncCall {
	f.mutex.Lock()
	history := make([]ResolverUploadConnectionResolverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverUploadConnectionResolverFuncCall is an object that describes an
// invocation of method UploadConnectionResolver on an instance of
// MockResolver.
type ResolverUploadConnectionResolverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 dbstore.GetUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *resolvers.UploadsResolver
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverUploadConnectionResolverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverUploadConnectionResolverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
