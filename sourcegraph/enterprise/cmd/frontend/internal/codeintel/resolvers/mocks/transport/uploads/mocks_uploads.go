// Code generated by go-mockgen 1.3.4; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package uploads

import (
	"context"
	"sync"
	"time"

	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/uploads/shared"
	graphql "github.com/sourcegraph/sourcegraph/internal/codeintel/uploads/transport/graphql"
)

// MockResolver is a mock implementation of the Resolver interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/codeintel/uploads/transport/graphql)
// used for unit testing.
type MockResolver struct {
	// CommitGraphResolverFromFactoryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CommitGraphResolverFromFactory.
	CommitGraphResolverFromFactoryFunc *ResolverCommitGraphResolverFromFactoryFunc
	// DeleteUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploadByID.
	DeleteUploadByIDFunc *ResolverDeleteUploadByIDFunc
	// GetAuditLogsForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method GetAuditLogsForUpload.
	GetAuditLogsForUploadFunc *ResolverGetAuditLogsForUploadFunc
	// GetCommitsVisibleToUploadFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetCommitsVisibleToUpload.
	GetCommitsVisibleToUploadFunc *ResolverGetCommitsVisibleToUploadFunc
	// GetLastUploadRetentionScanForRepositoryFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetLastUploadRetentionScanForRepository.
	GetLastUploadRetentionScanForRepositoryFunc *ResolverGetLastUploadRetentionScanForRepositoryFunc
	// GetRecentUploadsSummaryFunc is an instance of a mock function object
	// controlling the behavior of the method GetRecentUploadsSummary.
	GetRecentUploadsSummaryFunc *ResolverGetRecentUploadsSummaryFunc
	// GetUploadDocumentsForPathFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadDocumentsForPath.
	GetUploadDocumentsForPathFunc *ResolverGetUploadDocumentsForPathFunc
	// GetUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByIDs.
	GetUploadsByIDsFunc *ResolverGetUploadsByIDsFunc
	// UploadsConnectionResolverFromFactoryFunc is an instance of a mock
	// function object controlling the behavior of the method
	// UploadsConnectionResolverFromFactory.
	UploadsConnectionResolverFromFactoryFunc *ResolverUploadsConnectionResolverFromFactoryFunc
}

// NewMockResolver creates a new mock of the Resolver interface. All methods
// return zero values for all results, unless overwritten.
func NewMockResolver() *MockResolver {
	return &MockResolver{
		CommitGraphResolverFromFactoryFunc: &ResolverCommitGraphResolverFromFactoryFunc{
			defaultHook: func(context.Context, int) (r0 *graphql.CommitGraphResolver) {
				return
			},
		},
		DeleteUploadByIDFunc: &ResolverDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 error) {
				return
			},
		},
		GetAuditLogsForUploadFunc: &ResolverGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) (r0 []shared.UploadLog, r1 error) {
				return
			},
		},
		GetCommitsVisibleToUploadFunc: &ResolverGetCommitsVisibleToUploadFunc{
			defaultHook: func(context.Context, int, int, *string) (r0 []string, r1 *string, r2 error) {
				return
			},
		},
		GetLastUploadRetentionScanForRepositoryFunc: &ResolverGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (r0 *time.Time, r1 error) {
				return
			},
		},
		GetRecentUploadsSummaryFunc: &ResolverGetRecentUploadsSummaryFunc{
			defaultHook: func(context.Context, int) (r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
				return
			},
		},
		GetUploadDocumentsForPathFunc: &ResolverGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) (r0 []string, r1 int, r2 error) {
				return
			},
		},
		GetUploadsByIDsFunc: &ResolverGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Upload, r1 error) {
				return
			},
		},
		UploadsConnectionResolverFromFactoryFunc: &ResolverUploadsConnectionResolverFromFactoryFunc{
			defaultHook: func(shared.GetUploadsOptions) (r0 *graphql.UploadsResolver) {
				return
			},
		},
	}
}

// NewStrictMockResolver creates a new mock of the Resolver interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockResolver() *MockResolver {
	return &MockResolver{
		CommitGraphResolverFromFactoryFunc: &ResolverCommitGraphResolverFromFactoryFunc{
			defaultHook: func(context.Context, int) *graphql.CommitGraphResolver {
				panic("unexpected invocation of MockResolver.CommitGraphResolverFromFactory")
			},
		},
		DeleteUploadByIDFunc: &ResolverDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) (bool, error) {
				panic("unexpected invocation of MockResolver.DeleteUploadByID")
			},
		},
		GetAuditLogsForUploadFunc: &ResolverGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) ([]shared.UploadLog, error) {
				panic("unexpected invocation of MockResolver.GetAuditLogsForUpload")
			},
		},
		GetCommitsVisibleToUploadFunc: &ResolverGetCommitsVisibleToUploadFunc{
			defaultHook: func(context.Context, int, int, *string) ([]string, *string, error) {
				panic("unexpected invocation of MockResolver.GetCommitsVisibleToUpload")
			},
		},
		GetLastUploadRetentionScanForRepositoryFunc: &ResolverGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (*time.Time, error) {
				panic("unexpected invocation of MockResolver.GetLastUploadRetentionScanForRepository")
			},
		},
		GetRecentUploadsSummaryFunc: &ResolverGetRecentUploadsSummaryFunc{
			defaultHook: func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
				panic("unexpected invocation of MockResolver.GetRecentUploadsSummary")
			},
		},
		GetUploadDocumentsForPathFunc: &ResolverGetUploadDocumentsForPathFunc{
			defaultHook: func(context.Context, int, string) ([]string, int, error) {
				panic("unexpected invocation of MockResolver.GetUploadDocumentsForPath")
			},
		},
		GetUploadsByIDsFunc: &ResolverGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Upload, error) {
				panic("unexpected invocation of MockResolver.GetUploadsByIDs")
			},
		},
		UploadsConnectionResolverFromFactoryFunc: &ResolverUploadsConnectionResolverFromFactoryFunc{
			defaultHook: func(shared.GetUploadsOptions) *graphql.UploadsResolver {
				panic("unexpected invocation of MockResolver.UploadsConnectionResolverFromFactory")
			},
		},
	}
}

// NewMockResolverFrom creates a new mock of the MockResolver interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockResolverFrom(i graphql.Resolver) *MockResolver {
	return &MockResolver{
		CommitGraphResolverFromFactoryFunc: &ResolverCommitGraphResolverFromFactoryFunc{
			defaultHook: i.CommitGraphResolverFromFactory,
		},
		DeleteUploadByIDFunc: &ResolverDeleteUploadByIDFunc{
			defaultHook: i.DeleteUploadByID,
		},
		GetAuditLogsForUploadFunc: &ResolverGetAuditLogsForUploadFunc{
			defaultHook: i.GetAuditLogsForUpload,
		},
		GetCommitsVisibleToUploadFunc: &ResolverGetCommitsVisibleToUploadFunc{
			defaultHook: i.GetCommitsVisibleToUpload,
		},
		GetLastUploadRetentionScanForRepositoryFunc: &ResolverGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: i.GetLastUploadRetentionScanForRepository,
		},
		GetRecentUploadsSummaryFunc: &ResolverGetRecentUploadsSummaryFunc{
			defaultHook: i.GetRecentUploadsSummary,
		},
		GetUploadDocumentsForPathFunc: &ResolverGetUploadDocumentsForPathFunc{
			defaultHook: i.GetUploadDocumentsForPath,
		},
		GetUploadsByIDsFunc: &ResolverGetUploadsByIDsFunc{
			defaultHook: i.GetUploadsByIDs,
		},
		UploadsConnectionResolverFromFactoryFunc: &ResolverUploadsConnectionResolverFromFactoryFunc{
			defaultHook: i.UploadsConnectionResolverFromFactory,
		},
	}
}

// ResolverCommitGraphResolverFromFactoryFunc describes the behavior when
// the CommitGraphResolverFromFactory method of the parent MockResolver
// instance is invoked.
type ResolverCommitGraphResolverFromFactoryFunc struct {
	defaultHook func(context.Context, int) *graphql.CommitGraphResolver
	hooks       []func(context.Context, int) *graphql.CommitGraphResolver
	history     []ResolverCommitGraphResolverFromFactoryFuncCall
	mutex       sync.Mutex
}

// CommitGraphResolverFromFactory delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) CommitGraphResolverFromFactory(v0 context.Context, v1 int) *graphql.CommitGraphResolver {
	r0 := m.CommitGraphResolverFromFactoryFunc.nextHook()(v0, v1)
	m.CommitGraphResolverFromFactoryFunc.appendCall(ResolverCommitGraphResolverFromFactoryFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CommitGraphResolverFromFactory method of the parent MockResolver instance
// is invoked and the hook queue is empty.
func (f *ResolverCommitGraphResolverFromFactoryFunc) SetDefaultHook(hook func(context.Context, int) *graphql.CommitGraphResolver) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitGraphResolverFromFactory method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverCommitGraphResolverFromFactoryFunc) PushHook(hook func(context.Context, int) *graphql.CommitGraphResolver) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverCommitGraphResolverFromFactoryFunc) SetDefaultReturn(r0 *graphql.CommitGraphResolver) {
	f.SetDefaultHook(func(context.Context, int) *graphql.CommitGraphResolver {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverCommitGraphResolverFromFactoryFunc) PushReturn(r0 *graphql.CommitGraphResolver) {
	f.PushHook(func(context.Context, int) *graphql.CommitGraphResolver {
		return r0
	})
}

func (f *ResolverCommitGraphResolverFromFactoryFunc) nextHook() func(context.Context, int) *graphql.CommitGraphResolver {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverCommitGraphResolverFromFactoryFunc) appendCall(r0 ResolverCommitGraphResolverFromFactoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverCommitGraphResolverFromFactoryFuncCall objects describing the
// invocations of this function.
func (f *ResolverCommitGraphResolverFromFactoryFunc) History() []ResolverCommitGraphResolverFromFactoryFuncCall {
	f.mutex.Lock()
	history := make([]ResolverCommitGraphResolverFromFactoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverCommitGraphResolverFromFactoryFuncCall is an object that
// describes an invocation of method CommitGraphResolverFromFactory on an
// instance of MockResolver.
type ResolverCommitGraphResolverFromFactoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *graphql.CommitGraphResolver
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverCommitGraphResolverFromFactoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverCommitGraphResolverFromFactoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverDeleteUploadByIDFunc describes the behavior when the
// DeleteUploadByID method of the parent MockResolver instance is invoked.
type ResolverDeleteUploadByIDFunc struct {
	defaultHook func(context.Context, int) (bool, error)
	hooks       []func(context.Context, int) (bool, error)
	history     []ResolverDeleteUploadByIDFuncCall
	mutex       sync.Mutex
}

// DeleteUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) DeleteUploadByID(v0 context.Context, v1 int) (bool, error) {
	r0, r1 := m.DeleteUploadByIDFunc.nextHook()(v0, v1)
	m.DeleteUploadByIDFunc.appendCall(ResolverDeleteUploadByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteUploadByID
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploadByID method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverDeleteUploadByIDFunc) PushHook(hook func(context.Context, int) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverDeleteUploadByIDFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverDeleteUploadByIDFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

func (f *ResolverDeleteUploadByIDFunc) nextHook() func(context.Context, int) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverDeleteUploadByIDFunc) appendCall(r0 ResolverDeleteUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverDeleteUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *ResolverDeleteUploadByIDFunc) History() []ResolverDeleteUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverDeleteUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverDeleteUploadByIDFuncCall is an object that describes an
// invocation of method DeleteUploadByID on an instance of MockResolver.
type ResolverDeleteUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverDeleteUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverDeleteUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverGetAuditLogsForUploadFunc describes the behavior when the
// GetAuditLogsForUpload method of the parent MockResolver instance is
// invoked.
type ResolverGetAuditLogsForUploadFunc struct {
	defaultHook func(context.Context, int) ([]shared.UploadLog, error)
	hooks       []func(context.Context, int) ([]shared.UploadLog, error)
	history     []ResolverGetAuditLogsForUploadFuncCall
	mutex       sync.Mutex
}

// GetAuditLogsForUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) GetAuditLogsForUpload(v0 context.Context, v1 int) ([]shared.UploadLog, error) {
	r0, r1 := m.GetAuditLogsForUploadFunc.nextHook()(v0, v1)
	m.GetAuditLogsForUploadFunc.appendCall(ResolverGetAuditLogsForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAuditLogsForUpload method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverGetAuditLogsForUploadFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.UploadLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuditLogsForUpload method of the parent MockResolver instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ResolverGetAuditLogsForUploadFunc) PushHook(hook func(context.Context, int) ([]shared.UploadLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetAuditLogsForUploadFunc) SetDefaultReturn(r0 []shared.UploadLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.UploadLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetAuditLogsForUploadFunc) PushReturn(r0 []shared.UploadLog, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.UploadLog, error) {
		return r0, r1
	})
}

func (f *ResolverGetAuditLogsForUploadFunc) nextHook() func(context.Context, int) ([]shared.UploadLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetAuditLogsForUploadFunc) appendCall(r0 ResolverGetAuditLogsForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetAuditLogsForUploadFuncCall
// objects describing the invocations of this function.
func (f *ResolverGetAuditLogsForUploadFunc) History() []ResolverGetAuditLogsForUploadFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetAuditLogsForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetAuditLogsForUploadFuncCall is an object that describes an
// invocation of method GetAuditLogsForUpload on an instance of
// MockResolver.
type ResolverGetAuditLogsForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetAuditLogsForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetAuditLogsForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverGetCommitsVisibleToUploadFunc describes the behavior when the
// GetCommitsVisibleToUpload method of the parent MockResolver instance is
// invoked.
type ResolverGetCommitsVisibleToUploadFunc struct {
	defaultHook func(context.Context, int, int, *string) ([]string, *string, error)
	hooks       []func(context.Context, int, int, *string) ([]string, *string, error)
	history     []ResolverGetCommitsVisibleToUploadFuncCall
	mutex       sync.Mutex
}

// GetCommitsVisibleToUpload delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) GetCommitsVisibleToUpload(v0 context.Context, v1 int, v2 int, v3 *string) ([]string, *string, error) {
	r0, r1, r2 := m.GetCommitsVisibleToUploadFunc.nextHook()(v0, v1, v2, v3)
	m.GetCommitsVisibleToUploadFunc.appendCall(ResolverGetCommitsVisibleToUploadFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetCommitsVisibleToUpload method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverGetCommitsVisibleToUploadFunc) SetDefaultHook(hook func(context.Context, int, int, *string) ([]string, *string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommitsVisibleToUpload method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverGetCommitsVisibleToUploadFunc) PushHook(hook func(context.Context, int, int, *string) ([]string, *string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetCommitsVisibleToUploadFunc) SetDefaultReturn(r0 []string, r1 *string, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int, *string) ([]string, *string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetCommitsVisibleToUploadFunc) PushReturn(r0 []string, r1 *string, r2 error) {
	f.PushHook(func(context.Context, int, int, *string) ([]string, *string, error) {
		return r0, r1, r2
	})
}

func (f *ResolverGetCommitsVisibleToUploadFunc) nextHook() func(context.Context, int, int, *string) ([]string, *string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetCommitsVisibleToUploadFunc) appendCall(r0 ResolverGetCommitsVisibleToUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetCommitsVisibleToUploadFuncCall
// objects describing the invocations of this function.
func (f *ResolverGetCommitsVisibleToUploadFunc) History() []ResolverGetCommitsVisibleToUploadFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetCommitsVisibleToUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetCommitsVisibleToUploadFuncCall is an object that describes an
// invocation of method GetCommitsVisibleToUpload on an instance of
// MockResolver.
type ResolverGetCommitsVisibleToUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetCommitsVisibleToUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetCommitsVisibleToUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverGetLastUploadRetentionScanForRepositoryFunc describes the
// behavior when the GetLastUploadRetentionScanForRepository method of the
// parent MockResolver instance is invoked.
type ResolverGetLastUploadRetentionScanForRepositoryFunc struct {
	defaultHook func(context.Context, int) (*time.Time, error)
	hooks       []func(context.Context, int) (*time.Time, error)
	history     []ResolverGetLastUploadRetentionScanForRepositoryFuncCall
	mutex       sync.Mutex
}

// GetLastUploadRetentionScanForRepository delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockResolver) GetLastUploadRetentionScanForRepository(v0 context.Context, v1 int) (*time.Time, error) {
	r0, r1 := m.GetLastUploadRetentionScanForRepositoryFunc.nextHook()(v0, v1)
	m.GetLastUploadRetentionScanForRepositoryFunc.appendCall(ResolverGetLastUploadRetentionScanForRepositoryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLastUploadRetentionScanForRepository method of the parent MockResolver
// instance is invoked and the hook queue is empty.
func (f *ResolverGetLastUploadRetentionScanForRepositoryFunc) SetDefaultHook(hook func(context.Context, int) (*time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastUploadRetentionScanForRepository method of the parent MockResolver
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ResolverGetLastUploadRetentionScanForRepositoryFunc) PushHook(hook func(context.Context, int) (*time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetLastUploadRetentionScanForRepositoryFunc) SetDefaultReturn(r0 *time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetLastUploadRetentionScanForRepositoryFunc) PushReturn(r0 *time.Time, r1 error) {
	f.PushHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

func (f *ResolverGetLastUploadRetentionScanForRepositoryFunc) nextHook() func(context.Context, int) (*time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetLastUploadRetentionScanForRepositoryFunc) appendCall(r0 ResolverGetLastUploadRetentionScanForRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverGetLastUploadRetentionScanForRepositoryFuncCall objects
// describing the invocations of this function.
func (f *ResolverGetLastUploadRetentionScanForRepositoryFunc) History() []ResolverGetLastUploadRetentionScanForRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetLastUploadRetentionScanForRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetLastUploadRetentionScanForRepositoryFuncCall is an object that
// describes an invocation of method GetLastUploadRetentionScanForRepository
// on an instance of MockResolver.
type ResolverGetLastUploadRetentionScanForRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetLastUploadRetentionScanForRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetLastUploadRetentionScanForRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverGetRecentUploadsSummaryFunc describes the behavior when the
// GetRecentUploadsSummary method of the parent MockResolver instance is
// invoked.
type ResolverGetRecentUploadsSummaryFunc struct {
	defaultHook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)
	hooks       []func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)
	history     []ResolverGetRecentUploadsSummaryFuncCall
	mutex       sync.Mutex
}

// GetRecentUploadsSummary delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) GetRecentUploadsSummary(v0 context.Context, v1 int) ([]shared.UploadsWithRepositoryNamespace, error) {
	r0, r1 := m.GetRecentUploadsSummaryFunc.nextHook()(v0, v1)
	m.GetRecentUploadsSummaryFunc.appendCall(ResolverGetRecentUploadsSummaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRecentUploadsSummary method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverGetRecentUploadsSummaryFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRecentUploadsSummary method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverGetRecentUploadsSummaryFunc) PushHook(hook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetRecentUploadsSummaryFunc) SetDefaultReturn(r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetRecentUploadsSummaryFunc) PushReturn(r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
		return r0, r1
	})
}

func (f *ResolverGetRecentUploadsSummaryFunc) nextHook() func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetRecentUploadsSummaryFunc) appendCall(r0 ResolverGetRecentUploadsSummaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetRecentUploadsSummaryFuncCall
// objects describing the invocations of this function.
func (f *ResolverGetRecentUploadsSummaryFunc) History() []ResolverGetRecentUploadsSummaryFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetRecentUploadsSummaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetRecentUploadsSummaryFuncCall is an object that describes an
// invocation of method GetRecentUploadsSummary on an instance of
// MockResolver.
type ResolverGetRecentUploadsSummaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadsWithRepositoryNamespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetRecentUploadsSummaryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetRecentUploadsSummaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverGetUploadDocumentsForPathFunc describes the behavior when the
// GetUploadDocumentsForPath method of the parent MockResolver instance is
// invoked.
type ResolverGetUploadDocumentsForPathFunc struct {
	defaultHook func(context.Context, int, string) ([]string, int, error)
	hooks       []func(context.Context, int, string) ([]string, int, error)
	history     []ResolverGetUploadDocumentsForPathFuncCall
	mutex       sync.Mutex
}

// GetUploadDocumentsForPath delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) GetUploadDocumentsForPath(v0 context.Context, v1 int, v2 string) ([]string, int, error) {
	r0, r1, r2 := m.GetUploadDocumentsForPathFunc.nextHook()(v0, v1, v2)
	m.GetUploadDocumentsForPathFunc.appendCall(ResolverGetUploadDocumentsForPathFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetUploadDocumentsForPath method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverGetUploadDocumentsForPathFunc) SetDefaultHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadDocumentsForPath method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverGetUploadDocumentsForPathFunc) PushHook(hook func(context.Context, int, string) ([]string, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetUploadDocumentsForPathFunc) SetDefaultReturn(r0 []string, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetUploadDocumentsForPathFunc) PushReturn(r0 []string, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string) ([]string, int, error) {
		return r0, r1, r2
	})
}

func (f *ResolverGetUploadDocumentsForPathFunc) nextHook() func(context.Context, int, string) ([]string, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetUploadDocumentsForPathFunc) appendCall(r0 ResolverGetUploadDocumentsForPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetUploadDocumentsForPathFuncCall
// objects describing the invocations of this function.
func (f *ResolverGetUploadDocumentsForPathFunc) History() []ResolverGetUploadDocumentsForPathFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetUploadDocumentsForPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetUploadDocumentsForPathFuncCall is an object that describes an
// invocation of method GetUploadDocumentsForPath on an instance of
// MockResolver.
type ResolverGetUploadDocumentsForPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetUploadDocumentsForPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetUploadDocumentsForPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverGetUploadsByIDsFunc describes the behavior when the
// GetUploadsByIDs method of the parent MockResolver instance is invoked.
type ResolverGetUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Upload, error)
	hooks       []func(context.Context, ...int) ([]shared.Upload, error)
	history     []ResolverGetUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]shared.Upload, error) {
	r0, r1 := m.GetUploadsByIDsFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsFunc.appendCall(ResolverGetUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsByIDs
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDs method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetUploadsByIDsFunc) SetDefaultReturn(r0 []shared.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetUploadsByIDsFunc) PushReturn(r0 []shared.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

func (f *ResolverGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetUploadsByIDsFunc) appendCall(r0 ResolverGetUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetUploadsByIDsFuncCall objects
// describing the invocations of this function.
func (f *ResolverGetUploadsByIDsFunc) History() []ResolverGetUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetUploadsByIDsFuncCall is an object that describes an invocation
// of method GetUploadsByIDs on an instance of MockResolver.
type ResolverGetUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ResolverGetUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverUploadsConnectionResolverFromFactoryFunc describes the behavior
// when the UploadsConnectionResolverFromFactory method of the parent
// MockResolver instance is invoked.
type ResolverUploadsConnectionResolverFromFactoryFunc struct {
	defaultHook func(shared.GetUploadsOptions) *graphql.UploadsResolver
	hooks       []func(shared.GetUploadsOptions) *graphql.UploadsResolver
	history     []ResolverUploadsConnectionResolverFromFactoryFuncCall
	mutex       sync.Mutex
}

// UploadsConnectionResolverFromFactory delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockResolver) UploadsConnectionResolverFromFactory(v0 shared.GetUploadsOptions) *graphql.UploadsResolver {
	r0 := m.UploadsConnectionResolverFromFactoryFunc.nextHook()(v0)
	m.UploadsConnectionResolverFromFactoryFunc.appendCall(ResolverUploadsConnectionResolverFromFactoryFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UploadsConnectionResolverFromFactory method of the parent MockResolver
// instance is invoked and the hook queue is empty.
func (f *ResolverUploadsConnectionResolverFromFactoryFunc) SetDefaultHook(hook func(shared.GetUploadsOptions) *graphql.UploadsResolver) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UploadsConnectionResolverFromFactory method of the parent MockResolver
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ResolverUploadsConnectionResolverFromFactoryFunc) PushHook(hook func(shared.GetUploadsOptions) *graphql.UploadsResolver) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverUploadsConnectionResolverFromFactoryFunc) SetDefaultReturn(r0 *graphql.UploadsResolver) {
	f.SetDefaultHook(func(shared.GetUploadsOptions) *graphql.UploadsResolver {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverUploadsConnectionResolverFromFactoryFunc) PushReturn(r0 *graphql.UploadsResolver) {
	f.PushHook(func(shared.GetUploadsOptions) *graphql.UploadsResolver {
		return r0
	})
}

func (f *ResolverUploadsConnectionResolverFromFactoryFunc) nextHook() func(shared.GetUploadsOptions) *graphql.UploadsResolver {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverUploadsConnectionResolverFromFactoryFunc) appendCall(r0 ResolverUploadsConnectionResolverFromFactoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverUploadsConnectionResolverFromFactoryFuncCall objects describing
// the invocations of this function.
func (f *ResolverUploadsConnectionResolverFromFactoryFunc) History() []ResolverUploadsConnectionResolverFromFactoryFuncCall {
	f.mutex.Lock()
	history := make([]ResolverUploadsConnectionResolverFromFactoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverUploadsConnectionResolverFromFactoryFuncCall is an object that
// describes an invocation of method UploadsConnectionResolverFromFactory on
// an instance of MockResolver.
type ResolverUploadsConnectionResolverFromFactoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 shared.GetUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *graphql.UploadsResolver
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverUploadsConnectionResolverFromFactoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverUploadsConnectionResolverFromFactoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
