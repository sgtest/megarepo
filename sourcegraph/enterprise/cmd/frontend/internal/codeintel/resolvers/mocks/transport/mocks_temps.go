// Code generated by go-mockgen 1.3.4; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package transport

import (
	"context"
	"sync"
	"time"

	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/autoindexing/shared"
	graphql "github.com/sourcegraph/sourcegraph/internal/codeintel/autoindexing/transport/graphql"
	config "github.com/sourcegraph/sourcegraph/lib/codeintel/autoindex/config"
)

// MockResolver is a mock implementation of the Resolver interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/codeintel/autoindexing/transport/graphql)
// used for unit testing.
type MockResolver struct {
	// DeleteIndexByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteIndexByID.
	DeleteIndexByIDFunc *ResolverDeleteIndexByIDFunc
	// GetIndexByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexByID.
	GetIndexByIDFunc *ResolverGetIndexByIDFunc
	// GetIndexConfigurationFunc is an instance of a mock function object
	// controlling the behavior of the method GetIndexConfiguration.
	GetIndexConfigurationFunc *ResolverGetIndexConfigurationFunc
	// GetIndexesByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetIndexesByIDs.
	GetIndexesByIDsFunc *ResolverGetIndexesByIDsFunc
	// GetLastIndexScanForRepositoryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetLastIndexScanForRepository.
	GetLastIndexScanForRepositoryFunc *ResolverGetLastIndexScanForRepositoryFunc
	// GetRecentIndexesSummaryFunc is an instance of a mock function object
	// controlling the behavior of the method GetRecentIndexesSummary.
	GetRecentIndexesSummaryFunc *ResolverGetRecentIndexesSummaryFunc
	// IndexConnectionResolverFromFactoryFunc is an instance of a mock
	// function object controlling the behavior of the method
	// IndexConnectionResolverFromFactory.
	IndexConnectionResolverFromFactoryFunc *ResolverIndexConnectionResolverFromFactoryFunc
	// InferedIndexConfigurationFunc is an instance of a mock function
	// object controlling the behavior of the method
	// InferedIndexConfiguration.
	InferedIndexConfigurationFunc *ResolverInferedIndexConfigurationFunc
	// InferedIndexConfigurationHintsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// InferedIndexConfigurationHints.
	InferedIndexConfigurationHintsFunc *ResolverInferedIndexConfigurationHintsFunc
	// QueueAutoIndexJobsForRepoFunc is an instance of a mock function
	// object controlling the behavior of the method
	// QueueAutoIndexJobsForRepo.
	QueueAutoIndexJobsForRepoFunc *ResolverQueueAutoIndexJobsForRepoFunc
	// UpdateIndexConfigurationByRepositoryIDFunc is an instance of a mock
	// function object controlling the behavior of the method
	// UpdateIndexConfigurationByRepositoryID.
	UpdateIndexConfigurationByRepositoryIDFunc *ResolverUpdateIndexConfigurationByRepositoryIDFunc
}

// NewMockResolver creates a new mock of the Resolver interface. All methods
// return zero values for all results, unless overwritten.
func NewMockResolver() *MockResolver {
	return &MockResolver{
		DeleteIndexByIDFunc: &ResolverDeleteIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		GetIndexByIDFunc: &ResolverGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 shared.Index, r1 bool, r2 error) {
				return
			},
		},
		GetIndexConfigurationFunc: &ResolverGetIndexConfigurationFunc{
			defaultHook: func(context.Context, int) (r0 []byte, r1 bool, r2 error) {
				return
			},
		},
		GetIndexesByIDsFunc: &ResolverGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Index, r1 error) {
				return
			},
		},
		GetLastIndexScanForRepositoryFunc: &ResolverGetLastIndexScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (r0 *time.Time, r1 error) {
				return
			},
		},
		GetRecentIndexesSummaryFunc: &ResolverGetRecentIndexesSummaryFunc{
			defaultHook: func(context.Context, int) (r0 []shared.IndexesWithRepositoryNamespace, r1 error) {
				return
			},
		},
		IndexConnectionResolverFromFactoryFunc: &ResolverIndexConnectionResolverFromFactoryFunc{
			defaultHook: func(shared.GetIndexesOptions) (r0 *graphql.IndexesResolver) {
				return
			},
		},
		InferedIndexConfigurationFunc: &ResolverInferedIndexConfigurationFunc{
			defaultHook: func(context.Context, int, string) (r0 *config.IndexConfiguration, r1 bool, r2 error) {
				return
			},
		},
		InferedIndexConfigurationHintsFunc: &ResolverInferedIndexConfigurationHintsFunc{
			defaultHook: func(context.Context, int, string) (r0 []config.IndexJobHint, r1 error) {
				return
			},
		},
		QueueAutoIndexJobsForRepoFunc: &ResolverQueueAutoIndexJobsForRepoFunc{
			defaultHook: func(context.Context, int, string, string) (r0 []shared.Index, r1 error) {
				return
			},
		},
		UpdateIndexConfigurationByRepositoryIDFunc: &ResolverUpdateIndexConfigurationByRepositoryIDFunc{
			defaultHook: func(context.Context, int, string) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockResolver creates a new mock of the Resolver interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockResolver() *MockResolver {
	return &MockResolver{
		DeleteIndexByIDFunc: &ResolverDeleteIndexByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockResolver.DeleteIndexByID")
			},
		},
		GetIndexByIDFunc: &ResolverGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (shared.Index, bool, error) {
				panic("unexpected invocation of MockResolver.GetIndexByID")
			},
		},
		GetIndexConfigurationFunc: &ResolverGetIndexConfigurationFunc{
			defaultHook: func(context.Context, int) ([]byte, bool, error) {
				panic("unexpected invocation of MockResolver.GetIndexConfiguration")
			},
		},
		GetIndexesByIDsFunc: &ResolverGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Index, error) {
				panic("unexpected invocation of MockResolver.GetIndexesByIDs")
			},
		},
		GetLastIndexScanForRepositoryFunc: &ResolverGetLastIndexScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (*time.Time, error) {
				panic("unexpected invocation of MockResolver.GetLastIndexScanForRepository")
			},
		},
		GetRecentIndexesSummaryFunc: &ResolverGetRecentIndexesSummaryFunc{
			defaultHook: func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
				panic("unexpected invocation of MockResolver.GetRecentIndexesSummary")
			},
		},
		IndexConnectionResolverFromFactoryFunc: &ResolverIndexConnectionResolverFromFactoryFunc{
			defaultHook: func(shared.GetIndexesOptions) *graphql.IndexesResolver {
				panic("unexpected invocation of MockResolver.IndexConnectionResolverFromFactory")
			},
		},
		InferedIndexConfigurationFunc: &ResolverInferedIndexConfigurationFunc{
			defaultHook: func(context.Context, int, string) (*config.IndexConfiguration, bool, error) {
				panic("unexpected invocation of MockResolver.InferedIndexConfiguration")
			},
		},
		InferedIndexConfigurationHintsFunc: &ResolverInferedIndexConfigurationHintsFunc{
			defaultHook: func(context.Context, int, string) ([]config.IndexJobHint, error) {
				panic("unexpected invocation of MockResolver.InferedIndexConfigurationHints")
			},
		},
		QueueAutoIndexJobsForRepoFunc: &ResolverQueueAutoIndexJobsForRepoFunc{
			defaultHook: func(context.Context, int, string, string) ([]shared.Index, error) {
				panic("unexpected invocation of MockResolver.QueueAutoIndexJobsForRepo")
			},
		},
		UpdateIndexConfigurationByRepositoryIDFunc: &ResolverUpdateIndexConfigurationByRepositoryIDFunc{
			defaultHook: func(context.Context, int, string) error {
				panic("unexpected invocation of MockResolver.UpdateIndexConfigurationByRepositoryID")
			},
		},
	}
}

// NewMockResolverFrom creates a new mock of the MockResolver interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockResolverFrom(i graphql.Resolver) *MockResolver {
	return &MockResolver{
		DeleteIndexByIDFunc: &ResolverDeleteIndexByIDFunc{
			defaultHook: i.DeleteIndexByID,
		},
		GetIndexByIDFunc: &ResolverGetIndexByIDFunc{
			defaultHook: i.GetIndexByID,
		},
		GetIndexConfigurationFunc: &ResolverGetIndexConfigurationFunc{
			defaultHook: i.GetIndexConfiguration,
		},
		GetIndexesByIDsFunc: &ResolverGetIndexesByIDsFunc{
			defaultHook: i.GetIndexesByIDs,
		},
		GetLastIndexScanForRepositoryFunc: &ResolverGetLastIndexScanForRepositoryFunc{
			defaultHook: i.GetLastIndexScanForRepository,
		},
		GetRecentIndexesSummaryFunc: &ResolverGetRecentIndexesSummaryFunc{
			defaultHook: i.GetRecentIndexesSummary,
		},
		IndexConnectionResolverFromFactoryFunc: &ResolverIndexConnectionResolverFromFactoryFunc{
			defaultHook: i.IndexConnectionResolverFromFactory,
		},
		InferedIndexConfigurationFunc: &ResolverInferedIndexConfigurationFunc{
			defaultHook: i.InferedIndexConfiguration,
		},
		InferedIndexConfigurationHintsFunc: &ResolverInferedIndexConfigurationHintsFunc{
			defaultHook: i.InferedIndexConfigurationHints,
		},
		QueueAutoIndexJobsForRepoFunc: &ResolverQueueAutoIndexJobsForRepoFunc{
			defaultHook: i.QueueAutoIndexJobsForRepo,
		},
		UpdateIndexConfigurationByRepositoryIDFunc: &ResolverUpdateIndexConfigurationByRepositoryIDFunc{
			defaultHook: i.UpdateIndexConfigurationByRepositoryID,
		},
	}
}

// ResolverDeleteIndexByIDFunc describes the behavior when the
// DeleteIndexByID method of the parent MockResolver instance is invoked.
type ResolverDeleteIndexByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []ResolverDeleteIndexByIDFuncCall
	mutex       sync.Mutex
}

// DeleteIndexByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) DeleteIndexByID(v0 context.Context, v1 int) error {
	r0 := m.DeleteIndexByIDFunc.nextHook()(v0, v1)
	m.DeleteIndexByIDFunc.appendCall(ResolverDeleteIndexByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteIndexByID
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverDeleteIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteIndexByID method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverDeleteIndexByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverDeleteIndexByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverDeleteIndexByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *ResolverDeleteIndexByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverDeleteIndexByIDFunc) appendCall(r0 ResolverDeleteIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverDeleteIndexByIDFuncCall objects
// describing the invocations of this function.
func (f *ResolverDeleteIndexByIDFunc) History() []ResolverDeleteIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverDeleteIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverDeleteIndexByIDFuncCall is an object that describes an invocation
// of method DeleteIndexByID on an instance of MockResolver.
type ResolverDeleteIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverDeleteIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverDeleteIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverGetIndexByIDFunc describes the behavior when the GetIndexByID
// method of the parent MockResolver instance is invoked.
type ResolverGetIndexByIDFunc struct {
	defaultHook func(context.Context, int) (shared.Index, bool, error)
	hooks       []func(context.Context, int) (shared.Index, bool, error)
	history     []ResolverGetIndexByIDFuncCall
	mutex       sync.Mutex
}

// GetIndexByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockResolver) GetIndexByID(v0 context.Context, v1 int) (shared.Index, bool, error) {
	r0, r1, r2 := m.GetIndexByIDFunc.nextHook()(v0, v1)
	m.GetIndexByIDFunc.appendCall(ResolverGetIndexByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexByID method
// of the parent MockResolver instance is invoked and the hook queue is
// empty.
func (f *ResolverGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (shared.Index, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexByID method of the parent MockResolver instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ResolverGetIndexByIDFunc) PushHook(hook func(context.Context, int) (shared.Index, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetIndexByIDFunc) SetDefaultReturn(r0 shared.Index, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (shared.Index, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetIndexByIDFunc) PushReturn(r0 shared.Index, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (shared.Index, bool, error) {
		return r0, r1, r2
	})
}

func (f *ResolverGetIndexByIDFunc) nextHook() func(context.Context, int) (shared.Index, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetIndexByIDFunc) appendCall(r0 ResolverGetIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetIndexByIDFuncCall objects
// describing the invocations of this function.
func (f *ResolverGetIndexByIDFunc) History() []ResolverGetIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetIndexByIDFuncCall is an object that describes an invocation of
// method GetIndexByID on an instance of MockResolver.
type ResolverGetIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverGetIndexConfigurationFunc describes the behavior when the
// GetIndexConfiguration method of the parent MockResolver instance is
// invoked.
type ResolverGetIndexConfigurationFunc struct {
	defaultHook func(context.Context, int) ([]byte, bool, error)
	hooks       []func(context.Context, int) ([]byte, bool, error)
	history     []ResolverGetIndexConfigurationFuncCall
	mutex       sync.Mutex
}

// GetIndexConfiguration delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) GetIndexConfiguration(v0 context.Context, v1 int) ([]byte, bool, error) {
	r0, r1, r2 := m.GetIndexConfigurationFunc.nextHook()(v0, v1)
	m.GetIndexConfigurationFunc.appendCall(ResolverGetIndexConfigurationFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetIndexConfiguration method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverGetIndexConfigurationFunc) SetDefaultHook(hook func(context.Context, int) ([]byte, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexConfiguration method of the parent MockResolver instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ResolverGetIndexConfigurationFunc) PushHook(hook func(context.Context, int) ([]byte, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetIndexConfigurationFunc) SetDefaultReturn(r0 []byte, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) ([]byte, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetIndexConfigurationFunc) PushReturn(r0 []byte, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) ([]byte, bool, error) {
		return r0, r1, r2
	})
}

func (f *ResolverGetIndexConfigurationFunc) nextHook() func(context.Context, int) ([]byte, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetIndexConfigurationFunc) appendCall(r0 ResolverGetIndexConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetIndexConfigurationFuncCall
// objects describing the invocations of this function.
func (f *ResolverGetIndexConfigurationFunc) History() []ResolverGetIndexConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetIndexConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetIndexConfigurationFuncCall is an object that describes an
// invocation of method GetIndexConfiguration on an instance of
// MockResolver.
type ResolverGetIndexConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetIndexConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetIndexConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverGetIndexesByIDsFunc describes the behavior when the
// GetIndexesByIDs method of the parent MockResolver instance is invoked.
type ResolverGetIndexesByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Index, error)
	hooks       []func(context.Context, ...int) ([]shared.Index, error)
	history     []ResolverGetIndexesByIDsFuncCall
	mutex       sync.Mutex
}

// GetIndexesByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockResolver) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]shared.Index, error) {
	r0, r1 := m.GetIndexesByIDsFunc.nextHook()(v0, v1...)
	m.GetIndexesByIDsFunc.appendCall(ResolverGetIndexesByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexesByIDs
// method of the parent MockResolver instance is invoked and the hook queue
// is empty.
func (f *ResolverGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexesByIDs method of the parent MockResolver instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ResolverGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetIndexesByIDsFunc) SetDefaultReturn(r0 []shared.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetIndexesByIDsFunc) PushReturn(r0 []shared.Index, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Index, error) {
		return r0, r1
	})
}

func (f *ResolverGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetIndexesByIDsFunc) appendCall(r0 ResolverGetIndexesByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetIndexesByIDsFuncCall objects
// describing the invocations of this function.
func (f *ResolverGetIndexesByIDsFunc) History() []ResolverGetIndexesByIDsFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetIndexesByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetIndexesByIDsFuncCall is an object that describes an invocation
// of method GetIndexesByIDs on an instance of MockResolver.
type ResolverGetIndexesByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ResolverGetIndexesByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetIndexesByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverGetLastIndexScanForRepositoryFunc describes the behavior when the
// GetLastIndexScanForRepository method of the parent MockResolver instance
// is invoked.
type ResolverGetLastIndexScanForRepositoryFunc struct {
	defaultHook func(context.Context, int) (*time.Time, error)
	hooks       []func(context.Context, int) (*time.Time, error)
	history     []ResolverGetLastIndexScanForRepositoryFuncCall
	mutex       sync.Mutex
}

// GetLastIndexScanForRepository delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) GetLastIndexScanForRepository(v0 context.Context, v1 int) (*time.Time, error) {
	r0, r1 := m.GetLastIndexScanForRepositoryFunc.nextHook()(v0, v1)
	m.GetLastIndexScanForRepositoryFunc.appendCall(ResolverGetLastIndexScanForRepositoryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLastIndexScanForRepository method of the parent MockResolver instance
// is invoked and the hook queue is empty.
func (f *ResolverGetLastIndexScanForRepositoryFunc) SetDefaultHook(hook func(context.Context, int) (*time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastIndexScanForRepository method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverGetLastIndexScanForRepositoryFunc) PushHook(hook func(context.Context, int) (*time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetLastIndexScanForRepositoryFunc) SetDefaultReturn(r0 *time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetLastIndexScanForRepositoryFunc) PushReturn(r0 *time.Time, r1 error) {
	f.PushHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

func (f *ResolverGetLastIndexScanForRepositoryFunc) nextHook() func(context.Context, int) (*time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetLastIndexScanForRepositoryFunc) appendCall(r0 ResolverGetLastIndexScanForRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverGetLastIndexScanForRepositoryFuncCall objects describing the
// invocations of this function.
func (f *ResolverGetLastIndexScanForRepositoryFunc) History() []ResolverGetLastIndexScanForRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetLastIndexScanForRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetLastIndexScanForRepositoryFuncCall is an object that describes
// an invocation of method GetLastIndexScanForRepository on an instance of
// MockResolver.
type ResolverGetLastIndexScanForRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetLastIndexScanForRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetLastIndexScanForRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverGetRecentIndexesSummaryFunc describes the behavior when the
// GetRecentIndexesSummary method of the parent MockResolver instance is
// invoked.
type ResolverGetRecentIndexesSummaryFunc struct {
	defaultHook func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)
	hooks       []func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)
	history     []ResolverGetRecentIndexesSummaryFuncCall
	mutex       sync.Mutex
}

// GetRecentIndexesSummary delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockResolver) GetRecentIndexesSummary(v0 context.Context, v1 int) ([]shared.IndexesWithRepositoryNamespace, error) {
	r0, r1 := m.GetRecentIndexesSummaryFunc.nextHook()(v0, v1)
	m.GetRecentIndexesSummaryFunc.appendCall(ResolverGetRecentIndexesSummaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRecentIndexesSummary method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverGetRecentIndexesSummaryFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRecentIndexesSummary method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverGetRecentIndexesSummaryFunc) PushHook(hook func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverGetRecentIndexesSummaryFunc) SetDefaultReturn(r0 []shared.IndexesWithRepositoryNamespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverGetRecentIndexesSummaryFunc) PushReturn(r0 []shared.IndexesWithRepositoryNamespace, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
		return r0, r1
	})
}

func (f *ResolverGetRecentIndexesSummaryFunc) nextHook() func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverGetRecentIndexesSummaryFunc) appendCall(r0 ResolverGetRecentIndexesSummaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverGetRecentIndexesSummaryFuncCall
// objects describing the invocations of this function.
func (f *ResolverGetRecentIndexesSummaryFunc) History() []ResolverGetRecentIndexesSummaryFuncCall {
	f.mutex.Lock()
	history := make([]ResolverGetRecentIndexesSummaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverGetRecentIndexesSummaryFuncCall is an object that describes an
// invocation of method GetRecentIndexesSummary on an instance of
// MockResolver.
type ResolverGetRecentIndexesSummaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.IndexesWithRepositoryNamespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverGetRecentIndexesSummaryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverGetRecentIndexesSummaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverIndexConnectionResolverFromFactoryFunc describes the behavior
// when the IndexConnectionResolverFromFactory method of the parent
// MockResolver instance is invoked.
type ResolverIndexConnectionResolverFromFactoryFunc struct {
	defaultHook func(shared.GetIndexesOptions) *graphql.IndexesResolver
	hooks       []func(shared.GetIndexesOptions) *graphql.IndexesResolver
	history     []ResolverIndexConnectionResolverFromFactoryFuncCall
	mutex       sync.Mutex
}

// IndexConnectionResolverFromFactory delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockResolver) IndexConnectionResolverFromFactory(v0 shared.GetIndexesOptions) *graphql.IndexesResolver {
	r0 := m.IndexConnectionResolverFromFactoryFunc.nextHook()(v0)
	m.IndexConnectionResolverFromFactoryFunc.appendCall(ResolverIndexConnectionResolverFromFactoryFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IndexConnectionResolverFromFactory method of the parent MockResolver
// instance is invoked and the hook queue is empty.
func (f *ResolverIndexConnectionResolverFromFactoryFunc) SetDefaultHook(hook func(shared.GetIndexesOptions) *graphql.IndexesResolver) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IndexConnectionResolverFromFactory method of the parent MockResolver
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ResolverIndexConnectionResolverFromFactoryFunc) PushHook(hook func(shared.GetIndexesOptions) *graphql.IndexesResolver) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverIndexConnectionResolverFromFactoryFunc) SetDefaultReturn(r0 *graphql.IndexesResolver) {
	f.SetDefaultHook(func(shared.GetIndexesOptions) *graphql.IndexesResolver {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverIndexConnectionResolverFromFactoryFunc) PushReturn(r0 *graphql.IndexesResolver) {
	f.PushHook(func(shared.GetIndexesOptions) *graphql.IndexesResolver {
		return r0
	})
}

func (f *ResolverIndexConnectionResolverFromFactoryFunc) nextHook() func(shared.GetIndexesOptions) *graphql.IndexesResolver {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverIndexConnectionResolverFromFactoryFunc) appendCall(r0 ResolverIndexConnectionResolverFromFactoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverIndexConnectionResolverFromFactoryFuncCall objects describing the
// invocations of this function.
func (f *ResolverIndexConnectionResolverFromFactoryFunc) History() []ResolverIndexConnectionResolverFromFactoryFuncCall {
	f.mutex.Lock()
	history := make([]ResolverIndexConnectionResolverFromFactoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverIndexConnectionResolverFromFactoryFuncCall is an object that
// describes an invocation of method IndexConnectionResolverFromFactory on
// an instance of MockResolver.
type ResolverIndexConnectionResolverFromFactoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 shared.GetIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *graphql.IndexesResolver
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverIndexConnectionResolverFromFactoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverIndexConnectionResolverFromFactoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ResolverInferedIndexConfigurationFunc describes the behavior when the
// InferedIndexConfiguration method of the parent MockResolver instance is
// invoked.
type ResolverInferedIndexConfigurationFunc struct {
	defaultHook func(context.Context, int, string) (*config.IndexConfiguration, bool, error)
	hooks       []func(context.Context, int, string) (*config.IndexConfiguration, bool, error)
	history     []ResolverInferedIndexConfigurationFuncCall
	mutex       sync.Mutex
}

// InferedIndexConfiguration delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) InferedIndexConfiguration(v0 context.Context, v1 int, v2 string) (*config.IndexConfiguration, bool, error) {
	r0, r1, r2 := m.InferedIndexConfigurationFunc.nextHook()(v0, v1, v2)
	m.InferedIndexConfigurationFunc.appendCall(ResolverInferedIndexConfigurationFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// InferedIndexConfiguration method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverInferedIndexConfigurationFunc) SetDefaultHook(hook func(context.Context, int, string) (*config.IndexConfiguration, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InferedIndexConfiguration method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverInferedIndexConfigurationFunc) PushHook(hook func(context.Context, int, string) (*config.IndexConfiguration, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverInferedIndexConfigurationFunc) SetDefaultReturn(r0 *config.IndexConfiguration, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string) (*config.IndexConfiguration, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverInferedIndexConfigurationFunc) PushReturn(r0 *config.IndexConfiguration, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int, string) (*config.IndexConfiguration, bool, error) {
		return r0, r1, r2
	})
}

func (f *ResolverInferedIndexConfigurationFunc) nextHook() func(context.Context, int, string) (*config.IndexConfiguration, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverInferedIndexConfigurationFunc) appendCall(r0 ResolverInferedIndexConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverInferedIndexConfigurationFuncCall
// objects describing the invocations of this function.
func (f *ResolverInferedIndexConfigurationFunc) History() []ResolverInferedIndexConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]ResolverInferedIndexConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverInferedIndexConfigurationFuncCall is an object that describes an
// invocation of method InferedIndexConfiguration on an instance of
// MockResolver.
type ResolverInferedIndexConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *config.IndexConfiguration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverInferedIndexConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverInferedIndexConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ResolverInferedIndexConfigurationHintsFunc describes the behavior when
// the InferedIndexConfigurationHints method of the parent MockResolver
// instance is invoked.
type ResolverInferedIndexConfigurationHintsFunc struct {
	defaultHook func(context.Context, int, string) ([]config.IndexJobHint, error)
	hooks       []func(context.Context, int, string) ([]config.IndexJobHint, error)
	history     []ResolverInferedIndexConfigurationHintsFuncCall
	mutex       sync.Mutex
}

// InferedIndexConfigurationHints delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) InferedIndexConfigurationHints(v0 context.Context, v1 int, v2 string) ([]config.IndexJobHint, error) {
	r0, r1 := m.InferedIndexConfigurationHintsFunc.nextHook()(v0, v1, v2)
	m.InferedIndexConfigurationHintsFunc.appendCall(ResolverInferedIndexConfigurationHintsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// InferedIndexConfigurationHints method of the parent MockResolver instance
// is invoked and the hook queue is empty.
func (f *ResolverInferedIndexConfigurationHintsFunc) SetDefaultHook(hook func(context.Context, int, string) ([]config.IndexJobHint, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InferedIndexConfigurationHints method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverInferedIndexConfigurationHintsFunc) PushHook(hook func(context.Context, int, string) ([]config.IndexJobHint, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverInferedIndexConfigurationHintsFunc) SetDefaultReturn(r0 []config.IndexJobHint, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string) ([]config.IndexJobHint, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverInferedIndexConfigurationHintsFunc) PushReturn(r0 []config.IndexJobHint, r1 error) {
	f.PushHook(func(context.Context, int, string) ([]config.IndexJobHint, error) {
		return r0, r1
	})
}

func (f *ResolverInferedIndexConfigurationHintsFunc) nextHook() func(context.Context, int, string) ([]config.IndexJobHint, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverInferedIndexConfigurationHintsFunc) appendCall(r0 ResolverInferedIndexConfigurationHintsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverInferedIndexConfigurationHintsFuncCall objects describing the
// invocations of this function.
func (f *ResolverInferedIndexConfigurationHintsFunc) History() []ResolverInferedIndexConfigurationHintsFuncCall {
	f.mutex.Lock()
	history := make([]ResolverInferedIndexConfigurationHintsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverInferedIndexConfigurationHintsFuncCall is an object that
// describes an invocation of method InferedIndexConfigurationHints on an
// instance of MockResolver.
type ResolverInferedIndexConfigurationHintsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []config.IndexJobHint
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverInferedIndexConfigurationHintsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverInferedIndexConfigurationHintsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverQueueAutoIndexJobsForRepoFunc describes the behavior when the
// QueueAutoIndexJobsForRepo method of the parent MockResolver instance is
// invoked.
type ResolverQueueAutoIndexJobsForRepoFunc struct {
	defaultHook func(context.Context, int, string, string) ([]shared.Index, error)
	hooks       []func(context.Context, int, string, string) ([]shared.Index, error)
	history     []ResolverQueueAutoIndexJobsForRepoFuncCall
	mutex       sync.Mutex
}

// QueueAutoIndexJobsForRepo delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockResolver) QueueAutoIndexJobsForRepo(v0 context.Context, v1 int, v2 string, v3 string) ([]shared.Index, error) {
	r0, r1 := m.QueueAutoIndexJobsForRepoFunc.nextHook()(v0, v1, v2, v3)
	m.QueueAutoIndexJobsForRepoFunc.appendCall(ResolverQueueAutoIndexJobsForRepoFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// QueueAutoIndexJobsForRepo method of the parent MockResolver instance is
// invoked and the hook queue is empty.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]shared.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueAutoIndexJobsForRepo method of the parent MockResolver instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) PushHook(hook func(context.Context, int, string, string) ([]shared.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) SetDefaultReturn(r0 []shared.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) ([]shared.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) PushReturn(r0 []shared.Index, r1 error) {
	f.PushHook(func(context.Context, int, string, string) ([]shared.Index, error) {
		return r0, r1
	})
}

func (f *ResolverQueueAutoIndexJobsForRepoFunc) nextHook() func(context.Context, int, string, string) ([]shared.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverQueueAutoIndexJobsForRepoFunc) appendCall(r0 ResolverQueueAutoIndexJobsForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ResolverQueueAutoIndexJobsForRepoFuncCall
// objects describing the invocations of this function.
func (f *ResolverQueueAutoIndexJobsForRepoFunc) History() []ResolverQueueAutoIndexJobsForRepoFuncCall {
	f.mutex.Lock()
	history := make([]ResolverQueueAutoIndexJobsForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverQueueAutoIndexJobsForRepoFuncCall is an object that describes an
// invocation of method QueueAutoIndexJobsForRepo on an instance of
// MockResolver.
type ResolverQueueAutoIndexJobsForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverQueueAutoIndexJobsForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverQueueAutoIndexJobsForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ResolverUpdateIndexConfigurationByRepositoryIDFunc describes the behavior
// when the UpdateIndexConfigurationByRepositoryID method of the parent
// MockResolver instance is invoked.
type ResolverUpdateIndexConfigurationByRepositoryIDFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []ResolverUpdateIndexConfigurationByRepositoryIDFuncCall
	mutex       sync.Mutex
}

// UpdateIndexConfigurationByRepositoryID delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockResolver) UpdateIndexConfigurationByRepositoryID(v0 context.Context, v1 int, v2 string) error {
	r0 := m.UpdateIndexConfigurationByRepositoryIDFunc.nextHook()(v0, v1, v2)
	m.UpdateIndexConfigurationByRepositoryIDFunc.appendCall(ResolverUpdateIndexConfigurationByRepositoryIDFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateIndexConfigurationByRepositoryID method of the parent MockResolver
// instance is invoked and the hook queue is empty.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateIndexConfigurationByRepositoryID method of the parent MockResolver
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) appendCall(r0 ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ResolverUpdateIndexConfigurationByRepositoryIDFuncCall objects describing
// the invocations of this function.
func (f *ResolverUpdateIndexConfigurationByRepositoryIDFunc) History() []ResolverUpdateIndexConfigurationByRepositoryIDFuncCall {
	f.mutex.Lock()
	history := make([]ResolverUpdateIndexConfigurationByRepositoryIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ResolverUpdateIndexConfigurationByRepositoryIDFuncCall is an object that
// describes an invocation of method UpdateIndexConfigurationByRepositoryID
// on an instance of MockResolver.
type ResolverUpdateIndexConfigurationByRepositoryIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ResolverUpdateIndexConfigurationByRepositoryIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
