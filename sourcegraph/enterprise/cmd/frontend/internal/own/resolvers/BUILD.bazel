load("//dev:go_defs.bzl", "go_test")
load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "resolvers",
    srcs = [
        "codeowners_resolvers.go",
        "resolvers.go",
    ],
    importpath = "github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/own/resolvers",
    visibility = ["//enterprise/cmd/frontend:__subpackages__"],
    deps = [
        "//cmd/frontend/envvar",
        "//cmd/frontend/graphqlbackend",
        "//cmd/frontend/graphqlbackend/graphqlutil",
        "//enterprise/internal/database",
        "//enterprise/internal/own",
        "//enterprise/internal/own/codeowners",
        "//enterprise/internal/own/codeowners/v1:codeowners",
        "//enterprise/internal/own/types",
        "//internal/actor",
        "//internal/api",
        "//internal/auth",
        "//internal/database",
        "//internal/deviceid",
        "//internal/errcode",
        "//internal/featureflag",
        "//internal/gitserver",
        "//internal/gqlutil",
        "//internal/rbac",
        "//internal/types",
        "//internal/usagestats",
        "//lib/errors",
        "@com_github_graph_gophers_graphql_go//:graphql-go",
        "@com_github_graph_gophers_graphql_go//relay",
        "@com_github_sourcegraph_log//:log",
    ],
)

go_test(
    name = "resolvers_test",
    timeout = "short",
    srcs = [
        "codeowners_resolvers_test.go",
        "resolvers_test.go",
    ],
    embed = [":resolvers"],
    tags = [
        # Test requires localhost database
        "requires-network",
    ],
    deps = [
        "//cmd/frontend/backend",
        "//cmd/frontend/envvar",
        "//cmd/frontend/graphqlbackend",
        "//enterprise/internal/database",
        "//enterprise/internal/own",
        "//enterprise/internal/own/codeowners",
        "//enterprise/internal/own/codeowners/v1:codeowners",
        "//enterprise/internal/own/types",
        "//internal/actor",
        "//internal/api",
        "//internal/auth",
        "//internal/authz",
        "//internal/database",
        "//internal/database/dbtest",
        "//internal/database/fakedb",
        "//internal/featureflag",
        "//internal/gitserver",
        "//internal/rbac/types",
        "//internal/types",
        "//lib/errors",
        "@com_github_google_go_cmp//cmp",
        "@com_github_graph_gophers_graphql_go//errors",
        "@com_github_hexops_autogold_v2//:autogold",
        "@com_github_sourcegraph_log//logtest",
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//require",
    ],
)
