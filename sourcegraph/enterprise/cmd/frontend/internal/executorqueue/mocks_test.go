// Code generated by go-mockgen 1.3.2; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package executorqueue

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
)

// MockGitserverClient is a mock implementation of the GitserverClient
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/executorqueue)
// used for unit testing.
type MockGitserverClient struct {
	// AddrForRepoFunc is an instance of a mock function object controlling
	// the behavior of the method AddrForRepo.
	AddrForRepoFunc *GitserverClientAddrForRepoFunc
}

// NewMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		AddrForRepoFunc: &GitserverClientAddrForRepoFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 string, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitserverClient creates a new mock of the GitserverClient
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGitserverClient() *MockGitserverClient {
	return &MockGitserverClient{
		AddrForRepoFunc: &GitserverClientAddrForRepoFunc{
			defaultHook: func(context.Context, api.RepoName) (string, error) {
				panic("unexpected invocation of MockGitserverClient.AddrForRepo")
			},
		},
	}
}

// NewMockGitserverClientFrom creates a new mock of the MockGitserverClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGitserverClientFrom(i GitserverClient) *MockGitserverClient {
	return &MockGitserverClient{
		AddrForRepoFunc: &GitserverClientAddrForRepoFunc{
			defaultHook: i.AddrForRepo,
		},
	}
}

// GitserverClientAddrForRepoFunc describes the behavior when the
// AddrForRepo method of the parent MockGitserverClient instance is invoked.
type GitserverClientAddrForRepoFunc struct {
	defaultHook func(context.Context, api.RepoName) (string, error)
	hooks       []func(context.Context, api.RepoName) (string, error)
	history     []GitserverClientAddrForRepoFuncCall
	mutex       sync.Mutex
}

// AddrForRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverClient) AddrForRepo(v0 context.Context, v1 api.RepoName) (string, error) {
	r0, r1 := m.AddrForRepoFunc.nextHook()(v0, v1)
	m.AddrForRepoFunc.appendCall(GitserverClientAddrForRepoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddrForRepo method
// of the parent MockGitserverClient instance is invoked and the hook queue
// is empty.
func (f *GitserverClientAddrForRepoFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddrForRepo method of the parent MockGitserverClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverClientAddrForRepoFunc) PushHook(hook func(context.Context, api.RepoName) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverClientAddrForRepoFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverClientAddrForRepoFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (string, error) {
		return r0, r1
	})
}

func (f *GitserverClientAddrForRepoFunc) nextHook() func(context.Context, api.RepoName) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverClientAddrForRepoFunc) appendCall(r0 GitserverClientAddrForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverClientAddrForRepoFuncCall objects
// describing the invocations of this function.
func (f *GitserverClientAddrForRepoFunc) History() []GitserverClientAddrForRepoFuncCall {
	f.mutex.Lock()
	history := make([]GitserverClientAddrForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverClientAddrForRepoFuncCall is an object that describes an
// invocation of method AddrForRepo on an instance of MockGitserverClient.
type GitserverClientAddrForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverClientAddrForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverClientAddrForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
