// Code generated by go-mockgen 1.3.1; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package dbmocks

import (
	"context"
	"sync"

	stores "github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/registry/stores"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockExtensionStore is a mock implementation of the ExtensionStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/registry/stores)
// used for unit testing.
type MockExtensionStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *ExtensionStoreCountFunc
	// CountPublishersFunc is an instance of a mock function object
	// controlling the behavior of the method CountPublishers.
	CountPublishersFunc *ExtensionStoreCountPublishersFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *ExtensionStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *ExtensionStoreDeleteFunc
	// GetByExtensionIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetByExtensionID.
	GetByExtensionIDFunc *ExtensionStoreGetByExtensionIDFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *ExtensionStoreGetByIDFunc
	// GetByUUIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUUID.
	GetByUUIDFunc *ExtensionStoreGetByUUIDFunc
	// GetFeaturedExtensionsFunc is an instance of a mock function object
	// controlling the behavior of the method GetFeaturedExtensions.
	GetFeaturedExtensionsFunc *ExtensionStoreGetFeaturedExtensionsFunc
	// GetPublisherFunc is an instance of a mock function object controlling
	// the behavior of the method GetPublisher.
	GetPublisherFunc *ExtensionStoreGetPublisherFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ExtensionStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *ExtensionStoreListFunc
	// ListPublishersFunc is an instance of a mock function object
	// controlling the behavior of the method ListPublishers.
	ListPublishersFunc *ExtensionStoreListPublishersFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *ExtensionStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *ExtensionStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ExtensionStoreWithFunc
}

// NewMockExtensionStore creates a new mock of the ExtensionStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockExtensionStore() *MockExtensionStore {
	return &MockExtensionStore{
		CountFunc: &ExtensionStoreCountFunc{
			defaultHook: func(context.Context, stores.ExtensionsListOptions) (r0 int, r1 error) {
				return
			},
		},
		CountPublishersFunc: &ExtensionStoreCountPublishersFunc{
			defaultHook: func(context.Context, stores.PublishersListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &ExtensionStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32, string) (r0 int32, r1 error) {
				return
			},
		},
		DeleteFunc: &ExtensionStoreDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		GetByExtensionIDFunc: &ExtensionStoreGetByExtensionIDFunc{
			defaultHook: func(context.Context, string) (r0 *stores.Extension, r1 error) {
				return
			},
		},
		GetByIDFunc: &ExtensionStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *stores.Extension, r1 error) {
				return
			},
		},
		GetByUUIDFunc: &ExtensionStoreGetByUUIDFunc{
			defaultHook: func(context.Context, string) (r0 *stores.Extension, r1 error) {
				return
			},
		},
		GetFeaturedExtensionsFunc: &ExtensionStoreGetFeaturedExtensionsFunc{
			defaultHook: func(context.Context) (r0 []*stores.Extension, r1 error) {
				return
			},
		},
		GetPublisherFunc: &ExtensionStoreGetPublisherFunc{
			defaultHook: func(context.Context, string) (r0 *stores.Publisher, r1 error) {
				return
			},
		},
		HandleFunc: &ExtensionStoreHandleFunc{
			defaultHook: func() (r0 *basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &ExtensionStoreListFunc{
			defaultHook: func(context.Context, stores.ExtensionsListOptions) (r0 []*stores.Extension, r1 error) {
				return
			},
		},
		ListPublishersFunc: &ExtensionStoreListPublishersFunc{
			defaultHook: func(context.Context, stores.PublishersListOptions) (r0 []*stores.Publisher, r1 error) {
				return
			},
		},
		TransactFunc: &ExtensionStoreTransactFunc{
			defaultHook: func(context.Context) (r0 stores.ExtensionStore, r1 error) {
				return
			},
		},
		UpdateFunc: &ExtensionStoreUpdateFunc{
			defaultHook: func(context.Context, int32, *string) (r0 error) {
				return
			},
		},
		WithFunc: &ExtensionStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 stores.ExtensionStore) {
				return
			},
		},
	}
}

// NewStrictMockExtensionStore creates a new mock of the ExtensionStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockExtensionStore() *MockExtensionStore {
	return &MockExtensionStore{
		CountFunc: &ExtensionStoreCountFunc{
			defaultHook: func(context.Context, stores.ExtensionsListOptions) (int, error) {
				panic("unexpected invocation of MockExtensionStore.Count")
			},
		},
		CountPublishersFunc: &ExtensionStoreCountPublishersFunc{
			defaultHook: func(context.Context, stores.PublishersListOptions) (int, error) {
				panic("unexpected invocation of MockExtensionStore.CountPublishers")
			},
		},
		CreateFunc: &ExtensionStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32, string) (int32, error) {
				panic("unexpected invocation of MockExtensionStore.Create")
			},
		},
		DeleteFunc: &ExtensionStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockExtensionStore.Delete")
			},
		},
		GetByExtensionIDFunc: &ExtensionStoreGetByExtensionIDFunc{
			defaultHook: func(context.Context, string) (*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionStore.GetByExtensionID")
			},
		},
		GetByIDFunc: &ExtensionStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionStore.GetByID")
			},
		},
		GetByUUIDFunc: &ExtensionStoreGetByUUIDFunc{
			defaultHook: func(context.Context, string) (*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionStore.GetByUUID")
			},
		},
		GetFeaturedExtensionsFunc: &ExtensionStoreGetFeaturedExtensionsFunc{
			defaultHook: func(context.Context) ([]*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionStore.GetFeaturedExtensions")
			},
		},
		GetPublisherFunc: &ExtensionStoreGetPublisherFunc{
			defaultHook: func(context.Context, string) (*stores.Publisher, error) {
				panic("unexpected invocation of MockExtensionStore.GetPublisher")
			},
		},
		HandleFunc: &ExtensionStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockExtensionStore.Handle")
			},
		},
		ListFunc: &ExtensionStoreListFunc{
			defaultHook: func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionStore.List")
			},
		},
		ListPublishersFunc: &ExtensionStoreListPublishersFunc{
			defaultHook: func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error) {
				panic("unexpected invocation of MockExtensionStore.ListPublishers")
			},
		},
		TransactFunc: &ExtensionStoreTransactFunc{
			defaultHook: func(context.Context) (stores.ExtensionStore, error) {
				panic("unexpected invocation of MockExtensionStore.Transact")
			},
		},
		UpdateFunc: &ExtensionStoreUpdateFunc{
			defaultHook: func(context.Context, int32, *string) error {
				panic("unexpected invocation of MockExtensionStore.Update")
			},
		},
		WithFunc: &ExtensionStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) stores.ExtensionStore {
				panic("unexpected invocation of MockExtensionStore.With")
			},
		},
	}
}

// NewMockExtensionStoreFrom creates a new mock of the MockExtensionStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockExtensionStoreFrom(i stores.ExtensionStore) *MockExtensionStore {
	return &MockExtensionStore{
		CountFunc: &ExtensionStoreCountFunc{
			defaultHook: i.Count,
		},
		CountPublishersFunc: &ExtensionStoreCountPublishersFunc{
			defaultHook: i.CountPublishers,
		},
		CreateFunc: &ExtensionStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &ExtensionStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByExtensionIDFunc: &ExtensionStoreGetByExtensionIDFunc{
			defaultHook: i.GetByExtensionID,
		},
		GetByIDFunc: &ExtensionStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByUUIDFunc: &ExtensionStoreGetByUUIDFunc{
			defaultHook: i.GetByUUID,
		},
		GetFeaturedExtensionsFunc: &ExtensionStoreGetFeaturedExtensionsFunc{
			defaultHook: i.GetFeaturedExtensions,
		},
		GetPublisherFunc: &ExtensionStoreGetPublisherFunc{
			defaultHook: i.GetPublisher,
		},
		HandleFunc: &ExtensionStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &ExtensionStoreListFunc{
			defaultHook: i.List,
		},
		ListPublishersFunc: &ExtensionStoreListPublishersFunc{
			defaultHook: i.ListPublishers,
		},
		TransactFunc: &ExtensionStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &ExtensionStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &ExtensionStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// ExtensionStoreCountFunc describes the behavior when the Count method of
// the parent MockExtensionStore instance is invoked.
type ExtensionStoreCountFunc struct {
	defaultHook func(context.Context, stores.ExtensionsListOptions) (int, error)
	hooks       []func(context.Context, stores.ExtensionsListOptions) (int, error)
	history     []ExtensionStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) Count(v0 context.Context, v1 stores.ExtensionsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(ExtensionStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreCountFunc) SetDefaultHook(hook func(context.Context, stores.ExtensionsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockExtensionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionStoreCountFunc) PushHook(hook func(context.Context, stores.ExtensionsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, stores.ExtensionsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, stores.ExtensionsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreCountFunc) nextHook() func(context.Context, stores.ExtensionsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreCountFunc) appendCall(r0 ExtensionStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreCountFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreCountFunc) History() []ExtensionStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockExtensionStore.
type ExtensionStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 stores.ExtensionsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreCountPublishersFunc describes the behavior when the
// CountPublishers method of the parent MockExtensionStore instance is
// invoked.
type ExtensionStoreCountPublishersFunc struct {
	defaultHook func(context.Context, stores.PublishersListOptions) (int, error)
	hooks       []func(context.Context, stores.PublishersListOptions) (int, error)
	history     []ExtensionStoreCountPublishersFuncCall
	mutex       sync.Mutex
}

// CountPublishers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExtensionStore) CountPublishers(v0 context.Context, v1 stores.PublishersListOptions) (int, error) {
	r0, r1 := m.CountPublishersFunc.nextHook()(v0, v1)
	m.CountPublishersFunc.appendCall(ExtensionStoreCountPublishersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountPublishers
// method of the parent MockExtensionStore instance is invoked and the hook
// queue is empty.
func (f *ExtensionStoreCountPublishersFunc) SetDefaultHook(hook func(context.Context, stores.PublishersListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountPublishers method of the parent MockExtensionStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExtensionStoreCountPublishersFunc) PushHook(hook func(context.Context, stores.PublishersListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreCountPublishersFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, stores.PublishersListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreCountPublishersFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, stores.PublishersListOptions) (int, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreCountPublishersFunc) nextHook() func(context.Context, stores.PublishersListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreCountPublishersFunc) appendCall(r0 ExtensionStoreCountPublishersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreCountPublishersFuncCall
// objects describing the invocations of this function.
func (f *ExtensionStoreCountPublishersFunc) History() []ExtensionStoreCountPublishersFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreCountPublishersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreCountPublishersFuncCall is an object that describes an
// invocation of method CountPublishers on an instance of
// MockExtensionStore.
type ExtensionStoreCountPublishersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 stores.PublishersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreCountPublishersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreCountPublishersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreCreateFunc describes the behavior when the Create method of
// the parent MockExtensionStore instance is invoked.
type ExtensionStoreCreateFunc struct {
	defaultHook func(context.Context, int32, int32, string) (int32, error)
	hooks       []func(context.Context, int32, int32, string) (int32, error)
	history     []ExtensionStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) Create(v0 context.Context, v1 int32, v2 int32, v3 string) (int32, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(ExtensionStoreCreateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, int32, string) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockExtensionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionStoreCreateFunc) PushHook(hook func(context.Context, int32, int32, string) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreCreateFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32, string) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreCreateFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int32, int32, string) (int32, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreCreateFunc) nextHook() func(context.Context, int32, int32, string) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreCreateFunc) appendCall(r0 ExtensionStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreCreateFunc) History() []ExtensionStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockExtensionStore.
type ExtensionStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreDeleteFunc describes the behavior when the Delete method of
// the parent MockExtensionStore instance is invoked.
type ExtensionStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []ExtensionStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(ExtensionStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockExtensionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *ExtensionStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreDeleteFunc) appendCall(r0 ExtensionStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreDeleteFunc) History() []ExtensionStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockExtensionStore.
type ExtensionStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExtensionStoreGetByExtensionIDFunc describes the behavior when the
// GetByExtensionID method of the parent MockExtensionStore instance is
// invoked.
type ExtensionStoreGetByExtensionIDFunc struct {
	defaultHook func(context.Context, string) (*stores.Extension, error)
	hooks       []func(context.Context, string) (*stores.Extension, error)
	history     []ExtensionStoreGetByExtensionIDFuncCall
	mutex       sync.Mutex
}

// GetByExtensionID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExtensionStore) GetByExtensionID(v0 context.Context, v1 string) (*stores.Extension, error) {
	r0, r1 := m.GetByExtensionIDFunc.nextHook()(v0, v1)
	m.GetByExtensionIDFunc.appendCall(ExtensionStoreGetByExtensionIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByExtensionID
// method of the parent MockExtensionStore instance is invoked and the hook
// queue is empty.
func (f *ExtensionStoreGetByExtensionIDFunc) SetDefaultHook(hook func(context.Context, string) (*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByExtensionID method of the parent MockExtensionStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExtensionStoreGetByExtensionIDFunc) PushHook(hook func(context.Context, string) (*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreGetByExtensionIDFunc) SetDefaultReturn(r0 *stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreGetByExtensionIDFunc) PushReturn(r0 *stores.Extension, r1 error) {
	f.PushHook(func(context.Context, string) (*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreGetByExtensionIDFunc) nextHook() func(context.Context, string) (*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreGetByExtensionIDFunc) appendCall(r0 ExtensionStoreGetByExtensionIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreGetByExtensionIDFuncCall
// objects describing the invocations of this function.
func (f *ExtensionStoreGetByExtensionIDFunc) History() []ExtensionStoreGetByExtensionIDFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreGetByExtensionIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreGetByExtensionIDFuncCall is an object that describes an
// invocation of method GetByExtensionID on an instance of
// MockExtensionStore.
type ExtensionStoreGetByExtensionIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreGetByExtensionIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreGetByExtensionIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockExtensionStore instance is invoked.
type ExtensionStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*stores.Extension, error)
	hooks       []func(context.Context, int32) (*stores.Extension, error)
	history     []ExtensionStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) GetByID(v0 context.Context, v1 int32) (*stores.Extension, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(ExtensionStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockExtensionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreGetByIDFunc) SetDefaultReturn(r0 *stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreGetByIDFunc) PushReturn(r0 *stores.Extension, r1 error) {
	f.PushHook(func(context.Context, int32) (*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreGetByIDFunc) nextHook() func(context.Context, int32) (*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreGetByIDFunc) appendCall(r0 ExtensionStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreGetByIDFunc) History() []ExtensionStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockExtensionStore.
type ExtensionStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreGetByUUIDFunc describes the behavior when the GetByUUID
// method of the parent MockExtensionStore instance is invoked.
type ExtensionStoreGetByUUIDFunc struct {
	defaultHook func(context.Context, string) (*stores.Extension, error)
	hooks       []func(context.Context, string) (*stores.Extension, error)
	history     []ExtensionStoreGetByUUIDFuncCall
	mutex       sync.Mutex
}

// GetByUUID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) GetByUUID(v0 context.Context, v1 string) (*stores.Extension, error) {
	r0, r1 := m.GetByUUIDFunc.nextHook()(v0, v1)
	m.GetByUUIDFunc.appendCall(ExtensionStoreGetByUUIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUUID method of
// the parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreGetByUUIDFunc) SetDefaultHook(hook func(context.Context, string) (*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUUID method of the parent MockExtensionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExtensionStoreGetByUUIDFunc) PushHook(hook func(context.Context, string) (*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreGetByUUIDFunc) SetDefaultReturn(r0 *stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreGetByUUIDFunc) PushReturn(r0 *stores.Extension, r1 error) {
	f.PushHook(func(context.Context, string) (*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreGetByUUIDFunc) nextHook() func(context.Context, string) (*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreGetByUUIDFunc) appendCall(r0 ExtensionStoreGetByUUIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreGetByUUIDFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreGetByUUIDFunc) History() []ExtensionStoreGetByUUIDFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreGetByUUIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreGetByUUIDFuncCall is an object that describes an invocation
// of method GetByUUID on an instance of MockExtensionStore.
type ExtensionStoreGetByUUIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreGetByUUIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreGetByUUIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreGetFeaturedExtensionsFunc describes the behavior when the
// GetFeaturedExtensions method of the parent MockExtensionStore instance is
// invoked.
type ExtensionStoreGetFeaturedExtensionsFunc struct {
	defaultHook func(context.Context) ([]*stores.Extension, error)
	hooks       []func(context.Context) ([]*stores.Extension, error)
	history     []ExtensionStoreGetFeaturedExtensionsFuncCall
	mutex       sync.Mutex
}

// GetFeaturedExtensions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockExtensionStore) GetFeaturedExtensions(v0 context.Context) ([]*stores.Extension, error) {
	r0, r1 := m.GetFeaturedExtensionsFunc.nextHook()(v0)
	m.GetFeaturedExtensionsFunc.appendCall(ExtensionStoreGetFeaturedExtensionsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetFeaturedExtensions method of the parent MockExtensionStore instance is
// invoked and the hook queue is empty.
func (f *ExtensionStoreGetFeaturedExtensionsFunc) SetDefaultHook(hook func(context.Context) ([]*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFeaturedExtensions method of the parent MockExtensionStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExtensionStoreGetFeaturedExtensionsFunc) PushHook(hook func(context.Context) ([]*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreGetFeaturedExtensionsFunc) SetDefaultReturn(r0 []*stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreGetFeaturedExtensionsFunc) PushReturn(r0 []*stores.Extension, r1 error) {
	f.PushHook(func(context.Context) ([]*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreGetFeaturedExtensionsFunc) nextHook() func(context.Context) ([]*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreGetFeaturedExtensionsFunc) appendCall(r0 ExtensionStoreGetFeaturedExtensionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreGetFeaturedExtensionsFuncCall
// objects describing the invocations of this function.
func (f *ExtensionStoreGetFeaturedExtensionsFunc) History() []ExtensionStoreGetFeaturedExtensionsFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreGetFeaturedExtensionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreGetFeaturedExtensionsFuncCall is an object that describes
// an invocation of method GetFeaturedExtensions on an instance of
// MockExtensionStore.
type ExtensionStoreGetFeaturedExtensionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreGetFeaturedExtensionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreGetFeaturedExtensionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreGetPublisherFunc describes the behavior when the
// GetPublisher method of the parent MockExtensionStore instance is invoked.
type ExtensionStoreGetPublisherFunc struct {
	defaultHook func(context.Context, string) (*stores.Publisher, error)
	hooks       []func(context.Context, string) (*stores.Publisher, error)
	history     []ExtensionStoreGetPublisherFuncCall
	mutex       sync.Mutex
}

// GetPublisher delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExtensionStore) GetPublisher(v0 context.Context, v1 string) (*stores.Publisher, error) {
	r0, r1 := m.GetPublisherFunc.nextHook()(v0, v1)
	m.GetPublisherFunc.appendCall(ExtensionStoreGetPublisherFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPublisher method
// of the parent MockExtensionStore instance is invoked and the hook queue
// is empty.
func (f *ExtensionStoreGetPublisherFunc) SetDefaultHook(hook func(context.Context, string) (*stores.Publisher, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPublisher method of the parent MockExtensionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExtensionStoreGetPublisherFunc) PushHook(hook func(context.Context, string) (*stores.Publisher, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreGetPublisherFunc) SetDefaultReturn(r0 *stores.Publisher, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*stores.Publisher, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreGetPublisherFunc) PushReturn(r0 *stores.Publisher, r1 error) {
	f.PushHook(func(context.Context, string) (*stores.Publisher, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreGetPublisherFunc) nextHook() func(context.Context, string) (*stores.Publisher, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreGetPublisherFunc) appendCall(r0 ExtensionStoreGetPublisherFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreGetPublisherFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreGetPublisherFunc) History() []ExtensionStoreGetPublisherFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreGetPublisherFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreGetPublisherFuncCall is an object that describes an
// invocation of method GetPublisher on an instance of MockExtensionStore.
type ExtensionStoreGetPublisherFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Publisher
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreGetPublisherFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreGetPublisherFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreHandleFunc describes the behavior when the Handle method of
// the parent MockExtensionStore instance is invoked.
type ExtensionStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []ExtensionStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ExtensionStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockExtensionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *ExtensionStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreHandleFunc) appendCall(r0 ExtensionStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreHandleFunc) History() []ExtensionStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockExtensionStore.
type ExtensionStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExtensionStoreListFunc describes the behavior when the List method of the
// parent MockExtensionStore instance is invoked.
type ExtensionStoreListFunc struct {
	defaultHook func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error)
	hooks       []func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error)
	history     []ExtensionStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) List(v0 context.Context, v1 stores.ExtensionsListOptions) ([]*stores.Extension, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(ExtensionStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreListFunc) SetDefaultHook(hook func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockExtensionStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionStoreListFunc) PushHook(hook func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreListFunc) SetDefaultReturn(r0 []*stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreListFunc) PushReturn(r0 []*stores.Extension, r1 error) {
	f.PushHook(func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreListFunc) nextHook() func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreListFunc) appendCall(r0 ExtensionStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreListFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreListFunc) History() []ExtensionStoreListFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockExtensionStore.
type ExtensionStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 stores.ExtensionsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreListPublishersFunc describes the behavior when the
// ListPublishers method of the parent MockExtensionStore instance is
// invoked.
type ExtensionStoreListPublishersFunc struct {
	defaultHook func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error)
	hooks       []func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error)
	history     []ExtensionStoreListPublishersFuncCall
	mutex       sync.Mutex
}

// ListPublishers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExtensionStore) ListPublishers(v0 context.Context, v1 stores.PublishersListOptions) ([]*stores.Publisher, error) {
	r0, r1 := m.ListPublishersFunc.nextHook()(v0, v1)
	m.ListPublishersFunc.appendCall(ExtensionStoreListPublishersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListPublishers
// method of the parent MockExtensionStore instance is invoked and the hook
// queue is empty.
func (f *ExtensionStoreListPublishersFunc) SetDefaultHook(hook func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListPublishers method of the parent MockExtensionStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExtensionStoreListPublishersFunc) PushHook(hook func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreListPublishersFunc) SetDefaultReturn(r0 []*stores.Publisher, r1 error) {
	f.SetDefaultHook(func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreListPublishersFunc) PushReturn(r0 []*stores.Publisher, r1 error) {
	f.PushHook(func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreListPublishersFunc) nextHook() func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreListPublishersFunc) appendCall(r0 ExtensionStoreListPublishersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreListPublishersFuncCall
// objects describing the invocations of this function.
func (f *ExtensionStoreListPublishersFunc) History() []ExtensionStoreListPublishersFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreListPublishersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreListPublishersFuncCall is an object that describes an
// invocation of method ListPublishers on an instance of MockExtensionStore.
type ExtensionStoreListPublishersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 stores.PublishersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*stores.Publisher
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreListPublishersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreListPublishersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreTransactFunc describes the behavior when the Transact
// method of the parent MockExtensionStore instance is invoked.
type ExtensionStoreTransactFunc struct {
	defaultHook func(context.Context) (stores.ExtensionStore, error)
	hooks       []func(context.Context) (stores.ExtensionStore, error)
	history     []ExtensionStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) Transact(v0 context.Context) (stores.ExtensionStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(ExtensionStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreTransactFunc) SetDefaultHook(hook func(context.Context) (stores.ExtensionStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockExtensionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExtensionStoreTransactFunc) PushHook(hook func(context.Context) (stores.ExtensionStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreTransactFunc) SetDefaultReturn(r0 stores.ExtensionStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (stores.ExtensionStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreTransactFunc) PushReturn(r0 stores.ExtensionStore, r1 error) {
	f.PushHook(func(context.Context) (stores.ExtensionStore, error) {
		return r0, r1
	})
}

func (f *ExtensionStoreTransactFunc) nextHook() func(context.Context) (stores.ExtensionStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreTransactFunc) appendCall(r0 ExtensionStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreTransactFunc) History() []ExtensionStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockExtensionStore.
type ExtensionStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 stores.ExtensionStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionStoreUpdateFunc describes the behavior when the Update method of
// the parent MockExtensionStore instance is invoked.
type ExtensionStoreUpdateFunc struct {
	defaultHook func(context.Context, int32, *string) error
	hooks       []func(context.Context, int32, *string) error
	history     []ExtensionStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) Update(v0 context.Context, v1 int32, v2 *string) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2)
	m.UpdateFunc.appendCall(ExtensionStoreUpdateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreUpdateFunc) SetDefaultHook(hook func(context.Context, int32, *string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockExtensionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionStoreUpdateFunc) PushHook(hook func(context.Context, int32, *string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, *string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, *string) error {
		return r0
	})
}

func (f *ExtensionStoreUpdateFunc) nextHook() func(context.Context, int32, *string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreUpdateFunc) appendCall(r0 ExtensionStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreUpdateFunc) History() []ExtensionStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockExtensionStore.
type ExtensionStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExtensionStoreWithFunc describes the behavior when the With method of the
// parent MockExtensionStore instance is invoked.
type ExtensionStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) stores.ExtensionStore
	hooks       []func(basestore.ShareableStore) stores.ExtensionStore
	history     []ExtensionStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionStore) With(v0 basestore.ShareableStore) stores.ExtensionStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ExtensionStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockExtensionStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) stores.ExtensionStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockExtensionStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionStoreWithFunc) PushHook(hook func(basestore.ShareableStore) stores.ExtensionStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExtensionStoreWithFunc) SetDefaultReturn(r0 stores.ExtensionStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) stores.ExtensionStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExtensionStoreWithFunc) PushReturn(r0 stores.ExtensionStore) {
	f.PushHook(func(basestore.ShareableStore) stores.ExtensionStore {
		return r0
	})
}

func (f *ExtensionStoreWithFunc) nextHook() func(basestore.ShareableStore) stores.ExtensionStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionStoreWithFunc) appendCall(r0 ExtensionStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionStoreWithFuncCall objects
// describing the invocations of this function.
func (f *ExtensionStoreWithFunc) History() []ExtensionStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockExtensionStore.
type ExtensionStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 stores.ExtensionStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockReleaseStore is a mock implementation of the ReleaseStore interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/registry/stores)
// used for unit testing.
type MockReleaseStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *ReleaseStoreCreateFunc
	// GetArtifactsFunc is an instance of a mock function object controlling
	// the behavior of the method GetArtifacts.
	GetArtifactsFunc *ReleaseStoreGetArtifactsFunc
	// GetLatestFunc is an instance of a mock function object controlling
	// the behavior of the method GetLatest.
	GetLatestFunc *ReleaseStoreGetLatestFunc
	// GetLatestBatchFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestBatch.
	GetLatestBatchFunc *ReleaseStoreGetLatestBatchFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ReleaseStoreHandleFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *ReleaseStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ReleaseStoreWithFunc
}

// NewMockReleaseStore creates a new mock of the ReleaseStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockReleaseStore() *MockReleaseStore {
	return &MockReleaseStore{
		CreateFunc: &ReleaseStoreCreateFunc{
			defaultHook: func(context.Context, *stores.Release) (r0 int64, r1 error) {
				return
			},
		},
		GetArtifactsFunc: &ReleaseStoreGetArtifactsFunc{
			defaultHook: func(context.Context, int64) (r0 []byte, r1 []byte, r2 error) {
				return
			},
		},
		GetLatestFunc: &ReleaseStoreGetLatestFunc{
			defaultHook: func(context.Context, int32, string, bool) (r0 *stores.Release, r1 error) {
				return
			},
		},
		GetLatestBatchFunc: &ReleaseStoreGetLatestBatchFunc{
			defaultHook: func(context.Context, []int32, string, bool) (r0 []*stores.Release, r1 error) {
				return
			},
		},
		HandleFunc: &ReleaseStoreHandleFunc{
			defaultHook: func() (r0 *basestore.TransactableHandle) {
				return
			},
		},
		TransactFunc: &ReleaseStoreTransactFunc{
			defaultHook: func(context.Context) (r0 stores.ReleaseStore, r1 error) {
				return
			},
		},
		WithFunc: &ReleaseStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 stores.ReleaseStore) {
				return
			},
		},
	}
}

// NewStrictMockReleaseStore creates a new mock of the ReleaseStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockReleaseStore() *MockReleaseStore {
	return &MockReleaseStore{
		CreateFunc: &ReleaseStoreCreateFunc{
			defaultHook: func(context.Context, *stores.Release) (int64, error) {
				panic("unexpected invocation of MockReleaseStore.Create")
			},
		},
		GetArtifactsFunc: &ReleaseStoreGetArtifactsFunc{
			defaultHook: func(context.Context, int64) ([]byte, []byte, error) {
				panic("unexpected invocation of MockReleaseStore.GetArtifacts")
			},
		},
		GetLatestFunc: &ReleaseStoreGetLatestFunc{
			defaultHook: func(context.Context, int32, string, bool) (*stores.Release, error) {
				panic("unexpected invocation of MockReleaseStore.GetLatest")
			},
		},
		GetLatestBatchFunc: &ReleaseStoreGetLatestBatchFunc{
			defaultHook: func(context.Context, []int32, string, bool) ([]*stores.Release, error) {
				panic("unexpected invocation of MockReleaseStore.GetLatestBatch")
			},
		},
		HandleFunc: &ReleaseStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockReleaseStore.Handle")
			},
		},
		TransactFunc: &ReleaseStoreTransactFunc{
			defaultHook: func(context.Context) (stores.ReleaseStore, error) {
				panic("unexpected invocation of MockReleaseStore.Transact")
			},
		},
		WithFunc: &ReleaseStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) stores.ReleaseStore {
				panic("unexpected invocation of MockReleaseStore.With")
			},
		},
	}
}

// NewMockReleaseStoreFrom creates a new mock of the MockReleaseStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockReleaseStoreFrom(i stores.ReleaseStore) *MockReleaseStore {
	return &MockReleaseStore{
		CreateFunc: &ReleaseStoreCreateFunc{
			defaultHook: i.Create,
		},
		GetArtifactsFunc: &ReleaseStoreGetArtifactsFunc{
			defaultHook: i.GetArtifacts,
		},
		GetLatestFunc: &ReleaseStoreGetLatestFunc{
			defaultHook: i.GetLatest,
		},
		GetLatestBatchFunc: &ReleaseStoreGetLatestBatchFunc{
			defaultHook: i.GetLatestBatch,
		},
		HandleFunc: &ReleaseStoreHandleFunc{
			defaultHook: i.Handle,
		},
		TransactFunc: &ReleaseStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &ReleaseStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// ReleaseStoreCreateFunc describes the behavior when the Create method of
// the parent MockReleaseStore instance is invoked.
type ReleaseStoreCreateFunc struct {
	defaultHook func(context.Context, *stores.Release) (int64, error)
	hooks       []func(context.Context, *stores.Release) (int64, error)
	history     []ReleaseStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleaseStore) Create(v0 context.Context, v1 *stores.Release) (int64, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(ReleaseStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockReleaseStore instance is invoked and the hook queue is empty.
func (f *ReleaseStoreCreateFunc) SetDefaultHook(hook func(context.Context, *stores.Release) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockReleaseStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReleaseStoreCreateFunc) PushHook(hook func(context.Context, *stores.Release) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReleaseStoreCreateFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, *stores.Release) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReleaseStoreCreateFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, *stores.Release) (int64, error) {
		return r0, r1
	})
}

func (f *ReleaseStoreCreateFunc) nextHook() func(context.Context, *stores.Release) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleaseStoreCreateFunc) appendCall(r0 ReleaseStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleaseStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *ReleaseStoreCreateFunc) History() []ReleaseStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]ReleaseStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleaseStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockReleaseStore.
type ReleaseStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *stores.Release
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleaseStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleaseStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReleaseStoreGetArtifactsFunc describes the behavior when the GetArtifacts
// method of the parent MockReleaseStore instance is invoked.
type ReleaseStoreGetArtifactsFunc struct {
	defaultHook func(context.Context, int64) ([]byte, []byte, error)
	hooks       []func(context.Context, int64) ([]byte, []byte, error)
	history     []ReleaseStoreGetArtifactsFuncCall
	mutex       sync.Mutex
}

// GetArtifacts delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockReleaseStore) GetArtifacts(v0 context.Context, v1 int64) ([]byte, []byte, error) {
	r0, r1, r2 := m.GetArtifactsFunc.nextHook()(v0, v1)
	m.GetArtifactsFunc.appendCall(ReleaseStoreGetArtifactsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetArtifacts method
// of the parent MockReleaseStore instance is invoked and the hook queue is
// empty.
func (f *ReleaseStoreGetArtifactsFunc) SetDefaultHook(hook func(context.Context, int64) ([]byte, []byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetArtifacts method of the parent MockReleaseStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ReleaseStoreGetArtifactsFunc) PushHook(hook func(context.Context, int64) ([]byte, []byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReleaseStoreGetArtifactsFunc) SetDefaultReturn(r0 []byte, r1 []byte, r2 error) {
	f.SetDefaultHook(func(context.Context, int64) ([]byte, []byte, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReleaseStoreGetArtifactsFunc) PushReturn(r0 []byte, r1 []byte, r2 error) {
	f.PushHook(func(context.Context, int64) ([]byte, []byte, error) {
		return r0, r1, r2
	})
}

func (f *ReleaseStoreGetArtifactsFunc) nextHook() func(context.Context, int64) ([]byte, []byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleaseStoreGetArtifactsFunc) appendCall(r0 ReleaseStoreGetArtifactsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleaseStoreGetArtifactsFuncCall objects
// describing the invocations of this function.
func (f *ReleaseStoreGetArtifactsFunc) History() []ReleaseStoreGetArtifactsFuncCall {
	f.mutex.Lock()
	history := make([]ReleaseStoreGetArtifactsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleaseStoreGetArtifactsFuncCall is an object that describes an
// invocation of method GetArtifacts on an instance of MockReleaseStore.
type ReleaseStoreGetArtifactsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []byte
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleaseStoreGetArtifactsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleaseStoreGetArtifactsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ReleaseStoreGetLatestFunc describes the behavior when the GetLatest
// method of the parent MockReleaseStore instance is invoked.
type ReleaseStoreGetLatestFunc struct {
	defaultHook func(context.Context, int32, string, bool) (*stores.Release, error)
	hooks       []func(context.Context, int32, string, bool) (*stores.Release, error)
	history     []ReleaseStoreGetLatestFuncCall
	mutex       sync.Mutex
}

// GetLatest delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleaseStore) GetLatest(v0 context.Context, v1 int32, v2 string, v3 bool) (*stores.Release, error) {
	r0, r1 := m.GetLatestFunc.nextHook()(v0, v1, v2, v3)
	m.GetLatestFunc.appendCall(ReleaseStoreGetLatestFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatest method of
// the parent MockReleaseStore instance is invoked and the hook queue is
// empty.
func (f *ReleaseStoreGetLatestFunc) SetDefaultHook(hook func(context.Context, int32, string, bool) (*stores.Release, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatest method of the parent MockReleaseStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReleaseStoreGetLatestFunc) PushHook(hook func(context.Context, int32, string, bool) (*stores.Release, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReleaseStoreGetLatestFunc) SetDefaultReturn(r0 *stores.Release, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, bool) (*stores.Release, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReleaseStoreGetLatestFunc) PushReturn(r0 *stores.Release, r1 error) {
	f.PushHook(func(context.Context, int32, string, bool) (*stores.Release, error) {
		return r0, r1
	})
}

func (f *ReleaseStoreGetLatestFunc) nextHook() func(context.Context, int32, string, bool) (*stores.Release, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleaseStoreGetLatestFunc) appendCall(r0 ReleaseStoreGetLatestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleaseStoreGetLatestFuncCall objects
// describing the invocations of this function.
func (f *ReleaseStoreGetLatestFunc) History() []ReleaseStoreGetLatestFuncCall {
	f.mutex.Lock()
	history := make([]ReleaseStoreGetLatestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleaseStoreGetLatestFuncCall is an object that describes an invocation
// of method GetLatest on an instance of MockReleaseStore.
type ReleaseStoreGetLatestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Release
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleaseStoreGetLatestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleaseStoreGetLatestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReleaseStoreGetLatestBatchFunc describes the behavior when the
// GetLatestBatch method of the parent MockReleaseStore instance is invoked.
type ReleaseStoreGetLatestBatchFunc struct {
	defaultHook func(context.Context, []int32, string, bool) ([]*stores.Release, error)
	hooks       []func(context.Context, []int32, string, bool) ([]*stores.Release, error)
	history     []ReleaseStoreGetLatestBatchFuncCall
	mutex       sync.Mutex
}

// GetLatestBatch delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockReleaseStore) GetLatestBatch(v0 context.Context, v1 []int32, v2 string, v3 bool) ([]*stores.Release, error) {
	r0, r1 := m.GetLatestBatchFunc.nextHook()(v0, v1, v2, v3)
	m.GetLatestBatchFunc.appendCall(ReleaseStoreGetLatestBatchFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatestBatch
// method of the parent MockReleaseStore instance is invoked and the hook
// queue is empty.
func (f *ReleaseStoreGetLatestBatchFunc) SetDefaultHook(hook func(context.Context, []int32, string, bool) ([]*stores.Release, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestBatch method of the parent MockReleaseStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ReleaseStoreGetLatestBatchFunc) PushHook(hook func(context.Context, []int32, string, bool) ([]*stores.Release, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReleaseStoreGetLatestBatchFunc) SetDefaultReturn(r0 []*stores.Release, r1 error) {
	f.SetDefaultHook(func(context.Context, []int32, string, bool) ([]*stores.Release, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReleaseStoreGetLatestBatchFunc) PushReturn(r0 []*stores.Release, r1 error) {
	f.PushHook(func(context.Context, []int32, string, bool) ([]*stores.Release, error) {
		return r0, r1
	})
}

func (f *ReleaseStoreGetLatestBatchFunc) nextHook() func(context.Context, []int32, string, bool) ([]*stores.Release, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleaseStoreGetLatestBatchFunc) appendCall(r0 ReleaseStoreGetLatestBatchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleaseStoreGetLatestBatchFuncCall objects
// describing the invocations of this function.
func (f *ReleaseStoreGetLatestBatchFunc) History() []ReleaseStoreGetLatestBatchFuncCall {
	f.mutex.Lock()
	history := make([]ReleaseStoreGetLatestBatchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleaseStoreGetLatestBatchFuncCall is an object that describes an
// invocation of method GetLatestBatch on an instance of MockReleaseStore.
type ReleaseStoreGetLatestBatchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*stores.Release
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleaseStoreGetLatestBatchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleaseStoreGetLatestBatchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReleaseStoreHandleFunc describes the behavior when the Handle method of
// the parent MockReleaseStore instance is invoked.
type ReleaseStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []ReleaseStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleaseStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ReleaseStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockReleaseStore instance is invoked and the hook queue is empty.
func (f *ReleaseStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockReleaseStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReleaseStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReleaseStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReleaseStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *ReleaseStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleaseStoreHandleFunc) appendCall(r0 ReleaseStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleaseStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ReleaseStoreHandleFunc) History() []ReleaseStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ReleaseStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleaseStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockReleaseStore.
type ReleaseStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleaseStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleaseStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ReleaseStoreTransactFunc describes the behavior when the Transact method
// of the parent MockReleaseStore instance is invoked.
type ReleaseStoreTransactFunc struct {
	defaultHook func(context.Context) (stores.ReleaseStore, error)
	hooks       []func(context.Context) (stores.ReleaseStore, error)
	history     []ReleaseStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleaseStore) Transact(v0 context.Context) (stores.ReleaseStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(ReleaseStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockReleaseStore instance is invoked and the hook queue is
// empty.
func (f *ReleaseStoreTransactFunc) SetDefaultHook(hook func(context.Context) (stores.ReleaseStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockReleaseStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReleaseStoreTransactFunc) PushHook(hook func(context.Context) (stores.ReleaseStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReleaseStoreTransactFunc) SetDefaultReturn(r0 stores.ReleaseStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (stores.ReleaseStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReleaseStoreTransactFunc) PushReturn(r0 stores.ReleaseStore, r1 error) {
	f.PushHook(func(context.Context) (stores.ReleaseStore, error) {
		return r0, r1
	})
}

func (f *ReleaseStoreTransactFunc) nextHook() func(context.Context) (stores.ReleaseStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleaseStoreTransactFunc) appendCall(r0 ReleaseStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleaseStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *ReleaseStoreTransactFunc) History() []ReleaseStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]ReleaseStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleaseStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockReleaseStore.
type ReleaseStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 stores.ReleaseStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleaseStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleaseStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReleaseStoreWithFunc describes the behavior when the With method of the
// parent MockReleaseStore instance is invoked.
type ReleaseStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) stores.ReleaseStore
	hooks       []func(basestore.ShareableStore) stores.ReleaseStore
	history     []ReleaseStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleaseStore) With(v0 basestore.ShareableStore) stores.ReleaseStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ReleaseStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockReleaseStore instance is invoked and the hook queue is empty.
func (f *ReleaseStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) stores.ReleaseStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockReleaseStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReleaseStoreWithFunc) PushHook(hook func(basestore.ShareableStore) stores.ReleaseStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReleaseStoreWithFunc) SetDefaultReturn(r0 stores.ReleaseStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) stores.ReleaseStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReleaseStoreWithFunc) PushReturn(r0 stores.ReleaseStore) {
	f.PushHook(func(basestore.ShareableStore) stores.ReleaseStore {
		return r0
	})
}

func (f *ReleaseStoreWithFunc) nextHook() func(basestore.ShareableStore) stores.ReleaseStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleaseStoreWithFunc) appendCall(r0 ReleaseStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleaseStoreWithFuncCall objects describing
// the invocations of this function.
func (f *ReleaseStoreWithFunc) History() []ReleaseStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ReleaseStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleaseStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockReleaseStore.
type ReleaseStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 stores.ReleaseStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleaseStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleaseStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
