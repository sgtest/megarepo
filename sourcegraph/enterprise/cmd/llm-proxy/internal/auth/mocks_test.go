// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package auth

import (
	"context"
	"sync"

	graphql "github.com/Khan/genqlient/graphql"
	httpcache "github.com/gregjones/httpcache"
)

// MockCache is a mock implementation of the Cache interface (from the
// package github.com/gregjones/httpcache) used for unit testing.
type MockCache struct {
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *CacheDeleteFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *CacheGetFunc
	// SetFunc is an instance of a mock function object controlling the
	// behavior of the method Set.
	SetFunc *CacheSetFunc
}

// NewMockCache creates a new mock of the Cache interface. All methods
// return zero values for all results, unless overwritten.
func NewMockCache() *MockCache {
	return &MockCache{
		DeleteFunc: &CacheDeleteFunc{
			defaultHook: func(string) {
				return
			},
		},
		GetFunc: &CacheGetFunc{
			defaultHook: func(string) (r0 []byte, r1 bool) {
				return
			},
		},
		SetFunc: &CacheSetFunc{
			defaultHook: func(string, []byte) {
				return
			},
		},
	}
}

// NewStrictMockCache creates a new mock of the Cache interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockCache() *MockCache {
	return &MockCache{
		DeleteFunc: &CacheDeleteFunc{
			defaultHook: func(string) {
				panic("unexpected invocation of MockCache.Delete")
			},
		},
		GetFunc: &CacheGetFunc{
			defaultHook: func(string) ([]byte, bool) {
				panic("unexpected invocation of MockCache.Get")
			},
		},
		SetFunc: &CacheSetFunc{
			defaultHook: func(string, []byte) {
				panic("unexpected invocation of MockCache.Set")
			},
		},
	}
}

// NewMockCacheFrom creates a new mock of the MockCache interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockCacheFrom(i httpcache.Cache) *MockCache {
	return &MockCache{
		DeleteFunc: &CacheDeleteFunc{
			defaultHook: i.Delete,
		},
		GetFunc: &CacheGetFunc{
			defaultHook: i.Get,
		},
		SetFunc: &CacheSetFunc{
			defaultHook: i.Set,
		},
	}
}

// CacheDeleteFunc describes the behavior when the Delete method of the
// parent MockCache instance is invoked.
type CacheDeleteFunc struct {
	defaultHook func(string)
	hooks       []func(string)
	history     []CacheDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCache) Delete(v0 string) {
	m.DeleteFunc.nextHook()(v0)
	m.DeleteFunc.appendCall(CacheDeleteFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockCache instance is invoked and the hook queue is empty.
func (f *CacheDeleteFunc) SetDefaultHook(hook func(string)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockCache instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *CacheDeleteFunc) PushHook(hook func(string)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CacheDeleteFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CacheDeleteFunc) PushReturn() {
	f.PushHook(func(string) {
		return
	})
}

func (f *CacheDeleteFunc) nextHook() func(string) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CacheDeleteFunc) appendCall(r0 CacheDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CacheDeleteFuncCall objects describing the
// invocations of this function.
func (f *CacheDeleteFunc) History() []CacheDeleteFuncCall {
	f.mutex.Lock()
	history := make([]CacheDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CacheDeleteFuncCall is an object that describes an invocation of method
// Delete on an instance of MockCache.
type CacheDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CacheDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CacheDeleteFuncCall) Results() []interface{} {
	return []interface{}{}
}

// CacheGetFunc describes the behavior when the Get method of the parent
// MockCache instance is invoked.
type CacheGetFunc struct {
	defaultHook func(string) ([]byte, bool)
	hooks       []func(string) ([]byte, bool)
	history     []CacheGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCache) Get(v0 string) ([]byte, bool) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(CacheGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockCache instance is invoked and the hook queue is empty.
func (f *CacheGetFunc) SetDefaultHook(hook func(string) ([]byte, bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockCache instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *CacheGetFunc) PushHook(hook func(string) ([]byte, bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CacheGetFunc) SetDefaultReturn(r0 []byte, r1 bool) {
	f.SetDefaultHook(func(string) ([]byte, bool) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CacheGetFunc) PushReturn(r0 []byte, r1 bool) {
	f.PushHook(func(string) ([]byte, bool) {
		return r0, r1
	})
}

func (f *CacheGetFunc) nextHook() func(string) ([]byte, bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CacheGetFunc) appendCall(r0 CacheGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CacheGetFuncCall objects describing the
// invocations of this function.
func (f *CacheGetFunc) History() []CacheGetFuncCall {
	f.mutex.Lock()
	history := make([]CacheGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CacheGetFuncCall is an object that describes an invocation of method Get
// on an instance of MockCache.
type CacheGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CacheGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CacheGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CacheSetFunc describes the behavior when the Set method of the parent
// MockCache instance is invoked.
type CacheSetFunc struct {
	defaultHook func(string, []byte)
	hooks       []func(string, []byte)
	history     []CacheSetFuncCall
	mutex       sync.Mutex
}

// Set delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCache) Set(v0 string, v1 []byte) {
	m.SetFunc.nextHook()(v0, v1)
	m.SetFunc.appendCall(CacheSetFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the Set method of the
// parent MockCache instance is invoked and the hook queue is empty.
func (f *CacheSetFunc) SetDefaultHook(hook func(string, []byte)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Set method of the parent MockCache instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *CacheSetFunc) PushHook(hook func(string, []byte)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CacheSetFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string, []byte) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CacheSetFunc) PushReturn() {
	f.PushHook(func(string, []byte) {
		return
	})
}

func (f *CacheSetFunc) nextHook() func(string, []byte) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CacheSetFunc) appendCall(r0 CacheSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CacheSetFuncCall objects describing the
// invocations of this function.
func (f *CacheSetFunc) History() []CacheSetFuncCall {
	f.mutex.Lock()
	history := make([]CacheSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CacheSetFuncCall is an object that describes an invocation of method Set
// on an instance of MockCache.
type CacheSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []byte
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CacheSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CacheSetFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockClient is a mock implementation of the Client interface (from the
// package github.com/Khan/genqlient/graphql) used for unit testing.
type MockClient struct {
	// MakeRequestFunc is an instance of a mock function object controlling
	// the behavior of the method MakeRequest.
	MakeRequestFunc *ClientMakeRequestFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		MakeRequestFunc: &ClientMakeRequestFunc{
			defaultHook: func(context.Context, *graphql.Request, *graphql.Response) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockClient creates a new mock of the Client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockClient() *MockClient {
	return &MockClient{
		MakeRequestFunc: &ClientMakeRequestFunc{
			defaultHook: func(context.Context, *graphql.Request, *graphql.Response) error {
				panic("unexpected invocation of MockClient.MakeRequest")
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i graphql.Client) *MockClient {
	return &MockClient{
		MakeRequestFunc: &ClientMakeRequestFunc{
			defaultHook: i.MakeRequest,
		},
	}
}

// ClientMakeRequestFunc describes the behavior when the MakeRequest method
// of the parent MockClient instance is invoked.
type ClientMakeRequestFunc struct {
	defaultHook func(context.Context, *graphql.Request, *graphql.Response) error
	hooks       []func(context.Context, *graphql.Request, *graphql.Response) error
	history     []ClientMakeRequestFuncCall
	mutex       sync.Mutex
}

// MakeRequest delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) MakeRequest(v0 context.Context, v1 *graphql.Request, v2 *graphql.Response) error {
	r0 := m.MakeRequestFunc.nextHook()(v0, v1, v2)
	m.MakeRequestFunc.appendCall(ClientMakeRequestFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MakeRequest method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientMakeRequestFunc) SetDefaultHook(hook func(context.Context, *graphql.Request, *graphql.Response) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MakeRequest method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientMakeRequestFunc) PushHook(hook func(context.Context, *graphql.Request, *graphql.Response) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientMakeRequestFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *graphql.Request, *graphql.Response) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientMakeRequestFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *graphql.Request, *graphql.Response) error {
		return r0
	})
}

func (f *ClientMakeRequestFunc) nextHook() func(context.Context, *graphql.Request, *graphql.Response) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientMakeRequestFunc) appendCall(r0 ClientMakeRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientMakeRequestFuncCall objects
// describing the invocations of this function.
func (f *ClientMakeRequestFunc) History() []ClientMakeRequestFuncCall {
	f.mutex.Lock()
	history := make([]ClientMakeRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientMakeRequestFuncCall is an object that describes an invocation of
// method MakeRequest on an instance of MockClient.
type ClientMakeRequestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *graphql.Request
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *graphql.Response
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientMakeRequestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientMakeRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
