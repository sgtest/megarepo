// +build ignore

package main

import (
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
)

var (
	inputFile  = flag.String("i", "", "input file")
	outputFile = flag.String("o", "", "output file")
	constName  = flag.String("name", "stringdata", "name of Go const")
	pkgName    = flag.String("pkg", "main", "Go package name")
)

func main() {
	flag.Parse()

	if *inputFile == "" || *outputFile == "" {
		flag.Usage()
		os.Exit(1)
	}

	data, err := ioutil.ReadFile(*inputFile)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	output := bytes.NewBuffer(nil)
	fmt.Fprintln(output, "// Code generated by stringdata. DO NOT EDIT.")
	fmt.Fprintln(output)
	fmt.Fprintf(output, "package %s\n", *pkgName)
	fmt.Fprintln(output)
	fmt.Fprintf(output, "// %s is the content of the file %q.\n", *constName, *inputFile)
	fmt.Fprintf(output, "const %s = %s", *constName, backtickStringLiteral(string(data)))
	fmt.Fprintln(output)

	err = writeFileIfDifferent(*outputFile, output.Bytes())
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

func backtickStringLiteral(data string) string {
	return "`" + strings.Replace(data, "`", "` + \"`\" + `", -1) + "`"
}

// writeFileIfDifferent is like ioutil.WriteFile, except it only writes if the
// contents at path are different to data. This is to avoid triggering file
// watchers if there is no change.
func writeFileIfDifferent(path string, data []byte) error {
	old, err := ioutil.ReadFile(path)
	if err == nil && bytes.Equal(old, data) {
		// Skip writing
		return nil
	}
	// err can be non-nil now. The expected error is os.ErrNotExist. However,
	// other errors can occur. In any case we just want to attempt doing a write
	// and return that error.

	return ioutil.WriteFile(path, data, 0666)
}
