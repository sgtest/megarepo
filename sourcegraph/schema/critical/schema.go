// Code generated by go-jsonschema-compiler. DO NOT EDIT.

package critical

import (
	"encoding/json"
	"errors"
	"fmt"
)

// AuthProviderCommon description: Common properties for authentication providers.
type AuthProviderCommon struct {
	// DisplayName description: The name to use when displaying this authentication provider in the UI. Defaults to an auto-generated name with the type of authentication provider and other relevant identifiers (such as a hostname).
	DisplayName string `json:"displayName,omitempty"`
}
type AuthProviders struct {
	Builtin       *BuiltinAuthProvider
	Saml          *SAMLAuthProvider
	Openidconnect *OpenIDConnectAuthProvider
	HttpHeader    *HTTPHeaderAuthProvider
	Github        *GitHubAuthProvider
	Gitlab        *GitLabAuthProvider
}

func (v AuthProviders) MarshalJSON() ([]byte, error) {
	if v.Builtin != nil {
		return json.Marshal(v.Builtin)
	}
	if v.Saml != nil {
		return json.Marshal(v.Saml)
	}
	if v.Openidconnect != nil {
		return json.Marshal(v.Openidconnect)
	}
	if v.HttpHeader != nil {
		return json.Marshal(v.HttpHeader)
	}
	if v.Github != nil {
		return json.Marshal(v.Github)
	}
	if v.Gitlab != nil {
		return json.Marshal(v.Gitlab)
	}
	return nil, errors.New("tagged union type must have exactly 1 non-nil field value")
}
func (v *AuthProviders) UnmarshalJSON(data []byte) error {
	var d struct {
		DiscriminantProperty string `json:"type"`
	}
	if err := json.Unmarshal(data, &d); err != nil {
		return err
	}
	switch d.DiscriminantProperty {
	case "builtin":
		return json.Unmarshal(data, &v.Builtin)
	case "github":
		return json.Unmarshal(data, &v.Github)
	case "gitlab":
		return json.Unmarshal(data, &v.Gitlab)
	case "http-header":
		return json.Unmarshal(data, &v.HttpHeader)
	case "openidconnect":
		return json.Unmarshal(data, &v.Openidconnect)
	case "saml":
		return json.Unmarshal(data, &v.Saml)
	}
	return fmt.Errorf("tagged union type must have a %q property whose value is one of %s", "type", []string{"builtin", "saml", "openidconnect", "http-header", "github", "gitlab"})
}

// BuiltinAuthProvider description: Configures the builtin username-password authentication provider.
type BuiltinAuthProvider struct {
	// AllowSignup description: Allows new visitors to sign up for accounts. The sign-up page will be enabled and accessible to all visitors.
	//
	// SECURITY: If the site has no users (i.e., during initial setup), it will always allow the first user to sign up and become site admin **without any approval** (first user to sign up becomes the admin).
	AllowSignup bool   `json:"allowSignup,omitempty"`
	Type        string `json:"type"`
}

// CriticalConfiguration description: Critical configuration for a Sourcegraph site.
type CriticalConfiguration struct {
	// AuthDisableUsernameChanges description: WARNING: This option has been removed in favor of `auth.enableUsernameChanges`. As of 3.3, it has no effect, and as of 3.4, it will be removed entirely.
	AuthDisableUsernameChanges bool `json:"auth.disableUsernameChanges,omitempty"`
	// AuthEnableUsernameChanges description: Enables users to change their username after account creation. Warning: setting this to be true has security implications if you have enabled (or will at any point in the future enable) repository permissions with an option that relies on username equivalency between Sourcegraph and an external service or authentication provider. Do NOT set this to true if you are using non-built-in authentication OR rely on username equivalency for repository permissions.
	AuthEnableUsernameChanges bool `json:"auth.enableUsernameChanges,omitempty"`
	// AuthProviders description: The authentication providers to use for identifying and signing in users. See instructions below for configuring SAML, OpenID Connect (including G Suite), and HTTP authentication proxies. Multiple authentication providers are supported (by specifying multiple elements in this array).
	AuthProviders []AuthProviders `json:"auth.providers,omitempty"`
	// AuthPublic description: WARNING: This option has been removed as of 3.8.
	AuthPublic bool `json:"auth.public,omitempty"`
	// AuthSessionExpiry description: The duration of a user session, after which it expires and the user is required to re-authenticate. The default is 90 days. There is typically no need to set this, but some users may have specific internal security requirements.
	//
	// The string format is that of the Duration type in the Go time package (https://golang.org/pkg/time/#ParseDuration). E.g., "720h", "43200m", "2592000s" all indicate a timespan of 30 days.
	//
	// Note: changing this field does not affect the expiration of existing sessions. If you would like to enforce this limit for existing sessions, you must log out currently signed-in users. You can force this by removing all keys beginning with "session_" from the Redis store:
	//
	// * For deployments using `sourcegraph/server`: `docker exec $CONTAINER_ID redis-cli --raw keys 'session_*' | xargs docker exec $CONTAINER_ID redis-cli del`
	// * For cluster deployments:
	//   ```
	//   REDIS_POD="$(kubectl get pods -l app=redis-store -o jsonpath={.items[0].metadata.name})";
	//   kubectl exec "$REDIS_POD" -- redis-cli --raw keys 'session_*' | xargs kubectl exec "$REDIS_POD" -- redis-cli --raw del;
	//   ```
	//
	AuthSessionExpiry string `json:"auth.sessionExpiry,omitempty"`
	// AuthUserOrgMap description: Ensure that matching users are members of the specified orgs (auto-joining users to the orgs if they are not already a member). Provide a JSON object of the form `{"*": ["org1", "org2"]}`, where org1 and org2 are orgs that all users are automatically joined to. Currently the only supported key is `"*"`.
	AuthUserOrgMap map[string][]string `json:"auth.userOrgMap,omitempty"`
	// ExternalURL description: The externally accessible URL for Sourcegraph (i.e., what you type into your browser). Previously called `appURL`.
	ExternalURL string `json:"externalURL,omitempty"`
	// HtmlBodyBottom description: HTML to inject at the bottom of the `<body>` element on each page, for analytics scripts
	HtmlBodyBottom string `json:"htmlBodyBottom,omitempty"`
	// HtmlBodyTop description: HTML to inject at the top of the `<body>` element on each page, for analytics scripts
	HtmlBodyTop string `json:"htmlBodyTop,omitempty"`
	// HtmlHeadBottom description: HTML to inject at the bottom of the `<head>` element on each page, for analytics scripts
	HtmlHeadBottom string `json:"htmlHeadBottom,omitempty"`
	// HtmlHeadTop description: HTML to inject at the top of the `<head>` element on each page, for analytics scripts
	HtmlHeadTop string `json:"htmlHeadTop,omitempty"`
	// LicenseKey description: The license key associated with a Sourcegraph product subscription, which is necessary to activate Sourcegraph Enterprise functionality. To obtain this value, contact Sourcegraph to purchase a subscription. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
	LicenseKey string `json:"licenseKey,omitempty"`
	// LightstepAccessToken description: Access token for sending traces to LightStep.
	LightstepAccessToken string `json:"lightstepAccessToken,omitempty"`
	// LightstepProject description: The project ID on LightStep that corresponds to the `lightstepAccessToken`, only for generating links to traces. For example, if `lightstepProject` is `mycompany-prod`, all HTTP responses from Sourcegraph will include an X-Trace header with the URL to the trace on LightStep, of the form `https://app.lightstep.com/mycompany-prod/trace?span_guid=...&at_micros=...`.
	LightstepProject string `json:"lightstepProject,omitempty"`
	// Log description: Configuration for logging and alerting, including to external services.
	Log *Log `json:"log,omitempty"`
	// Migrated description: Whether the critical configuration has been migrated to the site configuration yet.
	Migrated bool `json:"migrated,omitempty"`
	// UpdateChannel description: The channel on which to automatically check for Sourcegraph updates.
	UpdateChannel string `json:"update.channel,omitempty"`
	// UseJaeger description: Use local Jaeger instance for tracing. Kubernetes cluster deployments only.
	//
	// After enabling Jaeger and updating your Kubernetes cluster, `kubectl get pods`
	// should display pods prefixed with `jaeger-cassandra`,
	// `jaeger-collector`, and `jaeger-query`. `jaeger-collector` will start
	// crashing until you initialize the Cassandra DB. To do so, do the
	// following:
	//
	// 1. Install [`cqlsh`](https://pypi.python.org/pypi/cqlsh).
	// 1. `kubectl port-forward $(kubectl get pods | grep jaeger-cassandra | awk '{ print $1 }') 9042`
	// 1. `git clone https://github.com/uber/jaeger && cd jaeger && MODE=test ./plugin/storage/cassandra/schema/create.sh | cqlsh`
	// 1. `kubectl port-forward $(kubectl get pods | grep jaeger-query | awk '{ print $1 }') 16686`
	// 1. Go to http://localhost:16686 to view the Jaeger dashboard.
	UseJaeger bool `json:"useJaeger,omitempty"`
}

// GitHubAuthProvider description: Configures the GitHub (or GitHub Enterprise) OAuth authentication provider for SSO. In addition to specifying this configuration object, you must also create a OAuth App on your GitHub instance: https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/. When a user signs into Sourcegraph or links their GitHub account to their existing Sourcegraph account, GitHub will prompt the user for the repo scope.
type GitHubAuthProvider struct {
	// AllowSignup description: Allows new visitors to sign up for accounts via GitHub authentication. If false, users signing in via GitHub must have an existing Sourcegraph account, which will be linked to their GitHub identity after sign-in.
	AllowSignup bool `json:"allowSignup,omitempty"`
	// ClientID description: The Client ID of the GitHub OAuth app, accessible from https://github.com/settings/developers (or the same path on GitHub Enterprise).
	ClientID string `json:"clientID"`
	// ClientSecret description: The Client Secret of the GitHub OAuth app, accessible from https://github.com/settings/developers (or the same path on GitHub Enterprise).
	ClientSecret string `json:"clientSecret"`
	DisplayName  string `json:"displayName,omitempty"`
	Type         string `json:"type"`
	// Url description: URL of the GitHub instance, such as https://github.com or https://github-enterprise.example.com.
	Url string `json:"url,omitempty"`
}

// GitLabAuthProvider description: Configures the GitLab OAuth authentication provider for SSO. In addition to specifying this configuration object, you must also create a OAuth App on your GitLab instance: https://docs.gitlab.com/ee/integration/oauth_provider.html. The application should have `api` and `read_user` scopes and the callback URL set to the concatenation of your Sourcegraph instance URL and "/.auth/gitlab/callback".
type GitLabAuthProvider struct {
	// ClientID description: The Client ID of the GitLab OAuth app, accessible from https://gitlab.com/oauth/applications (or the same path on your private GitLab instance).
	ClientID string `json:"clientID"`
	// ClientSecret description: The Client Secret of the GitLab OAuth app, accessible from https://gitlab.com/oauth/applications (or the same path on your private GitLab instance).
	ClientSecret string `json:"clientSecret"`
	DisplayName  string `json:"displayName,omitempty"`
	Type         string `json:"type"`
	// Url description: URL of the GitLab instance, such as https://gitlab.com or https://gitlab.example.com.
	Url string `json:"url,omitempty"`
}

// HTTPHeaderAuthProvider description: Configures the HTTP header authentication provider (which authenticates users by consulting an HTTP request header set by an authentication proxy such as https://github.com/bitly/oauth2_proxy).
type HTTPHeaderAuthProvider struct {
	// StripUsernameHeaderPrefix description: The prefix that precedes the username portion of the HTTP header specified in `usernameHeader`. If specified, the prefix will be stripped from the header value and the remainder will be used as the username. For example, if using Google Identity-Aware Proxy (IAP) with Google Sign-In, set this value to `accounts.google.com:`.
	StripUsernameHeaderPrefix string `json:"stripUsernameHeaderPrefix,omitempty"`
	Type                      string `json:"type"`
	// UsernameHeader description: The name (case-insensitive) of an HTTP header whose value is taken to be the username of the client requesting the page. Set this value when using an HTTP proxy that authenticates requests, and you don't want the extra configurability of the other authentication methods.
	UsernameHeader string `json:"usernameHeader"`
}

// Log description: Configuration for logging and alerting, including to external services.
type Log struct {
	// Sentry description: Configuration for Sentry
	Sentry *Sentry `json:"sentry,omitempty"`
}

// OpenIDConnectAuthProvider description: Configures the OpenID Connect authentication provider for SSO.
type OpenIDConnectAuthProvider struct {
	// ClientID description: The client ID for the OpenID Connect client for this site.
	//
	// For Google Apps: obtain this value from the API console (https://console.developers.google.com), as described at https://developers.google.com/identity/protocols/OpenIDConnect#getcredentials
	ClientID string `json:"clientID"`
	// ClientSecret description: The client secret for the OpenID Connect client for this site.
	//
	// For Google Apps: obtain this value from the API console (https://console.developers.google.com), as described at https://developers.google.com/identity/protocols/OpenIDConnect#getcredentials
	ClientSecret string `json:"clientSecret"`
	// ConfigID description: An identifier that can be used to reference this authentication provider in other parts of the config. For example, in configuration for a code host, you may want to designate this authentication provider as the identity provider for the code host.
	ConfigID    string `json:"configID,omitempty"`
	DisplayName string `json:"displayName,omitempty"`
	// Issuer description: The URL of the OpenID Connect issuer.
	//
	// For Google Apps: https://accounts.google.com
	Issuer string `json:"issuer"`
	// RequireEmailDomain description: Only allow users to authenticate if their email domain is equal to this value (example: mycompany.com). Do not include a leading "@". If not set, all users on this OpenID Connect provider can authenticate to Sourcegraph.
	RequireEmailDomain string `json:"requireEmailDomain,omitempty"`
	Type               string `json:"type"`
}

// SAMLAuthProvider description: Configures the SAML authentication provider for SSO.
//
// Note: if you are using IdP-initiated login, you must have *at most one* SAMLAuthProvider in the `auth.providers` array.
type SAMLAuthProvider struct {
	// ConfigID description: An identifier that can be used to reference this authentication provider in other parts of the config. For example, in configuration for a code host, you may want to designate this authentication provider as the identity provider for the code host.
	ConfigID    string `json:"configID,omitempty"`
	DisplayName string `json:"displayName,omitempty"`
	// IdentityProviderMetadata description: The SAML Identity Provider metadata XML contents (for static configuration of the SAML Service Provider). The value of this field should be an XML document whose root element is `<EntityDescriptor>` or `<EntityDescriptors>`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
	IdentityProviderMetadata string `json:"identityProviderMetadata,omitempty"`
	// IdentityProviderMetadataURL description: The SAML Identity Provider metadata URL (for dynamic configuration of the SAML Service Provider).
	IdentityProviderMetadataURL string `json:"identityProviderMetadataURL,omitempty"`
	// InsecureSkipAssertionSignatureValidation description: Whether the Service Provider should (insecurely) accept assertions from the Identity Provider without a valid signature.
	InsecureSkipAssertionSignatureValidation bool `json:"insecureSkipAssertionSignatureValidation,omitempty"`
	// NameIDFormat description: The SAML NameID format to use when performing user authentication.
	NameIDFormat string `json:"nameIDFormat,omitempty"`
	// ServiceProviderCertificate description: The SAML Service Provider certificate in X.509 encoding (begins with "-----BEGIN CERTIFICATE-----"). This certificate is used by the Identity Provider to validate the Service Provider's AuthnRequests and LogoutRequests. It corresponds to the Service Provider's private key (`serviceProviderPrivateKey`). To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
	ServiceProviderCertificate string `json:"serviceProviderCertificate,omitempty"`
	// ServiceProviderIssuer description: The SAML Service Provider name, used to identify this Service Provider. This is required if the "externalURL" field is not set (as the SAML metadata endpoint is computed as "<externalURL>.auth/saml/metadata"), or when using multiple SAML authentication providers.
	ServiceProviderIssuer string `json:"serviceProviderIssuer,omitempty"`
	// ServiceProviderPrivateKey description: The SAML Service Provider private key in PKCS#8 encoding (begins with "-----BEGIN PRIVATE KEY-----"). This private key is used to sign AuthnRequests and LogoutRequests. It corresponds to the Service Provider's certificate (`serviceProviderCertificate`). To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
	ServiceProviderPrivateKey string `json:"serviceProviderPrivateKey,omitempty"`
	// SignRequests description: Sign AuthnRequests and LogoutRequests sent to the Identity Provider using the Service Provider's private key (`serviceProviderPrivateKey`). It defaults to true if the `serviceProviderPrivateKey` and `serviceProviderCertificate` are set, and false otherwise.
	SignRequests *bool  `json:"signRequests,omitempty"`
	Type         string `json:"type"`
}

// Sentry description: Configuration for Sentry
type Sentry struct {
	// Dsn description: Sentry Data Source Name (DSN). Per the Sentry docs (https://docs.sentry.io/quickstart/#about-the-dsn), it should match the following pattern: '{PROTOCOL}://{PUBLIC_KEY}@{HOST}/{PATH}{PROJECT_ID}'.
	Dsn string `json:"dsn,omitempty"`
}
