# GitHub Actions Workflow created for testing the JetBrains extension plugin in following steps:
#
# - validate Gradle Wrapper
# - run 'test' tasks
# - run 'buildPlugin' task
#
# Note: This workflow works in isolation to the JavaScript artifacts necessary for full testing. It
#       is intended to only test if the Java plugin compiles without issues.

name: JetBrains Tests
on:
  # Trigger the workflow on any pull request that touches the jetbrains src folder
  pull_request:
      paths:
       - client/jetbrains/**

jobs:
  test:
    name: JetBrains tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client/jetbrains
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.4

      - run: yarn global add pnpm

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

#      # Note: necessary to enable plugin verification
#      - name: Cache Gradle downloads & JetBrains IDE platforms for verification
#        id: cache-platform-versions
#        uses: actions/cache@v3
#        with:
#          path:  |
#            ~/.gradle/caches
#            ~/.cache/pluginVerifier
#          key: ${{ runner.os }}-gradle-ides-${{ hashFiles('**/build.gradle.kts') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-ides-
#            ${{ runner.os }}-

      - name: Run Tests
        run: ./gradlew test

      - name: Run Build Plugin
        run: ./gradlew buildPlugin

#      # Note: very time & memory consuming, can enable when resources are available
#      - name: Verify Plugin Compatibility
#        run: ./gradlew runPluginVerifier

      - name: Check formatting
        run: ./gradlew spotlessCheck
