---
version: 1
interactions:
- request:
    body: ""
    form: {}
    headers:
      Content-Type:
      - application/x-www-form-urlencoded
    url: https://secure.phabricator.com/api/conduit.getcapabilities
    method: POST
  response:
    body: '{"result":{"authentication":["token","asymmetric","session","sessionless","oauth"],"signatures":["consign"],"input":["json","urlencoded"],"output":["json","human"]},"error_code":null,"error_info":null}'
    headers:
      Cache-Control:
      - no-store
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src https://p.phcdn.net; img-src https://p.phcdn.net data:; style-src
        https://p.phcdn.net 'unsafe-inline'; script-src https://p.phcdn.net; connect-src
        'self'; frame-src 'self'; frame-ancestors 'none'; object-src 'none'; form-action
        'self'; base-uri 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 23 Apr 2019 14:46:59 GMT
      Expires:
      - Sat, 01 Jan 2000 00:00:00 GMT
      Referrer-Policy:
      - no-referrer
      Server:
      - Apache
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - Deny
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: ""
    form: {}
    headers:
      Content-Type:
      - application/x-www-form-urlencoded
    url: https://secure.phabricator.com/api/differential.querydiffs
    method: POST
  response:
    body: '{"result":[],"error_code":null,"error_info":null}'
    headers:
      Cache-Control:
      - no-store
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src https://p.phcdn.net; img-src https://p.phcdn.net data:; style-src
        https://p.phcdn.net 'unsafe-inline'; script-src https://p.phcdn.net; connect-src
        'self'; frame-src 'self'; frame-ancestors 'none'; object-src 'none'; form-action
        'self'; base-uri 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 23 Apr 2019 14:46:59 GMT
      Expires:
      - Sat, 01 Jan 2000 00:00:00 GMT
      Referrer-Policy:
      - no-referrer
      Server:
      - Apache
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - Deny
    status: 200 OK
    code: 200
    duration: ""
- request:
    body: ""
    form: {}
    headers:
      Content-Type:
      - application/x-www-form-urlencoded
    url: https://secure.phabricator.com/api/differential.querydiffs
    method: POST
  response:
    body: '{"result":{"20455":{"id":"20455","revisionID":"8621","dateCreated":"1395874084","dateModified":"1395874084","sourceControlBaseRevision":"1ea12a01671dfead3fceeb7e92e86cdab1d8705f","sourceControlPath":null,"sourceControlSystem":"git","branch":"auth1","bookmark":null,"creationMethod":"arc","description":null,"unitStatus":"1","lintStatus":"1","changes":[{"id":"125613","metadata":{"line:first":248},"oldPath":"src\/future\/http\/BaseHTTPFuture.php","currentPath":"src\/future\/http\/BaseHTTPFuture.php","awayPaths":[],"oldProperties":[],"newProperties":[],"type":"2","fileType":"1","commitHash":null,"addLines":"19","delLines":"0","hunks":[{"oldOffset":"1","newOffset":"1","oldLength":"394","newLength":"413","addLines":null,"delLines":null,"isMissingOldNewline":null,"isMissingNewNewline":null,"corpus":"
      \u003c?php\n \n \/**\n  * Execute HTTP requests with a future-oriented API.
      For example:\n  *\n  *   $future = new HTTPFuture(''http:\/\/www.example.com\/'');\n  *   list($status,
      $body, $headers) = $future-\u003eresolve();\n  *\n  * This is an abstract base
      class which defines the API that HTTP futures\n  * conform to. Concrete implementations
      are available in @{class:HTTPFuture}\n  * and @{class:HTTPSFuture}. All futures
      return a \u003cstatus, body, header\u003e tuple\n  * when resolved; status is
      an object of class @{class:HTTPFutureResponseStatus}\n  * and may represent
      any of a wide variety of errors in the transport layer,\n  * a support library,
      or the actual HTTP exchange.\n  *\n  * @task create Creating a New Request\n  *
      @task config Configuring the Request\n  * @task resolve Resolving the Request\n  *
      @task internal Internals\n  * @group futures\n  *\/\n abstract class BaseHTTPFuture
      extends Future {\n \n   private $method   = ''GET'';\n   private $timeout  =
      300.0;\n   private $headers  = array();\n   private $uri;\n   private $data;\n   private
      $expect;\n \n \n \/* -(  Creating a New Request  )---------------------------------------------
      *\/\n \n \n   \/**\n    * Build a new future which will make an HTTP request
      to a given URI, with\n    * some optional data payload. Since this class is
      abstract you can''t actually\n    * instantiate it; instead, build a new @{class:HTTPFuture}
      or\n    * @{class:HTTPSFuture}.\n    *\n    * @param string Fully-qualified
      URI to send a request to.\n    * @param mixed  String or array to include in
      the request. Strings will be\n    *               transmitted raw; arrays will
      be encoded and sent as\n    *               ''application\/x-www-form-urlencoded''.\n    *
      @task create\n    *\/\n   final public function __construct($uri, $data = array())
      {\n     $this-\u003esetURI((string)$uri);\n     $this-\u003esetData($data);\n   }\n
      \n \n \/* -(  Configuring the Request  )--------------------------------------------
      *\/\n \n \n   \/**\n    * Set a timeout for the service call. If the request
      hasn''t resolved yet,\n    * the future will resolve with a status that indicates
      the request timed\n    * out. You can determine if a status is a timeout status
      by calling\n    * isTimeout() on the status object.\n    *\n    * @param float
      Maximum timeout, in seconds.\n    * @return this\n    * @task config\n    *\/\n   public
      function setTimeout($timeout) {\n     $this-\u003etimeout = $timeout;\n     return
      $this;\n   }\n \n \n   \/**\n    * Get the currently configured timeout.\n    *\n    *
      @return float Maximum number of seconds the request will execute for.\n    *
      @task config\n    *\/\n   public function getTimeout() {\n     return $this-\u003etimeout;\n   }\n
      \n \n   \/**\n    * Select the HTTP method (e.g., \"GET\", \"POST\", \"PUT\")
      to use for the request.\n    * By default, requests use \"GET\".\n    *\n    *
      @param string HTTP method name.\n    * @return this\n    * @task config\n    *\/\n   final
      public function setMethod($method) {\n     static $supported_methods = array(\n       ''GET''     =\u003e
      true,\n       ''POST''    =\u003e true,\n       ''PUT''     =\u003e true,\n       ''DELETE''  =\u003e
      true,\n     );\n \n     if (empty($supported_methods[$method])) {\n       $method_list
      = implode('', '', array_keys($supported_methods));\n       throw new Exception(\n         \"The
      HTTP method ''{$method}'' is not supported. Supported HTTP methods \".\n         \"are:
      {$method_list}.\");\n     }\n \n     $this-\u003emethod = $method;\n     return
      $this;\n   }\n \n \n   \/**\n    * Get the HTTP method the request will use.\n    *\n    *
      @return string HTTP method name, like \"GET\".\n    * @task config\n    *\/\n   final
      public function getMethod() {\n     return $this-\u003emethod;\n   }\n \n \n   \/**\n    *
      Set the URI to send the request to. Note that this is also a constructor\n    *
      parameter.\n    *\n    * @param string URI to send the request to.\n    * @return
      this\n    * @task config\n    *\/\n   public function setURI($uri) {\n     $this-\u003euri
      = (string)$uri;\n     return $this;\n   }\n \n \n   \/**\n    * Get the fully-qualified
      URI the request will be made to.\n    *\n    * @return string URI the request
      will be sent to.\n    * @task config\n    *\/\n   public function getURI() {\n     return
      $this-\u003euri;\n   }\n \n \n   \/**\n    * Provide data to send along with
      the request. Note that this is also a\n    * constructor parameter; it may be
      more convenient to provide it there. Data\n    * must be a string (in which
      case it will be sent raw) or an array (in which\n    * case it will be encoded
      and sent as ''application\/x-www-form-urlencoded'').\n    *\n    * @param mixed
      Data to send with the request.\n    * @return this\n    * @task config\n    *\/\n   public
      function setData($data) {\n     if (!is_string($data) && !is_array($data)) {\n       throw
      new Exception(\"Data parameter must be an array or string.\");\n     }\n     $this-\u003edata
      = $data;\n     return $this;\n   }\n \n \n   \/**\n    * Get the data which
      will be sent with the request.\n    *\n    * @return mixed Data which will be
      sent.\n    * @task config\n    *\/\n   public function getData() {\n     return
      $this-\u003edata;\n   }\n \n \n   \/**\n    * Add an HTTP header to the request.
      The same header name can be specified\n    * more than once, which will cause
      multiple headers to be sent.\n    *\n    * @param string Header name, like \"Accept-Language\".\n    *
      @param string Header value, like \"en-us\".\n    * @return this\n    * @task
      config\n    *\/\n   public function addHeader($name, $value) {\n     $this-\u003eheaders[]
      = array($name, $value);\n     return $this;\n   }\n \n \n   \/**\n    * Get
      headers which will be sent with the request. Optionally, you can\n    * provide
      a filter, which will return only headers with that name. For\n    * example:\n    *\n    *   $all_headers
      = $future-\u003egetHeaders();\n    *   $just_user_agent = $future-\u003egetHeaders(''User-Agent'');\n    *\n    *
      In either case, an array with all (or all matching) headers is returned.\n    *\n    *
      @param string|null Optional filter, which selects only headers with that\n    *                    name
      if provided.\n    * @return array      List of all (or all matching) headers.\n    *
      @task config\n    *\/\n   public function getHeaders($filter = null) {\n     $filter
      = strtolower($filter);\n \n     $result = array();\n     foreach ($this-\u003eheaders
      as $header) {\n       list($name, $value) = $header;\n       if (!$filter ||
      ($filter == strtolower($name))) {\n         $result[] = $header;\n       }\n     }\n
      \n     return $result;\n   }\n \n   \/**\n    * Set the status codes that are
      expected in the response.\n    * If set, isError on the status object will return
      true for status codes\n    * that are not in the input array. Otherise, isError
      will be true for any\n    * HTTP status code outside the 2xx range (notwithstanding
      other errors such\n    * as connection or transport issues).\n    *\n    * @param
      array|null List of expected HTTP status codes.\n    *\n    * @return this\n    *
      @task config\n    *\/\n   public function setExpectStatus($status_codes) {\n     $this-\u003eexpect
      = $status_codes;\n     return $this;\n   }\n \n   \/**\n    * Return list of
      expected status codes, or null if not set.\n    *\n    * @return array|null
      List of expected status codes.\n    *\/\n   public function getExpectStatus()
      {\n     return $this-\u003eexpect;\n   }\n \n \n+  \/**\n+   * Add a HTTP basic
      authentication header to the request.\n+   *\n+   * @param string                Username
      to authenticate with.\n+   * @param PhutilOpaqueEnvelope  Password to authenticate
      with.\n+   * @return this\n+   * @task config\n+   *\/\n+  public function setHTTPBasicAuthCredentials(\n+    $username,\n+    PhutilOpaqueEnvelope
      $password) {\n+\n+    $password_plaintext = $password-\u003eopenEnvelope();\n+    $credentials
      = base64_encode($username.'':''.$password_plaintext);\n+\n+    return $this-\u003eaddHeader(''Authorization'',
      ''Basic ''.$credentials);\n+  }\n+\n+\n \/* -(  Resolving the Request  )----------------------------------------------
      *\/\n \n \n   \/**\n    * Exception-oriented resolve(). Throws if the status
      indicates an error\n    * occurred.\n    *\n    * @return tuple  HTTP request
      result \u003cbody, headers\u003e tuple.\n    * @task resolve\n    *\/\n   final
      public function resolvex() {\n     $result = $this-\u003eresolve();\n \n     list($status,
      $body, $headers) = $result;\n     if ($status-\u003eisError()) {\n       throw
      $status;\n     }\n \n     return array($body, $headers);\n   }\n \n \n \/* -(  Internals  )----------------------------------------------------------
      *\/\n \n \n   \/**\n    * Parse a raw HTTP response into a \u003cstatus, body,
      headers\u003e tuple.\n    *\n    * @param string Raw HTTP response.\n    * @return
      tuple Valid resolution tuple.\n    * @task internal\n    *\/\n   protected function
      parseRawHTTPResponse($raw_response) {\n     $rex_base = \"@^(?P\u003chead\u003e.*?)\\r?\\n\\r?\\n(?P\u003cbody\u003e.*)$@s\";\n     $rex_head
      = \"@^HTTP\/\\S+ (?P\u003ccode\u003e\\d+) (?P\u003cstatus\u003e.*?)\".\n                 \"(?:\\r?\\n(?P\u003cheaders\u003e.*))?$@s\";\n
      \n     \/\/ We need to parse one or more header blocks in case we got any\n     \/\/
      \"HTTP\/1.X 100 Continue\" nonsense back as part of the response. This\n     \/\/
      happens with HTTPS requests, at the least.\n     $response = $raw_response;\n     while
      (true) {\n       $matches = null;\n       if (!preg_match($rex_base, $response,
      $matches)) {\n         return $this-\u003ebuildMalformedResult($raw_response);\n       }\n
      \n       $head = $matches[''head''];\n       $body = $matches[''body''];\n \n       if
      (!preg_match($rex_head, $head, $matches)) {\n         return $this-\u003ebuildMalformedResult($raw_response);\n       }\n
      \n       $response_code = (int)$matches[''code''];\n       $response_status
      = strtolower($matches[''status'']);\n       if ($response_code == 100) {\n         \/\/
      This is HTTP\/1.X 100 Continue, so this whole chunk is moot.\n         $response
      = $body;\n       } else if (($response_code == 200) &&\n                  ($response_status
      == ''connection established'')) {\n         \/\/ When tunneling through an HTTPS
      proxy, we get an initial header\n         \/\/ block like \"HTTP\/1.X 200 Connection
      established\", then newlines,\n         \/\/ then the normal response. Drop
      this chunk.\n         $response = $body;\n       } else {\n         $headers
      = $this-\u003eparseHeaders(idx($matches, ''headers''));\n         break;\n       }\n     }\n
      \n     $status = new HTTPFutureResponseStatusHTTP(\n       $response_code,\n       $body,\n       $headers,\n       $this-\u003eexpect);\n
      \n     return array($status, $body, $headers);\n   }\n \n   \/**\n    * Parse
      an HTTP header block.\n    *\n    * @param string Raw HTTP headers.\n    * @return
      list List of HTTP header tuples.\n    * @task internal\n    *\/\n   protected
      function parseHeaders($head_raw) {\n     $rex_header = ''@^(?P\u003cname\u003e.*?):\\s*(?P\u003cvalue\u003e.*)$@'';\n
      \n     $headers = array();\n \n     if (!$head_raw) {\n       return $headers;\n     }\n
      \n     $headers_raw = preg_split(\"\/\\r?\\n\/\", $head_raw);\n     foreach
      ($headers_raw as $header) {\n       $m = null;\n       if (preg_match($rex_header,
      $header, $m)) {\n         $headers[] = array($m[''name''], $m[''value'']);\n       }
      else {\n         $headers[] = array($header, null);\n       }\n     }\n \n     return
      $headers;\n   }\n \n \n   \/**\n    * Find value of the first header with given
      name.\n    *\n    * @param list List of headers from `resolve()`.\n    * @param
      string Case insensitive header name.\n    * @return string Value of the header
      or null if not found.\n    * @task resolve\n    *\/\n   public static function
      getHeader(array $headers, $search) {\n     assert_instances_of($headers, ''array'');\n     foreach
      ($headers as $header) {\n       list($name, $value) = $header;\n       if (strcasecmp($name,
      $search) == 0) {\n         return $value;\n       }\n     }\n     return null;\n   }\n
      \n \n   \/**\n    * Build a result tuple indicating a parse error resulting
      from a malformed\n    * HTTP response.\n    *\n    * @return tuple Valid resolution
      tuple.\n    * @task internal\n    *\/\n   protected function buildMalformedResult($raw_response)
      {\n     $body = null;\n     $headers = array();\n \n     $status = new HTTPFutureResponseStatusParse(\n       HTTPFutureResponseStatusParse::ERROR_MALFORMED_RESPONSE,\n       $raw_response);\n     return
      array($status, $body, $headers);\n   }\n }\n"}]},{"id":"125612","metadata":{"line:first":12},"oldPath":"src\/conduit\/ConduitClient.php","currentPath":"src\/conduit\/ConduitClient.php","awayPaths":[],"oldProperties":[],"newProperties":[],"type":"2","fileType":"1","commitHash":null,"addLines":"9","delLines":"6","hunks":[{"oldOffset":"1","newOffset":"1","oldLength":"105","newLength":"108","addLines":null,"delLines":null,"isMissingOldNewline":null,"isMissingNewNewline":null,"corpus":"
      \u003c?php\n \n \/**\n  * @group conduit\n  *\/\n final class ConduitClient
      {\n \n   private $uri;\n   private $connectionID;\n   private $sessionKey;\n   private
      $timeout = 300.0;\n-  private $basicAuthCredentials;\n+  private $username;\n+  private
      $password;\n \n   public function getConnectionID() {\n     return $this-\u003econnectionID;\n   }\n
      \n   public function __construct($uri) {\n     $this-\u003euri = new PhutilURI($uri);\n     if
      (!strlen($this-\u003euri-\u003egetDomain())) {\n       throw new Exception(\"Conduit
      URI ''{$uri}'' must include a valid host.\");\n     }\n   }\n \n   public function
      callMethodSynchronous($method, array $params) {\n     return $this-\u003ecallMethod($method,
      $params)-\u003eresolve();\n   }\n \n   public function didReceiveResponse($method,
      $data) {\n     if ($method == ''conduit.connect'') {\n       $this-\u003esessionKey
      = idx($data, ''sessionKey'');\n       $this-\u003econnectionID = idx($data,
      ''connectionID'');\n     }\n     return $data;\n   }\n \n   public function
      setTimeout($timeout) {\n     $this-\u003etimeout = $timeout;\n     return $this;\n   }\n
      \n   public function callMethod($method, array $params) {\n \n     $meta = array();\n
      \n     if ($this-\u003esessionKey) {\n       $meta[''sessionKey''] = $this-\u003esessionKey;\n     }\n
      \n     if ($this-\u003econnectionID) {\n       $meta[''connectionID''] = $this-\u003econnectionID;\n     }\n
      \n     if ($method == ''conduit.connect'') {\n       $certificate = idx($params,
      ''certificate'');\n       if ($certificate) {\n         $token = time();\n         $params[''authToken'']
      = $token;\n         $params[''authSignature''] = sha1($token.$certificate);\n       }\n       unset($params[''certificate'']);\n     }\n
      \n     if ($meta) {\n       $params[''__conduit__''] = $meta;\n     }\n \n     $uri
      = id(clone $this-\u003euri)-\u003esetPath(''\/api\/''.$method);\n \n     $data
      = array(\n       ''params''      =\u003e json_encode($params),\n       ''output''      =\u003e
      ''json'',\n \n       \/\/ This is a hint to Phabricator that the client expects
      a Conduit\n       \/\/ response. It is not necessary, but provides better error
      messages in\n       \/\/ some cases.\n       ''__conduit__'' =\u003e true,\n     );\n
      \n     \/\/ Always use the cURL-based HTTPSFuture, for proxy support and other\n     \/\/
      protocol edge cases that HTTPFuture does not support.\n     $core_future = new
      HTTPSFuture($uri, $data);\n \n     $core_future-\u003esetMethod(''POST'');\n     $core_future-\u003esetTimeout($this-\u003etimeout);\n-    if
      ($this-\u003ebasicAuthCredentials !== null) {\n-      $core_future-\u003eaddHeader(\n-        ''Authorization'',\n-        ''Basic
      ''.$this-\u003ebasicAuthCredentials);\n+\n+    if ($this-\u003eusername !==
      null) {\n+      $core_future-\u003esetHTTPBasicAuthCredentials(\n+        $this-\u003eusername,\n+        $this-\u003epassword);\n     }\n
      \n     $conduit_future = new ConduitFuture($core_future);\n     $conduit_future-\u003esetClient($this,
      $method);\n     $conduit_future-\u003ebeginProfile($data);\n     $conduit_future-\u003eisReady();\n
      \n     return $conduit_future;\n   }\n \n   public function setBasicAuthCredentials($username,
      $password) {\n-    $this-\u003ebasicAuthCredentials = base64_encode($username.'':''.$password);\n+    $this-\u003eusername
      = $username;\n+    $this-\u003epassword = new PhutilOpaqueEnvelope($password);\n     return
      $this;\n   }\n \n }\n"}]}],"properties":{"arc:unit":[{"name":"testAddingFuture","link":"https:\/\/secure.phabricator.com\/diffusion\/symbol\/testAddingFuture\/?lang=php&projects=PHID-APRJ-8d75d09d9c1e15afec3d&jump=true&context=FutureIteratorTestCase","result":"pass","userdata":"1
      assertion passed.","coverage":null,"extra":null}],"local:commits":{"61bf376823d561018a96f6d19432f12080f73c8d":{"commit":"61bf376823d561018a96f6d19432f12080f73c8d","tree":"190c40fe4401d5c23cbce497ea68de715462e7bc","parents":["1ea12a01671dfead3fceeb7e92e86cdab1d8705f"],"time":"1395873985","author":"epriestley","summary":"Support
      HTTP basic auth in HTTPFuture","message":"Support HTTP basic auth in HTTPFuture\n\nSummary:
      Ref T4590. We already sort of support this for Conduit, push the support a little
      bit deeper.\n\nTest Plan: Added basic auth across my entire nginx. Requests
      with no auth or with the wrong auth failed; requests with the right auth worked.\n\nReviewers:
      btrahan\n\nSubscribers:","authorEmail":"git@epriestley.com"}}},"authorName":"epriestley","authorEmail":"git@epriestley.com"}},"error_code":null,"error_info":null}'
    headers:
      Cache-Control:
      - no-store
      Connection:
      - keep-alive
      Content-Security-Policy:
      - default-src https://p.phcdn.net; img-src https://p.phcdn.net data:; style-src
        https://p.phcdn.net 'unsafe-inline'; script-src https://p.phcdn.net; connect-src
        'self'; frame-src 'self'; frame-ancestors 'none'; object-src 'none'; form-action
        'self'; base-uri 'none'
      Content-Type:
      - application/json
      Date:
      - Tue, 23 Apr 2019 14:46:59 GMT
      Expires:
      - Sat, 01 Jan 2000 00:00:00 GMT
      Referrer-Policy:
      - no-referrer
      Server:
      - Apache
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - Deny
    status: 200 OK
    code: 200
    duration: ""
