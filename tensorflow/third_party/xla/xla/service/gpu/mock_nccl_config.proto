/* Copyright 2023 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto3";

package xla.gpu;

option cc_enable_arenas = true;

// PathType needs to be consistent with the definition in NCCL library
// nccl/src/graph/topo.h
enum MockPathType {
  option allow_alias = true;

  MOCK_PATH_UNSPECIFIED = 0;
  MOCK_PATH_LOC = 0;
  MOCK_PATH_NVL = 1;
  MOCK_PATH_NVB = 2;
  MOCK_PATH_PIX = 3;
  MOCK_PATH_PXB = 4;
  MOCK_PATH_PXN = 5;
  MOCK_PATH_PHB = 6;
  MOCK_PATH_SYS = 7;
  MOCK_PATH_NET = 8;
}

// MockNcclTopoPattern, MockNcclTopoCpuArch, and MockNcclTopoCpuVendor need to
// be consistent with the definitions in NCCL library nccl/src/include/graph.h
enum MockNcclTopoPattern {
  MOCK_NCCL_TOPO_PATTERN_UNSPECIFIED = 0;
  MOCK_NCCL_TOPO_PATTERN_BALANCED_TREE = 1;
  MOCK_NCCL_TOPO_PATTERN_SPLIT_TREE = 2;
  MOCK_NCCL_TOPO_PATTERN_TREE = 3;
  MOCK_NCCL_TOPO_PATTERN_RING = 4;
  MOCK_NCCL_TOPO_PATTERN_NVLS = 5;
}

enum MockNcclTopoCpuArch {
  MOCK_NCCL_TOPO_CPU_ARCH_UNSPECIFIED = 0;
  MOCK_NCCL_TOPO_CPU_ARCH_X86 = 1;
  MOCK_NCCL_TOPO_CPU_ARCH_POWER = 2;
  MOCK_NCCL_TOPO_CPU_ARCH_ARM = 3;
}

enum MockNcclTopoCpuVendor {
  MOCK_NCCL_TOPO_CPU_VENDOR_UNSPECIFIED = 0;
  MOCK_NCCL_TOPO_CPU_VENDOR_INTEL = 1;
  MOCK_NCCL_TOPO_CPU_VENDOR_AMD = 2;
  MOCK_NCCL_TOPO_CPU_VENDOR_ZHAOXIN = 3;
}

message MockNcclTopoGraphConfig {
  int32 num_channels = 1;
  float bw_intra = 2;
  float bw_inter = 3;
  float latency_inter = 4;
  MockPathType type_intra = 5;
  MockPathType type_inter = 6;
  bool same_channels = 7;
  MockNcclTopoPattern pattern = 8;
}

message MockNcclTopoCpuNode {
  MockNcclTopoCpuArch arch = 1;
  MockNcclTopoCpuVendor vendor = 2;
}
