// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: hlo_to_llvm_ir %s | FileCheck %s --check-prefixes=CHECK,CHECK-%{PTX}

HloModule Transpose, is_scheduled=true

%fused_computation {
  %p0 = f32[33,49,65]{2,1,0} parameter(0)
  ROOT %transpose = f32[65,49,33]{2,1,0} transpose(%p0), dimensions={2,1,0}
}

ENTRY main {
  %param = f32[33,49,65]{2,1,0} parameter(0)
  ROOT %fusion = f32[65,49,33] fusion(%param), kind=kInput, calls=%fused_computation
}

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_1:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_2:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_3:.*]] = alloca i32, align 4
// CHECK-PTX:     %[[VAL_4:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !2
// CHECK-GCN:     %[[VAL_4:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK-PTX:     %[[VAL_5:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !3
// CHECK-GCN:     %[[VAL_5:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_6:.*]] = urem i32 %[[VAL_4]], 128
// CHECK:         %[[VAL_7:.*]] = udiv i32 %[[VAL_4]], 128
// CHECK:         %[[VAL_8:.*]] = mul i32 %[[VAL_5]], 1
// CHECK:         %[[VAL_9:.*]] = add i32 %[[VAL_8]], %[[VAL_7]]
// CHECK:         %[[VAL_10:.*]] = icmp ult i32 %[[VAL_9]], 294
// CHECK:         br i1 %[[VAL_10]], label %[[VAL_11:.*]], label %[[VAL_12:.*]]
// CHECK:       7:                                                ; preds = %[[VAL_13:.*]]
// CHECK:         %[[VAL_14:.*]] = urem i32 %[[VAL_6]], 32
// CHECK:         %[[VAL_15:.*]] = udiv i32 %[[VAL_6]], 32
// CHECK:         %[[VAL_16:.*]] = urem i32 %[[VAL_6]], 32
// CHECK:         %[[VAL_17:.*]] = udiv i32 %[[VAL_9]], 1
// CHECK:         %[[VAL_18:.*]] = urem i32 %[[VAL_17]], 3
// CHECK:         %[[VAL_19:.*]] = udiv i32 %[[VAL_9]], 3
// CHECK:         %[[VAL_20:.*]] = urem i32 %[[VAL_19]], 2
// CHECK:         %[[VAL_21:.*]] = udiv i32 %[[VAL_9]], 6
// CHECK:         %[[VAL_22:.*]] = icmp eq i32 %[[VAL_20]], 1
// CHECK:         %[[VAL_23:.*]] = select i1 %[[VAL_22]], i32 1, i32 32
// CHECK:         %[[VAL_24:.*]] = icmp eq i32 %[[VAL_18]], 2
// CHECK:         %[[VAL_25:.*]] = select i1 %[[VAL_24]], i32 1, i32 32
// CHECK:         %[[VAL_26:.*]] = mul i32 %[[VAL_20]], 32
// CHECK:         %[[VAL_27:.*]] = mul i32 %[[VAL_21]], 1
// CHECK:         %[[VAL_28:.*]] = mul i32 %[[VAL_18]], 32
// CHECK:         store i32 %[[VAL_15]], ptr %[[VAL_3]], align 4
// CHECK:         br label %[[VAL_29:.*]]
// CHECK:       y_in_tile.loop_header:                            ; preds = %[[VAL_30:.*]], %[[VAL_11]]
// CHECK:         %[[VAL_31:.*]] = load i32, ptr %[[VAL_3]], align 4
// CHECK:         %[[VAL_32:.*]] = icmp uge i32 %[[VAL_31]], %[[VAL_23]]
// CHECK:         br i1 %[[VAL_32]], label %[[VAL_33:.*]], label %[[VAL_34:.*]]
// CHECK:       y_in_tile.loop_body:                              ; preds = %[[VAL_29]]
// CHECK:         %[[VAL_35:.*]] = add nuw nsw i32 %[[VAL_31]], 4
// CHECK:         store i32 %[[VAL_35]], ptr %[[VAL_3]], align 4
// CHECK:         %[[VAL_36:.*]] = icmp eq i32 %[[VAL_31]], %[[VAL_15]]
// CHECK:         %[[VAL_37:.*]] = mul i32 %[[VAL_14]], 1
// CHECK:         store i32 0, ptr %[[VAL_2]], align 4
// CHECK:         br label %[[VAL_38:.*]]
// CHECK:       tile_loop.loop_header:                            ; preds = %[[VAL_39:.*]], %[[VAL_34]]
// CHECK:         %[[VAL_40:.*]] = load i32, ptr %[[VAL_2]], align 4
// CHECK:         %[[VAL_41:.*]] = icmp uge i32 %[[VAL_40]], 1
// CHECK:         br i1 %[[VAL_41]], label %[[VAL_30]], label %[[VAL_42:.*]]
// CHECK:       tile_loop.loop_body:                              ; preds = %[[VAL_38]]
// CHECK:         %[[VAL_43:.*]] = add nuw nsw i32 %[[VAL_40]], 1
// CHECK:         store i32 %[[VAL_43]], ptr %[[VAL_2]], align 4
// CHECK:         %[[VAL_44:.*]] = icmp eq i32 %[[VAL_40]], 0
// CHECK:         %[[VAL_45:.*]] = mul i32 %[[VAL_40]], 1
// CHECK:         %[[VAL_46:.*]] = add i32 %[[VAL_45]], 0
// CHECK:         %[[VAL_47:.*]] = add i32 %[[VAL_46]], %[[VAL_37]]
// CHECK:         %[[VAL_48:.*]] = add i32 %[[VAL_26]], %[[VAL_31]]
// CHECK:         %[[VAL_49:.*]] = add i32 %[[VAL_28]], %[[VAL_47]]
// CHECK:         %[[VAL_50:.*]] = icmp ult i32 %[[VAL_47]], %[[VAL_25]]
// CHECK:         br i1 %[[VAL_50]], label %[[VAL_51:.*]], label %[[VAL_39]]
// CHECK:       x_in_tile-after:                                  ; preds = %[[VAL_51]], %[[VAL_42]]
// CHECK:         br label %[[VAL_38]], !llvm.loop !4
// CHECK:       tile_loop.loop_exit:                              ; preds = %[[VAL_38]]
// CHECK:         br label %[[VAL_29]], !llvm.loop !7
// CHECK:       y_in_tile.loop_exit:                              ; preds = %[[VAL_29]]
// CHECK:         call void @llvm.nvvm.barrier0()
// CHECK:         store i32 %[[VAL_15]], ptr %[[VAL_1]], align 4
// CHECK:         br label %[[VAL_52:.*]]
// CHECK:       y_in_tile.loop_header5:                           ; preds = %[[VAL_53:.*]], %[[VAL_33]]
// CHECK:         %[[VAL_54:.*]] = load i32, ptr %[[VAL_1]], align 4
// CHECK:         %[[VAL_55:.*]] = icmp uge i32 %[[VAL_54]], %[[VAL_25]]
// CHECK:         br i1 %[[VAL_55]], label %[[VAL_56:.*]], label %[[VAL_57:.*]]
// CHECK:       y_in_tile.loop_body6:                             ; preds = %[[VAL_52]]
// CHECK:         %[[VAL_58:.*]] = add nuw nsw i32 %[[VAL_54]], 4
// CHECK:         store i32 %[[VAL_58]], ptr %[[VAL_1]], align 4
// CHECK:         %[[VAL_59:.*]] = icmp eq i32 %[[VAL_54]], %[[VAL_15]]
// CHECK:         %[[VAL_60:.*]] = mul i32 %[[VAL_14]], 1
// CHECK:         store i32 0, ptr %[[VAL_0]], align 4
// CHECK:         br label %[[VAL_61:.*]]
// CHECK:       tile_loop.loop_header11:                          ; preds = %[[VAL_62:.*]], %[[VAL_57]]
// CHECK:         %[[VAL_63:.*]] = load i32, ptr %[[VAL_0]], align 4
// CHECK:         %[[VAL_64:.*]] = icmp uge i32 %[[VAL_63]], 1
// CHECK:         br i1 %[[VAL_64]], label %[[VAL_53]], label %[[VAL_65:.*]]
// CHECK:       tile_loop.loop_body12:                            ; preds = %[[VAL_61]]
// CHECK:         %[[VAL_66:.*]] = add nuw nsw i32 %[[VAL_63]], 1
// CHECK:         store i32 %[[VAL_66]], ptr %[[VAL_0]], align 4
// CHECK:         %[[VAL_67:.*]] = icmp eq i32 %[[VAL_63]], 0
// CHECK:         %[[VAL_68:.*]] = mul i32 %[[VAL_63]], 1
// CHECK:         %[[VAL_69:.*]] = add i32 %[[VAL_68]], 0
// CHECK:         %[[VAL_70:.*]] = add i32 %[[VAL_69]], %[[VAL_60]]
// CHECK:         %[[VAL_71:.*]] = add i32 %[[VAL_28]], %[[VAL_54]]
// CHECK:         %[[VAL_72:.*]] = add i32 %[[VAL_26]], %[[VAL_70]]
// CHECK:         %[[VAL_73:.*]] = icmp ult i32 %[[VAL_70]], %[[VAL_23]]
// CHECK:         br i1 %[[VAL_73]], label %[[VAL_74:.*]], label %[[VAL_62]]
// CHECK:       x_in_tile-after18:                                ; preds = %[[VAL_74]], %[[VAL_65]]
// CHECK:         br label %[[VAL_61]], !llvm.loop !8
// CHECK:       tile_loop.loop_exit10:                            ; preds = %[[VAL_61]]
// CHECK:         br label %[[VAL_52]], !llvm.loop !9
// CHECK:       y_in_tile.loop_exit4:                             ; preds = %[[VAL_52]]
// CHECK:         ret void
// CHECK:       early_return:                                     ; preds = %[[VAL_13]]
// CHECK:         ret void
// CHECK:       x_in_tile-true:                                   ; preds = %[[VAL_42]]
// CHECK:         %[[VAL_75:.*]] = getelementptr inbounds [33 x [49 x [65 x float]]], ptr %[[VAL_76:.*]], i32 0, i32 %[[VAL_48]], i32 %[[VAL_27]], i32 %[[VAL_49]]
// CHECK:         %[[VAL_77:.*]] = load float, ptr %[[VAL_75]], align 4, !invariant.load !10
// CHECK:         %[[VAL_78:.*]] = getelementptr inbounds [1 x [32 x [33 x float]]], ptr addrspace(3) @tr_tile_0, i32 0, i32 %[[VAL_7]], i32 %[[VAL_31]], i32 %[[VAL_47]]
// CHECK:         %[[VAL_79:.*]] = addrspacecast ptr addrspace(3) %[[VAL_78]] to ptr
// CHECK:         store float %[[VAL_77]], ptr %[[VAL_79]], align 4
// CHECK:         br label %[[VAL_39]]
// CHECK:       x_in_tile-true17:                                 ; preds = %[[VAL_65]]
// CHECK:         %[[VAL_80:.*]] = getelementptr inbounds [1 x [32 x [33 x float]]], ptr addrspace(3) @tr_tile_0, i32 0, i32 %[[VAL_7]], i32 %[[VAL_70]], i32 %[[VAL_54]]
// CHECK:         %[[VAL_81:.*]] = addrspacecast ptr addrspace(3) %[[VAL_80]] to ptr
// CHECK:         %[[VAL_82:.*]] = load float, ptr %[[VAL_81]], align 4
// CHECK:         %[[VAL_83:.*]] = getelementptr inbounds [65 x [49 x [33 x float]]], ptr %[[VAL_84:.*]], i32 0, i32 %[[VAL_71]], i32 %[[VAL_27]], i32 %[[VAL_72]]
// CHECK:         store float %[[VAL_82]], ptr %[[VAL_83]], align 4
// CHECK:         br label %[[VAL_62]]
