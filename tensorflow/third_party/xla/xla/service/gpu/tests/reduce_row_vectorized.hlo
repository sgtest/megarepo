// RUN: hlo-opt %s --platform=gpu --stage=llvm-before-optimizations --xla_gpu_target_config_filename=%S/../../../tools/hlo_opt/gpu_specs/%{GPU}.txtpb | FileCheck %s --check-prefixes=CHECK,CHECK-%{PTX}

HloModule RowReductionVectorized, is_scheduled=true

Sum {
    x.1 = f32[] parameter(0)
    y.1 = f32[] parameter(1)
    ROOT add.1 = f32[] add(x.1, y.1)
}

fusion_vectorized {
    a = f32[131072,1024] parameter(0)
    init = f32[] constant(0)
    ROOT reduce = f32[131072] reduce(a, init), dimensions={1}, to_apply=Sum
}

ENTRY reduce.1 {
    parameter0 = f32[131072,1024] parameter(0)
    ROOT fusion_row_reduction_vectorized = f32[131072] fusion(
        f32[131072,1024] parameter0
    ), kind=kLoop, calls=fusion_vectorized
}

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = alloca float, align 4
// CHECK:         %[[VAL_1:.*]] = alloca float, align 4
// CHECK:         %[[VAL_2:.*]] = alloca float, align 4
// CHECK:         %[[VAL_3:.*]] = alloca float, align 4
// CHECK:         %[[VAL_4:.*]] = alloca float, align 4
// CHECK:         %[[VAL_5:.*]] = alloca float, align 4
// CHECK:         %[[VAL_6:.*]] = alloca float, align 4
// CHECK:         %[[VAL_7:.*]] = alloca float, align 4
// CHECK:         %[[VAL_8:.*]] = alloca float, align 4
// CHECK:         %[[VAL_9:.*]] = alloca float, align 4
// CHECK:         %[[VAL_10:.*]] = alloca float, align 4
// CHECK:         %[[VAL_11:.*]] = alloca float, align 4
// CHECK:         %[[VAL_12:.*]] = alloca float, align 4
// CHECK:         %[[VAL_13:.*]] = alloca float, align 4
// CHECK:         %[[VAL_14:.*]] = alloca float, align 4
// CHECK:         %[[VAL_15:.*]] = alloca float, align 4
// CHECK:         %[[VAL_16:.*]] = alloca float, align 4
// CHECK:         %[[VAL_17:.*]] = alloca float, align 4
// CHECK:         %[[VAL_18:.*]] = alloca float, align 4
// CHECK:         %[[VAL_19:.*]] = alloca float, align 4
// CHECK:         %[[VAL_20:.*]] = alloca float, align 4
// CHECK:         %[[VAL_21:.*]] = alloca float, align 4
// CHECK:         %[[VAL_22:.*]] = alloca float, align 4
// CHECK:         %[[VAL_23:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_24:.*]] = alloca float, align 4
// CHECK:         %[[VAL_25:.*]] = alloca float, align 4
// CHECK:         %[[VAL_26:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_27:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_28:.*]] = alloca float, align 4
// CHECK:         %[[VAL_29:.*]] = alloca float, align 4
// CHECK-PTX:     %[[VAL_30:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !2
// CHECK-GCN:     %[[VAL_30:.*]] = call i32 @llvm.amdgcn.workgroup.id.y
// CHECK:         %[[VAL_31:.*]] = icmp eq i32 %[[VAL_30]], 0
// CHECK:         br i1 %[[VAL_31]], label %[[VAL_32:.*]], label %[[VAL_33:.*]]
// CHECK:       reduce-group-0-after:                             ; preds = %[[VAL_34:.*]], %[[VAL_35:.*]]
// CHECK:         ret void
// CHECK:       reduce-group-0-true:                              ; preds = %[[VAL_35]]
// CHECK:         %[[VAL_36:.*]] = load float, ptr addrspace(1) @0, align 4
// CHECK:         store float %[[VAL_36]], ptr %[[VAL_28]], align 4
// CHECK-PTX:     %[[VAL_37:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !3
// CHECK-GCN:     %[[VAL_37:.*]] = call i32 @llvm.amdgcn.woritem.id.x
// CHECK-PTX:     %[[VAL_38:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !4
// CHECK-GCN:     %[[VAL_38:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_39:.*]] = udiv i32 %[[VAL_37]], 256
// CHECK:         %[[VAL_40:.*]] = urem i32 %[[VAL_37]], 256
// CHECK:         %[[VAL_41:.*]] = udiv i32 %[[VAL_40]], 64
// CHECK:         %[[VAL_42:.*]] = urem i32 %[[VAL_37]], 64
// CHECK:         %[[VAL_43:.*]] = mul i32 %[[VAL_42]], 2
// CHECK:         %[[VAL_44:.*]] = urem i32 %[[VAL_37]], 32
// CHECK:         %[[VAL_45:.*]] = udiv i32 %[[VAL_38]], 1
// CHECK:         %[[VAL_46:.*]] = urem i32 %[[VAL_45]], 1
// CHECK:         %[[VAL_47:.*]] = udiv i32 %[[VAL_38]], 1
// CHECK:         %[[VAL_48:.*]] = urem i32 %[[VAL_47]], 32768
// CHECK:         %[[VAL_49:.*]] = udiv i32 %[[VAL_38]], 32768
// CHECK:         %[[VAL_50:.*]] = mul i32 %[[VAL_49]], 1
// CHECK:         %[[VAL_51:.*]] = mul i32 %[[VAL_48]], 4
// CHECK:         %[[VAL_52:.*]] = mul i32 %[[VAL_46]], 1024
// CHECK:         store i32 %[[VAL_41]], ptr %[[VAL_27]], align 4
// CHECK:         br label %[[VAL_53:.*]]
// CHECK:       loop1.loop_header:                                ; preds = %[[VAL_54:.*]], %[[VAL_32]]
// CHECK:         %[[VAL_55:.*]] = load i32, ptr %[[VAL_27]], align 4
// CHECK:         %[[VAL_56:.*]] = icmp uge i32 %[[VAL_55]], 4
// CHECK:         br i1 %[[VAL_56]], label %[[VAL_57:.*]], label %[[VAL_58:.*]]
// CHECK:       loop1.loop_body:                                  ; preds = %[[VAL_53]]
// CHECK:         %[[VAL_59:.*]] = add nuw nsw i32 %[[VAL_55]], 4
// CHECK:         store i32 %[[VAL_59]], ptr %[[VAL_27]], align 4
// CHECK:         %[[VAL_60:.*]] = icmp eq i32 %[[VAL_55]], %[[VAL_41]]
// CHECK:         br i1 true, label %[[VAL_61:.*]], label %[[VAL_62:.*]]
// CHECK:       is_full_tile-after:                               ; preds = %[[VAL_63:.*]], %[[VAL_64:.*]]
// CHECK:         br label %[[VAL_53]], !llvm.loop !5
// CHECK:       loop1.loop_exit:                                  ; preds = %[[VAL_53]]
// CHECK:         %[[VAL_65:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_66:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_65]], i32 16, i32 31)
// CHECK:         store float %[[VAL_66]], ptr %[[VAL_20]], align 4
// CHECK:         call void @[[SUM:Sum.*]](ptr %[[VAL_28]], ptr %[[VAL_20]], ptr %[[VAL_19]])
// CHECK:         %[[VAL_67:.*]] = load float, ptr %[[VAL_19]], align 4
// CHECK:         store float %[[VAL_67]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_68:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_69:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_68]], i32 8, i32 31)
// CHECK:         store float %[[VAL_69]], ptr %[[VAL_18]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_18]], ptr %[[VAL_17]])
// CHECK:         %[[VAL_70:.*]] = load float, ptr %[[VAL_17]], align 4
// CHECK:         store float %[[VAL_70]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_71:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_72:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_71]], i32 4, i32 31)
// CHECK:         store float %[[VAL_72]], ptr %[[VAL_16]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_16]], ptr %[[VAL_15]])
// CHECK:         %[[VAL_73:.*]] = load float, ptr %[[VAL_15]], align 4
// CHECK:         store float %[[VAL_73]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_74:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_75:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_74]], i32 2, i32 31)
// CHECK:         store float %[[VAL_75]], ptr %[[VAL_14]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_14]], ptr %[[VAL_13]])
// CHECK:         %[[VAL_76:.*]] = load float, ptr %[[VAL_13]], align 4
// CHECK:         store float %[[VAL_76]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_77:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_78:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_77]], i32 1, i32 31)
// CHECK:         store float %[[VAL_78]], ptr %[[VAL_12]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_12]], ptr %[[VAL_11]])
// CHECK:         %[[VAL_79:.*]] = load float, ptr %[[VAL_11]], align 4
// CHECK:         store float %[[VAL_79]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_80:.*]] = udiv i32 %[[VAL_42]], 32
// CHECK:         %[[VAL_82:.*]] = icmp ult i32 %[[VAL_41]], 4
// CHECK:         br i1 %[[VAL_82]], label %[[VAL_84:.*]], label %[[VAL_34]]
// CHECK:       thread_in_bounds-after:                           ; preds = %[[VAL_85:.*]], %[[VAL_57]]
// CHECK:         br label %[[VAL_33]]
// CHECK:       is_full_tile-true:                                ; preds = %[[VAL_58]]
// CHECK:         store i32 0, ptr %[[VAL_26]], align 4
// CHECK:         br label %[[VAL_86:.*]]
// CHECK:       loop2.loop_header:                                ; preds = %[[VAL_87:.*]], %[[VAL_61]]
// CHECK:         %[[VAL_88:.*]] = load i32, ptr %[[VAL_26]], align 4
// CHECK:         %[[VAL_89:.*]] = icmp uge i32 %[[VAL_88]], 8
// CHECK:         br i1 %[[VAL_89]], label %[[VAL_64]], label %[[VAL_87]]
// CHECK:       loop2.loop_body:                                  ; preds = %[[VAL_86]]
// CHECK:         %[[VAL_90:.*]] = add nuw nsw i32 %[[VAL_88]], 1
// CHECK:         store i32 %[[VAL_90]], ptr %[[VAL_26]], align 4
// CHECK:         %[[VAL_91:.*]] = icmp eq i32 %[[VAL_88]], 0
// CHECK:         %[[VAL_92:.*]] = mul i32 %[[VAL_88]], 128
// CHECK:         %[[VAL_93:.*]] = add i32 %[[VAL_92]], 0
// CHECK:         %[[VAL_94:.*]] = add i32 %[[VAL_93]], %[[VAL_43]]
// CHECK:         %[[VAL_95:.*]] = add i32 %[[VAL_50]], 0
// CHECK:         %[[VAL_96:.*]] = add i32 %[[VAL_51]], %[[VAL_55]]
// CHECK:         %[[VAL_97:.*]] = add i32 %[[VAL_52]], %[[VAL_94]]
// CHECK:         %[[VAL_98:.*]] = getelementptr inbounds [131072 x [1024 x float]], ptr %[[VAL_99:.*]], i32 0, i32 %[[VAL_96]], i32 %[[VAL_97]]
// CHECK:         %[[VAL_100:.*]] = load float, ptr %[[VAL_98]], align 4, !invariant.load !7
// CHECK:         store float %[[VAL_100]], ptr %[[VAL_29]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_29]], ptr %[[VAL_25]])
// CHECK:         %[[VAL_102:.*]] = load float, ptr %[[VAL_25]], align 4
// CHECK:         store float %[[VAL_102]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_103:.*]] = mul i32 %[[VAL_88]], 128
// CHECK:         %[[VAL_104:.*]] = add i32 %[[VAL_103]], 1
// CHECK:         %[[VAL_105:.*]] = add i32 %[[VAL_104]], %[[VAL_43]]
// CHECK:         %[[VAL_106:.*]] = add i32 %[[VAL_50]], 0
// CHECK:         %[[VAL_107:.*]] = add i32 %[[VAL_51]], %[[VAL_55]]
// CHECK:         %[[VAL_108:.*]] = add i32 %[[VAL_52]], %[[VAL_105]]
// CHECK:         %[[VAL_109:.*]] = getelementptr inbounds [131072 x [1024 x float]], ptr %[[VAL_99]], i32 0, i32 %[[VAL_107]], i32 %[[VAL_108]]
// CHECK:         %[[VAL_110:.*]] = load float, ptr %[[VAL_109]], align 4, !invariant.load !7
// CHECK:         store float %[[VAL_110]], ptr %[[VAL_29]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_29]], ptr %[[VAL_24]])
// CHECK:         %[[VAL_112:.*]] = load float, ptr %[[VAL_24]], align 4
// CHECK:         store float %[[VAL_112]], ptr %[[VAL_28]], align 4
// CHECK:         br label %[[VAL_86]], !llvm.loop !8
// CHECK:       loop2.loop_exit:                                  ; preds = %[[VAL_86]]
// CHECK:         br label %[[VAL_54]]
// CHECK:       is_full_tile-false:                               ; preds = %[[VAL_58]]
// CHECK:         store i32 0, ptr %[[VAL_23]], align 4
// CHECK:         br label %[[VAL_113:.*]]
// CHECK:       loop2.loop_header7:                               ; preds = %[[VAL_114:.*]], %[[VAL_62]]
// CHECK:         %[[VAL_115:.*]] = load i32, ptr %[[VAL_23]], align 4
// CHECK:         %[[VAL_116:.*]] = icmp uge i32 %[[VAL_115]], 8
// CHECK:         br i1 %[[VAL_116]], label %[[VAL_63]], label %[[VAL_117:.*]]
// CHECK:       loop2.loop_body8:                                 ; preds = %[[VAL_113]]
// CHECK:         %[[VAL_118:.*]] = add nuw nsw i32 %[[VAL_115]], 1
// CHECK:         store i32 %[[VAL_118]], ptr %[[VAL_23]], align 4
// CHECK:         %[[VAL_119:.*]] = icmp eq i32 %[[VAL_115]], 0
// CHECK:         %[[VAL_120:.*]] = mul i32 %[[VAL_115]], 128
// CHECK:         %[[VAL_121:.*]] = add i32 %[[VAL_120]], 0
// CHECK:         %[[VAL_122:.*]] = add i32 %[[VAL_121]], %[[VAL_43]]
// CHECK:         %[[VAL_123:.*]] = icmp ult i32 %[[VAL_122]], 1024
// CHECK:         br i1 %[[VAL_123]], label %[[VAL_124:.*]], label %[[VAL_125:.*]]
// CHECK:       x_in_tile-after:                                  ; preds = %[[VAL_124]], %[[VAL_117]]
// CHECK:         %[[VAL_126:.*]] = mul i32 %[[VAL_115]], 128
// CHECK:         %[[VAL_127:.*]] = add i32 %[[VAL_126]], 1
// CHECK:         %[[VAL_128:.*]] = add i32 %[[VAL_127]], %[[VAL_43]]
// CHECK:         %[[VAL_129:.*]] = icmp ult i32 %[[VAL_128]], 1024
// CHECK:         br i1 %[[VAL_129]], label %[[VAL_130:.*]], label %[[VAL_114]]
// CHECK:       x_in_tile-after16:                                ; preds = %[[VAL_130]], %[[VAL_125]]
// CHECK:         br label %[[VAL_113]], !llvm.loop !10
// CHECK:       loop2.loop_exit6:                                 ; preds = %[[VAL_113]]
// CHECK:         br label %[[VAL_54]]
// CHECK:       x_in_tile-true:                                   ; preds = %[[VAL_117]]
// CHECK:         %[[VAL_131:.*]] = add i32 %[[VAL_50]], 0
// CHECK:         %[[VAL_132:.*]] = add i32 %[[VAL_51]], %[[VAL_55]]
// CHECK:         %[[VAL_133:.*]] = add i32 %[[VAL_52]], %[[VAL_122]]
// CHECK:         %[[VAL_134:.*]] = getelementptr inbounds [131072 x [1024 x float]], ptr %[[VAL_99]], i32 0, i32 %[[VAL_132]], i32 %[[VAL_133]]
// CHECK:         %[[VAL_135:.*]] = load float, ptr %[[VAL_134]], align 4, !invariant.load !7
// CHECK:         store float %[[VAL_135]], ptr %[[VAL_29]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_29]], ptr %[[VAL_22]])
// CHECK:         %[[VAL_137:.*]] = load float, ptr %[[VAL_22]], align 4
// CHECK:         store float %[[VAL_137]], ptr %[[VAL_28]], align 4
// CHECK:         br label %[[VAL_125]]
// CHECK:       x_in_tile-true15:                                 ; preds = %[[VAL_125]]
// CHECK:         %[[VAL_138:.*]] = add i32 %[[VAL_50]], 0
// CHECK:         %[[VAL_139:.*]] = add i32 %[[VAL_51]], %[[VAL_55]]
// CHECK:         %[[VAL_140:.*]] = add i32 %[[VAL_52]], %[[VAL_128]]
// CHECK:         %[[VAL_141:.*]] = getelementptr inbounds [131072 x [1024 x float]], ptr %[[VAL_99]], i32 0, i32 %[[VAL_139]], i32 %[[VAL_140]]
// CHECK:         %[[VAL_142:.*]] = load float, ptr %[[VAL_141]], align 4, !invariant.load !7
// CHECK:         store float %[[VAL_142]], ptr %[[VAL_29]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_29]], ptr %[[VAL_21]])
// CHECK:         %[[VAL_144:.*]] = load float, ptr %[[VAL_21]], align 4
// CHECK:         store float %[[VAL_144]], ptr %[[VAL_28]], align 4
// CHECK:         br label %[[VAL_114]]
// CHECK:       thread_in_bounds-true:                            ; preds = %[[VAL_57]]
// CHECK:         %[[VAL_145:.*]] = icmp eq i32 %[[VAL_44]], 0
// CHECK:         br i1 %[[VAL_145]], label %[[VAL_146:.*]], label %[[VAL_147:.*]]
// CHECK:       intra_warp_reduce_write-after:                    ; preds = %[[VAL_146]], %[[VAL_84]]
// CHECK:         call void @llvm.nvvm.barrier0()
// CHECK:         %[[VAL_148:.*]] = icmp eq i32 %[[VAL_80]], 0
// CHECK:         br i1 %[[VAL_148]], label %[[VAL_149:.*]], label %[[VAL_85]]
// CHECK:       inter_warp_reduce-after:                          ; preds = %[[VAL_150:.*]], %[[VAL_147]]
// CHECK:         br label %[[VAL_34]]
// CHECK:       intra_warp_reduce_write-true:                     ; preds = %[[VAL_84]]
// CHECK:         %[[VAL_151:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_152:.*]] = getelementptr inbounds [4 x [2 x float]], ptr addrspace(3) @shared_cache, i32 0, i32 %[[VAL_41]], i32 %[[VAL_80]]
// CHECK:         %[[VAL_153:.*]] = addrspacecast ptr addrspace(3) %[[VAL_152]] to ptr
// CHECK:         store float %[[VAL_151]], ptr %[[VAL_153]], align 4
// CHECK:         br label %[[VAL_147]]
// CHECK:       inter_warp_reduce-true:                           ; preds = %[[VAL_147]]
// CHECK:         %[[VAL_154:.*]] = getelementptr inbounds [4 x [2 x float]], ptr addrspace(3) @shared_cache, i32 0, i32 %[[VAL_41]], i32 %[[VAL_44]]
// CHECK:         %[[VAL_155:.*]] = addrspacecast ptr addrspace(3) %[[VAL_154]] to ptr
// CHECK:         store float %[[VAL_36]], ptr %[[VAL_10]], align 4
// CHECK:         %[[VAL_156:.*]] = icmp ult i32 %[[VAL_42]], 2
// CHECK:         %[[VAL_157:.*]] = select i1 %[[VAL_156]], ptr %[[VAL_155]], ptr %[[VAL_10]]
// CHECK:         %[[VAL_158:.*]] = load float, ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_159:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_158]], i32 16, i32 31)
// CHECK:         store float %[[VAL_159]], ptr %[[VAL_9]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_157]], ptr %[[VAL_9]], ptr %[[VAL_8]])
// CHECK:         %[[VAL_160:.*]] = load float, ptr %[[VAL_8]], align 4
// CHECK:         store float %[[VAL_160]], ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_161:.*]] = load float, ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_162:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_161]], i32 8, i32 31)
// CHECK:         store float %[[VAL_162]], ptr %[[VAL_7]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_157]], ptr %[[VAL_7]], ptr %[[VAL_6]])
// CHECK:         %[[VAL_163:.*]] = load float, ptr %[[VAL_6]], align 4
// CHECK:         store float %[[VAL_163]], ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_164:.*]] = load float, ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_165:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_164]], i32 4, i32 31)
// CHECK:         store float %[[VAL_165]], ptr %[[VAL_5]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_157]], ptr %[[VAL_5]], ptr %[[VAL_4]])
// CHECK:         %[[VAL_166:.*]] = load float, ptr %[[VAL_4]], align 4
// CHECK:         store float %[[VAL_166]], ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_167:.*]] = load float, ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_168:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_167]], i32 2, i32 31)
// CHECK:         store float %[[VAL_168]], ptr %[[VAL_3]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_157]], ptr %[[VAL_3]], ptr %[[VAL_2]])
// CHECK:         %[[VAL_169:.*]] = load float, ptr %[[VAL_2]], align 4
// CHECK:         store float %[[VAL_169]], ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_170:.*]] = load float, ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_171:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_170]], i32 1, i32 31)
// CHECK:         store float %[[VAL_171]], ptr %[[VAL_1]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_157]], ptr %[[VAL_1]], ptr %[[VAL_0]])
// CHECK:         %[[VAL_172:.*]] = load float, ptr %[[VAL_0]], align 4
// CHECK:         store float %[[VAL_172]], ptr %[[VAL_157]], align 4
// CHECK:         %[[VAL_173:.*]] = icmp eq i32 %[[VAL_42]], 0
// CHECK:         br i1 %[[VAL_173]], label %[[VAL_174:.*]], label %[[VAL_150]]
// CHECK:       reduction_write_output-after:                     ; preds = %[[VAL_174]], %[[VAL_149]]
// CHECK:         br label %[[VAL_85]]
// CHECK:       reduction_write_output-true:                      ; preds = %[[VAL_149]]
// CHECK:         %[[VAL_175:.*]] = add i32 %[[VAL_50]], %[[VAL_39]]
// CHECK:         %[[VAL_176:.*]] = add i32 %[[VAL_51]], %[[VAL_41]]
// CHECK:         %[[VAL_177:.*]] = add i32 %[[VAL_52]], %[[VAL_43]]
// CHECK:         %[[VAL_178:.*]] = udiv i32 %[[VAL_176]], 1
// CHECK:         %[[VAL_179:.*]] = getelementptr inbounds [131072 x float], ptr %[[VAL_180:.*]], i32 0, i32 %[[VAL_178]]
// CHECK:         %[[VAL_181:.*]] = load float, ptr %[[VAL_157]], align 4
// CHECK:         store float %[[VAL_181]], ptr %[[VAL_179]], align 4
// CHECK:         br label %[[VAL_150]]
// CHECK:       entry:
// CHECK:         %[[VAL_182:.*]] = alloca float, align 4
// CHECK:         %[[VAL_183:.*]] = load float, ptr %[[VAL_184:.*]], align 4
// CHECK:         %[[VAL_185:.*]] = load float, ptr %[[VAL_186:.*]], align 4
// CHECK:         %[[VAL_187:.*]] = fadd float %[[VAL_183]], %[[VAL_185]]
// CHECK:         store float %[[VAL_187]], ptr %[[VAL_182]], align 4
// CHECK:         %[[VAL_188:.*]] = load float, ptr %[[VAL_182]], align 4
// CHECK:         store float %[[VAL_188]], ptr %[[VAL_189:.*]], align 4
// CHECK:         ret void
