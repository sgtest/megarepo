// RUN: hlo-opt %s --platform=gpu --stage=llvm-before-optimizations --xla_gpu_target_config_filename=%S/../../../tools/hlo_opt/gpu_specs/%{GPU}.txtpb | FileCheck %s --check-prefixes=CHECK,CHECK-%{PTX}

HloModule RowReductionVectorized, is_scheduled=true

Sum {
    x.1 = f32[] parameter(0)
    y.1 = f32[] parameter(1)
    ROOT add.1 = f32[] add(x.1, y.1)
}

fusion_vectorized {
    a = f32[131072,1024] parameter(0)
    init = f32[] constant(0)
    ROOT reduce = f32[131072] reduce(a, init), dimensions={1}, to_apply=Sum
}

ENTRY reduce.1 {
    parameter0 = f32[131072,1024] parameter(0)
    ROOT fusion_row_reduction_vectorized = f32[131072] fusion(
        f32[131072,1024] parameter0
    ), kind=kLoop, calls=fusion_vectorized
}

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = alloca float, align 4
// CHECK:         %[[VAL_1:.*]] = alloca float, align 4
// CHECK:         %[[VAL_2:.*]] = alloca float, align 4
// CHECK:         %[[VAL_3:.*]] = alloca float, align 4
// CHECK:         %[[VAL_4:.*]] = alloca float, align 4
// CHECK:         %[[VAL_5:.*]] = alloca float, align 4
// CHECK:         %[[VAL_6:.*]] = alloca float, align 4
// CHECK:         %[[VAL_7:.*]] = alloca float, align 4
// CHECK:         %[[VAL_8:.*]] = alloca float, align 4
// CHECK:         %[[VAL_9:.*]] = alloca float, align 4
// CHECK:         %[[VAL_10:.*]] = alloca float, align 4
// CHECK:         %[[VAL_11:.*]] = alloca float, align 4
// CHECK:         %[[VAL_12:.*]] = alloca float, align 4
// CHECK:         %[[VAL_13:.*]] = alloca float, align 4
// CHECK:         %[[VAL_14:.*]] = alloca float, align 4
// CHECK:         %[[VAL_15:.*]] = alloca float, align 4
// CHECK:         %[[VAL_16:.*]] = alloca float, align 4
// CHECK:         %[[VAL_17:.*]] = alloca float, align 4
// CHECK:         %[[VAL_18:.*]] = alloca float, align 4
// CHECK:         %[[VAL_19:.*]] = alloca float, align 4
// CHECK:         %[[VAL_20:.*]] = alloca float, align 4
// CHECK:         %[[VAL_21:.*]] = alloca float, align 4
// CHECK:         %[[VAL_22:.*]] = alloca float, align 4
// CHECK:         %[[VAL_23:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_24:.*]] = alloca float, align 4
// CHECK:         %[[VAL_25:.*]] = alloca float, align 4
// CHECK:         %[[VAL_26:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_27:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_28:.*]] = alloca float, align 4
// CHECK:         %[[VAL_29:.*]] = alloca float, align 4
// CHECK-PTX:     %[[VAL_30:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !2
// CHECK-GCN:     %[[VAL_30:.*]] = call i32 @llvm.amdgcn.workgroup.id.y
// CHECK:         %[[VAL_31:.*]] = icmp eq i32 %[[VAL_30]], 0
// CHECK:         br i1 %[[VAL_31]], label %[[VAL_32:.*]], label %[[VAL_33:.*]]
// CHECK:       reduce-group-0-after:                             ; preds = %[[VAL_34:.*]], %[[VAL_35:.*]]
// CHECK:         ret void
// CHECK:       reduce-group-0-true:                              ; preds = %[[VAL_35]]
// CHECK:         %[[VAL_36:.*]] = load float, ptr @0, align 4
// CHECK:         store float %[[VAL_36]], ptr %[[VAL_28]], align 4
// CHECK-PTX:     %[[VAL_37:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !3
// CHECK-GCN:     %[[VAL_37:.*]] = call i32 @llvm.amdgcn.woritem.id.x
// CHECK-PTX:     %[[VAL_38:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !4
// CHECK-GCN:     %[[VAL_38:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_39:.*]] = urem i32 %[[VAL_37]], 64
// CHECK:         %[[VAL_40:.*]] = udiv i32 %[[VAL_37]], 64
// CHECK:         %[[VAL_41:.*]] = mul i32 %[[VAL_38]], 1
// CHECK:         %[[VAL_42:.*]] = add i32 %[[VAL_41]], %[[VAL_40]]
// CHECK:         %[[VAL_43:.*]] = icmp ult i32 %[[VAL_42]], 131072
// CHECK:         br i1 %[[VAL_43]], label %[[VAL_44:.*]], label %[[VAL_45:.*]]
// CHECK:       9:                                                ; preds = %[[VAL_32]]
// CHECK:         %[[VAL_47:.*]] = udiv i32 %[[VAL_39]], 64
// CHECK:         %[[VAL_46:.*]] = urem i32 %[[VAL_39]], 64
// CHECK:         %[[VAL_96:.*]] = mul i32 %[[VAL_46]], 2
// CHECK:         %[[VAL_48:.*]] = urem i32 %[[VAL_39]], 32
// CHECK:         %[[VAL_49:.*]] = udiv i32 %[[VAL_42]], 1
// CHECK:         %[[VAL_50:.*]] = urem i32 %[[VAL_49]], 1
// CHECK:         %[[VAL_51:.*]] = udiv i32 %[[VAL_42]], 1
// CHECK:         %[[VAL_52:.*]] = urem i32 %[[VAL_51]], 131072
// CHECK:         %[[VAL_53:.*]] = udiv i32 %[[VAL_42]], 131072
// CHECK:         %[[VAL_58:.*]] = mul i32 %[[VAL_53]], 1
// CHECK:         %[[VAL_59:.*]] = mul i32 %[[VAL_52]], 1
// CHECK:         %[[VAL_60:.*]] = mul i32 %[[VAL_50]], 1024
// CHECK:         store i32 %[[VAL_47]], ptr %[[VAL_27]], align 4
// CHECK:         br label %[[VAL_61:.*]]
// CHECK:       loop1.loop_header:                            ; preds = %[[VAL_62:.*]], %[[VAL_44]]
// CHECK:         %[[VAL_63:.*]] = load i32, ptr %[[VAL_27]], align 4
// CHECK:         %[[VAL_64:.*]] = icmp uge i32 %[[VAL_63]], 1
// CHECK:         br i1 %[[VAL_64]], label %[[VAL_65:.*]], label %[[VAL_66:.*]]
// CHECK:       loop1.loop_body:                              ; preds = %[[VAL_61]]
// CHECK:         %[[VAL_67:.*]] = add nuw nsw i32 %[[VAL_63]], 1
// CHECK:         store i32 %[[VAL_67]], ptr %[[VAL_27]], align 4
// CHECK:         %[[VAL_68:.*]] = icmp eq i32 %[[VAL_63]], %[[VAL_47]]
// CHECK:         br i1 true, label %[[VAL_70:.*]], label %[[VAL_71:.*]]
// CHECK:       is_full_tile-after:                               ; preds = %[[VAL_72:.*]], %[[VAL_73:.*]]
// CHECK:         br label %[[VAL_61]], !llvm.loop !5
// CHECK:       loop1.loop_exit:                              ; preds = %[[VAL_61]]
// CHECK:         %[[VAL_74:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_75:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_74]], i32 16, i32 31)
// CHECK:         store float %[[VAL_75]], ptr %[[VAL_20]], align 4
// CHECK:         call void @[[SUM:Sum.*]](ptr %[[VAL_28]], ptr %[[VAL_20]], ptr %[[VAL_19]])
// CHECK:         %[[VAL_76:.*]] = load float, ptr %[[VAL_19]], align 4
// CHECK:         store float %[[VAL_76]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_77:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_78:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_77]], i32 8, i32 31)
// CHECK:         store float %[[VAL_78]], ptr %[[VAL_18]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_18]], ptr %[[VAL_17]])
// CHECK:         %[[VAL_79:.*]] = load float, ptr %[[VAL_17]], align 4
// CHECK:         store float %[[VAL_79]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_80:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_81:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_80]], i32 4, i32 31)
// CHECK:         store float %[[VAL_81]], ptr %[[VAL_16]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_16]], ptr %[[VAL_15]])
// CHECK:         %[[VAL_82:.*]] = load float, ptr %[[VAL_15]], align 4
// CHECK:         store float %[[VAL_82]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_83:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_84:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_83]], i32 2, i32 31)
// CHECK:         store float %[[VAL_84]], ptr %[[VAL_14]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_14]], ptr %[[VAL_13]])
// CHECK:         %[[VAL_85:.*]] = load float, ptr %[[VAL_13]], align 4
// CHECK:         store float %[[VAL_85]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_86:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_87:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_86]], i32 1, i32 31)
// CHECK:         store float %[[VAL_87]], ptr %[[VAL_12]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_28]], ptr %[[VAL_12]], ptr %[[VAL_11]])
// CHECK:         %[[VAL_88:.*]] = load float, ptr %[[VAL_11]], align 4
// CHECK:         store float %[[VAL_88]], ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_89:.*]] = udiv i32 %[[VAL_46]], 32
// CHECK:         %[[VAL_90:.*]] = icmp eq i32 %[[VAL_48]], 0
// CHECK:         br i1 %[[VAL_90]], label %[[VAL_91:.*]], label %[[VAL_92:.*]]
// CHECK:       intra_warp_reduce_write-after:                    ; preds = %[[VAL_91]], %[[VAL_65]]
// CHECK:         call void @llvm.nvvm.barrier0()
// CHECK:         %[[VAL_93:.*]] = icmp eq i32 %[[VAL_89]], 0
// CHECK:         br i1 %[[VAL_93]], label %[[VAL_94:.*]], label %[[VAL_34]]
// CHECK:       inter_warp_reduce-after:                          ; preds = %[[VAL_95:.*]], %[[VAL_92]]
// CHECK:         br label %[[VAL_33]]
// CHECK:       early_return:                                     ; preds = %[[VAL_32]]
// CHECK:         ret void
// CHECK:       is_full_tile-true:                                ; preds = %[[VAL_66]]
// CHECK:         store i32 0, ptr %[[VAL_26]], align 4
// CHECK:         br label %[[VAL_97:.*]]
// CHECK:       loop2.loop_header:                            ; preds = %[[VAL_98:.*]], %[[VAL_70]]
// CHECK:         %[[VAL_99:.*]] = load i32, ptr %[[VAL_26]], align 4
// CHECK:         %[[VAL_100:.*]] = icmp uge i32 %[[VAL_99]], 8
// CHECK:         br i1 %[[VAL_100]], label %[[VAL_73]], label %[[VAL_98]]
// CHECK:       loop2.loop_body:                              ; preds = %[[VAL_97]]
// CHECK:         %[[VAL_101:.*]] = add nuw nsw i32 %[[VAL_99]], 1
// CHECK:         store i32 %[[VAL_101]], ptr %[[VAL_26]], align 4
// CHECK:         %[[VAL_102:.*]] = icmp eq i32 %[[VAL_99]], 0
// CHECK:         %[[VAL_103:.*]] = mul i32 %[[VAL_99]], 128
// CHECK:         %[[VAL_104:.*]] = add i32 %[[VAL_103]], 0
// CHECK:         %[[VAL_105:.*]] = add i32 %[[VAL_104]], %[[VAL_96]]
// CHECK:         %[[VAL_106:.*]] = add i32 %[[VAL_59]], %[[VAL_63]]
// CHECK:         %[[VAL_107:.*]] = add i32 %[[VAL_60]], %[[VAL_105]]
// CHECK:         %[[VAL_108:.*]] = getelementptr inbounds [131072 x [1024 x float]], ptr %[[VAL_109:.*]], i32 0, i32 %[[VAL_106]], i32 %[[VAL_107]]
// CHECK:         %[[VAL_110:.*]] = load float, ptr %[[VAL_108]], align 4, !invariant.load !7
// CHECK:         store float %[[VAL_110]], ptr %[[VAL_29]], align 4
// CHECK:         %[[VAL_111:.*]] = getelementptr inbounds float, ptr %[[VAL_28]], i32 0
// CHECK:         call void @[[SUM]](ptr %[[VAL_111]], ptr %[[VAL_29]], ptr %[[VAL_25]])
// CHECK:         %[[VAL_112:.*]] = load float, ptr %[[VAL_25]], align 4
// CHECK:         store float %[[VAL_112]], ptr %[[VAL_111]], align 4
// CHECK:         %[[VAL_113:.*]] = mul i32 %[[VAL_99]], 128
// CHECK:         %[[VAL_114:.*]] = add i32 %[[VAL_113]], 1
// CHECK:         %[[VAL_115:.*]] = add i32 %[[VAL_114]], %[[VAL_96]]
// CHECK:         %[[VAL_116:.*]] = add i32 %[[VAL_59]], %[[VAL_63]]
// CHECK:         %[[VAL_117:.*]] = add i32 %[[VAL_60]], %[[VAL_115]]
// CHECK:         %[[VAL_118:.*]] = getelementptr inbounds [131072 x [1024 x float]], ptr %[[VAL_109]], i32 0, i32 %[[VAL_116]], i32 %[[VAL_117]]
// CHECK:         %[[VAL_119:.*]] = load float, ptr %[[VAL_118]], align 4, !invariant.load !7
// CHECK:         store float %[[VAL_119]], ptr %[[VAL_29]], align 4
// CHECK:         %[[VAL_120:.*]] = getelementptr inbounds float, ptr %[[VAL_28]], i32 0
// CHECK:         call void @[[SUM]](ptr %[[VAL_120]], ptr %[[VAL_29]], ptr %[[VAL_24]])
// CHECK:         %[[VAL_121:.*]] = load float, ptr %[[VAL_24]], align 4
// CHECK:         store float %[[VAL_121]], ptr %[[VAL_120]], align 4
// CHECK:         br label %[[VAL_97]], !llvm.loop !8
// CHECK:       loop2.loop_exit:                              ; preds = %[[VAL_97]]
// CHECK:         br label %[[VAL_62]]
// CHECK:       is_full_tile-false:                               ; preds = %[[VAL_66]]
// CHECK:         store i32 0, ptr %[[VAL_23]], align 4
// CHECK:         br label %[[VAL_123:.*]]
// CHECK:       loop2.loop_header7:                           ; preds = %[[VAL_124:.*]], %[[VAL_71]]
// CHECK:         %[[VAL_125:.*]] = load i32, ptr %[[VAL_23]], align 4
// CHECK:         %[[VAL_126:.*]] = icmp uge i32 %[[VAL_125]], 8
// CHECK:         br i1 %[[VAL_126]], label %[[VAL_72]], label %[[VAL_127:.*]]
// CHECK:       loop2.loop_body8:                            ; preds = %[[VAL_123]]
// CHECK:         %[[VAL_128:.*]] = add nuw nsw i32 %[[VAL_125]], 1
// CHECK:         store i32 %[[VAL_128]], ptr %[[VAL_23]], align 4
// CHECK:         %[[VAL_129:.*]] = icmp eq i32 %[[VAL_125]], 0
// CHECK:         %[[VAL_130:.*]] = mul i32 %[[VAL_125]], 128
// CHECK:         %[[VAL_131:.*]] = add i32 %[[VAL_130]], 0
// CHECK:         %[[VAL_132:.*]] = add i32 %[[VAL_131]], %[[VAL_96]]
// CHECK:         %[[VAL_133:.*]] = icmp ult i32 %[[VAL_132]], 1024
// CHECK:         br i1 %[[VAL_133]], label %[[VAL_134:.*]], label %[[VAL_135:.*]]
// CHECK:       x_in_tile-after:                                  ; preds = %[[VAL_134]], %[[VAL_127]]
// CHECK:         %[[VAL_136:.*]] = mul i32 %[[VAL_125]], 128
// CHECK:         %[[VAL_137:.*]] = add i32 %[[VAL_136]], 1
// CHECK:         %[[VAL_138:.*]] = add i32 %[[VAL_137]], %[[VAL_96]]
// CHECK:         %[[VAL_139:.*]] = icmp ult i32 %[[VAL_138]], 1024
// CHECK:         br i1 %[[VAL_139]], label %[[VAL_140:.*]], label %[[VAL_124]]
// CHECK:       x_in_tile-after16:                                ; preds = %[[VAL_140]], %[[VAL_135]]
// CHECK:         br label %[[VAL_123]], !llvm.loop !10
// CHECK:       loop2.loop_exit6:                             ; preds = %[[VAL_123]]
// CHECK:         br label %[[VAL_62]]
// CHECK:       x_in_tile-true:                                   ; preds = %[[VAL_127]]
// CHECK:         %[[VAL_141:.*]] = add i32 %[[VAL_59]], %[[VAL_63]]
// CHECK:         %[[VAL_142:.*]] = add i32 %[[VAL_60]], %[[VAL_132]]
// CHECK:         %[[VAL_143:.*]] = getelementptr inbounds [131072 x [1024 x float]], ptr %[[VAL_109]], i32 0, i32 %[[VAL_141]], i32 %[[VAL_142]]
// CHECK:         %[[VAL_144:.*]] = load float, ptr %[[VAL_143]], align 4, !invariant.load !7
// CHECK:         store float %[[VAL_144]], ptr %[[VAL_29]], align 4
// CHECK:         %[[VAL_145:.*]] = getelementptr inbounds float, ptr %[[VAL_28]], i32 0
// CHECK:         call void @[[SUM]](ptr %[[VAL_145]], ptr %[[VAL_29]], ptr %[[VAL_22]])
// CHECK:         %[[VAL_146:.*]] = load float, ptr %[[VAL_22]], align 4
// CHECK:         store float %[[VAL_146]], ptr %[[VAL_145]], align 4
// CHECK:         br label %[[VAL_135]]
// CHECK:       x_in_tile-true15:                                 ; preds = %[[VAL_135]]
// CHECK:         %[[VAL_147:.*]] = add i32 %[[VAL_59]], %[[VAL_63]]
// CHECK:         %[[VAL_148:.*]] = add i32 %[[VAL_60]], %[[VAL_138]]
// CHECK:         %[[VAL_149:.*]] = getelementptr inbounds [131072 x [1024 x float]], ptr %[[VAL_109]], i32 0, i32 %[[VAL_147]], i32 %[[VAL_148]]
// CHECK:         %[[VAL_150:.*]] = load float, ptr %[[VAL_149]], align 4, !invariant.load !7
// CHECK:         store float %[[VAL_150]], ptr %[[VAL_29]], align 4
// CHECK:         %[[VAL_151:.*]] = getelementptr inbounds float, ptr %[[VAL_28]], i32 0
// CHECK:         call void @[[SUM]](ptr %[[VAL_151]], ptr %[[VAL_29]], ptr %[[VAL_21]])
// CHECK:         %[[VAL_152:.*]] = load float, ptr %[[VAL_21]], align 4
// CHECK:         store float %[[VAL_152]], ptr %[[VAL_151]], align 4
// CHECK:         br label %[[VAL_124]]
// CHECK:       intra_warp_reduce_write-true:                     ; preds = %[[VAL_65]]
// CHECK:         %[[VAL_155:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         %[[VAL_153:.*]] = getelementptr inbounds [1 x [2 x float]], ptr addrspace(3) @shared_cache, i32 0, i32 %[[VAL_40]], i32 %[[VAL_89]]
// CHECK:         %[[VAL_154:.*]] = addrspacecast ptr addrspace(3) %[[VAL_153]] to ptr
// CHECK:         store float %[[VAL_155]], ptr %[[VAL_154]], align 4
// CHECK:         br label %[[VAL_92]]
// CHECK:       inter_warp_reduce-true:                           ; preds = %[[VAL_92]]
// CHECK:         %[[VAL_156:.*]] = getelementptr inbounds [1 x [2 x float]], ptr addrspace(3) @shared_cache, i32 0, i32 %[[VAL_40]], i32 %[[VAL_48]]
// CHECK:         %[[VAL_157:.*]] = addrspacecast ptr addrspace(3) %[[VAL_156]] to ptr
// CHECK:         store float %[[VAL_36]], ptr %[[VAL_10]], align 4
// CHECK:         %[[VAL_158:.*]] = icmp ult i32 %[[VAL_46]], 2
// CHECK:         %[[VAL_159:.*]] = select i1 %[[VAL_158]], ptr %[[VAL_157]], ptr %[[VAL_10]]
// CHECK:         %[[VAL_160:.*]] = load float, ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_161:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_160]], i32 16, i32 31)
// CHECK:         store float %[[VAL_161]], ptr %[[VAL_9]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_159]], ptr %[[VAL_9]], ptr %[[VAL_8]])
// CHECK:         %[[VAL_162:.*]] = load float, ptr %[[VAL_8]], align 4
// CHECK:         store float %[[VAL_162]], ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_163:.*]] = load float, ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_164:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_163]], i32 8, i32 31)
// CHECK:         store float %[[VAL_164]], ptr %[[VAL_7]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_159]], ptr %[[VAL_7]], ptr %[[VAL_6]])
// CHECK:         %[[VAL_165:.*]] = load float, ptr %[[VAL_6]], align 4
// CHECK:         store float %[[VAL_165]], ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_166:.*]] = load float, ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_167:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_166]], i32 4, i32 31)
// CHECK:         store float %[[VAL_167]], ptr %[[VAL_5]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_159]], ptr %[[VAL_5]], ptr %[[VAL_4]])
// CHECK:         %[[VAL_168:.*]] = load float, ptr %[[VAL_4]], align 4
// CHECK:         store float %[[VAL_168]], ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_169:.*]] = load float, ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_170:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_169]], i32 2, i32 31)
// CHECK:         store float %[[VAL_170]], ptr %[[VAL_3]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_159]], ptr %[[VAL_3]], ptr %[[VAL_2]])
// CHECK:         %[[VAL_171:.*]] = load float, ptr %[[VAL_2]], align 4
// CHECK:         store float %[[VAL_171]], ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_172:.*]] = load float, ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_173:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_172]], i32 1, i32 31)
// CHECK:         store float %[[VAL_173]], ptr %[[VAL_1]], align 4
// CHECK:         call void @[[SUM]](ptr %[[VAL_159]], ptr %[[VAL_1]], ptr %[[VAL_0]])
// CHECK:         %[[VAL_174:.*]] = load float, ptr %[[VAL_0]], align 4
// CHECK:         store float %[[VAL_174]], ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_175:.*]] = icmp eq i32 %[[VAL_46]], 0
// CHECK:         br i1 %[[VAL_175]], label %[[VAL_176:.*]], label %[[VAL_95]]
// CHECK:       reduction_write_output-after:                     ; preds = %[[VAL_176]], %[[VAL_94]]
// CHECK:         br label %[[VAL_34]]
// CHECK:       reduction_write_output-true:                      ; preds = %[[VAL_94]]
// CHECK:         %[[VAL_178:.*]] = add i32 %[[VAL_59]], %[[VAL_47]]
// CHECK:         %[[VAL_179:.*]] = add i32 %[[VAL_60]], %[[VAL_96]]
// CHECK:         %[[VAL_180:.*]] = udiv i32 %[[VAL_178]], 1
// CHECK:         %[[VAL_181:.*]] = getelementptr inbounds [131072 x float], ptr %[[VAL_182:.*]], i32 0, i32 %[[VAL_180]]
// CHECK:         %[[VAL_183:.*]] = load float, ptr %[[VAL_159]], align 4
// CHECK:         store float %[[VAL_183]], ptr %[[VAL_181]], align 4
// CHECK:         br label %[[VAL_95]]
// CHECK:       entry:
// CHECK:         %[[VAL_184:.*]] = alloca float, align 4
// CHECK:         %[[VAL_185:.*]] = load float, ptr %[[VAL_186:.*]], align 4
// CHECK:         %[[VAL_187:.*]] = load float, ptr %[[VAL_188:.*]], align 4
// CHECK:         %[[VAL_189:.*]] = fadd float %[[VAL_185]], %[[VAL_187]]
// CHECK:         store float %[[VAL_189]], ptr %[[VAL_184]], align 4
// CHECK:         %[[VAL_190:.*]] = load float, ptr %[[VAL_184]], align 4
// CHECK:         store float %[[VAL_190]], ptr %[[VAL_191:.*]], align 4
// CHECK:         ret void
