// RUN: hlo_to_llvm_ir %s | FileCheck --check-prefixes=CHECK,CHECK-%{PTX} %{IR_SUBST} %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = call i32 [[CTAIDX]]
// CHECK:         %[[VAL_1:.*]] = call i32 [[TIDX]]
// CHECK-PTX:     %[[VAL_2:.*]] = mul nuw nsw i32 %[[VAL_0]], 128
// CHECK-GCN:     %[[VAL_2:.*]] = mul nuw nsw i32 %[[VAL_0]], 256
// CHECK:         %[[VAL_3:.*]] = add nuw nsw i32 %[[VAL_2]], %[[VAL_1]]
// CHECK:         %[[VAL_4:.*]] = icmp ult i32 %[[VAL_3]], 11008
// CHECK:         call void @llvm.assume(i1 %[[VAL_4]])
// CHECK:         %[[VAL_5:.*]] = add nuw nsw i32 %[[VAL_3]], 0
// CHECK:         %[[VAL_6:.*]] = udiv i32 %[[VAL_5]], 1
// CHECK:         %[[VAL_7:.*]] = icmp ult i32 %[[VAL_3]], 11000
// CHECK:         br i1 %[[VAL_7]], label %[[VAL_8:.*]], label %[[VAL_9:.*]]
// CHECK:       fusion.in_bounds-after:                           ; preds = %[[VAL_10:.*]], %[[VAL_11:.*]]
// CHECK:         ret void
// CHECK:       fusion.in_bounds-true:                            ; preds = %[[VAL_11]]
// CHECK:         br label %[[VAL_12:.*]]
// CHECK:       concat_index_from_operand_id0:                    ; preds = %[[VAL_13:.*]]
// CHECK:         %[[VAL_14:.*]] = phi i32 [ 0, %[[VAL_13]] ]
// CHECK:         %[[VAL_15:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_14]]
// CHECK:         %[[VAL_16:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_17:.*]], i32 0, i32 %[[VAL_15]]
// CHECK:         %[[VAL_18:.*]] = load float, ptr %[[VAL_16]], align 4, !invariant.load !4
// CHECK:         %[[VAL_19:.*]] = fptrunc float %[[VAL_18]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id1:                    ; preds = %[[VAL_20:.*]]
// CHECK:         %[[VAL_21:.*]] = phi i32 [ 1000, %[[VAL_20]] ]
// CHECK:         %[[VAL_22:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_21]]
// CHECK:         %[[VAL_23:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_24:.*]], i32 0, i32 %[[VAL_22]]
// CHECK:         %[[VAL_25:.*]] = load float, ptr %[[VAL_23]], align 4, !invariant.load !4
// CHECK:         %[[VAL_26:.*]] = fptrunc float %[[VAL_25]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id2:                    ; preds = %[[VAL_27:.*]]
// CHECK:         %[[VAL_28:.*]] = phi i32 [ 2000, %[[VAL_27]] ]
// CHECK:         %[[VAL_29:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_28]]
// CHECK:         %[[VAL_30:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_31:.*]], i32 0, i32 %[[VAL_29]]
// CHECK:         %[[VAL_32:.*]] = load float, ptr %[[VAL_30]], align 4, !invariant.load !4
// CHECK:         %[[VAL_33:.*]] = fptrunc float %[[VAL_32]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id3:                    ; preds = %[[VAL_34:.*]]
// CHECK:         %[[VAL_35:.*]] = phi i32 [ 3000, %[[VAL_34]] ]
// CHECK:         %[[VAL_36:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_35]]
// CHECK:         %[[VAL_37:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_38:.*]], i32 0, i32 %[[VAL_36]]
// CHECK:         %[[VAL_39:.*]] = load float, ptr %[[VAL_37]], align 4, !invariant.load !4
// CHECK:         %[[VAL_40:.*]] = fptrunc float %[[VAL_39]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id4:                    ; preds = %[[VAL_41:.*]]
// CHECK:         %[[VAL_42:.*]] = phi i32 [ 4000, %[[VAL_41]] ]
// CHECK:         %[[VAL_43:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_42]]
// CHECK:         %[[VAL_44:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_45:.*]], i32 0, i32 %[[VAL_43]]
// CHECK:         %[[VAL_46:.*]] = load float, ptr %[[VAL_44]], align 4, !invariant.load !4
// CHECK:         %[[VAL_47:.*]] = fptrunc float %[[VAL_46]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id5:                    ; preds = %[[VAL_48:.*]]
// CHECK:         %[[VAL_49:.*]] = phi i32 [ 5000, %[[VAL_48]] ]
// CHECK:         %[[VAL_50:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_49]]
// CHECK:         %[[VAL_51:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_52:.*]], i32 0, i32 %[[VAL_50]]
// CHECK:         %[[VAL_53:.*]] = load float, ptr %[[VAL_51]], align 4, !invariant.load !4
// CHECK:         %[[VAL_54:.*]] = fptrunc float %[[VAL_53]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id6:                    ; preds = %[[VAL_55:.*]]
// CHECK:         %[[VAL_56:.*]] = phi i32 [ 6000, %[[VAL_55]] ]
// CHECK:         %[[VAL_57:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_56]]
// CHECK:         %[[VAL_58:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_59:.*]], i32 0, i32 %[[VAL_57]]
// CHECK:         %[[VAL_60:.*]] = load float, ptr %[[VAL_58]], align 4, !invariant.load !4
// CHECK:         %[[VAL_61:.*]] = fptrunc float %[[VAL_60]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id7:                    ; preds = %[[VAL_62:.*]]
// CHECK:         %[[VAL_63:.*]] = phi i32 [ 7000, %[[VAL_62]] ]
// CHECK:         %[[VAL_64:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_63]]
// CHECK:         %[[VAL_65:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_66:.*]], i32 0, i32 %[[VAL_64]]
// CHECK:         %[[VAL_67:.*]] = load float, ptr %[[VAL_65]], align 4, !invariant.load !4
// CHECK:         %[[VAL_68:.*]] = fptrunc float %[[VAL_67]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id8:                    ; preds = %[[VAL_69:.*]]
// CHECK:         %[[VAL_70:.*]] = phi i32 [ 8000, %[[VAL_69]] ]
// CHECK:         %[[VAL_71:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_70]]
// CHECK:         %[[VAL_72:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_73:.*]], i32 0, i32 %[[VAL_71]]
// CHECK:         %[[VAL_74:.*]] = load float, ptr %[[VAL_72]], align 4, !invariant.load !4
// CHECK:         %[[VAL_75:.*]] = fptrunc float %[[VAL_74]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id9:                    ; preds = %[[VAL_76:.*]]
// CHECK:         %[[VAL_77:.*]] = phi i32 [ 9000, %[[VAL_76]] ]
// CHECK:         %[[VAL_78:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_77]]
// CHECK:         %[[VAL_79:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_80:.*]], i32 0, i32 %[[VAL_78]]
// CHECK:         %[[VAL_81:.*]] = load float, ptr %[[VAL_79]], align 4, !invariant.load !4
// CHECK:         %[[VAL_82:.*]] = fptrunc float %[[VAL_81]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concat_index_from_operand_id10:                   ; preds = %[[VAL_83:.*]]
// CHECK:         %[[VAL_84:.*]] = phi i32 [ 10000, %[[VAL_83]] ]
// CHECK:         %[[VAL_85:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_84]]
// CHECK:         %[[VAL_86:.*]] = getelementptr inbounds [1000 x float], ptr %[[VAL_87:.*]], i32 0, i32 %[[VAL_85]]
// CHECK:         %[[VAL_88:.*]] = load float, ptr %[[VAL_86]], align 4, !invariant.load !4
// CHECK:         %[[VAL_89:.*]] = fptrunc float %[[VAL_88]] to half
// CHECK:         br label %[[VAL_10]]
// CHECK:       concatenate.pivot.5000.:                          ; preds = %[[VAL_8]]
// CHECK:         %[[VAL_90:.*]] = icmp ult i32 %[[VAL_6]], 5000
// CHECK:         br i1 %[[VAL_90]], label %[[VAL_91:.*]], label %[[VAL_92:.*]]
// CHECK:       concatenate.pivot.2000.:                          ; preds = %[[VAL_12]]
// CHECK:         %[[VAL_93:.*]] = icmp ult i32 %[[VAL_6]], 2000
// CHECK:         br i1 %[[VAL_93]], label %[[VAL_94:.*]], label %[[VAL_95:.*]]
// CHECK:       concatenate.pivot.1000.:                          ; preds = %[[VAL_91]]
// CHECK:         %[[VAL_96:.*]] = icmp ult i32 %[[VAL_6]], 1000
// CHECK:         br i1 %[[VAL_96]], label %[[VAL_13]], label %[[VAL_20]]
// CHECK:       concatenate.pivot.0.:                             ; preds = %[[VAL_94]]
// CHECK:         br label %[[VAL_97:.*]]
// CHECK:       concatenate.pivot.1000.1:                         ; preds = %[[VAL_94]]
// CHECK:         br label %[[VAL_98:.*]]
// CHECK:       concatenate.pivot.3000.:                          ; preds = %[[VAL_91]]
// CHECK:         %[[VAL_99:.*]] = icmp ult i32 %[[VAL_6]], 3000
// CHECK:         br i1 %[[VAL_99]], label %[[VAL_27]], label %[[VAL_100:.*]]
// CHECK:       concatenate.pivot.2000.2:                         ; preds = %[[VAL_95]]
// CHECK:         br label %[[VAL_101:.*]]
// CHECK:       concatenate.pivot.4000.:                          ; preds = %[[VAL_95]]
// CHECK:         %[[VAL_102:.*]] = icmp ult i32 %[[VAL_6]], 4000
// CHECK:         br i1 %[[VAL_102]], label %[[VAL_34]], label %[[VAL_41]]
// CHECK:       concatenate.pivot.3000.3:                         ; preds = %[[VAL_100]]
// CHECK:         br label %[[VAL_103:.*]]
// CHECK:       concatenate.pivot.4000.4:                         ; preds = %[[VAL_100]]
// CHECK:         br label %[[VAL_104:.*]]
// CHECK:       concatenate.pivot.8000.:                          ; preds = %[[VAL_12]]
// CHECK:         %[[VAL_105:.*]] = icmp ult i32 %[[VAL_6]], 8000
// CHECK:         br i1 %[[VAL_105]], label %[[VAL_106:.*]], label %[[VAL_107:.*]]
// CHECK:       concatenate.pivot.6000.:                          ; preds = %[[VAL_92]]
// CHECK:         %[[VAL_108:.*]] = icmp ult i32 %[[VAL_6]], 6000
// CHECK:         br i1 %[[VAL_108]], label %[[VAL_48]], label %[[VAL_109:.*]]
// CHECK:       concatenate.pivot.5000.5:                         ; preds = %[[VAL_106]]
// CHECK:         br label %[[VAL_110:.*]]
// CHECK:       concatenate.pivot.7000.:                          ; preds = %[[VAL_106]]
// CHECK:         %[[VAL_111:.*]] = icmp ult i32 %[[VAL_6]], 7000
// CHECK:         br i1 %[[VAL_111]], label %[[VAL_55]], label %[[VAL_62]]
// CHECK:       concatenate.pivot.6000.6:                         ; preds = %[[VAL_109]]
// CHECK:         br label %[[VAL_112:.*]]
// CHECK:       concatenate.pivot.7000.7:                         ; preds = %[[VAL_109]]
// CHECK:         br label %[[VAL_113:.*]]
// CHECK:       concatenate.pivot.9000.:                          ; preds = %[[VAL_92]]
// CHECK:         %[[VAL_114:.*]] = icmp ult i32 %[[VAL_6]], 9000
// CHECK:         br i1 %[[VAL_114]], label %[[VAL_69]], label %[[VAL_115:.*]]
// CHECK:       concatenate.pivot.8000.8:                         ; preds = %[[VAL_107]]
// CHECK:         br label %[[VAL_116:.*]]
// CHECK:       concatenate.pivot.10000.:                         ; preds = %[[VAL_107]]
// CHECK:         %[[VAL_117:.*]] = icmp ult i32 %[[VAL_6]], 10000
// CHECK:         br i1 %[[VAL_117]], label %[[VAL_76]], label %[[VAL_83]]
// CHECK:       concatenate.pivot.9000.9:                         ; preds = %[[VAL_115]]
// CHECK:         br label %[[VAL_118:.*]]
// CHECK:       concatenate.pivot.10000.10:                       ; preds = %[[VAL_115]]
// CHECK:         br label %[[VAL_119:.*]]
// CHECK:       out.1.merge:                                      ; preds = %[[VAL_119]], %[[VAL_118]], %[[VAL_116]], %[[VAL_113]], %[[VAL_112]], %[[VAL_110]], %[[VAL_104]], %[[VAL_103]], %[[VAL_101]], %[[VAL_98]], %[[VAL_97]]
// CHECK:         %[[VAL_120:.*]] = phi half [ %[[VAL_19]], %[[VAL_97]] ], [ %[[VAL_26]], %[[VAL_98]] ], [ %[[VAL_33]], %[[VAL_101]] ], [ %[[VAL_40]], %[[VAL_103]] ], [ %[[VAL_47]], %[[VAL_104]] ], [ %[[VAL_54]], %[[VAL_110]] ], [ %[[VAL_61]], %[[VAL_112]] ], [ %[[VAL_68]], %[[VAL_113]] ], [ %[[VAL_75]], %[[VAL_116]] ], [ %[[VAL_82]], %[[VAL_118]] ], [ %[[VAL_89]], %[[VAL_119]] ]
// CHECK:         %[[VAL_121:.*]] = getelementptr half, ptr %[[VAL_122:.*]], i32 %[[VAL_3]]
// CHECK:         %[[VAL_123:.*]] = getelementptr inbounds half, ptr %[[VAL_121]], i32 0
// CHECK:         store half %[[VAL_120]], ptr %[[VAL_123]], align 2
// CHECK:         br label %[[VAL_9]]


HloModule module, is_scheduled=true

%fused_computation (param_0.1: f32[1000], param_1.2: f32[1000], param_2.3: f32[1000], param_3.4: f32[1000], param_4.5: f32[1000], param_5.6: f32[1000], param_6.7: f32[1000], param_7.8: f32[1000], param_8.9: f32[1000], param_9.10: f32[1000], param_10.11: f32[1000]) -> f16[11000] {
  %param_10.11 = f32[1000]{0} parameter(10)
  %converted0.1 = f16[1000]{0} convert(f32[1000]{0} %param_10.11)
  %param_9.10 = f32[1000]{0} parameter(9)
  %converted1.1 = f16[1000]{0} convert(f32[1000]{0} %param_9.10)
  %param_8.9 = f32[1000]{0} parameter(8)
  %converted2.1 = f16[1000]{0} convert(f32[1000]{0} %param_8.9)
  %param_7.8 = f32[1000]{0} parameter(7)
  %converted3.1 = f16[1000]{0} convert(f32[1000]{0} %param_7.8)
  %param_6.7 = f32[1000]{0} parameter(6)
  %converted4.1 = f16[1000]{0} convert(f32[1000]{0} %param_6.7)
  %param_5.6 = f32[1000]{0} parameter(5)
  %converted5.1 = f16[1000]{0} convert(f32[1000]{0} %param_5.6)
  %param_4.5 = f32[1000]{0} parameter(4)
  %converted6.1 = f16[1000]{0} convert(f32[1000]{0} %param_4.5)
  %param_3.4 = f32[1000]{0} parameter(3)
  %converted7.1 = f16[1000]{0} convert(f32[1000]{0} %param_3.4)
  %param_2.3 = f32[1000]{0} parameter(2)
  %converted8.1 = f16[1000]{0} convert(f32[1000]{0} %param_2.3)
  %param_1.2 = f32[1000]{0} parameter(1)
  %converted9.1 = f16[1000]{0} convert(f32[1000]{0} %param_1.2)
  %param_0.1 = f32[1000]{0} parameter(0)
  %converted10.1 = f16[1000]{0} convert(f32[1000]{0} %param_0.1)
  ROOT %out.1 = f16[11000]{0} concatenate(f16[1000]{0} %converted0.1, f16[1000]{0} %converted1.1, f16[1000]{0} %converted2.1, f16[1000]{0} %converted3.1, f16[1000]{0} %converted4.1, /*index=5*/f16[1000]{0} %converted5.1, f16[1000]{0} %converted6.1, f16[1000]{0} %converted7.1, f16[1000]{0} %converted8.1, f16[1000]{0} %converted9.1, /*index=10*/f16[1000]{0} %converted10.1), dimensions={0}
}

ENTRY %computation (p0: f32[1000], p1: f32[1000], p2: f32[1000], p3: f32[1000], p4: f32[1000], p5: f32[1000], p6: f32[1000], p7: f32[1000], p8: f32[1000], p9: f32[1000], p10: f32[1000]) -> f16[11000] {
  %p10 = f32[1000]{0} parameter(10)
  %p9 = f32[1000]{0} parameter(9)
  %p8 = f32[1000]{0} parameter(8)
  %p7 = f32[1000]{0} parameter(7)
  %p6 = f32[1000]{0} parameter(6)
  %p5 = f32[1000]{0} parameter(5)
  %p4 = f32[1000]{0} parameter(4)
  %p3 = f32[1000]{0} parameter(3)
  %p2 = f32[1000]{0} parameter(2)
  %p1 = f32[1000]{0} parameter(1)
  %p0 = f32[1000]{0} parameter(0)
  ROOT %fusion = f16[11000]{0} fusion(f32[1000]{0} %p10, f32[1000]{0} %p9, f32[1000]{0} %p8, f32[1000]{0} %p7, f32[1000]{0} %p6, /*index=5*/f32[1000]{0} %p5, f32[1000]{0} %p4, f32[1000]{0} %p3, f32[1000]{0} %p2, f32[1000]{0} %p1, /*index=10*/f32[1000]{0} %p0), kind=kLoop, calls=%fused_computation
}

