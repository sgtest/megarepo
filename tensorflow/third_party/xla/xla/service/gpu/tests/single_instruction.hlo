// RUN: hlo_to_llvm_ir --ptx %s | FileCheck %s
// RUN: hlo_to_llvm_ir --ptx %s --sm=80 | FileCheck %s --check-prefix=CHECK --check-prefix=CHECK-SM80

// CHECK-DAG: sqrt.approx.f32

HloModule Test, is_scheduled=true

fused_computation {
  param_0 = f32[] parameter(0)
  ROOT b.1 = f32[] sqrt(f32[] param_0)
}

ENTRY main {
  a = f32[] parameter(0)
  ROOT wrapped_b = f32[] fusion(f32[] a), kind=kLoop, calls=fused_computation
}

// -----

// CHECK-DAG: sqrt.approx.f32

HloModule Test, is_scheduled=true

fused_computation {
  param_0 = f16[] parameter(0)
  ROOT b.1 = f16[] sqrt(f16[] param_0)
}

ENTRY main {
  a = f16[] parameter(0)
  ROOT wrapped_b = f16[] fusion(f16[] a), kind=kLoop, calls=fused_computation
}

// -----

// CHECK-DAG: rsqrt.approx.f32

HloModule Test, is_scheduled=true

fused_computation {
  param_0 = f32[] parameter(0)
  ROOT b.1 = f32[] rsqrt(f32[] param_0)
}

ENTRY main {
  a = f32[] parameter(0)
  ROOT wrapped_b = f32[] fusion(f32[] a), kind=kLoop, calls=fused_computation
}

// -----

// CHECK-DAG: ex2.approx.ftz.f32

HloModule Test, is_scheduled=true

fused_computation {
  param_0 = f32[] parameter(0)
  ROOT b.1 = f32[] exponential(f32[] param_0)
}

ENTRY main {
  a = f32[] parameter(0)
  ROOT wrapped_b = f32[] fusion(f32[] a), kind=kLoop, calls=fused_computation
}

// -----

// CHECK-SM80: min.NaN.f32

HloModule Test, is_scheduled=true

fused_computation {
  param_0 = f32[] parameter(0)
  param_1 = f32[] parameter(1)
  ROOT b.1 = f32[] minimum(f32[] param_0, f32[] param_1)
}

ENTRY main {
  a = f32[] parameter(0)
  b = f32[] parameter(1)
  ROOT wrapped_b = f32[] fusion(f32[] a, f32[] b), kind=kLoop, calls=fused_computation
}
