// RUN: hlo_to_llvm_ir %s | FileCheck --check-prefixes=CHECK,CHECK-%{PTX} %{IR_SUBST} %s

HloModule TestModule, is_scheduled=true

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = call i32 [[CTAIDX]]
// CHECK:         %[[VAL_1:.*]] = call i32 [[TIDX]]
// CHECK-PTX:     %[[VAL_2:.*]] = mul nuw nsw i32 %[[VAL_0]], 128
// CHECK-GCN:     %[[VAL_2:.*]] = mul nuw nsw i32 %[[VAL_0]], 256
// CHECK:         %[[VAL_3:.*]] = add nuw nsw i32 %[[VAL_2]], %[[VAL_1]]
// CHECK:         %[[VAL_4:.*]] = icmp ult i32 %[[VAL_3]], 25690112
// CHECK:         call void @llvm.assume(i1 %[[VAL_4]])
// CHECK:         %[[VAL_5:.*]] = mul nuw nsw i32 %[[VAL_3]], 4
// CHECK:         %[[VAL_6:.*]] = add nuw nsw i32 %[[VAL_5]], 0
// CHECK:         %[[VAL_7:.*]] = udiv i32 %[[VAL_6]], 1
// CHECK:         %[[VAL_8:.*]] = urem i32 %[[VAL_7]], 64
// CHECK:         %[[VAL_9:.*]] = udiv i32 %[[VAL_6]], 64
// CHECK:         %[[VAL_10:.*]] = urem i32 %[[VAL_9]], 112
// CHECK:         %[[VAL_11:.*]] = udiv i32 %[[VAL_6]], 7168
// CHECK:         %[[VAL_12:.*]] = urem i32 %[[VAL_11]], 112
// CHECK:         %[[VAL_13:.*]] = udiv i32 %[[VAL_6]], 802816
// CHECK:         %[[VAL_14:.*]] = add nuw nsw i32 %[[VAL_5]], 1
// CHECK:         %[[VAL_15:.*]] = udiv i32 %[[VAL_14]], 1
// CHECK:         %[[VAL_16:.*]] = urem i32 %[[VAL_15]], 64
// CHECK:         %[[VAL_17:.*]] = udiv i32 %[[VAL_14]], 64
// CHECK:         %[[VAL_18:.*]] = urem i32 %[[VAL_17]], 112
// CHECK:         %[[VAL_19:.*]] = udiv i32 %[[VAL_14]], 7168
// CHECK:         %[[VAL_20:.*]] = urem i32 %[[VAL_19]], 112
// CHECK:         %[[VAL_21:.*]] = udiv i32 %[[VAL_14]], 802816
// CHECK:         %[[VAL_22:.*]] = add nuw nsw i32 %[[VAL_5]], 2
// CHECK:         %[[VAL_23:.*]] = udiv i32 %[[VAL_22]], 1
// CHECK:         %[[VAL_24:.*]] = urem i32 %[[VAL_23]], 64
// CHECK:         %[[VAL_25:.*]] = udiv i32 %[[VAL_22]], 64
// CHECK:         %[[VAL_26:.*]] = urem i32 %[[VAL_25]], 112
// CHECK:         %[[VAL_27:.*]] = udiv i32 %[[VAL_22]], 7168
// CHECK:         %[[VAL_28:.*]] = urem i32 %[[VAL_27]], 112
// CHECK:         %[[VAL_29:.*]] = udiv i32 %[[VAL_22]], 802816
// CHECK:         %[[VAL_30:.*]] = add nuw nsw i32 %[[VAL_5]], 3
// CHECK:         %[[VAL_31:.*]] = udiv i32 %[[VAL_30]], 1
// CHECK:         %[[VAL_32:.*]] = urem i32 %[[VAL_31]], 64
// CHECK:         %[[VAL_33:.*]] = udiv i32 %[[VAL_30]], 64
// CHECK:         %[[VAL_34:.*]] = urem i32 %[[VAL_33]], 112
// CHECK:         %[[VAL_35:.*]] = udiv i32 %[[VAL_30]], 7168
// CHECK:         %[[VAL_36:.*]] = urem i32 %[[VAL_35]], 112
// CHECK:         %[[VAL_37:.*]] = udiv i32 %[[VAL_30]], 802816
// CHECK:         %[[VAL_38:.*]] = icmp ult i32 %[[VAL_5]], 102760448
// CHECK:         br i1 %[[VAL_38]], label %[[VAL_39:.*]], label %[[VAL_40:.*]]
// CHECK:       fusion.1.in_bounds-after:                         ; preds = %[[VAL_39]], %[[VAL_41:.*]]
// CHECK:         ret void
// CHECK:       fusion.1.in_bounds-true:                          ; preds = %[[VAL_41]]
// CHECK:         %[[VAL_42:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_43:.*]], i32 0, i32 %[[VAL_8]]
// CHECK:         %[[VAL_44:.*]] = load float, ptr %[[VAL_42]], align 4, !invariant.load
// CHECK:         %[[VAL_45:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_46:.*]], i32 0, i32 %[[VAL_8]]
// CHECK:         %[[VAL_47:.*]] = load float, ptr %[[VAL_45]], align 4, !invariant.load
// CHECK:         %[[VAL_48:.*]] = fmul float %[[VAL_44]], %[[VAL_47]]
// CHECK:         %[[VAL_49:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_50:.*]] = fmul float %[[VAL_48]], %[[VAL_49]]
// CHECK:         %[[VAL_51:.*]] = getelementptr half, ptr %[[VAL_52:.*]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_53:.*]] = getelementptr inbounds half, ptr %[[VAL_51]], i32 0
// CHECK:         %[[VAL_54:.*]] = load half, ptr %[[VAL_53]], align 2, !invariant.load
// CHECK:         %[[VAL_55:.*]] = load half, ptr @2, align 2
// CHECK:         %[[VAL_56:.*]] = fcmp ogt half %[[VAL_54]], %[[VAL_55]]
// CHECK:         %[[VAL_57:.*]] = zext i1 %[[VAL_56]] to i8
// CHECK:         %[[VAL_58:.*]] = getelementptr half, ptr %[[VAL_59:.*]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_60:.*]] = getelementptr inbounds half, ptr %[[VAL_58]], i32 0
// CHECK:         %[[VAL_61:.*]] = load half, ptr %[[VAL_60]], align 2, !invariant.load
// CHECK:         %[[VAL_62:.*]] = trunc i8 %[[VAL_57]] to i1
// CHECK:         %[[VAL_63:.*]] = select i1 %[[VAL_62]], half %[[VAL_61]], half %[[VAL_55]]
// CHECK:         %[[VAL_64:.*]] = fpext half %[[VAL_63]] to float
// CHECK:         %[[VAL_65:.*]] = load float, ptr @1, align 4
// CHECK:         %[[VAL_66:.*]] = fmul float %[[VAL_64]], %[[VAL_65]]
// CHECK:         %[[VAL_67:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_68:.*]], i32 0, i32 %[[VAL_8]]
// CHECK:         %[[VAL_69:.*]] = load float, ptr %[[VAL_67]], align 4, !invariant.load
// CHECK:         %[[VAL_70:.*]] = fsub float %[[VAL_66]], %[[VAL_69]]
// CHECK:         %[[VAL_71:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_72:.*]], i32 0, i32 %[[VAL_8]]
// CHECK:         %[[VAL_73:.*]] = load float, ptr %[[VAL_71]], align 4, !invariant.load
// CHECK:         %[[VAL_74:.*]] = getelementptr half, ptr %[[VAL_75:.*]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_76:.*]] = getelementptr inbounds half, ptr %[[VAL_74]], i32 0
// CHECK:         %[[VAL_77:.*]] = load half, ptr %[[VAL_76]], align 2, !invariant.load
// CHECK:         %[[VAL_78:.*]] = fpext half %[[VAL_77]] to float
// CHECK:         %[[VAL_79:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_80:.*]], i32 0, i32 %[[VAL_8]]
// CHECK:         %[[VAL_81:.*]] = load float, ptr %[[VAL_79]], align 4, !invariant.load
// CHECK:         %[[VAL_82:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_83:.*]] = fmul float %[[VAL_81]], %[[VAL_82]]
// CHECK:         %[[VAL_84:.*]] = fsub float %[[VAL_78]], %[[VAL_83]]
// CHECK:         %[[VAL_85:.*]] = fmul float %[[VAL_73]], %[[VAL_84]]
// CHECK:         %[[VAL_86:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_87:.*]], i32 0, i32 %[[VAL_8]]
// CHECK:         %[[VAL_88:.*]] = load float, ptr %[[VAL_86]], align 4, !invariant.load
// CHECK:         %[[VAL_89:.*]] = fdiv float %[[VAL_85]], %[[VAL_88]]
// CHECK:         %[[VAL_90:.*]] = fsub float %[[VAL_70]], %[[VAL_89]]
// CHECK:         %[[VAL_91:.*]] = fmul float %[[VAL_50]], %[[VAL_90]]
// CHECK:         %[[VAL_92:.*]] = fptrunc float %[[VAL_91]] to half
// CHECK:         %[[VAL_93:.*]] = getelementptr half, ptr %[[VAL_94:.*]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_95:.*]] = getelementptr inbounds half, ptr %[[VAL_93]], i32 0
// CHECK:         store half %[[VAL_92]], ptr %[[VAL_95]], align 2
// CHECK:         %[[VAL_96:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_43]], i32 0, i32 %[[VAL_16]]
// CHECK:         %[[VAL_97:.*]] = load float, ptr %[[VAL_96]], align 4, !invariant.load
// CHECK:         %[[VAL_98:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_46]], i32 0, i32 %[[VAL_16]]
// CHECK:         %[[VAL_99:.*]] = load float, ptr %[[VAL_98]], align 4, !invariant.load
// CHECK:         %[[VAL_100:.*]] = fmul float %[[VAL_97]], %[[VAL_99]]
// CHECK:         %[[VAL_101:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_102:.*]] = fmul float %[[VAL_100]], %[[VAL_101]]
// CHECK:         %[[VAL_103:.*]] = getelementptr half, ptr %[[VAL_52]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_104:.*]] = getelementptr inbounds half, ptr %[[VAL_103]], i32 1
// CHECK:         %[[VAL_105:.*]] = load half, ptr %[[VAL_104]], align 2, !invariant.load
// CHECK:         %[[VAL_106:.*]] = load half, ptr @2, align 2
// CHECK:         %[[VAL_107:.*]] = fcmp ogt half %[[VAL_105]], %[[VAL_106]]
// CHECK:         %[[VAL_108:.*]] = zext i1 %[[VAL_107]] to i8
// CHECK:         %[[VAL_109:.*]] = getelementptr half, ptr %[[VAL_59]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_110:.*]] = getelementptr inbounds half, ptr %[[VAL_109]], i32 1
// CHECK:         %[[VAL_111:.*]] = load half, ptr %[[VAL_110]], align 2, !invariant.load
// CHECK:         %[[VAL_112:.*]] = trunc i8 %[[VAL_108]] to i1
// CHECK:         %[[VAL_113:.*]] = select i1 %[[VAL_112]], half %[[VAL_111]], half %[[VAL_106]]
// CHECK:         %[[VAL_114:.*]] = fpext half %[[VAL_113]] to float
// CHECK:         %[[VAL_115:.*]] = load float, ptr @1, align 4
// CHECK:         %[[VAL_116:.*]] = fmul float %[[VAL_114]], %[[VAL_115]]
// CHECK:         %[[VAL_117:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_68]], i32 0, i32 %[[VAL_16]]
// CHECK:         %[[VAL_118:.*]] = load float, ptr %[[VAL_117]], align 4, !invariant.load
// CHECK:         %[[VAL_119:.*]] = fsub float %[[VAL_116]], %[[VAL_118]]
// CHECK:         %[[VAL_120:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_72]], i32 0, i32 %[[VAL_16]]
// CHECK:         %[[VAL_121:.*]] = load float, ptr %[[VAL_120]], align 4, !invariant.load
// CHECK:         %[[VAL_122:.*]] = getelementptr half, ptr %[[VAL_75]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_123:.*]] = getelementptr inbounds half, ptr %[[VAL_122]], i32 1
// CHECK:         %[[VAL_124:.*]] = load half, ptr %[[VAL_123]], align 2, !invariant.load
// CHECK:         %[[VAL_125:.*]] = fpext half %[[VAL_124]] to float
// CHECK:         %[[VAL_126:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_80]], i32 0, i32 %[[VAL_16]]
// CHECK:         %[[VAL_127:.*]] = load float, ptr %[[VAL_126]], align 4, !invariant.load
// CHECK:         %[[VAL_128:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_129:.*]] = fmul float %[[VAL_127]], %[[VAL_128]]
// CHECK:         %[[VAL_130:.*]] = fsub float %[[VAL_125]], %[[VAL_129]]
// CHECK:         %[[VAL_131:.*]] = fmul float %[[VAL_121]], %[[VAL_130]]
// CHECK:         %[[VAL_132:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_87]], i32 0, i32 %[[VAL_16]]
// CHECK:         %[[VAL_133:.*]] = load float, ptr %[[VAL_132]], align 4, !invariant.load
// CHECK:         %[[VAL_134:.*]] = fdiv float %[[VAL_131]], %[[VAL_133]]
// CHECK:         %[[VAL_135:.*]] = fsub float %[[VAL_119]], %[[VAL_134]]
// CHECK:         %[[VAL_136:.*]] = fmul float %[[VAL_102]], %[[VAL_135]]
// CHECK:         %[[VAL_137:.*]] = fptrunc float %[[VAL_136]] to half
// CHECK:         %[[VAL_138:.*]] = getelementptr half, ptr %[[VAL_94]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_139:.*]] = getelementptr inbounds half, ptr %[[VAL_138]], i32 1
// CHECK:         store half %[[VAL_137]], ptr %[[VAL_139]], align 2
// CHECK:         %[[VAL_140:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_43]], i32 0, i32 %[[VAL_24]]
// CHECK:         %[[VAL_141:.*]] = load float, ptr %[[VAL_140]], align 4, !invariant.load
// CHECK:         %[[VAL_142:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_46]], i32 0, i32 %[[VAL_24]]
// CHECK:         %[[VAL_143:.*]] = load float, ptr %[[VAL_142]], align 4, !invariant.load
// CHECK:         %[[VAL_144:.*]] = fmul float %[[VAL_141]], %[[VAL_143]]
// CHECK:         %[[VAL_145:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_146:.*]] = fmul float %[[VAL_144]], %[[VAL_145]]
// CHECK:         %[[VAL_147:.*]] = getelementptr half, ptr %[[VAL_52]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_148:.*]] = getelementptr inbounds half, ptr %[[VAL_147]], i32 2
// CHECK:         %[[VAL_149:.*]] = load half, ptr %[[VAL_148]], align 2, !invariant.load
// CHECK:         %[[VAL_150:.*]] = load half, ptr @2, align 2
// CHECK:         %[[VAL_151:.*]] = fcmp ogt half %[[VAL_149]], %[[VAL_150]]
// CHECK:         %[[VAL_152:.*]] = zext i1 %[[VAL_151]] to i8
// CHECK:         %[[VAL_153:.*]] = getelementptr half, ptr %[[VAL_59]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_154:.*]] = getelementptr inbounds half, ptr %[[VAL_153]], i32 2
// CHECK:         %[[VAL_155:.*]] = load half, ptr %[[VAL_154]], align 2, !invariant.load
// CHECK:         %[[VAL_156:.*]] = trunc i8 %[[VAL_152]] to i1
// CHECK:         %[[VAL_157:.*]] = select i1 %[[VAL_156]], half %[[VAL_155]], half %[[VAL_150]]
// CHECK:         %[[VAL_158:.*]] = fpext half %[[VAL_157]] to float
// CHECK:         %[[VAL_159:.*]] = load float, ptr @1, align 4
// CHECK:         %[[VAL_160:.*]] = fmul float %[[VAL_158]], %[[VAL_159]]
// CHECK:         %[[VAL_161:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_68]], i32 0, i32 %[[VAL_24]]
// CHECK:         %[[VAL_162:.*]] = load float, ptr %[[VAL_161]], align 4, !invariant.load
// CHECK:         %[[VAL_163:.*]] = fsub float %[[VAL_160]], %[[VAL_162]]
// CHECK:         %[[VAL_164:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_72]], i32 0, i32 %[[VAL_24]]
// CHECK:         %[[VAL_165:.*]] = load float, ptr %[[VAL_164]], align 4, !invariant.load
// CHECK:         %[[VAL_166:.*]] = getelementptr half, ptr %[[VAL_75]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_167:.*]] = getelementptr inbounds half, ptr %[[VAL_166]], i32 2
// CHECK:         %[[VAL_168:.*]] = load half, ptr %[[VAL_167]], align 2, !invariant.load
// CHECK:         %[[VAL_169:.*]] = fpext half %[[VAL_168]] to float
// CHECK:         %[[VAL_170:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_80]], i32 0, i32 %[[VAL_24]]
// CHECK:         %[[VAL_171:.*]] = load float, ptr %[[VAL_170]], align 4, !invariant.load
// CHECK:         %[[VAL_172:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_173:.*]] = fmul float %[[VAL_171]], %[[VAL_172]]
// CHECK:         %[[VAL_174:.*]] = fsub float %[[VAL_169]], %[[VAL_173]]
// CHECK:         %[[VAL_175:.*]] = fmul float %[[VAL_165]], %[[VAL_174]]
// CHECK:         %[[VAL_176:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_87]], i32 0, i32 %[[VAL_24]]
// CHECK:         %[[VAL_177:.*]] = load float, ptr %[[VAL_176]], align 4, !invariant.load
// CHECK:         %[[VAL_178:.*]] = fdiv float %[[VAL_175]], %[[VAL_177]]
// CHECK:         %[[VAL_179:.*]] = fsub float %[[VAL_163]], %[[VAL_178]]
// CHECK:         %[[VAL_180:.*]] = fmul float %[[VAL_146]], %[[VAL_179]]
// CHECK:         %[[VAL_181:.*]] = fptrunc float %[[VAL_180]] to half
// CHECK:         %[[VAL_182:.*]] = getelementptr half, ptr %[[VAL_94]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_183:.*]] = getelementptr inbounds half, ptr %[[VAL_182]], i32 2
// CHECK:         store half %[[VAL_181]], ptr %[[VAL_183]], align 2
// CHECK:         %[[VAL_184:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_43]], i32 0, i32 %[[VAL_32]]
// CHECK:         %[[VAL_185:.*]] = load float, ptr %[[VAL_184]], align 4, !invariant.load
// CHECK:         %[[VAL_186:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_46]], i32 0, i32 %[[VAL_32]]
// CHECK:         %[[VAL_187:.*]] = load float, ptr %[[VAL_186]], align 4, !invariant.load
// CHECK:         %[[VAL_188:.*]] = fmul float %[[VAL_185]], %[[VAL_187]]
// CHECK:         %[[VAL_189:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_190:.*]] = fmul float %[[VAL_188]], %[[VAL_189]]
// CHECK:         %[[VAL_191:.*]] = getelementptr half, ptr %[[VAL_52]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_192:.*]] = getelementptr inbounds half, ptr %[[VAL_191]], i32 3
// CHECK:         %[[VAL_193:.*]] = load half, ptr %[[VAL_192]], align 2, !invariant.load
// CHECK:         %[[VAL_194:.*]] = load half, ptr @2, align 2
// CHECK:         %[[VAL_195:.*]] = fcmp ogt half %[[VAL_193]], %[[VAL_194]]
// CHECK:         %[[VAL_196:.*]] = zext i1 %[[VAL_195]] to i8
// CHECK:         %[[VAL_197:.*]] = getelementptr half, ptr %[[VAL_59]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_198:.*]] = getelementptr inbounds half, ptr %[[VAL_197]], i32 3
// CHECK:         %[[VAL_199:.*]] = load half, ptr %[[VAL_198]], align 2, !invariant.load
// CHECK:         %[[VAL_200:.*]] = trunc i8 %[[VAL_196]] to i1
// CHECK:         %[[VAL_201:.*]] = select i1 %[[VAL_200]], half %[[VAL_199]], half %[[VAL_194]]
// CHECK:         %[[VAL_202:.*]] = fpext half %[[VAL_201]] to float
// CHECK:         %[[VAL_203:.*]] = load float, ptr @1, align 4
// CHECK:         %[[VAL_204:.*]] = fmul float %[[VAL_202]], %[[VAL_203]]
// CHECK:         %[[VAL_205:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_68]], i32 0, i32 %[[VAL_32]]
// CHECK:         %[[VAL_206:.*]] = load float, ptr %[[VAL_205]], align 4, !invariant.load
// CHECK:         %[[VAL_207:.*]] = fsub float %[[VAL_204]], %[[VAL_206]]
// CHECK:         %[[VAL_208:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_72]], i32 0, i32 %[[VAL_32]]
// CHECK:         %[[VAL_209:.*]] = load float, ptr %[[VAL_208]], align 4, !invariant.load
// CHECK:         %[[VAL_210:.*]] = getelementptr half, ptr %[[VAL_75]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_211:.*]] = getelementptr inbounds half, ptr %[[VAL_210]], i32 3
// CHECK:         %[[VAL_212:.*]] = load half, ptr %[[VAL_211]], align 2, !invariant.load
// CHECK:         %[[VAL_213:.*]] = fpext half %[[VAL_212]] to float
// CHECK:         %[[VAL_214:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_80]], i32 0, i32 %[[VAL_32]]
// CHECK:         %[[VAL_215:.*]] = load float, ptr %[[VAL_214]], align 4, !invariant.load
// CHECK:         %[[VAL_216:.*]] = load float, ptr @0, align 4
// CHECK:         %[[VAL_217:.*]] = fmul float %[[VAL_215]], %[[VAL_216]]
// CHECK:         %[[VAL_218:.*]] = fsub float %[[VAL_213]], %[[VAL_217]]
// CHECK:         %[[VAL_219:.*]] = fmul float %[[VAL_209]], %[[VAL_218]]
// CHECK:         %[[VAL_220:.*]] = getelementptr inbounds [64 x float], ptr %[[VAL_87]], i32 0, i32 %[[VAL_32]]
// CHECK:         %[[VAL_221:.*]] = load float, ptr %[[VAL_220]], align 4, !invariant.load
// CHECK:         %[[VAL_222:.*]] = fdiv float %[[VAL_219]], %[[VAL_221]]
// CHECK:         %[[VAL_223:.*]] = fsub float %[[VAL_207]], %[[VAL_222]]
// CHECK:         %[[VAL_224:.*]] = fmul float %[[VAL_190]], %[[VAL_223]]
// CHECK:         %[[VAL_225:.*]] = fptrunc float %[[VAL_224]] to half
// CHECK:         %[[VAL_226:.*]] = getelementptr half, ptr %[[VAL_94]], i32 %[[VAL_5]]
// CHECK:         %[[VAL_227:.*]] = getelementptr inbounds half, ptr %[[VAL_226]], i32 3
// CHECK:         store half %[[VAL_225]], ptr %[[VAL_227]], align 2
// CHECK:         br label %[[VAL_40]]


%fused_computation.1 (param_0.5: f32[64], param_1.3088: f32[64], param_2.2116: f32[64], param_3.974: f32[64], param_4.1162: f32[64], param_5.893: f32[64], param_6.809: f16[128,64,112,112], param_7.770: f16[128,64,112,112], param_8.637: f16[128,64,112,112]) -> f16[128,64,112,112] {
  %param_4.1162 = f32[64]{0} parameter(4)
  %broadcast.2313 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_4.1162), dimensions={1}
  %param_3.974 = f32[64]{0} parameter(3)
  %broadcast.1844 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_3.974), dimensions={1}
  %multiply.1049 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %broadcast.2313, f32[128,64,112,112]{1,3,2,0} %broadcast.1844)
  %constant_1404 = f32[] constant(6.22807704e-07)
  %broadcast.1843 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[] %constant_1404), dimensions={}
  %multiply.1048 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %multiply.1049, f32[128,64,112,112]{1,3,2,0} %broadcast.1843)
  %param_8.637 = f16[128,64,112,112]{1,3,2,0} parameter(8)
  %constant_3626 = f16[] constant(0)
  %broadcast.4770 = f16[128,64,112,112]{1,3,2,0} broadcast(f16[] %constant_3626), dimensions={}
  %compare.259 = pred[128,64,112,112]{1,3,2,0} compare(f16[128,64,112,112]{1,3,2,0} %param_8.637, f16[128,64,112,112]{1,3,2,0} %broadcast.4770), direction=GT
  %param_7.770 = f16[128,64,112,112]{1,3,2,0} parameter(7)
  %select.254 = f16[128,64,112,112]{1,3,2,0} select(pred[128,64,112,112]{1,3,2,0} %compare.259, f16[128,64,112,112]{1,3,2,0} %param_7.770, f16[128,64,112,112]{1,3,2,0} %broadcast.4770)
  %convert.108 = f32[128,64,112,112]{1,3,2,0} convert(f16[128,64,112,112]{1,3,2,0} %select.254)
  %constant_1390 = f32[] constant(1605632)
  %broadcast.1841 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[] %constant_1390), dimensions={}
  %multiply.1046 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %convert.108, f32[128,64,112,112]{1,3,2,0} %broadcast.1841)
  %param_2.2116 = f32[64]{0} parameter(2)
  %broadcast.1840 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_2.2116), dimensions={1}
  %subtract.266 = f32[128,64,112,112]{1,3,2,0} subtract(f32[128,64,112,112]{1,3,2,0} %multiply.1046, f32[128,64,112,112]{1,3,2,0} %broadcast.1840)
  %param_1.3088 = f32[64]{0} parameter(1)
  %broadcast.1839 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_1.3088), dimensions={1}
  %param_6.809 = f16[128,64,112,112]{1,3,2,0} parameter(6)
  %convert.644 = f32[128,64,112,112]{1,3,2,0} convert(f16[128,64,112,112]{1,3,2,0} %param_6.809)
  %param_5.893 = f32[64]{0} parameter(5)
  %broadcast.3388 = f32[64]{0} broadcast(f32[] %constant_1404), dimensions={}
  %multiply.2336 = f32[64]{0} multiply(f32[64]{0} %param_5.893, f32[64]{0} %broadcast.3388)
  %broadcast.3387 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %multiply.2336), dimensions={1}
  %subtract.591 = f32[128,64,112,112]{1,3,2,0} subtract(f32[128,64,112,112]{1,3,2,0} %convert.644, f32[128,64,112,112]{1,3,2,0} %broadcast.3387)
  %multiply.1045 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %broadcast.1839, f32[128,64,112,112]{1,3,2,0} %subtract.591)
  %param_0.5 = f32[64]{0} parameter(0)
  %broadcast.1838 = f32[128,64,112,112]{1,3,2,0} broadcast(f32[64]{0} %param_0.5), dimensions={1}
  %divide.212 = f32[128,64,112,112]{1,3,2,0} divide(f32[128,64,112,112]{1,3,2,0} %multiply.1045, f32[128,64,112,112]{1,3,2,0} %broadcast.1838)
  %subtract.265 = f32[128,64,112,112]{1,3,2,0} subtract(f32[128,64,112,112]{1,3,2,0} %subtract.266, f32[128,64,112,112]{1,3,2,0} %divide.212)
  %multiply.1044 = f32[128,64,112,112]{1,3,2,0} multiply(f32[128,64,112,112]{1,3,2,0} %multiply.1048, f32[128,64,112,112]{1,3,2,0} %subtract.265)
  ROOT %convert.107 = f16[128,64,112,112]{1,3,2,0} convert(f32[128,64,112,112]{1,3,2,0} %multiply.1044)
}

ENTRY main {
  %get-tuple-element.1532 = f32[64]{0} parameter(0)
  %get-tuple-element.876 = f32[64]{0} parameter(1)
  %get-tuple-element.877 = f32[64]{0} parameter(2)
  %get-tuple-element.1530 = f32[64]{0} parameter(3)
  %arg112.113 = f32[64]{0} parameter(4)
  %get-tuple-element.881 = f32[64]{0} parameter(5)
  %get-tuple-element.872 = f16[128,64,112,112]{1,3,2,0} parameter(6)
  %select-and-scatter.3626 = f16[128,64,112,112]{1,3,2,0} parameter(7)
  %fusion.845 = f16[128,64,112,112]{1,3,2,0} parameter(8)

  ROOT %fusion.1 = f16[128,64,112,112]{1,3,2,0} fusion(f32[64]{0} %get-tuple-element.1532, f32[64]{0} %get-tuple-element.876, f32[64]{0} %get-tuple-element.877, f32[64]{0} %get-tuple-element.1530, f32[64]{0} %arg112.113, f32[64]{0} %get-tuple-element.881, f16[128,64,112,112]{1,3,2,0} %get-tuple-element.872, f16[128,64,112,112]{1,3,2,0} %select-and-scatter.3626, f16[128,64,112,112]{1,3,2,0} %fusion.845), kind=kLoop, calls=%fused_computation.1
}
