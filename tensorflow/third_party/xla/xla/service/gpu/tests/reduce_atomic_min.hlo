// RUN: hlo-opt %s --platform=gpu --stage=llvm-before-optimizations --xla_gpu_target_config_filename=%S/../../../tools/hlo_opt/gpu_specs/%{GPU}.txtpb | FileCheck %s --check-prefixes=CHECK,CHECK-%{PTX}

// Check that for "min" we are still using atomics (CAS loop).

HloModule MinReduce, is_scheduled=true

Min {
  x.1 = f32[] parameter(0)
  y.1 = f32[] parameter(1)
  ROOT min.1 = f32[] minimum(x.1, y.1)
}

fused_computation {
  param_0 = f32[300000]{0} parameter(0)
  param_1 = f32[] parameter(1)
  ROOT reduce.1 = f32[] reduce(f32[300000]{0} param_0, f32[] param_1), dimensions={0}, to_apply=Min
}

ENTRY reduce.1 {
  parameter = f32[300000] parameter(0)
  init_value = f32[] constant(0)
  ROOT wrapped_reduce = f32[] fusion(f32[300000]{0} parameter, f32[] init_value), kind=kInput, calls=fused_computation
}

// CHECK-LABEL: entry:
// CHECK-PTX:     %[[VAL_0:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !4
// CHECK-GCN:     %[[VAL_0:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_1:.*]] = zext i32 %[[VAL_0]] to i64
// CHECK-PTX:     %[[VAL_2:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !4
// CHECK-GCN:     %[[VAL_2:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_3:.*]] = zext i32 %[[VAL_2]] to i64
// CHECK:         %[[VAL_4:.*]] = mul nuw nsw i64 %[[VAL_1]], 1
// CHECK:         %[[VAL_5:.*]] = add nuw nsw i64 %[[VAL_4]], %[[VAL_3]]
// CHECK:         %[[VAL_6:.*]] = icmp ult i64 %[[VAL_5]], 1
// CHECK:         call void @llvm.assume(i1 %[[VAL_6]])
// CHECK:         %[[VAL_7:.*]] = add nuw nsw i64 %[[VAL_5]], 0
// CHECK:         %[[VAL_8:.*]] = icmp ult i64 %[[VAL_5]], 1
// CHECK:         br i1 %[[VAL_8]], label %[[VAL_9:.*]], label %[[VAL_10:.*]]
// CHECK:       wrapped_reduce.in_bounds-after:                   ; preds = %[[VAL_9]], %[[VAL_11:.*]]
// CHECK:         ret void
// CHECK:       wrapped_reduce.in_bounds-true:                    ; preds = %[[VAL_11]]
// CHECK:         %[[VAL_12:.*]] = load float, ptr %[[VAL_13:.*]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_12]], ptr %[[VAL_14:.*]], align 4
// CHECK:         br label %[[VAL_10]]
// CHECK:       entry:
// CHECK:         %[[VAL_15:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_16:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_17:.*]] = alloca float, align 4
// CHECK:         %[[VAL_18:.*]] = alloca float, align 4
// CHECK:         %[[VAL_19:.*]] = alloca float, align 4
// CHECK:         %[[VAL_20:.*]] = alloca float, align 4
// CHECK:         %[[VAL_21:.*]] = alloca float, align 4
// CHECK:         %[[VAL_22:.*]] = alloca float, align 4
// CHECK:         %[[VAL_23:.*]] = alloca float, align 4
// CHECK:         %[[VAL_24:.*]] = alloca float, align 4
// CHECK:         %[[VAL_25:.*]] = alloca float, align 4
// CHECK:         %[[VAL_26:.*]] = alloca float, align 4
// CHECK:         %[[VAL_27:.*]] = alloca float, align 4
// CHECK:         %[[VAL_28:.*]] = alloca float, align 4
// CHECK:         %[[VAL_29:.*]] = alloca float, align 4
// CHECK:         %[[VAL_30:.*]] = alloca float, align 4
// CHECK:         %[[VAL_31:.*]] = alloca float, align 4
// CHECK:         %[[VAL_32:.*]] = alloca float, align 4
// CHECK:         %[[VAL_33:.*]] = alloca float, align 4
// CHECK:         %[[VAL_34:.*]] = alloca float, align 4
// CHECK:         %[[VAL_35:.*]] = alloca float, align 4
// CHECK:         %[[VAL_36:.*]] = alloca float, align 4
// CHECK:         %[[VAL_37:.*]] = alloca float, align 4
// CHECK:         %[[VAL_38:.*]] = alloca float, align 4
// CHECK:         %[[VAL_39:.*]] = alloca float, align 4
// CHECK:         %[[VAL_40:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_41:.*]] = alloca float, align 4
// CHECK:         %[[VAL_42:.*]] = alloca float, align 4
// CHECK:         %[[VAL_43:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_44:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_45:.*]] = alloca float, align 4
// CHECK:         %[[VAL_46:.*]] = alloca float, align 4
// CHECK-PTX:     %[[VAL_47:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !4
// CHECK-GCN:     %[[VAL_47:.*]] = call i32 @llvm.amdgcn.workgroup.id.y
// CHECK:         %[[VAL_48:.*]] = icmp eq i32 %[[VAL_47]], 0
// CHECK:         br i1 %[[VAL_48]], label %[[VAL_49:.*]], label %[[VAL_50:.*]]
// CHECK:       reduce-group-0-after:                             ; preds = %[[VAL_51:.*]], %[[VAL_52:.*]]
// CHECK:         ret void
// CHECK:       reduce-group-0-true:                              ; preds = %[[VAL_52]]
// CHECK:         %[[VAL_53:.*]] = load float, ptr %[[VAL_54:.*]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_53]], ptr %[[VAL_45]], align 4
// CHECK-PTX:     %[[VAL_55:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !6
// CHECK-GCN:     %[[VAL_55:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK-PTX:     %[[VAL_56:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !7
// CHECK-GCN:     %[[VAL_56:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_57:.*]] = udiv i32 %[[VAL_55]], 1024
// CHECK:         %[[VAL_58:.*]] = urem i32 %[[VAL_55]], 1024
// CHECK:         %[[VAL_59:.*]] = udiv i32 %[[VAL_58]], 1024
// CHECK:         %[[VAL_60:.*]] = urem i32 %[[VAL_55]], 1024
// CHECK:         %[[VAL_61:.*]] = mul i32 %[[VAL_60]], 2
// CHECK:         %[[VAL_62:.*]] = urem i32 %[[VAL_55]], 32
// CHECK:         %[[VAL_63:.*]] = udiv i32 %[[VAL_56]], 1
// CHECK:         %[[VAL_64:.*]] = urem i32 %[[VAL_63]], 19
// CHECK:         %[[VAL_65:.*]] = udiv i32 %[[VAL_56]], 19
// CHECK:         %[[VAL_66:.*]] = urem i32 %[[VAL_65]], 1
// CHECK:         %[[VAL_67:.*]] = udiv i32 %[[VAL_56]], 19
// CHECK:         %[[VAL_68:.*]] = icmp eq i32 %[[VAL_64]], 18
// CHECK:         %[[VAL_69:.*]] = select i1 %[[VAL_68]], i32 5088, i32 16384
// CHECK:         %[[VAL_70:.*]] = mul i32 %[[VAL_67]], 1
// CHECK:         %[[VAL_71:.*]] = mul i32 %[[VAL_66]], 1
// CHECK:         %[[VAL_72:.*]] = mul i32 %[[VAL_64]], 16384
// CHECK:         store i32 %[[VAL_59]], ptr %[[VAL_44]], align 4
// CHECK:         br label %[[VAL_73:.*]]
// CHECK:       loop1.loop_header:                                ; preds = %[[VAL_74:.*]], %[[VAL_49]]
// CHECK:         %[[VAL_75:.*]] = load i32, ptr %[[VAL_44]], align 4
// CHECK:         %[[VAL_76:.*]] = icmp uge i32 %[[VAL_75]], 1
// CHECK:         br i1 %[[VAL_76]], label %[[VAL_77:.*]], label %[[VAL_78:.*]]
// CHECK:       loop1.loop_body:                                  ; preds = %[[VAL_73]]
// CHECK:         %[[VAL_79:.*]] = add nuw nsw i32 %[[VAL_75]], 1
// CHECK:         store i32 %[[VAL_79]], ptr %[[VAL_44]], align 4
// CHECK:         %[[VAL_80:.*]] = icmp eq i32 %[[VAL_75]], %[[VAL_59]]
// CHECK:         %[[VAL_81:.*]] = icmp eq i32 16384, %[[VAL_69]]
// CHECK:         br i1 %[[VAL_81]], label %[[VAL_82:.*]], label %[[VAL_83:.*]]
// CHECK:       is_full_tile-after:                               ; preds = %[[VAL_84:.*]], %[[VAL_85:.*]]
// CHECK:         br label %[[VAL_73]], !llvm.loop !8
// CHECK:       loop1.loop_exit:                                  ; preds = %[[VAL_73]]
// CHECK:         %[[VAL_86:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_87:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_86]], i32 16, i32 31)
// CHECK:         store float %[[VAL_87]], ptr %[[VAL_37]], align 4
// CHECK:         call void @[[MIN:Min.*]](ptr %[[VAL_45]], ptr %[[VAL_37]], ptr %[[VAL_36]])
// CHECK:         %[[VAL_88:.*]] = load float, ptr %[[VAL_36]], align 4
// CHECK:         store float %[[VAL_88]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_89:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_90:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_89]], i32 8, i32 31)
// CHECK:         store float %[[VAL_90]], ptr %[[VAL_35]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_35]], ptr %[[VAL_34]])
// CHECK:         %[[VAL_91:.*]] = load float, ptr %[[VAL_34]], align 4
// CHECK:         store float %[[VAL_91]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_92:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_93:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_92]], i32 4, i32 31)
// CHECK:         store float %[[VAL_93]], ptr %[[VAL_33]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_33]], ptr %[[VAL_32]])
// CHECK:         %[[VAL_94:.*]] = load float, ptr %[[VAL_32]], align 4
// CHECK:         store float %[[VAL_94]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_95:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_96:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_95]], i32 2, i32 31)
// CHECK:         store float %[[VAL_96]], ptr %[[VAL_31]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_31]], ptr %[[VAL_30]])
// CHECK:         %[[VAL_97:.*]] = load float, ptr %[[VAL_30]], align 4
// CHECK:         store float %[[VAL_97]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_98:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_99:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_98]], i32 1, i32 31)
// CHECK:         store float %[[VAL_99]], ptr %[[VAL_29]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_29]], ptr %[[VAL_28]])
// CHECK:         %[[VAL_100:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         store float %[[VAL_100]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_101:.*]] = udiv i32 %[[VAL_60]], 32
// CHECK:         %[[VAL_103:.*]] = icmp ult i32 %[[VAL_59]], 1
// CHECK:         br i1 %[[VAL_103]], label %[[VAL_105:.*]], label %[[VAL_51]]
// CHECK:       thread_in_bounds-after:                           ; preds = %[[VAL_106:.*]], %[[VAL_77]]
// CHECK:         br label %[[VAL_50]]
// CHECK:       is_full_tile-true:                                ; preds = %[[VAL_78]]
// CHECK:         store i32 0, ptr %[[VAL_43]], align 4
// CHECK:         br label %[[VAL_107:.*]]
// CHECK:       loop2.loop_header:                                ; preds = %[[VAL_108:.*]], %[[VAL_82]]
// CHECK:         %[[VAL_109:.*]] = load i32, ptr %[[VAL_43]], align 4
// CHECK:         %[[VAL_110:.*]] = icmp uge i32 %[[VAL_109]], 8
// CHECK:         br i1 %[[VAL_110]], label %[[VAL_85]], label %[[VAL_108]]
// CHECK:       loop2.loop_body:                                  ; preds = %[[VAL_107]]
// CHECK:         %[[VAL_111:.*]] = add nuw nsw i32 %[[VAL_109]], 1
// CHECK:         store i32 %[[VAL_111]], ptr %[[VAL_43]], align 4
// CHECK:         %[[VAL_112:.*]] = icmp eq i32 %[[VAL_109]], 0
// CHECK:         %[[VAL_113:.*]] = mul i32 %[[VAL_109]], 2048
// CHECK:         %[[VAL_114:.*]] = add i32 %[[VAL_113]], 0
// CHECK:         %[[VAL_115:.*]] = add i32 %[[VAL_114]], %[[VAL_61]]
// CHECK:         %[[VAL_116:.*]] = add i32 %[[VAL_70]], 0
// CHECK:         %[[VAL_117:.*]] = add i32 %[[VAL_71]], %[[VAL_75]]
// CHECK:         %[[VAL_118:.*]] = add i32 %[[VAL_72]], %[[VAL_115]]
// CHECK:         %[[VAL_119:.*]] = getelementptr inbounds [300000 x float], ptr %[[VAL_120:.*]], i32 0, i32 %[[VAL_118]]
// CHECK:         %[[VAL_121:.*]] = load float, ptr %[[VAL_119]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_121]], ptr %[[VAL_46]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_46]], ptr %[[VAL_42]])
// CHECK:         %[[VAL_123:.*]] = load float, ptr %[[VAL_42]], align 4
// CHECK:         store float %[[VAL_123]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_124:.*]] = mul i32 %[[VAL_109]], 2048
// CHECK:         %[[VAL_125:.*]] = add i32 %[[VAL_124]], 1
// CHECK:         %[[VAL_126:.*]] = add i32 %[[VAL_125]], %[[VAL_61]]
// CHECK:         %[[VAL_127:.*]] = add i32 %[[VAL_70]], 0
// CHECK:         %[[VAL_128:.*]] = add i32 %[[VAL_71]], %[[VAL_75]]
// CHECK:         %[[VAL_129:.*]] = add i32 %[[VAL_72]], %[[VAL_126]]
// CHECK:         %[[VAL_130:.*]] = getelementptr inbounds [300000 x float], ptr %[[VAL_120]], i32 0, i32 %[[VAL_129]]
// CHECK:         %[[VAL_131:.*]] = load float, ptr %[[VAL_130]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_131]], ptr %[[VAL_46]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_46]], ptr %[[VAL_41]])
// CHECK:         %[[VAL_133:.*]] = load float, ptr %[[VAL_41]], align 4
// CHECK:         store float %[[VAL_133]], ptr %[[VAL_45]], align 4
// CHECK:         br label %[[VAL_107]], !llvm.loop !10
// CHECK:       loop2.loop_exit:                                  ; preds = %[[VAL_107]]
// CHECK:         br label %[[VAL_74]]
// CHECK:       is_full_tile-false:                               ; preds = %[[VAL_78]]
// CHECK:         store i32 0, ptr %[[VAL_40]], align 4
// CHECK:         br label %[[VAL_134:.*]]
// CHECK:       loop2.loop_header7:                               ; preds = %[[VAL_135:.*]], %[[VAL_83]]
// CHECK:         %[[VAL_136:.*]] = load i32, ptr %[[VAL_40]], align 4
// CHECK:         %[[VAL_137:.*]] = icmp uge i32 %[[VAL_136]], 8
// CHECK:         br i1 %[[VAL_137]], label %[[VAL_84]], label %[[VAL_138:.*]]
// CHECK:       loop2.loop_body8:                                 ; preds = %[[VAL_134]]
// CHECK:         %[[VAL_139:.*]] = add nuw nsw i32 %[[VAL_136]], 1
// CHECK:         store i32 %[[VAL_139]], ptr %[[VAL_40]], align 4
// CHECK:         %[[VAL_140:.*]] = icmp eq i32 %[[VAL_136]], 0
// CHECK:         %[[VAL_141:.*]] = mul i32 %[[VAL_136]], 2048
// CHECK:         %[[VAL_142:.*]] = add i32 %[[VAL_141]], 0
// CHECK:         %[[VAL_143:.*]] = add i32 %[[VAL_142]], %[[VAL_61]]
// CHECK:         %[[VAL_144:.*]] = icmp ult i32 %[[VAL_143]], %[[VAL_69]]
// CHECK:         br i1 %[[VAL_144]], label %[[VAL_145:.*]], label %[[VAL_146:.*]]
// CHECK:       x_in_tile-after:                                  ; preds = %[[VAL_145]], %[[VAL_138]]
// CHECK:         %[[VAL_147:.*]] = mul i32 %[[VAL_136]], 2048
// CHECK:         %[[VAL_148:.*]] = add i32 %[[VAL_147]], 1
// CHECK:         %[[VAL_149:.*]] = add i32 %[[VAL_148]], %[[VAL_61]]
// CHECK:         %[[VAL_150:.*]] = icmp ult i32 %[[VAL_149]], %[[VAL_69]]
// CHECK:         br i1 %[[VAL_150]], label %[[VAL_151:.*]], label %[[VAL_135]]
// CHECK:       x_in_tile-after16:                                ; preds = %[[VAL_151]], %[[VAL_146]]
// CHECK:         br label %[[VAL_134]], !llvm.loop !12
// CHECK:       loop2.loop_exit6:                                 ; preds = %[[VAL_134]]
// CHECK:         br label %[[VAL_74]]
// CHECK:       x_in_tile-true:                                   ; preds = %[[VAL_138]]
// CHECK:         %[[VAL_152:.*]] = add i32 %[[VAL_70]], 0
// CHECK:         %[[VAL_153:.*]] = add i32 %[[VAL_71]], %[[VAL_75]]
// CHECK:         %[[VAL_154:.*]] = add i32 %[[VAL_72]], %[[VAL_143]]
// CHECK:         %[[VAL_155:.*]] = getelementptr inbounds [300000 x float], ptr %[[VAL_120]], i32 0, i32 %[[VAL_154]]
// CHECK:         %[[VAL_156:.*]] = load float, ptr %[[VAL_155]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_156]], ptr %[[VAL_46]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_46]], ptr %[[VAL_39]])
// CHECK:         %[[VAL_158:.*]] = load float, ptr %[[VAL_39]], align 4
// CHECK:         store float %[[VAL_158]], ptr %[[VAL_45]], align 4
// CHECK:         br label %[[VAL_146]]
// CHECK:       x_in_tile-true15:                                 ; preds = %[[VAL_146]]
// CHECK:         %[[VAL_159:.*]] = add i32 %[[VAL_70]], 0
// CHECK:         %[[VAL_160:.*]] = add i32 %[[VAL_71]], %[[VAL_75]]
// CHECK:         %[[VAL_161:.*]] = add i32 %[[VAL_72]], %[[VAL_149]]
// CHECK:         %[[VAL_162:.*]] = getelementptr inbounds [300000 x float], ptr %[[VAL_120]], i32 0, i32 %[[VAL_161]]
// CHECK:         %[[VAL_163:.*]] = load float, ptr %[[VAL_162]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_163]], ptr %[[VAL_46]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_46]], ptr %[[VAL_38]])
// CHECK:         %[[VAL_165:.*]] = load float, ptr %[[VAL_38]], align 4
// CHECK:         store float %[[VAL_165]], ptr %[[VAL_45]], align 4
// CHECK:         br label %[[VAL_135]]
// CHECK:       thread_in_bounds-true:                            ; preds = %[[VAL_77]]
// CHECK:         %[[VAL_166:.*]] = icmp eq i32 %[[VAL_62]], 0
// CHECK:         br i1 %[[VAL_166]], label %[[VAL_167:.*]], label %[[VAL_168:.*]]
// CHECK:       intra_warp_reduce_write-after:                    ; preds = %[[VAL_167]], %[[VAL_105]]
// CHECK:         call void @llvm.nvvm.barrier0()
// CHECK:         %[[VAL_169:.*]] = icmp eq i32 %[[VAL_101]], 0
// CHECK:         br i1 %[[VAL_169]], label %[[VAL_170:.*]], label %[[VAL_106]]
// CHECK:       inter_warp_reduce-after:                          ; preds = %[[VAL_171:.*]], %[[VAL_168]]
// CHECK:         br label %[[VAL_51]]
// CHECK:       intra_warp_reduce_write-true:                     ; preds = %[[VAL_105]]
// CHECK:         %[[VAL_172:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_173:.*]] = getelementptr inbounds [1 x [32 x float]], ptr addrspace(3) @shared_cache, i32 0, i32 %[[VAL_59]], i32 %[[VAL_101]]
// CHECK:         %[[VAL_174:.*]] = addrspacecast ptr addrspace(3) %[[VAL_173]] to ptr
// CHECK:         store float %[[VAL_172]], ptr %[[VAL_174]], align 4
// CHECK:         br label %[[VAL_168]]
// CHECK:       inter_warp_reduce-true:                           ; preds = %[[VAL_168]]
// CHECK:         %[[VAL_175:.*]] = getelementptr inbounds [1 x [32 x float]], ptr addrspace(3) @shared_cache, i32 0, i32 %[[VAL_59]], i32 %[[VAL_62]]
// CHECK:         %[[VAL_176:.*]] = addrspacecast ptr addrspace(3) %[[VAL_175]] to ptr
// CHECK:         store float %[[VAL_53]], ptr %[[VAL_27]], align 4
// CHECK:         %[[VAL_177:.*]] = icmp ult i32 %[[VAL_60]], 32
// CHECK:         %[[VAL_178:.*]] = select i1 %[[VAL_177]], ptr %[[VAL_176]], ptr %[[VAL_27]]
// CHECK:         %[[VAL_179:.*]] = load float, ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_180:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_179]], i32 16, i32 31)
// CHECK:         store float %[[VAL_180]], ptr %[[VAL_26]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_178]], ptr %[[VAL_26]], ptr %[[VAL_25]])
// CHECK:         %[[VAL_181:.*]] = load float, ptr %[[VAL_25]], align 4
// CHECK:         store float %[[VAL_181]], ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_182:.*]] = load float, ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_183:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_182]], i32 8, i32 31)
// CHECK:         store float %[[VAL_183]], ptr %[[VAL_24]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_178]], ptr %[[VAL_24]], ptr %[[VAL_23]])
// CHECK:         %[[VAL_184:.*]] = load float, ptr %[[VAL_23]], align 4
// CHECK:         store float %[[VAL_184]], ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_185:.*]] = load float, ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_186:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_185]], i32 4, i32 31)
// CHECK:         store float %[[VAL_186]], ptr %[[VAL_22]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_178]], ptr %[[VAL_22]], ptr %[[VAL_21]])
// CHECK:         %[[VAL_187:.*]] = load float, ptr %[[VAL_21]], align 4
// CHECK:         store float %[[VAL_187]], ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_188:.*]] = load float, ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_189:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_188]], i32 2, i32 31)
// CHECK:         store float %[[VAL_189]], ptr %[[VAL_20]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_178]], ptr %[[VAL_20]], ptr %[[VAL_19]])
// CHECK:         %[[VAL_190:.*]] = load float, ptr %[[VAL_19]], align 4
// CHECK:         store float %[[VAL_190]], ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_191:.*]] = load float, ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_192:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_191]], i32 1, i32 31)
// CHECK:         store float %[[VAL_192]], ptr %[[VAL_18]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_178]], ptr %[[VAL_18]], ptr %[[VAL_17]])
// CHECK:         %[[VAL_193:.*]] = load float, ptr %[[VAL_17]], align 4
// CHECK:         store float %[[VAL_193]], ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_194:.*]] = icmp eq i32 %[[VAL_60]], 0
// CHECK:         br i1 %[[VAL_194]], label %[[VAL_195:.*]], label %[[VAL_171]]
// CHECK:       reduction_write_output-after:                     ; preds = %[[VAL_196:.*]], %[[VAL_170]]
// CHECK:         br label %[[VAL_106]]
// CHECK:       reduction_write_output-true:                      ; preds = %[[VAL_170]]
// CHECK:         %[[VAL_197:.*]] = add i32 %[[VAL_70]], %[[VAL_57]]
// CHECK:         %[[VAL_198:.*]] = add i32 %[[VAL_71]], %[[VAL_59]]
// CHECK:         %[[VAL_199:.*]] = add i32 %[[VAL_72]], %[[VAL_61]]
// CHECK:         %[[VAL_200:.*]] = load float, ptr %[[VAL_178]], align 4
// CHECK:         %[[VAL_201:.*]] = load i32, ptr %[[VAL_202:.*]], align 4
// CHECK:         store i32 %[[VAL_201]], ptr %[[VAL_16]], align 4
// CHECK:         br label %[[VAL_203:.*]]
// CHECK:       atomic_op_loop_exit:                              ; preds = %[[VAL_204:.*]], %[[VAL_203]]
// CHECK:         br label %[[VAL_171]]
// CHECK:       atomic_op_loop_body:                              ; preds = %[[VAL_204]], %[[VAL_195]]
// CHECK:         %[[VAL_205:.*]] = load i32, ptr %[[VAL_16]], align 4
// CHECK:         store i32 %[[VAL_205]], ptr %[[VAL_15]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_15]], ptr %[[VAL_178]], ptr %[[VAL_15]])
// CHECK:         %[[VAL_206:.*]] = load i32, ptr %[[VAL_15]], align 4
// CHECK:         %[[VAL_207:.*]] = icmp eq i32 %[[VAL_205]], %[[VAL_206]]
// CHECK:         br i1 %[[VAL_207]], label %[[VAL_196]], label %[[VAL_204]]
// CHECK:       atomic_op_loop_cas:                               ; preds = %[[VAL_203]]
// CHECK:         %[[VAL_208:.*]] = cmpxchg ptr %[[VAL_202]], i32 %[[VAL_205]], i32 %[[VAL_206]] seq_cst seq_cst, align 4
// CHECK:         %[[VAL_209:.*]] = extractvalue { i32, i1 } %[[VAL_208]], 0
// CHECK:         store i32 %[[VAL_209]], ptr %[[VAL_16]], align 4
// CHECK:         %[[VAL_210:.*]] = extractvalue { i32, i1 } %[[VAL_208]], 1
// CHECK:         br i1 %[[VAL_210]], label %[[VAL_196]], label %[[VAL_203]]
// CHECK:       entry:
// CHECK:         %[[VAL_211:.*]] = alloca float, align 4
// CHECK:         %[[VAL_212:.*]] = load float, ptr %[[VAL_213:.*]], align 4
// CHECK:         %[[VAL_214:.*]] = load float, ptr %[[VAL_215:.*]], align 4
// CHECK:         %[[VAL_216:.*]] = call float @llvm.minimum.f32(float %[[VAL_212]], float %[[VAL_214]])
// CHECK:         store float %[[VAL_216]], ptr %[[VAL_211]], align 4
// CHECK:         %[[VAL_217:.*]] = load float, ptr %[[VAL_211]], align 4
// CHECK:         store float %[[VAL_217]], ptr %[[VAL_218:.*]], align 4
// CHECK:         ret void
