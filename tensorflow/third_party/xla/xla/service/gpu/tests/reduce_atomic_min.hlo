// RUN: hlo-opt %s --platform=gpu --stage=llvm-before-optimizations --xla_gpu_target_config_filename=%S/../../../tools/hlo_opt/gpu_specs/%{GPU}.txtpb | FileCheck %s --check-prefixes=CHECK,CHECK-%{PTX}

// Check that for "min" we are still using atomics (CAS loop).

HloModule MinReduce, is_scheduled=true

Min {
  x.1 = f32[] parameter(0)
  y.1 = f32[] parameter(1)
  ROOT min.1 = f32[] minimum(x.1, y.1)
}

fused_computation {
  param_0 = f32[300000]{0} parameter(0)
  param_1 = f32[] parameter(1)
  ROOT reduce.1 = f32[] reduce(f32[300000]{0} param_0, f32[] param_1), dimensions={0}, to_apply=Min
}

ENTRY reduce.1 {
  parameter = f32[300000] parameter(0)
  init_value = f32[] constant(0)
  ROOT wrapped_reduce = f32[] fusion(f32[300000]{0} parameter, f32[] init_value), kind=kInput, calls=fused_computation
}

// CHECK-LABEL: entry:
// CHECK-PTX:     %[[VAL_0:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !4
// CHECK-GCN:     %[[VAL_0:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_1:.*]] = zext i32 %[[VAL_0]] to i64
// CHECK-PTX:     %[[VAL_2:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !4
// CHECK-GCN:     %[[VAL_2:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_3:.*]] = zext i32 %[[VAL_2]] to i64
// CHECK:         %[[VAL_4:.*]] = mul nuw nsw i64 %[[VAL_1]], 1
// CHECK:         %[[VAL_5:.*]] = add nuw nsw i64 %[[VAL_4]], %[[VAL_3]]
// CHECK:         %[[VAL_6:.*]] = icmp ult i64 %[[VAL_5]], 1
// CHECK:         call void @llvm.assume(i1 %[[VAL_6]])
// CHECK:         %[[VAL_7:.*]] = add nuw nsw i64 %[[VAL_5]], 0
// CHECK:         %[[VAL_8:.*]] = icmp ult i64 %[[VAL_5]], 1
// CHECK:         br i1 %[[VAL_8]], label %[[VAL_9:.*]], label %[[VAL_10:.*]]
// CHECK:       wrapped_reduce.in_bounds-after:                   ; preds = %[[VAL_9]], %[[VAL_11:.*]]
// CHECK:         ret void
// CHECK:       wrapped_reduce.in_bounds-true:                    ; preds = %[[VAL_11]]
// CHECK:         %[[VAL_12:.*]] = load float, ptr %[[VAL_13:.*]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_12]], ptr %[[VAL_14:.*]], align 4
// CHECK:         br label %[[VAL_10]]
// CHECK:       entry:
// CHECK:         %[[VAL_15:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_16:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_17:.*]] = alloca float, align 4
// CHECK:         %[[VAL_18:.*]] = alloca float, align 4
// CHECK:         %[[VAL_19:.*]] = alloca float, align 4
// CHECK:         %[[VAL_20:.*]] = alloca float, align 4
// CHECK:         %[[VAL_21:.*]] = alloca float, align 4
// CHECK:         %[[VAL_22:.*]] = alloca float, align 4
// CHECK:         %[[VAL_23:.*]] = alloca float, align 4
// CHECK:         %[[VAL_24:.*]] = alloca float, align 4
// CHECK:         %[[VAL_25:.*]] = alloca float, align 4
// CHECK:         %[[VAL_26:.*]] = alloca float, align 4
// CHECK:         %[[VAL_27:.*]] = alloca float, align 4
// CHECK:         %[[VAL_28:.*]] = alloca float, align 4
// CHECK:         %[[VAL_29:.*]] = alloca float, align 4
// CHECK:         %[[VAL_30:.*]] = alloca float, align 4
// CHECK:         %[[VAL_31:.*]] = alloca float, align 4
// CHECK:         %[[VAL_32:.*]] = alloca float, align 4
// CHECK:         %[[VAL_33:.*]] = alloca float, align 4
// CHECK:         %[[VAL_34:.*]] = alloca float, align 4
// CHECK:         %[[VAL_35:.*]] = alloca float, align 4
// CHECK:         %[[VAL_36:.*]] = alloca float, align 4
// CHECK:         %[[VAL_37:.*]] = alloca float, align 4
// CHECK:         %[[VAL_38:.*]] = alloca float, align 4
// CHECK:         %[[VAL_39:.*]] = alloca float, align 4
// CHECK:         %[[VAL_40:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_41:.*]] = alloca float, align 4
// CHECK:         %[[VAL_42:.*]] = alloca float, align 4
// CHECK:         %[[VAL_43:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_44:.*]] = alloca i32, align 4
// CHECK:         %[[VAL_45:.*]] = alloca float, align 4
// CHECK:         %[[VAL_46:.*]] = alloca float, align 4
// CHECK-PTX:     %[[VAL_47:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !4
// CHECK-GCN:     %[[VAL_56:.*]] = call i32 @llvm.amdgcn.workgroup.id.y
// CHECK:         %[[VAL_48:.*]] = icmp eq i32 %[[VAL_47]], 0
// CHECK:         br i1 %[[VAL_48]], label %[[VAL_49:.*]], label %[[VAL_50:.*]]
// CHECK:       reduce-group-0-after:                             ; preds = %[[VAL_51:.*]], %[[VAL_52:.*]]
// CHECK:         ret void
// CHECK:       reduce-group-0-true:                              ; preds = %[[VAL_52]]
// CHECK:         %[[VAL_53:.*]] = load float, ptr %[[VAL_54:.*]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_53]], ptr %[[VAL_45]], align 4
// CHECK-PTX:     %[[VAL_55:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !6
// CHECK-GCN:     %[[VAL_55:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK-PTX:     %[[VAL_56:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !7
// CHECK-GCN:     %[[VAL_56:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_57:.*]] = urem i32 %[[VAL_55]], 1024
// CHECK:         %[[VAL_58:.*]] = udiv i32 %[[VAL_55]], 1024
// CHECK:         %[[VAL_59:.*]] = mul i32 %[[VAL_56]], 1
// CHECK:         %[[VAL_60:.*]] = add i32 %[[VAL_59]], %[[VAL_58]]
// CHECK:         %[[VAL_61:.*]] = icmp ult i32 %[[VAL_60]], 19
// CHECK:         br i1 %[[VAL_61]], label %[[VAL_62:.*]], label %[[VAL_63:.*]]
// CHECK:       9:                                                ; preds = %[[VAL_49]]
// CHECK:         %[[VAL_65:.*]] = udiv i32 %[[VAL_57]], 1024
// CHECK:         %[[VAL_64:.*]] = urem i32 %[[VAL_57]], 1024
// CHECK:         %[[VAL_114:.*]] = mul i32 %[[VAL_64]], 2
// CHECK:         %[[VAL_66:.*]] = urem i32 %[[VAL_57]], 32
// CHECK:         %[[VAL_67:.*]] = udiv i32 %[[VAL_60]], 1
// CHECK:         %[[VAL_68:.*]] = urem i32 %[[VAL_67]], 19
// CHECK:         %[[VAL_69:.*]] = udiv i32 %[[VAL_60]], 19
// CHECK:         %[[VAL_70:.*]] = urem i32 %[[VAL_69]], 1
// CHECK:         %[[VAL_71:.*]] = udiv i32 %[[VAL_60]], 19
// CHECK:         %[[VAL_74:.*]] = icmp eq i32 %[[VAL_68]], 18
// CHECK:         %[[VAL_75:.*]] = select i1 %[[VAL_74]], i32 5088, i32 16384
// CHECK:         %[[VAL_76:.*]] = mul i32 %[[VAL_71]], 1
// CHECK:         %[[VAL_77:.*]] = mul i32 %[[VAL_70]], 1
// CHECK:         %[[VAL_78:.*]] = mul i32 %[[VAL_68]], 16384
// CHECK:         store i32 %[[VAL_65]], ptr %[[VAL_44]], align 4
// CHECK:         br label %[[VAL_79:.*]]
// CHECK:       loop1.loop_header:                            ; preds = %[[VAL_80:.*]], %[[VAL_62]]
// CHECK:         %[[VAL_81:.*]] = load i32, ptr %[[VAL_44]], align 4
// CHECK:         %[[VAL_82:.*]] = icmp uge i32 %[[VAL_81]], 1
// CHECK:         br i1 %[[VAL_82]], label %[[VAL_83:.*]], label %[[VAL_84:.*]]
// CHECK:       loop1.loop_body:                              ; preds = %[[VAL_79]]
// CHECK:         %[[VAL_85:.*]] = add nuw nsw i32 %[[VAL_81]], 1
// CHECK:         store i32 %[[VAL_85]], ptr %[[VAL_44]], align 4
// CHECK:         %[[VAL_86:.*]] = icmp eq i32 %[[VAL_81]], %[[VAL_65]]
// CHECK:         %[[VAL_87:.*]] = icmp eq i32 16384, %[[VAL_75]]
// CHECK:         br i1 %[[VAL_87]], label %[[VAL_88:.*]], label %[[VAL_89:.*]]
// CHECK:       is_full_tile-after:                               ; preds = %[[VAL_90:.*]], %[[VAL_91:.*]]
// CHECK:         br label %[[VAL_79]], !llvm.loop !8
// CHECK:       loop1.loop_exit:                              ; preds = %[[VAL_79]]
// CHECK:         %[[VAL_92:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_93:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_92]], i32 16, i32 31)
// CHECK:         store float %[[VAL_93]], ptr %[[VAL_37]], align 4
// CHECK:         call void @[[MIN:Min.*]](ptr %[[VAL_45]], ptr %[[VAL_37]], ptr %[[VAL_36]])
// CHECK:         %[[VAL_94:.*]] = load float, ptr %[[VAL_36]], align 4
// CHECK:         store float %[[VAL_94]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_95:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_96:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_95]], i32 8, i32 31)
// CHECK:         store float %[[VAL_96]], ptr %[[VAL_35]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_35]], ptr %[[VAL_34]])
// CHECK:         %[[VAL_97:.*]] = load float, ptr %[[VAL_34]], align 4
// CHECK:         store float %[[VAL_97]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_98:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_99:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_98]], i32 4, i32 31)
// CHECK:         store float %[[VAL_99]], ptr %[[VAL_33]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_33]], ptr %[[VAL_32]])
// CHECK:         %[[VAL_100:.*]] = load float, ptr %[[VAL_32]], align 4
// CHECK:         store float %[[VAL_100]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_101:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_102:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_101]], i32 2, i32 31)
// CHECK:         store float %[[VAL_102]], ptr %[[VAL_31]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_31]], ptr %[[VAL_30]])
// CHECK:         %[[VAL_103:.*]] = load float, ptr %[[VAL_30]], align 4
// CHECK:         store float %[[VAL_103]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_104:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_105:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_104]], i32 1, i32 31)
// CHECK:         store float %[[VAL_105]], ptr %[[VAL_29]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_45]], ptr %[[VAL_29]], ptr %[[VAL_28]])
// CHECK:         %[[VAL_106:.*]] = load float, ptr %[[VAL_28]], align 4
// CHECK:         store float %[[VAL_106]], ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_107:.*]] = udiv i32 %[[VAL_64]], 32
// CHECK:         %[[VAL_108:.*]] = icmp eq i32 %[[VAL_66]], 0
// CHECK:         br i1 %[[VAL_108]], label %[[VAL_109:.*]], label %[[VAL_110:.*]]
// CHECK:       intra_warp_reduce_write-after:                    ; preds = %[[VAL_109]], %[[VAL_83]]
// CHECK:         call void @llvm.nvvm.barrier0()
// CHECK:         %[[VAL_111:.*]] = icmp eq i32 %[[VAL_107]], 0
// CHECK:         br i1 %[[VAL_111]], label %[[VAL_112:.*]], label %[[VAL_51]]
// CHECK:       inter_warp_reduce-after:                          ; preds = %[[VAL_113:.*]], %[[VAL_110]]
// CHECK:         br label %[[VAL_50]]
// CHECK:       early_return:                                     ; preds = %[[VAL_49]]
// CHECK:         ret void
// CHECK:       is_full_tile-true:                                ; preds = %[[VAL_84]]
// CHECK:         store i32 0, ptr %[[VAL_43]], align 4
// CHECK:         br label %[[VAL_115:.*]]
// CHECK:       loop2.loop_header:                            ; preds = %[[VAL_116:.*]], %[[VAL_88]]
// CHECK:         %[[VAL_117:.*]] = load i32, ptr %[[VAL_43]], align 4
// CHECK:         %[[VAL_118:.*]] = icmp uge i32 %[[VAL_117]], 8
// CHECK:         br i1 %[[VAL_118]], label %[[VAL_91]], label %[[VAL_116]]
// CHECK:       loop2.loop_body:                              ; preds = %[[VAL_115]]
// CHECK:         %[[VAL_119:.*]] = add nuw nsw i32 %[[VAL_117]], 1
// CHECK:         store i32 %[[VAL_119]], ptr %[[VAL_43]], align 4
// CHECK:         %[[VAL_120:.*]] = icmp eq i32 %[[VAL_117]], 0
// CHECK:         %[[VAL_121:.*]] = mul i32 %[[VAL_117]], 2048
// CHECK:         %[[VAL_122:.*]] = add i32 %[[VAL_121]], 0
// CHECK:         %[[VAL_123:.*]] = add i32 %[[VAL_122]], %[[VAL_114]]
// CHECK:         %[[VAL_124:.*]] = add i32 %[[VAL_77]], %[[VAL_81]]
// CHECK:         %[[VAL_125:.*]] = add i32 %[[VAL_78]], %[[VAL_123]]
// CHECK:         %[[VAL_126:.*]] = getelementptr inbounds [300000 x float], ptr %[[VAL_127:.*]], i32 0, i32 %[[VAL_125]]
// CHECK:         %[[VAL_128:.*]] = load float, ptr %[[VAL_126]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_128]], ptr %[[VAL_46]], align 4
// CHECK:         %[[VAL_129:.*]] = getelementptr inbounds float, ptr %[[VAL_45]], i32 0
// CHECK:         call void @[[MIN]](ptr %[[VAL_129]], ptr %[[VAL_46]], ptr %[[VAL_42]])
// CHECK:         %[[VAL_130:.*]] = load float, ptr %[[VAL_42]], align 4
// CHECK:         store float %[[VAL_130]], ptr %[[VAL_129]], align 4
// CHECK:         %[[VAL_131:.*]] = mul i32 %[[VAL_117]], 2048
// CHECK:         %[[VAL_132:.*]] = add i32 %[[VAL_131]], 1
// CHECK:         %[[VAL_133:.*]] = add i32 %[[VAL_132]], %[[VAL_114]]
// CHECK:         %[[VAL_134:.*]] = add i32 %[[VAL_77]], %[[VAL_81]]
// CHECK:         %[[VAL_135:.*]] = add i32 %[[VAL_78]], %[[VAL_133]]
// CHECK:         %[[VAL_136:.*]] = getelementptr inbounds [300000 x float], ptr %[[VAL_127]], i32 0, i32 %[[VAL_135]]
// CHECK:         %[[VAL_137:.*]] = load float, ptr %[[VAL_136]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_137]], ptr %[[VAL_46]], align 4
// CHECK:         %[[VAL_138:.*]] = getelementptr inbounds float, ptr %[[VAL_45]], i32 0
// CHECK:         call void @[[MIN]](ptr %[[VAL_138]], ptr %[[VAL_46]], ptr %[[VAL_41]])
// CHECK:         %[[VAL_139:.*]] = load float, ptr %[[VAL_41]], align 4
// CHECK:         store float %[[VAL_139]], ptr %[[VAL_138]], align 4
// CHECK:         br label %[[VAL_115]], !llvm.loop !10
// CHECK:       loop2.loop_exit:                              ; preds = %[[VAL_115]]
// CHECK:         br label %[[VAL_80]]
// CHECK:       is_full_tile-false:                               ; preds = %[[VAL_84]]
// CHECK:         store i32 0, ptr %[[VAL_40]], align 4
// CHECK:         br label %[[VAL_141:.*]]
// CHECK:       loop2.loop_header7:                           ; preds = %[[VAL_142:.*]], %[[VAL_89]]
// CHECK:         %[[VAL_143:.*]] = load i32, ptr %[[VAL_40]], align 4
// CHECK:         %[[VAL_144:.*]] = icmp uge i32 %[[VAL_143]], 8
// CHECK:         br i1 %[[VAL_144]], label %[[VAL_90]], label %[[VAL_145:.*]]
// CHECK:       loop2.loop_body8:                            ; preds = %[[VAL_141]]
// CHECK:         %[[VAL_146:.*]] = add nuw nsw i32 %[[VAL_143]], 1
// CHECK:         store i32 %[[VAL_146]], ptr %[[VAL_40]], align 4
// CHECK:         %[[VAL_147:.*]] = icmp eq i32 %[[VAL_143]], 0
// CHECK:         %[[VAL_148:.*]] = mul i32 %[[VAL_143]], 2048
// CHECK:         %[[VAL_149:.*]] = add i32 %[[VAL_148]], 0
// CHECK:         %[[VAL_150:.*]] = add i32 %[[VAL_149]], %[[VAL_114]]
// CHECK:         %[[VAL_151:.*]] = icmp ult i32 %[[VAL_150]], %[[VAL_75]]
// CHECK:         br i1 %[[VAL_151]], label %[[VAL_152:.*]], label %[[VAL_153:.*]]
// CHECK:       x_in_tile-after:                                  ; preds = %[[VAL_152]], %[[VAL_145]]
// CHECK:         %[[VAL_154:.*]] = mul i32 %[[VAL_143]], 2048
// CHECK:         %[[VAL_155:.*]] = add i32 %[[VAL_154]], 1
// CHECK:         %[[VAL_156:.*]] = add i32 %[[VAL_155]], %[[VAL_114]]
// CHECK:         %[[VAL_157:.*]] = icmp ult i32 %[[VAL_156]], %[[VAL_75]]
// CHECK:         br i1 %[[VAL_157]], label %[[VAL_158:.*]], label %[[VAL_142]]
// CHECK:       x_in_tile-after16:                                ; preds = %[[VAL_158]], %[[VAL_153]]
// CHECK:         br label %[[VAL_141]], !llvm.loop !12
// CHECK:       loop2.loop_exit6:                             ; preds = %[[VAL_141]]
// CHECK:         br label %is_full_tile-after
// CHECK:       x_in_tile-true:                                   ; preds = %[[VAL_145]]
// CHECK:         %[[VAL_159:.*]] = add i32 %[[VAL_77]], %[[VAL_81]]
// CHECK:         %[[VAL_160:.*]] = add i32 %[[VAL_78]], %[[VAL_150]]
// CHECK:         %[[VAL_161:.*]] = getelementptr inbounds [300000 x float], ptr %[[VAL_127]], i32 0, i32 %[[VAL_160]]
// CHECK:         %[[VAL_162:.*]] = load float, ptr %[[VAL_161]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_162]], ptr %[[VAL_46]], align 4
// CHECK:         %[[VAL_163:.*]] = getelementptr inbounds float, ptr %[[VAL_45]], i32 0
// CHECK:         call void @[[MIN]](ptr %[[VAL_163]], ptr %[[VAL_46]], ptr %[[VAL_39]])
// CHECK:         %[[VAL_164:.*]] = load float, ptr %[[VAL_39]], align 4
// CHECK:         store float %[[VAL_164]], ptr %[[VAL_163]], align 4
// CHECK:         br label %[[VAL_153]]
// CHECK:       x_in_tile-true15:                                 ; preds = %[[VAL_153]]
// CHECK:         %[[VAL_165:.*]] = add i32 %[[VAL_77]], %[[VAL_81]]
// CHECK:         %[[VAL_166:.*]] = add i32 %[[VAL_78]], %[[VAL_156]]
// CHECK:         %[[VAL_167:.*]] = getelementptr inbounds [300000 x float], ptr %[[VAL_127]], i32 0, i32 %[[VAL_166]]
// CHECK:         %[[VAL_168:.*]] = load float, ptr %[[VAL_167]], align 4, !invariant.load !5
// CHECK:         store float %[[VAL_168]], ptr %[[VAL_46]], align 4
// CHECK:         %[[VAL_169:.*]] = getelementptr inbounds float, ptr %[[VAL_45]], i32 0
// CHECK:         call void @[[MIN]](ptr %[[VAL_169]], ptr %[[VAL_46]], ptr %[[VAL_38]])
// CHECK:         %[[VAL_170:.*]] = load float, ptr %[[VAL_38]], align 4
// CHECK:         store float %[[VAL_170]], ptr %[[VAL_169]], align 4
// CHECK:         br label %[[VAL_142]]
// CHECK:       intra_warp_reduce_write-true:
// CHECK:         %[[VAL_173:.*]] = load float, ptr %[[VAL_45]], align 4
// CHECK:         %[[VAL_171:.*]] = getelementptr inbounds [1 x [32 x float]], ptr addrspace(3) @shared_cache, i32 0, i32 %[[VAL_58]], i32 %[[VAL_107]]
// CHECK:         %[[VAL_172:.*]] = addrspacecast ptr addrspace(3) %[[VAL_171]] to ptr
// CHECK:         store float %[[VAL_173]], ptr %[[VAL_172]], align 4
// CHECK:         br label %[[VAL_110]]
// CHECK:       inter_warp_reduce-true:                           ; preds = %[[VAL_110]]
// CHECK:         %[[VAL_174:.*]] = getelementptr inbounds [1 x [32 x float]], ptr addrspace(3) @shared_cache, i32 0, i32 %[[VAL_58]], i32 %[[VAL_66]]
// CHECK:         %[[VAL_175:.*]] = addrspacecast ptr addrspace(3) %[[VAL_174]] to ptr
// CHECK:         store float %[[VAL_53]], ptr %[[VAL_27]], align 4
// CHECK:         %[[VAL_176:.*]] = icmp ult i32 %[[VAL_64]], 32
// CHECK:         %[[VAL_177:.*]] = select i1 %[[VAL_176]], ptr %[[VAL_175]], ptr %[[VAL_27]]
// CHECK:         %[[VAL_178:.*]] = load float, ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_179:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_178]], i32 16, i32 31)
// CHECK:         store float %[[VAL_179]], ptr %[[VAL_26]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_177]], ptr %[[VAL_26]], ptr %[[VAL_25]])
// CHECK:         %[[VAL_180:.*]] = load float, ptr %[[VAL_25]], align 4
// CHECK:         store float %[[VAL_180]], ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_181:.*]] = load float, ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_182:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_181]], i32 8, i32 31)
// CHECK:         store float %[[VAL_182]], ptr %[[VAL_24]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_177]], ptr %[[VAL_24]], ptr %[[VAL_23]])
// CHECK:         %[[VAL_183:.*]] = load float, ptr %[[VAL_23]], align 4
// CHECK:         store float %[[VAL_183]], ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_184:.*]] = load float, ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_185:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_184]], i32 4, i32 31)
// CHECK:         store float %[[VAL_185]], ptr %[[VAL_22]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_177]], ptr %[[VAL_22]], ptr %[[VAL_21]])
// CHECK:         %[[VAL_186:.*]] = load float, ptr %[[VAL_21]], align 4
// CHECK:         store float %[[VAL_186]], ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_187:.*]] = load float, ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_188:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_187]], i32 2, i32 31)
// CHECK:         store float %[[VAL_188]], ptr %[[VAL_20]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_177]], ptr %[[VAL_20]], ptr %[[VAL_19]])
// CHECK:         %[[VAL_189:.*]] = load float, ptr %[[VAL_19]], align 4
// CHECK:         store float %[[VAL_189]], ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_190:.*]] = load float, ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_191:.*]] = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %[[VAL_190]], i32 1, i32 31)
// CHECK:         store float %[[VAL_191]], ptr %[[VAL_18]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_177]], ptr %[[VAL_18]], ptr %[[VAL_17]])
// CHECK:         %[[VAL_192:.*]] = load float, ptr %[[VAL_17]], align 4
// CHECK:         store float %[[VAL_192]], ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_193:.*]] = icmp eq i32 %[[VAL_64]], 0
// CHECK:         br i1 %[[VAL_193]], label %[[VAL_194:.*]], label %[[VAL_113]]
// CHECK:       reduction_write_output-after:                     ; preds = %[[VAL_195:.*]], %[[VAL_112]]
// CHECK:         br label %[[VAL_51]]
// CHECK:       reduction_write_output-true:                      ; preds = %[[VAL_112]]
// CHECK:         %[[VAL_197:.*]] = add i32 %[[VAL_77]], %[[VAL_65]]
// CHECK:         %[[VAL_198:.*]] = add i32 %[[VAL_78]], %[[VAL_114]]
// CHECK:         %[[VAL_199:.*]] = load float, ptr %[[VAL_177]], align 4
// CHECK:         %[[VAL_200:.*]] = load i32, ptr %[[VAL_201:.*]], align 4
// CHECK:         store i32 %[[VAL_200]], ptr %[[VAL_16]], align 4
// CHECK:         br label %[[VAL_202:.*]]
// CHECK:       atomic_op_loop_exit:                              ; preds = %[[VAL_203:.*]], %[[VAL_202]]
// CHECK:         br label %[[VAL_113]]
// CHECK:       atomic_op_loop_body:                              ; preds = %[[VAL_203]], %[[VAL_194]]
// CHECK:         %[[VAL_204:.*]] = load i32, ptr %[[VAL_16]], align 4
// CHECK:         store i32 %[[VAL_204]], ptr %[[VAL_15]], align 4
// CHECK:         call void @[[MIN]](ptr %[[VAL_15]], ptr %[[VAL_177]], ptr %[[VAL_15]])
// CHECK:         %[[VAL_205:.*]] = load i32, ptr %[[VAL_15]], align 4
// CHECK:         %[[VAL_206:.*]] = icmp eq i32 %[[VAL_204]], %[[VAL_205]]
// CHECK:         br i1 %[[VAL_206]], label %[[VAL_195]], label %[[VAL_203]]
// CHECK:       atomic_op_loop_cas:                               ; preds = %[[VAL_202]]
// CHECK:         %[[VAL_207:.*]] = cmpxchg ptr %[[VAL_201]], i32 %[[VAL_204]], i32 %[[VAL_205]] seq_cst seq_cst, align 4
// CHECK:         %[[VAL_208:.*]] = extractvalue { i32, i1 } %[[VAL_207]], 0
// CHECK:         store i32 %[[VAL_208]], ptr %[[VAL_16]], align 4
// CHECK:         %[[VAL_209:.*]] = extractvalue { i32, i1 } %[[VAL_207]], 1
// CHECK:         br i1 %[[VAL_209]], label %[[VAL_195]], label %[[VAL_202]]
// CHECK:       entry:
// CHECK:         %[[VAL_210:.*]] = alloca float, align 4
// CHECK:         %[[VAL_211:.*]] = load float, ptr %[[VAL_212:.*]], align 4
// CHECK:         %[[VAL_213:.*]] = load float, ptr %[[VAL_214:.*]], align 4
// CHECK:         %[[VAL_215:.*]] = call float @llvm.minimum.f32(float %[[VAL_211]], float %[[VAL_213]])
// CHECK:         store float %[[VAL_215]], ptr %[[VAL_210]], align 4
// CHECK:         %[[VAL_216:.*]] = load float, ptr %[[VAL_210]], align 4
// CHECK:         store float %[[VAL_216]], ptr %[[VAL_217:.*]], align 4
// CHECK:         ret void
