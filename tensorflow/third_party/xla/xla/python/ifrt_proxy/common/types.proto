// Copyright 2023 The OpenXLA Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package xla.ifrt.proto;

import "xla/python/ifrt/serdes.proto";

// Sharding of an Array or Executable parameter/output.
// TODO(b/266635130): Remove `Sharding` and use `xla.ifrt.Serialized` directly
// if caching of sharding is unnecessary.
message Sharding {
  xla.ifrt.Serialized serialized_sharding = 1;
}

// Shape of an Array. Currently we only support static shapes with all
// dimension sizes greater than or equal to 0.
message Shape {
  repeated int64 dimensions = 1;
}

// Data types currently supported. Mirrors `xla::ifrt::DType`.
enum DType {
  DTYPE_UNSPECIFIED = 0;

  // Predicates are two-state booleans.
  DTYPE_PRED = 1;

  // Signed integral values of fixed width.
  DTYPE_S4 = 21;
  DTYPE_S8 = 2;
  DTYPE_S16 = 3;
  DTYPE_S32 = 4;
  DTYPE_S64 = 5;

  // Unsigned integral values of fixed width.
  DTYPE_U4 = 22;
  DTYPE_U8 = 6;
  DTYPE_U16 = 7;
  DTYPE_U32 = 8;
  DTYPE_U64 = 9;

  // Floating-point values of fixed width.
  DTYPE_F16 = 10;
  DTYPE_F32 = 11;
  DTYPE_F64 = 12;

  // Truncated 16 bit floating-point format. This is similar to IEEE's 16 bit
  // floating-point format, but uses 1 bit for the sign, 8 bits for the
  // exponent and 7 bits for the mantissa.
  DTYPE_BF16 = 16;

  // Complex values of fixed width.
  DTYPE_C64 = 15;   // Paired F32 (real, imag), as in std::complex<float>.
  DTYPE_C128 = 18;  // Paired F64 (real, imag), as in std::complex<double>.

  // A token type threaded between side-effecting operations. Shapes of this
  // dtype will have empty dimensions.
  DTYPE_TOKEN = 17;

  DTYPE_F8E4M3FN = 20;
  DTYPE_F8E4M3B11FNUZ = 23;
  DTYPE_F8E4M3FNUZ = 25;
  DTYPE_F8E5M2 = 19;
  DTYPE_F8E5M2FNUZ = 24;
}

// Mirrors `xla::PjRtValueType`, which is used in IFRT to model
// polymorphic-typed values, e.g., `xla::ifrt::Executable::CostAnalysisValue`.
message Variant {
  message Int64List {
    repeated sfixed64 values = 1;
  }

  oneof value {
    bytes string_value = 1;
    sfixed64 int64_value = 2;
    Int64List int64_list = 3;
    float float_value = 4;
  }
}

enum ArrayCopySemantics {
  ARRAY_COPY_SEMANTICS_UNSPECIFIED = 0;
  ARRAY_COPY_SEMANTICS_ALWAYS_COPY = 1;
  ARRAY_COPY_SEMANTICS_REUSE_INPUT = 2;
  ARRAY_COPY_SEMANTICS_DONATE_INPUT = 3;
}

message ByteStrides {
  repeated int64 strides = 1;
}
