==== triton/lib/Conversion/TritonToTritonGPU/TritonGPUConversion.cpp#2 - /google/src/cloud/csigg/triton_sparse/triton/lib/Conversion/TritonToTritonGPU/TritonGPUConversion.cpp ====
# action=edit type=text
--- triton/lib/Conversion/TritonToTritonGPU/TritonGPUConversion.cpp	2024-05-14 06:33:36.000000000 -0700
+++ triton/lib/Conversion/TritonToTritonGPU/TritonGPUConversion.cpp	2024-06-10 00:42:51.000000000 -0700
@@ -67,6 +67,12 @@
   addSourceMaterialization([&](OpBuilder &builder, RankedTensorType tensorType,
                                ValueRange inputs,
                                Location loc) -> std::optional<Value> {
+    // Allows partial TTIR to TTGIR conversion by materializing a conversion for
+    // remaining uses of values that have been converted to a new type.
+    // We use this to rewrite triton_gpu.sparse_dot in a separate pass after
+    // 'convert-triton-to-tritongpu'.
+    return builder.create<triton::gpu::ConvertLayoutOp>(loc, tensorType,
+                                                        inputs);
     llvm_unreachable("Source rematerialization should not happen in Triton -> "
                      "TritonGPU Conversion");
     return std::nullopt;
==== triton/lib/Dialect/TritonGPU/IR/Dialect.cpp#51 - /google/src/cloud/csigg/triton_sparse/triton/lib/Dialect/TritonGPU/IR/Dialect.cpp ====
# action=edit type=text
--- triton/lib/Dialect/TritonGPU/IR/Dialect.cpp	2024-06-07 05:28:31.000000000 -0700
+++ triton/lib/Dialect/TritonGPU/IR/Dialect.cpp	2024-06-10 00:36:52.000000000 -0700
@@ -2852,13 +2852,13 @@
     // heuristic to accommodate fused attention.
     auto srcType = op.getSrc().getType();
     auto dstType = op.getType();
-    if (mlir::isa<DotOperandEncodingAttr>(dstType.getEncoding()) &&
-        mlir::isa<NvidiaMmaEncodingAttr>(srcType.getEncoding()))
+    if (mlir::isa_and_nonnull<DotOperandEncodingAttr>(dstType.getEncoding()) &&
+        mlir::isa_and_nonnull<NvidiaMmaEncodingAttr>(srcType.getEncoding()))
       return failure();
 
     // for hopper MMAv3
-    if (mlir::isa<SharedEncodingAttr>(dstType.getEncoding()) &&
-        mlir::isa<NvidiaMmaEncodingAttr>(srcType.getEncoding()) &&
+    if (mlir::isa_and_nonnull<SharedEncodingAttr>(dstType.getEncoding()) &&
+        mlir::isa_and_nonnull<NvidiaMmaEncodingAttr>(srcType.getEncoding()) &&
         llvm::any_of(op.getResult().getUsers(), [](Operation *dot) {
           return dot->hasTrait<OpTrait::DotLike>();
         })) {
