Auto generated patch. Do not edit or delete it, even if empty.
diff -ruN --strip-trailing-cr a/compiler-rt/test/profile/Posix/gcov-file-change.cpp b/compiler-rt/test/profile/Posix/gcov-file-change.cpp
--- a/compiler-rt/test/profile/Posix/gcov-file-change.cpp
+++ b/compiler-rt/test/profile/Posix/gcov-file-change.cpp
@@ -1,40 +0,0 @@
-// RUN: rm -rf %t && split-file %s %t && cd %t
-// RUN: %clangxx --coverage main.cpp -o t
-// RUN: %run ./t
-// RUN: llvm-cov gcov -t t-main. | FileCheck %s
-
-//--- main.cpp
-#include "a.h"
-#include <stdio.h>
-
-// CHECK:      Runs:1
-/// __cxx_global_var_init contains a block from a.h. Don't attribute its lines to main.cpp.
-// CHECK-NOT:  {{^ +[0-9]+:}}
-
-inline auto *const inl_var_main = // CHECK:      1: [[#]]:inline auto
-    new A;                        // CHECK-NEXT: 1: [[#]]:
-void foo(int x) {                 // CHECK-NEXT: 1: [[#]]:
-  if (x) {                        // CHECK-NEXT: 1: [[#]]:
-#include "a.inc"
-  }
-}
-// CHECK-NOT:  {{^ +[0-9]+:}}
-
-int main(int argc, char *argv[]) { // CHECK:      1: [[#]]:int main
-  foo(1);                          // CHECK-NEXT: 1: [[#]]:
-}                                  // CHECK-NEXT: 1: [[#]]:
-// CHECK-NOT:  {{^ +[0-9]+:}}
-
-// CHECK:      Source:a.h
-// CHECK:      1: 1:struct A
-// CHECK-NOT:  {{^ +[0-9]+:}}
-
-//--- a.h
-struct A { A() { } };              // CHECK:      2: [[#]]:struct A
-inline auto *const inl_var_a =
-    new A;
-/// TODO a.inc:1 should have line execution.
-// CHECK-NOT:  {{^ +[0-9]+:}}
-
-//--- a.inc
-puts("");
diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp b/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp
--- a/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp
+++ b/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp
@@ -898,9 +898,7 @@
 
           if (Line == Loc.getLine()) continue;
           Line = Loc.getLine();
-          MDNode *Scope = Loc.getScope();
-          // TODO: Handle blocks from another file due to #line, #include, etc.
-          if (isa<DILexicalBlockFile>(Scope) || SP != getDISubprogram(Scope))
+          if (SP != getDISubprogram(Loc.getScope()))
             continue;
 
           GCOVLines &Lines = Block.getFile(Filename);
diff -ruN --strip-trailing-cr a/llvm/test/Transforms/ConstantHoisting/X86/pr52689-not-all-uses-rebased.ll b/llvm/test/Transforms/ConstantHoisting/X86/pr52689-not-all-uses-rebased.ll
--- a/llvm/test/Transforms/ConstantHoisting/X86/pr52689-not-all-uses-rebased.ll
+++ b/llvm/test/Transforms/ConstantHoisting/X86/pr52689-not-all-uses-rebased.ll
@@ -10,8 +10,7 @@
 ;
 ; opt: ../lib/Transforms/Scalar/ConstantHoisting.cpp:919: bool llvm::ConstantHoistingPass::emitBaseConstants(llvm::GlobalVariable *): Assertion `UsesNum == (ReBasesNum + NotRebasedNum) && "Not all uses are rebased"' failed.
 
-; CHECK: Assertion
-; CHECK-SAME: UsesNum == (ReBasesNum + NotRebasedNum)
+; CHECK: UsesNum == (ReBasesNum + NotRebasedNum)
 ; CHECK-SAME: Not all uses are rebased
 
 @g_77 = external global [5 x i32]
