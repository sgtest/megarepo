==== triton/include/triton/Analysis/Utility.h#4 - /google/src/cloud/csigg/mlir_641b12e94b8a4e7befbda691364554c186a61639_1686303895/triton/include/triton/Analysis/Utility.h ====
# action=edit type=text
--- triton/include/triton/Analysis/Utility.h	2023-05-26 16:07:06.000000000 -0700
+++ triton/include/triton/Analysis/Utility.h	2023-06-09 02:47:56.000000000 -0700
@@ -119,9 +119,9 @@
 multiRootTopologicalSort(const SetVector<Operation *> &toSort);
 
 /// This uses the toplogicalSort above
-SetVector<Operation *>
-multiRootGetSlice(Operation *op, TransitiveFilter backwardFilter = nullptr,
-                  TransitiveFilter forwardFilter = nullptr);
+SetVector<Operation *> multiRootGetSlice(
+    Operation *op, SliceOptions::TransitiveFilter backwardFilter = nullptr,
+    SliceOptions::TransitiveFilter forwardFilter = nullptr);
 
 /// Create a basic DataFlowSolver with constant and dead code analysis included.
 std::unique_ptr<DataFlowSolver> createDataFlowSolver();
==== triton/lib/Analysis/Utility.cpp#7 - /google/src/cloud/csigg/mlir_641b12e94b8a4e7befbda691364554c186a61639_1686303895/triton/lib/Analysis/Utility.cpp ====
# action=edit type=text
--- triton/lib/Analysis/Utility.cpp	2023-05-26 16:07:06.000000000 -0700
+++ triton/lib/Analysis/Utility.cpp	2023-06-09 03:02:09.000000000 -0700
@@ -317,9 +317,9 @@
   return res;
 }
 
-SetVector<Operation *> multiRootGetSlice(Operation *op,
-                                         TransitiveFilter backwardFilter,
-                                         TransitiveFilter forwardFilter) {
+SetVector<Operation *> multiRootGetSlice(
+    Operation *op, SliceOptions::TransitiveFilter backwardFilter,
+    SliceOptions::TransitiveFilter forwardFilter) {
   SetVector<Operation *> slice;
   slice.insert(op);
 
@@ -330,12 +330,12 @@
     auto *currentOp = (slice)[currentIndex];
     // Compute and insert the backwardSlice starting from currentOp.
     backwardSlice.clear();
-    getBackwardSlice(currentOp, &backwardSlice, backwardFilter);
+    getBackwardSlice(currentOp, &backwardSlice, {{backwardFilter}});
     slice.insert(backwardSlice.begin(), backwardSlice.end());
 
     // Compute and insert the forwardSlice starting from currentOp.
     forwardSlice.clear();
-    getForwardSlice(currentOp, &forwardSlice, forwardFilter);
+    getForwardSlice(currentOp, &forwardSlice, {{forwardFilter}});
     slice.insert(forwardSlice.begin(), forwardSlice.end());
     ++currentIndex;
   }
