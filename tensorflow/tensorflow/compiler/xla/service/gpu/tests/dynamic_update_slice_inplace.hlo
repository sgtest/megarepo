// RUN: hlo_to_llvm_ir %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = load i32, ptr @0, align 4
// CHECK:         %[[VAL_1:.*]] = icmp sge i32 0, %[[VAL_0]]
// CHECK:         %[[VAL_2:.*]] = select i1 %[[VAL_1]], i32 0, i32 %[[VAL_0]]
// CHECK:         %[[VAL_3:.*]] = icmp sle i32 49, %[[VAL_2]]
// CHECK:         %[[VAL_4:.*]] = select i1 %[[VAL_3]], i32 49, i32 %[[VAL_2]]
// CHECK:         %[[VAL_5:.*]] = load i32, ptr @0, align 4
// CHECK:         %[[VAL_6:.*]] = icmp sge i32 0, %[[VAL_5]]
// CHECK:         %[[VAL_7:.*]] = select i1 %[[VAL_6]], i32 0, i32 %[[VAL_5]]
// CHECK:         %[[VAL_8:.*]] = icmp sle i32 0, %[[VAL_7]]
// CHECK:         %[[VAL_9:.*]] = select i1 %[[VAL_8]], i32 0, i32 %[[VAL_7]]
// CHECK:         %[[VAL_10:.*]] = load i32, ptr @0, align 4
// CHECK:         %[[VAL_11:.*]] = icmp sge i32 0, %[[VAL_10]]
// CHECK:         %[[VAL_12:.*]] = select i1 %[[VAL_11]], i32 0, i32 %[[VAL_10]]
// CHECK:         %[[VAL_13:.*]] = icmp sle i32 0, %[[VAL_12]]
// CHECK:         %[[VAL_14:.*]] = select i1 %[[VAL_13]], i32 0, i32 %[[VAL_12]]
// CHECK:         %[[VAL_15:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !2
// CHECK:         %[[VAL_16:.*]] = zext i32 %[[VAL_15]] to i64
// CHECK:         %[[VAL_17:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !3
// CHECK:         %[[VAL_18:.*]] = zext i32 %[[VAL_17]] to i64
// CHECK:         %[[VAL_19:.*]] = mul nuw nsw i64 %[[VAL_16]], 1024
// CHECK:         %[[VAL_20:.*]] = add nuw nsw i64 %[[VAL_19]], %[[VAL_18]]
// CHECK:         %[[VAL_21:.*]] = icmp ult i64 %[[VAL_20]], 98304
// CHECK:         call void @llvm.assume(i1 %[[VAL_21]])
// CHECK:         %[[VAL_22:.*]] = udiv i64 %[[VAL_20]], 1
// CHECK:         %[[VAL_23:.*]] = urem i64 %[[VAL_22]], 1024
// CHECK:         %[[VAL_24:.*]] = udiv i64 %[[VAL_20]], 1024
// CHECK:         %[[VAL_25:.*]] = urem i64 %[[VAL_24]], 96
// CHECK:         %[[VAL_26:.*]] = udiv i64 %[[VAL_20]], 98304
// CHECK:         %[[VAL_27:.*]] = icmp ult i64 %[[VAL_20]], 98304
// CHECK:         br i1 %[[VAL_27]], label %[[VAL_28:.*]], label %[[VAL_29:.*]]
// CHECK:       dynamic-update-slice.4.in_bounds-after:           ; preds = %[[VAL_28]], %[[VAL_30:.*]]
// CHECK:         ret void
// CHECK:       dynamic-update-slice.4.in_bounds-true:            ; preds = %[[VAL_30]]
// CHECK:         %[[VAL_31:.*]] = sext i32 %[[VAL_4]] to i64
// CHECK:         %[[VAL_32:.*]] = add i64 %[[VAL_31]], %[[VAL_26]]
// CHECK:         %[[VAL_33:.*]] = sext i32 %[[VAL_9]] to i64
// CHECK:         %[[VAL_34:.*]] = add i64 %[[VAL_33]], %[[VAL_25]]
// CHECK:         %[[VAL_35:.*]] = sext i32 %[[VAL_14]] to i64
// CHECK:         %[[VAL_36:.*]] = add i64 %[[VAL_35]], %[[VAL_23]]
// CHECK:         %[[VAL_37:.*]] = getelementptr inbounds half, ptr %[[VAL_38:.*]], i64 %[[VAL_20]]
// CHECK:         %[[VAL_39:.*]] = load half, ptr %[[VAL_37]], align 2, !invariant.load !4
// CHECK:         %[[VAL_40:.*]] = getelementptr inbounds [50 x [96 x [1024 x half]]], ptr %[[VAL_41:.*]], i64 0, i64 %[[VAL_32]], i64 %[[VAL_34]], i64 %[[VAL_36]]
// CHECK:         store half %[[VAL_39]], ptr %[[VAL_40]], align 2
// CHECK:         br label %[[VAL_29]]

HloModule TestModule

fusion.1 {
  p.0 = f16[50,96,1024]{2,1,0} parameter(0)
  p.1 = f16[1,96,1024]{2,1,0} parameter(1)
  c.0 = s32[] constant(0)
  ROOT %dynamic-update-slice = f16[50,96,1024]{2,1,0} dynamic-update-slice(p.0, p.1, c.0, c.0, c.0)
}

ENTRY entry {
  p.0 = f16[50,96,1024]{2,1,0} parameter(0)
  p.1 = f16[1,96,1024]{2,1,0} parameter(1)
  ROOT f1 = f16[50,96,1024] fusion(p.0, p.1), kind=kLoop, calls=fusion.1
}

// -----

// CHECK-LABEL: @fusion
// CHECK-SAME: %[[ARG0:[A-Za-z0-9]*]],
// CHECK-SAME: %[[ARG1:[A-Za-z0-9]*]],
// CHECK-SAME: %[[ARG2:[A-Za-z0-9]*]],
// CHECK-SAME: %[[ARG3:[A-Za-z0-9]*]],
// CHECK-SAME: %[[ARG4:[A-Za-z0-9]*]])
// CHECK:        br i1 %[[COND:[A-Za-z0-9]*]], label %[[DUS0:.*]].in_bounds-true, label %[[DUS0]].in_bounds-after
// CHECK:      [[DUS0]].in_bounds-after:
// CHECK:        br i1 %[[COND2:[A-Za-z0-9]*]], label %[[DUS1:.*]].in_bounds-true, label %[[DUS1]].in_bounds-after
// CHECK:      [[DUS1]].in_bounds-after:
// CHECK-NEXT:   ret void
// CHECK:      [[DUS0]].in_bounds-true
// CHECK-DAG:    getelementptr inbounds i16, ptr %[[ARG1]]
// CHECK-DAG:    getelementptr inbounds i16, ptr %[[ARG3]]
// CHECK-DAG:    getelementptr inbounds [10 x [11 x [12 x i16]]], ptr %[[ARG0]]
// CHECK:      [[DUS1]].in_bounds-true
// CHECK-DAG:    getelementptr inbounds i16, ptr %[[ARG1]]
// CHECK-DAG:    getelementptr inbounds i16, ptr %[[ARG3]]
// CHECK-DAG:    getelementptr inbounds [8 x [11 x [12 x i16]]], ptr %[[ARG2]]

HloModule MultipleInplaceDus, input_output_alias={ {0}: (0, {}), {1}: (2, {}) }

fused_computation {
  p0 = bf16[10,11,12] parameter(0)
  p1 = bf16[1,11,12] parameter(1)
  p2 = bf16[8,11,12] parameter(2)
  p3 = bf16[1,11,12] parameter(3)
  p4 = s32[] parameter(4)
  c0 = s32[] constant(0)
  cmp = pred[] compare(p4, c0), direction=EQ
  broadcast = pred[1,11,12] broadcast(cmp), dimensions={}
  select = bf16[1,11,12] select(broadcast, p1, p3)
  dus0 = bf16[10,11,12] dynamic-update-slice(p0, select, c0, c0, c0)
  dus1 = bf16[8,11,12] dynamic-update-slice(p2, select, c0, c0, c0)
  ROOT tuple = (bf16[10,11,12], bf16[8,11,12]) tuple(dus0, dus1)
}

ENTRY main {
  p0 = bf16[10,11,12] parameter(0)
  p1 = bf16[1,11,12] parameter(1)
  p2 = bf16[8,11,12] parameter(2)
  p3 = bf16[1,11,12] parameter(3)
  p4 = s32[] parameter(4)
  ROOT fusion = (bf16[10,11,12], bf16[8,11,12]) fusion(p0, p1, p2, p3, p4), kind=kLoop, calls=fused_computation
}

// -----

// CHECK-LABEL: @fusion_root_bitcast
// CHECK-SAME: %[[ARG0:[A-Za-z0-9]*]],
// CHECK-SAME: %[[ARG1:[A-Za-z0-9]*]],
// CHECK-SAME: %[[ARG2:[A-Za-z0-9]*]],
// CHECK-SAME: %[[ARG3:[A-Za-z0-9]*]],
// CHECK-SAME: %[[ARG4:[A-Za-z0-9]*]])
// CHECK:        br i1 %[[COND:[A-Za-z0-9]*]], label %[[DUS0:.*]].in_bounds-true, label %[[DUS0]].in_bounds-after
// CHECK:      [[DUS0]].in_bounds-after:
// CHECK:        br i1 %[[COND2:[A-Za-z0-9]*]], label %[[DUS1:.*]].in_bounds-true, label %[[DUS1]].in_bounds-after
// CHECK:      [[DUS1]].in_bounds-after:
// CHECK-NEXT:   ret void
// CHECK:      [[DUS0]].in_bounds-true
// CHECK-DAG:    getelementptr inbounds i16, ptr %[[ARG1]]
// CHECK-DAG:    getelementptr inbounds i16, ptr %[[ARG3]]
// CHECK-DAG:    getelementptr inbounds [11 x [10 x [12 x i16]]], ptr %[[ARG0]]
// CHECK:      [[DUS1]].in_bounds-true
// CHECK-DAG:    getelementptr inbounds i16, ptr %[[ARG1]]
// CHECK-DAG:    getelementptr inbounds i16, ptr %[[ARG3]]
// CHECK-DAG:    getelementptr inbounds [8 x [11 x [12 x i16]]], ptr %[[ARG2]]

HloModule MultipleInplaceDusWithBitcastToTheRoot, input_output_alias={ {0}: (0, {}), {1}: (2, {}) }

fused_computation {
  p0 = bf16[10,11,12] parameter(0)
  p1 = bf16[1,11,12] parameter(1)
  p2 = bf16[8,11,12] parameter(2)
  p3 = bf16[1,11,12] parameter(3)
  p4 = s32[] parameter(4)
  c0 = s32[] constant(0)
  cmp = pred[] compare(p4, c0), direction=EQ
  broadcast = pred[1,11,12] broadcast(cmp), dimensions={}
  select = bf16[1,11,12] select(broadcast, p1, p3)
  dus0 = bf16[10,11,12] dynamic-update-slice(p0, select, c0, c0, c0)
  bitcasted_dus0 = bf16[11,10,12] bitcast(dus0)
  dus1 = bf16[8,11,12] dynamic-update-slice(p2, select, c0, c0, c0)
  ROOT tuple = (bf16[11,10,12], bf16[8,11,12]) tuple(bitcasted_dus0, dus1)
}

ENTRY main {
  p0 = bf16[10,11,12] parameter(0)
  p1 = bf16[1,11,12] parameter(1)
  p2 = bf16[8,11,12] parameter(2)
  p3 = bf16[1,11,12] parameter(3)
  p4 = s32[] parameter(4)
  ROOT fusion_root_bitcast = (bf16[11,10,12], bf16[8,11,12]) fusion(p0, p1, p2, p3, p4), kind=kLoop, calls=fused_computation
}

// -----

// CHECK-LABEL: @fusion_root_bitcast
// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = load i32, ptr @0, align 4
// CHECK:         %[[VAL_1:.*]] = icmp sge i32 0, %[[VAL_0]]
// CHECK:         %[[VAL_2:.*]] = select i1 %[[VAL_1]], i32 0, i32 %[[VAL_0]]
// CHECK:         %[[VAL_3:.*]] = icmp sle i32 10, %[[VAL_2]]
// CHECK:         %[[VAL_4:.*]] = select i1 %[[VAL_3]], i32 10, i32 %[[VAL_2]]
// CHECK:         %[[VAL_5:.*]] = load i32, ptr @0, align 4
// CHECK:         %[[VAL_6:.*]] = icmp sge i32 0, %[[VAL_5]]
// CHECK:         %[[VAL_7:.*]] = select i1 %[[VAL_6]], i32 0, i32 %[[VAL_5]]
// CHECK:         %[[VAL_8:.*]] = icmp sle i32 -1, %[[VAL_7]]
// CHECK:         %[[VAL_9:.*]] = select i1 %[[VAL_8]], i32 -1, i32 %[[VAL_7]]
// CHECK:         %[[VAL_10:.*]] = load i32, ptr @0, align 4
// CHECK:         %[[VAL_11:.*]] = icmp sge i32 0, %[[VAL_10]]
// CHECK:         %[[VAL_12:.*]] = select i1 %[[VAL_11]], i32 0, i32 %[[VAL_10]]
// CHECK:         %[[VAL_13:.*]] = icmp sle i32 0, %[[VAL_12]]
// CHECK:         %[[VAL_14:.*]] = select i1 %[[VAL_13]], i32 0, i32 %[[VAL_12]]
// CHECK:         %[[VAL_15:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !2
// CHECK:         %[[VAL_16:.*]] = zext i32 %[[VAL_15]] to i64
// CHECK:         %[[VAL_17:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !3
// CHECK:         %[[VAL_18:.*]] = zext i32 %[[VAL_17]] to i64
// CHECK:         %[[VAL_19:.*]] = mul nuw nsw i64 %[[VAL_16]], 132
// CHECK:         %[[VAL_20:.*]] = add nuw nsw i64 %[[VAL_19]], %[[VAL_18]]
// CHECK:         %[[VAL_21:.*]] = icmp ult i64 %[[VAL_20]], 132
// CHECK:         call void @llvm.assume(i1 %[[VAL_21]])
// CHECK:         %[[VAL_22:.*]] = udiv i64 %[[VAL_20]], 1
// CHECK:         %[[VAL_23:.*]] = urem i64 %[[VAL_22]], 12
// CHECK:         %[[VAL_24:.*]] = udiv i64 %[[VAL_20]], 12
// CHECK:         %[[VAL_25:.*]] = urem i64 %[[VAL_24]], 11
// CHECK:         %[[VAL_26:.*]] = udiv i64 %[[VAL_20]], 132
// CHECK:         %[[VAL_27:.*]] = icmp ult i64 %[[VAL_20]], 132
// CHECK:         br i1 %[[VAL_27]], label %[[VAL_28:.*]], label %[[VAL_29:.*]]
// CHECK:       dynamic-update-slice.9.in_bounds-after:           ; preds = %[[VAL_28]], %[[VAL_30:.*]]
// CHECK:         ret void
// CHECK:       dynamic-update-slice.9.in_bounds-true:            ; preds = %[[VAL_30]]
// CHECK:         %[[VAL_31:.*]] = sext i32 %[[VAL_4]] to i64
// CHECK:         %[[VAL_32:.*]] = add i64 %[[VAL_31]], %[[VAL_26]]
// CHECK:         %[[VAL_33:.*]] = sext i32 %[[VAL_9]] to i64
// CHECK:         %[[VAL_34:.*]] = add i64 %[[VAL_33]], %[[VAL_25]]
// CHECK:         %[[VAL_35:.*]] = sext i32 %[[VAL_14]] to i64
// CHECK:         %[[VAL_36:.*]] = add i64 %[[VAL_35]], %[[VAL_23]]
// CHECK:         %[[VAL_37:.*]] = load i32, ptr %[[VAL_38:.*]], align 4, !invariant.load !4
// CHECK:         %[[VAL_39:.*]] = load i32, ptr @0, align 4
// CHECK:         %[[VAL_40:.*]] = icmp eq i32 %[[VAL_37]], %[[VAL_39]]
// CHECK:         %[[VAL_41:.*]] = zext i1 %[[VAL_40]] to i8
// CHECK:         %[[VAL_42:.*]] = getelementptr inbounds i16, ptr %[[VAL_43:.*]], i64 %[[VAL_20]]
// CHECK:         %[[VAL_44:.*]] = load i16, ptr %[[VAL_42]], align 2, !invariant.load !4
// CHECK:         %[[VAL_45:.*]] = getelementptr inbounds i16, ptr %[[VAL_46:.*]], i64 %[[VAL_20]]
// CHECK:         %[[VAL_47:.*]] = load i16, ptr %[[VAL_45]], align 2, !invariant.load !4
// CHECK:         %[[VAL_48:.*]] = trunc i8 %[[VAL_41]] to i1
// CHECK:         %[[VAL_49:.*]] = select i1 %[[VAL_48]], i16 %[[VAL_44]], i16 %[[VAL_47]]
// CHECK:         %[[VAL_50:.*]] = getelementptr inbounds [11 x [10 x [12 x i16]]], ptr %[[VAL_51:.*]], i64 0, i64 %[[VAL_32]], i64 %[[VAL_34]], i64 %[[VAL_36]]
// CHECK:         store i16 %[[VAL_49]], ptr %[[VAL_50]], align 2
// CHECK:         br label %[[VAL_29]]


HloModule SingleInplaceDusWithBitcastToTheRoot, input_output_alias={ {}: (0, {}) }

single_inplace_dus_with_bitcast {
  p0 = bf16[10,11,12] parameter(0)
  p1 = bf16[1,11,12] parameter(1)
  p2 = bf16[1,11,12] parameter(2)
  p3 = s32[] parameter(3)
  c0 = s32[] constant(0)
  cmp = pred[] compare(p3, c0), direction=EQ
  broadcast = pred[1,11,12] broadcast(cmp), dimensions={}
  select = bf16[1,11,12] select(broadcast, p1, p2)
  dus0 = bf16[10,11,12] dynamic-update-slice(p0, select, c0, c0, c0)
  ROOT bitcasted_dus0 = bf16[11,10,12] bitcast(dus0)
}

ENTRY main {
  p0 = bf16[10,11,12] parameter(0)
  p1 = bf16[1,11,12] parameter(1)
  p2 = bf16[1,11,12] parameter(2)
  p3 = s32[] parameter(3)
  ROOT fusion_root_bitcast = bf16[11,10,12] fusion(p0, p1, p2, p3), kind=kLoop, calls=single_inplace_dus_with_bitcast
}